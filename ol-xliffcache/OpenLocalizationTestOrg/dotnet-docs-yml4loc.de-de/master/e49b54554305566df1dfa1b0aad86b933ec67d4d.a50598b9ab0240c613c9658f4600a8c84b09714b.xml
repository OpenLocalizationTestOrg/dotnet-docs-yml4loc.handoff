{"nodes":[{"content":"Contains information about an asynchronous task registered to a page. This class cannot be inherited.","nodes":[{"pos":[0,101],"content":"Contains information about an asynchronous task registered to a page. This class cannot be inherited.","nodes":[{"content":"Contains information about an asynchronous task registered to a page. This class cannot be inherited.","pos":[0,101],"nodes":[{"content":"Contains information about an asynchronous task registered to a page.","pos":[0,69]},{"content":"This class cannot be inherited.","pos":[70,101]}]}]}],"pos":[1044,1146],"yaml":true},{"content":"ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page. You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing. The asynchronous tasks can be executed in parallel or sequentially.  \n  \n A <xref:System.Web.UI.PageAsyncTask> object must be registered to the page through the <xref:System.Web.UI.Page.RegisterAsyncTask%2A> method. The page itself does not have to be processed asynchronously to execute asynchronous tasks. You can set the `Async` attribute to either `true` (as shown in the following code example) or `false` on the page directive and the asynchronous tasks will still be processed asynchronously:  \n  \n `<%@ Page Async=\"true\" %>`  \n  \n When the `Async` attribute is set to `false`, the thread that executes the page will be blocked until all asynchronous tasks are complete.  \n  \n Any asynchronous tasks registered before the <xref:System.Web.UI.Page.PreRenderComplete> event will be executed automatically by the page if they have not already been executed. Those asynchronous tasks registered after the <xref:System.Web.UI.Page.PreRenderComplete> event must be executed explicitly through the <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method. The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method can also be used to start tasks before the <xref:System.Web.UI.Page.PreRenderComplete> event. The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method executes all the registered asynchronous tasks on the page that have not been executed.  \n  \n By default, an asynchronous task will time out if it has not completed within 45 seconds. You can specify a different time-out value in either the Web.config file or the page directive. The `<pages>` section of the Web.config file contains an `asyncTimeout` attribute, as shown below.  \n  \n `<system.web>`  \n  \n `<pages asyncTimeout=\"30\">`  \n  \n `</pages>`  \n  \n `</system.web>`  \n  \n The page directive contains an `AsyncTimeout` attribute.  \n  \n `<%@ Page AsyncTimeout=\"30\" %>`","nodes":[{"pos":[0,341],"content":"ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page. You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing. The asynchronous tasks can be executed in parallel or sequentially.","nodes":[{"content":"ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page. You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing. The asynchronous tasks can be executed in parallel or sequentially.","pos":[0,341],"nodes":[{"content":"ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page.","pos":[0,124]},{"content":"You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing.","pos":[125,273]},{"content":"The asynchronous tasks can be executed in parallel or sequentially.","pos":[274,341]}]}]},{"pos":[348,773],"content":"A <xref:System.Web.UI.PageAsyncTask> object must be registered to the page through the <xref:System.Web.UI.Page.RegisterAsyncTask%2A> method. The page itself does not have to be processed asynchronously to execute asynchronous tasks. You can set the `Async` attribute to either `true` (as shown in the following code example) or `false` on the page directive and the asynchronous tasks will still be processed asynchronously:","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> object must be registered to the page through the <ph id=\"ph2\">&lt;xref:System.Web.UI.Page.RegisterAsyncTask%2A&gt;</ph> method.","pos":[0,141],"source":"A <xref:System.Web.UI.PageAsyncTask> object must be registered to the page through the <xref:System.Web.UI.Page.RegisterAsyncTask%2A> method."},{"content":"The page itself does not have to be processed asynchronously to execute asynchronous tasks.","pos":[142,233]},{"content":"You can set the <ph id=\"ph1\">`Async`</ph> attribute to either <ph id=\"ph2\">`true`</ph> (as shown in the following code example) or <ph id=\"ph3\">`false`</ph> on the page directive and the asynchronous tasks will still be processed asynchronously:","pos":[234,425],"source":" You can set the `Async` attribute to either `true` (as shown in the following code example) or `false` on the page directive and the asynchronous tasks will still be processed asynchronously:"}]},{"pos":[813,951],"content":"When the <ph id=\"ph1\">`Async`</ph> attribute is set to <ph id=\"ph2\">`false`</ph>, the thread that executes the page will be blocked until all asynchronous tasks are complete.","source":"When the `Async` attribute is set to `false`, the thread that executes the page will be blocked until all asynchronous tasks are complete."},{"pos":[958,1654],"content":"Any asynchronous tasks registered before the <xref:System.Web.UI.Page.PreRenderComplete> event will be executed automatically by the page if they have not already been executed. Those asynchronous tasks registered after the <xref:System.Web.UI.Page.PreRenderComplete> event must be executed explicitly through the <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method. The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method can also be used to start tasks before the <xref:System.Web.UI.Page.PreRenderComplete> event. The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method executes all the registered asynchronous tasks on the page that have not been executed.","nodes":[{"content":"Any asynchronous tasks registered before the <xref:System.Web.UI.Page.PreRenderComplete> event will be executed automatically by the page if they have not already been executed. Those asynchronous tasks registered after the <xref:System.Web.UI.Page.PreRenderComplete> event must be executed explicitly through the <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method. The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method can also be used to start tasks before the <xref:System.Web.UI.Page.PreRenderComplete> event. The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method executes all the registered asynchronous tasks on the page that have not been executed.","pos":[0,696],"nodes":[{"content":"Any asynchronous tasks registered before the <ph id=\"ph1\">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event will be executed automatically by the page if they have not already been executed.","pos":[0,177],"source":"Any asynchronous tasks registered before the <xref:System.Web.UI.Page.PreRenderComplete> event will be executed automatically by the page if they have not already been executed."},{"content":"Those asynchronous tasks registered after the <ph id=\"ph1\">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event must be executed explicitly through the <ph id=\"ph2\">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method.","pos":[178,378],"source":" Those asynchronous tasks registered after the <xref:System.Web.UI.Page.PreRenderComplete> event must be executed explicitly through the <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method can also be used to start tasks before the <ph id=\"ph2\">&lt;xref:System.Web.UI.Page.PreRenderComplete&gt;</ph> event.","pos":[379,540],"source":" The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method can also be used to start tasks before the <xref:System.Web.UI.Page.PreRenderComplete> event."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A&gt;</ph> method executes all the registered asynchronous tasks on the page that have not been executed.","pos":[541,696],"source":" The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method executes all the registered asynchronous tasks on the page that have not been executed."}]}]},{"pos":[1661,1945],"content":"By default, an asynchronous task will time out if it has not completed within 45 seconds. You can specify a different time-out value in either the Web.config file or the page directive. The `<pages>` section of the Web.config file contains an `asyncTimeout` attribute, as shown below.","nodes":[{"content":"By default, an asynchronous task will time out if it has not completed within 45 seconds.","pos":[0,89]},{"content":"You can specify a different time-out value in either the Web.config file or the page directive.","pos":[90,185]},{"content":"The <ph id=\"ph1\">`&lt;pages&gt;`</ph> section of the Web.config file contains an <ph id=\"ph2\">`asyncTimeout`</ph> attribute, as shown below.","pos":[186,284],"source":" The `<pages>` section of the Web.config file contains an `asyncTimeout` attribute, as shown below."}]},{"pos":[2046,2102],"content":"The page directive contains an <ph id=\"ph1\">`AsyncTimeout`</ph> attribute.","source":"The page directive contains an `AsyncTimeout` attribute."}],"pos":[1157,3328],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using an event handler that enables the task to be canceled.","nodes":[{"pos":[0,149],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.PageAsyncTask\"&gt;&lt;/xref&gt;</ph> class using an event handler that enables the task to be canceled.","source":"Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using an event handler that enables the task to be canceled."}],"pos":[5798,5948],"yaml":true},{"content":"This constructor wraps a <xref:System.Web.TaskEventHandler> delegate so that the <xref:System.Web.UI.PageAsyncTask> object can integrate asynchronous code (based on <xref:System.Threading.Tasks.Task> objects) with the existing ASP.NET Web Forms asynchronous pages feature. ASP.NET will signal the <xref:System.Threading.CancellationToken> object that is passed to a <xref:System.Web.TaskEventHandler> delegate for cancellation based on the <xref:System.Web.UI.Page.AsyncTimeout%2A> attribute set in the `@ Page` directive of the Web page. When the <xref:System.Web.UI.Page.AsyncTimeout%2A> value has been reached, the <xref:System.Threading.CancellationToken> object will be signaled. The `CancellationToken` parameter must be passed to any asynchronous APIs that are called by your implementation of the <xref:System.Web.TaskEventHandler> class.","nodes":[{"pos":[0,846],"content":"This constructor wraps a <xref:System.Web.TaskEventHandler> delegate so that the <xref:System.Web.UI.PageAsyncTask> object can integrate asynchronous code (based on <xref:System.Threading.Tasks.Task> objects) with the existing ASP.NET Web Forms asynchronous pages feature. ASP.NET will signal the <xref:System.Threading.CancellationToken> object that is passed to a <xref:System.Web.TaskEventHandler> delegate for cancellation based on the <xref:System.Web.UI.Page.AsyncTimeout%2A> attribute set in the `@ Page` directive of the Web page. When the <xref:System.Web.UI.Page.AsyncTimeout%2A> value has been reached, the <xref:System.Threading.CancellationToken> object will be signaled. The `CancellationToken` parameter must be passed to any asynchronous APIs that are called by your implementation of the <xref:System.Web.TaskEventHandler> class.","nodes":[{"content":"This constructor wraps a <ph id=\"ph1\">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegate so that the <ph id=\"ph2\">&lt;xref:System.Web.UI.PageAsyncTask&gt;</ph> object can integrate asynchronous code (based on <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects) with the existing ASP.NET Web Forms asynchronous pages feature.","pos":[0,272],"source":"This constructor wraps a <xref:System.Web.TaskEventHandler> delegate so that the <xref:System.Web.UI.PageAsyncTask> object can integrate asynchronous code (based on <xref:System.Threading.Tasks.Task> objects) with the existing ASP.NET Web Forms asynchronous pages feature."},{"content":"ASP.NET will signal the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> object that is passed to a <ph id=\"ph2\">&lt;xref:System.Web.TaskEventHandler&gt;</ph> delegate for cancellation based on the <ph id=\"ph3\">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> attribute set in the <ph id=\"ph4\">`@ Page`</ph> directive of the Web page.","pos":[273,538],"source":" ASP.NET will signal the <xref:System.Threading.CancellationToken> object that is passed to a <xref:System.Web.TaskEventHandler> delegate for cancellation based on the <xref:System.Web.UI.Page.AsyncTimeout%2A> attribute set in the `@ Page` directive of the Web page."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Web.UI.Page.AsyncTimeout%2A&gt;</ph> value has been reached, the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationToken&gt;</ph> object will be signaled.","pos":[539,684],"source":" When the <xref:System.Web.UI.Page.AsyncTimeout%2A> value has been reached, the <xref:System.Threading.CancellationToken> object will be signaled."},{"content":"The <ph id=\"ph1\">`CancellationToken`</ph> parameter must be passed to any asynchronous APIs that are called by your implementation of the <ph id=\"ph2\">&lt;xref:System.Web.TaskEventHandler&gt;</ph> class.","pos":[685,846],"source":" The `CancellationToken` parameter must be passed to any asynchronous APIs that are called by your implementation of the <xref:System.Web.TaskEventHandler> class."}]}],"pos":[5959,6806],"yaml":true,"extradata":"MT"},{"content":"An event handler.","nodes":[{"pos":[0,17],"content":"An event handler.","nodes":[{"content":"An event handler.","pos":[0,17]}]}],"pos":[7071,7089],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using an event handler that enables the task to be handled.","nodes":[{"pos":[0,148],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.PageAsyncTask\"&gt;&lt;/xref&gt;</ph> class using an event handler that enables the task to be handled.","source":"Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using an event handler that enables the task to be handled."}],"pos":[8178,8327],"yaml":true},{"content":"An event handler.","nodes":[{"pos":[0,17],"content":"An event handler.","nodes":[{"content":"An event handler.","pos":[0,17]}]}],"pos":[8522,8540],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using the default value for executing in parallel.","nodes":[{"pos":[0,139],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.PageAsyncTask\"&gt;&lt;/xref&gt;</ph> class using the default value for executing in parallel.","source":"Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using the default value for executing in parallel."}],"pos":[9944,10084],"yaml":true},{"content":"This implementation of the constructor sets the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property to `false` so the asynchronous task is not processed in parallel with other tasks on the page.","nodes":[{"pos":[0,207],"content":"This implementation of the constructor sets the <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property to <ph id=\"ph2\">`false`</ph> so the asynchronous task is not processed in parallel with other tasks on the page.","source":"This implementation of the constructor sets the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property to `false` so the asynchronous task is not processed in parallel with other tasks on the page."}],"pos":[10095,10303],"yaml":true,"extradata":"MT"},{"content":"The handler to call when beginning an asynchronous task.","nodes":[{"pos":[0,56],"content":"The handler to call when beginning an asynchronous task.","nodes":[{"content":"The handler to call when beginning an asynchronous task.","pos":[0,56]}]}],"pos":[10587,10644],"yaml":true},{"content":"The handler to call when the task is completed successfully within the time-out period.","nodes":[{"pos":[0,87],"content":"The handler to call when the task is completed successfully within the time-out period.","nodes":[{"content":"The handler to call when the task is completed successfully within the time-out period.","pos":[0,87]}]}],"pos":[10723,10811],"yaml":true},{"content":"The handler to call when the task is not completed successfully within the time-out period.","nodes":[{"pos":[0,91],"content":"The handler to call when the task is not completed successfully within the time-out period.","nodes":[{"content":"The handler to call when the task is not completed successfully within the time-out period.","pos":[0,91]}]}],"pos":[10894,10986],"yaml":true},{"content":"The object that represents the state of the task.","nodes":[{"pos":[0,49],"content":"The object that represents the state of the task.","nodes":[{"content":"The object that represents the state of the task.","pos":[0,49]}]}],"pos":[11047,11097],"yaml":true},{"content":"The <code>beginHandler</code> parameter or <code>endHandler</code> parameter is not specified.","nodes":[{"pos":[0,94],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginHandler</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">endHandler</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is not specified.","source":"The <code>beginHandler</code> parameter or <code>endHandler</code> parameter is not specified."}],"pos":[11260,11355],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using the specified value for executing in parallel.","nodes":[{"pos":[0,141],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.UI.PageAsyncTask\"&gt;&lt;/xref&gt;</ph> class using the specified value for executing in parallel.","source":"Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using the specified value for executing in parallel."}],"pos":[12767,12909],"yaml":true},{"content":"This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.","nodes":[{"pos":[0,146],"content":"This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.","nodes":[{"content":"This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.","pos":[0,146]}]}],"pos":[12920,13067],"yaml":true,"extradata":"MT"},{"content":"The handler to call when beginning an asynchronous task.","nodes":[{"pos":[0,56],"content":"The handler to call when beginning an asynchronous task.","nodes":[{"content":"The handler to call when beginning an asynchronous task.","pos":[0,56]}]}],"pos":[13904,13961],"yaml":true},{"content":"The handler to call when the task is completed successfully within the time-out period.","nodes":[{"pos":[0,87],"content":"The handler to call when the task is completed successfully within the time-out period.","nodes":[{"content":"The handler to call when the task is completed successfully within the time-out period.","pos":[0,87]}]}],"pos":[14040,14128],"yaml":true},{"content":"The handler to call when the task is not completed successfully within the time-out period.","nodes":[{"pos":[0,91],"content":"The handler to call when the task is not completed successfully within the time-out period.","nodes":[{"content":"The handler to call when the task is not completed successfully within the time-out period.","pos":[0,91]}]}],"pos":[14211,14303],"yaml":true},{"content":"The object that represents the state of the task.","nodes":[{"pos":[0,49],"content":"The object that represents the state of the task.","nodes":[{"content":"The object that represents the state of the task.","pos":[0,49]}]}],"pos":[14364,14414],"yaml":true},{"content":"The value that indicates whether the task can be processed in parallel with other tasks.","nodes":[{"pos":[0,88],"content":"The value that indicates whether the task can be processed in parallel with other tasks.","nodes":[{"content":"The value that indicates whether the task can be processed in parallel with other tasks.","pos":[0,88]}]}],"pos":[14488,14577],"yaml":true},{"content":"The <code>beginHandler</code> parameter or <code>endHandler</code> parameter is not specified.","nodes":[{"pos":[0,94],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">beginHandler</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">endHandler</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is not specified.","source":"The <code>beginHandler</code> parameter or <code>endHandler</code> parameter is not specified."}],"pos":[14740,14835],"yaml":true},{"content":"Gets the method to call when beginning an asynchronous task.","nodes":[{"pos":[0,60],"content":"Gets the method to call when beginning an asynchronous task.","nodes":[{"content":"Gets the method to call when beginning an asynchronous task.","pos":[0,60]}]}],"pos":[15711,15772],"yaml":true},{"content":"The <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegate is set in the constructor.","nodes":[{"pos":[0,90],"content":"The <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegate is set in the constructor.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.BeginHandler%2A&gt;</ph> delegate is set in the constructor.","pos":[0,90],"source":"The <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegate is set in the constructor."}]}],"pos":[15783,15874],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Web.BeginEventHandler\"></xref> delegate that represents the method to call when beginning the asynchronous task.","nodes":[{"pos":[0,133],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Web.BeginEventHandler\"&gt;&lt;/xref&gt;</ph> delegate that represents the method to call when beginning the asynchronous task.","source":"A <xref href=\"System.Web.BeginEventHandler\"></xref> delegate that represents the method to call when beginning the asynchronous task."}],"pos":[17002,17136],"yaml":true},{"content":"Gets the method to call when the task completes successfully within the time-out period.","nodes":[{"pos":[0,88],"content":"Gets the method to call when the task completes successfully within the time-out period.","nodes":[{"content":"Gets the method to call when the task completes successfully within the time-out period.","pos":[0,88]}]}],"pos":[18071,18160],"yaml":true},{"content":"The <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegate is set in the constructor.","nodes":[{"pos":[0,88],"content":"The <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegate is set in the constructor.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.EndHandler%2A&gt;</ph> delegate is set in the constructor.","pos":[0,88],"source":"The <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegate is set in the constructor."}]}],"pos":[18171,18260],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Web.EndEventHandler\"></xref> delegate that represents the method to call when the task completes successfully within the time-out period.","nodes":[{"pos":[0,159],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Web.EndEventHandler\"&gt;&lt;/xref&gt;</ph> delegate that represents the method to call when the task completes successfully within the time-out period.","source":"An <xref href=\"System.Web.EndEventHandler\"></xref> delegate that represents the method to call when the task completes successfully within the time-out period."}],"pos":[19381,19541],"yaml":true},{"content":"Gets a value that indicates whether the task can be processed in parallel with other tasks.","nodes":[{"pos":[0,91],"content":"Gets a value that indicates whether the task can be processed in parallel with other tasks.","nodes":[{"content":"Gets a value that indicates whether the task can be processed in parallel with other tasks.","pos":[0,91]}]}],"pos":[20516,20608],"yaml":true},{"content":"The <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set in the constructor. When multiple tasks are registered in a page and the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `true`, then those tasks are processed concurrently. However, if the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `false`, then those tasks are processed sequentially. For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `true`, both tasks will complete in 5 seconds. If <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `false` for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.","nodes":[{"pos":[0,865],"content":"The <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set in the constructor. When multiple tasks are registered in a page and the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `true`, then those tasks are processed concurrently. However, if the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `false`, then those tasks are processed sequentially. For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `true`, both tasks will complete in 5 seconds. If <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `false` for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set in the constructor.","pos":[0,95],"source":"The <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set in the constructor."},{"content":"When multiple tasks are registered in a page and the <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set to <ph id=\"ph2\">`true`</ph>, then those tasks are processed concurrently.","pos":[96,276],"source":" When multiple tasks are registered in a page and the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `true`, then those tasks are processed concurrently."},{"content":"However, if the <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>, then those tasks are processed sequentially.","pos":[277,421],"source":" However, if the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `false`, then those tasks are processed sequentially."},{"content":"For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> is set to <ph id=\"ph2\">`true`</ph>, both tasks will complete in 5 seconds.","pos":[422,631],"source":" For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `true`, both tasks will complete in 5 seconds."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A&gt;</ph> is set to <ph id=\"ph2\">`false`</ph> for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.","pos":[632,865],"source":" If <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `false` for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task."}]}],"pos":[20619,21485],"yaml":true,"extradata":"MT"},{"content":"`true` if the task should be processed in parallel with other tasks; otherwise, `false`.","nodes":[{"pos":[0,88],"content":"<ph id=\"ph1\">`true`</ph> if the task should be processed in parallel with other tasks; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the task should be processed in parallel with other tasks; otherwise, `false`."}],"pos":[22135,22226],"yaml":true},{"content":"Gets an object that represents the state of the task.","nodes":[{"pos":[0,53],"content":"Gets an object that represents the state of the task.","nodes":[{"content":"Gets an object that represents the state of the task.","pos":[0,53]}]}],"pos":[23136,23190],"yaml":true},{"content":"The <xref:System.Web.UI.PageAsyncTask.State%2A> property is set in the constructor and cannot be modified during execution of the asynchronous task. You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <xref:System.Web.UI.PageAsyncTask.State%2A> properties.","nodes":[{"pos":[0,309],"content":"The <xref:System.Web.UI.PageAsyncTask.State%2A> property is set in the constructor and cannot be modified during execution of the asynchronous task. You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <xref:System.Web.UI.PageAsyncTask.State%2A> properties.","nodes":[{"content":"The <xref:System.Web.UI.PageAsyncTask.State%2A> property is set in the constructor and cannot be modified during execution of the asynchronous task. You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <xref:System.Web.UI.PageAsyncTask.State%2A> properties.","pos":[0,309],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> property is set in the constructor and cannot be modified during execution of the asynchronous task.","pos":[0,148],"source":"The <xref:System.Web.UI.PageAsyncTask.State%2A> property is set in the constructor and cannot be modified during execution of the asynchronous task."},{"content":"You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.State%2A&gt;</ph> properties.","pos":[149,309],"source":" You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <xref:System.Web.UI.PageAsyncTask.State%2A> properties."}]}]}],"pos":[23201,23511],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> that represents the state of the task.","nodes":[{"pos":[0,76],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that represents the state of the task.","source":"An <xref href=\"System.Object\"></xref> that represents the state of the task."}],"pos":[24198,24275],"yaml":true},{"content":"Gets the method to call when the task does not complete successfully within the time-out period.","nodes":[{"pos":[0,96],"content":"Gets the method to call when the task does not complete successfully within the time-out period.","nodes":[{"content":"Gets the method to call when the task does not complete successfully within the time-out period.","pos":[0,96]}]}],"pos":[25227,25324],"yaml":true},{"content":"The <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegate is set in the constructor.","nodes":[{"pos":[0,92],"content":"The <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegate is set in the constructor.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A&gt;</ph> delegate is set in the constructor.","pos":[0,92],"source":"The <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegate is set in the constructor."}]}],"pos":[25335,25428],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Web.EndEventHandler\"></xref> delegate that represents the method to call when the task does not complete successfully within the time-out period.","nodes":[{"pos":[0,167],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Web.EndEventHandler\"&gt;&lt;/xref&gt;</ph> delegate that represents the method to call when the task does not complete successfully within the time-out period.","source":"An <xref href=\"System.Web.EndEventHandler\"></xref> delegate that represents the method to call when the task does not complete successfully within the time-out period."}],"pos":[26556,26724],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.UI.PageAsyncTask\n  commentId: T:System.Web.UI.PageAsyncTask\n  id: PageAsyncTask\n  children:\n  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})\n  - System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})\n  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)\n  - System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)\n  - System.Web.UI.PageAsyncTask.BeginHandler\n  - System.Web.UI.PageAsyncTask.EndHandler\n  - System.Web.UI.PageAsyncTask.ExecuteInParallel\n  - System.Web.UI.PageAsyncTask.State\n  - System.Web.UI.PageAsyncTask.TimeoutHandler\n  langs:\n  - csharp\n  name: PageAsyncTask\n  nameWithType: PageAsyncTask\n  fullName: System.Web.UI.PageAsyncTask\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Contains information about an asynchronous task registered to a page. This class cannot be inherited.\n  remarks: \"ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page. You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing. The asynchronous tasks can be executed in parallel or sequentially.  \\n  \\n A <xref:System.Web.UI.PageAsyncTask> object must be registered to the page through the <xref:System.Web.UI.Page.RegisterAsyncTask%2A> method. The page itself does not have to be processed asynchronously to execute asynchronous tasks. You can set the `Async` attribute to either `true` (as shown in the following code example) or `false` on the page directive and the asynchronous tasks will still be processed asynchronously:  \\n  \\n `<%@ Page Async=\\\"true\\\" %>`  \\n  \\n When the `Async` attribute is set to `false`, the thread that executes the page will be blocked until all asynchronous tasks are complete.  \\n  \\n Any asynchronous tasks registered before the <xref:System.Web.UI.Page.PreRenderComplete> event will be executed automatically by the page if they have not already been executed. Those asynchronous tasks registered after the <xref:System.Web.UI.Page.PreRenderComplete> event must be executed explicitly through the <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method. The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method can also be used to start tasks before the <xref:System.Web.UI.Page.PreRenderComplete> event. The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method executes all the registered asynchronous tasks on the page that have not been executed.  \\n  \\n By default, an asynchronous task will time out if it has not completed within 45 seconds. You can specify a different time-out value in either the Web.config file or the page directive. The `<pages>` section of the Web.config file contains an `asyncTimeout` attribute, as shown below.  \\n  \\n `<system.web>`  \\n  \\n `<pages asyncTimeout=\\\"30\\\">`  \\n  \\n `</pages>`  \\n  \\n `</system.web>`  \\n  \\n The page directive contains an `AsyncTimeout` attribute.  \\n  \\n `<%@ Page AsyncTimeout=\\\"30\\\" %>`\"\n  example:\n  - \"The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  -->  \\n  \\n [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]\\n [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]\"\n  syntax:\n    content: public sealed class PageAsyncTask\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})\n  commentId: M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})\n  id: '#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})'\n  parent: System.Web.UI.PageAsyncTask\n  langs:\n  - csharp\n  name: PageAsyncTask(Func<CancellationToken,Task>)\n  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)\n  fullName: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using an event handler that enables the task to be canceled.\n  remarks: This constructor wraps a <xref:System.Web.TaskEventHandler> delegate so that the <xref:System.Web.UI.PageAsyncTask> object can integrate asynchronous code (based on <xref:System.Threading.Tasks.Task> objects) with the existing ASP.NET Web Forms asynchronous pages feature. ASP.NET will signal the <xref:System.Threading.CancellationToken> object that is passed to a <xref:System.Web.TaskEventHandler> delegate for cancellation based on the <xref:System.Web.UI.Page.AsyncTimeout%2A> attribute set in the `@ Page` directive of the Web page. When the <xref:System.Web.UI.Page.AsyncTimeout%2A> value has been reached, the <xref:System.Threading.CancellationToken> object will be signaled. The `CancellationToken` parameter must be passed to any asynchronous APIs that are called by your implementation of the <xref:System.Web.TaskEventHandler> class.\n  syntax:\n    content: public PageAsyncTask (Func<System.Threading.CancellationToken,System.Threading.Tasks.Task> handler);\n    parameters:\n    - id: handler\n      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}\n      description: An event handler.\n  overload: System.Web.UI.PageAsyncTask.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})\n  commentId: M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})\n  id: '#ctor(System.Func{System.Threading.Tasks.Task})'\n  parent: System.Web.UI.PageAsyncTask\n  langs:\n  - csharp\n  name: PageAsyncTask(Func<Task>)\n  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)\n  fullName: PageAsyncTask.PageAsyncTask(Func<Task>)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using an event handler that enables the task to be handled.\n  syntax:\n    content: public PageAsyncTask (Func<System.Threading.Tasks.Task> handler);\n    parameters:\n    - id: handler\n      type: System.Func{System.Threading.Tasks.Task}\n      description: An event handler.\n  overload: System.Web.UI.PageAsyncTask.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)\n  commentId: M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)\n  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)'\n  parent: System.Web.UI.PageAsyncTask\n  langs:\n  - csharp\n  name: PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object)\n  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object)\n  fullName: PageAsyncTask.PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using the default value for executing in parallel.\n  remarks: This implementation of the constructor sets the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property to `false` so the asynchronous task is not processed in parallel with other tasks on the page.\n  syntax:\n    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);\n    parameters:\n    - id: beginHandler\n      type: System.Web.BeginEventHandler\n      description: The handler to call when beginning an asynchronous task.\n    - id: endHandler\n      type: System.Web.EndEventHandler\n      description: The handler to call when the task is completed successfully within the time-out period.\n    - id: timeoutHandler\n      type: System.Web.EndEventHandler\n      description: The handler to call when the task is not completed successfully within the time-out period.\n    - id: state\n      type: System.Object\n      description: The object that represents the state of the task.\n  overload: System.Web.UI.PageAsyncTask.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>beginHandler</code> parameter or <code>endHandler</code> parameter is not specified.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)\n  commentId: M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)\n  id: '#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)'\n  parent: System.Web.UI.PageAsyncTask\n  langs:\n  - csharp\n  name: PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object, Boolean)\n  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object, Boolean)\n  fullName: PageAsyncTask.PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Initializes a new instance of the <xref href=\"System.Web.UI.PageAsyncTask\"></xref> class using the specified value for executing in parallel.\n  remarks: This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.\n  example:\n  - \"The following code example creates three asynchronous tasks that are processed in parallel to each other. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \\n  \\n [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]\\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]\"\n  syntax:\n    content: public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);\n    parameters:\n    - id: beginHandler\n      type: System.Web.BeginEventHandler\n      description: The handler to call when beginning an asynchronous task.\n    - id: endHandler\n      type: System.Web.EndEventHandler\n      description: The handler to call when the task is completed successfully within the time-out period.\n    - id: timeoutHandler\n      type: System.Web.EndEventHandler\n      description: The handler to call when the task is not completed successfully within the time-out period.\n    - id: state\n      type: System.Object\n      description: The object that represents the state of the task.\n    - id: executeInParallel\n      type: System.Boolean\n      description: The value that indicates whether the task can be processed in parallel with other tasks.\n  overload: System.Web.UI.PageAsyncTask.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>beginHandler</code> parameter or <code>endHandler</code> parameter is not specified.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.PageAsyncTask.BeginHandler\n  commentId: P:System.Web.UI.PageAsyncTask.BeginHandler\n  id: BeginHandler\n  parent: System.Web.UI.PageAsyncTask\n  langs:\n  - csharp\n  name: BeginHandler\n  nameWithType: PageAsyncTask.BeginHandler\n  fullName: PageAsyncTask.BeginHandler\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Gets the method to call when beginning an asynchronous task.\n  remarks: The <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegate is set in the constructor.\n  example:\n  - \"The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegate is specified for each task.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  -->  \\n  \\n [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]\\n [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]\"\n  syntax:\n    content: public System.Web.BeginEventHandler BeginHandler { get; }\n    return:\n      type: System.Web.BeginEventHandler\n      description: A <xref href=\"System.Web.BeginEventHandler\"></xref> delegate that represents the method to call when beginning the asynchronous task.\n  overload: System.Web.UI.PageAsyncTask.BeginHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.PageAsyncTask.EndHandler\n  commentId: P:System.Web.UI.PageAsyncTask.EndHandler\n  id: EndHandler\n  parent: System.Web.UI.PageAsyncTask\n  langs:\n  - csharp\n  name: EndHandler\n  nameWithType: PageAsyncTask.EndHandler\n  fullName: PageAsyncTask.EndHandler\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Gets the method to call when the task completes successfully within the time-out period.\n  remarks: The <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegate is set in the constructor.\n  example:\n  - \"The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. An <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegate is specified for each task.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  -->  \\n  \\n [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]\\n [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]\"\n  syntax:\n    content: public System.Web.EndEventHandler EndHandler { get; }\n    return:\n      type: System.Web.EndEventHandler\n      description: An <xref href=\"System.Web.EndEventHandler\"></xref> delegate that represents the method to call when the task completes successfully within the time-out period.\n  overload: System.Web.UI.PageAsyncTask.EndHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel\n  commentId: P:System.Web.UI.PageAsyncTask.ExecuteInParallel\n  id: ExecuteInParallel\n  parent: System.Web.UI.PageAsyncTask\n  langs:\n  - csharp\n  name: ExecuteInParallel\n  nameWithType: PageAsyncTask.ExecuteInParallel\n  fullName: PageAsyncTask.ExecuteInParallel\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Gets a value that indicates whether the task can be processed in parallel with other tasks.\n  remarks: The <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set in the constructor. When multiple tasks are registered in a page and the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `true`, then those tasks are processed concurrently. However, if the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `false`, then those tasks are processed sequentially. For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `true`, both tasks will complete in 5 seconds. If <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `false` for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.\n  example:\n  - \"The following code example defines three asynchronous tasks that are each set to be processed in parallel. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \\n  \\n [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]\\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]\"\n  syntax:\n    content: public bool ExecuteInParallel { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the task should be processed in parallel with other tasks; otherwise, `false`.'\n  overload: System.Web.UI.PageAsyncTask.ExecuteInParallel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.PageAsyncTask.State\n  commentId: P:System.Web.UI.PageAsyncTask.State\n  id: State\n  parent: System.Web.UI.PageAsyncTask\n  langs:\n  - csharp\n  name: State\n  nameWithType: PageAsyncTask.State\n  fullName: PageAsyncTask.State\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Gets an object that represents the state of the task.\n  remarks: The <xref:System.Web.UI.PageAsyncTask.State%2A> property is set in the constructor and cannot be modified during execution of the asynchronous task. You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <xref:System.Web.UI.PageAsyncTask.State%2A> properties.\n  example:\n  - \"The following code example creates three asynchronous tasks and gives them unique values for their <xref:System.Web.UI.PageAsyncTask.State%2A> properties. This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.  \\n  \\n [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]\\n [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]\"\n  syntax:\n    content: public object State { get; }\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that represents the state of the task.\n  overload: System.Web.UI.PageAsyncTask.State*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.UI.PageAsyncTask.TimeoutHandler\n  commentId: P:System.Web.UI.PageAsyncTask.TimeoutHandler\n  id: TimeoutHandler\n  parent: System.Web.UI.PageAsyncTask\n  langs:\n  - csharp\n  name: TimeoutHandler\n  nameWithType: PageAsyncTask.TimeoutHandler\n  fullName: PageAsyncTask.TimeoutHandler\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.UI\n  summary: Gets the method to call when the task does not complete successfully within the time-out period.\n  remarks: The <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegate is set in the constructor.\n  example:\n  - \"The following code example registers three asynchronous tasks to a page and executes them in parallel. Each task calls a method that merely causes the thread to sleep for 5 seconds. A <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegate is specified for each task.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]  -->\\n <!-- TODO: review snippet reference [!code-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  -->  \\n  \\n [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]\\n [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]\"\n  syntax:\n    content: public System.Web.EndEventHandler TimeoutHandler { get; }\n    return:\n      type: System.Web.EndEventHandler\n      description: An <xref href=\"System.Web.EndEventHandler\"></xref> delegate that represents the method to call when the task does not complete successfully within the time-out period.\n  overload: System.Web.UI.PageAsyncTask.TimeoutHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: PageAsyncTask(Func<CancellationToken,Task>)\n  nameWithType: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)\n  fullName: PageAsyncTask.PageAsyncTask(Func<CancellationToken,Task>)\n- uid: System.Func`2\n  name: Func<T,TResult>\n  nameWithType: Func<T,TResult>\n  fullName: System.Func<T,TResult>\n- uid: System.Threading.CancellationToken\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Threading.Tasks.Task\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task}\n  parent: System\n  isExternal: false\n  name: Func<CancellationToken,Task>\n  nameWithType: Func<CancellationToken,Task>\n  fullName: System.Func<System.Threading.CancellationToken,System.Threading.Tasks.Task>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    nameWithType: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: PageAsyncTask(Func<Task>)\n  nameWithType: PageAsyncTask.PageAsyncTask(Func<Task>)\n  fullName: PageAsyncTask.PageAsyncTask(Func<Task>)\n- uid: System.Func`1\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: System.Func{System.Threading.Tasks.Task}\n  parent: System\n  isExternal: false\n  name: Func<Task>\n  nameWithType: Func<Task>\n  fullName: System.Func<System.Threading.Tasks.Task>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object)\n  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object)\n  fullName: PageAsyncTask.PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object)\n- uid: System.Web.BeginEventHandler\n  parent: System.Web\n  isExternal: false\n  name: BeginEventHandler\n  nameWithType: BeginEventHandler\n  fullName: System.Web.BeginEventHandler\n- uid: System.Web.EndEventHandler\n  parent: System.Web\n  isExternal: false\n  name: EndEventHandler\n  nameWithType: EndEventHandler\n  fullName: System.Web.EndEventHandler\n- uid: System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object, Boolean)\n  nameWithType: PageAsyncTask.PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object, Boolean)\n  fullName: PageAsyncTask.PageAsyncTask(BeginEventHandler, EndEventHandler, EndEventHandler, Object, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.UI.PageAsyncTask.BeginHandler\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: BeginHandler\n  nameWithType: PageAsyncTask.BeginHandler\n  fullName: PageAsyncTask.BeginHandler\n- uid: System.Web.UI.PageAsyncTask.EndHandler\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: EndHandler\n  nameWithType: PageAsyncTask.EndHandler\n  fullName: PageAsyncTask.EndHandler\n- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: ExecuteInParallel\n  nameWithType: PageAsyncTask.ExecuteInParallel\n  fullName: PageAsyncTask.ExecuteInParallel\n- uid: System.Web.UI.PageAsyncTask.State\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: State\n  nameWithType: PageAsyncTask.State\n  fullName: PageAsyncTask.State\n- uid: System.Web.UI.PageAsyncTask.TimeoutHandler\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: TimeoutHandler\n  nameWithType: PageAsyncTask.TimeoutHandler\n  fullName: PageAsyncTask.TimeoutHandler\n- uid: System.Web.UI.PageAsyncTask.#ctor*\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: PageAsyncTask\n  nameWithType: PageAsyncTask.PageAsyncTask\n  fullName: PageAsyncTask.PageAsyncTask\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n- uid: System.Web.UI.PageAsyncTask.BeginHandler*\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: BeginHandler\n  nameWithType: PageAsyncTask.BeginHandler\n  fullName: PageAsyncTask.BeginHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n- uid: System.Web.UI.PageAsyncTask.EndHandler*\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: EndHandler\n  nameWithType: PageAsyncTask.EndHandler\n  fullName: PageAsyncTask.EndHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n- uid: System.Web.UI.PageAsyncTask.ExecuteInParallel*\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: ExecuteInParallel\n  nameWithType: PageAsyncTask.ExecuteInParallel\n  fullName: PageAsyncTask.ExecuteInParallel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n- uid: System.Web.UI.PageAsyncTask.State*\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: State\n  nameWithType: PageAsyncTask.State\n  fullName: PageAsyncTask.State\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n- uid: System.Web.UI.PageAsyncTask.TimeoutHandler*\n  parent: System.Web.UI.PageAsyncTask\n  isExternal: false\n  name: TimeoutHandler\n  nameWithType: PageAsyncTask.TimeoutHandler\n  fullName: PageAsyncTask.TimeoutHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/PageAsyncTask.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}