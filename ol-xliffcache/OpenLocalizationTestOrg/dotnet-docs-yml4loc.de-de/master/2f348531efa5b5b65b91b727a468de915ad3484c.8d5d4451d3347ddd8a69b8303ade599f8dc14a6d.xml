{"nodes":[{"content":"Provides a simple listener that directs logging output to file.","nodes":[{"pos":[0,63],"content":"Provides a simple listener that directs logging output to file.","nodes":[{"content":"Provides a simple listener that directs logging output to file.","pos":[0,63]}]}],"pos":[2652,2716],"yaml":true},{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class provides automated maintenance capabilities to archive log files as needed, on a daily or per-application basis. This automatic archival functionality helps reduce the maintenance responsibilities of developers and administrators.  \n  \n An instance of <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collections to redirect output from logging to a text file. Instances of this class can also be added to `My.Application.Log` or `My.Log` (for Web applications) in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] applications. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  \n  \n The main features of this class are:  \n  \n1.  *Archival functionality*. The log files generated by this class are named according to the base name and the date, along with a number to distinguish the log file from successive versions of the log. New log files are created on an as-needed basis.  \n  \n     The explicit form of the file name is `baseName`[-`dateStamp`][-`version`].log, where:  \n  \n    -   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \n  \n    -   The `dateStamp` part has the format \"YYYY-MM-DD\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  \n  \n    -   If more than one log file is needed with the same `baseName` and `dateStamp`, the `version` part, a positive `Integer`, is added to the file name.  \n  \n2.  *Multiple class instances*. If an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to a file that is in use:  \n  \n    -   The class shares the file if it is being used by another instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class in the same process.  \n  \n    -   The class creates a new log file using the next available name if the file is being used by another process.  \n  \n3.  *Thread safety*. The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class is thread safe. This allows you to safely write messages to the log from multiple threads without using locks.  \n  \n **Log-File Location**  \n  \n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property takes a <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration to specify one of the typical directories to write the log file to.  \n  \n-   To write the log to another location, set the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property to that location.  \n  \n **Log-File Name**  \n  \n-   The base name for the log file is specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \n  \n-   The current log file name can be read from the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property. It is derived from several other properties and the current state of the logs in the file system.  \n  \n **Log Maintenance**  \n  \n-   The minimum frequency for creating new log files is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. When the value is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>, a new log file is created at least once every day or week, and a date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.  \n  \n-   The maximum size (in bytes) of the log file is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property. If the log file size exceeds this size, additional messages written to the log are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.  \n  \n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> property determines how much free space (in bytes) must be available. This helps ensure that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class will not consume all available disk space. Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to specify the behavior of log writes when there are less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> bytes free.  \n  \n **Log-File Output Settings**  \n  \n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property specifies whether the underlying stream should be flushed automatically after each write to the log file.  \n  \n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property specifies whether to append messages to the current log file, if allowed, or write them to a new log file.  \n  \n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies the string to use for delimiting the fields within a log message.  \n  \n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property specifies the encoding to use when creating a new log file.  \n  \n **Log-File Output**  \n  \n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods write messages to the log file. These methods check the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property, along with any existing logs with the same base name to determine if a new log should be created.  \n  \n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method flushes any messages currently in the output buffer to the log file.  \n  \n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method closes the log file so that it can be used by other processes.  \n  \n **Enabling Output**  \n  \n You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], refer to the documentation for your compiler.  \n  \n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], add the `/d:DEBUG=True` flag to the compiler command line.  \n  \n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], add the `/d:TRACE=True` flag to the compiler command line.  \n  \n To set the level of your listener, edit the configuration file for your application. Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted like the following example.  \n  \n For this example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).  \n  \n```  \n<configuration>  \n    <system.diagnostics>  \n        <sharedListeners>  \n            <add name=\"FileLog\"  \n                type=\"Microsoft.VisualBasic.Logging.FileLogTraceListener,   \n                      Microsoft.VisualBasic, Version=8.0.0.0,   \n                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   \n                      processorArchitecture=MSIL\"   \n                initializeData=\"FileLogWriter\"/>  \n        </sharedListeners>  \n    </system.diagnostics>  \n</configuration>  \n```","nodes":[{"pos":[0,298],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class provides automated maintenance capabilities to archive log files as needed, on a daily or per-application basis. This automatic archival functionality helps reduce the maintenance responsibilities of developers and administrators.","nodes":[{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class provides automated maintenance capabilities to archive log files as needed, on a daily or per-application basis. This automatic archival functionality helps reduce the maintenance responsibilities of developers and administrators.","pos":[0,298],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class provides automated maintenance capabilities to archive log files as needed, on a daily or per-application basis.","pos":[0,180],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class provides automated maintenance capabilities to archive log files as needed, on a daily or per-application basis."},{"content":"This automatic archival functionality helps reduce the maintenance responsibilities of developers and administrators.","pos":[181,298]}]}]},{"pos":[305,985],"content":"An instance of <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collections to redirect output from logging to a text file. Instances of this class can also be added to `My.Application.Log` or `My.Log` (for Web applications) in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] applications. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`","nodes":[{"content":"An instance of <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> can be added to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName&gt;</ph> collections to redirect output from logging to a text file.","pos":[0,295],"source":"An instance of <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collections to redirect output from logging to a text file."},{"content":"Instances of this class can also be added to <ph id=\"ph1\">`My.Application.Log`</ph> or <ph id=\"ph2\">`My.Log`</ph> (for Web applications) in <ph id=\"ph3\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph> applications.","pos":[296,457],"source":" Instances of this class can also be added to `My.Application.Log` or `My.Log` (for Web applications) in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] applications."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Changing Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)</ept><ph id=\"ph1\">`.`</ph>","pos":[458,680],"source":" For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`"}]},{"pos":[992,1028],"content":"The main features of this class are:","nodes":[{"content":"The main features of this class are:","pos":[0,36]}]},{"pos":[1038,1286],"content":"*Archival functionality*. The log files generated by this class are named according to the base name and the date, along with a number to distinguish the log file from successive versions of the log. New log files are created on an as-needed basis.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>Archival functionality<ept id=\"p1\">*</ept>.","pos":[0,25],"source":"*Archival functionality*."},{"content":"The log files generated by this class are named according to the base name and the date, along with a number to distinguish the log file from successive versions of the log.","pos":[26,199]},{"content":"New log files are created on an as-needed basis.","pos":[200,248]}]},{"pos":[1297,1383],"content":"The explicit form of the file name is <ph id=\"ph1\">`baseName`</ph>[-<ph id=\"ph2\">`dateStamp`</ph>][-<ph id=\"ph3\">`version`</ph>].log, where:","source":"The explicit form of the file name is `baseName`[-`dateStamp`][-`version`].log, where:"},{"pos":[1397,1546],"content":"The <ph id=\"ph1\">`baseName`</ph> part is the fundamental log name, specified by the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A&gt;</ph> property.","source":"The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property."},{"pos":[1560,1869],"content":"The <ph id=\"ph1\">`dateStamp`</ph> part has the format \"YYYY-MM-DD\", and it is shown when <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt;</ph> is <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily&gt;</ph> or <ph id=\"ph4\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly&gt;</ph>.","source":"The `dateStamp` part has the format \"YYYY-MM-DD\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>."},{"pos":[1883,2029],"content":"If more than one log file is needed with the same <ph id=\"ph1\">`baseName`</ph> and <ph id=\"ph2\">`dateStamp`</ph>, the <ph id=\"ph3\">`version`</ph> part, a positive <ph id=\"ph4\">`Integer`</ph>, is added to the file name.","source":"If more than one log file is needed with the same `baseName` and `dateStamp`, the `version` part, a positive `Integer`, is added to the file name."},{"pos":[2039,2185],"content":"*Multiple class instances*. If an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to a file that is in use:","nodes":[{"content":"<bpt id=\"p1\">*</bpt>Multiple class instances<ept id=\"p1\">*</ept>.","pos":[0,27],"source":"*Multiple class instances*."},{"content":"If an instance of the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class writes to a file that is in use:","pos":[28,146],"source":" If an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to a file that is in use:"}]},{"pos":[2199,2356],"content":"The class shares the file if it is being used by another instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class in the same process.","nodes":[{"content":"The class shares the file if it is being used by another instance of the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class in the same process.","pos":[0,157],"source":"The class shares the file if it is being used by another instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class in the same process."}]},{"pos":[2370,2478],"content":"The class creates a new log file using the next available name if the file is being used by another process.","nodes":[{"content":"The class creates a new log file using the next available name if the file is being used by another process.","pos":[0,108]}]},{"pos":[2488,2683],"content":"*Thread safety*. The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class is thread safe. This allows you to safely write messages to the log from multiple threads without using locks.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>Thread safety<ept id=\"p1\">*</ept>.","pos":[0,16],"source":"*Thread safety*."},{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class is thread safe.","pos":[17,100],"source":" The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class is thread safe."},{"content":"This allows you to safely write messages to the log from multiple threads without using locks.","pos":[101,195]}]},{"pos":[2690,2711],"content":"<bpt id=\"p1\">**</bpt>Log-File Location<ept id=\"p1\">**</ept>","source":"**Log-File Location**"},{"pos":[2721,2944],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property takes a <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration to specify one of the typical directories to write the log file to.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A&gt;</ph> property takes a <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileLocation&gt;</ph> enumeration to specify one of the typical directories to write the log file to.","pos":[0,223],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property takes a <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration to specify one of the typical directories to write the log file to."}]},{"pos":[2954,3102],"content":"To write the log to another location, set the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property to that location.","nodes":[{"content":"To write the log to another location, set the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A&gt;</ph> property to that location.","pos":[0,148],"source":"To write the log to another location, set the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property to that location."}]},{"pos":[3109,3126],"content":"<bpt id=\"p1\">**</bpt>Log-File Name<ept id=\"p1\">**</ept>","source":"**Log-File Name**"},{"pos":[3136,3270],"content":"The base name for the log file is specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.","nodes":[{"content":"The base name for the log file is specified by the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A&gt;</ph> property.","pos":[0,134],"source":"The base name for the log file is specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property."}]},{"pos":[3280,3511],"content":"The current log file name can be read from the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property. It is derived from several other properties and the current state of the logs in the file system.","nodes":[{"content":"The current log file name can be read from the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property. It is derived from several other properties and the current state of the logs in the file system.","pos":[0,231],"nodes":[{"content":"The current log file name can be read from the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph> property.","pos":[0,133],"source":"The current log file name can be read from the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property."},{"content":"It is derived from several other properties and the current state of the logs in the file system.","pos":[134,231]}]}]},{"pos":[3518,3537],"content":"<bpt id=\"p1\">**</bpt>Log Maintenance<ept id=\"p1\">**</ept>","source":"**Log Maintenance**"},{"pos":[3547,4064],"content":"The minimum frequency for creating new log files is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. When the value is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>, a new log file is created at least once every day or week, and a date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.","nodes":[{"content":"The minimum frequency for creating new log files is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. When the value is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>, a new log file is created at least once every day or week, and a date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.","pos":[0,517],"nodes":[{"content":"The minimum frequency for creating new log files is determined by the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt;</ph> property.","pos":[0,164],"source":"The minimum frequency for creating new log files is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property."},{"content":"When the value is <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily&gt;</ph> or <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly&gt;</ph>, a new log file is created at least once every day or week, and a date stamp is incorporated into the <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph> name.","pos":[165,517],"source":" When the value is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>, a new log file is created at least once every day or week, and a date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name."}]}]},{"pos":[4074,4458],"content":"The maximum size (in bytes) of the log file is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property. If the log file size exceeds this size, additional messages written to the log are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.","nodes":[{"content":"The maximum size (in bytes) of the log file is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property. If the log file size exceeds this size, additional messages written to the log are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.","pos":[0,384],"nodes":[{"content":"The maximum size (in bytes) of the log file is determined by the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A&gt;</ph> property.","pos":[0,147],"source":"The maximum size (in bytes) of the log file is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property."},{"content":"If the log file size exceeds this size, additional messages written to the log are discarded and, depending on the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt;</ph> property, an exception is thrown.","pos":[148,384],"source":" If the log file size exceeds this size, additional messages written to the log are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown."}]}]},{"pos":[4468,5011],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> property determines how much free space (in bytes) must be available. This helps ensure that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class will not consume all available disk space. Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to specify the behavior of log writes when there are less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> bytes free.","nodes":[{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> property determines how much free space (in bytes) must be available. This helps ensure that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class will not consume all available disk space. Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to specify the behavior of log writes when there are less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> bytes free.","pos":[0,543],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A&gt;</ph> property determines how much free space (in bytes) must be available.","pos":[0,151],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> property determines how much free space (in bytes) must be available."},{"content":"This helps ensure that the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class will not consume all available disk space.","pos":[152,285],"source":" This helps ensure that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class will not consume all available disk space."},{"content":"Use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt;</ph> property to specify the behavior of log writes when there are less than <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A&gt;</ph> bytes free.","pos":[286,543],"source":" Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to specify the behavior of log writes when there are less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> bytes free."}]}]},{"pos":[5018,5046],"content":"<bpt id=\"p1\">**</bpt>Log-File Output Settings<ept id=\"p1\">**</ept>","source":"**Log-File Output Settings**"},{"pos":[5056,5245],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property specifies whether the underlying stream should be flushed automatically after each write to the log file.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A&gt;</ph> property specifies whether the underlying stream should be flushed automatically after each write to the log file.","pos":[0,189],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property specifies whether the underlying stream should be flushed automatically after each write to the log file."}]},{"pos":[5255,5442],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property specifies whether to append messages to the current log file, if allowed, or write them to a new log file.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A&gt;</ph> property specifies whether to append messages to the current log file, if allowed, or write them to a new log file.","pos":[0,187],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property specifies whether to append messages to the current log file, if allowed, or write them to a new log file."}]},{"pos":[5452,5611],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies the string to use for delimiting the fields within a log message.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt;</ph> property specifies the string to use for delimiting the fields within a log message.","pos":[0,159],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies the string to use for delimiting the fields within a log message."}]},{"pos":[5621,5763],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property specifies the encoding to use when creating a new log file.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A&gt;</ph> property specifies the encoding to use when creating a new log file.","pos":[0,142],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property specifies the encoding to use when creating a new log file."}]},{"pos":[5770,5789],"content":"<bpt id=\"p1\">**</bpt>Log-File Output<ept id=\"p1\">**</ept>","source":"**Log-File Output**"},{"pos":[5799,6206],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods write messages to the log file. These methods check the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property, along with any existing logs with the same base name to determine if a new log should be created.","nodes":[{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods write messages to the log file. These methods check the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property, along with any existing logs with the same base name to determine if a new log should be created.","pos":[0,407],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A&gt;</ph> methods write messages to the log file.","pos":[0,190],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods write messages to the log file."},{"content":"These methods check the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt;</ph> property, along with any existing logs with the same base name to determine if a new log should be created.","pos":[191,407],"source":" These methods check the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property, along with any existing logs with the same base name to determine if a new log should be created."}]}]},{"pos":[6216,6362],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method flushes any messages currently in the output buffer to the log file.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A&gt;</ph> method flushes any messages currently in the output buffer to the log file.","pos":[0,146],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method flushes any messages currently in the output buffer to the log file."}]},{"pos":[6372,6512],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method closes the log file so that it can be used by other processes.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A&gt;</ph> method closes the log file so that it can be used by other processes.","pos":[0,140],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method closes the log file so that it can be used by other processes."}]},{"pos":[6519,6538],"content":"<bpt id=\"p1\">**</bpt>Enabling Output<ept id=\"p1\">**</ept>","source":"**Enabling Output**"},{"pos":[6545,6778],"content":"You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], refer to the documentation for your compiler.","nodes":[{"content":"You must enable tracing or debugging to use a trace listener.","pos":[0,61]},{"content":"The following syntax is compiler specific.","pos":[62,104]},{"content":"If you use compilers other than C# or <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, refer to the documentation for your compiler.","pos":[105,233],"source":" If you use compilers other than C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], refer to the documentation for your compiler."}]},{"pos":[6788,7058],"content":"To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], add the `/d:DEBUG=True` flag to the compiler command line.","nodes":[{"content":"To enable debugging in C#, add the <ph id=\"ph1\">`/d:DEBUG`</ph> flag to the compiler command line when you compile your code, or you can add <ph id=\"ph2\">`#define DEBUG`</ph> to the top of your file.","pos":[0,163],"source":"To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file."},{"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, add the <ph id=\"ph2\">`/d:DEBUG=True`</ph> flag to the compiler command line.","pos":[164,270],"source":" In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], add the `/d:DEBUG=True` flag to the compiler command line."}]},{"pos":[7068,7328],"content":"To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], add the `/d:TRACE=True` flag to the compiler command line.","nodes":[{"content":"To enable tracing in C#, add the <ph id=\"ph1\">`/d:TRACE`</ph> flag to the compiler command line when you compile your code, or add <ph id=\"ph2\">`#define TRACE`</ph> to the top of your file.","pos":[0,153],"source":"To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file."},{"content":"In <ph id=\"ph1\">[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]</ph>, add the <ph id=\"ph2\">`/d:TRACE=True`</ph> flag to the compiler command line.","pos":[154,260],"source":" In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], add the `/d:TRACE=True` flag to the compiler command line."}]},{"pos":[7335,7650],"content":"To set the level of your listener, edit the configuration file for your application. Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted like the following example.","nodes":[{"content":"To set the level of your listener, edit the configuration file for your application. Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted like the following example.","pos":[0,315],"nodes":[{"content":"To set the level of your listener, edit the configuration file for your application.","pos":[0,84]},{"content":"Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application.","pos":[85,244]},{"content":"The configuration file should be formatted like the following example.","pos":[245,315]}]}]},{"pos":[7657,7874],"content":"For this example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).","nodes":[{"content":"For this example to run, you must provide the fully qualified assembly name.","pos":[0,76]},{"content":"For information about how to obtain the fully qualified assembly name, see <bpt id=\"p1\">[</bpt>Assembly Names<ept id=\"p1\">](~/docs/framework/app-domains/assembly-names.md)</ept>.","pos":[77,217],"source":" For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md)."}]}],"pos":[2727,11218],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> class with the default name.","nodes":[{"pos":[0,134],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"&gt;&lt;/xref&gt;</ph> class with the default name.","source":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> class with the default name."}],"pos":[14146,14281],"yaml":true},{"content":"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to FileLogTraceListener.  \n  \n You can access the instance name through the <xref:System.Diagnostics.TraceListener.Name%2A> property.","nodes":[{"pos":[0,130],"content":"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to FileLogTraceListener.","nodes":[{"content":"This method sets the instance name of the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class to FileLogTraceListener.","pos":[0,130],"source":"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to FileLogTraceListener."}]},{"pos":[137,239],"content":"You can access the instance name through the <xref:System.Diagnostics.TraceListener.Name%2A> property.","nodes":[{"content":"You can access the instance name through the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property.","pos":[0,102],"source":"You can access the instance name through the <xref:System.Diagnostics.TraceListener.Name%2A> property."}]}],"pos":[14292,14536],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> class with the supplied name.","nodes":[{"pos":[0,135],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"&gt;&lt;/xref&gt;</ph> class with the supplied name.","source":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> class with the supplied name."}],"pos":[15765,15901],"yaml":true},{"content":"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to `name`.  \n  \n You can access the instance name thought the <xref:System.Diagnostics.TraceListener.Name%2A> property.","nodes":[{"pos":[0,116],"content":"This method sets the instance name of the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class to <ph id=\"ph2\">`name`</ph>.","source":"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to `name`."},{"pos":[123,225],"content":"You can access the instance name thought the <xref:System.Diagnostics.TraceListener.Name%2A> property.","nodes":[{"content":"You can access the instance name thought the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property.","pos":[0,102],"source":"You can access the instance name thought the <xref:System.Diagnostics.TraceListener.Name%2A> property."}]}],"pos":[15912,16142],"yaml":true,"extradata":"MT"},{"content":"`String`. The name of the instance object.","nodes":[{"pos":[0,42],"content":"`String`. The name of the instance object.","nodes":[{"content":"<ph id=\"ph1\">`String`</ph>.","pos":[0,9],"source":"`String`."},{"content":"The name of the instance object.","pos":[10,42]}]}],"pos":[16284,16329],"yaml":true},{"content":"Determines whether to append the output to the current file or write it to a new file.","nodes":[{"pos":[0,86],"content":"Determines whether to append the output to the current file or write it to a new file.","nodes":[{"content":"Determines whether to append the output to the current file or write it to a new file.","pos":[0,86]}]}],"pos":[17371,17458],"yaml":true},{"content":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property is `False`, the output is written to a new file. When the property is `True`, the output is appended to the current file, unless:  \n  \n-   The output file is locked by another process. In this situation, a new log file is created with a version number that is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.  \n  \n-   The current file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property allows. In this situation, additional messages are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.  \n  \n-   The existing file name is out of date according to the log-creation schedule specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. In this situation, a new log file is created and the date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.","nodes":[{"pos":[0,215],"content":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property is `False`, the output is written to a new file. When the property is `True`, the output is appended to the current file, unless:","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A&gt;</ph> property is <ph id=\"ph2\">`False`</ph>, the output is written to a new file.","pos":[0,134],"source":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property is `False`, the output is written to a new file."},{"content":"When the property is <ph id=\"ph1\">`True`</ph>, the output is appended to the current file, unless:","pos":[135,215],"source":" When the property is `True`, the output is appended to the current file, unless:"}]},{"pos":[225,450],"content":"The output file is locked by another process. In this situation, a new log file is created with a version number that is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.","nodes":[{"content":"The output file is locked by another process. In this situation, a new log file is created with a version number that is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.","pos":[0,225],"nodes":[{"content":"The output file is locked by another process.","pos":[0,45]},{"content":"In this situation, a new log file is created with a version number that is incorporated into the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph> name.","pos":[46,225],"source":" In this situation, a new log file is created with a version number that is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name."}]}]},{"pos":[460,793],"content":"The current file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property allows. In this situation, additional messages are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.","nodes":[{"content":"The current file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property allows. In this situation, additional messages are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.","pos":[0,333],"nodes":[{"content":"The current file size is greater than what the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A&gt;</ph> property allows.","pos":[0,136],"source":"The current file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property allows."},{"content":"In this situation, additional messages are discarded and, depending on the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt;</ph> property, an exception is thrown.","pos":[137,333],"source":" In this situation, additional messages are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown."}]}]},{"pos":[803,1163],"content":"The existing file name is out of date according to the log-creation schedule specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. In this situation, a new log file is created and the date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.","nodes":[{"content":"The existing file name is out of date according to the log-creation schedule specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. In this situation, a new log file is created and the date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.","pos":[0,360],"nodes":[{"content":"The existing file name is out of date according to the log-creation schedule specified by the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt;</ph> property.","pos":[0,188],"source":"The existing file name is out of date according to the log-creation schedule specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property."},{"content":"In this situation, a new log file is created and the date stamp is incorporated into the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph> name.","pos":[189,360],"source":" In this situation, a new log file is created and the date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name."}]}]}],"pos":[17469,18641],"yaml":true,"extradata":"MT"},{"content":"`Boolean`, with `True` indicating that the output is appended to the current file, and `False` indicating that output is written to a new file. The default setting for this property is `True`.","nodes":[{"pos":[0,192],"content":"`Boolean`, with `True` indicating that the output is appended to the current file, and `False` indicating that output is written to a new file. The default setting for this property is `True`.","nodes":[{"content":"<ph id=\"ph1\">`Boolean`</ph>, with <ph id=\"ph2\">`True`</ph> indicating that the output is appended to the current file, and <ph id=\"ph3\">`False`</ph> indicating that output is written to a new file.","pos":[0,143],"source":"`Boolean`, with `True` indicating that the output is appended to the current file, and `False` indicating that output is written to a new file."},{"content":"The default setting for this property is <ph id=\"ph1\">`True`</ph>.","pos":[144,192],"source":" The default setting for this property is `True`."}]}],"pos":[18815,19010],"yaml":true},{"content":"Indicates whether or not the writing to the log file stream flushes the buffer.","nodes":[{"pos":[0,79],"content":"Indicates whether or not the writing to the log file stream flushes the buffer.","nodes":[{"content":"Indicates whether or not the writing to the log file stream flushes the buffer.","pos":[0,79]}]}],"pos":[20139,20219],"yaml":true},{"content":"The `False` setting for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property provides the best performance for most applications, because it is more efficient to write multiple messages to the log file at one time. You can use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to flush any messages currently in the log file's output buffer. You can also use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method, which implicitly flushes the stream before closing the log file.","nodes":[{"pos":[0,561],"content":"The `False` setting for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property provides the best performance for most applications, because it is more efficient to write multiple messages to the log file at one time. You can use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to flush any messages currently in the log file's output buffer. You can also use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method, which implicitly flushes the stream before closing the log file.","nodes":[{"content":"The <ph id=\"ph1\">`False`</ph> setting for the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A&gt;</ph> property provides the best performance for most applications, because it is more efficient to write multiple messages to the log file at one time.","pos":[0,245],"source":"The `False` setting for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property provides the best performance for most applications, because it is more efficient to write multiple messages to the log file at one time."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A&gt;</ph> method to flush any messages currently in the log file's output buffer.","pos":[246,400],"source":" You can use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to flush any messages currently in the log file's output buffer."},{"content":"You can also use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A&gt;</ph> method, which implicitly flushes the stream before closing the log file.","pos":[401,561],"source":" You can also use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method, which implicitly flushes the stream before closing the log file."}]}],"pos":[20230,20792],"yaml":true,"extradata":"MT"},{"content":"`Boolean`, with `True` indicating that the stream is flushed after every write; otherwise the log entries are buffered and written more efficiently. The default setting for this property is `False`.","nodes":[{"pos":[0,198],"content":"`Boolean`, with `True` indicating that the stream is flushed after every write; otherwise the log entries are buffered and written more efficiently. The default setting for this property is `False`.","nodes":[{"content":"<ph id=\"ph1\">`Boolean`</ph>, with <ph id=\"ph2\">`True`</ph> indicating that the stream is flushed after every write; otherwise the log entries are buffered and written more efficiently.","pos":[0,148],"source":"`Boolean`, with `True` indicating that the stream is flushed after every write; otherwise the log entries are buffered and written more efficiently."},{"content":"The default setting for this property is <ph id=\"ph1\">`False`</ph>.","pos":[149,198],"source":" The default setting for this property is `False`."}]}],"pos":[20969,21170],"yaml":true},{"content":"Gets or sets the base name for the log files, which is used to create the full log-file name.","nodes":[{"pos":[0,93],"content":"Gets or sets the base name for the log files, which is used to create the full log-file name.","nodes":[{"content":"Gets or sets the base name for the log files, which is used to create the full log-file name.","pos":[0,93]}]}],"pos":[22320,22414],"yaml":true},{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property determines the base name for the log files that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to.  \n  \n The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \n  \n The explicit form of the full log file name is `path`\\\\`baseName`[-`dateStamp`][-`iteration`].log, where  \n  \n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \n  \n-   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \n  \n-   The `dateStamp` part has the format \"YYYY-MM-DD\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is set to <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  \n  \n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name.","nodes":[{"pos":[0,213],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property determines the base name for the log files that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A&gt;</ph> property determines the base name for the log files that the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class writes to.","pos":[0,213],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property determines the base name for the log files that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to."}]},{"pos":[220,531],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.","nodes":[{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.","pos":[0,311],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph> property gives the current full log-file name.","pos":[0,127],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name."},{"content":"It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log.","pos":[128,262]},{"content":"New log files are created on an as-needed basis.","pos":[263,311]}]}]},{"pos":[538,642],"content":"The explicit form of the full log file name is <ph id=\"ph1\">`path`</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">`baseName`</ph>[-<ph id=\"ph4\">`dateStamp`</ph>][-<ph id=\"ph5\">`iteration`</ph>].log, where","source":"The explicit form of the full log file name is `path`\\\\`baseName`[-`dateStamp`][-`iteration`].log, where"},{"pos":[652,956],"content":"The <ph id=\"ph1\">`path`</ph> part is determined by the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A&gt;</ph> property and, if that property value is set to <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom&gt;</ph>, the <ph id=\"ph4\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A&gt;</ph> property.","source":"The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property."},{"pos":[966,1115],"content":"The <ph id=\"ph1\">`baseName`</ph> part is the fundamental log name, specified by the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A&gt;</ph> property.","source":"The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property."},{"pos":[1125,1441],"content":"The <ph id=\"ph1\">`dateStamp`</ph> part has the format \"YYYY-MM-DD\", and it is shown when <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt;</ph> is set to <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily&gt;</ph> or <ph id=\"ph4\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly&gt;</ph>.","source":"The `dateStamp` part has the format \"YYYY-MM-DD\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is set to <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>."},{"pos":[1451,1599],"content":"If more than one log file is needed with the same <ph id=\"ph1\">`baseName`</ph> and <ph id=\"ph2\">`dateStamp`</ph>, the <ph id=\"ph3\">`iteration`</ph> part, a positive <ph id=\"ph4\">`Integer`</ph>, is added to the file name.","source":"If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name."}],"pos":[22425,24043],"yaml":true,"extradata":"MT"},{"content":"`String`. The base name for the log files. The default is the application's product name.","nodes":[{"pos":[0,89],"content":"`String`. The base name for the log files. The default is the application's product name.","nodes":[{"content":"<ph id=\"ph1\">`String`</ph>.","pos":[0,9],"source":"`String`."},{"content":"The base name for the log files.","pos":[10,42]},{"content":"The default is the application's product name.","pos":[43,89]}]}],"pos":[24164,24256],"yaml":true},{"content":"Closes the underlying stream for the current log file and releases any resources associated with the current stream.","nodes":[{"pos":[0,116],"content":"Closes the underlying stream for the current log file and releases any resources associated with the current stream.","nodes":[{"content":"Closes the underlying stream for the current log file and releases any resources associated with the current stream.","pos":[0,116]}]}],"pos":[25303,25420],"yaml":true},{"content":"You do not need to call the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method explicitly, because the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class manages the underlying steam.","nodes":[{"pos":[0,219],"content":"You do not need to call the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method explicitly, because the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class manages the underlying steam.","nodes":[{"content":"You do not need to call the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A&gt;</ph> method explicitly, because the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class manages the underlying steam.","pos":[0,219],"source":"You do not need to call the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method explicitly, because the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class manages the underlying steam."}]}],"pos":[25431,25651],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the log file directory when the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\"></xref> property is set to <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation.Custom\"></xref>.","nodes":[{"pos":[0,219],"content":"Gets or sets the log file directory when the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\"&gt;&lt;/xref&gt;</ph> property is set to <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation.Custom\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the log file directory when the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\"></xref> property is set to <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation.Custom\"></xref>."}],"pos":[26814,27034],"yaml":true},{"content":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property is set, it also sets the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>.  \n  \n The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property will throw an exception if the directory cannot be resolved.","nodes":[{"pos":[0,261],"content":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property is set, it also sets the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A&gt;</ph> property is set, it also sets the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A&gt;</ph> property to <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom&gt;</ph>.","pos":[0,261],"source":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property is set, it also sets the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>."}]},{"pos":[268,417],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property will throw an exception if the directory cannot be resolved.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A&gt;</ph> property will throw an exception if the directory cannot be resolved.","pos":[0,149],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property will throw an exception if the directory cannot be resolved."}]}],"pos":[27045,27467],"yaml":true,"extradata":"MT"},{"content":"`String`, which is the name of the log-file directory. The default setting for this property is the user's directory for application data.","nodes":[{"pos":[0,138],"content":"`String`, which is the name of the log-file directory. The default setting for this property is the user's directory for application data.","nodes":[{"content":"<ph id=\"ph1\">`String`</ph>, which is the name of the log-file directory.","pos":[0,54],"source":"`String`, which is the name of the log-file directory."},{"content":"The default setting for this property is the user's directory for application data.","pos":[55,138]}]}],"pos":[27650,27791],"yaml":true},{"content":"Gets or sets the delimiter used to delimit fields within a log message.","nodes":[{"pos":[0,71],"content":"Gets or sets the delimiter used to delimit fields within a log message.","nodes":[{"content":"Gets or sets the delimiter used to delimit fields within a log message.","pos":[0,71]}]}],"pos":[28928,29000],"yaml":true},{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property allows you to change the default delimiter.","nodes":[{"pos":[0,127],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property allows you to change the default delimiter.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt;</ph> property allows you to change the default delimiter.","pos":[0,127],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property allows you to change the default delimiter."}]}],"pos":[29011,29139],"yaml":true,"extradata":"MT"},{"content":"`String`, which is the delimiter used for fields within a log message. The default setting for this property is the TAB character.","nodes":[{"pos":[0,130],"content":"`String`, which is the delimiter used for fields within a log message. The default setting for this property is the TAB character.","nodes":[{"content":"<ph id=\"ph1\">`String`</ph>, which is the delimiter used for fields within a log message.","pos":[0,70],"source":"`String`, which is the delimiter used for fields within a log message."},{"content":"The default setting for this property is the TAB character.","pos":[71,130]}]}],"pos":[29257,29390],"yaml":true},{"content":"Determines what to do when writing to the log file and there is less free disk space available than specified by the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\"></xref> property.","nodes":[{"pos":[0,215],"content":"Determines what to do when writing to the log file and there is less free disk space available than specified by the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\"&gt;&lt;/xref&gt;</ph> property.","source":"Determines what to do when writing to the log file and there is less free disk space available than specified by the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\"></xref> property."}],"pos":[30556,30772],"yaml":true},{"content":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property is set to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, the log messages are silently discarded if there is not enough reserved disk space. This is the default behavior, and it prevents simple applications from failing if the disk gets too full.  \n  \n More robust applications can set the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>, and add `Try...Catch` blocks around all code that writes to the log.","nodes":[{"pos":[0,384],"content":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property is set to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, the log messages are silently discarded if there is not enough reserved disk space. This is the default behavior, and it prevents simple applications from failing if the disk gets too full.","nodes":[{"content":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property is set to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, the log messages are silently discarded if there is not enough reserved disk space. This is the default behavior, and it prevents simple applications from failing if the disk gets too full.","pos":[0,384],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt;</ph> property is set to <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages&gt;</ph>, the log messages are silently discarded if there is not enough reserved disk space.","pos":[0,278],"source":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property is set to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, the log messages are silently discarded if there is not enough reserved disk space."},{"content":"This is the default behavior, and it prevents simple applications from failing if the disk gets too full.","pos":[279,384]}]}]},{"pos":[391,674],"content":"More robust applications can set the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt;</ph> property to <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException&gt;</ph>, and add <ph id=\"ph3\">`Try...Catch`</ph> blocks around all code that writes to the log.","source":"More robust applications can set the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>, and add `Try...Catch` blocks around all code that writes to the log."}],"pos":[30783,31462],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"></xref>. Determines what to do when attempting to write to the log file and there is less free disk space available than specified by the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\"></xref> property, or if the log file size is greater than what the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\"></xref> property allows. The default value is <xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages\"></xref>.","nodes":[{"pos":[0,568],"content":"<xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"></xref>. Determines what to do when attempting to write to the log file and there is less free disk space available than specified by the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\"></xref> property, or if the log file size is greater than what the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\"></xref> property allows. The default value is <xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"&gt;&lt;/xref&gt;</ph>.","pos":[0,76],"source":"<xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"></xref>."},{"content":"Determines what to do when attempting to write to the log file and there is less free disk space available than specified by the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\"&gt;&lt;/xref&gt;</ph> property, or if the log file size is greater than what the <ph id=\"ph2\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\"&gt;&lt;/xref&gt;</ph> property allows.","pos":[77,454],"source":" Determines what to do when attempting to write to the log file and there is less free disk space available than specified by the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\"></xref> property, or if the log file size is greater than what the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\"></xref> property allows."},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages\"&gt;&lt;/xref&gt;</ph>.","pos":[455,568],"source":" The default value is <xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages\"></xref>."}]}],"pos":[31746,32315],"yaml":true},{"content":"Closes the underlying stream and optionally releases the managed resources.","nodes":[{"pos":[0,75],"content":"Closes the underlying stream and optionally releases the managed resources.","nodes":[{"content":"Closes the underlying stream and optionally releases the managed resources.","pos":[0,75]}]}],"pos":[33525,33601],"yaml":true},{"content":"When the `disposing` parameter is `True`, this method releases all resources held by any managed objects that this <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"pos":[0,252],"content":"When the `disposing` parameter is `True`, this method releases all resources held by any managed objects that this <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> references. This method invokes the `Dispose` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`True`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> references.","pos":[0,184],"source":"When the `disposing` parameter is `True`, this method releases all resources held by any managed objects that this <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose`</ph> method of each referenced object.","pos":[185,252],"source":" This method invokes the `Dispose` method of each referenced object."}]}],"pos":[33612,33865],"yaml":true,"extradata":"MT"},{"content":"`True` releases both managed and unmanaged resources; `False` releases only unmanaged resources.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">`True`</ph> releases both managed and unmanaged resources; <ph id=\"ph2\">`False`</ph> releases only unmanaged resources.","source":"`True` releases both managed and unmanaged resources; `False` releases only unmanaged resources."}],"pos":[34020,34119],"yaml":true},{"content":"Gets or sets the encoding to use when creating a new log file.","nodes":[{"pos":[0,62],"content":"Gets or sets the encoding to use when creating a new log file.","nodes":[{"content":"Gets or sets the encoding to use when creating a new log file.","pos":[0,62]}]}],"pos":[35175,35238],"yaml":true},{"content":"When appending text to an existing log file, the encoding for that file is used instead of the encoding specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property.","nodes":[{"pos":[0,200],"content":"When appending text to an existing log file, the encoding for that file is used instead of the encoding specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property.","nodes":[{"content":"When appending text to an existing log file, the encoding for that file is used instead of the encoding specified by the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A&gt;</ph> property.","pos":[0,200],"source":"When appending text to an existing log file, the encoding for that file is used instead of the encoding specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property."}]}],"pos":[35249,35450],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Text.Encoding\"></xref>, which is the encoding to use when creating a new log file. The default value of this property is <xref href=\"System.Text.UTF8Encoding\"></xref>.","nodes":[{"pos":[0,186],"content":"<xref href=\"System.Text.Encoding\"></xref>, which is the encoding to use when creating a new log file. The default value of this property is <xref href=\"System.Text.UTF8Encoding\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoding\"&gt;&lt;/xref&gt;</ph>, which is the encoding to use when creating a new log file.","pos":[0,101],"source":"<xref href=\"System.Text.Encoding\"></xref>, which is the encoding to use when creating a new log file."},{"content":"The default value of this property is <ph id=\"ph1\">&lt;xref href=\"System.Text.UTF8Encoding\"&gt;&lt;/xref&gt;</ph>.","pos":[102,186],"source":" The default value of this property is <xref href=\"System.Text.UTF8Encoding\"></xref>."}]}],"pos":[35588,35775],"yaml":true},{"content":"Flushes the underlying stream that writes to the current log file.","nodes":[{"pos":[0,66],"content":"Flushes the underlying stream that writes to the current log file.","nodes":[{"content":"Flushes the underlying stream that writes to the current log file.","pos":[0,66]}]}],"pos":[36818,36885],"yaml":true},{"content":"Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to write all buffered data to the current log file.","nodes":[{"pos":[0,133],"content":"Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to write all buffered data to the current log file.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A&gt;</ph> method to write all buffered data to the current log file.","pos":[0,133],"source":"Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to write all buffered data to the current log file."}]}],"pos":[36896,37030],"yaml":true,"extradata":"MT"},{"content":"Gets the current full log-file name.","nodes":[{"pos":[0,36],"content":"Gets the current full log-file name.","nodes":[{"content":"Gets the current full log-file name.","pos":[0,36]}]}],"pos":[38199,38236],"yaml":true},{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \n  \n The explicit form of the full log-file name is `path`\\\\`baseName`[-`dateStamp`][-`iteration`].log, where:  \n  \n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \n  \n-   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \n  \n-   The `dateStamp` part has the format YYYY-MM-DD, and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  \n  \n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name.","nodes":[{"pos":[0,311],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.","nodes":[{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.","pos":[0,311],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph> property gives the current full log-file name.","pos":[0,127],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name."},{"content":"It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log.","pos":[128,262]},{"content":"New log files are created on an as-needed basis.","pos":[263,311]}]}]},{"pos":[318,423],"content":"The explicit form of the full log-file name is <ph id=\"ph1\">`path`</ph><ph id=\"ph2\">\\\\</ph><ph id=\"ph3\">`baseName`</ph>[-<ph id=\"ph4\">`dateStamp`</ph>][-<ph id=\"ph5\">`iteration`</ph>].log, where:","source":"The explicit form of the full log-file name is `path`\\\\`baseName`[-`dateStamp`][-`iteration`].log, where:"},{"pos":[433,737],"content":"The <ph id=\"ph1\">`path`</ph> part is determined by the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A&gt;</ph> property and, if that property value is set to <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom&gt;</ph>, the <ph id=\"ph4\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A&gt;</ph> property.","source":"The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property."},{"pos":[747,896],"content":"The <ph id=\"ph1\">`baseName`</ph> part is the fundamental log name, specified by the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A&gt;</ph> property.","source":"The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property."},{"pos":[906,1213],"content":"The <ph id=\"ph1\">`dateStamp`</ph> part has the format YYYY-MM-DD, and it is shown when <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt;</ph> is <ph id=\"ph3\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily&gt;</ph> or <ph id=\"ph4\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly&gt;</ph>.","source":"The `dateStamp` part has the format YYYY-MM-DD, and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>."},{"pos":[1223,1371],"content":"If more than one log file is needed with the same <ph id=\"ph1\">`baseName`</ph> and <ph id=\"ph2\">`dateStamp`</ph>, the <ph id=\"ph3\">`iteration`</ph> part, a positive <ph id=\"ph4\">`Integer`</ph>, is added to the file name.","source":"If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name."}],"pos":[38247,39633],"yaml":true,"extradata":"MT"},{"content":"`String`, which is the current full log-file name.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">`String`</ph>, which is the current full log-file name.","source":"`String`, which is the current full log-file name."}],"pos":[39812,39865],"yaml":true},{"content":"Gets the custom XML configuration attributes supported by the trace listener.","nodes":[{"pos":[0,77],"content":"Gets the custom XML configuration attributes supported by the trace listener.","nodes":[{"content":"Gets the custom XML configuration attributes supported by the trace listener.","pos":[0,77]}]}],"pos":[41085,41163],"yaml":true},{"content":"The custom attributes for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be used in the XML configuration file for controlling the behavior of an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class. Using any other attribute causes a configuration exception.","nodes":[{"pos":[0,305],"content":"The custom attributes for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be used in the XML configuration file for controlling the behavior of an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class. Using any other attribute causes a configuration exception.","nodes":[{"content":"The custom attributes for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be used in the XML configuration file for controlling the behavior of an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class. Using any other attribute causes a configuration exception.","pos":[0,305],"nodes":[{"content":"The custom attributes for the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> can be used in the XML configuration file for controlling the behavior of an instance of the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class.","pos":[0,245],"source":"The custom attributes for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be used in the XML configuration file for controlling the behavior of an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class."},{"content":"Using any other attribute causes a configuration exception.","pos":[246,305]}]}]}],"pos":[41174,41480],"yaml":true,"extradata":"MT"},{"content":"`String` array containing the XML configuration attributes recognized by this listener.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">`String`</ph> array containing the XML configuration attributes recognized by this listener.","source":"`String` array containing the XML configuration attributes recognized by this listener."}],"pos":[41636,41726],"yaml":true},{"content":"Indicates whether or not the host name of the logging machine should be included in the output.","nodes":[{"pos":[0,95],"content":"Indicates whether or not the host name of the logging machine should be included in the output.","nodes":[{"content":"Indicates whether or not the host name of the logging machine should be included in the output.","pos":[0,95]}]}],"pos":[42839,42935],"yaml":true},{"content":"Use the property to configure the behavior of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods.","nodes":[{"pos":[0,205],"content":"Use the property to configure the behavior of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods.","nodes":[{"content":"Use the property to configure the behavior of the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A&gt;</ph> methods.","pos":[0,205],"source":"Use the property to configure the behavior of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods."}]}],"pos":[42946,43152],"yaml":true,"extradata":"MT"},{"content":"`Boolean`. Use `True` if the host identifier should be included; otherwise use `False`. The default value is `False`.","nodes":[{"pos":[0,117],"content":"`Boolean`. Use `True` if the host identifier should be included; otherwise use `False`. The default value is `False`.","nodes":[{"content":"<ph id=\"ph1\">`Boolean`</ph>.","pos":[0,10],"source":"`Boolean`."},{"content":"Use <ph id=\"ph1\">`True`</ph> if the host identifier should be included; otherwise use <ph id=\"ph2\">`False`</ph>.","pos":[11,87],"source":" Use `True` if the host identifier should be included; otherwise use `False`."},{"content":"The default value is <ph id=\"ph1\">`False`</ph>.","pos":[88,117],"source":" The default value is `False`."}]}],"pos":[43335,43455],"yaml":true},{"content":"Gets or sets location for the log files.","nodes":[{"pos":[0,40],"content":"Gets or sets location for the log files.","nodes":[{"content":"Gets or sets location for the log files.","pos":[0,40]}]}],"pos":[44587,44628],"yaml":true},{"content":"Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to set the log path to one of the predefined paths, determined by the <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration values.  \n  \n|**Location value**|**Path**|  \n|------------------------|--------------|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|The path for the application data that is shared among all users, with the format:<br /><br /> `BasePath`\\\\`CompanyName`\\\\`ProductName`\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\Documents and Settings\\All Users\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come from the assembly.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|The path for the executable file that started the application.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|The path for the application data of a user, with the format:<br /><br /> `BasePath`\\\\`CompanyName`\\\\`ProductName`\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\Documents and Settings\\\\`username`\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come form the assembly.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|The path of the current system's temporary folder.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|If the string specified by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> is not empty, then use it as the path; otherwise use the path for the application data of a user.|","nodes":[{"pos":[0,229],"content":"Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to set the log path to one of the predefined paths, determined by the <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration values.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A&gt;</ph> property to set the log path to one of the predefined paths, determined by the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileLocation&gt;</ph> enumeration values.","pos":[0,229],"source":"Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to set the log path to one of the predefined paths, determined by the <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration values."}]},{"pos":[236,254],"content":"<bpt id=\"p1\">**</bpt>Location value<ept id=\"p1\">**</ept>","source":"**Location value**"},{"pos":[255,263],"content":"<bpt id=\"p1\">**</bpt>Path<ept id=\"p1\">**</ept>","source":"**Path**"},{"pos":[312,391],"content":"<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>","nodes":[]},{"pos":[392,758],"content":"The path for the application data that is shared among all users, with the format:<br /><br /> `BasePath`\\\\`CompanyName`\\\\`ProductName`\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\Documents and Settings\\All Users\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come from the assembly.","nodes":[{"content":"The path for the application data that is shared among all users, with the format:","pos":[0,82]},{"content":"A typical value for <ph id=\"ph1\">`BasePath`</ph> is:","pos":[166,200],"source":" A typical value for `BasePath` is:"},{"content":"C:\\Documents and Settings\\All Users\\Application Data","pos":[213,265]},{"content":"The values of <ph id=\"ph1\">`CompanyName`</ph>, <ph id=\"ph2\">`ProductName`</ph>, and <ph id=\"ph3\">`ProductVersion`</ph> come from the assembly.","pos":[278,366],"source":" The values of `CompanyName`, `ProductName`, and `ProductVersion` come from the assembly."}]},{"pos":[763,835],"content":"<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>","nodes":[]},{"pos":[836,898],"content":"The path for the executable file that started the application.","nodes":[{"content":"The path for the executable file that started the application.","pos":[0,62]}]},{"pos":[903,985],"content":"<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>","nodes":[]},{"pos":[986,1333],"content":"The path for the application data of a user, with the format:<br /><br /> `BasePath`\\\\`CompanyName`\\\\`ProductName`\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\Documents and Settings\\\\`username`\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come form the assembly.","nodes":[{"content":"The path for the application data of a user, with the format:","pos":[0,61]},{"content":"A typical value for <ph id=\"ph1\">`BasePath`</ph> is:","pos":[145,179],"source":" A typical value for `BasePath` is:"},{"content":"C:\\Documents and Settings<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">`username`</ph>\\Application Data","pos":[192,246],"source":" C:\\Documents and Settings\\\\`username`\\Application Data"},{"content":"The values of <ph id=\"ph1\">`CompanyName`</ph>, <ph id=\"ph2\">`ProductName`</ph>, and <ph id=\"ph3\">`ProductVersion`</ph> come form the assembly.","pos":[259,347],"source":" The values of `CompanyName`, `ProductName`, and `ProductVersion` come form the assembly."}]},{"pos":[1338,1404],"content":"<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>","nodes":[]},{"pos":[1405,1455],"content":"The path of the current system's temporary folder.","nodes":[{"content":"The path of the current system's temporary folder.","pos":[0,50]}]},{"pos":[1460,1519],"content":"<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>","nodes":[]},{"pos":[1520,1720],"content":"If the string specified by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> is not empty, then use it as the path; otherwise use the path for the application data of a user.","nodes":[{"content":"If the string specified by <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A&gt;</ph> is not empty, then use it as the path; otherwise use the path for the application data of a user.","pos":[0,200],"source":"If the string specified by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> is not empty, then use it as the path; otherwise use the path for the application data of a user."}]}],"pos":[44639,46390],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>, which is the location for the log file. The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory\"></xref>.","nodes":[{"pos":[0,226],"content":"<xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>, which is the location for the log file. The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"&gt;&lt;/xref&gt;</ph>, which is the location for the log file.","pos":[0,107],"source":"<xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>, which is the location for the log file."},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory\"&gt;&lt;/xref&gt;</ph>.","pos":[108,226],"source":" The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory\"></xref>."}]}],"pos":[46578,46805],"yaml":true},{"content":"Determines which date to include in the names of the log files.","nodes":[{"pos":[0,63],"content":"Determines which date to include in the names of the log files.","nodes":[{"content":"Determines which date to include in the names of the log files.","pos":[0,63]}]}],"pos":[47952,48016],"yaml":true},{"content":"Assign one of the <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> enumeration values to the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property to specify which date to include in the names of the log files.  \n  \n The format of the date is YYYY-MM-DD. For more information on the format of the log file name, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \n  \n|**LogFileCreationSchedule value**|**Date in the log file name**|  \n|---------------------------------------|-----------------------------------|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|Include the current date in the log file name.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|Do not include the date in the log file name.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|Include the first day of the current week in the log file name.<br /><br /> The week starts on Saturday.|","nodes":[{"pos":[0,268],"content":"Assign one of the <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> enumeration values to the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property to specify which date to include in the names of the log files.","nodes":[{"content":"Assign one of the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&gt;</ph> enumeration values to the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A&gt;</ph> property to specify which date to include in the names of the log files.","pos":[0,268],"source":"Assign one of the <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> enumeration values to the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property to specify which date to include in the names of the log files."}]},{"pos":[275,451],"content":"The format of the date is YYYY-MM-DD. For more information on the format of the log file name, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.","nodes":[{"content":"The format of the date is YYYY-MM-DD. For more information on the format of the log file name, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.","pos":[0,176],"nodes":[{"content":"The format of the date is YYYY-MM-DD.","pos":[0,37]},{"content":"For more information on the format of the log file name, see <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph>.","pos":[38,176],"source":" For more information on the format of the log file name, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>."}]}]},{"pos":[458,491],"content":"<bpt id=\"p1\">**</bpt>LogFileCreationSchedule value<ept id=\"p1\">**</ept>","source":"**LogFileCreationSchedule value**"},{"pos":[492,521],"content":"<bpt id=\"p1\">**</bpt>Date in the log file name<ept id=\"p1\">**</ept>","source":"**Date in the log file name**"},{"pos":[606,678],"content":"<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>","nodes":[]},{"pos":[679,725],"content":"Include the current date in the log file name.","nodes":[{"content":"Include the current date in the log file name.","pos":[0,46]}]},{"pos":[730,801],"content":"<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>","nodes":[]},{"pos":[802,847],"content":"Do not include the date in the log file name.","nodes":[{"content":"Do not include the date in the log file name.","pos":[0,45]}]},{"pos":[852,925],"content":"<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>","nodes":[]},{"pos":[926,1030],"content":"Include the first day of the current week in the log file name.<br /><br /> The week starts on Saturday.","nodes":[{"content":"Include the first day of the current week in the log file name.","pos":[0,63]},{"content":"The week starts on Saturday.","pos":[76,104]}]}],"pos":[48027,49069],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"></xref>. This indicates which date to include in the log-file names. The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None\"></xref>.","nodes":[{"pos":[0,249],"content":"<xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"></xref>. This indicates which date to include in the log-file names. The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"&gt;&lt;/xref&gt;</ph>.","pos":[0,81],"source":"<xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"></xref>."},{"content":"This indicates which date to include in the log-file names.","pos":[82,141]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None\"&gt;&lt;/xref&gt;</ph>.","pos":[142,249],"source":" The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None\"></xref>."}]}],"pos":[49300,49550],"yaml":true},{"content":"Gets or sets the maximum allowed size of the log file, in bytes.","nodes":[{"pos":[0,64],"content":"Gets or sets the maximum allowed size of the log file, in bytes.","nodes":[{"content":"Gets or sets the maximum allowed size of the log file, in bytes.","pos":[0,64]}]}],"pos":[50640,50705],"yaml":true},{"content":"Use this property to make sure that the log files do not grow too large.  \n  \n If the log file size (in bytes) is greater than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.","nodes":[{"pos":[0,72],"content":"Use this property to make sure that the log files do not grow too large.","nodes":[{"content":"Use this property to make sure that the log files do not grow too large.","pos":[0,72]}]},{"pos":[79,666],"content":"If the log file size (in bytes) is greater than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.","nodes":[{"content":"If the log file size (in bytes) is greater than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.","pos":[0,587],"nodes":[{"content":"If the log file size (in bytes) is greater than the value of this property, then when the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt;</ph> property.","pos":[0,405],"source":"If the log file size (in bytes) is greater than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property."},{"content":"Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A&gt;</ph>.","pos":[406,587],"source":" Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>."}]}]}],"pos":[50716,51387],"yaml":true,"extradata":"MT"},{"content":"`Long`. This is the maximum allowed log-file size, in bytes. The default value is 5000000.","nodes":[{"pos":[0,90],"content":"`Long`. This is the maximum allowed log-file size, in bytes. The default value is 5000000.","nodes":[{"content":"<ph id=\"ph1\">`Long`</ph>.","pos":[0,7],"source":"`Long`."},{"content":"This is the maximum allowed log-file size, in bytes.","pos":[8,60]},{"content":"The default value is 5000000.","pos":[61,90]}]}],"pos":[51564,51657],"yaml":true},{"content":"When this property is set to a value less than 1000.","nodes":[{"pos":[0,52],"content":"When this property is set to a value less than 1000.","nodes":[{"content":"When this property is set to a value less than 1000.","pos":[0,52]}]}],"pos":[51841,51894],"yaml":true},{"content":"Gets or sets the amount of free disk space, in bytes, necessary before messages can be written to the log file.","nodes":[{"pos":[0,111],"content":"Gets or sets the amount of free disk space, in bytes, necessary before messages can be written to the log file.","nodes":[{"content":"Gets or sets the amount of free disk space, in bytes, necessary before messages can be written to the log file.","pos":[0,111]}]}],"pos":[52977,53089],"yaml":true},{"content":"Use this property to make sure that the log files do not completely fill the disk.  \n  \n If the amount of free disk space (in bytes) is less than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the log file size (in bytes) is greater than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.","nodes":[{"pos":[0,82],"content":"Use this property to make sure that the log files do not completely fill the disk.","nodes":[{"content":"Use this property to make sure that the log files do not completely fill the disk.","pos":[0,82]}]},{"pos":[89,671],"content":"If the amount of free disk space (in bytes) is less than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the log file size (in bytes) is greater than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.","nodes":[{"content":"If the amount of free disk space (in bytes) is less than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the log file size (in bytes) is greater than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.","pos":[0,582],"nodes":[{"content":"If the amount of free disk space (in bytes) is less than the value of this property, then when the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A&gt;</ph> property.","pos":[0,414],"source":"If the amount of free disk space (in bytes) is less than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property."},{"content":"Otherwise, the message is written to the log, if the log file size (in bytes) is greater than <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A&gt;</ph>.","pos":[415,582],"source":" Otherwise, the message is written to the log, if the log file size (in bytes) is greater than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>."}]}]}],"pos":[53100,53776],"yaml":true,"extradata":"MT"},{"content":"`Long`. This is the amount of free disk space necessary. The default value is 10000000.","nodes":[{"pos":[0,87],"content":"`Long`. This is the amount of free disk space necessary. The default value is 10000000.","nodes":[{"content":"<ph id=\"ph1\">`Long`</ph>.","pos":[0,7],"source":"`Long`."},{"content":"This is the amount of free disk space necessary.","pos":[8,56]},{"content":"The default value is 10000000.","pos":[57,87]}]}],"pos":[53958,54048],"yaml":true},{"content":"When this property is set to a value less than 0.","nodes":[{"pos":[0,49],"content":"When this property is set to a value less than 0.","nodes":[{"content":"When this property is set to a value less than 0.","pos":[0,49]}]}],"pos":[54237,54287],"yaml":true},{"content":"Writes trace information, a data object, and event information to the output file or stream.","nodes":[{"pos":[0,92],"content":"Writes trace information, a data object, and event information to the output file or stream.","nodes":[{"content":"Writes trace information, a data object, and event information to the output file or stream.","pos":[0,92]}]}],"pos":[55827,55920],"yaml":true},{"content":"This method:  \n  \n1.  Formats the data and context information for output.  \n  \n2.  Creates a new log file, if necessary.  \n  \n3.  Writes the information to the log file.  \n  \n For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \n  \n The following table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.  \n  \n|**Field**|**Output condition**|**Description**|  \n|---------------|--------------------------|---------------------|  \n|`source`|Always|The value of `name`.|  \n|`severity`|Always|The enumeration-value name of `eventType`.|  \n|`id`|Always|The string representation of `id`.|  \n|`message`|Always|The string representation of `data`.|  \n|`callStack`|When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|","nodes":[{"pos":[0,12],"content":"This method:","nodes":[{"content":"This method:","pos":[0,12]}]},{"pos":[22,74],"content":"Formats the data and context information for output.","nodes":[{"content":"Formats the data and context information for output.","pos":[0,52]}]},{"pos":[84,121],"content":"Creates a new log file, if necessary.","nodes":[{"content":"Creates a new log file, if necessary.","pos":[0,37]}]},{"pos":[131,170],"content":"Writes the information to the log file.","nodes":[{"content":"Writes the information to the log file.","pos":[0,39]}]},{"pos":[177,306],"content":"For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.","nodes":[{"content":"For more information on creating new log files, see <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph>.","pos":[0,129],"source":"For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>."}]},{"pos":[313,560],"content":"The following table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.","nodes":[{"content":"The following table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.","pos":[0,247],"nodes":[{"content":"The following table lists the output fields in the order they appear.","pos":[0,69]},{"content":"The fields are delimited by the string that the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt;</ph> property specifies, and are followed by a line terminator.","pos":[70,247],"source":" The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator."}]}]},{"pos":[567,576],"content":"<bpt id=\"p1\">**</bpt>Field<ept id=\"p1\">**</ept>","source":"**Field**"},{"pos":[577,597],"content":"<bpt id=\"p1\">**</bpt>Output condition<ept id=\"p1\">**</ept>","source":"**Output condition**"},{"pos":[598,613],"content":"<bpt id=\"p1\">**</bpt>Description<ept id=\"p1\">**</ept>","source":"**Description**"},{"pos":[696,702],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[703,723],"content":"The value of <ph id=\"ph1\">`name`</ph>.","source":"The value of `name`."},{"pos":[739,745],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[746,788],"content":"The enumeration-value name of <ph id=\"ph1\">`eventType`</ph>.","source":"The enumeration-value name of `eventType`."},{"pos":[798,804],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[805,839],"content":"The string representation of <ph id=\"ph1\">`id`</ph>.","source":"The string representation of `id`."},{"pos":[854,860],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[861,897],"content":"The string representation of <ph id=\"ph1\">`data`</ph>.","source":"The string representation of `data`."},{"pos":[914,1062],"content":"When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.Callstack&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1063,1147],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.Callstack%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`."},{"pos":[1168,1328],"content":"When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.LogicalOperationStack&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,160],"source":"When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1329,1412],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`."},{"pos":[1428,1575],"content":"When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.DateTime&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,147],"source":"When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1576,1745],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.DateTime%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,112],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[113,169]}]},{"pos":[1762,1910],"content":"When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.ProcessId&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1911,2081],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ProcessId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,113],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[114,170]}]},{"pos":[2097,2244],"content":"When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.ThreadId&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,147],"source":"When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[2245,2328],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`."},{"pos":[2345,2493],"content":"When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.Timestamp&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[2494,2664],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.Timestamp%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,113],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[114,170]}]},{"pos":[2680,2785],"content":"When the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A&gt;</ph> property is <ph id=\"ph2\">`True`</ph>.","source":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`."},{"pos":[2786,2811],"content":"The name of the computer.","nodes":[{"content":"The name of the computer.","pos":[0,25]}]}],"pos":[55931,58770],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.","nodes":[{"pos":[0,142],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;&lt;/xref&gt;</ph> object that contains the current process ID, thread ID, and stack trace information.","source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."}],"pos":[59057,59200],"yaml":true},{"content":"A name of the trace source that invoked this method.","nodes":[{"pos":[0,52],"content":"A name of the trace source that invoked this method.","nodes":[{"content":"A name of the trace source that invoked this method.","pos":[0,52]}]}],"pos":[59262,59315],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.","nodes":[{"pos":[0,85],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."}],"pos":[59400,59486],"yaml":true},{"content":"A numeric identifier for the event.","nodes":[{"pos":[0,35],"content":"A numeric identifier for the event.","nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]}],"pos":[59543,59579],"yaml":true},{"content":"The trace data to emit.","nodes":[{"pos":[0,23],"content":"The trace data to emit.","nodes":[{"content":"The trace data to emit.","pos":[0,23]}]}],"pos":[59639,59663],"yaml":true},{"content":"Writes trace information, an array of data objects, and event information to the output file or stream.","nodes":[{"pos":[0,103],"content":"Writes trace information, an array of data objects, and event information to the output file or stream.","nodes":[{"content":"Writes trace information, an array of data objects, and event information to the output file or stream.","pos":[0,103]}]}],"pos":[61238,61342],"yaml":true},{"content":"This method:  \n  \n1.  Formats the data and context information for output,  \n  \n2.  Creates a new log file, if necessary,  \n  \n3.  Writes the information to the log file.  \n  \n For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \n  \n This table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.  \n  \n|**Field**|**Output condition**|**Description**|  \n|---------------|--------------------------|---------------------|  \n|`source`|Always|The value of `name`.|  \n|`severity`|Always|The enumeration-value name of `eventType`.|  \n|`id`|Always|The string representation of `id`.|  \n|`message`|Always|The string consisting of the string representation of each element in `data`, each separated by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>.|  \n|`callStack`|When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|","nodes":[{"pos":[0,12],"content":"This method:","nodes":[{"content":"This method:","pos":[0,12]}]},{"pos":[22,74],"content":"Formats the data and context information for output,","nodes":[{"content":"Formats the data and context information for output,","pos":[0,52]}]},{"pos":[84,121],"content":"Creates a new log file, if necessary,","nodes":[{"content":"Creates a new log file, if necessary,","pos":[0,37]}]},{"pos":[131,170],"content":"Writes the information to the log file.","nodes":[{"content":"Writes the information to the log file.","pos":[0,39]}]},{"pos":[177,306],"content":"For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.","nodes":[{"content":"For more information on creating new log files, see <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph>.","pos":[0,129],"source":"For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>."}]},{"pos":[313,551],"content":"This table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.","nodes":[{"content":"This table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.","pos":[0,238],"nodes":[{"content":"This table lists the output fields in the order they appear.","pos":[0,60]},{"content":"The fields are delimited by the string that the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt;</ph> property specifies, and are followed by a line terminator.","pos":[61,238],"source":" The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator."}]}]},{"pos":[558,567],"content":"<bpt id=\"p1\">**</bpt>Field<ept id=\"p1\">**</ept>","source":"**Field**"},{"pos":[568,588],"content":"<bpt id=\"p1\">**</bpt>Output condition<ept id=\"p1\">**</ept>","source":"**Output condition**"},{"pos":[589,604],"content":"<bpt id=\"p1\">**</bpt>Description<ept id=\"p1\">**</ept>","source":"**Description**"},{"pos":[687,693],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[694,714],"content":"The value of <ph id=\"ph1\">`name`</ph>.","source":"The value of `name`."},{"pos":[730,736],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[737,779],"content":"The enumeration-value name of <ph id=\"ph1\">`eventType`</ph>.","source":"The enumeration-value name of `eventType`."},{"pos":[789,795],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[796,830],"content":"The string representation of <ph id=\"ph1\">`id`</ph>.","source":"The string representation of `id`."},{"pos":[845,851],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[852,1019],"content":"The string consisting of the string representation of each element in <ph id=\"ph1\">`data`</ph>, each separated by <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt;</ph>.","source":"The string consisting of the string representation of each element in `data`, each separated by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>."},{"pos":[1036,1184],"content":"When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.Callstack&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1185,1269],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.Callstack%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`."},{"pos":[1290,1450],"content":"When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.LogicalOperationStack&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,160],"source":"When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1451,1534],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`."},{"pos":[1550,1697],"content":"When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.DateTime&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,147],"source":"When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1698,1867],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.DateTime%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,112],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[113,169]}]},{"pos":[1884,2032],"content":"When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.ProcessId&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[2033,2203],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ProcessId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,113],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[114,170]}]},{"pos":[2219,2366],"content":"When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.ThreadId&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,147],"source":"When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[2367,2450],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`."},{"pos":[2467,2615],"content":"When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.Timestamp&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[2616,2786],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.Timestamp%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,113],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[114,170]}]},{"pos":[2802,2907],"content":"When the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A&gt;</ph> property is <ph id=\"ph2\">`True`</ph>.","source":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`."},{"pos":[2908,2933],"content":"The name of the computer.","nodes":[{"content":"The name of the computer.","pos":[0,25]}]}],"pos":[61353,64314],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.","nodes":[{"pos":[0,142],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;&lt;/xref&gt;</ph> object that contains the current process ID, thread ID, and stack trace information.","source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."}],"pos":[64603,64746],"yaml":true},{"content":"The name of the trace source that invoked this method.","nodes":[{"pos":[0,54],"content":"The name of the trace source that invoked this method.","nodes":[{"content":"The name of the trace source that invoked this method.","pos":[0,54]}]}],"pos":[64808,64863],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.","nodes":[{"pos":[0,85],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."}],"pos":[64948,65034],"yaml":true},{"content":"A numeric identifier for the event.","nodes":[{"pos":[0,35],"content":"A numeric identifier for the event.","nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]}],"pos":[65091,65127],"yaml":true},{"content":"An array of objects to emit as data.","nodes":[{"pos":[0,36],"content":"An array of objects to emit as data.","nodes":[{"content":"An array of objects to emit as data.","pos":[0,36]}]}],"pos":[65189,65226],"yaml":true},{"content":"Writes trace information, a message and event information to the output file or stream.","nodes":[{"pos":[0,87],"content":"Writes trace information, a message and event information to the output file or stream.","nodes":[{"content":"Writes trace information, a message and event information to the output file or stream.","pos":[0,87]}]}],"pos":[66795,66883],"yaml":true},{"content":"This method:  \n  \n1.  Formats the data and context information for output.  \n  \n2.  Creates a new log file, if necessary.  \n  \n3.  Writes the information to the log file.  \n  \n For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \n  \n This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.  \n  \n|**Field**|**Output condition**|**Description**|  \n|---------------|--------------------------|---------------------|  \n|`source`|Always.|The value of `name`.|  \n|`severity`|Always.|The enumeration-value name of `eventType`.|  \n|`id`|Always.|The string representation of `id`.|  \n|`message`|Always.|The value of `message`.|  \n|`callStack`|When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|","nodes":[{"pos":[0,12],"content":"This method:","nodes":[{"content":"This method:","pos":[0,12]}]},{"pos":[22,74],"content":"Formats the data and context information for output.","nodes":[{"content":"Formats the data and context information for output.","pos":[0,52]}]},{"pos":[84,121],"content":"Creates a new log file, if necessary.","nodes":[{"content":"Creates a new log file, if necessary.","pos":[0,37]}]},{"pos":[131,170],"content":"Writes the information to the log file.","nodes":[{"content":"Writes the information to the log file.","pos":[0,39]}]},{"pos":[177,306],"content":"For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.","nodes":[{"content":"For more information on creating new log files, see <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph>.","pos":[0,129],"source":"For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>."}]},{"pos":[313,560],"content":"This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.","nodes":[{"content":"This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.","pos":[0,247],"nodes":[{"content":"This table lists the output fields in the order in which they appear.","pos":[0,69]},{"content":"The fields are delimited by the string that the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt;</ph> property specifies, and are followed by a line terminator.","pos":[70,247],"source":" The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator."}]}]},{"pos":[567,576],"content":"<bpt id=\"p1\">**</bpt>Field<ept id=\"p1\">**</ept>","source":"**Field**"},{"pos":[577,597],"content":"<bpt id=\"p1\">**</bpt>Output condition<ept id=\"p1\">**</ept>","source":"**Output condition**"},{"pos":[598,613],"content":"<bpt id=\"p1\">**</bpt>Description<ept id=\"p1\">**</ept>","source":"**Description**"},{"pos":[696,703],"content":"Always.","nodes":[{"content":"Always.","pos":[0,7]}]},{"pos":[704,724],"content":"The value of <ph id=\"ph1\">`name`</ph>.","source":"The value of `name`."},{"pos":[740,747],"content":"Always.","nodes":[{"content":"Always.","pos":[0,7]}]},{"pos":[748,790],"content":"The enumeration-value name of <ph id=\"ph1\">`eventType`</ph>.","source":"The enumeration-value name of `eventType`."},{"pos":[800,807],"content":"Always.","nodes":[{"content":"Always.","pos":[0,7]}]},{"pos":[808,842],"content":"The string representation of <ph id=\"ph1\">`id`</ph>.","source":"The string representation of `id`."},{"pos":[857,864],"content":"Always.","nodes":[{"content":"Always.","pos":[0,7]}]},{"pos":[865,888],"content":"The value of <ph id=\"ph1\">`message`</ph>.","source":"The value of `message`."},{"pos":[905,1053],"content":"When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.Callstack&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1054,1138],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.Callstack%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`."},{"pos":[1159,1319],"content":"When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.LogicalOperationStack&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,160],"source":"When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1320,1403],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`."},{"pos":[1419,1566],"content":"When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.DateTime&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,147],"source":"When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1567,1736],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.DateTime%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,112],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[113,169]}]},{"pos":[1753,1901],"content":"When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.ProcessId&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1902,2072],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ProcessId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,113],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[114,170]}]},{"pos":[2088,2235],"content":"When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.ThreadId&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,147],"source":"When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[2236,2319],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`."},{"pos":[2336,2484],"content":"When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.Timestamp&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[2485,2655],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.Timestamp%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,113],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[114,170]}]},{"pos":[2671,2776],"content":"When the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A&gt;</ph> property is <ph id=\"ph2\">`True`</ph>.","source":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`."},{"pos":[2777,2802],"content":"The name of the computer.","nodes":[{"content":"The name of the computer.","pos":[0,25]}]}],"pos":[66894,69724],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.","nodes":[{"pos":[0,142],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;&lt;/xref&gt;</ph> object that contains the current process ID, thread ID, and stack trace information.","source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."}],"pos":[70015,70158],"yaml":true},{"content":"A name of the trace source that invoked this method.","nodes":[{"pos":[0,52],"content":"A name of the trace source that invoked this method.","nodes":[{"content":"A name of the trace source that invoked this method.","pos":[0,52]}]}],"pos":[70220,70273],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.","nodes":[{"pos":[0,85],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."}],"pos":[70358,70444],"yaml":true},{"content":"A numeric identifier for the event.","nodes":[{"pos":[0,35],"content":"A numeric identifier for the event.","nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]}],"pos":[70501,70537],"yaml":true},{"content":"A message to write.","nodes":[{"pos":[0,19],"content":"A message to write.","nodes":[{"content":"A message to write.","pos":[0,19]}]}],"pos":[70600,70620],"yaml":true},{"content":"Writes trace information, a formatted array of objects, and event information to the output file or stream.","nodes":[{"pos":[0,107],"content":"Writes trace information, a formatted array of objects, and event information to the output file or stream.","nodes":[{"content":"Writes trace information, a formatted array of objects, and event information to the output file or stream.","pos":[0,107]}]}],"pos":[72268,72376],"yaml":true},{"content":"This method:  \n  \n1.  Formats the data and context information for output.  \n  \n2.  Creates a new a new log file, if necessary.  \n  \n3.  Writes the information to the log file.  \n  \n For more information on creating new log file, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \n  \n This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and followed by a line terminator.  \n  \n|**Field**|**Output condition**|**Description**|  \n|---------------|--------------------------|---------------------|  \n|`source`|Always|The value of `name`.|  \n|`severity`|Always|The enumeration-value name of `eventType`.|  \n|`id`|Always|The string representation of `id`.|  \n|`message`|Always|The data in `args` formatted with the `format` string and using the invariant culture for string conversions.|  \n|`callStack`|When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|","nodes":[{"pos":[0,12],"content":"This method:","nodes":[{"content":"This method:","pos":[0,12]}]},{"pos":[22,74],"content":"Formats the data and context information for output.","nodes":[{"content":"Formats the data and context information for output.","pos":[0,52]}]},{"pos":[84,127],"content":"Creates a new a new log file, if necessary.","nodes":[{"content":"Creates a new a new log file, if necessary.","pos":[0,43]}]},{"pos":[137,176],"content":"Writes the information to the log file.","nodes":[{"content":"Writes the information to the log file.","pos":[0,39]}]},{"pos":[183,311],"content":"For more information on creating new log file, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.","nodes":[{"content":"For more information on creating new log file, see <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A&gt;</ph>.","pos":[0,128],"source":"For more information on creating new log file, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>."}]},{"pos":[318,561],"content":"This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and followed by a line terminator.","nodes":[{"content":"This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and followed by a line terminator.","pos":[0,243],"nodes":[{"content":"This table lists the output fields in the order in which they appear.","pos":[0,69]},{"content":"The fields are delimited by the string that the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A&gt;</ph> property specifies, and followed by a line terminator.","pos":[70,243],"source":" The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and followed by a line terminator."}]}]},{"pos":[568,577],"content":"<bpt id=\"p1\">**</bpt>Field<ept id=\"p1\">**</ept>","source":"**Field**"},{"pos":[578,598],"content":"<bpt id=\"p1\">**</bpt>Output condition<ept id=\"p1\">**</ept>","source":"**Output condition**"},{"pos":[599,614],"content":"<bpt id=\"p1\">**</bpt>Description<ept id=\"p1\">**</ept>","source":"**Description**"},{"pos":[697,703],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[704,724],"content":"The value of <ph id=\"ph1\">`name`</ph>.","source":"The value of `name`."},{"pos":[740,746],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[747,789],"content":"The enumeration-value name of <ph id=\"ph1\">`eventType`</ph>.","source":"The enumeration-value name of `eventType`."},{"pos":[799,805],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[806,840],"content":"The string representation of <ph id=\"ph1\">`id`</ph>.","source":"The string representation of `id`."},{"pos":[855,861],"content":"Always","nodes":[{"content":"Always","pos":[0,6]}]},{"pos":[862,971],"content":"The data in <ph id=\"ph1\">`args`</ph> formatted with the <ph id=\"ph2\">`format`</ph> string and using the invariant culture for string conversions.","source":"The data in `args` formatted with the `format` string and using the invariant culture for string conversions."},{"pos":[988,1136],"content":"When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.Callstack&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1137,1221],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.Callstack%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`."},{"pos":[1242,1402],"content":"When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.LogicalOperationStack&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,160],"source":"When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1403,1486],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`."},{"pos":[1502,1649],"content":"When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.DateTime&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,147],"source":"When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1650,1819],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.DateTime%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,112],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[113,169]}]},{"pos":[1836,1984],"content":"When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.ProcessId&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[1985,2155],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ProcessId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,113],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[114,170]}]},{"pos":[2171,2318],"content":"When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.ThreadId&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,147],"source":"When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[2319,2402],"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.ThreadId%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","source":"The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`."},{"pos":[2419,2567],"content":"When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceOptions.Timestamp&gt;</ph> flag is set in the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A&gt;</ph> property.","pos":[0,148],"source":"When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property."}]},{"pos":[2568,2738],"content":"The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.","nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceEventCache.Timestamp%2A&gt;</ph> property of <ph id=\"ph2\">`eventCache`</ph>.","pos":[0,113],"source":"The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`."},{"content":"The invariant culture is used for the string conversion.","pos":[114,170]}]},{"pos":[2754,2859],"content":"When the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A&gt;</ph> property is <ph id=\"ph2\">`True`</ph>.","source":"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`."},{"pos":[2860,2885],"content":"The name of the computer.","nodes":[{"content":"The name of the computer.","pos":[0,25]}]}],"pos":[72387,75300],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.","nodes":[{"pos":[0,142],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventCache\"&gt;&lt;/xref&gt;</ph> object that contains the current process ID, thread ID, and stack trace information.","source":"A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information."}],"pos":[75605,75748],"yaml":true},{"content":"A name of the trace source that invoked this method.","nodes":[{"pos":[0,52],"content":"A name of the trace source that invoked this method.","nodes":[{"content":"A name of the trace source that invoked this method.","pos":[0,52]}]}],"pos":[75810,75863],"yaml":true},{"content":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.","nodes":[{"pos":[0,85],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."}],"pos":[75948,76034],"yaml":true},{"content":"A numeric identifier for the event.","nodes":[{"pos":[0,35],"content":"A numeric identifier for the event.","nodes":[{"content":"A numeric identifier for the event.","pos":[0,35]}]}],"pos":[76091,76127],"yaml":true},{"content":"A format string that contains zero or more format items, which correspond to objects in the <code>args</code> array.","nodes":[{"pos":[0,116],"content":"A format string that contains zero or more format items, which correspond to objects in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","source":"A format string that contains zero or more format items, which correspond to objects in the <code>args</code> array."}],"pos":[76189,76306],"yaml":true},{"content":"An `Object` array containing zero or more objects to format.","nodes":[{"pos":[0,60],"content":"An <ph id=\"ph1\">`Object`</ph> array containing zero or more objects to format.","source":"An `Object` array containing zero or more objects to format."}],"pos":[76368,76429],"yaml":true},{"content":"Writes a verbatim message to disk, without any additional context information.","nodes":[{"pos":[0,78],"content":"Writes a verbatim message to disk, without any additional context information.","nodes":[{"content":"Writes a verbatim message to disk, without any additional context information.","pos":[0,78]}]}],"pos":[77537,77616],"yaml":true},{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> method writes a specific message to the log file, without any additional context information.  \n  \n Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.","nodes":[{"pos":[0,164],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> method writes a specific message to the log file, without any additional context information.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A&gt;</ph> method writes a specific message to the log file, without any additional context information.","pos":[0,164],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> method writes a specific message to the log file, without any additional context information."}]},{"pos":[171,322],"content":"Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.","nodes":[{"content":"Use the one of the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A&gt;</ph> methods to include the context information in the log output.","pos":[0,151],"source":"Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output."}]}],"pos":[77627,77954],"yaml":true,"extradata":"MT"},{"content":"`String`. The custom message to write.","nodes":[{"pos":[0,38],"content":"`String`. The custom message to write.","nodes":[{"content":"<ph id=\"ph1\">`String`</ph>.","pos":[0,9],"source":"`String`."},{"content":"The custom message to write.","pos":[10,38]}]}],"pos":[78101,78142],"yaml":true},{"content":"Writes a verbatim message to disk, followed by the current line terminator, without any additional context information.","nodes":[{"pos":[0,119],"content":"Writes a verbatim message to disk, followed by the current line terminator, without any additional context information.","nodes":[{"content":"Writes a verbatim message to disk, followed by the current line terminator, without any additional context information.","pos":[0,119]}]}],"pos":[79269,79389],"yaml":true},{"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> method writes a specific message to the log file, without any additional context information.  \n  \n Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.","nodes":[{"pos":[0,168],"content":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> method writes a specific message to the log file, without any additional context information.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A&gt;</ph> method writes a specific message to the log file, without any additional context information.","pos":[0,168],"source":"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> method writes a specific message to the log file, without any additional context information."}]},{"pos":[175,326],"content":"Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.","nodes":[{"content":"Use the one of the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A&gt;</ph> methods to include the context information in the log output.","pos":[0,151],"source":"Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output."}]}],"pos":[79400,79731],"yaml":true,"extradata":"MT"},{"content":"`String`. The custom message to write.","nodes":[{"pos":[0,38],"content":"`String`. The custom message to write.","nodes":[{"content":"<ph id=\"ph1\">`String`</ph>.","pos":[0,9],"source":"`String`."},{"content":"The custom message to write.","pos":[10,38]}]}],"pos":[79882,79923],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  commentId: T:Microsoft.VisualBasic.Logging.FileLogTraceListener\n  id: FileLogTraceListener\n  children:\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Append\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Close\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)\n  - Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)\n  langs:\n  - csharp\n  name: FileLogTraceListener\n  nameWithType: FileLogTraceListener\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  type: Class\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Provides a simple listener that directs logging output to file.\n  remarks: \"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class provides automated maintenance capabilities to archive log files as needed, on a daily or per-application basis. This automatic archival functionality helps reduce the maintenance responsibilities of developers and administrators.  \\n  \\n An instance of <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be added to the <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> collections to redirect output from logging to a text file. Instances of this class can also be added to `My.Application.Log` or `My.Log` (for Web applications) in [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] applications. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  \\n  \\n The main features of this class are:  \\n  \\n1.  *Archival functionality*. The log files generated by this class are named according to the base name and the date, along with a number to distinguish the log file from successive versions of the log. New log files are created on an as-needed basis.  \\n  \\n     The explicit form of the file name is `baseName`[-`dateStamp`][-`version`].log, where:  \\n  \\n    -   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \\n  \\n    -   The `dateStamp` part has the format \\\"YYYY-MM-DD\\\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  \\n  \\n    -   If more than one log file is needed with the same `baseName` and `dateStamp`, the `version` part, a positive `Integer`, is added to the file name.  \\n  \\n2.  *Multiple class instances*. If an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to a file that is in use:  \\n  \\n    -   The class shares the file if it is being used by another instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class in the same process.  \\n  \\n    -   The class creates a new log file using the next available name if the file is being used by another process.  \\n  \\n3.  *Thread safety*. The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class is thread safe. This allows you to safely write messages to the log from multiple threads without using locks.  \\n  \\n **Log-File Location**  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property takes a <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration to specify one of the typical directories to write the log file to.  \\n  \\n-   To write the log to another location, set the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property to that location.  \\n  \\n **Log-File Name**  \\n  \\n-   The base name for the log file is specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \\n  \\n-   The current log file name can be read from the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property. It is derived from several other properties and the current state of the logs in the file system.  \\n  \\n **Log Maintenance**  \\n  \\n-   The minimum frequency for creating new log files is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. When the value is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>, a new log file is created at least once every day or week, and a date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.  \\n  \\n-   The maximum size (in bytes) of the log file is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property. If the log file size exceeds this size, additional messages written to the log are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> property determines how much free space (in bytes) must be available. This helps ensure that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class will not consume all available disk space. Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to specify the behavior of log writes when there are less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> bytes free.  \\n  \\n **Log-File Output Settings**  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property specifies whether the underlying stream should be flushed automatically after each write to the log file.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property specifies whether to append messages to the current log file, if allowed, or write them to a new log file.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies the string to use for delimiting the fields within a log message.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property specifies the encoding to use when creating a new log file.  \\n  \\n **Log-File Output**  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods write messages to the log file. These methods check the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property, along with any existing logs with the same base name to determine if a new log should be created.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method flushes any messages currently in the output buffer to the log file.  \\n  \\n-   The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method closes the log file so that it can be used by other processes.  \\n  \\n **Enabling Output**  \\n  \\n You must enable tracing or debugging to use a trace listener. The following syntax is compiler specific. If you use compilers other than C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], refer to the documentation for your compiler.  \\n  \\n-   To enable debugging in C#, add the `/d:DEBUG` flag to the compiler command line when you compile your code, or you can add `#define DEBUG` to the top of your file. In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], add the `/d:DEBUG=True` flag to the compiler command line.  \\n  \\n-   To enable tracing in C#, add the `/d:TRACE` flag to the compiler command line when you compile your code, or add `#define TRACE` to the top of your file. In [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], add the `/d:TRACE=True` flag to the compiler command line.  \\n  \\n To set the level of your listener, edit the configuration file for your application. Within this file, you can add a listener, set its type and set its parameters, remove a listener, or clear all the listeners previously set by the application. The configuration file should be formatted like the following example.  \\n  \\n For this example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).  \\n  \\n```  \\n<configuration>  \\n    <system.diagnostics>  \\n        <sharedListeners>  \\n            <add name=\\\"FileLog\\\"  \\n                type=\\\"Microsoft.VisualBasic.Logging.FileLogTraceListener,   \\n                      Microsoft.VisualBasic, Version=8.0.0.0,   \\n                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   \\n                      processorArchitecture=MSIL\\\"   \\n                initializeData=\\\"FileLogWriter\\\"/>  \\n        </sharedListeners>  \\n    </system.diagnostics>  \\n</configuration>  \\n```\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class FileLogTraceListener : System.Diagnostics.TraceListener\n  inheritance:\n  - System.Object\n  - System.Diagnostics.TraceListener\n  implements: []\n  inheritedMembers:\n  - System.Diagnostics.TraceListener.Attributes\n  - System.Diagnostics.TraceListener.Dispose\n  - System.Diagnostics.TraceListener.Fail(System.String)\n  - System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  - System.Diagnostics.TraceListener.Filter\n  - System.Diagnostics.TraceListener.IndentLevel\n  - System.Diagnostics.TraceListener.IndentSize\n  - System.Diagnostics.TraceListener.IsThreadSafe\n  - System.Diagnostics.TraceListener.Name\n  - System.Diagnostics.TraceListener.NeedIndent\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.TraceListener.TraceOutputOptions\n  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  - System.Diagnostics.TraceListener.Write(System.Object)\n  - System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  - System.Diagnostics.TraceListener.Write(System.String,System.String)\n  - System.Diagnostics.TraceListener.WriteIndent\n  - System.Diagnostics.TraceListener.WriteLine(System.Object)\n  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: FileLogTraceListener()\n  nameWithType: FileLogTraceListener.FileLogTraceListener()\n  fullName: FileLogTraceListener.FileLogTraceListener()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> class with the default name.\n  remarks: \"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to FileLogTraceListener.  \\n  \\n You can access the instance name through the <xref:System.Diagnostics.TraceListener.Name%2A> property.\"\n  syntax:\n    content: public FileLogTraceListener ();\n    parameters: []\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: FileLogTraceListener(String)\n  nameWithType: FileLogTraceListener.FileLogTraceListener(String)\n  fullName: FileLogTraceListener.FileLogTraceListener(String)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> class with the supplied name.\n  remarks: \"This method sets the instance name of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class to `name`.  \\n  \\n You can access the instance name thought the <xref:System.Diagnostics.TraceListener.Name%2A> property.\"\n  syntax:\n    content: public FileLogTraceListener (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: '`String`. The name of the instance object.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append\n  id: Append\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Append\n  nameWithType: FileLogTraceListener.Append\n  fullName: FileLogTraceListener.Append\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Determines whether to append the output to the current file or write it to a new file.\n  remarks: \"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> property is `False`, the output is written to a new file. When the property is `True`, the output is appended to the current file, unless:  \\n  \\n-   The output file is locked by another process. In this situation, a new log file is created with a version number that is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.  \\n  \\n-   The current file size is greater than what the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> property allows. In this situation, additional messages are discarded and, depending on the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property, an exception is thrown.  \\n  \\n-   The existing file name is out of date according to the log-creation schedule specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property. In this situation, a new log file is created and the date stamp is incorporated into the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> name.\"\n  syntax:\n    content: >-\n      [set: System.Security.SecuritySafeCritical]\n\n      public bool Append { get; set; }\n    return:\n      type: System.Boolean\n      description: '`Boolean`, with `True` indicating that the output is appended to the current file, and `False` indicating that output is written to a new file. The default setting for this property is `True`.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append*\n  exceptions: []\n  attributes:\n  - type: 'set: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush\n  id: AutoFlush\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: AutoFlush\n  nameWithType: FileLogTraceListener.AutoFlush\n  fullName: FileLogTraceListener.AutoFlush\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Indicates whether or not the writing to the log file stream flushes the buffer.\n  remarks: The `False` setting for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> property provides the best performance for most applications, because it is more efficient to write multiple messages to the log file at one time. You can use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to flush any messages currently in the log file's output buffer. You can also use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method, which implicitly flushes the stream before closing the log file.\n  syntax:\n    content: >-\n      [set: System.Security.SecuritySafeCritical]\n\n      public bool AutoFlush { get; set; }\n    return:\n      type: System.Boolean\n      description: '`Boolean`, with `True` indicating that the stream is flushed after every write; otherwise the log entries are buffered and written more efficiently. The default setting for this property is `False`.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush*\n  exceptions: []\n  attributes:\n  - type: 'set: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName\n  id: BaseFileName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: BaseFileName\n  nameWithType: FileLogTraceListener.BaseFileName\n  fullName: FileLogTraceListener.BaseFileName\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the base name for the log files, which is used to create the full log-file name.\n  remarks: \"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property determines the base name for the log files that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to.  \\n  \\n The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \\n  \\n The explicit form of the full log file name is `path`\\\\\\\\`baseName`[-`dateStamp`][-`iteration`].log, where  \\n  \\n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \\n  \\n-   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \\n  \\n-   The `dateStamp` part has the format \\\"YYYY-MM-DD\\\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is set to <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  \\n  \\n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name.\"\n  syntax:\n    content: public string BaseFileName { get; set; }\n    return:\n      type: System.String\n      description: \"`String`. The base name for the log files. The default is the application's product name.\"\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close\n  id: Close\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: FileLogTraceListener.Close()\n  fullName: FileLogTraceListener.Close()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Closes the underlying stream for the current log file and releases any resources associated with the current stream.\n  remarks: You do not need to call the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> method explicitly, because the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class manages the underlying steam.\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation\n  id: CustomLocation\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: CustomLocation\n  nameWithType: FileLogTraceListener.CustomLocation\n  fullName: FileLogTraceListener.CustomLocation\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the log file directory when the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\"></xref> property is set to <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation.Custom\"></xref>.\n  remarks: \"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property is set, it also sets the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>.  \\n  \\n The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property will throw an exception if the directory cannot be resolved.\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public string CustomLocation { get; set; }\n    return:\n      type: System.String\n      description: \"`String`, which is the name of the log-file directory. The default setting for this property is the user's directory for application data.\"\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter\n  id: Delimiter\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Delimiter\n  nameWithType: FileLogTraceListener.Delimiter\n  fullName: FileLogTraceListener.Delimiter\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the delimiter used to delimit fields within a log message.\n  remarks: The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property allows you to change the default delimiter.\n  syntax:\n    content: public string Delimiter { get; set; }\n    return:\n      type: System.String\n      description: '`String`, which is the delimiter used for fields within a log message. The default setting for this property is the TAB character.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior\n  id: DiskSpaceExhaustedBehavior\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: DiskSpaceExhaustedBehavior\n  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior\n  fullName: FileLogTraceListener.DiskSpaceExhaustedBehavior\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Determines what to do when writing to the log file and there is less free disk space available than specified by the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\"></xref> property.\n  remarks: \"When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property is set to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, the log messages are silently discarded if there is not enough reserved disk space. This is the default behavior, and it prevents simple applications from failing if the disk gets too full.  \\n  \\n More robust applications can set the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property to <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>, and add `Try...Catch` blocks around all code that writes to the log.\"\n  syntax:\n    content: >-\n      [set: System.Security.SecuritySafeCritical]\n\n      public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }\n    return:\n      type: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\n      description: <xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\"></xref>. Determines what to do when attempting to write to the log file and there is less free disk space available than specified by the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\"></xref> property, or if the log file size is greater than what the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\"></xref> property allows. The default value is <xref href=\"Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior*\n  exceptions: []\n  attributes:\n  - type: 'set: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: FileLogTraceListener.Dispose(Boolean)\n  fullName: FileLogTraceListener.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Closes the underlying stream and optionally releases the managed resources.\n  remarks: When the `disposing` parameter is `True`, this method releases all resources held by any managed objects that this <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> references. This method invokes the `Dispose` method of each referenced object.\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`True` releases both managed and unmanaged resources; `False` releases only unmanaged resources.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding\n  id: Encoding\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Encoding\n  nameWithType: FileLogTraceListener.Encoding\n  fullName: FileLogTraceListener.Encoding\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the encoding to use when creating a new log file.\n  remarks: When appending text to an existing log file, the encoding for that file is used instead of the encoding specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> property.\n  syntax:\n    content: public System.Text.Encoding Encoding { get; set; }\n    return:\n      type: System.Text.Encoding\n      description: <xref href=\"System.Text.Encoding\"></xref>, which is the encoding to use when creating a new log file. The default value of this property is <xref href=\"System.Text.UTF8Encoding\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush\n  id: Flush\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: FileLogTraceListener.Flush()\n  fullName: FileLogTraceListener.Flush()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Flushes the underlying stream that writes to the current log file.\n  remarks: Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> method to write all buffered data to the current log file.\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName\n  id: FullLogFileName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: FullLogFileName\n  nameWithType: FileLogTraceListener.FullLogFileName\n  fullName: FileLogTraceListener.FullLogFileName\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets the current full log-file name.\n  remarks: \"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \\n  \\n The explicit form of the full log-file name is `path`\\\\\\\\`baseName`[-`dateStamp`][-`iteration`].log, where:  \\n  \\n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \\n  \\n-   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \\n  \\n-   The `dateStamp` part has the format YYYY-MM-DD, and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  \\n  \\n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name.\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public string FullLogFileName { get; }\n    return:\n      type: System.String\n      description: '`String`, which is the current full log-file name.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes\n  id: GetSupportedAttributes\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: GetSupportedAttributes()\n  nameWithType: FileLogTraceListener.GetSupportedAttributes()\n  fullName: FileLogTraceListener.GetSupportedAttributes()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets the custom XML configuration attributes supported by the trace listener.\n  remarks: The custom attributes for the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> can be used in the XML configuration file for controlling the behavior of an instance of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class. Using any other attribute causes a configuration exception.\n  syntax:\n    content: protected override string[] GetSupportedAttributes ();\n    parameters: []\n    return:\n      type: System.String[]\n      description: '`String` array containing the XML configuration attributes recognized by this listener.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName\n  id: IncludeHostName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: IncludeHostName\n  nameWithType: FileLogTraceListener.IncludeHostName\n  fullName: FileLogTraceListener.IncludeHostName\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Indicates whether or not the host name of the logging machine should be included in the output.\n  remarks: Use the property to configure the behavior of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> and <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> methods.\n  syntax:\n    content: >-\n      [set: System.Security.SecuritySafeCritical]\n\n      public bool IncludeHostName { get; set; }\n    return:\n      type: System.Boolean\n      description: '`Boolean`. Use `True` if the host identifier should be included; otherwise use `False`. The default value is `False`.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName*\n  exceptions: []\n  attributes:\n  - type: 'set: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\n  id: Location\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Location\n  nameWithType: FileLogTraceListener.Location\n  fullName: FileLogTraceListener.Location\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets location for the log files.\n  remarks: \"Use the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property to set the log path to one of the predefined paths, determined by the <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration values.  \\n  \\n|**Location value**|**Path**|  \\n|------------------------|--------------|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|The path for the application data that is shared among all users, with the format:<br /><br /> `BasePath`\\\\\\\\`CompanyName`\\\\\\\\`ProductName`\\\\\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\\\Documents and Settings\\\\All Users\\\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come from the assembly.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|The path for the executable file that started the application.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|The path for the application data of a user, with the format:<br /><br /> `BasePath`\\\\\\\\`CompanyName`\\\\\\\\`ProductName`\\\\\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\\\Documents and Settings\\\\\\\\`username`\\\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come form the assembly.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|The path of the current system's temporary folder.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|If the string specified by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> is not empty, then use it as the path; otherwise use the path for the application data of a user.|\"\n  syntax:\n    content: public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }\n    return:\n      type: Microsoft.VisualBasic.Logging.LogFileLocation\n      description: <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation\"></xref>, which is the location for the log file. The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule\n  id: LogFileCreationSchedule\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: LogFileCreationSchedule\n  nameWithType: FileLogTraceListener.LogFileCreationSchedule\n  fullName: FileLogTraceListener.LogFileCreationSchedule\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Determines which date to include in the names of the log files.\n  remarks: \"Assign one of the <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> enumeration values to the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> property to specify which date to include in the names of the log files.  \\n  \\n The format of the date is YYYY-MM-DD. For more information on the format of the log file name, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \\n  \\n|**LogFileCreationSchedule value**|**Date in the log file name**|  \\n|---------------------------------------|-----------------------------------|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|Include the current date in the log file name.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|Do not include the date in the log file name.|  \\n|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|Include the first day of the current week in the log file name.<br /><br /> The week starts on Saturday.|\"\n  syntax:\n    content: public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }\n    return:\n      type: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\n      description: <xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\"></xref>. This indicates which date to include in the log-file names. The default value is <xref href=\"Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None\"></xref>.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\n  id: MaxFileSize\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: MaxFileSize\n  nameWithType: FileLogTraceListener.MaxFileSize\n  fullName: FileLogTraceListener.MaxFileSize\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the maximum allowed size of the log file, in bytes.\n  remarks: \"Use this property to make sure that the log files do not grow too large.  \\n  \\n If the log file size (in bytes) is greater than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the amount of free disk space (in bytes) is less than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.\"\n  syntax:\n    content: >-\n      [set: System.Security.SecuritySafeCritical]\n\n      public long MaxFileSize { get; set; }\n    return:\n      type: System.Int64\n      description: '`Long`. This is the maximum allowed log-file size, in bytes. The default value is 5000000.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: When this property is set to a value less than 1000.\n  attributes:\n  - type: 'set: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\n  commentId: P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\n  id: ReserveDiskSpace\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: ReserveDiskSpace\n  nameWithType: FileLogTraceListener.ReserveDiskSpace\n  fullName: FileLogTraceListener.ReserveDiskSpace\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets or sets the amount of free disk space, in bytes, necessary before messages can be written to the log file.\n  remarks: \"Use this property to make sure that the log files do not completely fill the disk.  \\n  \\n If the amount of free disk space (in bytes) is less than the value of this property, then when the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class attempts to write a message to the log, the message is discarded and the failure is either silent or an exception is thrown depending on the value of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> property. Otherwise, the message is written to the log, if the log file size (in bytes) is greater than <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.\"\n  syntax:\n    content: >-\n      [set: System.Security.SecuritySafeCritical]\n\n      public long ReserveDiskSpace { get; set; }\n    return:\n      type: System.Int64\n      description: '`Long`. This is the amount of free disk space necessary. The default value is 10000000.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: When this property is set to a value less than 0.\n  attributes:\n  - type: 'set: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  nameWithType: FileLogTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  fullName: FileLogTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes trace information, a data object, and event information to the output file or stream.\n  remarks: \"This method:  \\n  \\n1.  Formats the data and context information for output.  \\n  \\n2.  Creates a new log file, if necessary.  \\n  \\n3.  Writes the information to the log file.  \\n  \\n For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \\n  \\n The following table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.  \\n  \\n|**Field**|**Output condition**|**Description**|  \\n|---------------|--------------------------|---------------------|  \\n|`source`|Always|The value of `name`.|  \\n|`severity`|Always|The enumeration-value name of `eventType`.|  \\n|`id`|Always|The string representation of `id`.|  \\n|`message`|Always|The string representation of `data`.|  \\n|`callStack`|When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \\n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|\"\n  syntax:\n    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name of the trace source that invoked this method.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object\n      description: The trace data to emit.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  nameWithType: FileLogTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  fullName: FileLogTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes trace information, an array of data objects, and event information to the output file or stream.\n  remarks: \"This method:  \\n  \\n1.  Formats the data and context information for output,  \\n  \\n2.  Creates a new log file, if necessary,  \\n  \\n3.  Writes the information to the log file.  \\n  \\n For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \\n  \\n This table lists the output fields in the order they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.  \\n  \\n|**Field**|**Output condition**|**Description**|  \\n|---------------|--------------------------|---------------------|  \\n|`source`|Always|The value of `name`.|  \\n|`severity`|Always|The enumeration-value name of `eventType`.|  \\n|`id`|Always|The string representation of `id`.|  \\n|`message`|Always|The string consisting of the string representation of each element in `data`, each separated by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>.|  \\n|`callStack`|When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \\n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|\"\n  syntax:\n    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: The name of the trace source that invoked this method.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: data\n      type: System.Object[]\n      description: An array of objects to emit as data.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  fullName: FileLogTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes trace information, a message and event information to the output file or stream.\n  remarks: \"This method:  \\n  \\n1.  Formats the data and context information for output.  \\n  \\n2.  Creates a new log file, if necessary.  \\n  \\n3.  Writes the information to the log file.  \\n  \\n For more information on creating new log files, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \\n  \\n This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and are followed by a line terminator.  \\n  \\n|**Field**|**Output condition**|**Description**|  \\n|---------------|--------------------------|---------------------|  \\n|`source`|Always.|The value of `name`.|  \\n|`severity`|Always.|The enumeration-value name of `eventType`.|  \\n|`id`|Always.|The string representation of `id`.|  \\n|`message`|Always.|The value of `message`.|  \\n|`callStack`|When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \\n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|\"\n  syntax:\n    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name of the trace source that invoked this method.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: message\n      type: System.String\n      description: A message to write.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  fullName: FileLogTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes trace information, a formatted array of objects, and event information to the output file or stream.\n  remarks: \"This method:  \\n  \\n1.  Formats the data and context information for output.  \\n  \\n2.  Creates a new a new log file, if necessary.  \\n  \\n3.  Writes the information to the log file.  \\n  \\n For more information on creating new log file, see <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  \\n  \\n This table lists the output fields in the order in which they appear. The fields are delimited by the string that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> property specifies, and followed by a line terminator.  \\n  \\n|**Field**|**Output condition**|**Description**|  \\n|---------------|--------------------------|---------------------|  \\n|`source`|Always|The value of `name`.|  \\n|`severity`|Always|The enumeration-value name of `eventType`.|  \\n|`id`|Always|The string representation of `id`.|  \\n|`message`|Always|The data in `args` formatted with the `format` string and using the invariant culture for string conversions.|  \\n|`callStack`|When the <xref:System.Diagnostics.TraceOptions.Callstack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.Callstack%2A> property of `eventCache`.|  \\n|`CorrelationID`|When the <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`DateTime`|When the <xref:System.Diagnostics.TraceOptions.DateTime> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.DateTime%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ProcessID`|When the <xref:System.Diagnostics.TraceOptions.ProcessId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`ThreadID`|When the <xref:System.Diagnostics.TraceOptions.ThreadId> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> property of `eventCache`.|  \\n|`Timestamp`|When the <xref:System.Diagnostics.TraceOptions.Timestamp> flag is set in the <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> property.|The string representation of the <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> property of `eventCache`. The invariant culture is used for the string conversion.|  \\n|`HostName`|When the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> property is `True`.|The name of the computer.|\"\n  syntax:\n    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);\n    parameters:\n    - id: eventCache\n      type: System.Diagnostics.TraceEventCache\n      description: A <xref href=\"System.Diagnostics.TraceEventCache\"></xref> object that contains the current process ID, thread ID, and stack trace information.\n    - id: source\n      type: System.String\n      description: A name of the trace source that invoked this method.\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: One of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n    - id: id\n      type: System.Int32\n      description: A numeric identifier for the event.\n    - id: format\n      type: System.String\n      description: A format string that contains zero or more format items, which correspond to objects in the <code>args</code> array.\n    - id: args\n      type: System.Object[]\n      description: An `Object` array containing zero or more objects to format.\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)\n  id: Write(System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: FileLogTraceListener.Write(String)\n  fullName: FileLogTraceListener.Write(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes a verbatim message to disk, without any additional context information.\n  remarks: \"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> method writes a specific message to the log file, without any additional context information.  \\n  \\n Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.\"\n  syntax:\n    content: public override void Write (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: '`String`. The custom message to write.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)\n  commentId: M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)\n  id: WriteLine(System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  langs:\n  - csharp\n  name: WriteLine(String)\n  nameWithType: FileLogTraceListener.WriteLine(String)\n  fullName: FileLogTraceListener.WriteLine(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes a verbatim message to disk, followed by the current line terminator, without any additional context information.\n  remarks: \"The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> method writes a specific message to the log file, without any additional context information.  \\n  \\n Use the one of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> methods to include the context information in the log output.\"\n  syntax:\n    content: public override void WriteLine (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: '`String`. The custom message to write.'\n  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Diagnostics.TraceListener\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceListener\n  nameWithType: TraceListener\n  fullName: System.Diagnostics.TraceListener\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: FileLogTraceListener()\n  nameWithType: FileLogTraceListener.FileLogTraceListener()\n  fullName: FileLogTraceListener.FileLogTraceListener()\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: FileLogTraceListener(String)\n  nameWithType: FileLogTraceListener.FileLogTraceListener(String)\n  fullName: FileLogTraceListener.FileLogTraceListener(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Append\n  nameWithType: FileLogTraceListener.Append\n  fullName: FileLogTraceListener.Append\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: AutoFlush\n  nameWithType: FileLogTraceListener.AutoFlush\n  fullName: FileLogTraceListener.AutoFlush\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: BaseFileName\n  nameWithType: FileLogTraceListener.BaseFileName\n  fullName: FileLogTraceListener.BaseFileName\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Close()\n  nameWithType: FileLogTraceListener.Close()\n  fullName: FileLogTraceListener.Close()\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: CustomLocation\n  nameWithType: FileLogTraceListener.CustomLocation\n  fullName: FileLogTraceListener.CustomLocation\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Delimiter\n  nameWithType: FileLogTraceListener.Delimiter\n  fullName: FileLogTraceListener.Delimiter\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: DiskSpaceExhaustedBehavior\n  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior\n  fullName: FileLogTraceListener.DiskSpaceExhaustedBehavior\n- uid: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\n  parent: Microsoft.VisualBasic.Logging\n  isExternal: false\n  name: DiskSpaceExhaustedOption\n  nameWithType: DiskSpaceExhaustedOption\n  fullName: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: FileLogTraceListener.Dispose(Boolean)\n  fullName: FileLogTraceListener.Dispose(Boolean)\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Encoding\n  nameWithType: FileLogTraceListener.Encoding\n  fullName: FileLogTraceListener.Encoding\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  nameWithType: Encoding\n  fullName: System.Text.Encoding\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Flush()\n  nameWithType: FileLogTraceListener.Flush()\n  fullName: FileLogTraceListener.Flush()\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: FullLogFileName\n  nameWithType: FileLogTraceListener.FullLogFileName\n  fullName: FileLogTraceListener.FullLogFileName\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: GetSupportedAttributes()\n  nameWithType: FileLogTraceListener.GetSupportedAttributes()\n  fullName: FileLogTraceListener.GetSupportedAttributes()\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: IncludeHostName\n  nameWithType: FileLogTraceListener.IncludeHostName\n  fullName: FileLogTraceListener.IncludeHostName\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Location\n  nameWithType: FileLogTraceListener.Location\n  fullName: FileLogTraceListener.Location\n- uid: Microsoft.VisualBasic.Logging.LogFileLocation\n  parent: Microsoft.VisualBasic.Logging\n  isExternal: false\n  name: LogFileLocation\n  nameWithType: LogFileLocation\n  fullName: Microsoft.VisualBasic.Logging.LogFileLocation\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: LogFileCreationSchedule\n  nameWithType: FileLogTraceListener.LogFileCreationSchedule\n  fullName: FileLogTraceListener.LogFileCreationSchedule\n- uid: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\n  parent: Microsoft.VisualBasic.Logging\n  isExternal: false\n  name: LogFileCreationScheduleOption\n  nameWithType: LogFileCreationScheduleOption\n  fullName: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: MaxFileSize\n  nameWithType: FileLogTraceListener.MaxFileSize\n  fullName: FileLogTraceListener.MaxFileSize\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: ReserveDiskSpace\n  nameWithType: FileLogTraceListener.ReserveDiskSpace\n  fullName: FileLogTraceListener.ReserveDiskSpace\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  nameWithType: FileLogTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  fullName: FileLogTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  nameWithType: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  nameWithType: FileLogTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  fullName: FileLogTraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  fullName: FileLogTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  fullName: FileLogTraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Write(String)\n  nameWithType: FileLogTraceListener.Write(String)\n  fullName: FileLogTraceListener.Write(String)\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: FileLogTraceListener.WriteLine(String)\n  fullName: FileLogTraceListener.WriteLine(String)\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceData\n  nameWithType: FileLogTraceListener.TraceData\n  fullName: FileLogTraceListener.TraceData\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: TraceEvent\n  nameWithType: FileLogTraceListener.TraceEvent\n  fullName: FileLogTraceListener.TraceEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: FileLogTraceListener\n  nameWithType: FileLogTraceListener.FileLogTraceListener\n  fullName: FileLogTraceListener.FileLogTraceListener\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Append\n  nameWithType: FileLogTraceListener.Append\n  fullName: FileLogTraceListener.Append\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: AutoFlush\n  nameWithType: FileLogTraceListener.AutoFlush\n  fullName: FileLogTraceListener.AutoFlush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: BaseFileName\n  nameWithType: FileLogTraceListener.BaseFileName\n  fullName: FileLogTraceListener.BaseFileName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Close\n  nameWithType: FileLogTraceListener.Close\n  fullName: FileLogTraceListener.Close\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: CustomLocation\n  nameWithType: FileLogTraceListener.CustomLocation\n  fullName: FileLogTraceListener.CustomLocation\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Delimiter\n  nameWithType: FileLogTraceListener.Delimiter\n  fullName: FileLogTraceListener.Delimiter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: DiskSpaceExhaustedBehavior\n  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior\n  fullName: FileLogTraceListener.DiskSpaceExhaustedBehavior\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Dispose\n  nameWithType: FileLogTraceListener.Dispose\n  fullName: FileLogTraceListener.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Encoding\n  nameWithType: FileLogTraceListener.Encoding\n  fullName: FileLogTraceListener.Encoding\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Flush\n  nameWithType: FileLogTraceListener.Flush\n  fullName: FileLogTraceListener.Flush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: FullLogFileName\n  nameWithType: FileLogTraceListener.FullLogFileName\n  fullName: FileLogTraceListener.FullLogFileName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: GetSupportedAttributes\n  nameWithType: FileLogTraceListener.GetSupportedAttributes\n  fullName: FileLogTraceListener.GetSupportedAttributes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: IncludeHostName\n  nameWithType: FileLogTraceListener.IncludeHostName\n  fullName: FileLogTraceListener.IncludeHostName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Location\n  nameWithType: FileLogTraceListener.Location\n  fullName: FileLogTraceListener.Location\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: LogFileCreationSchedule\n  nameWithType: FileLogTraceListener.LogFileCreationSchedule\n  fullName: FileLogTraceListener.LogFileCreationSchedule\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: MaxFileSize\n  nameWithType: FileLogTraceListener.MaxFileSize\n  fullName: FileLogTraceListener.MaxFileSize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: ReserveDiskSpace\n  nameWithType: FileLogTraceListener.ReserveDiskSpace\n  fullName: FileLogTraceListener.ReserveDiskSpace\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: Write\n  nameWithType: FileLogTraceListener.Write\n  fullName: FileLogTraceListener.Write\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine*\n  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  isExternal: false\n  name: WriteLine\n  nameWithType: FileLogTraceListener.WriteLine\n  fullName: FileLogTraceListener.WriteLine\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/FileLogTraceListener.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Diagnostics.TraceListener.Attributes\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Attributes\n  nameWithType: TraceListener.Attributes\n  fullName: TraceListener.Attributes\n- uid: System.Diagnostics.TraceListener.Dispose\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Dispose()\n  nameWithType: TraceListener.Dispose()\n  fullName: TraceListener.Dispose()\n- uid: System.Diagnostics.TraceListener.Fail(System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Fail(String)\n  nameWithType: TraceListener.Fail(String)\n  fullName: TraceListener.Fail(String)\n- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Fail(String, String)\n  nameWithType: TraceListener.Fail(String, String)\n  fullName: TraceListener.Fail(String, String)\n- uid: System.Diagnostics.TraceListener.Filter\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Filter\n  nameWithType: TraceListener.Filter\n  fullName: TraceListener.Filter\n- uid: System.Diagnostics.TraceListener.IndentLevel\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IndentLevel\n  nameWithType: TraceListener.IndentLevel\n  fullName: TraceListener.IndentLevel\n- uid: System.Diagnostics.TraceListener.IndentSize\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IndentSize\n  nameWithType: TraceListener.IndentSize\n  fullName: TraceListener.IndentSize\n- uid: System.Diagnostics.TraceListener.IsThreadSafe\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IsThreadSafe\n  nameWithType: TraceListener.IsThreadSafe\n  fullName: TraceListener.IsThreadSafe\n- uid: System.Diagnostics.TraceListener.Name\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Name\n  nameWithType: TraceListener.Name\n  fullName: TraceListener.Name\n- uid: System.Diagnostics.TraceListener.NeedIndent\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: NeedIndent\n  nameWithType: TraceListener.NeedIndent\n  fullName: TraceListener.NeedIndent\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n  nameWithType: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n  fullName: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n- uid: System.Diagnostics.TraceListener.TraceOutputOptions\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceOutputOptions\n  nameWithType: TraceListener.TraceOutputOptions\n  fullName: TraceListener.TraceOutputOptions\n- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n  nameWithType: TraceListener.TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n  fullName: TraceListener.TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n- uid: System.Diagnostics.TraceListener.Write(System.Object)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(Object)\n  nameWithType: TraceListener.Write(Object)\n  fullName: TraceListener.Write(Object)\n- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(Object, String)\n  nameWithType: TraceListener.Write(Object, String)\n  fullName: TraceListener.Write(Object, String)\n- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(String, String)\n  nameWithType: TraceListener.Write(String, String)\n  fullName: TraceListener.Write(String, String)\n- uid: System.Diagnostics.TraceListener.WriteIndent\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteIndent()\n  nameWithType: TraceListener.WriteIndent()\n  fullName: TraceListener.WriteIndent()\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(Object)\n  nameWithType: TraceListener.WriteLine(Object)\n  fullName: TraceListener.WriteLine(Object)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(Object, String)\n  nameWithType: TraceListener.WriteLine(Object, String)\n  fullName: TraceListener.WriteLine(Object, String)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(String, String)\n  nameWithType: TraceListener.WriteLine(String, String)\n  fullName: TraceListener.WriteLine(String, String)\n"}