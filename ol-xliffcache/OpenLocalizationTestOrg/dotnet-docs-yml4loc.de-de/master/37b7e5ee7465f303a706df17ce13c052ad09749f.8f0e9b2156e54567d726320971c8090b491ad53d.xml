{"nodes":[{"content":"Defines the string comparison options to use with <xref href=\"System.Globalization.CompareInfo\"></xref>.","nodes":[{"pos":[0,104],"content":"Defines the string comparison options to use with <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph>.","source":"Defines the string comparison options to use with <xref href=\"System.Globalization.CompareInfo\"></xref>."}],"pos":[899,1004],"yaml":true},{"content":"These options denote case sensitivity or necessity to ignore types of characters.  \n  \n The .NET Framework uses three distinct ways of sorting: word sort, string sort, and ordinal sort. Word sort performs a culture-sensitive comparison of strings. Certain nonalphanumeric characters might have special weights assigned to them. For example, the hyphen (\"-\") might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list. String sort is similar to word sort, except that there are no special cases. Therefore, all nonalphanumeric symbols come before all alphanumeric characters. Ordinal sort compares strings based on the Unicode values of each element of the string.  \n  \n The StringSort value can only be used with <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> and <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>. <xref:System.ArgumentException> is thrown if the StringSort value is used with <xref:System.Globalization.CompareInfo.IsPrefix%2A?displayProperty=fullName>, <xref:System.Globalization.CompareInfo.IsSuffix%2A?displayProperty=fullName>, <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName>, or <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  When possible, the application should use string comparison methods that accept a <xref:System.Globalization.CompareOptions> value to specify the kind of comparison expected. As a general rule, user-facing comparisons are best served by the use of linguistic options (using the current culture), while security comparisons should specify Ordinal or OrdinalIgnoreCase.","nodes":[{"pos":[0,81],"content":"These options denote case sensitivity or necessity to ignore types of characters.","nodes":[{"content":"These options denote case sensitivity or necessity to ignore types of characters.","pos":[0,81]}]},{"pos":[88,720],"content":"The .NET Framework uses three distinct ways of sorting: word sort, string sort, and ordinal sort. Word sort performs a culture-sensitive comparison of strings. Certain nonalphanumeric characters might have special weights assigned to them. For example, the hyphen (\"-\") might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list. String sort is similar to word sort, except that there are no special cases. Therefore, all nonalphanumeric symbols come before all alphanumeric characters. Ordinal sort compares strings based on the Unicode values of each element of the string.","nodes":[{"content":"The .NET Framework uses three distinct ways of sorting: word sort, string sort, and ordinal sort. Word sort performs a culture-sensitive comparison of strings. Certain nonalphanumeric characters might have special weights assigned to them. For example, the hyphen (\"-\") might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list. String sort is similar to word sort, except that there are no special cases. Therefore, all nonalphanumeric symbols come before all alphanumeric characters. Ordinal sort compares strings based on the Unicode values of each element of the string.","pos":[0,632],"nodes":[{"content":"The .NET Framework uses three distinct ways of sorting: word sort, string sort, and ordinal sort.","pos":[0,97]},{"content":"Word sort performs a culture-sensitive comparison of strings.","pos":[98,159]},{"content":"Certain nonalphanumeric characters might have special weights assigned to them.","pos":[160,239]},{"content":"For example, the hyphen (\"-\") might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list.","pos":[240,386]},{"content":"String sort is similar to word sort, except that there are no special cases.","pos":[387,463]},{"content":"Therefore, all nonalphanumeric symbols come before all alphanumeric characters.","pos":[464,543]},{"content":"Ordinal sort compares strings based on the Unicode values of each element of the string.","pos":[544,632]}]}]},{"pos":[727,1325],"content":"The StringSort value can only be used with <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> and <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>. <xref:System.ArgumentException> is thrown if the StringSort value is used with <xref:System.Globalization.CompareInfo.IsPrefix%2A?displayProperty=fullName>, <xref:System.Globalization.CompareInfo.IsSuffix%2A?displayProperty=fullName>, <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName>, or <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName>.","nodes":[{"content":"The StringSort value can only be used with <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> and <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>. <xref:System.ArgumentException> is thrown if the StringSort value is used with <xref:System.Globalization.CompareInfo.IsPrefix%2A?displayProperty=fullName>, <xref:System.Globalization.CompareInfo.IsSuffix%2A?displayProperty=fullName>, <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName>, or <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName>.","pos":[0,598],"nodes":[{"content":"The StringSort value can only be used with <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName&gt;</ph>.","pos":[0,202],"source":"The StringSort value can only be used with <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> and <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>."},{"content":"<ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> is thrown if the StringSort value is used with <ph id=\"ph2\">&lt;xref:System.Globalization.CompareInfo.IsPrefix%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Globalization.CompareInfo.IsSuffix%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName&gt;</ph>.","pos":[203,598],"source":" <xref:System.ArgumentException> is thrown if the StringSort value is used with <xref:System.Globalization.CompareInfo.IsPrefix%2A?displayProperty=fullName>, <xref:System.Globalization.CompareInfo.IsSuffix%2A?displayProperty=fullName>, <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName>, or <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName>."}]}]},{"pos":[1333,1711],"content":"[!NOTE]\n When possible, the application should use string comparison methods that accept a <xref:System.Globalization.CompareOptions> value to specify the kind of comparison expected. As a general rule, user-facing comparisons are best served by the use of linguistic options (using the current culture), while security comparisons should specify Ordinal or OrdinalIgnoreCase.","leadings":["","> "],"nodes":[{"content":" When possible, the application should use string comparison methods that accept a <xref:System.Globalization.CompareOptions> value to specify the kind of comparison expected. As a general rule, user-facing comparisons are best served by the use of linguistic options (using the current culture), while security comparisons should specify Ordinal or OrdinalIgnoreCase.","pos":[8,376],"nodes":[{"content":"When possible, the application should use string comparison methods that accept a <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> value to specify the kind of comparison expected.","pos":[1,175],"source":" When possible, the application should use string comparison methods that accept a <xref:System.Globalization.CompareOptions> value to specify the kind of comparison expected."},{"content":"As a general rule, user-facing comparisons are best served by the use of linguistic options (using the current culture), while security comparisons should specify Ordinal or OrdinalIgnoreCase.","pos":[176,368]}]}]}],"pos":[1015,2742],"yaml":true,"extradata":"MT"},{"content":"Indicates that the string comparison must ignore case.","nodes":[{"pos":[0,54],"content":"Indicates that the string comparison must ignore case.","nodes":[{"content":"Indicates that the string comparison must ignore case.","pos":[0,54]}]}],"pos":[5253,5308],"yaml":true},{"content":"Indicates that the string comparison must ignore the Kana type. Kana type refers to Japanese hiragana and katakana characters, which represent phonetic sounds in the Japanese language. Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as \"computer\" or \"Internet\". A phonetic sound can be expressed in both hiragana and katakana. If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.","nodes":[{"pos":[0,537],"content":"Indicates that the string comparison must ignore the Kana type. Kana type refers to Japanese hiragana and katakana characters, which represent phonetic sounds in the Japanese language. Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as \"computer\" or \"Internet\". A phonetic sound can be expressed in both hiragana and katakana. If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.","nodes":[{"content":"Indicates that the string comparison must ignore the Kana type. Kana type refers to Japanese hiragana and katakana characters, which represent phonetic sounds in the Japanese language. Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as \"computer\" or \"Internet\". A phonetic sound can be expressed in both hiragana and katakana. If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.","pos":[0,537],"nodes":[{"content":"Indicates that the string comparison must ignore the Kana type.","pos":[0,63]},{"content":"Kana type refers to Japanese hiragana and katakana characters, which represent phonetic sounds in the Japanese language.","pos":[64,184]},{"content":"Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as \"computer\" or \"Internet\".","pos":[185,342]},{"content":"A phonetic sound can be expressed in both hiragana and katakana.","pos":[343,407]},{"content":"If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.","pos":[408,537]}]}]}],"pos":[6848,7386],"yaml":true},{"content":"Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics. The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) defines combining characters as characters that are combined with base characters to produce a new character. Nonspacing combining characters do not occupy a spacing position by themselves when rendered.","nodes":[{"pos":[0,374],"content":"Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics. The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) defines combining characters as characters that are combined with base characters to produce a new character. Nonspacing combining characters do not occupy a spacing position by themselves when rendered.","nodes":[{"content":"Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics.","pos":[0,101]},{"content":"The <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines combining characters as characters that are combined with base characters to produce a new character.","pos":[102,280],"source":" The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) defines combining characters as characters that are combined with base characters to produce a new character."},{"content":"Nonspacing combining characters do not occupy a spacing position by themselves when rendered.","pos":[281,374]}]}],"pos":[8930,9305],"yaml":true},{"content":"Indicates that the string comparison must ignore symbols, such as white-space characters, punctuation, currency symbols, the percent sign, mathematical symbols, the ampersand, and so on.","nodes":[{"pos":[0,186],"content":"Indicates that the string comparison must ignore symbols, such as white-space characters, punctuation, currency symbols, the percent sign, mathematical symbols, the ampersand, and so on.","nodes":[{"content":"Indicates that the string comparison must ignore symbols, such as white-space characters, punctuation, currency symbols, the percent sign, mathematical symbols, the ampersand, and so on.","pos":[0,186]}]}],"pos":[10843,11030],"yaml":true},{"content":"Indicates that the string comparison must ignore the character width. For example, Japanese katakana characters can be written as full-width or half-width. If this value is selected, the katakana characters written as full-width are considered equal to the same characters written as half-width.","nodes":[{"pos":[0,295],"content":"Indicates that the string comparison must ignore the character width. For example, Japanese katakana characters can be written as full-width or half-width. If this value is selected, the katakana characters written as full-width are considered equal to the same characters written as half-width.","nodes":[{"content":"Indicates that the string comparison must ignore the character width. For example, Japanese katakana characters can be written as full-width or half-width. If this value is selected, the katakana characters written as full-width are considered equal to the same characters written as half-width.","pos":[0,295],"nodes":[{"content":"Indicates that the string comparison must ignore the character width.","pos":[0,69]},{"content":"For example, Japanese katakana characters can be written as full-width or half-width.","pos":[70,155]},{"content":"If this value is selected, the katakana characters written as full-width are considered equal to the same characters written as half-width.","pos":[156,295]}]}]}],"pos":[12555,12851],"yaml":true},{"content":"Indicates the default option settings for string comparisons.","nodes":[{"pos":[0,61],"content":"Indicates the default option settings for string comparisons.","nodes":[{"content":"Indicates the default option settings for string comparisons.","pos":[0,61]}]}],"pos":[14332,14394],"yaml":true},{"content":"Indicates that the string comparison must use successive Unicode UTF-16 encoded values of the string (code unit by code unit comparison), leading to a fast comparison but one that is culture-insensitive. A string starting with a code unit XXXX16 comes before a string starting with YYYY16, if XXXX16 is less than YYYY16. This value cannot be combined with other <xref href=\"System.Globalization.CompareOptions\"></xref> values and must be used alone.","nodes":[{"pos":[0,449],"content":"Indicates that the string comparison must use successive Unicode UTF-16 encoded values of the string (code unit by code unit comparison), leading to a fast comparison but one that is culture-insensitive. A string starting with a code unit XXXX16 comes before a string starting with YYYY16, if XXXX16 is less than YYYY16. This value cannot be combined with other <xref href=\"System.Globalization.CompareOptions\"></xref> values and must be used alone.","nodes":[{"content":"Indicates that the string comparison must use successive Unicode UTF-16 encoded values of the string (code unit by code unit comparison), leading to a fast comparison but one that is culture-insensitive.","pos":[0,203]},{"content":"A string starting with a code unit XXXX16 comes before a string starting with YYYY16, if XXXX16 is less than YYYY16.","pos":[204,320]},{"content":"This value cannot be combined with other <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> values and must be used alone.","pos":[321,449],"source":" This value cannot be combined with other <xref href=\"System.Globalization.CompareOptions\"></xref> values and must be used alone."}]}],"pos":[15886,16336],"yaml":true},{"content":"String comparison must ignore case, then perform an ordinal comparison. This technique is equivalent to converting the string to uppercase using the invariant culture and then performing an ordinal comparison on the result.","nodes":[{"pos":[0,223],"content":"String comparison must ignore case, then perform an ordinal comparison. This technique is equivalent to converting the string to uppercase using the invariant culture and then performing an ordinal comparison on the result.","nodes":[{"content":"String comparison must ignore case, then perform an ordinal comparison. This technique is equivalent to converting the string to uppercase using the invariant culture and then performing an ordinal comparison on the result.","pos":[0,223],"nodes":[{"content":"String comparison must ignore case, then perform an ordinal comparison.","pos":[0,71]},{"content":"This technique is equivalent to converting the string to uppercase using the invariant culture and then performing an ordinal comparison on the result.","pos":[72,223]}]}]}],"pos":[17891,18115],"yaml":true},{"content":"Indicates that the string comparison must use the string sort algorithm. In a string sort, the hyphen and the apostrophe, as well as other nonalphanumeric symbols, come before alphanumeric characters.","nodes":[{"pos":[0,200],"content":"Indicates that the string comparison must use the string sort algorithm. In a string sort, the hyphen and the apostrophe, as well as other nonalphanumeric symbols, come before alphanumeric characters.","nodes":[{"content":"Indicates that the string comparison must use the string sort algorithm. In a string sort, the hyphen and the apostrophe, as well as other nonalphanumeric symbols, come before alphanumeric characters.","pos":[0,200],"nodes":[{"content":"Indicates that the string comparison must use the string sort algorithm.","pos":[0,72]},{"content":"In a string sort, the hyphen and the apostrophe, as well as other nonalphanumeric symbols, come before alphanumeric characters.","pos":[73,200]}]}]}],"pos":[19638,19839],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Globalization.CompareOptions\n  commentId: T:System.Globalization.CompareOptions\n  id: CompareOptions\n  children:\n  - System.Globalization.CompareOptions.IgnoreCase\n  - System.Globalization.CompareOptions.IgnoreKanaType\n  - System.Globalization.CompareOptions.IgnoreNonSpace\n  - System.Globalization.CompareOptions.IgnoreSymbols\n  - System.Globalization.CompareOptions.IgnoreWidth\n  - System.Globalization.CompareOptions.None\n  - System.Globalization.CompareOptions.Ordinal\n  - System.Globalization.CompareOptions.OrdinalIgnoreCase\n  - System.Globalization.CompareOptions.StringSort\n  langs:\n  - csharp\n  name: CompareOptions\n  nameWithType: CompareOptions\n  fullName: System.Globalization.CompareOptions\n  type: Enum\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Defines the string comparison options to use with <xref href=\"System.Globalization.CompareInfo\"></xref>.\n  remarks: \"These options denote case sensitivity or necessity to ignore types of characters.  \\n  \\n The .NET Framework uses three distinct ways of sorting: word sort, string sort, and ordinal sort. Word sort performs a culture-sensitive comparison of strings. Certain nonalphanumeric characters might have special weights assigned to them. For example, the hyphen (\\\"-\\\") might have a very small weight assigned to it so that \\\"coop\\\" and \\\"co-op\\\" appear next to each other in a sorted list. String sort is similar to word sort, except that there are no special cases. Therefore, all nonalphanumeric symbols come before all alphanumeric characters. Ordinal sort compares strings based on the Unicode values of each element of the string.  \\n  \\n The StringSort value can only be used with <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> and <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>. <xref:System.ArgumentException> is thrown if the StringSort value is used with <xref:System.Globalization.CompareInfo.IsPrefix%2A?displayProperty=fullName>, <xref:System.Globalization.CompareInfo.IsSuffix%2A?displayProperty=fullName>, <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName>, or <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  When possible, the application should use string comparison methods that accept a <xref:System.Globalization.CompareOptions> value to specify the kind of comparison expected. As a general rule, user-facing comparisons are best served by the use of linguistic options (using the current culture), while security comparisons should specify Ordinal or OrdinalIgnoreCase.\"\n  example:\n  - \"The following code example shows how sorting with StringSort differs from sorting without StringSort.  \\n  \\n [!code-cpp[System.Globalization.CompareOptions.StringSort#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareOptions.StringSort/CPP/compareoptions_stringsort.cpp#1)]\\n [!code-csharp[System.Globalization.CompareOptions.StringSort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareOptions.StringSort/CS/compareoptions_stringsort.cs#1)]\\n [!code-vb[System.Globalization.CompareOptions.StringSort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareOptions.StringSort/VB/compareoptions_stringsort.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Flags]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum CompareOptions\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.FlagsAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareOptions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareOptions.IgnoreCase\n  commentId: F:System.Globalization.CompareOptions.IgnoreCase\n  id: IgnoreCase\n  parent: System.Globalization.CompareOptions\n  langs:\n  - csharp\n  name: IgnoreCase\n  nameWithType: CompareOptions.IgnoreCase\n  fullName: CompareOptions.IgnoreCase\n  type: Field\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Indicates that the string comparison must ignore case.\n  syntax:\n    content: IgnoreCase\n    return:\n      type: System.Globalization.CompareOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareOptions.xml\n- uid: System.Globalization.CompareOptions.IgnoreKanaType\n  commentId: F:System.Globalization.CompareOptions.IgnoreKanaType\n  id: IgnoreKanaType\n  parent: System.Globalization.CompareOptions\n  langs:\n  - csharp\n  name: IgnoreKanaType\n  nameWithType: CompareOptions.IgnoreKanaType\n  fullName: CompareOptions.IgnoreKanaType\n  type: Field\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Indicates that the string comparison must ignore the Kana type. Kana type refers to Japanese hiragana and katakana characters, which represent phonetic sounds in the Japanese language. Hiragana is used for native Japanese expressions and words, while katakana is used for words borrowed from other languages, such as \"computer\" or \"Internet\". A phonetic sound can be expressed in both hiragana and katakana. If this value is selected, the hiragana character for one sound is considered equal to the katakana character for the same sound.\n  syntax:\n    content: IgnoreKanaType\n    return:\n      type: System.Globalization.CompareOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareOptions.xml\n- uid: System.Globalization.CompareOptions.IgnoreNonSpace\n  commentId: F:System.Globalization.CompareOptions.IgnoreNonSpace\n  id: IgnoreNonSpace\n  parent: System.Globalization.CompareOptions\n  langs:\n  - csharp\n  name: IgnoreNonSpace\n  nameWithType: CompareOptions.IgnoreNonSpace\n  fullName: CompareOptions.IgnoreNonSpace\n  type: Field\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Indicates that the string comparison must ignore nonspacing combining characters, such as diacritics. The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) defines combining characters as characters that are combined with base characters to produce a new character. Nonspacing combining characters do not occupy a spacing position by themselves when rendered.\n  syntax:\n    content: IgnoreNonSpace\n    return:\n      type: System.Globalization.CompareOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareOptions.xml\n- uid: System.Globalization.CompareOptions.IgnoreSymbols\n  commentId: F:System.Globalization.CompareOptions.IgnoreSymbols\n  id: IgnoreSymbols\n  parent: System.Globalization.CompareOptions\n  langs:\n  - csharp\n  name: IgnoreSymbols\n  nameWithType: CompareOptions.IgnoreSymbols\n  fullName: CompareOptions.IgnoreSymbols\n  type: Field\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Indicates that the string comparison must ignore symbols, such as white-space characters, punctuation, currency symbols, the percent sign, mathematical symbols, the ampersand, and so on.\n  syntax:\n    content: IgnoreSymbols\n    return:\n      type: System.Globalization.CompareOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareOptions.xml\n- uid: System.Globalization.CompareOptions.IgnoreWidth\n  commentId: F:System.Globalization.CompareOptions.IgnoreWidth\n  id: IgnoreWidth\n  parent: System.Globalization.CompareOptions\n  langs:\n  - csharp\n  name: IgnoreWidth\n  nameWithType: CompareOptions.IgnoreWidth\n  fullName: CompareOptions.IgnoreWidth\n  type: Field\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Indicates that the string comparison must ignore the character width. For example, Japanese katakana characters can be written as full-width or half-width. If this value is selected, the katakana characters written as full-width are considered equal to the same characters written as half-width.\n  syntax:\n    content: IgnoreWidth\n    return:\n      type: System.Globalization.CompareOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareOptions.xml\n- uid: System.Globalization.CompareOptions.None\n  commentId: F:System.Globalization.CompareOptions.None\n  id: None\n  parent: System.Globalization.CompareOptions\n  langs:\n  - csharp\n  name: None\n  nameWithType: CompareOptions.None\n  fullName: CompareOptions.None\n  type: Field\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Indicates the default option settings for string comparisons.\n  syntax:\n    content: None\n    return:\n      type: System.Globalization.CompareOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareOptions.xml\n- uid: System.Globalization.CompareOptions.Ordinal\n  commentId: F:System.Globalization.CompareOptions.Ordinal\n  id: Ordinal\n  parent: System.Globalization.CompareOptions\n  langs:\n  - csharp\n  name: Ordinal\n  nameWithType: CompareOptions.Ordinal\n  fullName: CompareOptions.Ordinal\n  type: Field\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Indicates that the string comparison must use successive Unicode UTF-16 encoded values of the string (code unit by code unit comparison), leading to a fast comparison but one that is culture-insensitive. A string starting with a code unit XXXX16 comes before a string starting with YYYY16, if XXXX16 is less than YYYY16. This value cannot be combined with other <xref href=\"System.Globalization.CompareOptions\"></xref> values and must be used alone.\n  syntax:\n    content: Ordinal\n    return:\n      type: System.Globalization.CompareOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareOptions.xml\n- uid: System.Globalization.CompareOptions.OrdinalIgnoreCase\n  commentId: F:System.Globalization.CompareOptions.OrdinalIgnoreCase\n  id: OrdinalIgnoreCase\n  parent: System.Globalization.CompareOptions\n  langs:\n  - csharp\n  name: OrdinalIgnoreCase\n  nameWithType: CompareOptions.OrdinalIgnoreCase\n  fullName: CompareOptions.OrdinalIgnoreCase\n  type: Field\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: String comparison must ignore case, then perform an ordinal comparison. This technique is equivalent to converting the string to uppercase using the invariant culture and then performing an ordinal comparison on the result.\n  syntax:\n    content: OrdinalIgnoreCase\n    return:\n      type: System.Globalization.CompareOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareOptions.xml\n- uid: System.Globalization.CompareOptions.StringSort\n  commentId: F:System.Globalization.CompareOptions.StringSort\n  id: StringSort\n  parent: System.Globalization.CompareOptions\n  langs:\n  - csharp\n  name: StringSort\n  nameWithType: CompareOptions.StringSort\n  fullName: CompareOptions.StringSort\n  type: Field\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Indicates that the string comparison must use the string sort algorithm. In a string sort, the hyphen and the apostrophe, as well as other nonalphanumeric symbols, come before alphanumeric characters.\n  syntax:\n    content: StringSort\n    return:\n      type: System.Globalization.CompareOptions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareOptions.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Globalization.CompareOptions.IgnoreCase\n  parent: System.Globalization.CompareOptions\n  isExternal: false\n  name: IgnoreCase\n  nameWithType: CompareOptions.IgnoreCase\n  fullName: CompareOptions.IgnoreCase\n- uid: System.Globalization.CompareOptions\n  parent: System.Globalization\n  isExternal: false\n  name: CompareOptions\n  nameWithType: CompareOptions\n  fullName: System.Globalization.CompareOptions\n- uid: System.Globalization.CompareOptions.IgnoreKanaType\n  parent: System.Globalization.CompareOptions\n  isExternal: false\n  name: IgnoreKanaType\n  nameWithType: CompareOptions.IgnoreKanaType\n  fullName: CompareOptions.IgnoreKanaType\n- uid: System.Globalization.CompareOptions.IgnoreNonSpace\n  parent: System.Globalization.CompareOptions\n  isExternal: false\n  name: IgnoreNonSpace\n  nameWithType: CompareOptions.IgnoreNonSpace\n  fullName: CompareOptions.IgnoreNonSpace\n- uid: System.Globalization.CompareOptions.IgnoreSymbols\n  parent: System.Globalization.CompareOptions\n  isExternal: false\n  name: IgnoreSymbols\n  nameWithType: CompareOptions.IgnoreSymbols\n  fullName: CompareOptions.IgnoreSymbols\n- uid: System.Globalization.CompareOptions.IgnoreWidth\n  parent: System.Globalization.CompareOptions\n  isExternal: false\n  name: IgnoreWidth\n  nameWithType: CompareOptions.IgnoreWidth\n  fullName: CompareOptions.IgnoreWidth\n- uid: System.Globalization.CompareOptions.None\n  parent: System.Globalization.CompareOptions\n  isExternal: false\n  name: None\n  nameWithType: CompareOptions.None\n  fullName: CompareOptions.None\n- uid: System.Globalization.CompareOptions.Ordinal\n  parent: System.Globalization.CompareOptions\n  isExternal: false\n  name: Ordinal\n  nameWithType: CompareOptions.Ordinal\n  fullName: CompareOptions.Ordinal\n- uid: System.Globalization.CompareOptions.OrdinalIgnoreCase\n  parent: System.Globalization.CompareOptions\n  isExternal: false\n  name: OrdinalIgnoreCase\n  nameWithType: CompareOptions.OrdinalIgnoreCase\n  fullName: CompareOptions.OrdinalIgnoreCase\n- uid: System.Globalization.CompareOptions.StringSort\n  parent: System.Globalization.CompareOptions\n  isExternal: false\n  name: StringSort\n  nameWithType: CompareOptions.StringSort\n  fullName: CompareOptions.StringSort\n"}