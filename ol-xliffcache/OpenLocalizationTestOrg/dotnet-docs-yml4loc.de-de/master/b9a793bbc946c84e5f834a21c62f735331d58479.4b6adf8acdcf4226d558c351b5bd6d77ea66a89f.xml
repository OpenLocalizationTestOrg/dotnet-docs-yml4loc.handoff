{"nodes":[{"content":"Provides lazy initialization routines.","nodes":[{"pos":[0,38],"content":"Provides lazy initialization routines.","nodes":[{"content":"Provides lazy initialization routines.","pos":[0,38]}]}],"pos":[846,885],"yaml":true},{"content":"These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.","nodes":[{"pos":[0,170],"content":"These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.","nodes":[{"content":"These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.","pos":[0,170]}]}],"pos":[896,1067],"yaml":true,"extradata":"MT"},{"content":"Initializes a target reference type with the type's default constructor if it hasn't already been initialized.","nodes":[{"pos":[0,110],"content":"Initializes a target reference type with the type's default constructor if it hasn't already been initialized.","nodes":[{"content":"Initializes a target reference type with the type's default constructor if it hasn't already been initialized.","pos":[0,110]}]}],"pos":[3805,3916],"yaml":true},{"content":"This method may only be used on reference types. To ensure initialization of value types, see other overloads of EnsureInitialized.  \n  \n This method may be used concurrently by multiple threads to initialize `target`.  \n  \n In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`. In such an occurrence, this method will not dispose of the objects that were not stored. If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.","nodes":[{"pos":[0,131],"content":"This method may only be used on reference types. To ensure initialization of value types, see other overloads of EnsureInitialized.","nodes":[{"content":"This method may only be used on reference types. To ensure initialization of value types, see other overloads of EnsureInitialized.","pos":[0,131],"nodes":[{"content":"This method may only be used on reference types.","pos":[0,48]},{"content":"To ensure initialization of value types, see other overloads of EnsureInitialized.","pos":[49,131]}]}]},{"pos":[138,218],"content":"This method may be used concurrently by multiple threads to initialize <ph id=\"ph1\">`target`</ph>.","source":"This method may be used concurrently by multiple threads to initialize `target`."},{"pos":[225,611],"content":"In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`. In such an occurrence, this method will not dispose of the objects that were not stored. If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.","nodes":[{"content":"In the event that multiple threads access this method concurrently, multiple instances of <ph id=\"ph1\">`T`</ph> may be created, but only one will be stored into <ph id=\"ph2\">`target`</ph>.","pos":[0,152],"source":"In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`."},{"content":"In such an occurrence, this method will not dispose of the objects that were not stored.","pos":[153,241]},{"content":"If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.","pos":[242,386]}]}],"pos":[3927,4545],"yaml":true,"extradata":"MT"},{"content":"A reference of type <code>T</code> to initialize if it has not already been initialized.","nodes":[{"pos":[0,88],"content":"A reference of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> to initialize if it has not already been initialized.","source":"A reference of type <code>T</code> to initialize if it has not already been initialized."}],"pos":[4705,4794],"yaml":true},{"content":"The type of the reference to be initialized.","nodes":[{"pos":[0,44],"content":"The type of the reference to be initialized.","nodes":[{"content":"The type of the reference to be initialized.","pos":[0,44]}]}],"pos":[4845,4890],"yaml":true},{"content":"The initialized reference of type <code>T</code>.","nodes":[{"pos":[0,49],"content":"The initialized reference of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The initialized reference of type <code>T</code>."}],"pos":[4935,4985],"yaml":true},{"content":"Permissions to access the constructor of type <code>T</code> were missing.","nodes":[{"pos":[0,74],"content":"Permissions to access the constructor of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> were missing.","source":"Permissions to access the constructor of type <code>T</code> were missing."}],"pos":[5168,5243],"yaml":true},{"content":"Type <code>T</code> does not have a default constructor.","nodes":[{"pos":[0,56],"content":"Type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not have a default constructor.","source":"Type <code>T</code> does not have a default constructor."}],"pos":[5347,5404],"yaml":true},{"content":"Initializes a target reference type by using a specified function if it hasn't already been initialized.","nodes":[{"pos":[0,104],"content":"Initializes a target reference type by using a specified function if it hasn't already been initialized.","nodes":[{"content":"Initializes a target reference type by using a specified function if it hasn't already been initialized.","pos":[0,104]}]}],"pos":[7013,7118],"yaml":true},{"content":"This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic). To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.  \n  \n This method may be used concurrently by multiple threads to initialize `target`.  \n  \n In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`. In such an occurrence, this method will not dispose of the objects that were not stored. If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.","nodes":[{"pos":[0,242],"content":"This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic). To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.","nodes":[{"content":"This method may only be used on reference types, and <ph id=\"ph1\">`valueFactory`</ph> may not return a null reference (Nothing in Visual Basic).","pos":[0,126],"source":"This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic)."},{"content":"To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.","pos":[127,242]}]},{"pos":[249,329],"content":"This method may be used concurrently by multiple threads to initialize <ph id=\"ph1\">`target`</ph>.","source":"This method may be used concurrently by multiple threads to initialize `target`."},{"pos":[336,722],"content":"In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`. In such an occurrence, this method will not dispose of the objects that were not stored. If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.","nodes":[{"content":"In the event that multiple threads access this method concurrently, multiple instances of <ph id=\"ph1\">`T`</ph> may be created, but only one will be stored into <ph id=\"ph2\">`target`</ph>.","pos":[0,152],"source":"In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`."},{"content":"In such an occurrence, this method will not dispose of the objects that were not stored.","pos":[153,241]},{"content":"If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.","pos":[242,386]}]}],"pos":[7129,7858],"yaml":true,"extradata":"MT"},{"content":"The reference of type <code>T</code> to initialize if it hasn't already been initialized.","nodes":[{"pos":[0,89],"content":"The reference of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> to initialize if it hasn't already been initialized.","source":"The reference of type <code>T</code> to initialize if it hasn't already been initialized."}],"pos":[8040,8130],"yaml":true},{"content":"The function that is called to initialize the reference.","nodes":[{"pos":[0,56],"content":"The function that is called to initialize the reference.","nodes":[{"content":"The function that is called to initialize the reference.","pos":[0,56]}]}],"pos":[8199,8256],"yaml":true},{"content":"The reference type of the reference to be initialized.","nodes":[{"pos":[0,54],"content":"The reference type of the reference to be initialized.","nodes":[{"content":"The reference type of the reference to be initialized.","pos":[0,54]}]}],"pos":[8307,8362],"yaml":true},{"content":"The initialized value of type <code>T</code>.","nodes":[{"pos":[0,45],"content":"The initialized value of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The initialized value of type <code>T</code>."}],"pos":[8407,8453],"yaml":true},{"content":"Type <code>T</code> does not have a default constructor.","nodes":[{"pos":[0,56],"content":"Type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not have a default constructor.","source":"Type <code>T</code> does not have a default constructor."}],"pos":[8638,8695],"yaml":true},{"content":"<code>valueFactory</code> returned null (Nothing in Visual Basic).","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;valueFactory&lt;/code&gt;</ph> returned null (Nothing in Visual Basic).","source":"<code>valueFactory</code> returned null (Nothing in Visual Basic)."}],"pos":[8805,8872],"yaml":true},{"content":"Initializes a target reference or value type with its default constructor if it hasn't already been initialized.","nodes":[{"pos":[0,112],"content":"Initializes a target reference or value type with its default constructor if it hasn't already been initialized.","nodes":[{"content":"Initializes a target reference or value type with its default constructor if it hasn't already been initialized.","pos":[0,112]}]}],"pos":[10547,10660],"yaml":true},{"content":"If `intialized` is specified as true, then no further initialization occurs.","nodes":[{"pos":[0,76],"content":"If <ph id=\"ph1\">`intialized`</ph> is specified as true, then no further initialization occurs.","source":"If `intialized` is specified as true, then no further initialization occurs."}],"pos":[10671,10748],"yaml":true,"extradata":"MT"},{"content":"A reference or value of type <code>T</code> to initialize if it hasn't already been initialized.","nodes":[{"pos":[0,96],"content":"A reference or value of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> to initialize if it hasn't already been initialized.","source":"A reference or value of type <code>T</code> to initialize if it hasn't already been initialized."}],"pos":[10933,11030],"yaml":true},{"content":"A reference to a Boolean value that determines whether the target has already been initialized.","nodes":[{"pos":[0,95],"content":"A reference to a Boolean value that determines whether the target has already been initialized.","nodes":[{"content":"A reference to a Boolean value that determines whether the target has already been initialized.","pos":[0,95]}]}],"pos":[11098,11194],"yaml":true},{"content":"A reference to an object used as the mutually exclusive lock for initializing <code>target</code>. If <code>syncLock</code> is `null`, a new object will be instantiated.","nodes":[{"pos":[0,169],"content":"A reference to an object used as the mutually exclusive lock for initializing <code>target</code>. If <code>syncLock</code> is `null`, a new object will be instantiated.","nodes":[{"content":"A reference to an object used as the mutually exclusive lock for initializing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,98],"source":"A reference to an object used as the mutually exclusive lock for initializing <code>target</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">syncLock</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, a new object will be instantiated.","pos":[99,169],"source":" If <code>syncLock</code> is `null`, a new object will be instantiated."}]}],"pos":[11258,11428],"yaml":true},{"content":"The type of the reference to be initialized.","nodes":[{"pos":[0,44],"content":"The type of the reference to be initialized.","nodes":[{"content":"The type of the reference to be initialized.","pos":[0,44]}]}],"pos":[11479,11524],"yaml":true},{"content":"The initialized value of type <code>T</code>.","nodes":[{"pos":[0,45],"content":"The initialized value of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The initialized value of type <code>T</code>."}],"pos":[11569,11615],"yaml":true},{"content":"Permissions to access the constructor of type <code>T</code> were missing.","nodes":[{"pos":[0,74],"content":"Permissions to access the constructor of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> were missing.","source":"Permissions to access the constructor of type <code>T</code> were missing."}],"pos":[11798,11873],"yaml":true},{"content":"Type <code>T</code> does not have a default constructor.","nodes":[{"pos":[0,56],"content":"Type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not have a default constructor.","source":"Type <code>T</code> does not have a default constructor."}],"pos":[11977,12034],"yaml":true},{"content":"Initializes a target reference or value type by using a specified function if it hasn't already been initialized.","nodes":[{"pos":[0,113],"content":"Initializes a target reference or value type by using a specified function if it hasn't already been initialized.","nodes":[{"content":"Initializes a target reference or value type by using a specified function if it hasn't already been initialized.","pos":[0,113]}]}],"pos":[15081,15195],"yaml":true},{"content":"If `intialized` is specified as true, then no further initialization occurs.","nodes":[{"pos":[0,76],"content":"If <ph id=\"ph1\">`intialized`</ph> is specified as true, then no further initialization occurs.","source":"If `intialized` is specified as true, then no further initialization occurs."}],"pos":[15206,15283],"yaml":true,"extradata":"MT"},{"content":"A reference or value of type <code>T</code> to initialize if it hasn't already been initialized.","nodes":[{"pos":[0,96],"content":"A reference or value of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> to initialize if it hasn't already been initialized.","source":"A reference or value of type <code>T</code> to initialize if it hasn't already been initialized."}],"pos":[15490,15587],"yaml":true},{"content":"A reference to a Boolean value that determines whether the target has already been initialized.","nodes":[{"pos":[0,95],"content":"A reference to a Boolean value that determines whether the target has already been initialized.","nodes":[{"content":"A reference to a Boolean value that determines whether the target has already been initialized.","pos":[0,95]}]}],"pos":[15655,15751],"yaml":true},{"content":"A reference to an object used as the mutually exclusive lock for initializing <code>target</code>. If <code>syncLock</code> is `null`, a new object will be instantiated.","nodes":[{"pos":[0,169],"content":"A reference to an object used as the mutually exclusive lock for initializing <code>target</code>. If <code>syncLock</code> is `null`, a new object will be instantiated.","nodes":[{"content":"A reference to an object used as the mutually exclusive lock for initializing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,98],"source":"A reference to an object used as the mutually exclusive lock for initializing <code>target</code>."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">syncLock</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, a new object will be instantiated.","pos":[99,169],"source":" If <code>syncLock</code> is `null`, a new object will be instantiated."}]}],"pos":[15815,15985],"yaml":true},{"content":"The function that is called to initialize the reference or value.","nodes":[{"pos":[0,65],"content":"The function that is called to initialize the reference or value.","nodes":[{"content":"The function that is called to initialize the reference or value.","pos":[0,65]}]}],"pos":[16054,16120],"yaml":true},{"content":"The type of the reference to be initialized.","nodes":[{"pos":[0,44],"content":"The type of the reference to be initialized.","nodes":[{"content":"The type of the reference to be initialized.","pos":[0,44]}]}],"pos":[16171,16216],"yaml":true},{"content":"The initialized value of type <code>T</code>.","nodes":[{"pos":[0,45],"content":"The initialized value of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The initialized value of type <code>T</code>."}],"pos":[16261,16307],"yaml":true},{"content":"Permissions to access the constructor of type <code>T</code> were missing.","nodes":[{"pos":[0,74],"content":"Permissions to access the constructor of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> were missing.","source":"Permissions to access the constructor of type <code>T</code> were missing."}],"pos":[16490,16565],"yaml":true},{"content":"Type <code>T</code> does not have a default constructor.","nodes":[{"pos":[0,56],"content":"Type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not have a default constructor.","source":"Type <code>T</code> does not have a default constructor."}],"pos":[16669,16726],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.LazyInitializer\n  commentId: T:System.Threading.LazyInitializer\n  id: LazyInitializer\n  children:\n  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@)\n  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})\n  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)\n  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})\n  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})\n  langs:\n  - csharp\n  name: LazyInitializer\n  nameWithType: LazyInitializer\n  fullName: System.Threading.LazyInitializer\n  type: Class\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Provides lazy initialization routines.\n  remarks: These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.\n  example:\n  - \"The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.  \\n  \\n```vb  \\nDim _data As ExpensiveData = Nothing  \\nDim _dataInitialized As Boolean = False  \\nDim _dataLock As Object = Nothing  \\n'    ...  \\nDim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  \\n```  \\n  \\n```csharp  \\nExpensiveData _data = null;  \\n                     bool _dataInitialized = false;  \\n                     object _dataLock = new object();  \\n                  //  ...  \\n  \\n                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  \\n```\"\n  syntax:\n    content: public static class LazyInitializer\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LazyInitializer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@)\n  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)\n  id: EnsureInitialized``1(``0@)\n  parent: System.Threading.LazyInitializer\n  langs:\n  - csharp\n  name: EnsureInitialized<T>(T)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(T)\n  fullName: LazyInitializer.EnsureInitialized<T>(T)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a target reference type with the type's default constructor if it hasn't already been initialized.\n  remarks: \"This method may only be used on reference types. To ensure initialization of value types, see other overloads of EnsureInitialized.  \\n  \\n This method may be used concurrently by multiple threads to initialize `target`.  \\n  \\n In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`. In such an occurrence, this method will not dispose of the objects that were not stored. If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.\"\n  syntax:\n    content: 'public static T EnsureInitialized<T> (ref T target) where T : class;'\n    parameters:\n    - id: target\n      type: T\n      description: A reference of type <code>T</code> to initialize if it has not already been initialized.\n    typeParameters:\n    - id: T\n      description: The type of the reference to be initialized.\n    return:\n      type: T\n      description: The initialized reference of type <code>T</code>.\n  overload: System.Threading.LazyInitializer.EnsureInitialized``1*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: Permissions to access the constructor of type <code>T</code> were missing.\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: Type <code>T</code> does not have a default constructor.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LazyInitializer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})\n  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})\n  id: EnsureInitialized``1(``0@,System.Func{``0})\n  parent: System.Threading.LazyInitializer\n  langs:\n  - csharp\n  name: EnsureInitialized<T>(T, Func<T>)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(T, Func<T>)\n  fullName: LazyInitializer.EnsureInitialized<T>(T, Func<T>)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a target reference type by using a specified function if it hasn't already been initialized.\n  remarks: \"This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic). To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.  \\n  \\n This method may be used concurrently by multiple threads to initialize `target`.  \\n  \\n In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`. In such an occurrence, this method will not dispose of the objects that were not stored. If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.\"\n  syntax:\n    content: 'public static T EnsureInitialized<T> (ref T target, Func<T> valueFactory) where T : class;'\n    parameters:\n    - id: target\n      type: T\n      description: The reference of type <code>T</code> to initialize if it hasn't already been initialized.\n    - id: valueFactory\n      type: System.Func{T}\n      description: The function that is called to initialize the reference.\n    typeParameters:\n    - id: T\n      description: The reference type of the reference to be initialized.\n    return:\n      type: T\n      description: The initialized value of type <code>T</code>.\n  overload: System.Threading.LazyInitializer.EnsureInitialized``1*\n  exceptions:\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: Type <code>T</code> does not have a default constructor.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>valueFactory</code> returned null (Nothing in Visual Basic).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LazyInitializer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)\n  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)\n  id: EnsureInitialized``1(``0@,System.Boolean@,System.Object@)\n  parent: System.Threading.LazyInitializer\n  langs:\n  - csharp\n  name: EnsureInitialized<T>(T, Boolean, Object)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(T, Boolean, Object)\n  fullName: LazyInitializer.EnsureInitialized<T>(T, Boolean, Object)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a target reference or value type with its default constructor if it hasn't already been initialized.\n  remarks: If `intialized` is specified as true, then no further initialization occurs.\n  syntax:\n    content: public static T EnsureInitialized<T> (ref T target, ref bool initialized, ref object syncLock);\n    parameters:\n    - id: target\n      type: T\n      description: A reference or value of type <code>T</code> to initialize if it hasn't already been initialized.\n    - id: initialized\n      type: System.Boolean\n      description: A reference to a Boolean value that determines whether the target has already been initialized.\n    - id: syncLock\n      type: System.Object\n      description: A reference to an object used as the mutually exclusive lock for initializing <code>target</code>. If <code>syncLock</code> is `null`, a new object will be instantiated.\n    typeParameters:\n    - id: T\n      description: The type of the reference to be initialized.\n    return:\n      type: T\n      description: The initialized value of type <code>T</code>.\n  overload: System.Threading.LazyInitializer.EnsureInitialized``1*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: Permissions to access the constructor of type <code>T</code> were missing.\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: Type <code>T</code> does not have a default constructor.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LazyInitializer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})\n  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})\n  id: EnsureInitialized``1(``0@,System.Object@,System.Func{``0})\n  parent: System.Threading.LazyInitializer\n  langs:\n  - csharp\n  name: EnsureInitialized<T>(T, Object, Func<T>)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(T, Object, Func<T>)\n  fullName: LazyInitializer.EnsureInitialized<T>(T, Object, Func<T>)\n  type: Method\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  syntax:\n    content: 'public static T EnsureInitialized<T> (ref T target, ref object syncLock, Func<T> valueFactory) where T : class;'\n    parameters:\n    - id: target\n      type: T\n      description: ''\n    - id: syncLock\n      type: System.Object\n      description: ''\n    - id: valueFactory\n      type: System.Func{T}\n      description: ''\n    typeParameters:\n    - id: T\n      description: ''\n    return:\n      type: T\n      description: ''\n  overload: System.Threading.LazyInitializer.EnsureInitialized``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LazyInitializer.xml\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})\n  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})\n  id: EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})\n  parent: System.Threading.LazyInitializer\n  langs:\n  - csharp\n  name: EnsureInitialized<T>(T, Boolean, Object, Func<T>)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(T, Boolean, Object, Func<T>)\n  fullName: LazyInitializer.EnsureInitialized<T>(T, Boolean, Object, Func<T>)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a target reference or value type by using a specified function if it hasn't already been initialized.\n  remarks: If `intialized` is specified as true, then no further initialization occurs.\n  syntax:\n    content: public static T EnsureInitialized<T> (ref T target, ref bool initialized, ref object syncLock, Func<T> valueFactory);\n    parameters:\n    - id: target\n      type: T\n      description: A reference or value of type <code>T</code> to initialize if it hasn't already been initialized.\n    - id: initialized\n      type: System.Boolean\n      description: A reference to a Boolean value that determines whether the target has already been initialized.\n    - id: syncLock\n      type: System.Object\n      description: A reference to an object used as the mutually exclusive lock for initializing <code>target</code>. If <code>syncLock</code> is `null`, a new object will be instantiated.\n    - id: valueFactory\n      type: System.Func{T}\n      description: The function that is called to initialize the reference or value.\n    typeParameters:\n    - id: T\n      description: The type of the reference to be initialized.\n    return:\n      type: T\n      description: The initialized value of type <code>T</code>.\n  overload: System.Threading.LazyInitializer.EnsureInitialized``1*\n  exceptions:\n  - type: System.MemberAccessException\n    commentId: T:System.MemberAccessException\n    description: Permissions to access the constructor of type <code>T</code> were missing.\n  - type: System.MissingMemberException\n    commentId: T:System.MissingMemberException\n    description: Type <code>T</code> does not have a default constructor.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LazyInitializer.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.MemberAccessException\n  parent: System\n  isExternal: false\n  name: MemberAccessException\n  nameWithType: MemberAccessException\n  fullName: System.MemberAccessException\n- uid: System.MissingMemberException\n  parent: System\n  isExternal: false\n  name: MissingMemberException\n  nameWithType: MissingMemberException\n  fullName: System.MissingMemberException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@)\n  parent: System.Threading.LazyInitializer\n  isExternal: false\n  name: EnsureInitialized<T>(T)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(T)\n  fullName: LazyInitializer.EnsureInitialized<T>(T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})\n  parent: System.Threading.LazyInitializer\n  isExternal: false\n  name: EnsureInitialized<T>(T, Func<T>)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(T, Func<T>)\n  fullName: LazyInitializer.EnsureInitialized<T>(T, Func<T>)\n- uid: System.Func`1\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: System.Func{T}\n  parent: System\n  isExternal: false\n  name: Func<T>\n  nameWithType: Func<T>\n  fullName: System.Func<T>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: T\n    name: T\n    nameWithType: T\n    fullName: T\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)\n  parent: System.Threading.LazyInitializer\n  isExternal: false\n  name: EnsureInitialized<T>(T, Boolean, Object)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(T, Boolean, Object)\n  fullName: LazyInitializer.EnsureInitialized<T>(T, Boolean, Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})\n  parent: System.Threading.LazyInitializer\n  isExternal: false\n  name: EnsureInitialized<T>(T, Object, Func<T>)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(T, Object, Func<T>)\n  fullName: LazyInitializer.EnsureInitialized<T>(T, Object, Func<T>)\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})\n  parent: System.Threading.LazyInitializer\n  isExternal: false\n  name: EnsureInitialized<T>(T, Boolean, Object, Func<T>)\n  nameWithType: LazyInitializer.EnsureInitialized<T>(T, Boolean, Object, Func<T>)\n  fullName: LazyInitializer.EnsureInitialized<T>(T, Boolean, Object, Func<T>)\n- uid: System.Threading.LazyInitializer.EnsureInitialized``1*\n  parent: System.Threading.LazyInitializer\n  isExternal: false\n  name: EnsureInitialized<T>\n  nameWithType: LazyInitializer.EnsureInitialized<T>\n  fullName: LazyInitializer.EnsureInitialized<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LazyInitializer.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}