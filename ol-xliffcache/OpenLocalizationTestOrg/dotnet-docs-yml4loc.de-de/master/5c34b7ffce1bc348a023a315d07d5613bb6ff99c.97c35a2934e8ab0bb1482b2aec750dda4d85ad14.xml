{"nodes":[{"content":"Controls rights to access HTTP Internet resources.","nodes":[{"pos":[0,50],"content":"Controls rights to access HTTP Internet resources.","nodes":[{"content":"Controls rights to access HTTP Internet resources.","pos":[0,50]}]}],"pos":[1297,1348],"yaml":true},{"content":"<xref:System.Net.WebPermission> provides a set of methods and properties to control access to Internet resources. You can use a <xref:System.Net.WebPermission> to provide either restricted or unrestricted access to your resource, based on the <xref:System.Security.Permissions.PermissionState> that is set when the <xref:System.Net.WebPermission> is created.  \n  \n Create a <xref:System.Net.WebPermission> instance by calling its constructor using one of the following sets of parameters:  \n  \n-   No parameters. The default <xref:System.Security.Permissions.PermissionState> is <xref:System.Security.Permissions.PermissionState.None>.  \n  \n-   A <xref:System.Security.Permissions.PermissionState>. Specify either <xref:System.Security.Permissions.PermissionState.Unrestricted> to allow any URI to be used in the target class, or <xref:System.Security.Permissions.PermissionState.None> to allow access only to URIs that you specify through the use of the <xref:System.Net.WebPermission.AddPermission%2A> method.  \n  \n-   A <xref:System.Net.NetworkAccess> value and a URI string. The specified URI has permissions granted by the <xref:System.Net.NetworkAccess> value.  \n  \n-   A <xref:System.Net.NetworkAccess> specifier and URI regular expression.  \n  \n The <xref:System.Net.WebPermission.ConnectList%2A> and <xref:System.Net.WebPermission.AcceptList%2A> hold the URIs to which you have granted access permission. To add a URI to either of these lists, use <xref:System.Net.WebPermission.AddPermission%2A>. If you pass <xref:System.Net.NetworkAccess.Accept> as the <xref:System.Net.NetworkAccess> parameter, the URI will be added to the <xref:System.Net.WebPermission.AcceptList%2A>. <xref:System.Net.WebPermission> will allow connections to your target class with URIs matching the <xref:System.Net.WebPermission.AcceptList%2A>.  \n  \n> [!CAUTION]\n>  To deny access to an Internet resource, you must deny access to all the possible paths to that resource. This requires calling <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName> with state parameter set to <xref:System.Security.CodeAccessPermission.Deny%2A>. A better approach is to allow access to the specific resource only. For more information about this subject, refer to the [NIB: Using the Deny Method](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) topic.  \n  \n> [!NOTE]\n>  You need to deny access using only the resource canonical path. There is no need to use all the path's syntactical variations.  \n  \n> [!NOTE]\n>  User name and default port information is stripped from the <xref:System.Uri> before the comparison with the regular expression argument that is supplied to the <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> constructor. If the regular expression contains user information or the default port number, then all incoming <xref:System.Uri>s will fail to match the regular expression.","nodes":[{"pos":[0,358],"content":"<xref:System.Net.WebPermission> provides a set of methods and properties to control access to Internet resources. You can use a <xref:System.Net.WebPermission> to provide either restricted or unrestricted access to your resource, based on the <xref:System.Security.Permissions.PermissionState> that is set when the <xref:System.Net.WebPermission> is created.","nodes":[{"content":"<xref:System.Net.WebPermission> provides a set of methods and properties to control access to Internet resources. You can use a <xref:System.Net.WebPermission> to provide either restricted or unrestricted access to your resource, based on the <xref:System.Security.Permissions.PermissionState> that is set when the <xref:System.Net.WebPermission> is created.","pos":[0,358],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> provides a set of methods and properties to control access to Internet resources.","pos":[0,113],"source":"<xref:System.Net.WebPermission> provides a set of methods and properties to control access to Internet resources."},{"content":"You can use a <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> to provide either restricted or unrestricted access to your resource, based on the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph> that is set when the <ph id=\"ph3\">&lt;xref:System.Net.WebPermission&gt;</ph> is created.","pos":[114,358],"source":" You can use a <xref:System.Net.WebPermission> to provide either restricted or unrestricted access to your resource, based on the <xref:System.Security.Permissions.PermissionState> that is set when the <xref:System.Net.WebPermission> is created."}]}]},{"pos":[365,488],"content":"Create a <xref:System.Net.WebPermission> instance by calling its constructor using one of the following sets of parameters:","nodes":[{"content":"Create a <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> instance by calling its constructor using one of the following sets of parameters:","pos":[0,123],"source":"Create a <xref:System.Net.WebPermission> instance by calling its constructor using one of the following sets of parameters:"}]},{"pos":[498,635],"content":"No parameters. The default <xref:System.Security.Permissions.PermissionState> is <xref:System.Security.Permissions.PermissionState.None>.","nodes":[{"content":"No parameters. The default <xref:System.Security.Permissions.PermissionState> is <xref:System.Security.Permissions.PermissionState.None>.","pos":[0,137],"nodes":[{"content":"No parameters.","pos":[0,14]},{"content":"The default <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState.None&gt;</ph>.","pos":[15,137],"source":" The default <xref:System.Security.Permissions.PermissionState> is <xref:System.Security.Permissions.PermissionState.None>."}]}]},{"pos":[645,1011],"content":"A <xref:System.Security.Permissions.PermissionState>. Specify either <xref:System.Security.Permissions.PermissionState.Unrestricted> to allow any URI to be used in the target class, or <xref:System.Security.Permissions.PermissionState.None> to allow access only to URIs that you specify through the use of the <xref:System.Net.WebPermission.AddPermission%2A> method.","nodes":[{"content":"A <xref:System.Security.Permissions.PermissionState>. Specify either <xref:System.Security.Permissions.PermissionState.Unrestricted> to allow any URI to be used in the target class, or <xref:System.Security.Permissions.PermissionState.None> to allow access only to URIs that you specify through the use of the <xref:System.Net.WebPermission.AddPermission%2A> method.","pos":[0,366],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph>.","pos":[0,53],"source":"A <xref:System.Security.Permissions.PermissionState>."},{"content":"Specify either <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PermissionState.Unrestricted&gt;</ph> to allow any URI to be used in the target class, or <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState.None&gt;</ph> to allow access only to URIs that you specify through the use of the <ph id=\"ph3\">&lt;xref:System.Net.WebPermission.AddPermission%2A&gt;</ph> method.","pos":[54,366],"source":" Specify either <xref:System.Security.Permissions.PermissionState.Unrestricted> to allow any URI to be used in the target class, or <xref:System.Security.Permissions.PermissionState.None> to allow access only to URIs that you specify through the use of the <xref:System.Net.WebPermission.AddPermission%2A> method."}]}]},{"pos":[1021,1166],"content":"A <xref:System.Net.NetworkAccess> value and a URI string. The specified URI has permissions granted by the <xref:System.Net.NetworkAccess> value.","nodes":[{"content":"A <xref:System.Net.NetworkAccess> value and a URI string. The specified URI has permissions granted by the <xref:System.Net.NetworkAccess> value.","pos":[0,145],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Net.NetworkAccess&gt;</ph> value and a URI string.","pos":[0,57],"source":"A <xref:System.Net.NetworkAccess> value and a URI string."},{"content":"The specified URI has permissions granted by the <ph id=\"ph1\">&lt;xref:System.Net.NetworkAccess&gt;</ph> value.","pos":[58,145],"source":" The specified URI has permissions granted by the <xref:System.Net.NetworkAccess> value."}]}]},{"pos":[1176,1247],"content":"A <xref:System.Net.NetworkAccess> specifier and URI regular expression.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Net.NetworkAccess&gt;</ph> specifier and URI regular expression.","pos":[0,71],"source":"A <xref:System.Net.NetworkAccess> specifier and URI regular expression."}]},{"pos":[1254,1829],"content":"The <xref:System.Net.WebPermission.ConnectList%2A> and <xref:System.Net.WebPermission.AcceptList%2A> hold the URIs to which you have granted access permission. To add a URI to either of these lists, use <xref:System.Net.WebPermission.AddPermission%2A>. If you pass <xref:System.Net.NetworkAccess.Accept> as the <xref:System.Net.NetworkAccess> parameter, the URI will be added to the <xref:System.Net.WebPermission.AcceptList%2A>. <xref:System.Net.WebPermission> will allow connections to your target class with URIs matching the <xref:System.Net.WebPermission.AcceptList%2A>.","nodes":[{"content":"The <xref:System.Net.WebPermission.ConnectList%2A> and <xref:System.Net.WebPermission.AcceptList%2A> hold the URIs to which you have granted access permission. To add a URI to either of these lists, use <xref:System.Net.WebPermission.AddPermission%2A>. If you pass <xref:System.Net.NetworkAccess.Accept> as the <xref:System.Net.NetworkAccess> parameter, the URI will be added to the <xref:System.Net.WebPermission.AcceptList%2A>. <xref:System.Net.WebPermission> will allow connections to your target class with URIs matching the <xref:System.Net.WebPermission.AcceptList%2A>.","pos":[0,575],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.ConnectList%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.WebPermission.AcceptList%2A&gt;</ph> hold the URIs to which you have granted access permission.","pos":[0,159],"source":"The <xref:System.Net.WebPermission.ConnectList%2A> and <xref:System.Net.WebPermission.AcceptList%2A> hold the URIs to which you have granted access permission."},{"content":"To add a URI to either of these lists, use <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AddPermission%2A&gt;</ph>.","pos":[160,252],"source":" To add a URI to either of these lists, use <xref:System.Net.WebPermission.AddPermission%2A>."},{"content":"If you pass <ph id=\"ph1\">&lt;xref:System.Net.NetworkAccess.Accept&gt;</ph> as the <ph id=\"ph2\">&lt;xref:System.Net.NetworkAccess&gt;</ph> parameter, the URI will be added to the <ph id=\"ph3\">&lt;xref:System.Net.WebPermission.AcceptList%2A&gt;</ph>.","pos":[253,429],"source":" If you pass <xref:System.Net.NetworkAccess.Accept> as the <xref:System.Net.NetworkAccess> parameter, the URI will be added to the <xref:System.Net.WebPermission.AcceptList%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> will allow connections to your target class with URIs matching the <ph id=\"ph2\">&lt;xref:System.Net.WebPermission.AcceptList%2A&gt;</ph>.","pos":[430,575],"source":" <xref:System.Net.WebPermission> will allow connections to your target class with URIs matching the <xref:System.Net.WebPermission.AcceptList%2A>."}]}]},{"pos":[1837,2354],"content":"[!CAUTION]\n To deny access to an Internet resource, you must deny access to all the possible paths to that resource. This requires calling <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName> with state parameter set to <xref:System.Security.CodeAccessPermission.Deny%2A>. A better approach is to allow access to the specific resource only. For more information about this subject, refer to the [NIB: Using the Deny Method](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) topic.","leadings":["","> "],"nodes":[{"content":" To deny access to an Internet resource, you must deny access to all the possible paths to that resource. This requires calling <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName> with state parameter set to <xref:System.Security.CodeAccessPermission.Deny%2A>. A better approach is to allow access to the specific resource only. For more information about this subject, refer to the [NIB: Using the Deny Method](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) topic.","pos":[11,515],"nodes":[{"content":"To deny access to an Internet resource, you must deny access to all the possible paths to that resource.","pos":[1,105]},{"content":"This requires calling <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName&gt;</ph> with state parameter set to <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>.","pos":[106,276],"source":" This requires calling <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName> with state parameter set to <xref:System.Security.CodeAccessPermission.Deny%2A>."},{"content":"A better approach is to allow access to the specific resource only.","pos":[277,344]},{"content":"For more information about this subject, refer to the <bpt id=\"p1\">[</bpt>NIB: Using the Deny Method<ept id=\"p1\">](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25)</ept> topic.","pos":[345,504],"source":" For more information about this subject, refer to the [NIB: Using the Deny Method](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) topic."}]}]},{"pos":[2362,2499],"content":"[!NOTE]\n You need to deny access using only the resource canonical path. There is no need to use all the path's syntactical variations.","leadings":["","> "],"nodes":[{"content":" You need to deny access using only the resource canonical path. There is no need to use all the path's syntactical variations.","pos":[8,135],"nodes":[{"content":"You need to deny access using only the resource canonical path.","pos":[1,64]},{"content":"There is no need to use all the path's syntactical variations.","pos":[65,127]}]}]},{"pos":[2507,2960],"content":"[!NOTE]\n User name and default port information is stripped from the <xref:System.Uri> before the comparison with the regular expression argument that is supplied to the <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> constructor. If the regular expression contains user information or the default port number, then all incoming <xref:System.Uri>s will fail to match the regular expression.","leadings":["","> "],"nodes":[{"content":" User name and default port information is stripped from the <xref:System.Uri> before the comparison with the regular expression argument that is supplied to the <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> constructor. If the regular expression contains user information or the default port number, then all incoming <xref:System.Uri>s will fail to match the regular expression.","pos":[8,451],"nodes":[{"content":"User name and default port information is stripped from the <ph id=\"ph1\">&lt;xref:System.Uri&gt;</ph> before the comparison with the regular expression argument that is supplied to the <ph id=\"ph2\">&lt;xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29&gt;</ph> constructor.","pos":[1,283],"source":" User name and default port information is stripped from the <xref:System.Uri> before the comparison with the regular expression argument that is supplied to the <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> constructor."},{"content":"If the regular expression contains user information or the default port number, then all incoming <ph id=\"ph1\">&lt;xref:System.Uri&gt;</ph>s will fail to match the regular expression.","pos":[284,443],"source":" If the regular expression contains user information or the default port number, then all incoming <xref:System.Uri>s will fail to match the regular expression."}]}]}],"pos":[1359,4343],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class.","nodes":[{"pos":[0,82],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> class.","source":"Creates a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class."}],"pos":[7485,7568],"yaml":true},{"content":"Creates a new instance of the <xref:System.Net.WebPermission> class. This constructor creates an empty permission that does not grant any rights.","nodes":[{"pos":[0,145],"content":"Creates a new instance of the <xref:System.Net.WebPermission> class. This constructor creates an empty permission that does not grant any rights.","nodes":[{"content":"Creates a new instance of the <xref:System.Net.WebPermission> class. This constructor creates an empty permission that does not grant any rights.","pos":[0,145],"nodes":[{"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> class.","pos":[0,68],"source":"Creates a new instance of the <xref:System.Net.WebPermission> class."},{"content":"This constructor creates an empty permission that does not grant any rights.","pos":[69,145]}]}]}],"pos":[7579,7725],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class that passes all demands or fails all demands.","nodes":[{"pos":[0,127],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> class that passes all demands or fails all demands.","source":"Creates a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class that passes all demands or fails all demands."}],"pos":[9031,9159],"yaml":true},{"content":"The value of the `state` parameter is either <xref:System.Security.Permissions.PermissionState?displayProperty=fullName> or <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, respectively yielding fully restricted or fully unrestricted access to all security variables. If you specify <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, then you can give access to individual URIs using <xref:System.Net.WebPermission.AddPermission%2A>.","nodes":[{"pos":[0,487],"content":"The value of the `state` parameter is either <xref:System.Security.Permissions.PermissionState?displayProperty=fullName> or <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, respectively yielding fully restricted or fully unrestricted access to all security variables. If you specify <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, then you can give access to individual URIs using <xref:System.Net.WebPermission.AddPermission%2A>.","nodes":[{"content":"The value of the <ph id=\"ph1\">`state`</ph> parameter is either <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Security.Permissions.PermissionState?displayProperty=fullName&gt;</ph>, respectively yielding fully restricted or fully unrestricted access to all security variables.","pos":[0,295],"source":"The value of the `state` parameter is either <xref:System.Security.Permissions.PermissionState?displayProperty=fullName> or <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, respectively yielding fully restricted or fully unrestricted access to all security variables."},{"content":"If you specify <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PermissionState?displayProperty=fullName&gt;</ph>, then you can give access to individual URIs using <ph id=\"ph2\">&lt;xref:System.Net.WebPermission.AddPermission%2A&gt;</ph>.","pos":[296,487],"source":" If you specify <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, then you can give access to individual URIs using <xref:System.Net.WebPermission.AddPermission%2A>."}]}],"pos":[9170,9658],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.Permissions.PermissionState\"></xref> value.","nodes":[{"pos":[0,73],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph> value.","source":"A <xref href=\"System.Security.Permissions.PermissionState\"></xref> value."}],"pos":[10400,10474],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class with the specified access rights for the specified URI.","nodes":[{"pos":[0,141],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> class with the specified access rights for the specified URI.","source":"Initializes a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class with the specified access rights for the specified URI."}],"pos":[11716,11858],"yaml":true},{"content":"This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriString` parameter.","nodes":[{"pos":[0,224],"content":"This constructor initializes a <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the <ph id=\"ph2\">`uriString`</ph> parameter.","source":"This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriString` parameter."}],"pos":[11869,12094],"yaml":true,"extradata":"MT"},{"content":"A NetworkAccess value that indicates what kind of access to grant to the specified URI. <xref href=\"System.Net.NetworkAccess.Accept\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=\"System.Net.NetworkAccess.Connect\"></xref> indicates that the application is allowed to connect to specific Internet resources.","nodes":[{"pos":[0,382],"content":"A NetworkAccess value that indicates what kind of access to grant to the specified URI. <xref href=\"System.Net.NetworkAccess.Accept\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=\"System.Net.NetworkAccess.Connect\"></xref> indicates that the application is allowed to connect to specific Internet resources.","nodes":[{"content":"A NetworkAccess value that indicates what kind of access to grant to the specified URI.","pos":[0,87]},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkAccess.Accept\"&gt;&lt;/xref&gt;</ph> indicates that the application is allowed to accept connections from the Internet on a local resource.","pos":[88,243],"source":"<xref href=\"System.Net.NetworkAccess.Accept\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkAccess.Connect\"&gt;&lt;/xref&gt;</ph> indicates that the application is allowed to connect to specific Internet resources.","pos":[244,382],"source":"<xref href=\"System.Net.NetworkAccess.Connect\"></xref> indicates that the application is allowed to connect to specific Internet resources."}]}],"pos":[12831,13214],"yaml":true},{"content":"A URI string to which access rights are granted.","nodes":[{"pos":[0,48],"content":"A URI string to which access rights are granted.","nodes":[{"content":"A URI string to which access rights are granted.","pos":[0,48]}]}],"pos":[13279,13328],"yaml":true},{"content":"<code>uriString</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;uriString&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>uriString</code> is `null`."}],"pos":[13488,13522],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class with the specified access rights for the specified URI regular expression.","nodes":[{"pos":[0,160],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> class with the specified access rights for the specified URI regular expression.","source":"Initializes a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class with the specified access rights for the specified URI regular expression."}],"pos":[14769,14930],"yaml":true},{"content":"This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriRegex` parameter.  \n  \n> [!NOTE]\n>  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.  \n  \n> [!NOTE]\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","nodes":[{"pos":[0,223],"content":"This constructor initializes a <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the <ph id=\"ph2\">`uriRegex`</ph> parameter.","source":"This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriRegex` parameter."},{"pos":[231,537],"content":"[!NOTE]\n It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.","leadings":["","> "],"nodes":[{"content":"It is recommended that you create <ph id=\"ph1\">`uriRegex`</ph> using the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph> flags.","pos":[9,304],"source":" It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags."}]},{"pos":[545,955],"content":"[!NOTE]\n A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","leadings":["","> "],"nodes":[{"content":" A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","pos":[8,408],"nodes":[{"content":"A candidate URI string is checked against the list of relevant regular expressions (<ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AcceptList%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.WebPermission.ConnectList%2A&gt;</ph>) in two ways.","pos":[1,194],"source":" A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways."},{"content":"First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <ph id=\"ph1\">&lt;xref:System.Uri&gt;</ph> and checked against the appropriate list.","pos":[195,400],"source":" First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."}]}]}],"pos":[14941,15905],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.NetworkAccess\"></xref> value that indicates what kind of access to grant to the specified URI. <xref href=\"System.Net.NetworkAccess.Accept\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=\"System.Net.NetworkAccess.Connect\"></xref> indicates that the application is allowed to connect to specific Internet resources.","nodes":[{"pos":[0,414],"content":"A <xref href=\"System.Net.NetworkAccess\"></xref> value that indicates what kind of access to grant to the specified URI. <xref href=\"System.Net.NetworkAccess.Accept\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=\"System.Net.NetworkAccess.Connect\"></xref> indicates that the application is allowed to connect to specific Internet resources.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkAccess\"&gt;&lt;/xref&gt;</ph> value that indicates what kind of access to grant to the specified URI.","pos":[0,119],"source":"A <xref href=\"System.Net.NetworkAccess\"></xref> value that indicates what kind of access to grant to the specified URI."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkAccess.Accept\"&gt;&lt;/xref&gt;</ph> indicates that the application is allowed to accept connections from the Internet on a local resource.","pos":[120,275],"source":"<xref href=\"System.Net.NetworkAccess.Accept\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkAccess.Connect\"&gt;&lt;/xref&gt;</ph> indicates that the application is allowed to connect to specific Internet resources.","pos":[276,414],"source":"<xref href=\"System.Net.NetworkAccess.Connect\"></xref> indicates that the application is allowed to connect to specific Internet resources."}]}],"pos":[16799,17214],"yaml":true},{"content":"A regular expression that describes the URI to which access is to be granted.","nodes":[{"pos":[0,77],"content":"A regular expression that describes the URI to which access is to be granted.","nodes":[{"content":"A regular expression that describes the URI to which access is to be granted.","pos":[0,77]}]}],"pos":[17301,17379],"yaml":true},{"content":"This property returns an enumeration of a single accept permissions held by this <xref href=\"System.Net.WebPermission\"></xref>. The possible objects types contained in the returned enumeration are <xref href=\"System.String\"></xref> and <xref href=\"System.Text.RegularExpressions.Regex\"></xref>.","nodes":[{"pos":[0,294],"content":"This property returns an enumeration of a single accept permissions held by this <xref href=\"System.Net.WebPermission\"></xref>. The possible objects types contained in the returned enumeration are <xref href=\"System.String\"></xref> and <xref href=\"System.Text.RegularExpressions.Regex\"></xref>.","nodes":[{"content":"This property returns an enumeration of a single accept permissions held by this <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","pos":[0,127],"source":"This property returns an enumeration of a single accept permissions held by this <xref href=\"System.Net.WebPermission\"></xref>."},{"content":"The possible objects types contained in the returned enumeration are <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph>.","pos":[128,294],"source":" The possible objects types contained in the returned enumeration are <xref href=\"System.String\"></xref> and <xref href=\"System.Text.RegularExpressions.Regex\"></xref>."}]}],"pos":[18433,18728],"yaml":true},{"content":"This property gets a list of local resources permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to receive an incoming connection to local resources found in this list.  \n  \n> [!NOTE]\n>  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.  \n  \n> [!NOTE]\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","nodes":[{"pos":[0,256],"content":"This property gets a list of local resources permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to receive an incoming connection to local resources found in this list.","nodes":[{"content":"This property gets a list of local resources permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to receive an incoming connection to local resources found in this list.","pos":[0,256],"nodes":[{"content":"This property gets a list of local resources permitted by this <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph>.","pos":[0,95],"source":"This property gets a list of local resources permitted by this <xref:System.Net.WebPermission>."},{"content":"The class to which you have applied <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> only has permission to receive an incoming connection to local resources found in this list.","pos":[96,256],"source":" The class to which you have applied <xref:System.Net.WebPermission> only has permission to receive an incoming connection to local resources found in this list."}]}]},{"pos":[264,360],"content":"[!NOTE]\n You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.","leadings":["","> "],"nodes":[{"content":"You can add URIs to this list using <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AddPermission%2A&gt;</ph>.","pos":[9,94],"source":" You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>."}]},{"pos":[368,778],"content":"[!NOTE]\n A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","leadings":["","> "],"nodes":[{"content":" A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","pos":[8,408],"nodes":[{"content":"A candidate URI string is checked against the list of relevant regular expressions (<ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AcceptList%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.WebPermission.ConnectList%2A&gt;</ph>) in two ways.","pos":[1,194],"source":" A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways."},{"content":"First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <ph id=\"ph1\">&lt;xref:System.Uri&gt;</ph> and checked against the appropriate list.","pos":[195,400],"source":" First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."}]}]}],"pos":[18739,19526],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IEnumerator\"></xref> interface that contains accept permissions.","nodes":[{"pos":[0,99],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> interface that contains accept permissions.","source":"The <xref href=\"System.Collections.IEnumerator\"></xref> interface that contains accept permissions."}],"pos":[20324,20424],"yaml":true},{"content":"Adds the specified URI string with the specified access rights to the current <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,124],"content":"Adds the specified URI string with the specified access rights to the current <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Adds the specified URI string with the specified access rights to the current <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[21688,21813],"yaml":true},{"content":"If you have specified <xref:System.Security.Permissions.PermissionState.None> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to permit the use of `uriString` in the target class. The way that `uriString` can be used by the target class is specified by `access`. Specify <xref:System.Net.NetworkAccess.Accept> as the access parameter to add the URI specified by the `uriString` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess.Connect> as the access parameter to add the URI to the list of URI connect strings.  \n  \n> [!NOTE]\n>  Calling <xref:System.Net.WebPermission.AddPermission%2A> on <xref:System.Security.Permissions.PermissionState.Unrestricted><xref:System.Net.WebPermission> will have no effect, because permission is granted to all URIs.  \n  \n> [!NOTE]\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","nodes":[{"pos":[0,612],"content":"If you have specified <xref:System.Security.Permissions.PermissionState.None> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to permit the use of `uriString` in the target class. The way that `uriString` can be used by the target class is specified by `access`. Specify <xref:System.Net.NetworkAccess.Accept> as the access parameter to add the URI specified by the `uriString` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess.Connect> as the access parameter to add the URI to the list of URI connect strings.","nodes":[{"content":"If you have specified <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PermissionState.None&gt;</ph> as the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph>, use <ph id=\"ph3\">&lt;xref:System.Net.WebPermission.AddPermission%2A&gt;</ph> to permit the use of <ph id=\"ph4\">`uriString`</ph> in the target class.","pos":[0,243],"source":"If you have specified <xref:System.Security.Permissions.PermissionState.None> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to permit the use of `uriString` in the target class."},{"content":"The way that <ph id=\"ph1\">`uriString`</ph> can be used by the target class is specified by <ph id=\"ph2\">`access`</ph>.","pos":[244,326],"source":" The way that `uriString` can be used by the target class is specified by `access`."},{"content":"Specify <ph id=\"ph1\">&lt;xref:System.Net.NetworkAccess.Accept&gt;</ph> as the access parameter to add the URI specified by the <ph id=\"ph2\">`uriString`</ph> parameter to the list of URI accept strings, or specify <ph id=\"ph3\">&lt;xref:System.Net.NetworkAccess.Connect&gt;</ph> as the access parameter to add the URI to the list of URI connect strings.","pos":[327,612],"source":" Specify <xref:System.Net.NetworkAccess.Accept> as the access parameter to add the URI specified by the `uriString` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess.Connect> as the access parameter to add the URI to the list of URI connect strings."}]},{"pos":[620,849],"content":"[!NOTE]\n Calling <xref:System.Net.WebPermission.AddPermission%2A> on <xref:System.Security.Permissions.PermissionState.Unrestricted><xref:System.Net.WebPermission> will have no effect, because permission is granted to all URIs.","leadings":["","> "],"nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AddPermission%2A&gt;</ph> on <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState.Unrestricted&gt;</ph><ph id=\"ph3\">&lt;xref:System.Net.WebPermission&gt;</ph> will have no effect, because permission is granted to all URIs.","pos":[9,227],"source":" Calling <xref:System.Net.WebPermission.AddPermission%2A> on <xref:System.Security.Permissions.PermissionState.Unrestricted><xref:System.Net.WebPermission> will have no effect, because permission is granted to all URIs."}]},{"pos":[857,1267],"content":"[!NOTE]\n A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","leadings":["","> "],"nodes":[{"content":" A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","pos":[8,408],"nodes":[{"content":"A candidate URI string is checked against the list of relevant regular expressions (<ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AcceptList%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.WebPermission.ConnectList%2A&gt;</ph>) in two ways.","pos":[1,194],"source":" A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways."},{"content":"First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <ph id=\"ph1\">&lt;xref:System.Uri&gt;</ph> and checked against the appropriate list.","pos":[195,400],"source":" First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."}]}]}],"pos":[21824,23100],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Net.NetworkAccess\"></xref> that specifies the access rights that are granted to the URI.","nodes":[{"pos":[0,109],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkAccess\"&gt;&lt;/xref&gt;</ph> that specifies the access rights that are granted to the URI.","source":"A <xref href=\"System.Net.NetworkAccess\"></xref> that specifies the access rights that are granted to the URI."}],"pos":[23842,23952],"yaml":true},{"content":"A string that describes the URI to which access rights are granted.","nodes":[{"pos":[0,67],"content":"A string that describes the URI to which access rights are granted.","nodes":[{"content":"A string that describes the URI to which access rights are granted.","pos":[0,67]}]}],"pos":[24017,24085],"yaml":true},{"content":"<code>uriString</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;uriString&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>uriString</code> is `null`."}],"pos":[24253,24287],"yaml":true},{"content":"Adds the specified URI with the specified access rights to the current <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,117],"content":"Adds the specified URI with the specified access rights to the current <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Adds the specified URI with the specified access rights to the current <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[25551,25669],"yaml":true},{"content":"If you have specified <xref:System.Security.Permissions.PermissionState.None> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to allow the use of `uriRegex` in the target class. Specify <xref:System.Net.NetworkAccess.Accept> as the `access` parameter to add the URI specified by the `uriRegex` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess.Connect> as the access parameter to add the URI to the list of URI connect strings.  \n  \n> [!NOTE]\n>  Calling <xref:System.Net.WebPermission.AddPermission%2A> on an <xref:System.Security.Permissions.PermissionState.Unrestricted><xref:System.Net.WebPermission> instance will have no effect as permission is granted to all URIs.  \n  \n> [!NOTE]\n>  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.  \n  \n> [!NOTE]\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","nodes":[{"pos":[0,528],"content":"If you have specified <xref:System.Security.Permissions.PermissionState.None> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to allow the use of `uriRegex` in the target class. Specify <xref:System.Net.NetworkAccess.Accept> as the `access` parameter to add the URI specified by the `uriRegex` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess.Connect> as the access parameter to add the URI to the list of URI connect strings.","nodes":[{"content":"If you have specified <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PermissionState.None&gt;</ph> as the <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph>, use <ph id=\"ph3\">&lt;xref:System.Net.WebPermission.AddPermission%2A&gt;</ph> to allow the use of <ph id=\"ph4\">`uriRegex`</ph> in the target class.","pos":[0,241],"source":"If you have specified <xref:System.Security.Permissions.PermissionState.None> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to allow the use of `uriRegex` in the target class."},{"content":"Specify <ph id=\"ph1\">&lt;xref:System.Net.NetworkAccess.Accept&gt;</ph> as the <ph id=\"ph2\">`access`</ph> parameter to add the URI specified by the <ph id=\"ph3\">`uriRegex`</ph> parameter to the list of URI accept strings, or specify <ph id=\"ph4\">&lt;xref:System.Net.NetworkAccess.Connect&gt;</ph> as the access parameter to add the URI to the list of URI connect strings.","pos":[242,528],"source":" Specify <xref:System.Net.NetworkAccess.Accept> as the `access` parameter to add the URI specified by the `uriRegex` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess.Connect> as the access parameter to add the URI to the list of URI connect strings."}]},{"pos":[536,771],"content":"[!NOTE]\n Calling <xref:System.Net.WebPermission.AddPermission%2A> on an <xref:System.Security.Permissions.PermissionState.Unrestricted><xref:System.Net.WebPermission> instance will have no effect as permission is granted to all URIs.","leadings":["","> "],"nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AddPermission%2A&gt;</ph> on an <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState.Unrestricted&gt;</ph><ph id=\"ph3\">&lt;xref:System.Net.WebPermission&gt;</ph> instance will have no effect as permission is granted to all URIs.","pos":[9,233],"source":" Calling <xref:System.Net.WebPermission.AddPermission%2A> on an <xref:System.Security.Permissions.PermissionState.Unrestricted><xref:System.Net.WebPermission> instance will have no effect as permission is granted to all URIs."}]},{"pos":[779,1085],"content":"[!NOTE]\n It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.","leadings":["","> "],"nodes":[{"content":"It is recommended that you create <ph id=\"ph1\">`uriRegex`</ph> using the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName&gt;</ph> flags.","pos":[9,304],"source":" It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags."}]},{"pos":[1093,1503],"content":"[!NOTE]\n A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","leadings":["","> "],"nodes":[{"content":" A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","pos":[8,408],"nodes":[{"content":"A candidate URI string is checked against the list of relevant regular expressions (<ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AcceptList%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.WebPermission.ConnectList%2A&gt;</ph>) in two ways.","pos":[1,194],"source":" A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways."},{"content":"First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <ph id=\"ph1\">&lt;xref:System.Uri&gt;</ph> and checked against the appropriate list.","pos":[195,400],"source":" First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."}]}]}],"pos":[25680,27195],"yaml":true,"extradata":"MT"},{"content":"A NetworkAccess that specifies the access rights that are granted to the URI.","nodes":[{"pos":[0,77],"content":"A NetworkAccess that specifies the access rights that are granted to the URI.","nodes":[{"content":"A NetworkAccess that specifies the access rights that are granted to the URI.","pos":[0,77]}]}],"pos":[27991,28069],"yaml":true},{"content":"A regular expression that describes the set of URIs to which access rights are granted.","nodes":[{"pos":[0,87],"content":"A regular expression that describes the set of URIs to which access rights are granted.","nodes":[{"content":"A regular expression that describes the set of URIs to which access rights are granted.","pos":[0,87]}]}],"pos":[28156,28244],"yaml":true},{"content":"The <code>uriRegex</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">uriRegex</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>uriRegex</code> parameter is `null`."}],"pos":[28412,28459],"yaml":true},{"content":"This property returns an enumeration of a single connect permissions held by this <xref href=\"System.Net.WebPermission\"></xref>. The possible objects types contained in the returned enumeration are <xref href=\"System.String\"></xref> and <xref href=\"System.Text.RegularExpressions.Regex\"></xref>.","nodes":[{"pos":[0,295],"content":"This property returns an enumeration of a single connect permissions held by this <xref href=\"System.Net.WebPermission\"></xref>. The possible objects types contained in the returned enumeration are <xref href=\"System.String\"></xref> and <xref href=\"System.Text.RegularExpressions.Regex\"></xref>.","nodes":[{"content":"This property returns an enumeration of a single connect permissions held by this <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","pos":[0,128],"source":"This property returns an enumeration of a single connect permissions held by this <xref href=\"System.Net.WebPermission\"></xref>."},{"content":"The possible objects types contained in the returned enumeration are <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Text.RegularExpressions.Regex\"&gt;&lt;/xref&gt;</ph>.","pos":[129,295],"source":" The possible objects types contained in the returned enumeration are <xref href=\"System.String\"></xref> and <xref href=\"System.Text.RegularExpressions.Regex\"></xref>."}]}],"pos":[29458,29754],"yaml":true},{"content":"This property gets a list of remote resources that are permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to connect with resources found in this list.  \n  \n> [!NOTE]\n>  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.  \n  \n> [!NOTE]\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","nodes":[{"pos":[0,239],"content":"This property gets a list of remote resources that are permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to connect with resources found in this list.","nodes":[{"content":"This property gets a list of remote resources that are permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to connect with resources found in this list.","pos":[0,239],"nodes":[{"content":"This property gets a list of remote resources that are permitted by this <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph>.","pos":[0,105],"source":"This property gets a list of remote resources that are permitted by this <xref:System.Net.WebPermission>."},{"content":"The class to which you have applied <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> only has permission to connect with resources found in this list.","pos":[106,239],"source":" The class to which you have applied <xref:System.Net.WebPermission> only has permission to connect with resources found in this list."}]}]},{"pos":[247,343],"content":"[!NOTE]\n You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.","leadings":["","> "],"nodes":[{"content":"You can add URIs to this list using <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AddPermission%2A&gt;</ph>.","pos":[9,94],"source":" You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>."}]},{"pos":[351,761],"content":"[!NOTE]\n A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","leadings":["","> "],"nodes":[{"content":" A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.","pos":[8,408],"nodes":[{"content":"A candidate URI string is checked against the list of relevant regular expressions (<ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AcceptList%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Net.WebPermission.ConnectList%2A&gt;</ph>) in two ways.","pos":[1,194],"source":" A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways."},{"content":"First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <ph id=\"ph1\">&lt;xref:System.Uri&gt;</ph> and checked against the appropriate list.","pos":[195,400],"source":" First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list."}]}]}],"pos":[29765,30535],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Collections.IEnumerator\"></xref> interface that contains connect permissions.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> interface that contains connect permissions.","source":"The <xref href=\"System.Collections.IEnumerator\"></xref> interface that contains connect permissions."}],"pos":[31335,31436],"yaml":true},{"content":"Creates a copy of a <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,66],"content":"Creates a copy of a <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Creates a copy of a <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[32464,32531],"yaml":true},{"content":"The <xref:System.Security.IPermission> returned by this method represents the same access to resources as the original <xref:System.Net.WebPermission>. This method overrides <xref:System.Security.CodeAccessPermission.Copy%2A> and is implemented to support the <xref:System.Security.IPermission> interface.","nodes":[{"pos":[0,305],"content":"The <xref:System.Security.IPermission> returned by this method represents the same access to resources as the original <xref:System.Net.WebPermission>. This method overrides <xref:System.Security.CodeAccessPermission.Copy%2A> and is implemented to support the <xref:System.Security.IPermission> interface.","nodes":[{"content":"The <xref:System.Security.IPermission> returned by this method represents the same access to resources as the original <xref:System.Net.WebPermission>. This method overrides <xref:System.Security.CodeAccessPermission.Copy%2A> and is implemented to support the <xref:System.Security.IPermission> interface.","pos":[0,305],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.IPermission&gt;</ph> returned by this method represents the same access to resources as the original <ph id=\"ph2\">&lt;xref:System.Net.WebPermission&gt;</ph>.","pos":[0,151],"source":"The <xref:System.Security.IPermission> returned by this method represents the same access to resources as the original <xref:System.Net.WebPermission>."},{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Copy%2A&gt;</ph> and is implemented to support the <ph id=\"ph2\">&lt;xref:System.Security.IPermission&gt;</ph> interface.","pos":[152,305],"source":" This method overrides <xref:System.Security.CodeAccessPermission.Copy%2A> and is implemented to support the <xref:System.Security.IPermission> interface."}]}]}],"pos":[32542,32848],"yaml":true,"extradata":"MT"},{"content":"A new instance of the <xref href=\"System.Net.WebPermission\"></xref> class that has the same values as the original.","nodes":[{"pos":[0,115],"content":"A new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> class that has the same values as the original.","source":"A new instance of the <xref href=\"System.Net.WebPermission\"></xref> class that has the same values as the original."}],"pos":[33630,33746],"yaml":true},{"content":"Reconstructs a <xref href=\"System.Net.WebPermission\"></xref> from an XML encoding.","nodes":[{"pos":[0,82],"content":"Reconstructs a <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> from an XML encoding.","source":"Reconstructs a <xref href=\"System.Net.WebPermission\"></xref> from an XML encoding."}],"pos":[34929,35012],"yaml":true},{"content":"The <xref:System.Net.WebPermission.FromXml%2A> method reconstructs a <xref:System.Net.WebPermission> from an XML encoding that is defined by the <xref:System.Security.SecurityElement> class.  \n  \n Use the <xref:System.Net.WebPermission.ToXml%2A> method to XML-encode the <xref:System.Net.WebPermission>, including state information.","nodes":[{"pos":[0,190],"content":"The <xref:System.Net.WebPermission.FromXml%2A> method reconstructs a <xref:System.Net.WebPermission> from an XML encoding that is defined by the <xref:System.Security.SecurityElement> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.FromXml%2A&gt;</ph> method reconstructs a <ph id=\"ph2\">&lt;xref:System.Net.WebPermission&gt;</ph> from an XML encoding that is defined by the <ph id=\"ph3\">&lt;xref:System.Security.SecurityElement&gt;</ph> class.","pos":[0,190],"source":"The <xref:System.Net.WebPermission.FromXml%2A> method reconstructs a <xref:System.Net.WebPermission> from an XML encoding that is defined by the <xref:System.Security.SecurityElement> class."}]},{"pos":[197,332],"content":"Use the <xref:System.Net.WebPermission.ToXml%2A> method to XML-encode the <xref:System.Net.WebPermission>, including state information.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.ToXml%2A&gt;</ph> method to XML-encode the <ph id=\"ph2\">&lt;xref:System.Net.WebPermission&gt;</ph>, including state information.","pos":[0,135],"source":"Use the <xref:System.Net.WebPermission.ToXml%2A> method to XML-encode the <xref:System.Net.WebPermission>, including state information."}]}],"pos":[35023,35360],"yaml":true,"extradata":"MT"},{"content":"The XML encoding from which to reconstruct the <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,93],"content":"The XML encoding from which to reconstruct the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"The XML encoding from which to reconstruct the <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[36287,36381],"yaml":true},{"content":"The <code>securityElement</code> parameter is `null.`","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">securityElement</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null.`</ph>","source":"The <code>securityElement</code> parameter is `null.`"}],"pos":[36543,36597],"yaml":true},{"content":"<code>securityElement</code> is not a permission element for this type.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">&lt;code&gt;securityElement&lt;/code&gt;</ph> is not a permission element for this type.","source":"<code>securityElement</code> is not a permission element for this type."}],"pos":[36691,36763],"yaml":true},{"content":"Returns the logical intersection of two <xref href=\"System.Net.WebPermission\"></xref> instances.","nodes":[{"pos":[0,96],"content":"Returns the logical intersection of two <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> instances.","source":"Returns the logical intersection of two <xref href=\"System.Net.WebPermission\"></xref> instances."}],"pos":[37874,37971],"yaml":true},{"content":"<xref:System.Net.WebPermission.Intersect%2A> returns a <xref:System.Net.WebPermission> that contains those permissions that are common in both `target` and the current instance.  \n  \n This method overrides <xref:System.Security.CodeAccessPermission.Intersect%2A> and is implemented to support the <xref:System.Security.IPermission> interface.","nodes":[{"pos":[0,177],"content":"<ph id=\"ph1\">&lt;xref:System.Net.WebPermission.Intersect%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Net.WebPermission&gt;</ph> that contains those permissions that are common in both <ph id=\"ph3\">`target`</ph> and the current instance.","source":"<xref:System.Net.WebPermission.Intersect%2A> returns a <xref:System.Net.WebPermission> that contains those permissions that are common in both `target` and the current instance."},{"pos":[184,342],"content":"This method overrides <xref:System.Security.CodeAccessPermission.Intersect%2A> and is implemented to support the <xref:System.Security.IPermission> interface.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Intersect%2A&gt;</ph> and is implemented to support the <ph id=\"ph2\">&lt;xref:System.Security.IPermission&gt;</ph> interface.","pos":[0,158],"source":"This method overrides <xref:System.Security.CodeAccessPermission.Intersect%2A> and is implemented to support the <xref:System.Security.IPermission> interface."}]}],"pos":[37982,38329],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.WebPermission\"></xref> to compare with the current instance.","nodes":[{"pos":[0,87],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> to compare with the current instance.","source":"The <xref href=\"System.Net.WebPermission\"></xref> to compare with the current instance."}],"pos":[39179,39267],"yaml":true},{"content":"A new <xref href=\"System.Net.WebPermission\"></xref> that represents the intersection of the current instance and the <code>target</code> parameter. If the intersection is empty, the method returns `null`.","nodes":[{"pos":[0,204],"content":"A new <xref href=\"System.Net.WebPermission\"></xref> that represents the intersection of the current instance and the <code>target</code> parameter. If the intersection is empty, the method returns `null`.","nodes":[{"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> that represents the intersection of the current instance and the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","pos":[0,147],"source":"A new <xref href=\"System.Net.WebPermission\"></xref> that represents the intersection of the current instance and the <code>target</code> parameter."},{"content":"If the intersection is empty, the method returns <ph id=\"ph1\">`null`</ph>.","pos":[148,204],"source":" If the intersection is empty, the method returns `null`."}]}],"pos":[39338,39543],"yaml":true},{"content":"<code>target</code> is not `null` or of type <xref href=\"System.Net.WebPermission\"></xref>","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;target&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph> or of type <ph id=\"ph3\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>","source":"<code>target</code> is not `null` or of type <xref href=\"System.Net.WebPermission\"></xref>"}],"pos":[39699,39790],"yaml":true},{"content":"Determines whether the current <xref href=\"System.Net.WebPermission\"></xref> is a subset of the specified object.","nodes":[{"pos":[0,113],"content":"Determines whether the current <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> is a subset of the specified object.","source":"Determines whether the current <xref href=\"System.Net.WebPermission\"></xref> is a subset of the specified object."}],"pos":[40907,41021],"yaml":true},{"content":"If the current <xref:System.Net.WebPermission> specifies a set of associated resources that is wholly contained by the `target` parameter, then the current <xref:System.Net.WebPermission> is a subset of `target`. This method overrides <xref:System.Net.WebPermission.IsSubsetOf%2A> and is implemented to support the <xref:System.Security.IPermission> interface.","nodes":[{"pos":[0,360],"content":"If the current <xref:System.Net.WebPermission> specifies a set of associated resources that is wholly contained by the `target` parameter, then the current <xref:System.Net.WebPermission> is a subset of `target`. This method overrides <xref:System.Net.WebPermission.IsSubsetOf%2A> and is implemented to support the <xref:System.Security.IPermission> interface.","nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> specifies a set of associated resources that is wholly contained by the <ph id=\"ph2\">`target`</ph> parameter, then the current <ph id=\"ph3\">&lt;xref:System.Net.WebPermission&gt;</ph> is a subset of <ph id=\"ph4\">`target`</ph>.","pos":[0,212],"source":"If the current <xref:System.Net.WebPermission> specifies a set of associated resources that is wholly contained by the `target` parameter, then the current <xref:System.Net.WebPermission> is a subset of `target`."},{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.IsSubsetOf%2A&gt;</ph> and is implemented to support the <ph id=\"ph2\">&lt;xref:System.Security.IPermission&gt;</ph> interface.","pos":[213,360],"source":" This method overrides <xref:System.Net.WebPermission.IsSubsetOf%2A> and is implemented to support the <xref:System.Security.IPermission> interface."}]}],"pos":[41032,41393],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.WebPermission\"></xref> to compare to the current <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,122],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> to compare to the current <ph id=\"ph2\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Net.WebPermission\"></xref> to compare to the current <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[42226,42349],"yaml":true},{"content":"`true` if the current instance is a subset of the <code>target</code> parameter; otherwise, `false`. If the target is `null`, the method returns `true` for an empty current permission that is not unrestricted and `false` otherwise.","nodes":[{"pos":[0,231],"content":"`true` if the current instance is a subset of the <code>target</code> parameter; otherwise, `false`. If the target is `null`, the method returns `true` for an empty current permission that is not unrestricted and `false` otherwise.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the current instance is a subset of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,100],"source":"`true` if the current instance is a subset of the <code>target</code> parameter; otherwise, `false`."},{"content":"If the target is <ph id=\"ph1\">`null`</ph>, the method returns <ph id=\"ph2\">`true`</ph> for an empty current permission that is not unrestricted and <ph id=\"ph3\">`false`</ph> otherwise.","pos":[101,231],"source":" If the target is `null`, the method returns `true` for an empty current permission that is not unrestricted and `false` otherwise."}]}],"pos":[42407,42641],"yaml":true},{"content":"The target parameter is not an instance of <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,89],"content":"The target parameter is not an instance of <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"The target parameter is not an instance of <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[42798,42888],"yaml":true},{"content":"The current instance contains a Regex-encoded right and there is not exactly the same right found in the target instance.","nodes":[{"pos":[0,121],"content":"The current instance contains a Regex-encoded right and there is not exactly the same right found in the target instance.","nodes":[{"content":"The current instance contains a Regex-encoded right and there is not exactly the same right found in the target instance.","pos":[0,121]}]}],"pos":[42990,43112],"yaml":true},{"content":"Checks the overall permission state of the <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,89],"content":"Checks the overall permission state of the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Checks the overall permission state of the <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[44133,44223],"yaml":true},{"content":"If <xref:System.Net.WebPermission> is <xref:System.Security.Permissions.PermissionState.Unrestricted>, then the target class can use all URIs. Otherwise, specific permission must be given for any URI you want to use with the target class.  \n  \n> [!NOTE]\n>  Use <xref:System.Net.WebPermission.AddPermission%2A> to add a URI and specify its permissions.","nodes":[{"pos":[0,238],"content":"If <xref:System.Net.WebPermission> is <xref:System.Security.Permissions.PermissionState.Unrestricted>, then the target class can use all URIs. Otherwise, specific permission must be given for any URI you want to use with the target class.","nodes":[{"content":"If <xref:System.Net.WebPermission> is <xref:System.Security.Permissions.PermissionState.Unrestricted>, then the target class can use all URIs. Otherwise, specific permission must be given for any URI you want to use with the target class.","pos":[0,238],"nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Net.WebPermission&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState.Unrestricted&gt;</ph>, then the target class can use all URIs.","pos":[0,142],"source":"If <xref:System.Net.WebPermission> is <xref:System.Security.Permissions.PermissionState.Unrestricted>, then the target class can use all URIs."},{"content":"Otherwise, specific permission must be given for any URI you want to use with the target class.","pos":[143,238]}]}]},{"pos":[246,351],"content":"[!NOTE]\n Use <xref:System.Net.WebPermission.AddPermission%2A> to add a URI and specify its permissions.","leadings":["","> "],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.AddPermission%2A&gt;</ph> to add a URI and specify its permissions.","pos":[9,103],"source":" Use <xref:System.Net.WebPermission.AddPermission%2A> to add a URI and specify its permissions."}]}],"pos":[44234,44591],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Net.WebPermission\"></xref> was created with the <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref><xref href=\"System.Security.Permissions.PermissionState\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,243],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> was created with the <ph id=\"ph3\">&lt;xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"&gt;&lt;/xref&gt;</ph><ph id=\"ph4\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph5\">`false`</ph>.","source":"`true` if the <xref href=\"System.Net.WebPermission\"></xref> was created with the <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref><xref href=\"System.Security.Permissions.PermissionState\"></xref>; otherwise, `false`."}],"pos":[44722,44968],"yaml":true},{"content":"Creates an XML encoding of a <xref href=\"System.Net.WebPermission\"></xref> and its current state.","nodes":[{"pos":[0,97],"content":"Creates an XML encoding of a <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> and its current state.","source":"Creates an XML encoding of a <xref href=\"System.Net.WebPermission\"></xref> and its current state."}],"pos":[46005,46103],"yaml":true},{"content":"Use the <xref:System.Net.WebPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>.","nodes":[{"pos":[0,137],"content":"Use the <xref:System.Net.WebPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Net.WebPermission.FromXml%2A&gt;</ph> method to restore the state information from a <ph id=\"ph2\">&lt;xref:System.Security.SecurityElement&gt;</ph>.","pos":[0,137],"source":"Use the <xref:System.Net.WebPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>."}]}],"pos":[46114,46252],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.SecurityElement\"></xref> that contains an XML-encoded representation of the <xref href=\"System.Net.WebPermission\"></xref>, including state information.","nodes":[{"pos":[0,181],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.SecurityElement\"&gt;&lt;/xref&gt;</ph> that contains an XML-encoded representation of the <ph id=\"ph2\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>, including state information.","source":"A <xref href=\"System.Security.SecurityElement\"></xref> that contains an XML-encoded representation of the <xref href=\"System.Net.WebPermission\"></xref>, including state information."}],"pos":[47095,47277],"yaml":true},{"content":"Returns the logical union between two instances of the <xref href=\"System.Net.WebPermission\"></xref> class.","nodes":[{"pos":[0,107],"content":"Returns the logical union between two instances of the <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> class.","source":"Returns the logical union between two instances of the <xref href=\"System.Net.WebPermission\"></xref> class."}],"pos":[48425,48533],"yaml":true},{"content":"<xref:System.Net.WebPermission.Union%2A> returns a <xref:System.Net.WebPermission> that contains all the permissions in both `target` and the current instance.","nodes":[{"pos":[0,159],"content":"<ph id=\"ph1\">&lt;xref:System.Net.WebPermission.Union%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Net.WebPermission&gt;</ph> that contains all the permissions in both <ph id=\"ph3\">`target`</ph> and the current instance.","source":"<xref:System.Net.WebPermission.Union%2A> returns a <xref:System.Net.WebPermission> that contains all the permissions in both `target` and the current instance."}],"pos":[48544,48704],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.WebPermission\"></xref> to combine with the current <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,124],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> to combine with the current <ph id=\"ph2\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Net.WebPermission\"></xref> to combine with the current <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[49493,49618],"yaml":true},{"content":"A <xref href=\"System.Net.WebPermission\"></xref> that represents the union of the current instance and the <code>target</code> parameter. If either `WebPermission` is <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref>, the method returns a <xref href=\"System.Net.WebPermission\"></xref> that is <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref>. If the target is `null`, the method returns a copy of the current <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,511],"content":"A <xref href=\"System.Net.WebPermission\"></xref> that represents the union of the current instance and the <code>target</code> parameter. If either `WebPermission` is <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref>, the method returns a <xref href=\"System.Net.WebPermission\"></xref> that is <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref>. If the target is `null`, the method returns a copy of the current <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> that represents the union of the current instance and the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","pos":[0,136],"source":"A <xref href=\"System.Net.WebPermission\"></xref> that represents the union of the current instance and the <code>target</code> parameter."},{"content":"If either <ph id=\"ph1\">`WebPermission`</ph> is <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"&gt;&lt;/xref&gt;</ph>, the method returns a <ph id=\"ph3\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph> that is <ph id=\"ph4\">&lt;xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"&gt;&lt;/xref&gt;</ph>.","pos":[137,398],"source":" If either `WebPermission` is <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref>, the method returns a <xref href=\"System.Net.WebPermission\"></xref> that is <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref>."},{"content":"If the target is <ph id=\"ph1\">`null`</ph>, the method returns a copy of the current <ph id=\"ph2\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","pos":[399,511],"source":" If the target is `null`, the method returns a copy of the current <xref href=\"System.Net.WebPermission\"></xref>."}]}],"pos":[49689,50201],"yaml":true},{"content":"target is not `null` or of type <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,78],"content":"target is not <ph id=\"ph1\">`null`</ph> or of type <ph id=\"ph2\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"target is not `null` or of type <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[50353,50432],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.WebPermission\n  commentId: T:System.Net.WebPermission\n  id: WebPermission\n  children:\n  - System.Net.WebPermission.#ctor\n  - System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)\n  - System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  - System.Net.WebPermission.AcceptList\n  - System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)\n  - System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  - System.Net.WebPermission.ConnectList\n  - System.Net.WebPermission.Copy\n  - System.Net.WebPermission.FromXml(System.Security.SecurityElement)\n  - System.Net.WebPermission.Intersect(System.Security.IPermission)\n  - System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Net.WebPermission.IsUnrestricted\n  - System.Net.WebPermission.ToXml\n  - System.Net.WebPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: WebPermission\n  nameWithType: WebPermission\n  fullName: System.Net.WebPermission\n  type: Class\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Controls rights to access HTTP Internet resources.\n  remarks: \"<xref:System.Net.WebPermission> provides a set of methods and properties to control access to Internet resources. You can use a <xref:System.Net.WebPermission> to provide either restricted or unrestricted access to your resource, based on the <xref:System.Security.Permissions.PermissionState> that is set when the <xref:System.Net.WebPermission> is created.  \\n  \\n Create a <xref:System.Net.WebPermission> instance by calling its constructor using one of the following sets of parameters:  \\n  \\n-   No parameters. The default <xref:System.Security.Permissions.PermissionState> is <xref:System.Security.Permissions.PermissionState.None>.  \\n  \\n-   A <xref:System.Security.Permissions.PermissionState>. Specify either <xref:System.Security.Permissions.PermissionState.Unrestricted> to allow any URI to be used in the target class, or <xref:System.Security.Permissions.PermissionState.None> to allow access only to URIs that you specify through the use of the <xref:System.Net.WebPermission.AddPermission%2A> method.  \\n  \\n-   A <xref:System.Net.NetworkAccess> value and a URI string. The specified URI has permissions granted by the <xref:System.Net.NetworkAccess> value.  \\n  \\n-   A <xref:System.Net.NetworkAccess> specifier and URI regular expression.  \\n  \\n The <xref:System.Net.WebPermission.ConnectList%2A> and <xref:System.Net.WebPermission.AcceptList%2A> hold the URIs to which you have granted access permission. To add a URI to either of these lists, use <xref:System.Net.WebPermission.AddPermission%2A>. If you pass <xref:System.Net.NetworkAccess.Accept> as the <xref:System.Net.NetworkAccess> parameter, the URI will be added to the <xref:System.Net.WebPermission.AcceptList%2A>. <xref:System.Net.WebPermission> will allow connections to your target class with URIs matching the <xref:System.Net.WebPermission.AcceptList%2A>.  \\n  \\n> [!CAUTION]\\n>  To deny access to an Internet resource, you must deny access to all the possible paths to that resource. This requires calling <xref:System.Net.WebPermission.%23ctor%2A?displayProperty=fullName> with state parameter set to <xref:System.Security.CodeAccessPermission.Deny%2A>. A better approach is to allow access to the specific resource only. For more information about this subject, refer to the [NIB: Using the Deny Method](http://msdn.microsoft.com/en-us/6b4d2e01-c504-4ac3-b50e-d6f5e7f5df25) topic.  \\n  \\n> [!NOTE]\\n>  You need to deny access using only the resource canonical path. There is no need to use all the path's syntactical variations.  \\n  \\n> [!NOTE]\\n>  User name and default port information is stripped from the <xref:System.Uri> before the comparison with the regular expression argument that is supplied to the <xref:System.Net.WebPermission.%23ctor%28System.Net.NetworkAccess%2CSystem.Text.RegularExpressions.Regex%29> constructor. If the regular expression contains user information or the default port number, then all incoming <xref:System.Uri>s will fail to match the regular expression.\"\n  example:\n  - \"The following example demonstrates how to create a new instance of <xref:System.Net.WebPermission> using a <xref:System.Text.RegularExpressions.Regex>. Additional hosts are added to the connect and accept list of <xref:System.Net.WebPermission>. Finally, the connect and accept list are displayed to the console.  \\n  \\n [!code-cpp[WebPermission_Regex#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Regex/CPP/regex.cpp#1)]\\n [!code-csharp[WebPermission_Regex#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Regex/CS/regex.cs#1)]\\n [!code-vb[WebPermission_Regex#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Regex/VB/regex.vb#1)]\"\n  syntax:\n    content: 'public sealed class WebPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission'\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.#ctor\n  commentId: M:System.Net.WebPermission.#ctor\n  id: '#ctor'\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: WebPermission()\n  nameWithType: WebPermission.WebPermission()\n  fullName: WebPermission.WebPermission()\n  type: Constructor\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Creates a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class.\n  remarks: Creates a new instance of the <xref:System.Net.WebPermission> class. This constructor creates an empty permission that does not grant any rights.\n  syntax:\n    content: public WebPermission ();\n    parameters: []\n  overload: System.Net.WebPermission.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)\n  commentId: M:System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: WebPermission(PermissionState)\n  nameWithType: WebPermission.WebPermission(PermissionState)\n  fullName: WebPermission.WebPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Creates a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class that passes all demands or fails all demands.\n  remarks: The value of the `state` parameter is either <xref:System.Security.Permissions.PermissionState?displayProperty=fullName> or <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, respectively yielding fully restricted or fully unrestricted access to all security variables. If you specify <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>, then you can give access to individual URIs using <xref:System.Net.WebPermission.AddPermission%2A>.\n  example:\n  - \"The following example creates an instance of <xref:System.Net.WebPermission> and gives access rights to specific URLs.  \\n  \\n [!code-cpp[WebPermission_Copy#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Copy/CPP/webpermission_copy.cpp#1)]\\n [!code-csharp[WebPermission_Copy#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Copy/CS/webpermission_copy.cs#1)]\\n [!code-vb[WebPermission_Copy#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Copy/VB/webpermission_copy.vb#1)]\"\n  syntax:\n    content: public WebPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: A <xref href=\"System.Security.Permissions.PermissionState\"></xref> value.\n  overload: System.Net.WebPermission.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)\n  commentId: M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)\n  id: '#ctor(System.Net.NetworkAccess,System.String)'\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: WebPermission(NetworkAccess, String)\n  nameWithType: WebPermission.WebPermission(NetworkAccess, String)\n  fullName: WebPermission.WebPermission(NetworkAccess, String)\n  type: Constructor\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Initializes a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class with the specified access rights for the specified URI.\n  remarks: This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriString` parameter.\n  example:\n  - \"The following example creates a new instance of <xref:System.Net.WebPermission> with connect rights for the specified URI.  \\n  \\n [!code-cpp[WebPermission_Union#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Union/CPP/webpermission_union.cpp#1)]\\n [!code-csharp[WebPermission_Union#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Union/CS/webpermission_union.cs#1)]\\n [!code-vb[WebPermission_Union#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Union/VB/webpermission_union.vb#1)]\"\n  syntax:\n    content: public WebPermission (System.Net.NetworkAccess access, string uriString);\n    parameters:\n    - id: access\n      type: System.Net.NetworkAccess\n      description: A NetworkAccess value that indicates what kind of access to grant to the specified URI. <xref href=\"System.Net.NetworkAccess.Accept\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=\"System.Net.NetworkAccess.Connect\"></xref> indicates that the application is allowed to connect to specific Internet resources.\n    - id: uriString\n      type: System.String\n      description: A URI string to which access rights are granted.\n  overload: System.Net.WebPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>uriString</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  commentId: M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  id: '#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)'\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: WebPermission(NetworkAccess, Regex)\n  nameWithType: WebPermission.WebPermission(NetworkAccess, Regex)\n  fullName: WebPermission.WebPermission(NetworkAccess, Regex)\n  type: Constructor\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Initializes a new instance of the <xref href=\"System.Net.WebPermission\"></xref> class with the specified access rights for the specified URI regular expression.\n  remarks: \"This constructor initializes a <xref:System.Net.WebPermission> and grants its target permission to either make a remote host connection or accept a remote host connection using the URI described by the `uriRegex` parameter.  \\n  \\n> [!NOTE]\\n>  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.  \\n  \\n> [!NOTE]\\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.\"\n  example:\n  - \"The following example creates a new instance of <xref:System.Net.WebPermission> with connect rights for the specified <xref:System.Text.RegularExpressions.Regex?displayProperty=fullName>.  \\n  \\n [!code-cpp[WebPermission_Constructor4#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Constructor4/CPP/webpermission_constructor4.cpp#1)]\\n [!code-csharp[WebPermission_Constructor4#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Constructor4/CS/webpermission_constructor4.cs#1)]\\n [!code-vb[WebPermission_Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Constructor4/VB/webpermission_constructor4.vb#1)]\"\n  syntax:\n    content: public WebPermission (System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex);\n    parameters:\n    - id: access\n      type: System.Net.NetworkAccess\n      description: A <xref href=\"System.Net.NetworkAccess\"></xref> value that indicates what kind of access to grant to the specified URI. <xref href=\"System.Net.NetworkAccess.Accept\"></xref> indicates that the application is allowed to accept connections from the Internet on a local resource. <xref href=\"System.Net.NetworkAccess.Connect\"></xref> indicates that the application is allowed to connect to specific Internet resources.\n    - id: uriRegex\n      type: System.Text.RegularExpressions.Regex\n      description: A regular expression that describes the URI to which access is to be granted.\n  overload: System.Net.WebPermission.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.AcceptList\n  commentId: P:System.Net.WebPermission.AcceptList\n  id: AcceptList\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: AcceptList\n  nameWithType: WebPermission.AcceptList\n  fullName: WebPermission.AcceptList\n  type: Property\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: This property returns an enumeration of a single accept permissions held by this <xref href=\"System.Net.WebPermission\"></xref>. The possible objects types contained in the returned enumeration are <xref href=\"System.String\"></xref> and <xref href=\"System.Text.RegularExpressions.Regex\"></xref>.\n  remarks: \"This property gets a list of local resources permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to receive an incoming connection to local resources found in this list.  \\n  \\n> [!NOTE]\\n>  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.  \\n  \\n> [!NOTE]\\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.\"\n  example:\n  - \"The following example prints the URLs in the <xref:System.Net.WebPermission.AcceptList%2A> to the console.  \\n  \\n [!code-cpp[WebPermission_AcceptConnectList#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CPP/webpermission_acceptconnectlist.cpp#2)]\\n [!code-csharp[WebPermission_AcceptConnectList#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CS/webpermission_acceptconnectlist.cs#2)]\\n [!code-vb[WebPermission_AcceptConnectList#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_AcceptConnectList/VB/webpermission_acceptconnectlist.vb#2)]\"\n  syntax:\n    content: public System.Collections.IEnumerator AcceptList { get; }\n    return:\n      type: System.Collections.IEnumerator\n      description: The <xref href=\"System.Collections.IEnumerator\"></xref> interface that contains accept permissions.\n  overload: System.Net.WebPermission.AcceptList*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)\n  commentId: M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)\n  id: AddPermission(System.Net.NetworkAccess,System.String)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: AddPermission(NetworkAccess, String)\n  nameWithType: WebPermission.AddPermission(NetworkAccess, String)\n  fullName: WebPermission.AddPermission(NetworkAccess, String)\n  type: Method\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Adds the specified URI string with the specified access rights to the current <xref href=\"System.Net.WebPermission\"></xref>.\n  remarks: \"If you have specified <xref:System.Security.Permissions.PermissionState.None> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to permit the use of `uriString` in the target class. The way that `uriString` can be used by the target class is specified by `access`. Specify <xref:System.Net.NetworkAccess.Accept> as the access parameter to add the URI specified by the `uriString` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess.Connect> as the access parameter to add the URI to the list of URI connect strings.  \\n  \\n> [!NOTE]\\n>  Calling <xref:System.Net.WebPermission.AddPermission%2A> on <xref:System.Security.Permissions.PermissionState.Unrestricted><xref:System.Net.WebPermission> will have no effect, because permission is granted to all URIs.  \\n  \\n> [!NOTE]\\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.\"\n  example:\n  - \"The following example demonstrates how to add access rights to particular URL strings.  \\n  \\n [!code-cpp[WebPermission_Intersect#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Intersect/CPP/webpermission_intersect.cpp#2)]\\n [!code-csharp[WebPermission_Intersect#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Intersect/CS/webpermission_intersect.cs#2)]\\n [!code-vb[WebPermission_Intersect#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Intersect/VB/webpermission_intersect.vb#2)]\"\n  syntax:\n    content: public void AddPermission (System.Net.NetworkAccess access, string uriString);\n    parameters:\n    - id: access\n      type: System.Net.NetworkAccess\n      description: A <xref href=\"System.Net.NetworkAccess\"></xref> that specifies the access rights that are granted to the URI.\n    - id: uriString\n      type: System.String\n      description: A string that describes the URI to which access rights are granted.\n  overload: System.Net.WebPermission.AddPermission*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>uriString</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  commentId: M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  id: AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: AddPermission(NetworkAccess, Regex)\n  nameWithType: WebPermission.AddPermission(NetworkAccess, Regex)\n  fullName: WebPermission.AddPermission(NetworkAccess, Regex)\n  type: Method\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Adds the specified URI with the specified access rights to the current <xref href=\"System.Net.WebPermission\"></xref>.\n  remarks: \"If you have specified <xref:System.Security.Permissions.PermissionState.None> as the <xref:System.Security.Permissions.PermissionState>, use <xref:System.Net.WebPermission.AddPermission%2A> to allow the use of `uriRegex` in the target class. Specify <xref:System.Net.NetworkAccess.Accept> as the `access` parameter to add the URI specified by the `uriRegex` parameter to the list of URI accept strings, or specify <xref:System.Net.NetworkAccess.Connect> as the access parameter to add the URI to the list of URI connect strings.  \\n  \\n> [!NOTE]\\n>  Calling <xref:System.Net.WebPermission.AddPermission%2A> on an <xref:System.Security.Permissions.PermissionState.Unrestricted><xref:System.Net.WebPermission> instance will have no effect as permission is granted to all URIs.  \\n  \\n> [!NOTE]\\n>  It is recommended that you create `uriRegex` using the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName>, and <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> flags.  \\n  \\n> [!NOTE]\\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.\"\n  example:\n  - \"The following example uses <xref:System.Net.WebPermission.AddPermission%2A> to give access rights for the specified URI.  \\n  \\n [!code-cpp[WebPermission_IsSubset#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_IsSubset/CPP/webpermission_issubset.cpp#1)]\\n [!code-csharp[WebPermission_IsSubset#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_IsSubset/CS/webpermission_issubset.cs#1)]\\n [!code-vb[WebPermission_IsSubset#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_IsSubset/VB/webpermission_issubset.vb#1)]\"\n  syntax:\n    content: public void AddPermission (System.Net.NetworkAccess access, System.Text.RegularExpressions.Regex uriRegex);\n    parameters:\n    - id: access\n      type: System.Net.NetworkAccess\n      description: A NetworkAccess that specifies the access rights that are granted to the URI.\n    - id: uriRegex\n      type: System.Text.RegularExpressions.Regex\n      description: A regular expression that describes the set of URIs to which access rights are granted.\n  overload: System.Net.WebPermission.AddPermission*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>uriRegex</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.ConnectList\n  commentId: P:System.Net.WebPermission.ConnectList\n  id: ConnectList\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: ConnectList\n  nameWithType: WebPermission.ConnectList\n  fullName: WebPermission.ConnectList\n  type: Property\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: This property returns an enumeration of a single connect permissions held by this <xref href=\"System.Net.WebPermission\"></xref>. The possible objects types contained in the returned enumeration are <xref href=\"System.String\"></xref> and <xref href=\"System.Text.RegularExpressions.Regex\"></xref>.\n  remarks: \"This property gets a list of remote resources that are permitted by this <xref:System.Net.WebPermission>. The class to which you have applied <xref:System.Net.WebPermission> only has permission to connect with resources found in this list.  \\n  \\n> [!NOTE]\\n>  You can add URIs to this list using <xref:System.Net.WebPermission.AddPermission%2A>.  \\n  \\n> [!NOTE]\\n>  A candidate URI string is checked against the list of relevant regular expressions (<xref:System.Net.WebPermission.AcceptList%2A> or <xref:System.Net.WebPermission.ConnectList%2A>) in two ways. First, the candidate URI string is checked against the appropriate list; then, if there is no match, the candidate URI string is converted into a <xref:System.Uri> and checked against the appropriate list.\"\n  example:\n  - \"The following example prints the URLs in the <xref:System.Net.WebPermission.ConnectList%2A> to the console.  \\n  \\n [!code-cpp[WebPermission_AcceptConnectList#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CPP/webpermission_acceptconnectlist.cpp#1)]\\n [!code-csharp[WebPermission_AcceptConnectList#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_AcceptConnectList/CS/webpermission_acceptconnectlist.cs#1)]\\n [!code-vb[WebPermission_AcceptConnectList#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_AcceptConnectList/VB/webpermission_acceptconnectlist.vb#1)]\"\n  syntax:\n    content: public System.Collections.IEnumerator ConnectList { get; }\n    return:\n      type: System.Collections.IEnumerator\n      description: The <xref href=\"System.Collections.IEnumerator\"></xref> interface that contains connect permissions.\n  overload: System.Net.WebPermission.ConnectList*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.Copy\n  commentId: M:System.Net.WebPermission.Copy\n  id: Copy\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: WebPermission.Copy()\n  fullName: WebPermission.Copy()\n  type: Method\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Creates a copy of a <xref href=\"System.Net.WebPermission\"></xref>.\n  remarks: The <xref:System.Security.IPermission> returned by this method represents the same access to resources as the original <xref:System.Net.WebPermission>. This method overrides <xref:System.Security.CodeAccessPermission.Copy%2A> and is implemented to support the <xref:System.Security.IPermission> interface.\n  example:\n  - \"The following example demonstrates how to create a second instance of <xref:System.Net.WebPermission> using <xref:System.Net.WebPermission.Copy%2A>. This second instance is identical to the first.  \\n  \\n [!code-cpp[WebPermission_Copy#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Copy/CPP/webpermission_copy.cpp#2)]\\n [!code-csharp[WebPermission_Copy#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Copy/CS/webpermission_copy.cs#2)]\\n [!code-vb[WebPermission_Copy#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Copy/VB/webpermission_copy.vb#2)]\"\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A new instance of the <xref href=\"System.Net.WebPermission\"></xref> class that has the same values as the original.\n  overload: System.Net.WebPermission.Copy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.FromXml(System.Security.SecurityElement)\n  commentId: M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: WebPermission.FromXml(SecurityElement)\n  fullName: WebPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Reconstructs a <xref href=\"System.Net.WebPermission\"></xref> from an XML encoding.\n  remarks: \"The <xref:System.Net.WebPermission.FromXml%2A> method reconstructs a <xref:System.Net.WebPermission> from an XML encoding that is defined by the <xref:System.Security.SecurityElement> class.  \\n  \\n Use the <xref:System.Net.WebPermission.ToXml%2A> method to XML-encode the <xref:System.Net.WebPermission>, including state information.\"\n  example:\n  - \"The following example creates a <xref:System.Security.SecurityElement?displayProperty=fullName>, populates its attributes, and uses <xref:System.Net.WebPermission.FromXml%2A> to transfer this information to an instance of <xref:System.Net.WebPermission>.  \\n  \\n [!code-cpp[WebPermission_FromToXml#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_FromToXml/CPP/webpermission_fromtoxml.cpp#1)]\\n [!code-csharp[WebPermission_FromToXml#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_FromToXml/CS/webpermission_fromtoxml.cs#1)]\\n [!code-vb[WebPermission_FromToXml#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_FromToXml/VB/webpermission_fromtoxml.vb#1)]\"\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement securityElement);\n    parameters:\n    - id: securityElement\n      type: System.Security.SecurityElement\n      description: The XML encoding from which to reconstruct the <xref href=\"System.Net.WebPermission\"></xref>.\n  overload: System.Net.WebPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>securityElement</code> parameter is `null.`\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>securityElement</code> is not a permission element for this type.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.Intersect(System.Security.IPermission)\n  commentId: M:System.Net.WebPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: WebPermission.Intersect(IPermission)\n  fullName: WebPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Returns the logical intersection of two <xref href=\"System.Net.WebPermission\"></xref> instances.\n  remarks: \"<xref:System.Net.WebPermission.Intersect%2A> returns a <xref:System.Net.WebPermission> that contains those permissions that are common in both `target` and the current instance.  \\n  \\n This method overrides <xref:System.Security.CodeAccessPermission.Intersect%2A> and is implemented to support the <xref:System.Security.IPermission> interface.\"\n  example:\n  - \"The following example shows how to create an instance of <xref:System.Net.WebPermission> using the logical intersection of two existing <xref:System.Net.WebPermission> instances.  \\n  \\n [!code-cpp[WebPermission_Intersect#3](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Intersect/CPP/webpermission_intersect.cpp#3)]\\n [!code-csharp[WebPermission_Intersect#3](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Intersect/CS/webpermission_intersect.cs#3)]\\n [!code-vb[WebPermission_Intersect#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Intersect/VB/webpermission_intersect.vb#3)]\"\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: The <xref href=\"System.Net.WebPermission\"></xref> to compare with the current instance.\n    return:\n      type: System.Security.IPermission\n      description: A new <xref href=\"System.Net.WebPermission\"></xref> that represents the intersection of the current instance and the <code>target</code> parameter. If the intersection is empty, the method returns `null`.\n  overload: System.Net.WebPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>target</code> is not `null` or of type <xref href=\"System.Net.WebPermission\"></xref>\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)\n  commentId: M:System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: WebPermission.IsSubsetOf(IPermission)\n  fullName: WebPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Determines whether the current <xref href=\"System.Net.WebPermission\"></xref> is a subset of the specified object.\n  remarks: If the current <xref:System.Net.WebPermission> specifies a set of associated resources that is wholly contained by the `target` parameter, then the current <xref:System.Net.WebPermission> is a subset of `target`. This method overrides <xref:System.Net.WebPermission.IsSubsetOf%2A> and is implemented to support the <xref:System.Security.IPermission> interface.\n  example:\n  - \"The following example uses <xref:System.Net.WebPermission.IsSubsetOf%2A> to determine whether the access rights found in one instance of <xref:System.Net.WebPermission> are found in another instance of <xref:System.Net.WebPermission>.  \\n  \\n [!code-cpp[WebPermission_IsSubset2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_IsSubset2/CPP/source.cpp#1)]\\n [!code-csharp[WebPermission_IsSubset2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_IsSubset2/CS/source.cs#1)]\\n [!code-vb[WebPermission_IsSubset2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_IsSubset2/VB/source.vb#1)]\"\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: The <xref href=\"System.Net.WebPermission\"></xref> to compare to the current <xref href=\"System.Net.WebPermission\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the current instance is a subset of the <code>target</code> parameter; otherwise, `false`. If the target is `null`, the method returns `true` for an empty current permission that is not unrestricted and `false` otherwise.'\n  overload: System.Net.WebPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The target parameter is not an instance of <xref href=\"System.Net.WebPermission\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current instance contains a Regex-encoded right and there is not exactly the same right found in the target instance.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.IsUnrestricted\n  commentId: M:System.Net.WebPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: WebPermission.IsUnrestricted()\n  fullName: WebPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Checks the overall permission state of the <xref href=\"System.Net.WebPermission\"></xref>.\n  remarks: \"If <xref:System.Net.WebPermission> is <xref:System.Security.Permissions.PermissionState.Unrestricted>, then the target class can use all URIs. Otherwise, specific permission must be given for any URI you want to use with the target class.  \\n  \\n> [!NOTE]\\n>  Use <xref:System.Net.WebPermission.AddPermission%2A> to add a URI and specify its permissions.\"\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Net.WebPermission\"></xref> was created with the <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref><xref href=\"System.Security.Permissions.PermissionState\"></xref>; otherwise, `false`.'\n  overload: System.Net.WebPermission.IsUnrestricted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.ToXml\n  commentId: M:System.Net.WebPermission.ToXml\n  id: ToXml\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: WebPermission.ToXml()\n  fullName: WebPermission.ToXml()\n  type: Method\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Creates an XML encoding of a <xref href=\"System.Net.WebPermission\"></xref> and its current state.\n  remarks: Use the <xref:System.Net.WebPermission.FromXml%2A> method to restore the state information from a <xref:System.Security.SecurityElement>.\n  example:\n  - \"The following example demonstrates how to use <xref:System.Net.WebPermission.ToXml%2A> to create a <xref:System.Security.SecurityElement?displayProperty=fullName> and print its attributes to the console.  \\n  \\n [!code-cpp[WebPermission_FromToXml#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_FromToXml/CPP/webpermission_fromtoxml.cpp#1)]\\n [!code-csharp[WebPermission_FromToXml#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_FromToXml/CS/webpermission_fromtoxml.cs#1)]\\n [!code-vb[WebPermission_FromToXml#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_FromToXml/VB/webpermission_fromtoxml.vb#1)]\"\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: A <xref href=\"System.Security.SecurityElement\"></xref> that contains an XML-encoded representation of the <xref href=\"System.Net.WebPermission\"></xref>, including state information.\n  overload: System.Net.WebPermission.ToXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.WebPermission.Union(System.Security.IPermission)\n  commentId: M:System.Net.WebPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: WebPermission.Union(IPermission)\n  fullName: WebPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - System\n  - System.Security.Permissions\n  namespace: System.Net\n  summary: Returns the logical union between two instances of the <xref href=\"System.Net.WebPermission\"></xref> class.\n  remarks: <xref:System.Net.WebPermission.Union%2A> returns a <xref:System.Net.WebPermission> that contains all the permissions in both `target` and the current instance.\n  example:\n  - \"The following example takes the logical union of two <xref:System.Net.WebPermission> instances to create a third instance of <xref:System.Net.WebPermission>.  \\n  \\n [!code-cpp[WebPermission_Union#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebPermission_Union/CPP/webpermission_union.cpp#2)]\\n [!code-csharp[WebPermission_Union#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebPermission_Union/CS/webpermission_union.cs#2)]\\n [!code-vb[WebPermission_Union#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebPermission_Union/VB/webpermission_union.vb#2)]\"\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: The <xref href=\"System.Net.WebPermission\"></xref> to combine with the current <xref href=\"System.Net.WebPermission\"></xref>.\n    return:\n      type: System.Security.IPermission\n      description: A <xref href=\"System.Net.WebPermission\"></xref> that represents the union of the current instance and the <code>target</code> parameter. If either `WebPermission` is <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref>, the method returns a <xref href=\"System.Net.WebPermission\"></xref> that is <xref href=\"System.Security.Permissions.PermissionState.Unrestricted\"></xref>. If the target is `null`, the method returns a copy of the current <xref href=\"System.Net.WebPermission\"></xref>.\n  overload: System.Net.WebPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: target is not `null` or of type <xref href=\"System.Net.WebPermission\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.Security.CodeAccessPermission\n  parent: System.Security\n  isExternal: false\n  name: CodeAccessPermission\n  nameWithType: CodeAccessPermission\n  fullName: System.Security.CodeAccessPermission\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Net.WebPermission.#ctor\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: WebPermission()\n  nameWithType: WebPermission.WebPermission()\n  fullName: WebPermission.WebPermission()\n- uid: System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: WebPermission(PermissionState)\n  nameWithType: WebPermission.WebPermission(PermissionState)\n  fullName: WebPermission.WebPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: WebPermission(NetworkAccess, String)\n  nameWithType: WebPermission.WebPermission(NetworkAccess, String)\n  fullName: WebPermission.WebPermission(NetworkAccess, String)\n- uid: System.Net.NetworkAccess\n  parent: System.Net\n  isExternal: false\n  name: NetworkAccess\n  nameWithType: NetworkAccess\n  fullName: System.Net.NetworkAccess\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: WebPermission(NetworkAccess, Regex)\n  nameWithType: WebPermission.WebPermission(NetworkAccess, Regex)\n  fullName: WebPermission.WebPermission(NetworkAccess, Regex)\n- uid: System.Text.RegularExpressions.Regex\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Regex\n  nameWithType: Regex\n  fullName: System.Text.RegularExpressions.Regex\n- uid: System.Net.WebPermission.AcceptList\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: AcceptList\n  nameWithType: WebPermission.AcceptList\n  fullName: WebPermission.AcceptList\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: AddPermission(NetworkAccess, String)\n  nameWithType: WebPermission.AddPermission(NetworkAccess, String)\n  fullName: WebPermission.AddPermission(NetworkAccess, String)\n- uid: System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: AddPermission(NetworkAccess, Regex)\n  nameWithType: WebPermission.AddPermission(NetworkAccess, Regex)\n  fullName: WebPermission.AddPermission(NetworkAccess, Regex)\n- uid: System.Net.WebPermission.ConnectList\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: ConnectList\n  nameWithType: WebPermission.ConnectList\n  fullName: WebPermission.ConnectList\n- uid: System.Net.WebPermission.Copy\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: WebPermission.Copy()\n  fullName: WebPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Net.WebPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: WebPermission.FromXml(SecurityElement)\n  fullName: WebPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Net.WebPermission.Intersect(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: WebPermission.Intersect(IPermission)\n  fullName: WebPermission.Intersect(IPermission)\n- uid: System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: WebPermission.IsSubsetOf(IPermission)\n  fullName: WebPermission.IsSubsetOf(IPermission)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.WebPermission.IsUnrestricted\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: WebPermission.IsUnrestricted()\n  fullName: WebPermission.IsUnrestricted()\n- uid: System.Net.WebPermission.ToXml\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: WebPermission.ToXml()\n  fullName: WebPermission.ToXml()\n- uid: System.Net.WebPermission.Union(System.Security.IPermission)\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: WebPermission.Union(IPermission)\n  fullName: WebPermission.Union(IPermission)\n- uid: System.Net.WebPermission.#ctor*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: WebPermission\n  nameWithType: WebPermission.WebPermission\n  fullName: WebPermission.WebPermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Net.WebPermission.AcceptList*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: AcceptList\n  nameWithType: WebPermission.AcceptList\n  fullName: WebPermission.AcceptList\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Net.WebPermission.AddPermission*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: AddPermission\n  nameWithType: WebPermission.AddPermission\n  fullName: WebPermission.AddPermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Net.WebPermission.ConnectList*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: ConnectList\n  nameWithType: WebPermission.ConnectList\n  fullName: WebPermission.ConnectList\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Net.WebPermission.Copy*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Copy\n  nameWithType: WebPermission.Copy\n  fullName: WebPermission.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Net.WebPermission.FromXml*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: WebPermission.FromXml\n  fullName: WebPermission.FromXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Net.WebPermission.Intersect*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: WebPermission.Intersect\n  fullName: WebPermission.Intersect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Net.WebPermission.IsSubsetOf*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: WebPermission.IsSubsetOf\n  fullName: WebPermission.IsSubsetOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Net.WebPermission.IsUnrestricted*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: WebPermission.IsUnrestricted\n  fullName: WebPermission.IsUnrestricted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Net.WebPermission.ToXml*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: WebPermission.ToXml\n  fullName: WebPermission.ToXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Net.WebPermission.Union*\n  parent: System.Net.WebPermission\n  isExternal: false\n  name: Union\n  nameWithType: WebPermission.Union\n  fullName: WebPermission.Union\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/WebPermission.xml\n- uid: System.Security.CodeAccessPermission.Equals(System.Object)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CodeAccessPermission.Equals(Object)\n  fullName: CodeAccessPermission.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Security.CodeAccessPermission.GetHashCode\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CodeAccessPermission.GetHashCode()\n  fullName: CodeAccessPermission.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Security.CodeAccessPermission.ToString\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToString()\n  nameWithType: CodeAccessPermission.ToString()\n  fullName: CodeAccessPermission.ToString()\n- uid: System.Security.CodeAccessPermission.Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Assert()\n  nameWithType: CodeAccessPermission.Assert()\n  fullName: CodeAccessPermission.Assert()\n- uid: System.Security.CodeAccessPermission.Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: CodeAccessPermission.Demand()\n  fullName: CodeAccessPermission.Demand()\n- uid: System.Security.CodeAccessPermission.Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Deny()\n  nameWithType: CodeAccessPermission.Deny()\n  fullName: CodeAccessPermission.Deny()\n- uid: System.Security.CodeAccessPermission.PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: PermitOnly()\n  nameWithType: CodeAccessPermission.PermitOnly()\n  fullName: CodeAccessPermission.PermitOnly()\n- uid: System.Security.CodeAccessPermission.RevertAll\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAll()\n  nameWithType: CodeAccessPermission.RevertAll()\n  fullName: CodeAccessPermission.RevertAll()\n- uid: System.Security.CodeAccessPermission.RevertAssert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAssert()\n  nameWithType: CodeAccessPermission.RevertAssert()\n  fullName: CodeAccessPermission.RevertAssert()\n- uid: System.Security.CodeAccessPermission.RevertDeny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertDeny()\n  nameWithType: CodeAccessPermission.RevertDeny()\n  fullName: CodeAccessPermission.RevertDeny()\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertPermitOnly()\n  nameWithType: CodeAccessPermission.RevertPermitOnly()\n  fullName: CodeAccessPermission.RevertPermitOnly()\n- uid: System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IPermission.Demand()\n  nameWithType: CodeAccessPermission.IPermission.Demand()\n  fullName: CodeAccessPermission.IPermission.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Assert()\n  nameWithType: CodeAccessPermission.IStackWalk.Assert()\n  fullName: CodeAccessPermission.IStackWalk.Assert()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Demand()\n  nameWithType: CodeAccessPermission.IStackWalk.Demand()\n  fullName: CodeAccessPermission.IStackWalk.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Deny()\n  nameWithType: CodeAccessPermission.IStackWalk.Deny()\n  fullName: CodeAccessPermission.IStackWalk.Deny()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.PermitOnly()\n  nameWithType: CodeAccessPermission.IStackWalk.PermitOnly()\n  fullName: CodeAccessPermission.IStackWalk.PermitOnly()\n- uid: System.Security.Permissions.IUnrestrictedPermission\n  parent: System.Security.Permissions\n  isExternal: false\n  name: IUnrestrictedPermission\n  nameWithType: IUnrestrictedPermission\n  fullName: System.Security.Permissions.IUnrestrictedPermission\n"}