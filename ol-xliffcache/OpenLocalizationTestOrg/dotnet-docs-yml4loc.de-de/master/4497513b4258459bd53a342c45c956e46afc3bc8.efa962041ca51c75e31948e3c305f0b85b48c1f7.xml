{"nodes":[{"content":"Defines a method that supports custom formatting of the value of an object.","nodes":[{"pos":[0,75],"content":"Defines a method that supports custom formatting of the value of an object.","nodes":[{"content":"Defines a method that supports custom formatting of the value of an object.","pos":[0,75]}]}],"pos":[453,529],"yaml":true},{"content":"The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName>. When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.  \n  \n Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter. Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> methods.  \n  \n Providing a custom representation of an object's value requires that you do the following:  \n  \n1.  Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.  \n  \n2.  Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method. The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation. Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>. In that case, the class's `GetFormat` implementation just returns an instance of itself.  \n  \n3.  Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method or a comparable method.  \n  \n The .NET Framework method will then use your custom formatting instead of its own.","nodes":[{"pos":[0,325],"content":"The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName>. When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.","nodes":[{"content":"The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName>. When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.","pos":[0,325],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> interface includes a single method, <ph id=\"ph2\">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=fullName&gt;</ph>.","pos":[0,137],"source":"The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName>."},{"content":"When this interface is implemented by a reference or value type, the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method returns a custom-formatted string representation of an object's value.","pos":[138,325],"source":" When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value."}]}]},{"pos":[332,990],"content":"Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter. Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> methods.","nodes":[{"content":"Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter. Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> methods.","pos":[0,658],"nodes":[{"content":"Typically, the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> interface is implemented with the <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <ph id=\"ph3\">&lt;xref:System.IFormatProvider&gt;</ph> parameter.","pos":[0,260],"source":"Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter."},{"content":"Specifically, the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> interface can provide custom formatting of the value of an object passed to the <ph id=\"ph2\">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> methods.","pos":[261,658],"source":" Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> methods."}]}]},{"pos":[997,1087],"content":"Providing a custom representation of an object's value requires that you do the following:","nodes":[{"content":"Providing a custom representation of an object's value requires that you do the following:","pos":[0,90]}]},{"pos":[1097,1248],"content":"Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.","nodes":[{"content":"Define a class that implements the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> interface and its single member, the <ph id=\"ph2\">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method.","pos":[0,151],"source":"Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method."}]},{"pos":[1258,1732],"content":"Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method. The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation. Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>. In that case, the class's `GetFormat` implementation just returns an instance of itself.","nodes":[{"content":"Define a class that implements the <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> interface and its single member, the <ph id=\"ph2\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method.","pos":[0,152],"source":"Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns an instance of your <ph id=\"ph2\">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.","pos":[153,281],"source":" The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation."},{"content":"Often, a single class implements both <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph>.","pos":[282,385],"source":" Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>."},{"content":"In that case, the class's <ph id=\"ph1\">`GetFormat`</ph> implementation just returns an instance of itself.","pos":[386,474],"source":" In that case, the class's `GetFormat` implementation just returns an instance of itself."}]},{"pos":[1742,1979],"content":"Pass the <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> implementation as the <ph id=\"ph2\">`provider`</ph> argument of the <ph id=\"ph3\">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> method or a comparable method.","source":"Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method or a comparable method."},{"pos":[1986,2068],"content":"The .NET Framework method will then use your custom formatting instead of its own.","nodes":[{"content":"The .NET Framework method will then use your custom formatting instead of its own.","pos":[0,82]}]}],"pos":[540,2623],"yaml":true,"extradata":"MT"},{"content":"Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.","nodes":[{"pos":[0,147],"content":"Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.","nodes":[{"content":"Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.","pos":[0,147]}]}],"pos":[6497,6645],"yaml":true},{"content":"<xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> is a callback method. It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>. The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md). For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> method is called three times.  \n  \n [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]\n [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  \n  \n The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.  \n  \n The `format` parameter contains a format string, which is the `formatString` component of a format item. If the format item has no `formatString` component, the value of `format` is `null`. If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.  \n  \n The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`. Typically, it is an instance of your <xref:System.ICustomFormatter> implementation. If `formatProvider` is `null`, ignore that parameter.  \n  \n Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support. If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface. If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> method of that interface. Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=fullName> method of the underlying object. The following code illustrates this pattern.  \n  \n [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]\n [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]","nodes":[{"pos":[0,693],"content":"<xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> is a callback method. It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>. The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md). For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> method is called three times.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=fullName&gt;</ph> is a callback method.","pos":[0,87],"source":"<xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> is a callback method."},{"content":"It is called by a method that supports custom formatting, such as <ph id=\"ph1\">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph>.","pos":[88,413],"source":" It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>."},{"content":"The implementation is called once for each format item in a <bpt id=\"p1\">[</bpt>composite format string<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept>.","pos":[414,552],"source":" The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md)."},{"content":"For example, in the following statement, the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=fullName&gt;</ph> method is called three times.","pos":[553,693],"source":" For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> method is called three times."}]},{"pos":[700,1005],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.ICustomFormatter.Class#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.ICustomFormatter.Class#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]\n [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]"},{"pos":[1012,1144],"content":"The <ph id=\"ph1\">`arg`</ph> parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.","source":"The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item."},{"pos":[1151,1467],"content":"The `format` parameter contains a format string, which is the `formatString` component of a format item. If the format item has no `formatString` component, the value of `format` is `null`. If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter contains a format string, which is the <ph id=\"ph2\">`formatString`</ph> component of a format item.","pos":[0,104],"source":"The `format` parameter contains a format string, which is the `formatString` component of a format item."},{"content":"If the format item has no <ph id=\"ph1\">`formatString`</ph> component, the value of <ph id=\"ph2\">`format`</ph> is <ph id=\"ph3\">`null`</ph>.","pos":[105,189],"source":" If the format item has no `formatString` component, the value of `format` is `null`."},{"content":"If <ph id=\"ph1\">`format`</ph> is <ph id=\"ph2\">`null`</ph>, depending on the type of <ph id=\"ph3\">`arg`</ph>, you may be able to use the default format specification of your choice.","pos":[190,316],"source":" If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice."}]},{"pos":[1474,1730],"content":"The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`. Typically, it is an instance of your <xref:System.ICustomFormatter> implementation. If `formatProvider` is `null`, ignore that parameter.","nodes":[{"content":"The <ph id=\"ph1\">`formatProvider`</ph> parameter is the <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting for <ph id=\"ph3\">`arg`</ph>.","pos":[0,118],"source":"The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`."},{"content":"Typically, it is an instance of your <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.","pos":[119,202],"source":" Typically, it is an instance of your <xref:System.ICustomFormatter> implementation."},{"content":"If <ph id=\"ph1\">`formatProvider`</ph> is <ph id=\"ph2\">`null`</ph>, ignore that parameter.","pos":[203,256],"source":" If `formatProvider` is `null`, ignore that parameter."}]},{"pos":[1737,2343],"content":"Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support. If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface. If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> method of that interface. Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=fullName> method of the underlying object. The following code illustrates this pattern.","nodes":[{"content":"Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support. If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface. If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> method of that interface. Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=fullName> method of the underlying object. The following code illustrates this pattern.","pos":[0,606],"nodes":[{"content":"Your implementation of the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method must include the following functionality so the .NET Framework can provide formatting you do not support.","pos":[0,180],"source":"Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support."},{"content":"If your format method does not support a format, determine whether the object being formatted implements the <ph id=\"ph1\">&lt;xref:System.IFormattable&gt;</ph> interface.","pos":[181,327],"source":" If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface."},{"content":"If it does, invoke the <ph id=\"ph1\">&lt;xref:System.IFormattable.ToString%2A?displayProperty=fullName&gt;</ph> method of that interface.","pos":[328,440],"source":" If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> method of that interface."},{"content":"Otherwise, invoke the default <ph id=\"ph1\">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph> method of the underlying object.","pos":[441,561],"source":" Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=fullName> method of the underlying object."},{"content":"The following code illustrates this pattern.","pos":[562,606]}]}]},{"pos":[2350,2655],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.ICustomFormatter.Class#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.ICustomFormatter.Class#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]\n [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]"}],"pos":[6656,9328],"yaml":true,"extradata":"MT"},{"content":"A format string containing formatting specifications.","nodes":[{"pos":[0,53],"content":"A format string containing formatting specifications.","nodes":[{"content":"A format string containing formatting specifications.","pos":[0,53]}]}],"pos":[11099,11153],"yaml":true},{"content":"An object to format.","nodes":[{"pos":[0,20],"content":"An object to format.","nodes":[{"content":"An object to format.","pos":[0,20]}]}],"pos":[11212,11233],"yaml":true},{"content":"An object that supplies format information about the current instance.","nodes":[{"pos":[0,70],"content":"An object that supplies format information about the current instance.","nodes":[{"content":"An object that supplies format information about the current instance.","pos":[0,70]}]}],"pos":[11312,11383],"yaml":true},{"content":"The string representation of the value of <code>arg</code>, formatted as specified by <code>format</code> and <code>formatProvider</code>.","nodes":[{"pos":[0,138],"content":"The string representation of the value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">arg</ph><ept id=\"p1\">&lt;/code&gt;</ept>, formatted as specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">format</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">formatProvider</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The string representation of the value of <code>arg</code>, formatted as specified by <code>format</code> and <code>formatProvider</code>."}],"pos":[11440,11579],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ICustomFormatter\n  commentId: T:System.ICustomFormatter\n  id: ICustomFormatter\n  children:\n  - System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\n  langs:\n  - csharp\n  name: ICustomFormatter\n  nameWithType: ICustomFormatter\n  fullName: System.ICustomFormatter\n  type: Interface\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Defines a method that supports custom formatting of the value of an object.\n  remarks: \"The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName>. When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.  \\n  \\n Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter. Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> methods.  \\n  \\n Providing a custom representation of an object's value requires that you do the following:  \\n  \\n1.  Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.  \\n  \\n2.  Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method. The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation. Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>. In that case, the class's `GetFormat` implementation just returns an instance of itself.  \\n  \\n3.  Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method or a comparable method.  \\n  \\n The .NET Framework method will then use your custom formatting instead of its own.\"\n  example:\n  - \"The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values. In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type. If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`. Its <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> implementation determines whether the format parameter is one of the three supported format strings (\\\"B\\\" for binary, \\\"O\\\" for octal, and \\\"H\\\" for hexadecimal) and formats the `arg` parameter appropriately. Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation, if one exists, or its parameterless `ToString` method, if one does not. If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]\\n [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  \\n  \\n `BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.  \\n  \\n [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]\\n [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public interface ICustomFormatter\n  implements: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/ICustomFormatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\n  commentId: M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\n  id: Format(System.String,System.Object,System.IFormatProvider)\n  parent: System.ICustomFormatter\n  langs:\n  - csharp\n  name: Format(String, Object, IFormatProvider)\n  nameWithType: ICustomFormatter.Format(String, Object, IFormatProvider)\n  fullName: ICustomFormatter.Format(String, Object, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.\n  remarks: \"<xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> is a callback method. It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>. The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md). For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> method is called three times.  \\n  \\n [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]\\n [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  \\n  \\n The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.  \\n  \\n The `format` parameter contains a format string, which is the `formatString` component of a format item. If the format item has no `formatString` component, the value of `format` is `null`. If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.  \\n  \\n The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`. Typically, it is an instance of your <xref:System.ICustomFormatter> implementation. If `formatProvider` is `null`, ignore that parameter.  \\n  \\n Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support. If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface. If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> method of that interface. Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=fullName> method of the underlying object. The following code illustrates this pattern.  \\n  \\n [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]\\n [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]\"\n  example:\n  - \"The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values. Its <xref:System.ICustomFormatter.Format%2A?displayProperty=fullName> implementation determines whether the format parameter is one of the three supported format strings (\\\"B\\\" for binary, \\\"O\\\" for octal, and \\\"H\\\" for hexadecimal) and formats the `arg` parameter appropriately. Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation, if one exists, or its parameterless `ToString` method, if one does not. If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]\\n [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  \\n  \\n `BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.  \\n  \\n [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]\\n [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]\"\n  syntax:\n    content: public string Format (string format, object arg, IFormatProvider formatProvider);\n    parameters:\n    - id: format\n      type: System.String\n      description: A format string containing formatting specifications.\n    - id: arg\n      type: System.Object\n      description: An object to format.\n    - id: formatProvider\n      type: System.IFormatProvider\n      description: An object that supplies format information about the current instance.\n    return:\n      type: System.String\n      description: The string representation of the value of <code>arg</code>, formatted as specified by <code>format</code> and <code>formatProvider</code>.\n  overload: System.ICustomFormatter.Format*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/ICustomFormatter.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)\n  parent: System.ICustomFormatter\n  isExternal: false\n  name: Format(String, Object, IFormatProvider)\n  nameWithType: ICustomFormatter.Format(String, Object, IFormatProvider)\n  fullName: ICustomFormatter.Format(String, Object, IFormatProvider)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.ICustomFormatter.Format*\n  parent: System.ICustomFormatter\n  isExternal: false\n  name: Format\n  nameWithType: ICustomFormatter.Format\n  fullName: ICustomFormatter.Format\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/ICustomFormatter.xml\n"}