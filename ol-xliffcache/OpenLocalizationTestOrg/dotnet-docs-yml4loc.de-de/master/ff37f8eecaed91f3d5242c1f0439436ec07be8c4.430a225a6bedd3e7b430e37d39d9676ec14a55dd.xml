{"nodes":[{"content":"Represents a particular manner of splitting an orderable data source into multiple partitions.","nodes":[{"pos":[0,94],"content":"Represents a particular manner of splitting an orderable data source into multiple partitions.","nodes":[{"content":"Represents a particular manner of splitting an orderable data source into multiple partitions.","pos":[0,94]}]}],"pos":[1220,1315],"yaml":true},{"content":"The implementation of the derived class is responsible for ordering the elements into key-value pairs in whatever manner is appropriate. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,282],"content":"The implementation of the derived class is responsible for ordering the elements into key-value pairs in whatever manner is appropriate. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"content":"The implementation of the derived class is responsible for ordering the elements into key-value pairs in whatever manner is appropriate.","pos":[0,136]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","pos":[137,282],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}]}],"pos":[1326,1609],"yaml":true,"extradata":"MT"},{"content":"Type of the elements in the collection.","nodes":[{"pos":[0,39],"content":"Type of the elements in the collection.","nodes":[{"content":"Type of the elements in the collection.","pos":[0,39]}]}],"pos":[2328,2368],"yaml":true},{"content":"Called from constructors in derived classes to initialize the <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> class with the specified constraints on the index keys.","nodes":[{"pos":[0,191],"content":"Called from constructors in derived classes to initialize the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"&gt;&lt;/xref&gt;</ph> class with the specified constraints on the index keys.","source":"Called from constructors in derived classes to initialize the <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> class with the specified constraints on the index keys."}],"pos":[4754,4946],"yaml":true},{"content":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,145],"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[4957,5103],"yaml":true,"extradata":"MT"},{"content":"Indicates whether the elements in each partition are yielded in the order of increasing keys.","nodes":[{"pos":[0,93],"content":"Indicates whether the elements in each partition are yielded in the order of increasing keys.","nodes":[{"content":"Indicates whether the elements in each partition are yielded in the order of increasing keys.","pos":[0,93]}]}],"pos":[5346,5440],"yaml":true},{"content":"Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.","nodes":[{"pos":[0,290],"content":"Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.","nodes":[{"content":"Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.","pos":[0,290],"nodes":[{"content":"Indicates whether elements in an earlier partition always come before elements in a later partition.","pos":[0,100]},{"content":"If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.","pos":[101,290]}]}]}],"pos":[5524,5815],"yaml":true},{"content":"Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.","nodes":[{"pos":[0,241],"content":"Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.","nodes":[{"content":"Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.","pos":[0,241],"nodes":[{"content":"Indicates whether keys are normalized.","pos":[0,38]},{"content":"If true, all order keys are distinct integers in the range [0 ..","pos":[39,103]},{"content":"numberOfElements-1].","pos":[104,124]},{"content":"If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.","pos":[125,241]}]}]}],"pos":[5886,6128],"yaml":true},{"content":"Creates an object that can partition the underlying collection into a variable number of partitions.","nodes":[{"pos":[0,100],"content":"Creates an object that can partition the underlying collection into a variable number of partitions.","nodes":[{"content":"Creates an object that can partition the underlying collection into a variable number of partitions.","pos":[0,100]}]}],"pos":[7818,7919],"yaml":true},{"content":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.  \n  \n The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> except that the returned set of partitions does not provide the keys for the elements.  \n  \n The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,254],"content":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.","nodes":[{"content":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.","pos":[0,254],"nodes":[{"content":"The returned object implements the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName&gt;</ph> interface.","pos":[0,120],"source":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> on the object creates another partition over the sequence.","pos":[121,254],"source":" Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence."}]}]},{"pos":[261,499],"content":"The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> except that the returned set of partitions does not provide the keys for the elements.","nodes":[{"content":"The default implementation provides the same behavior as <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A&gt;</ph> except that the returned set of partitions does not provide the keys for the elements.","pos":[0,238],"source":"The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> except that the returned set of partitions does not provide the keys for the elements."}]},{"pos":[506,732],"content":"The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A&gt;</ph> method is only supported if the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A&gt;</ph> property returns true.","pos":[0,226],"source":"The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true."}]},{"pos":[739,884],"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[7930,8823],"yaml":true,"extradata":"MT"},{"content":"An object that can create partitions over the underlying data source.","nodes":[{"pos":[0,69],"content":"An object that can create partitions over the underlying data source.","nodes":[{"content":"An object that can create partitions over the underlying data source.","pos":[0,69]}]}],"pos":[9045,9115],"yaml":true},{"content":"Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.","nodes":[{"pos":[0,99],"content":"Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.","nodes":[{"content":"Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.","pos":[0,99],"nodes":[{"content":"Dynamic partitioning is not supported by the base class.","pos":[0,56]},{"content":"It must be implemented in derived classes.","pos":[57,99]}]}]}],"pos":[9318,9418],"yaml":true},{"content":"Creates an object that can partition the underlying collection into a variable number of partitions.","nodes":[{"pos":[0,100],"content":"Creates an object that can partition the underlying collection into a variable number of partitions.","nodes":[{"content":"Creates an object that can partition the underlying collection into a variable number of partitions.","pos":[0,100]}]}],"pos":[11073,11174],"yaml":true},{"content":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.  \n  \n Each partition is represented as an enumerator over key-value pairs. The value in the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements.  \n  \n The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,254],"content":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.","nodes":[{"content":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.","pos":[0,254],"nodes":[{"content":"The returned object implements the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName&gt;</ph> interface.","pos":[0,120],"source":"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph> on the object creates another partition over the sequence.","pos":[121,254],"source":" Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence."}]}]},{"pos":[261,479],"content":"Each partition is represented as an enumerator over key-value pairs. The value in the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements.","nodes":[{"content":"Each partition is represented as an enumerator over key-value pairs. The value in the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements.","pos":[0,218],"nodes":[{"content":"Each partition is represented as an enumerator over key-value pairs.","pos":[0,68]},{"content":"The value in the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements.","pos":[69,218]}]}]},{"pos":[486,721],"content":"The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A&gt;</ph> method is only supported if the <ph id=\"ph2\">&lt;xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A&gt;</ph> property returns true.","pos":[0,235],"source":"The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true."}]},{"pos":[728,873],"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[11185,12067],"yaml":true,"extradata":"MT"},{"content":"An object that can create partitions over the underlying data source.","nodes":[{"pos":[0,69],"content":"An object that can create partitions over the underlying data source.","nodes":[{"content":"An object that can create partitions over the underlying data source.","pos":[0,69]}]}],"pos":[12397,12467],"yaml":true},{"content":"Dynamic partitioning is not supported by this partitioner.","nodes":[{"pos":[0,58],"content":"Dynamic partitioning is not supported by this partitioner.","nodes":[{"content":"Dynamic partitioning is not supported by this partitioner.","pos":[0,58]}]}],"pos":[12679,12738],"yaml":true},{"content":"Partitions the underlying collection into the specified number of orderable partitions.","nodes":[{"pos":[0,87],"content":"Partitions the underlying collection into the specified number of orderable partitions.","nodes":[{"content":"Partitions the underlying collection into the specified number of orderable partitions.","pos":[0,87]}]}],"pos":[14408,14496],"yaml":true},{"content":"Each partition is represented as an enumerator over key-value pairs.  \n  \n The value of the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements in the data source.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,68],"content":"Each partition is represented as an enumerator over key-value pairs.","nodes":[{"content":"Each partition is represented as an enumerator over key-value pairs.","pos":[0,68]}]},{"pos":[75,243],"content":"The value of the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements in the data source.","nodes":[{"content":"The value of the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements in the data source.","pos":[0,168]}]},{"pos":[250,395],"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[14507,14909],"yaml":true,"extradata":"MT"},{"content":"The number of partitions to create.","nodes":[{"pos":[0,35],"content":"The number of partitions to create.","nodes":[{"content":"The number of partitions to create.","pos":[0,35]}]}],"pos":[15206,15242],"yaml":true},{"content":"A list containing <code>partitionCount</code> enumerators.","nodes":[{"pos":[0,58],"content":"A list containing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">partitionCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> enumerators.","source":"A list containing <code>partitionCount</code> enumerators."}],"pos":[15421,15480],"yaml":true},{"content":"Partitions the underlying collection into the given number of ordered partitions.","nodes":[{"pos":[0,81],"content":"Partitions the underlying collection into the given number of ordered partitions.","nodes":[{"content":"Partitions the underlying collection into the given number of ordered partitions.","pos":[0,81]}]}],"pos":[17202,17284],"yaml":true},{"content":"The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> except that the returned set of partitions does not provide the keys for the elements.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,231],"content":"The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> except that the returned set of partitions does not provide the keys for the elements.","nodes":[{"content":"The default implementation provides the same behavior as <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A&gt;</ph> except that the returned set of partitions does not provide the keys for the elements.","pos":[0,231],"source":"The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> except that the returned set of partitions does not provide the keys for the elements."}]},{"pos":[238,383],"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[17295,17683],"yaml":true,"extradata":"MT"},{"content":"The number of partitions to create.","nodes":[{"pos":[0,35],"content":"The number of partitions to create.","nodes":[{"content":"The number of partitions to create.","pos":[0,35]}]}],"pos":[17925,17961],"yaml":true},{"content":"A list containing <code>partitionCount</code> enumerators.","nodes":[{"pos":[0,58],"content":"A list containing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">partitionCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> enumerators.","source":"A list containing <code>partitionCount</code> enumerators."}],"pos":[18086,18145],"yaml":true},{"content":"Gets whether order keys are normalized.","nodes":[{"pos":[0,39],"content":"Gets whether order keys are normalized.","nodes":[{"content":"Gets whether order keys are normalized.","pos":[0,39]}]}],"pos":[19803,19843],"yaml":true},{"content":"If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> returns true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If the property returns false, order keys must still be distinct, but only their relative order is considered, not their absolute values.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,311],"content":"If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> returns true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If the property returns false, order keys must still be distinct, but only their relative order is considered, not their absolute values.","nodes":[{"content":"If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> returns true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If the property returns false, order keys must still be distinct, but only their relative order is considered, not their absolute values.","pos":[0,311],"nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A&gt;</ph> returns true, all order keys are distinct integers in the range [0 ..","pos":[0,152],"source":"If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> returns true, all order keys are distinct integers in the range [0 .."},{"content":"numberOfElements-1].","pos":[153,173]},{"content":"If the property returns false, order keys must still be distinct, but only their relative order is considered, not their absolute values.","pos":[174,311]}]}]},{"pos":[318,463],"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[19854,20322],"yaml":true,"extradata":"MT"},{"content":"true if the keys are normalized; otherwise false.","nodes":[{"pos":[0,49],"content":"true if the keys are normalized; otherwise false.","nodes":[{"content":"true if the keys are normalized; otherwise false.","pos":[0,49]}]}],"pos":[20439,20489],"yaml":true},{"content":"Gets whether elements in an earlier partition always come before elements in a later partition.","nodes":[{"pos":[0,95],"content":"Gets whether elements in an earlier partition always come before elements in a later partition.","nodes":[{"content":"Gets whether elements in an earlier partition always come before elements in a later partition.","pos":[0,95]}]}],"pos":[22226,22322],"yaml":true},{"content":"If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> returns true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,290],"content":"If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> returns true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A&gt;</ph> returns true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.","pos":[0,290],"source":"If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> returns true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on."}]},{"pos":[297,442],"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[22333,22780],"yaml":true,"extradata":"MT"},{"content":"true if the elements in an earlier partition always come before elements in a later partition; otherwise false.","nodes":[{"pos":[0,111],"content":"true if the elements in an earlier partition always come before elements in a later partition; otherwise false.","nodes":[{"content":"true if the elements in an earlier partition always come before elements in a later partition; otherwise false.","pos":[0,111]}]}],"pos":[22910,23022],"yaml":true},{"content":"Gets whether elements in each partition are yielded in the order of increasing keys.","nodes":[{"pos":[0,84],"content":"Gets whether elements in each partition are yielded in the order of increasing keys.","nodes":[{"content":"Gets whether elements in each partition are yielded in the order of increasing keys.","pos":[0,84]}]}],"pos":[24766,24851],"yaml":true},{"content":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).","nodes":[{"pos":[0,145],"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept>.","source":"For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."}],"pos":[24862,25008],"yaml":true,"extradata":"MT"},{"content":"true if the elements in each partition are yielded in the order of increasing keys; otherwise false.","nodes":[{"pos":[0,100],"content":"true if the elements in each partition are yielded in the order of increasing keys; otherwise false.","nodes":[{"content":"true if the elements in each partition are yielded in the order of increasing keys; otherwise false.","pos":[0,100]}]}],"pos":[25137,25238],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent.OrderablePartitioner`1\n  commentId: T:System.Collections.Concurrent.OrderablePartitioner`1\n  id: OrderablePartitioner`1\n  children:\n  - System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  - System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions\n  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions\n  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)\n  - System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)\n  - System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\n  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions\n  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition\n  langs:\n  - csharp\n  name: OrderablePartitioner<TSource>\n  nameWithType: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n  type: Class\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Represents a particular manner of splitting an orderable data source into multiple partitions.\n  remarks: The implementation of the derived class is responsible for ordering the elements into key-value pairs in whatever manner is appropriate. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  example:\n  - \"The following example shows how to implement an orderable partitioner that returns one element at a time:  \\n  \\n [!code-csharp[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/cs/orderablepartitioner.cs#1)]\\n [!code-vb[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/vb/orderablepartitioner.vb#1)]\"\n  syntax:\n    content: 'public abstract class OrderablePartitioner<TSource> : System.Collections.Concurrent.Partitioner<TSource>'\n    typeParameters:\n    - id: TSource\n      description: Type of the elements in the collection.\n  inheritance:\n  - System.Object\n  - System.Collections.Concurrent.Partitioner`1\n  implements: []\n  inheritedMembers:\n  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)\n  nameWithType: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)\n  fullName: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Called from constructors in derived classes to initialize the <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> class with the specified constraints on the index keys.\n  remarks: For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: protected OrderablePartitioner (bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);\n    parameters:\n    - id: keysOrderedInEachPartition\n      type: System.Boolean\n      description: Indicates whether the elements in each partition are yielded in the order of increasing keys.\n    - id: keysOrderedAcrossPartitions\n      type: System.Boolean\n      description: Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.\n    - id: keysNormalized\n      type: System.Boolean\n      description: Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.\n  overload: System.Collections.Concurrent.OrderablePartitioner`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions\n  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions\n  id: GetDynamicPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: GetDynamicPartitions()\n  nameWithType: OrderablePartitioner<TSource>.GetDynamicPartitions()\n  fullName: OrderablePartitioner<TSource>.GetDynamicPartitions()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates an object that can partition the underlying collection into a variable number of partitions.\n  remarks: \"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.  \\n  \\n The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> except that the returned set of partitions does not provide the keys for the elements.  \\n  \\n The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.  \\n  \\n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\"\n  syntax:\n    content: public override System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An object that can create partitions over the underlying data source.\n  overload: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions\n  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions\n  id: GetOrderableDynamicPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: GetOrderableDynamicPartitions()\n  nameWithType: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()\n  fullName: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Creates an object that can partition the underlying collection into a variable number of partitions.\n  remarks: \"The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.  \\n  \\n Each partition is represented as an enumerator over key-value pairs. The value in the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements.  \\n  \\n The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.  \\n  \\n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\"\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<long,TSource>> GetOrderableDynamicPartitions ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}\n      description: An object that can create partitions over the underlying data source.\n  overload: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Dynamic partitioning is not supported by this partitioner.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)\n  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)\n  id: GetOrderablePartitions(System.Int32)\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: GetOrderablePartitions(Int32)\n  nameWithType: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)\n  fullName: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Partitions the underlying collection into the specified number of orderable partitions.\n  remarks: \"Each partition is represented as an enumerator over key-value pairs.  \\n  \\n The value of the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements in the data source.  \\n  \\n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\"\n  syntax:\n    content: public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<long,TSource>>> GetOrderablePartitions (int partitionCount);\n    parameters:\n    - id: partitionCount\n      type: System.Int32\n      description: The number of partitions to create.\n    return:\n      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}}\n      description: A list containing <code>partitionCount</code> enumerators.\n  overload: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)\n  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)\n  id: GetPartitions(System.Int32)\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: GetPartitions(Int32)\n  nameWithType: OrderablePartitioner<TSource>.GetPartitions(Int32)\n  fullName: OrderablePartitioner<TSource>.GetPartitions(Int32)\n  type: Method\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Partitions the underlying collection into the given number of ordered partitions.\n  remarks: \"The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> except that the returned set of partitions does not provide the keys for the elements.  \\n  \\n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\"\n  syntax:\n    content: public override System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions (int partitionCount);\n    parameters:\n    - id: partitionCount\n      type: System.Int32\n      description: The number of partitions to create.\n    return:\n      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}\n      description: A list containing <code>partitionCount</code> enumerators.\n  overload: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\n  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\n  id: KeysNormalized\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: KeysNormalized\n  nameWithType: OrderablePartitioner<TSource>.KeysNormalized\n  fullName: OrderablePartitioner<TSource>.KeysNormalized\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets whether order keys are normalized.\n  remarks: \"If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> returns true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If the property returns false, order keys must still be distinct, but only their relative order is considered, not their absolute values.  \\n  \\n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\"\n  syntax:\n    content: public bool KeysNormalized { get; }\n    return:\n      type: System.Boolean\n      description: true if the keys are normalized; otherwise false.\n  overload: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions\n  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions\n  id: KeysOrderedAcrossPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: KeysOrderedAcrossPartitions\n  nameWithType: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions\n  fullName: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets whether elements in an earlier partition always come before elements in a later partition.\n  remarks: \"If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> returns true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.  \\n  \\n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\"\n  syntax:\n    content: public bool KeysOrderedAcrossPartitions { get; }\n    return:\n      type: System.Boolean\n      description: true if the elements in an earlier partition always come before elements in a later partition; otherwise false.\n  overload: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition\n  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition\n  id: KeysOrderedInEachPartition\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  langs:\n  - csharp\n  name: KeysOrderedInEachPartition\n  nameWithType: OrderablePartitioner<TSource>.KeysOrderedInEachPartition\n  fullName: OrderablePartitioner<TSource>.KeysOrderedInEachPartition\n  type: Property\n  assemblies:\n  - System.Collections.Concurrent\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Concurrent\n  summary: Gets whether elements in each partition are yielded in the order of increasing keys.\n  remarks: For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).\n  syntax:\n    content: public bool KeysOrderedInEachPartition { get; }\n    return:\n      type: System.Boolean\n      description: true if the elements in each partition are yielded in the order of increasing keys; otherwise false.\n  overload: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Collections.Concurrent.Partitioner`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: Partitioner<TSource>\n  nameWithType: Partitioner<TSource>\n  fullName: System.Collections.Concurrent.Partitioner<TSource>\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)\n  nameWithType: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)\n  fullName: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetDynamicPartitions()\n  nameWithType: OrderablePartitioner<TSource>.GetDynamicPartitions()\n  fullName: OrderablePartitioner<TSource>.GetDynamicPartitions()\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: TSource\n  name: TSource\n  nameWithType: TSource\n  fullName: TSource\n- uid: System.Collections.Generic.IEnumerable{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSource>\n  nameWithType: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetOrderableDynamicPartitions()\n  nameWithType: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()\n  fullName: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()\n- uid: System.Collections.Generic.KeyValuePair`2\n  name: KeyValuePair<TKey,TValue>\n  nameWithType: KeyValuePair<TKey,TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>\n- uid: System.Int64\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<KeyValuePair<Int64,TSource>>\n  nameWithType: IEnumerable<KeyValuePair<Int64,TSource>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Int64,TSource>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetOrderablePartitions(Int32)\n  nameWithType: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)\n  fullName: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)\n- uid: System.Collections.Generic.IList`1\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<IEnumerator<KeyValuePair<Int64,TSource>>>\n  nameWithType: IList<IEnumerator<KeyValuePair<Int64,TSource>>>\n  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Int64,TSource>>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetPartitions(Int32)\n  nameWithType: OrderablePartitioner<TSource>.GetPartitions(Int32)\n  fullName: OrderablePartitioner<TSource>.GetPartitions(Int32)\n- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<IEnumerator<TSource>>\n  nameWithType: IList<IEnumerator<TSource>>\n  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: KeysNormalized\n  nameWithType: OrderablePartitioner<TSource>.KeysNormalized\n  fullName: OrderablePartitioner<TSource>.KeysNormalized\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: KeysOrderedAcrossPartitions\n  nameWithType: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions\n  fullName: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: KeysOrderedInEachPartition\n  nameWithType: OrderablePartitioner<TSource>.KeysOrderedInEachPartition\n  fullName: OrderablePartitioner<TSource>.KeysOrderedInEachPartition\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor*\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: OrderablePartitioner<TSource>\n  nameWithType: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>\n  fullName: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions*\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetDynamicPartitions\n  nameWithType: OrderablePartitioner<TSource>.GetDynamicPartitions\n  fullName: OrderablePartitioner<TSource>.GetDynamicPartitions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions*\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetOrderableDynamicPartitions\n  nameWithType: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions\n  fullName: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions*\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetOrderablePartitions\n  nameWithType: OrderablePartitioner<TSource>.GetOrderablePartitions\n  fullName: OrderablePartitioner<TSource>.GetOrderablePartitions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions*\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: GetPartitions\n  nameWithType: OrderablePartitioner<TSource>.GetPartitions\n  fullName: OrderablePartitioner<TSource>.GetPartitions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized*\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: KeysNormalized\n  nameWithType: OrderablePartitioner<TSource>.KeysNormalized\n  fullName: OrderablePartitioner<TSource>.KeysNormalized\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions*\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: KeysOrderedAcrossPartitions\n  nameWithType: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions\n  fullName: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition*\n  parent: System.Collections.Concurrent.OrderablePartitioner`1\n  isExternal: false\n  name: KeysOrderedInEachPartition\n  nameWithType: OrderablePartitioner<TSource>.KeysOrderedInEachPartition\n  fullName: OrderablePartitioner<TSource>.KeysOrderedInEachPartition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\n  parent: System.Collections.Concurrent.Partitioner`1\n  isExternal: false\n  name: SupportsDynamicPartitions\n  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions\n  fullName: Partitioner<TSource>.SupportsDynamicPartitions\n- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel<TSource>(Partitioner<TSource>)\n  nameWithType: ParallelEnumerable.AsParallel<TSource>(Partitioner<TSource>)\n  fullName: ParallelEnumerable.AsParallel<TSource>(Partitioner<TSource>)\n"}