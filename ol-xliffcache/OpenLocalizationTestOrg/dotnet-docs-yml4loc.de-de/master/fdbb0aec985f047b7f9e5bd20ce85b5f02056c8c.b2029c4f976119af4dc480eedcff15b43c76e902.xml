{"nodes":[{"content":"Provides a <xref href=\"System.IO.Stream\"></xref> for a file, supporting both synchronous and asynchronous read and write operations.","nodes":[{"pos":[0,132],"content":"Provides a <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream\"&gt;&lt;/xref&gt;</ph> for a file, supporting both synchronous and asynchronous read and write operations.","source":"Provides a <xref href=\"System.IO.Stream\"></xref> for a file, supporting both synchronous and asynchronous read and write operations."}],"pos":[3746,3879],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the <xref:System.IO.FileStream> class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output. You can use the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.Stream.CopyTo%2A>, and <xref:System.IO.FileStream.Flush%2A> methods to perform synchronous operations, or the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A> methods to perform asynchronous operations. Use the asynchronous methods to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. <xref:System.IO.FileStream> buffers input and output for better performance.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n The <xref:System.IO.FileStream.IsAsync%2A> property detects whether the file handle was opened asynchronously. You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter. When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method. When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.  \n  \n The <xref:System.IO.FileStream.Seek%2A> method supports random access to files. <xref:System.IO.FileStream.Seek%2A> allows the read/write position to be moved to any position within the file. This is done with byte offset reference point parameters. The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <xref:System.IO.SeekOrigin> enumeration.  \n  \n> [!NOTE]\n>  Disk files always support random access. At the time of construction, the <xref:System.IO.FileStream.CanSeek%2A> property value is set to `true` or `false` depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <xref:System.IO.FileStream.CanSeek%2A> property value is `true`. Otherwise, the <xref:System.IO.FileStream.CanSeek%2A> property value is `false`.  \n  \n If a process terminates with part of a file locked or closes a file that has outstanding locks, the behavior is undefined.  \n  \n For directory operations and other file operations, see the <xref:System.IO.File>, <xref:System.IO.Directory>, and <xref:System.IO.Path> classes. The <xref:System.IO.File> class is a utility class that has static methods primarily for the creation of <xref:System.IO.FileStream> objects based on file paths. The <xref:System.IO.MemoryStream> class creates a stream from a byte array and is similar to the <xref:System.IO.FileStream> class.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).  \n  \n## Detection of Stream Position Changes  \n When a <xref:System.IO.FileStream> object does not have an exclusive hold on its handle, another thread could access the file handle concurrently and change the position of the operating system's file pointer that is associated with the file handle. In this case, the cached position in the <xref:System.IO.FileStream> object and the cached data in the buffer could be compromised. The <xref:System.IO.FileStream> object routinely performs checks on methods that access the cached buffer to ensure that the operating system's handle position is the same as the cached position used by the <xref:System.IO.FileStream> object.  \n  \n If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Read%2A> method, the .NET Framework discards the contents of the buffer and reads the stream from the file again. This can affect performance, depending on the size of the file and any other processes that could affect the position of the file stream.  \n  \n If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Write%2A> method, the contents of the buffer are discarded and an <xref:System.IO.IOException> exception is thrown.  \n  \n A <xref:System.IO.FileStream> object will not have an exclusive hold on its handle when either the <xref:System.IO.FileStream.SafeFileHandle%2A> property is accessed to expose the handle or the <xref:System.IO.FileStream> object is given the <xref:System.IO.FileStream.SafeFileHandle%2A> property in its constructor.","nodes":[{"pos":[2,412],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,408],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3)</ept>.","pos":[1,171],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[172,400],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[419,1574],"content":"Use the <xref:System.IO.FileStream> class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output. You can use the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.Stream.CopyTo%2A>, and <xref:System.IO.FileStream.Flush%2A> methods to perform synchronous operations, or the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A> methods to perform asynchronous operations. Use the asynchronous methods to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. <xref:System.IO.FileStream> buffers input and output for better performance.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output.","pos":[0,222],"source":"Use the <xref:System.IO.FileStream> class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.FileStream.Write%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.CopyTo%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> methods to perform synchronous operations, or the <ph id=\"ph5\">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id=\"ph8\">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph> methods to perform asynchronous operations.","pos":[223,654],"source":" You can use the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.Stream.CopyTo%2A>, and <xref:System.IO.FileStream.Flush%2A> methods to perform synchronous operations, or the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A> methods to perform asynchronous operations."},{"content":"Use the asynchronous methods to perform resource-intensive file operations without blocking the main thread.","pos":[655,763]},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[764,1078],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> buffers input and output for better performance.","pos":[1079,1155],"source":" <xref:System.IO.FileStream> buffers input and output for better performance."}]},{"pos":[1582,2108],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[2115,2956],"content":"The <xref:System.IO.FileStream.IsAsync%2A> property detects whether the file handle was opened asynchronously. You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter. When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method. When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property detects whether the file handle was opened asynchronously.","pos":[0,110],"source":"The <xref:System.IO.FileStream.IsAsync%2A> property detects whether the file handle was opened asynchronously."},{"content":"You specify this value when you create an instance of the <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> class using a constructor that has an <ph id=\"ph2\">`isAsync`</ph>, <ph id=\"ph3\">`useAsync`</ph>, or <ph id=\"ph4\">`options`</ph> parameter.","pos":[111,281],"source":" You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter."},{"content":"When the property is <ph id=\"ph1\">`true`</ph>, the stream utilizes overlapped I/O to perform file operations asynchronously.","pos":[282,388],"source":" When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously."},{"content":"However, the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property does not have to be <ph id=\"ph2\">`true`</ph> to call the <ph id=\"ph3\">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method.","pos":[389,623],"source":" However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property is <ph id=\"ph2\">`false`</ph> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.","pos":[624,841],"source":" When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously."}]},{"pos":[2963,3438],"content":"The <xref:System.IO.FileStream.Seek%2A> method supports random access to files. <xref:System.IO.FileStream.Seek%2A> allows the read/write position to be moved to any position within the file. This is done with byte offset reference point parameters. The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <xref:System.IO.SeekOrigin> enumeration.","nodes":[{"content":"The <xref:System.IO.FileStream.Seek%2A> method supports random access to files. <xref:System.IO.FileStream.Seek%2A> allows the read/write position to be moved to any position within the file. This is done with byte offset reference point parameters. The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <xref:System.IO.SeekOrigin> enumeration.","pos":[0,475],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph> method supports random access to files.","pos":[0,79],"source":"The <xref:System.IO.FileStream.Seek%2A> method supports random access to files."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph> allows the read/write position to be moved to any position within the file.","pos":[80,191],"source":" <xref:System.IO.FileStream.Seek%2A> allows the read/write position to be moved to any position within the file."},{"content":"This is done with byte offset reference point parameters.","pos":[192,249]},{"content":"The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <ph id=\"ph1\">&lt;xref:System.IO.SeekOrigin&gt;</ph> enumeration.","pos":[250,475],"source":" The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <xref:System.IO.SeekOrigin> enumeration."}]}]},{"pos":[3446,3872],"content":"[!NOTE]\n Disk files always support random access. At the time of construction, the <xref:System.IO.FileStream.CanSeek%2A> property value is set to `true` or `false` depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <xref:System.IO.FileStream.CanSeek%2A> property value is `true`. Otherwise, the <xref:System.IO.FileStream.CanSeek%2A> property value is `false`.","leadings":["","> "],"nodes":[{"content":" Disk files always support random access. At the time of construction, the <xref:System.IO.FileStream.CanSeek%2A> property value is set to `true` or `false` depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <xref:System.IO.FileStream.CanSeek%2A> property value is `true`. Otherwise, the <xref:System.IO.FileStream.CanSeek%2A> property value is `false`.","pos":[8,424],"nodes":[{"content":"Disk files always support random access.","pos":[1,41]},{"content":"At the time of construction, the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property value is set to <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">`false`</ph> depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <ph id=\"ph4\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property value is <ph id=\"ph5\">`true`</ph>.","pos":[42,335],"source":" At the time of construction, the <xref:System.IO.FileStream.CanSeek%2A> property value is set to `true` or `false` depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <xref:System.IO.FileStream.CanSeek%2A> property value is `true`."},{"content":"Otherwise, the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property value is <ph id=\"ph2\">`false`</ph>.","pos":[336,416],"source":" Otherwise, the <xref:System.IO.FileStream.CanSeek%2A> property value is `false`."}]}]},{"pos":[3879,4001],"content":"If a process terminates with part of a file locked or closes a file that has outstanding locks, the behavior is undefined.","nodes":[{"content":"If a process terminates with part of a file locked or closes a file that has outstanding locks, the behavior is undefined.","pos":[0,122]}]},{"pos":[4008,4447],"content":"For directory operations and other file operations, see the <xref:System.IO.File>, <xref:System.IO.Directory>, and <xref:System.IO.Path> classes. The <xref:System.IO.File> class is a utility class that has static methods primarily for the creation of <xref:System.IO.FileStream> objects based on file paths. The <xref:System.IO.MemoryStream> class creates a stream from a byte array and is similar to the <xref:System.IO.FileStream> class.","nodes":[{"content":"For directory operations and other file operations, see the <xref:System.IO.File>, <xref:System.IO.Directory>, and <xref:System.IO.Path> classes. The <xref:System.IO.File> class is a utility class that has static methods primarily for the creation of <xref:System.IO.FileStream> objects based on file paths. The <xref:System.IO.MemoryStream> class creates a stream from a byte array and is similar to the <xref:System.IO.FileStream> class.","pos":[0,439],"nodes":[{"content":"For directory operations and other file operations, see the <ph id=\"ph1\">&lt;xref:System.IO.File&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.Directory&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.Path&gt;</ph> classes.","pos":[0,145],"source":"For directory operations and other file operations, see the <xref:System.IO.File>, <xref:System.IO.Directory>, and <xref:System.IO.Path> classes."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.File&gt;</ph> class is a utility class that has static methods primarily for the creation of <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> objects based on file paths.","pos":[146,307],"source":" The <xref:System.IO.File> class is a utility class that has static methods primarily for the creation of <xref:System.IO.FileStream> objects based on file paths."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> class creates a stream from a byte array and is similar to the <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> class.","pos":[308,439],"source":" The <xref:System.IO.MemoryStream> class creates a stream from a byte array and is similar to the <xref:System.IO.FileStream> class."}]}]},{"pos":[4454,4569],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."},{"pos":[4578,4614],"content":"Detection of Stream Position Changes","linkify":"Detection of Stream Position Changes","nodes":[{"content":"Detection of Stream Position Changes","pos":[0,36]}]},{"pos":[4618,5242],"content":"When a <xref:System.IO.FileStream> object does not have an exclusive hold on its handle, another thread could access the file handle concurrently and change the position of the operating system's file pointer that is associated with the file handle. In this case, the cached position in the <xref:System.IO.FileStream> object and the cached data in the buffer could be compromised. The <xref:System.IO.FileStream> object routinely performs checks on methods that access the cached buffer to ensure that the operating system's handle position is the same as the cached position used by the <xref:System.IO.FileStream> object.","nodes":[{"content":"When a <xref:System.IO.FileStream> object does not have an exclusive hold on its handle, another thread could access the file handle concurrently and change the position of the operating system's file pointer that is associated with the file handle. In this case, the cached position in the <xref:System.IO.FileStream> object and the cached data in the buffer could be compromised. The <xref:System.IO.FileStream> object routinely performs checks on methods that access the cached buffer to ensure that the operating system's handle position is the same as the cached position used by the <xref:System.IO.FileStream> object.","pos":[0,624],"nodes":[{"content":"When a <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> object does not have an exclusive hold on its handle, another thread could access the file handle concurrently and change the position of the operating system's file pointer that is associated with the file handle.","pos":[0,249],"source":"When a <xref:System.IO.FileStream> object does not have an exclusive hold on its handle, another thread could access the file handle concurrently and change the position of the operating system's file pointer that is associated with the file handle."},{"content":"In this case, the cached position in the <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> object and the cached data in the buffer could be compromised.","pos":[250,381],"source":" In this case, the cached position in the <xref:System.IO.FileStream> object and the cached data in the buffer could be compromised."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> object routinely performs checks on methods that access the cached buffer to ensure that the operating system's handle position is the same as the cached position used by the <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> object.","pos":[382,624],"source":" The <xref:System.IO.FileStream> object routinely performs checks on methods that access the cached buffer to ensure that the operating system's handle position is the same as the cached position used by the <xref:System.IO.FileStream> object."}]}]},{"pos":[5249,5603],"content":"If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Read%2A> method, the .NET Framework discards the contents of the buffer and reads the stream from the file again. This can affect performance, depending on the size of the file and any other processes that could affect the position of the file stream.","nodes":[{"content":"If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Read%2A> method, the .NET Framework discards the contents of the buffer and reads the stream from the file again. This can affect performance, depending on the size of the file and any other processes that could affect the position of the file stream.","pos":[0,354],"nodes":[{"content":"If an unexpected change in the handle position is detected in a call to the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph> method, the .NET Framework discards the contents of the buffer and reads the stream from the file again.","pos":[0,216],"source":"If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Read%2A> method, the .NET Framework discards the contents of the buffer and reads the stream from the file again."},{"content":"This can affect performance, depending on the size of the file and any other processes that could affect the position of the file stream.","pos":[217,354]}]}]},{"pos":[5610,5828],"content":"If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Write%2A> method, the contents of the buffer are discarded and an <xref:System.IO.IOException> exception is thrown.","nodes":[{"content":"If an unexpected change in the handle position is detected in a call to the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Write%2A&gt;</ph> method, the contents of the buffer are discarded and an <ph id=\"ph2\">&lt;xref:System.IO.IOException&gt;</ph> exception is thrown.","pos":[0,218],"source":"If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Write%2A> method, the contents of the buffer are discarded and an <xref:System.IO.IOException> exception is thrown."}]},{"pos":[5835,6151],"content":"A <xref:System.IO.FileStream> object will not have an exclusive hold on its handle when either the <xref:System.IO.FileStream.SafeFileHandle%2A> property is accessed to expose the handle or the <xref:System.IO.FileStream> object is given the <xref:System.IO.FileStream.SafeFileHandle%2A> property in its constructor.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> object will not have an exclusive hold on its handle when either the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph> property is accessed to expose the handle or the <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> object is given the <ph id=\"ph4\">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph> property in its constructor.","pos":[0,316],"source":"A <xref:System.IO.FileStream> object will not have an exclusive hold on its handle when either the <xref:System.IO.FileStream.SafeFileHandle%2A> property is accessed to expose the handle or the <xref:System.IO.FileStream> object is given the <xref:System.IO.FileStream.SafeFileHandle%2A> property in its constructor."}]}],"pos":[3890,10074],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission.","nodes":[{"pos":[0,154],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class for the specified file handle, with the specified read/write permission.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission."}],"pos":[14302,14457],"yaml":true},{"content":"When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented.  \n  \n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,118],"content":"When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> is called, the handle is also closed and the file's handle count is decremented.","pos":[0,118],"source":"When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented."}]},{"pos":[125,470],"content":"`FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.","nodes":[{"content":"<ph id=\"ph1\">`FileStream`</ph> assumes that it has exclusive control over the handle.","pos":[0,67],"source":"`FileStream` assumes that it has exclusive control over the handle."},{"content":"Reading, writing, or seeking while a <ph id=\"ph1\">`FileStream`</ph> is also holding a handle could result in data corruption.","pos":[68,175],"source":" Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption."},{"content":"For data safety, call <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id=\"ph2\">`Close`</ph> after you are done using the handle.","pos":[176,345],"source":" For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle."}]},{"pos":[478,719],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[726,841],"content":"<ph id=\"ph1\">`FileShare.Read`</ph> is the default for those <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id=\"ph3\">`FileShare`</ph> parameter.","source":"`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter."},{"pos":[848,963],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[14468,15443],"yaml":true,"extradata":"MT"},{"content":"A file handle for the file that the current `FileStream` object will encapsulate.","nodes":[{"pos":[0,81],"content":"A file handle for the file that the current <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A file handle for the file that the current `FileStream` object will encapsulate."}],"pos":[15673,15755],"yaml":true},{"content":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.","nodes":[{"pos":[0,168],"content":"A constant that sets the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","source":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."}],"pos":[15824,15993],"yaml":true},{"content":"<code>access</code> is not a field of <xref href=\"System.IO.FileAccess\"></xref>.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;access&lt;/code&gt;</ph> is not a field of <ph id=\"ph2\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph>.","source":"<code>access</code> is not a field of <xref href=\"System.IO.FileAccess\"></xref>."}],"pos":[16141,16222],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[16334,16384],"yaml":true},{"content":"An I/O error, such as a disk error, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,45],"content":"An I/O error, such as a disk error, occurred.","nodes":[{"content":"An I/O error, such as a disk error, occurred.","pos":[0,45]}]},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,90],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[16472,16569],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.","nodes":[{"pos":[0,213],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">access</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`Write`</ph> or <ph id=\"ph4\">`ReadWrite`</ph> and the file handle is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access."}],"pos":[16683,16897],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.","nodes":[{"pos":[0,236],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security."}],"pos":[18888,19125],"yaml":true},{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file. To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.  \n  \n The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,137],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[144,426],"content":"Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file. To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.","nodes":[{"content":"Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file. To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.","pos":[0,282],"nodes":[{"content":"Use this <ph id=\"ph1\">&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</ph> constructor to apply access rights at the point of creation of a file.","pos":[0,118],"source":"Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file."},{"content":"To access or modify rights on an existing file, consider using the <ph id=\"ph1\">&lt;xref:System.IO.File.GetAccessControl%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.File.SetAccessControl%2A&gt;</ph> methods.","pos":[119,282],"source":" To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods."}]}]},{"pos":[433,588],"content":"The <ph id=\"ph1\">`fileOptions`</ph> parameter is used to provide access to more advanced operations that can be leveraged when creating a <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> object.","source":"The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object."},{"pos":[595,698],"content":"The <ph id=\"ph1\">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.","source":"The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share."},{"pos":[706,916],"content":"[!NOTE]\n `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","leadings":["","> "],"nodes":[{"content":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","pos":[8,208],"nodes":[{"content":"<ph id=\"ph1\"> `path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.","pos":[0,121],"source":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams."},{"content":"For example, depending on the system, this class can access a physical device.","pos":[122,200]}]}]},{"pos":[923,1272],"content":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> for all <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.","pos":[0,112],"source":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files."},{"content":"If <ph id=\"ph1\">`path`</ph> indicates a device that does not support seeking, the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[113,281],"source":" If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.","pos":[282,349],"source":" For additional information, see <xref:System.IO.Stream.CanSeek%2A>."}]},{"pos":[1280,1521],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1528,1643],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[19136,20805],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the file that the current <xref href=\"System.IO.FileStream\"></xref> object will encapsulate.","nodes":[{"pos":[0,124],"content":"A relative or absolute path for the file that the current <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> object will encapsulate.","source":"A relative or absolute path for the file that the current <xref href=\"System.IO.FileStream\"></xref> object will encapsulate."}],"pos":[21639,21764],"yaml":true},{"content":"A constant that determines how to open or create the file.","nodes":[{"pos":[0,58],"content":"A constant that determines how to open or create the file.","nodes":[{"content":"A constant that determines how to open or create the file.","pos":[0,58]}]}],"pos":[21829,21888],"yaml":true},{"content":"A constant that determines the access rights to use when creating access and audit rules for the file.","nodes":[{"pos":[0,102],"content":"A constant that determines the access rights to use when creating access and audit rules for the file.","nodes":[{"content":"A constant that determines the access rights to use when creating access and audit rules for the file.","pos":[0,102]}]}],"pos":[21983,22086],"yaml":true},{"content":"A constant that determines how the file will be shared by processes.","nodes":[{"pos":[0,68],"content":"A constant that determines how the file will be shared by processes.","nodes":[{"content":"A constant that determines how the file will be shared by processes.","pos":[0,68]}]}],"pos":[22153,22222],"yaml":true},{"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"pos":[0,126],"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"content":"A positive <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value greater than 0 indicating the buffer size.","pos":[0,93],"source":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size."},{"content":"The default buffer size is 4096.","pos":[94,126]}]}],"pos":[22287,22414],"yaml":true},{"content":"A constant that specifies additional file options.","nodes":[{"pos":[0,50],"content":"A constant that specifies additional file options.","nodes":[{"content":"A constant that specifies additional file options.","pos":[0,50]}]}],"pos":[22485,22536],"yaml":true},{"content":"A constant that determines the access control and audit security for the file.","nodes":[{"pos":[0,78],"content":"A constant that determines the access control and audit security for the file.","nodes":[{"content":"A constant that determines the access control and audit security for the file.","pos":[0,78]}]}],"pos":[22633,22712],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[22868,22897],"yaml":true},{"content":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.  \n  \n -or-  \n  \n <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","nodes":[{"pos":[0,113],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.","source":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,240],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment."}],"pos":[22991,23246],"yaml":true},{"content":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment."}],"pos":[23348,23461],"yaml":true},{"content":"<code>bufferSize</code> is negative or zero.  \n  \n -or-  \n  \n <code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.","source":"<code>bufferSize</code> is negative or zero."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,149],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;access&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;share&lt;/code&gt;</ph> contain an invalid value.","source":"<code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value."}],"pos":[23575,23731],"yaml":true},{"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"pos":[0,203],"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"content":"The file cannot be found, such as when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`FileMode.Truncate`</ph> or <ph id=\"ph3\">`FileMode.Open`</ph>, and the file specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not exist.","pos":[0,159],"source":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist."},{"content":"The file must already exist in these modes.","pos":[160,203]}]}],"pos":[23839,24043],"yaml":true},{"content":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,124],"content":"An I/O error, such as specifying <ph id=\"ph1\">`FileMode.CreateNew`</ph> when the file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> already exists, occurred.","source":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred."},{"pos":[131,135],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[142,169],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[24131,24307],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[24419,24469],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[24587,24654],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.  \n  \n -or-  \n  \n <xref href=\"System.IO.FileOptions.Encrypted\"></xref> is specified for <code>options</code>, but file encryption is not supported on the current platform.","nodes":[{"pos":[0,225],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept>, such as when <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">access</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`Write`</ph> or <ph id=\"ph5\">`ReadWrite`</ph> and the file or directory is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access."},{"pos":[232,236],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[243,396],"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileOptions.Encrypted\"&gt;&lt;/xref&gt;</ph> is specified for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept>, but file encryption is not supported on the current platform.","source":"<xref href=\"System.IO.FileOptions.Encrypted\"></xref> is specified for <code>options</code>, but file encryption is not supported on the current platform."}],"pos":[24768,25173],"yaml":true},{"content":"The specified <code>path</code>, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,223],"content":"The specified <code>path</code>, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>, file name, or both exceed the system-defined maximum length.","pos":[0,93],"source":"The specified <code>path</code>, file name, or both exceed the system-defined maximum length."},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[94,223]}]}],"pos":[25279,25503],"yaml":true},{"content":"The current operating system is not Windows NT or later.","nodes":[{"pos":[0,56],"content":"The current operating system is not Windows NT or later.","nodes":[{"content":"The current operating system is not Windows NT or later.","pos":[0,56]}]}],"pos":[25621,25678],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options.","nodes":[{"pos":[0,205],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options."}],"pos":[27242,27448],"yaml":true},{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file. To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.  \n  \n The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,137],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[144,426],"content":"Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file. To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.","nodes":[{"content":"Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file. To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.","pos":[0,282],"nodes":[{"content":"Use this <ph id=\"ph1\">&lt;xref:System.IO.FileStream.%23ctor%2A&gt;</ph> constructor to apply access rights at the point of creation of a file.","pos":[0,118],"source":"Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file."},{"content":"To access or modify rights on an existing file, consider using the <ph id=\"ph1\">&lt;xref:System.IO.File.GetAccessControl%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.File.SetAccessControl%2A&gt;</ph> methods.","pos":[119,282],"source":" To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods."}]}]},{"pos":[433,588],"content":"The <ph id=\"ph1\">`fileOptions`</ph> parameter is used to provide access to more advanced operations that can be leveraged when creating a <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> object.","source":"The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object."},{"pos":[595,698],"content":"The <ph id=\"ph1\">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.","source":"The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share."},{"pos":[706,916],"content":"[!NOTE]\n `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","leadings":["","> "],"nodes":[{"content":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","pos":[8,208],"nodes":[{"content":"<ph id=\"ph1\"> `path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.","pos":[0,121],"source":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams."},{"content":"For example, depending on the system, this class can access a physical device.","pos":[122,200]}]}]},{"pos":[923,1272],"content":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> for all <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.","pos":[0,112],"source":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files."},{"content":"If <ph id=\"ph1\">`path`</ph> indicates a device that does not support seeking, the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[113,281],"source":" If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.","pos":[282,349],"source":" For additional information, see <xref:System.IO.Stream.CanSeek%2A>."}]},{"pos":[1280,1521],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1528,1643],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[27459,29128],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the file that the current <xref href=\"System.IO.FileStream\"></xref> object will encapsulate.","nodes":[{"pos":[0,124],"content":"A relative or absolute path for the file that the current <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> object will encapsulate.","source":"A relative or absolute path for the file that the current <xref href=\"System.IO.FileStream\"></xref> object will encapsulate."}],"pos":[29414,29539],"yaml":true},{"content":"A constant that determines how to open or create the file.","nodes":[{"pos":[0,58],"content":"A constant that determines how to open or create the file.","nodes":[{"content":"A constant that determines how to open or create the file.","pos":[0,58]}]}],"pos":[29604,29663],"yaml":true},{"content":"A constant that determines the access rights to use when creating access and audit rules for the file.","nodes":[{"pos":[0,102],"content":"A constant that determines the access rights to use when creating access and audit rules for the file.","nodes":[{"content":"A constant that determines the access rights to use when creating access and audit rules for the file.","pos":[0,102]}]}],"pos":[29758,29861],"yaml":true},{"content":"A constant that determines how the file will be shared by processes.","nodes":[{"pos":[0,68],"content":"A constant that determines how the file will be shared by processes.","nodes":[{"content":"A constant that determines how the file will be shared by processes.","pos":[0,68]}]}],"pos":[29928,29997],"yaml":true},{"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"pos":[0,126],"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"content":"A positive <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value greater than 0 indicating the buffer size.","pos":[0,93],"source":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size."},{"content":"The default buffer size is 4096.","pos":[94,126]}]}],"pos":[30062,30189],"yaml":true},{"content":"A constant that specifies additional file options.","nodes":[{"pos":[0,50],"content":"A constant that specifies additional file options.","nodes":[{"content":"A constant that specifies additional file options.","pos":[0,50]}]}],"pos":[30260,30311],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[30467,30496],"yaml":true},{"content":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.  \n  \n -or-  \n  \n <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","nodes":[{"pos":[0,113],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.","source":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,240],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment."}],"pos":[30590,30845],"yaml":true},{"content":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment."}],"pos":[30947,31060],"yaml":true},{"content":"<code>bufferSize</code> is negative or zero.  \n  \n -or-  \n  \n <code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.","source":"<code>bufferSize</code> is negative or zero."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,149],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;access&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;share&lt;/code&gt;</ph> contain an invalid value.","source":"<code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value."}],"pos":[31174,31330],"yaml":true},{"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"pos":[0,203],"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"content":"The file cannot be found, such as when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`FileMode.Truncate`</ph> or <ph id=\"ph3\">`FileMode.Open`</ph>, and the file specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not exist.","pos":[0,159],"source":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist."},{"content":"The file must already exist in these modes.","pos":[160,203]}]}],"pos":[31438,31642],"yaml":true},{"content":"The current operating system is not Windows NT or later.","nodes":[{"pos":[0,56],"content":"The current operating system is not Windows NT or later.","nodes":[{"content":"The current operating system is not Windows NT or later.","pos":[0,56]}]}],"pos":[31760,31817],"yaml":true},{"content":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,124],"content":"An I/O error, such as specifying <ph id=\"ph1\">`FileMode.CreateNew`</ph> when the file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> already exists, occurred.","source":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred."},{"pos":[131,135],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[142,169],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[31905,32081],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[32193,32243],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[32361,32428],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.  \n  \n -or-  \n  \n <xref href=\"System.IO.FileOptions.Encrypted\"></xref> is specified for <code>options</code>, but file encryption is not supported on the current platform.","nodes":[{"pos":[0,225],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept>, such as when <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">access</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`Write`</ph> or <ph id=\"ph5\">`ReadWrite`</ph> and the file or directory is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access."},{"pos":[232,236],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[243,396],"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileOptions.Encrypted\"&gt;&lt;/xref&gt;</ph> is specified for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept>, but file encryption is not supported on the current platform.","source":"<xref href=\"System.IO.FileOptions.Encrypted\"></xref> is specified for <code>options</code>, but file encryption is not supported on the current platform."}],"pos":[32542,32947],"yaml":true},{"content":"The specified <code>path</code>, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,223],"content":"The specified <code>path</code>, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept>, file name, or both exceed the system-defined maximum length.","pos":[0,93],"source":"The specified <code>path</code>, file name, or both exceed the system-defined maximum length."},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[94,223]}]}],"pos":[33053,33277],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.","nodes":[{"pos":[0,258],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options."}],"pos":[34805,35064],"yaml":true},{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,137],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[144,299],"content":"The <ph id=\"ph1\">`fileOptions`</ph> parameter is used to provide access to more advanced operations that can be leveraged when creating a <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> object.","source":"The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object."},{"pos":[306,409],"content":"The <ph id=\"ph1\">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.","source":"The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share."},{"pos":[417,627],"content":"[!NOTE]\n `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","leadings":["","> "],"nodes":[{"content":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","pos":[8,208],"nodes":[{"content":"<ph id=\"ph1\"> `path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.","pos":[0,121],"source":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams."},{"content":"For example, depending on the system, this class can access a physical device.","pos":[122,200]}]}]},{"pos":[634,983],"content":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> for all <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.","pos":[0,112],"source":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files."},{"content":"If <ph id=\"ph1\">`path`</ph> indicates a device that does not support seeking, the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[113,281],"source":" If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.","pos":[282,349],"source":" For additional information, see <xref:System.IO.Stream.CanSeek%2A>."}]},{"pos":[991,1232],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1239,1354],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[35075,36453],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the file that the current `FileStream` object will encapsulate.","nodes":[{"pos":[0,95],"content":"A relative or absolute path for the file that the current <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A relative or absolute path for the file that the current `FileStream` object will encapsulate."}],"pos":[37204,37300],"yaml":true},{"content":"A constant that determines how to open or create the file.","nodes":[{"pos":[0,58],"content":"A constant that determines how to open or create the file.","nodes":[{"content":"A constant that determines how to open or create the file.","pos":[0,58]}]}],"pos":[37365,37424],"yaml":true},{"content":"A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.","nodes":[{"pos":[0,379],"content":"A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.","nodes":[{"content":"A constant that determines how the file can be accessed by the <ph id=\"ph1\">`FileStream`</ph> object.","pos":[0,83],"source":"A constant that determines how the file can be accessed by the `FileStream` object."},{"content":"This also determines the values returned by the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","pos":[84,275],"source":" This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanSeek\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> specifies a disk file.","pos":[276,379],"source":"<xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file."}]}],"pos":[37493,37873],"yaml":true},{"content":"A constant that determines how the file will be shared by processes.","nodes":[{"pos":[0,68],"content":"A constant that determines how the file will be shared by processes.","nodes":[{"content":"A constant that determines how the file will be shared by processes.","pos":[0,68]}]}],"pos":[37940,38009],"yaml":true},{"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"pos":[0,126],"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"content":"A positive <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value greater than 0 indicating the buffer size.","pos":[0,93],"source":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size."},{"content":"The default buffer size is 4096.","pos":[94,126]}]}],"pos":[38074,38201],"yaml":true},{"content":"A value that specifies additional file options.","nodes":[{"pos":[0,47],"content":"A value that specifies additional file options.","nodes":[{"content":"A value that specifies additional file options.","pos":[0,47]}]}],"pos":[38272,38320],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[38476,38505],"yaml":true},{"content":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.  \n  \n -or-  \n  \n <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","nodes":[{"pos":[0,113],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.","source":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,240],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment."}],"pos":[38599,38854],"yaml":true},{"content":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment."}],"pos":[38956,39069],"yaml":true},{"content":"<code>bufferSize</code> is negative or zero.  \n  \n -or-  \n  \n <code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.","source":"<code>bufferSize</code> is negative or zero."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,149],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;access&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;share&lt;/code&gt;</ph> contain an invalid value.","source":"<code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value."}],"pos":[39183,39339],"yaml":true},{"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"pos":[0,203],"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"content":"The file cannot be found, such as when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`FileMode.Truncate`</ph> or <ph id=\"ph3\">`FileMode.Open`</ph>, and the file specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not exist.","pos":[0,159],"source":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist."},{"content":"The file must already exist in these modes.","pos":[160,203]}]}],"pos":[39447,39651],"yaml":true},{"content":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,124],"content":"An I/O error, such as specifying <ph id=\"ph1\">`FileMode.CreateNew`</ph> when the file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> already exists, occurred.","source":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred."},{"pos":[131,135],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[142,169],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[39739,39915],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[40027,40077],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[40195,40262],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.  \n  \n -or-  \n  \n <xref href=\"System.IO.FileOptions.Encrypted\"></xref> is specified for <code>options</code>, but file encryption is not supported on the current platform.","nodes":[{"pos":[0,225],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept>, such as when <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">access</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`Write`</ph> or <ph id=\"ph5\">`ReadWrite`</ph> and the file or directory is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access."},{"pos":[232,236],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[243,396],"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileOptions.Encrypted\"&gt;&lt;/xref&gt;</ph> is specified for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept>, but file encryption is not supported on the current platform.","source":"<xref href=\"System.IO.FileOptions.Encrypted\"></xref> is specified for <code>options</code>, but file encryption is not supported on the current platform."}],"pos":[40376,40781],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,210],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]}],"pos":[40887,41098],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.","nodes":[{"pos":[0,208],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state."}],"pos":[42849,43058],"yaml":true},{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,137],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[144,247],"content":"The <ph id=\"ph1\">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.","source":"The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share."},{"pos":[255,465],"content":"[!NOTE]\n `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","leadings":["","> "],"nodes":[{"content":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","pos":[8,208],"nodes":[{"content":"<ph id=\"ph1\"> `path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.","pos":[0,121],"source":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams."},{"content":"For example, depending on the system, this class can access a physical device.","pos":[122,200]}]}]},{"pos":[472,821],"content":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> for all <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.","pos":[0,112],"source":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files."},{"content":"If <ph id=\"ph1\">`path`</ph> indicates a device that does not support seeking, the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[113,281],"source":" If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.","pos":[282,349],"source":" For additional information, see <xref:System.IO.Stream.CanSeek%2A>."}]},{"pos":[829,1070],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1077,1192],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[43069,44283],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the file that the current `FileStream` object will encapsulate.","nodes":[{"pos":[0,95],"content":"A relative or absolute path for the file that the current <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A relative or absolute path for the file that the current `FileStream` object will encapsulate."}],"pos":[45189,45285],"yaml":true},{"content":"A constant that determines how to open or create the file.","nodes":[{"pos":[0,58],"content":"A constant that determines how to open or create the file.","nodes":[{"content":"A constant that determines how to open or create the file.","pos":[0,58]}]}],"pos":[45350,45409],"yaml":true},{"content":"A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.","nodes":[{"pos":[0,379],"content":"A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.","nodes":[{"content":"A constant that determines how the file can be accessed by the <ph id=\"ph1\">`FileStream`</ph> object.","pos":[0,83],"source":"A constant that determines how the file can be accessed by the `FileStream` object."},{"content":"This also determines the values returned by the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","pos":[84,275],"source":" This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanSeek\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> specifies a disk file.","pos":[276,379],"source":"<xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file."}]}],"pos":[45478,45858],"yaml":true},{"content":"A constant that determines how the file will be shared by processes.","nodes":[{"pos":[0,68],"content":"A constant that determines how the file will be shared by processes.","nodes":[{"content":"A constant that determines how the file will be shared by processes.","pos":[0,68]}]}],"pos":[45925,45994],"yaml":true},{"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096..","nodes":[{"pos":[0,127],"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096..","nodes":[{"content":"A positive <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value greater than 0 indicating the buffer size.","pos":[0,93],"source":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size."},{"content":"The default buffer size is 4096..","pos":[94,127]}]}],"pos":[46059,46187],"yaml":true},{"content":"Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying `true`, the handle might be opened synchronously depending on the platform. When opened asynchronously, the <xref href=\"System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> and <xref href=\"System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the <code>useAsync</code> parameter to `true`. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.","nodes":[{"pos":[0,977],"content":"Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying `true`, the handle might be opened synchronously depending on the platform. When opened asynchronously, the <xref href=\"System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> and <xref href=\"System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the <code>useAsync</code> parameter to `true`. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.","nodes":[{"content":"Specifies whether to use asynchronous I/O or synchronous I/O.","pos":[0,61]},{"content":"However, note that the underlying operating system might not support asynchronous I/O, so when specifying <ph id=\"ph1\">`true`</ph>, the handle might be opened synchronously depending on the platform.","pos":[62,243],"source":" However, note that the underlying operating system might not support asynchronous I/O, so when specifying `true`, the handle might be opened synchronously depending on the platform."},{"content":"When opened asynchronously, the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> methods perform better on large reads or writes, but they might be much slower for small reads or writes.","pos":[244,642],"source":" When opened asynchronously, the <xref href=\"System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> and <xref href=\"System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> methods perform better on large reads or writes, but they might be much slower for small reads or writes."},{"content":"If the application is designed to take advantage of asynchronous I/O, set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">useAsync</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to <ph id=\"ph2\">`true`</ph>.","pos":[643,763],"source":" If the application is designed to take advantage of asynchronous I/O, set the <code>useAsync</code> parameter to `true`."},{"content":"Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.","pos":[764,977]}]}],"pos":[46252,47230],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[47386,47415],"yaml":true},{"content":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.  \n  \n -or-  \n  \n <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","nodes":[{"pos":[0,113],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.","source":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,240],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment."}],"pos":[47509,47764],"yaml":true},{"content":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment."}],"pos":[47866,47979],"yaml":true},{"content":"<code>bufferSize</code> is negative or zero.  \n  \n -or-  \n  \n <code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.","source":"<code>bufferSize</code> is negative or zero."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,149],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;access&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;share&lt;/code&gt;</ph> contain an invalid value.","source":"<code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value."}],"pos":[48093,48249],"yaml":true},{"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"pos":[0,203],"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"content":"The file cannot be found, such as when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`FileMode.Truncate`</ph> or <ph id=\"ph3\">`FileMode.Open`</ph>, and the file specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not exist.","pos":[0,159],"source":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist."},{"content":"The file must already exist in these modes.","pos":[160,203]}]}],"pos":[48357,48561],"yaml":true},{"content":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \n  \n -or-  \n  \n The system is running Windows 98 or Windows 98 Second Edition and <code>share</code> is set to `FileShare.Delete`.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,124],"content":"An I/O error, such as specifying <ph id=\"ph1\">`FileMode.CreateNew`</ph> when the file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> already exists, occurred.","source":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred."},{"pos":[131,135],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[142,256],"content":"The system is running Windows 98 or Windows 98 Second Edition and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">share</ph><ept id=\"p1\">&lt;/code&gt;</ept> is set to <ph id=\"ph2\">`FileShare.Delete`</ph>.","source":"The system is running Windows 98 or Windows 98 Second Edition and <code>share</code> is set to `FileShare.Delete`."},{"pos":[263,267],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[274,301],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[48649,48961],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[49073,49123],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[49241,49308],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.","nodes":[{"pos":[0,225],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept>, such as when <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">access</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`Write`</ph> or <ph id=\"ph5\">`ReadWrite`</ph> and the file or directory is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access."}],"pos":[49422,49648],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,210],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]}],"pos":[49754,49965],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, `FileStream` instance ownership, buffer size, and synchronous or asynchronous state.","nodes":[{"pos":[0,239],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class for the specified file handle, with the specified read/write permission, <ph id=\"ph2\">`FileStream`</ph> instance ownership, buffer size, and synchronous or asynchronous state.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, `FileStream` instance ownership, buffer size, and synchronous or asynchronous state."}],"pos":[51583,51823],"yaml":true},{"content":"The `FileStream` object is given the specified access to the file. The ownership of the handle will be as specified. If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle. In particular, the file's handle count is decremented. The `FileStream` object is given the specified buffer size.  \n  \n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,351],"content":"The `FileStream` object is given the specified access to the file. The ownership of the handle will be as specified. If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle. In particular, the file's handle count is decremented. The `FileStream` object is given the specified buffer size.","nodes":[{"content":"The <ph id=\"ph1\">`FileStream`</ph> object is given the specified access to the file.","pos":[0,66],"source":"The `FileStream` object is given the specified access to the file."},{"content":"The ownership of the handle will be as specified.","pos":[67,116]},{"content":"If this <ph id=\"ph1\">`FileStream`</ph> owns the handle, a call to the <ph id=\"ph2\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method will also close the handle.","pos":[117,236],"source":" If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle."},{"content":"In particular, the file's handle count is decremented.","pos":[237,291]},{"content":"The <ph id=\"ph1\">`FileStream`</ph> object is given the specified buffer size.","pos":[292,351],"source":" The `FileStream` object is given the specified buffer size."}]},{"pos":[358,791],"content":"`FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.","nodes":[{"content":"<ph id=\"ph1\">`FileStream`</ph> assumes that it has exclusive control over the handle.","pos":[0,67],"source":"`FileStream` assumes that it has exclusive control over the handle."},{"content":"Reading, writing, or seeking while a <ph id=\"ph1\">`FileStream`</ph> is also holding a handle could result in data corruption.","pos":[68,175],"source":" Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption."},{"content":"For data safety, call <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id=\"ph2\">`Close`</ph> after you are done using the handle.","pos":[176,345],"source":" For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle."},{"content":"Alternately, read and write to the handle before calling this <ph id=\"ph1\">`FileStream`</ph> constructor.","pos":[346,433],"source":" Alternately, read and write to the handle before calling this `FileStream` constructor."}]},{"pos":[798,913],"content":"<ph id=\"ph1\">`FileShare.Read`</ph> is the default for those <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id=\"ph3\">`FileShare`</ph> parameter.","source":"`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter."},{"pos":[921,1162],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1169,1284],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[51834,53130],"yaml":true,"extradata":"MT"},{"content":"A file handle for the file that this `FileStream` object will encapsulate.","nodes":[{"pos":[0,74],"content":"A file handle for the file that this <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A file handle for the file that this `FileStream` object will encapsulate."}],"pos":[53474,53549],"yaml":true},{"content":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.","nodes":[{"pos":[0,168],"content":"A constant that sets the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","source":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."}],"pos":[53618,53787],"yaml":true},{"content":"`true` if the file handle will be owned by this `FileStream` instance; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if the file handle will be owned by this <ph id=\"ph2\">`FileStream`</ph> instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the file handle will be owned by this `FileStream` instance; otherwise, `false`."}],"pos":[53854,53947],"yaml":true},{"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"pos":[0,126],"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"content":"A positive <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value greater than 0 indicating the buffer size.","pos":[0,93],"source":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size."},{"content":"The default buffer size is 4096.","pos":[94,126]}]}],"pos":[54012,54139],"yaml":true},{"content":"`true` if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, `false`."}],"pos":[54203,54307],"yaml":true},{"content":"<code>access</code> is less than `FileAccess.Read` or greater than `FileAccess.ReadWrite` or <code>bufferSize</code> is less than or equal to 0.","nodes":[{"pos":[0,144],"content":"<ph id=\"ph1\">&lt;code&gt;access&lt;/code&gt;</ph> is less than <ph id=\"ph2\">`FileAccess.Read`</ph> or greater than <ph id=\"ph3\">`FileAccess.ReadWrite`</ph> or <ph id=\"ph4\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is less than or equal to 0.","source":"<code>access</code> is less than `FileAccess.Read` or greater than `FileAccess.ReadWrite` or <code>bufferSize</code> is less than or equal to 0."}],"pos":[54475,54620],"yaml":true},{"content":"The handle is invalid.","nodes":[{"pos":[0,22],"content":"The handle is invalid.","nodes":[{"content":"The handle is invalid.","pos":[0,22]}]}],"pos":[54714,54737],"yaml":true},{"content":"An I/O error, such as a disk error, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,45],"content":"An I/O error, such as a disk error, occurred.","nodes":[{"content":"An I/O error, such as a disk error, occurred.","pos":[0,45]}]},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,90],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[54825,54922],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[55034,55084],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.","nodes":[{"pos":[0,213],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">access</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`Write`</ph> or <ph id=\"ph4\">`ReadWrite`</ph> and the file handle is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access."}],"pos":[55198,55412],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write permission, and sharing permission.","nodes":[{"pos":[0,168],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class with the specified path, creation mode, read/write permission, and sharing permission.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write permission, and sharing permission."}],"pos":[56896,57065],"yaml":true},{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed). The buffer size is set to the default size of 4096 bytes (4 KB).  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,137],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[144,247],"content":"The <ph id=\"ph1\">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.","source":"The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share."},{"pos":[254,576],"content":"The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed). The buffer size is set to the default size of 4096 bytes (4 KB).","nodes":[{"content":"The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the <ph id=\"ph1\">`FileStream`</ph> object has been closed, but read attempts will succeed).","pos":[0,257],"source":"The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed)."},{"content":"The buffer size is set to the default size of 4096 bytes (4 KB).","pos":[258,322]}]},{"pos":[584,794],"content":"[!NOTE]\n `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","leadings":["","> "],"nodes":[{"content":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","pos":[8,208],"nodes":[{"content":"<ph id=\"ph1\"> `path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.","pos":[0,121],"source":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams."},{"content":"For example, depending on the system, this class can access a physical device.","pos":[122,200]}]}]},{"pos":[801,1150],"content":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> for all <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.","pos":[0,112],"source":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files."},{"content":"If <ph id=\"ph1\">`path`</ph> indicates a device that does not support seeking, the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[113,281],"source":" If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.","pos":[282,349],"source":" For additional information, see <xref:System.IO.Stream.CanSeek%2A>."}]},{"pos":[1158,1399],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1406,1521],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[57076,58621],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the file that the current `FileStream` object will encapsulate.","nodes":[{"pos":[0,95],"content":"A relative or absolute path for the file that the current <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A relative or absolute path for the file that the current `FileStream` object will encapsulate."}],"pos":[59363,59459],"yaml":true},{"content":"A constant that determines how to open or create the file.","nodes":[{"pos":[0,58],"content":"A constant that determines how to open or create the file.","nodes":[{"content":"A constant that determines how to open or create the file.","pos":[0,58]}]}],"pos":[59524,59583],"yaml":true},{"content":"A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.","nodes":[{"pos":[0,379],"content":"A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.","nodes":[{"content":"A constant that determines how the file can be accessed by the <ph id=\"ph1\">`FileStream`</ph> object.","pos":[0,83],"source":"A constant that determines how the file can be accessed by the `FileStream` object."},{"content":"This also determines the values returned by the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","pos":[84,275],"source":" This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanSeek\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> specifies a disk file.","pos":[276,379],"source":"<xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file."}]}],"pos":[59652,60032],"yaml":true},{"content":"A constant that determines how the file will be shared by processes.","nodes":[{"pos":[0,68],"content":"A constant that determines how the file will be shared by processes.","nodes":[{"content":"A constant that determines how the file will be shared by processes.","pos":[0,68]}]}],"pos":[60099,60168],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[60324,60353],"yaml":true},{"content":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.  \n  \n -or-  \n  \n <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","nodes":[{"pos":[0,113],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.","source":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,240],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment."}],"pos":[60447,60702],"yaml":true},{"content":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment."}],"pos":[60804,60917],"yaml":true},{"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"pos":[0,203],"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"content":"The file cannot be found, such as when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`FileMode.Truncate`</ph> or <ph id=\"ph3\">`FileMode.Open`</ph>, and the file specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not exist.","pos":[0,159],"source":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist."},{"content":"The file must already exist in these modes.","pos":[160,203]}]}],"pos":[61025,61229],"yaml":true},{"content":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \n  \n -or-  \n  \n The system is running Windows 98 or Windows 98 Second Edition and <code>share</code> is set to `FileShare.Delete`.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,124],"content":"An I/O error, such as specifying <ph id=\"ph1\">`FileMode.CreateNew`</ph> when the file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> already exists, occurred.","source":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred."},{"pos":[131,135],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[142,256],"content":"The system is running Windows 98 or Windows 98 Second Edition and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">share</ph><ept id=\"p1\">&lt;/code&gt;</ept> is set to <ph id=\"ph2\">`FileShare.Delete`</ph>.","source":"The system is running Windows 98 or Windows 98 Second Edition and <code>share</code> is set to `FileShare.Delete`."},{"pos":[263,267],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[274,301],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[61317,61629],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[61741,61791],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[61909,61976],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.","nodes":[{"pos":[0,225],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept>, such as when <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">access</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`Write`</ph> or <ph id=\"ph5\">`ReadWrite`</ph> and the file or directory is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access."}],"pos":[62090,62316],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,210],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]}],"pos":[62422,62633],"yaml":true},{"content":"<code>mode</code> contains an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.","source":"<code>mode</code> contains an invalid value."}],"pos":[62747,62792],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write and sharing permission, and buffer size.","nodes":[{"pos":[0,173],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class with the specified path, creation mode, read/write and sharing permission, and buffer size.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write and sharing permission, and buffer size."}],"pos":[64471,64645],"yaml":true},{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,137],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[144,247],"content":"The <ph id=\"ph1\">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.","source":"The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share."},{"pos":[255,465],"content":"[!NOTE]\n `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","leadings":["","> "],"nodes":[{"content":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","pos":[8,208],"nodes":[{"content":"<ph id=\"ph1\"> `path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.","pos":[0,121],"source":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams."},{"content":"For example, depending on the system, this class can access a physical device.","pos":[122,200]}]}]},{"pos":[472,821],"content":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> for all <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.","pos":[0,112],"source":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files."},{"content":"If <ph id=\"ph1\">`path`</ph> indicates a device that does not support seeking, the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[113,281],"source":" If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.","pos":[282,349],"source":" For additional information, see <xref:System.IO.Stream.CanSeek%2A>."}]},{"pos":[829,1070],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1077,1192],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[64656,65870],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the file that the current `FileStream` object will encapsulate.","nodes":[{"pos":[0,95],"content":"A relative or absolute path for the file that the current <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A relative or absolute path for the file that the current `FileStream` object will encapsulate."}],"pos":[66099,66195],"yaml":true},{"content":"A constant that determines how to open or create the file.","nodes":[{"pos":[0,58],"content":"A constant that determines how to open or create the file.","nodes":[{"content":"A constant that determines how to open or create the file.","pos":[0,58]}]}],"pos":[66260,66319],"yaml":true},{"content":"A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.","nodes":[{"pos":[0,379],"content":"A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.","nodes":[{"content":"A constant that determines how the file can be accessed by the <ph id=\"ph1\">`FileStream`</ph> object.","pos":[0,83],"source":"A constant that determines how the file can be accessed by the `FileStream` object."},{"content":"This also determines the values returned by the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","pos":[84,275],"source":" This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanSeek\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> specifies a disk file.","pos":[276,379],"source":"<xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file."}]}],"pos":[66388,66768],"yaml":true},{"content":"A constant that determines how the file will be shared by processes.","nodes":[{"pos":[0,68],"content":"A constant that determines how the file will be shared by processes.","nodes":[{"content":"A constant that determines how the file will be shared by processes.","pos":[0,68]}]}],"pos":[66835,66904],"yaml":true},{"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"pos":[0,126],"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"content":"A positive <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value greater than 0 indicating the buffer size.","pos":[0,93],"source":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size."},{"content":"The default buffer size is 4096.","pos":[94,126]}]}],"pos":[66969,67096],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[67252,67281],"yaml":true},{"content":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.  \n  \n -or-  \n  \n <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","nodes":[{"pos":[0,113],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.","source":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,240],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment."}],"pos":[67375,67630],"yaml":true},{"content":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment."}],"pos":[67732,67845],"yaml":true},{"content":"<code>bufferSize</code> is negative or zero.  \n  \n -or-  \n  \n <code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative or zero.","source":"<code>bufferSize</code> is negative or zero."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,149],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;access&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;share&lt;/code&gt;</ph> contain an invalid value.","source":"<code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value."}],"pos":[67959,68115],"yaml":true},{"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"pos":[0,203],"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"content":"The file cannot be found, such as when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`FileMode.Truncate`</ph> or <ph id=\"ph3\">`FileMode.Open`</ph>, and the file specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not exist.","pos":[0,159],"source":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist."},{"content":"The file must already exist in these modes.","pos":[160,203]}]}],"pos":[68223,68427],"yaml":true},{"content":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \n  \n -or-  \n  \n The system is running Windows 98 or Windows 98 Second Edition and <code>share</code> is set to `FileShare.Delete`.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,124],"content":"An I/O error, such as specifying <ph id=\"ph1\">`FileMode.CreateNew`</ph> when the file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> already exists, occurred.","source":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred."},{"pos":[131,135],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[142,256],"content":"The system is running Windows 98 or Windows 98 Second Edition and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">share</ph><ept id=\"p1\">&lt;/code&gt;</ept> is set to <ph id=\"ph2\">`FileShare.Delete`</ph>.","source":"The system is running Windows 98 or Windows 98 Second Edition and <code>share</code> is set to `FileShare.Delete`."},{"pos":[263,267],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[274,301],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[68515,68827],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[68939,68989],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[69107,69174],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.","nodes":[{"pos":[0,225],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept>, such as when <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">access</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`Write`</ph> or <ph id=\"ph5\">`ReadWrite`</ph> and the file or directory is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access."}],"pos":[69288,69514],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,210],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]}],"pos":[69620,69831],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.","nodes":[{"pos":[0,206],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state."}],"pos":[71513,71720],"yaml":true},{"content":"You set the `isAsync` parameter to `true` to open the file handle asynchronously. When the parameter is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the parameter does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method. When the `isAsync` parameter is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.  \n  \n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,576],"content":"You set the `isAsync` parameter to `true` to open the file handle asynchronously. When the parameter is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the parameter does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method. When the `isAsync` parameter is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.","nodes":[{"content":"You set the <ph id=\"ph1\">`isAsync`</ph> parameter to <ph id=\"ph2\">`true`</ph> to open the file handle asynchronously.","pos":[0,81],"source":"You set the `isAsync` parameter to `true` to open the file handle asynchronously."},{"content":"When the parameter is <ph id=\"ph1\">`true`</ph>, the stream utilizes overlapped I/O to perform file operations asynchronously.","pos":[82,189],"source":" When the parameter is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously."},{"content":"However, the parameter does not have to be <ph id=\"ph1\">`true`</ph> to call the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method.","pos":[190,386],"source":" However, the parameter does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method."},{"content":"When the <ph id=\"ph1\">`isAsync`</ph> parameter is <ph id=\"ph2\">`false`</ph> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.","pos":[387,576],"source":" When the `isAsync` parameter is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously."}]},{"pos":[583,1016],"content":"`FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.","nodes":[{"content":"<ph id=\"ph1\">`FileStream`</ph> assumes that it has exclusive control over the handle.","pos":[0,67],"source":"`FileStream` assumes that it has exclusive control over the handle."},{"content":"Reading, writing, or seeking while a <ph id=\"ph1\">`FileStream`</ph> is also holding a handle could result in data corruption.","pos":[68,175],"source":" Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption."},{"content":"For data safety, call <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id=\"ph2\">`Close`</ph> after you are done using the handle.","pos":[176,345],"source":" For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle."},{"content":"Alternately, read and write to the handle before calling this <ph id=\"ph1\">`FileStream`</ph> constructor.","pos":[346,433],"source":" Alternately, read and write to the handle before calling this `FileStream` constructor."}]},{"pos":[1023,1138],"content":"<ph id=\"ph1\">`FileShare.Read`</ph> is the default for those <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id=\"ph3\">`FileShare`</ph> parameter.","source":"`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter."},{"pos":[1146,1387],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1394,1509],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[71731,73252],"yaml":true,"extradata":"MT"},{"content":"A file handle for the file that this `FileStream` object will encapsulate.","nodes":[{"pos":[0,74],"content":"A file handle for the file that this <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A file handle for the file that this `FileStream` object will encapsulate."}],"pos":[73512,73587],"yaml":true},{"content":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.","nodes":[{"pos":[0,168],"content":"A constant that sets the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","source":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."}],"pos":[73656,73825],"yaml":true},{"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"pos":[0,126],"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"content":"A positive <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value greater than 0 indicating the buffer size.","pos":[0,93],"source":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size."},{"content":"The default buffer size is 4096.","pos":[94,126]}]}],"pos":[73890,74017],"yaml":true},{"content":"`true` if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, `false`."}],"pos":[74081,74185],"yaml":true},{"content":"The <code>handle</code> parameter is an invalid handle.  \n  \n -or-  \n  \n The <code>handle</code> parameter is a synchronous handle and it was used asynchronously.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handle</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an invalid handle.","source":"The <code>handle</code> parameter is an invalid handle."},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,162],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handle</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is a synchronous handle and it was used asynchronously.","source":"The <code>handle</code> parameter is a synchronous handle and it was used asynchronously."}],"pos":[74333,74502],"yaml":true},{"content":"The <code>bufferSize</code> parameter is negative.","nodes":[{"pos":[0,50],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bufferSize</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is negative.","source":"The <code>bufferSize</code> parameter is negative."}],"pos":[74616,74667],"yaml":true},{"content":"An I/O error, such as a disk error, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,45],"content":"An I/O error, such as a disk error, occurred.","nodes":[{"content":"An I/O error, such as a disk error, occurred.","pos":[0,45]}]},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,90],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[74755,74852],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[74964,75014],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.","nodes":[{"pos":[0,213],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">access</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`Write`</ph> or <ph id=\"ph4\">`ReadWrite`</ph> and the file handle is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access."}],"pos":[75128,75342],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, and read/write permission.","nodes":[{"pos":[0,148],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class with the specified path, creation mode, and read/write permission.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, and read/write permission."}],"pos":[76868,77017],"yaml":true},{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed). The buffer size is set to the default size of 4096 bytes (4 KB).  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,137],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[144,247],"content":"The <ph id=\"ph1\">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.","source":"The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share."},{"pos":[254,576],"content":"The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed). The buffer size is set to the default size of 4096 bytes (4 KB).","nodes":[{"content":"The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the <ph id=\"ph1\">`FileStream`</ph> object has been closed, but read attempts will succeed).","pos":[0,257],"source":"The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed)."},{"content":"The buffer size is set to the default size of 4096 bytes (4 KB).","pos":[258,322]}]},{"pos":[584,794],"content":"[!NOTE]\n `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","leadings":["","> "],"nodes":[{"content":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","pos":[8,208],"nodes":[{"content":"<ph id=\"ph1\"> `path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.","pos":[0,121],"source":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams."},{"content":"For example, depending on the system, this class can access a physical device.","pos":[122,200]}]}]},{"pos":[801,1150],"content":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> for all <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.","pos":[0,112],"source":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files."},{"content":"If <ph id=\"ph1\">`path`</ph> indicates a device that does not support seeking, the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[113,281],"source":" If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.","pos":[282,349],"source":" For additional information, see <xref:System.IO.Stream.CanSeek%2A>."}]},{"pos":[1157,1272],"content":"<ph id=\"ph1\">`FileShare.Read`</ph> is the default for those <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id=\"ph3\">`FileShare`</ph> parameter.","source":"`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter."},{"pos":[1280,1521],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1528,1643],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[77028,78697],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the file that the current `FileStream` object will encapsulate.","nodes":[{"pos":[0,95],"content":"A relative or absolute path for the file that the current <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A relative or absolute path for the file that the current `FileStream` object will encapsulate."}],"pos":[78883,78979],"yaml":true},{"content":"A constant that determines how to open or create the file.","nodes":[{"pos":[0,58],"content":"A constant that determines how to open or create the file.","nodes":[{"content":"A constant that determines how to open or create the file.","pos":[0,58]}]}],"pos":[79044,79103],"yaml":true},{"content":"A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.","nodes":[{"pos":[0,379],"content":"A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.","nodes":[{"content":"A constant that determines how the file can be accessed by the <ph id=\"ph1\">`FileStream`</ph> object.","pos":[0,83],"source":"A constant that determines how the file can be accessed by the `FileStream` object."},{"content":"This also determines the values returned by the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","pos":[84,275],"source":" This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanSeek\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> specifies a disk file.","pos":[276,379],"source":"<xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file."}]}],"pos":[79172,79552],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[79708,79737],"yaml":true},{"content":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.  \n  \n -or-  \n  \n <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","nodes":[{"pos":[0,113],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.","source":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,240],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment."}],"pos":[79831,80086],"yaml":true},{"content":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment."}],"pos":[80188,80301],"yaml":true},{"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"pos":[0,203],"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"content":"The file cannot be found, such as when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`FileMode.Truncate`</ph> or <ph id=\"ph3\">`FileMode.Open`</ph>, and the file specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not exist.","pos":[0,159],"source":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist."},{"content":"The file must already exist in these modes.","pos":[160,203]}]}],"pos":[80409,80613],"yaml":true},{"content":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,124],"content":"An I/O error, such as specifying <ph id=\"ph1\">`FileMode.CreateNew`</ph> when the file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> already exists, occurred.","source":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred."},{"pos":[131,135],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[142,169],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[80701,80877],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[80989,81039],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[81157,81224],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.","nodes":[{"pos":[0,225],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept>, such as when <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">access</ph><ept id=\"p3\">&lt;/code&gt;</ept> is <ph id=\"ph4\">`Write`</ph> or <ph id=\"ph5\">`ReadWrite`</ph> and the file or directory is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access."}],"pos":[81338,81564],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,210],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]}],"pos":[81670,81881],"yaml":true},{"content":"<code>mode</code> contains an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.","source":"<code>mode</code> contains an invalid value."}],"pos":[81995,82040],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission and `FileStream` instance ownership.","nodes":[{"pos":[0,190],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class for the specified file handle, with the specified read/write permission and <ph id=\"ph2\">`FileStream`</ph> instance ownership.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission and `FileStream` instance ownership."}],"pos":[83526,83717],"yaml":true},{"content":"The `FileStream` object is given the specified access to the file. The ownership of the handle will be as specified. If this process owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle and the file's handle count is decremented. The `FileStream` object is given the default buffer size of 4096 bytes.  \n  \n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling methods other than `Close` after you are done using the handle.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,346],"content":"The `FileStream` object is given the specified access to the file. The ownership of the handle will be as specified. If this process owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle and the file's handle count is decremented. The `FileStream` object is given the default buffer size of 4096 bytes.","nodes":[{"content":"The <ph id=\"ph1\">`FileStream`</ph> object is given the specified access to the file.","pos":[0,66],"source":"The `FileStream` object is given the specified access to the file."},{"content":"The ownership of the handle will be as specified.","pos":[67,116]},{"content":"If this process owns the handle, a call to the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method will also close the handle and the file's handle count is decremented.","pos":[117,274],"source":" If this process owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle and the file's handle count is decremented."},{"content":"The <ph id=\"ph1\">`FileStream`</ph> object is given the default buffer size of 4096 bytes.","pos":[275,346],"source":" The `FileStream` object is given the default buffer size of 4096 bytes."}]},{"pos":[353,694],"content":"`FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling methods other than `Close` after you are done using the handle.","nodes":[{"content":"<ph id=\"ph1\">`FileStream`</ph> assumes that it has exclusive control over the handle.","pos":[0,67],"source":"`FileStream` assumes that it has exclusive control over the handle."},{"content":"Reading, writing, or seeking while a <ph id=\"ph1\">`FileStream`</ph> is also holding a handle could result in data corruption.","pos":[68,175],"source":" Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption."},{"content":"For data safety, call <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling methods other than <ph id=\"ph2\">`Close`</ph> after you are done using the handle.","pos":[176,341],"source":" For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling methods other than `Close` after you are done using the handle."}]},{"pos":[701,816],"content":"<ph id=\"ph1\">`FileShare.Read`</ph> is the default for those <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id=\"ph3\">`FileShare`</ph> parameter.","source":"`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter."},{"pos":[824,1065],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1072,1187],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[83728,84927],"yaml":true,"extradata":"MT"},{"content":"A file handle for the file that the current `FileStream` object will encapsulate.","nodes":[{"pos":[0,81],"content":"A file handle for the file that the current <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A file handle for the file that the current `FileStream` object will encapsulate."}],"pos":[85211,85293],"yaml":true},{"content":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.","nodes":[{"pos":[0,168],"content":"A constant that sets the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","source":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."}],"pos":[85362,85531],"yaml":true},{"content":"`true` if the file handle will be owned by this `FileStream` instance; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if the file handle will be owned by this <ph id=\"ph2\">`FileStream`</ph> instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the file handle will be owned by this `FileStream` instance; otherwise, `false`."}],"pos":[85598,85691],"yaml":true},{"content":"<code>access</code> is not a field of <xref href=\"System.IO.FileAccess\"></xref>.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;access&lt;/code&gt;</ph> is not a field of <ph id=\"ph2\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph>.","source":"<code>access</code> is not a field of <xref href=\"System.IO.FileAccess\"></xref>."}],"pos":[85839,85920],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[86032,86082],"yaml":true},{"content":"An I/O error, such as a disk error, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,45],"content":"An I/O error, such as a disk error, occurred.","nodes":[{"content":"An I/O error, such as a disk error, occurred.","pos":[0,45]}]},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,90],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[86170,86267],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.","nodes":[{"pos":[0,213],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">access</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`Write`</ph> or <ph id=\"ph4\">`ReadWrite`</ph> and the file handle is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access."}],"pos":[86381,86595],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, and buffer size.","nodes":[{"pos":[0,171],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class for the specified file handle, with the specified read/write permission, and buffer size.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, and buffer size."}],"pos":[88070,88242],"yaml":true},{"content":"`FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,433],"content":"`FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.","nodes":[{"content":"<ph id=\"ph1\">`FileStream`</ph> assumes that it has exclusive control over the handle.","pos":[0,67],"source":"`FileStream` assumes that it has exclusive control over the handle."},{"content":"Reading, writing, or seeking while a <ph id=\"ph1\">`FileStream`</ph> is also holding a handle could result in data corruption.","pos":[68,175],"source":" Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption."},{"content":"For data safety, call <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id=\"ph2\">`Close`</ph> after you are done using the handle.","pos":[176,345],"source":" For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle."},{"content":"Alternately, read and write to the handle before calling this <ph id=\"ph1\">`FileStream`</ph> constructor.","pos":[346,433],"source":" Alternately, read and write to the handle before calling this `FileStream` constructor."}]},{"pos":[440,555],"content":"<ph id=\"ph1\">`FileShare.Read`</ph> is the default for those <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id=\"ph3\">`FileShare`</ph> parameter.","source":"`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter."},{"pos":[563,804],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[811,926],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[88253,89189],"yaml":true,"extradata":"MT"},{"content":"A file handle for the file that the current `FileStream` object will encapsulate.","nodes":[{"pos":[0,81],"content":"A file handle for the file that the current <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A file handle for the file that the current `FileStream` object will encapsulate."}],"pos":[89435,89517],"yaml":true},{"content":"A <xref href=\"System.IO.FileAccess\"></xref> constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.","nodes":[{"pos":[0,210],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph> constant that sets the <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph4\">`FileStream`</ph> object.","source":"A <xref href=\"System.IO.FileAccess\"></xref> constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."}],"pos":[89586,89797],"yaml":true},{"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"pos":[0,126],"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"content":"A positive <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value greater than 0 indicating the buffer size.","pos":[0,93],"source":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size."},{"content":"The default buffer size is 4096.","pos":[94,126]}]}],"pos":[89862,89989],"yaml":true},{"content":"The <code>handle</code> parameter is an invalid handle.  \n  \n -or-  \n  \n The <code>handle</code> parameter is a synchronous handle and it was used asynchronously.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handle</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an invalid handle.","source":"The <code>handle</code> parameter is an invalid handle."},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,162],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handle</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is a synchronous handle and it was used asynchronously.","source":"The <code>handle</code> parameter is a synchronous handle and it was used asynchronously."}],"pos":[90137,90306],"yaml":true},{"content":"The <code>bufferSize</code> parameter is negative.","nodes":[{"pos":[0,50],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bufferSize</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is negative.","source":"The <code>bufferSize</code> parameter is negative."}],"pos":[90420,90471],"yaml":true},{"content":"An I/O error, such as a disk error, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,45],"content":"An I/O error, such as a disk error, occurred.","nodes":[{"content":"An I/O error, such as a disk error, occurred.","pos":[0,45]}]},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,90],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[90559,90656],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[90768,90818],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.","nodes":[{"pos":[0,213],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">access</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`Write`</ph> or <ph id=\"ph4\">`ReadWrite`</ph> and the file handle is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access."}],"pos":[90932,91146],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path and creation mode.","nodes":[{"pos":[0,124],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class with the specified path and creation mode.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path and creation mode."}],"pos":[92573,92698],"yaml":true},{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".  \n  \n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \n  \n The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed).  \n  \n You cannot use this constructor to open read-only files; instead, you must use a constructor that accepts a `FileAccess` parameter with the value set to `FileAccess.Read`.  \n  \n The buffer size is set to the default size of 4096 bytes (4 KB).  \n  \n> [!NOTE]\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \n  \n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n For constructors without a <xref:System.IO.FileAccess> parameter, if the `mode` parameter is set to <xref:System.IO.FileMode.Append>, <xref:System.IO.FileAccess.Write> is the default access. Otherwise, the access is set to <xref:System.IO.FileAccess.ReadWrite>.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,137],"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \".","nodes":[{"content":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"<ph id=\"ph1\">\\\\</ph><ph id=\"ph2\">\\\\</ph>.\\PHYSICALDRIVE0 \".","pos":[0,137],"source":"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \"\\\\\\\\.\\PHYSICALDRIVE0 \"."}]},{"pos":[144,247],"content":"The <ph id=\"ph1\">`path`</ph> parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.","source":"The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share."},{"pos":[254,511],"content":"The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the <ph id=\"ph1\">`FileStream`</ph> object has been closed, but read attempts will succeed).","source":"The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed)."},{"pos":[518,689],"content":"You cannot use this constructor to open read-only files; instead, you must use a constructor that accepts a <ph id=\"ph1\">`FileAccess`</ph> parameter with the value set to <ph id=\"ph2\">`FileAccess.Read`</ph>.","source":"You cannot use this constructor to open read-only files; instead, you must use a constructor that accepts a `FileAccess` parameter with the value set to `FileAccess.Read`."},{"pos":[696,760],"content":"The buffer size is set to the default size of 4096 bytes (4 KB).","nodes":[{"content":"The buffer size is set to the default size of 4096 bytes (4 KB).","pos":[0,64]}]},{"pos":[768,978],"content":"[!NOTE]\n `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","leadings":["","> "],"nodes":[{"content":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.","pos":[8,208],"nodes":[{"content":"<ph id=\"ph1\"> `path`</ph> is not required to be a file stored on disk; it can be any part of a system that supports access through streams.","pos":[0,121],"source":" `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams."},{"content":"For example, depending on the system, this class can access a physical device.","pos":[122,200]}]}]},{"pos":[985,1334],"content":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> for all <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> objects that encapsulate files.","pos":[0,112],"source":"<xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files."},{"content":"If <ph id=\"ph1\">`path`</ph> indicates a device that does not support seeking, the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property on the resulting <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[113,281],"source":" If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.","pos":[282,349],"source":" For additional information, see <xref:System.IO.Stream.CanSeek%2A>."}]},{"pos":[1341,1456],"content":"<ph id=\"ph1\">`FileShare.Read`</ph> is the default for those <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id=\"ph3\">`FileShare`</ph> parameter.","source":"`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter."},{"pos":[1463,1724],"content":"For constructors without a <xref:System.IO.FileAccess> parameter, if the `mode` parameter is set to <xref:System.IO.FileMode.Append>, <xref:System.IO.FileAccess.Write> is the default access. Otherwise, the access is set to <xref:System.IO.FileAccess.ReadWrite>.","nodes":[{"content":"For constructors without a <ph id=\"ph1\">&lt;xref:System.IO.FileAccess&gt;</ph> parameter, if the <ph id=\"ph2\">`mode`</ph> parameter is set to <ph id=\"ph3\">&lt;xref:System.IO.FileMode.Append&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.FileAccess.Write&gt;</ph> is the default access.","pos":[0,190],"source":"For constructors without a <xref:System.IO.FileAccess> parameter, if the `mode` parameter is set to <xref:System.IO.FileMode.Append>, <xref:System.IO.FileAccess.Write> is the default access."},{"content":"Otherwise, the access is set to <ph id=\"ph1\">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>.","pos":[191,261],"source":" Otherwise, the access is set to <xref:System.IO.FileAccess.ReadWrite>."}]},{"pos":[1732,1973],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1980,2095],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[92709,94836],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the file that the current `FileStream` object will encapsulate.","nodes":[{"pos":[0,95],"content":"A relative or absolute path for the file that the current <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A relative or absolute path for the file that the current `FileStream` object will encapsulate."}],"pos":[95529,95625],"yaml":true},{"content":"A constant that determines how to open or create the file.","nodes":[{"pos":[0,58],"content":"A constant that determines how to open or create the file.","nodes":[{"content":"A constant that determines how to open or create the file.","pos":[0,58]}]}],"pos":[95690,95749],"yaml":true},{"content":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.  \n  \n -or-  \n  \n <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","nodes":[{"pos":[0,113],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is an empty string (\"\"), contains only white space, or contains one or more invalid characters.","source":"<code>path</code> is an empty string (\"\"), contains only white space, or contains one or more invalid characters."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,240],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in an NTFS environment."}],"pos":[95897,96152],"yaml":true},{"content":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","nodes":[{"pos":[0,112],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.","source":"<code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment."}],"pos":[96254,96367],"yaml":true},{"content":"<code>path</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>path</code> is `null`."}],"pos":[96469,96498],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[96610,96660],"yaml":true},{"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"pos":[0,203],"content":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.","nodes":[{"content":"The file cannot be found, such as when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">mode</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`FileMode.Truncate`</ph> or <ph id=\"ph3\">`FileMode.Open`</ph>, and the file specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">path</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not exist.","pos":[0,159],"source":"The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist."},{"content":"The file must already exist in these modes.","pos":[160,203]}]}],"pos":[96768,96972],"yaml":true},{"content":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,124],"content":"An I/O error, such as specifying <ph id=\"ph1\">`FileMode.CreateNew`</ph> when the file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> already exists, occurred.","source":"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred."},{"pos":[131,135],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[142,169],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[97060,97236],"yaml":true},{"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"pos":[0,66],"content":"The specified path is invalid, such as being on an unmapped drive.","nodes":[{"content":"The specified path is invalid, such as being on an unmapped drive.","pos":[0,66]}]}],"pos":[97354,97421],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,210],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]}],"pos":[97527,97738],"yaml":true},{"content":"<code>mode</code> contains an invalid value.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;mode&lt;/code&gt;</ph> contains an invalid value.","source":"<code>mode</code> contains an invalid value."}],"pos":[97852,97897],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission.","nodes":[{"pos":[0,154],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class for the specified file handle, with the specified read/write permission.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission."}],"pos":[99311,99466],"yaml":true},{"content":"When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented.  \n  \n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,118],"content":"When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> is called, the handle is also closed and the file's handle count is decremented.","pos":[0,118],"source":"When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented."}]},{"pos":[125,470],"content":"`FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.","nodes":[{"content":"<ph id=\"ph1\">`FileStream`</ph> assumes that it has exclusive control over the handle.","pos":[0,67],"source":"`FileStream` assumes that it has exclusive control over the handle."},{"content":"Reading, writing, or seeking while a <ph id=\"ph1\">`FileStream`</ph> is also holding a handle could result in data corruption.","pos":[68,175],"source":" Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption."},{"content":"For data safety, call <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id=\"ph2\">`Close`</ph> after you are done using the handle.","pos":[176,345],"source":" For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle."}]},{"pos":[478,719],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[726,841],"content":"<ph id=\"ph1\">`FileShare.Read`</ph> is the default for those <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id=\"ph3\">`FileShare`</ph> parameter.","source":"`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter."},{"pos":[848,963],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[99477,100452],"yaml":true,"extradata":"MT"},{"content":"A file handle for the file that the current `FileStream` object will encapsulate.","nodes":[{"pos":[0,81],"content":"A file handle for the file that the current <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A file handle for the file that the current `FileStream` object will encapsulate."}],"pos":[100719,100801],"yaml":true},{"content":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.","nodes":[{"pos":[0,168],"content":"A constant that sets the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","source":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."}],"pos":[100870,101039],"yaml":true},{"content":"<code>access</code> is not a field of <xref href=\"System.IO.FileAccess\"></xref>.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;access&lt;/code&gt;</ph> is not a field of <ph id=\"ph2\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph>.","source":"<code>access</code> is not a field of <xref href=\"System.IO.FileAccess\"></xref>."}],"pos":[101187,101268],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[101380,101430],"yaml":true},{"content":"An I/O error, such as a disk error, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,45],"content":"An I/O error, such as a disk error, occurred.","nodes":[{"content":"An I/O error, such as a disk error, occurred.","pos":[0,45]}]},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,90],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[101518,101615],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.","nodes":[{"pos":[0,213],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">access</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`Write`</ph> or <ph id=\"ph4\">`ReadWrite`</ph> and the file handle is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access."}],"pos":[101729,101943],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, `FileStream` instance ownership, and buffer size.","nodes":[{"pos":[0,204],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> class for the specified file handle, with the specified read/write permission, <ph id=\"ph2\">`FileStream`</ph> instance ownership, and buffer size.","source":"Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, `FileStream` instance ownership, and buffer size."}],"pos":[103354,103559],"yaml":true},{"content":"The `FileStream` object is given the specified access to the file. The ownership of the handle will be as specified. If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle. In particular, the file's handle count is decremented. The `FileStream` object is given the specified buffer size.  \n  \n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.  \n  \n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \n  \n> [!CAUTION]\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,351],"content":"The `FileStream` object is given the specified access to the file. The ownership of the handle will be as specified. If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle. In particular, the file's handle count is decremented. The `FileStream` object is given the specified buffer size.","nodes":[{"content":"The <ph id=\"ph1\">`FileStream`</ph> object is given the specified access to the file.","pos":[0,66],"source":"The `FileStream` object is given the specified access to the file."},{"content":"The ownership of the handle will be as specified.","pos":[67,116]},{"content":"If this <ph id=\"ph1\">`FileStream`</ph> owns the handle, a call to the <ph id=\"ph2\">&lt;xref:System.IO.Stream.Close%2A&gt;</ph> method will also close the handle.","pos":[117,236],"source":" If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle."},{"content":"In particular, the file's handle count is decremented.","pos":[237,291]},{"content":"The <ph id=\"ph1\">`FileStream`</ph> object is given the specified buffer size.","pos":[292,351],"source":" The `FileStream` object is given the specified buffer size."}]},{"pos":[358,791],"content":"`FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.","nodes":[{"content":"<ph id=\"ph1\">`FileStream`</ph> assumes that it has exclusive control over the handle.","pos":[0,67],"source":"`FileStream` assumes that it has exclusive control over the handle."},{"content":"Reading, writing, or seeking while a <ph id=\"ph1\">`FileStream`</ph> is also holding a handle could result in data corruption.","pos":[68,175],"source":" Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption."},{"content":"For data safety, call <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> before using the handle, and avoid calling any methods other than <ph id=\"ph2\">`Close`</ph> after you are done using the handle.","pos":[176,345],"source":" For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle."},{"content":"Alternately, read and write to the handle before calling this <ph id=\"ph1\">`FileStream`</ph> constructor.","pos":[346,433],"source":" Alternately, read and write to the handle before calling this `FileStream` constructor."}]},{"pos":[798,913],"content":"<ph id=\"ph1\">`FileShare.Read`</ph> is the default for those <ph id=\"ph2\">&lt;xref:System.IO.FileStream&gt;</ph> constructors without a <ph id=\"ph3\">`FileShare`</ph> parameter.","source":"`FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter."},{"pos":[921,1162],"content":"[!CAUTION]\n When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","leadings":["","> "],"nodes":[{"content":"When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.","pos":[12,239]}]},{"pos":[1169,1284],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[103570,104866],"yaml":true,"extradata":"MT"},{"content":"A file handle for the file that this `FileStream` object will encapsulate.","nodes":[{"pos":[0,74],"content":"A file handle for the file that this <ph id=\"ph1\">`FileStream`</ph> object will encapsulate.","source":"A file handle for the file that this `FileStream` object will encapsulate."}],"pos":[105182,105257],"yaml":true},{"content":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.","nodes":[{"pos":[0,168],"content":"A constant that sets the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanRead\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.CanWrite\"&gt;&lt;/xref&gt;</ph> properties of the <ph id=\"ph3\">`FileStream`</ph> object.","source":"A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object."}],"pos":[105326,105495],"yaml":true},{"content":"`true` if the file handle will be owned by this `FileStream` instance; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if the file handle will be owned by this <ph id=\"ph2\">`FileStream`</ph> instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the file handle will be owned by this `FileStream` instance; otherwise, `false`."}],"pos":[105562,105655],"yaml":true},{"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"pos":[0,126],"content":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.","nodes":[{"content":"A positive <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> value greater than 0 indicating the buffer size.","pos":[0,93],"source":"A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size."},{"content":"The default buffer size is 4096.","pos":[94,126]}]}],"pos":[105720,105847],"yaml":true},{"content":"<code>bufferSize</code> is negative.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;bufferSize&lt;/code&gt;</ph> is negative.","source":"<code>bufferSize</code> is negative."}],"pos":[106015,106052],"yaml":true},{"content":"An I/O error, such as a disk error, occurred.  \n  \n -or-  \n  \n The stream has been closed.","nodes":[{"pos":[0,45],"content":"An I/O error, such as a disk error, occurred.","nodes":[{"content":"An I/O error, such as a disk error, occurred.","pos":[0,45]}]},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,90],"content":"The stream has been closed.","nodes":[{"content":"The stream has been closed.","pos":[0,27]}]}],"pos":[106140,106237],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[106349,106399],"yaml":true},{"content":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.","nodes":[{"pos":[0,213],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> requested is not permitted by the operating system for the specified file handle, such as when <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">access</ph><ept id=\"p2\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`Write`</ph> or <ph id=\"ph4\">`ReadWrite`</ph> and the file handle is set for read-only access.","source":"The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access."}],"pos":[106513,106727],"yaml":true},{"content":"Begins an asynchronous read operation. (Consider using <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)","nodes":[{"pos":[0,192],"content":"Begins an asynchronous read operation. (Consider using <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)","nodes":[{"content":"Begins an asynchronous read operation.","pos":[0,38]},{"content":"(Consider using <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"&gt;&lt;/xref&gt;</ph> instead.)","pos":[39,192],"source":" (Consider using <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)"}]}],"pos":[108203,108396],"yaml":true},{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.  \n  \n <xref:System.IO.FileStream.EndRead%2A> must be called exactly once for every call to <xref:System.IO.FileStream.BeginRead%2A>. Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.  \n  \n <xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O. While either can be used, the underlying operating system resources might allow access in only one of these modes. By default, <xref:System.IO.FileStream> opens the operating system handle synchronously. In Windows, this slows down asynchronous methods. If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \n  \n> [!NOTE]\n>  Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading. For additional information, see <xref:System.IO.Stream.CanRead%2A>.  \n  \n If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginRead%2A>. Errors that occur during an asynchronous read request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndRead%2A>.  \n  \n <xref:System.IO.Stream.EndRead%2A> must be called with this <xref:System.IAsyncResult> to find out how many bytes were read.  \n  \n Multiple simultaneous asynchronous requests render the request completion order uncertain.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,588],"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.","nodes":[{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id=\"ph1\">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> to implement asynchronous file operations.","pos":[0,204],"source":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations."},{"content":"These methods are still available in the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id=\"ph2\">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.","pos":[205,588],"source":" These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily."}]},{"pos":[595,830],"content":"<xref:System.IO.FileStream.EndRead%2A> must be called exactly once for every call to <xref:System.IO.FileStream.BeginRead%2A>. Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.","nodes":[{"content":"<xref:System.IO.FileStream.EndRead%2A> must be called exactly once for every call to <xref:System.IO.FileStream.BeginRead%2A>. Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.","pos":[0,235],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> must be called exactly once for every call to <ph id=\"ph2\">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>.","pos":[0,126],"source":"<xref:System.IO.FileStream.EndRead%2A> must be called exactly once for every call to <xref:System.IO.FileStream.BeginRead%2A>."},{"content":"Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.","pos":[127,235]}]}]},{"pos":[837,1407],"content":"<xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O. While either can be used, the underlying operating system resources might allow access in only one of these modes. By default, <xref:System.IO.FileStream> opens the operating system handle synchronously. In Windows, this slows down asynchronous methods. If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.","nodes":[{"content":"<xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O. While either can be used, the underlying operating system resources might allow access in only one of these modes. By default, <xref:System.IO.FileStream> opens the operating system handle synchronously. In Windows, this slows down asynchronous methods. If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.","pos":[0,570],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> provides two different modes of operation: synchronous I/O and asynchronous I/O.","pos":[0,108],"source":"<xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O."},{"content":"While either can be used, the underlying operating system resources might allow access in only one of these modes.","pos":[109,223]},{"content":"By default, <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> opens the operating system handle synchronously.","pos":[224,312],"source":" By default, <xref:System.IO.FileStream> opens the operating system handle synchronously."},{"content":"In Windows, this slows down asynchronous methods.","pos":[313,362]},{"content":"If asynchronous methods are used, use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> constructor.","pos":[363,570],"source":" If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor."}]}]},{"pos":[1415,1609],"content":"[!NOTE]\n Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading. For additional information, see <xref:System.IO.Stream.CanRead%2A>.","leadings":["","> "],"nodes":[{"content":" Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading. For additional information, see <xref:System.IO.Stream.CanRead%2A>.","pos":[8,192],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.","pos":[1,116],"source":" Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>.","pos":[117,184],"source":" For additional information, see <xref:System.IO.Stream.CanRead%2A>."}]}]},{"pos":[1616,1958],"content":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginRead%2A>. Errors that occur during an asynchronous read request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndRead%2A>.","nodes":[{"content":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginRead%2A>. Errors that occur during an asynchronous read request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndRead%2A>.","pos":[0,342],"nodes":[{"content":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id=\"ph1\">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>.","pos":[0,135],"source":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginRead%2A>."},{"content":"Errors that occur during an asynchronous read request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph>.","pos":[136,342],"source":" Errors that occur during an asynchronous read request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndRead%2A>."}]}]},{"pos":[1965,2089],"content":"<xref:System.IO.Stream.EndRead%2A> must be called with this <xref:System.IAsyncResult> to find out how many bytes were read.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> must be called with this <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> to find out how many bytes were read.","pos":[0,124],"source":"<xref:System.IO.Stream.EndRead%2A> must be called with this <xref:System.IAsyncResult> to find out how many bytes were read."}]},{"pos":[2096,2186],"content":"Multiple simultaneous asynchronous requests render the request completion order uncertain.","nodes":[{"content":"Multiple simultaneous asynchronous requests render the request completion order uncertain.","pos":[0,90]}]},{"pos":[2193,2308],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[108407,110733],"yaml":true,"extradata":"MT"},{"content":"The buffer to read data into.","nodes":[{"pos":[0,29],"content":"The buffer to read data into.","nodes":[{"content":"The buffer to read data into.","pos":[0,29]}]}],"pos":[111598,111628],"yaml":true},{"content":"The byte offset in <code>array</code> at which to begin reading.","nodes":[{"pos":[0,64],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin reading.","source":"The byte offset in <code>array</code> at which to begin reading."}],"pos":[111689,111754],"yaml":true},{"content":"The maximum number of bytes to read.","nodes":[{"pos":[0,36],"content":"The maximum number of bytes to read.","nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]}],"pos":[111817,111854],"yaml":true},{"content":"The method to be called when the asynchronous read operation is completed.","nodes":[{"pos":[0,74],"content":"The method to be called when the asynchronous read operation is completed.","nodes":[{"content":"The method to be called when the asynchronous read operation is completed.","pos":[0,74]}]}],"pos":[111929,112004],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous read request from other requests.","nodes":[{"pos":[0,104],"content":"A user-provided object that distinguishes this particular asynchronous read request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous read request from other requests.","pos":[0,104]}]}],"pos":[112071,112176],"yaml":true},{"content":"An object that references the asynchronous read.","nodes":[{"pos":[0,48],"content":"An object that references the asynchronous read.","nodes":[{"content":"An object that references the asynchronous read.","pos":[0,48]}]}],"pos":[112239,112288],"yaml":true},{"content":"The array length minus <code>offset</code> is less than <code>numBytes</code>.","nodes":[{"pos":[0,78],"content":"The array length minus <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">numBytes</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The array length minus <code>offset</code> is less than <code>numBytes</code>."}],"pos":[112440,112519],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[112621,112651],"yaml":true},{"content":"<code>offset</code> or <code>numBytes</code> is negative.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;numBytes&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>numBytes</code> is negative."}],"pos":[112765,112823],"yaml":true},{"content":"An asynchronous read was attempted past the end of the file.","nodes":[{"pos":[0,60],"content":"An asynchronous read was attempted past the end of the file.","nodes":[{"content":"An asynchronous read was attempted past the end of the file.","pos":[0,60]}]}],"pos":[112911,112972],"yaml":true},{"content":"Begins an asynchronous write operation. (Consider using <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)","nodes":[{"pos":[0,194],"content":"Begins an asynchronous write operation. (Consider using <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)","nodes":[{"content":"Begins an asynchronous write operation.","pos":[0,39]},{"content":"(Consider using <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"&gt;&lt;/xref&gt;</ph> instead.)","pos":[40,194],"source":" (Consider using <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)"}]}],"pos":[114405,114600],"yaml":true},{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.  \n  \n <xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>. <xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.  \n  \n This method overrides <xref:System.IO.Stream.BeginWrite%2A>.  \n  \n <xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O. While either can be used, the underlying operating system resources might allow access in only one of these modes. By default, <xref:System.IO.FileStream> opens the operating system handle synchronously. In Windows, this slows down asynchronous methods. If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \n  \n If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginWrite%2A>. Errors that occur during an asynchronous write request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndWrite%2A>.  \n  \n Multiple simultaneous asynchronous requests render the request completion order uncertain.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,590],"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.","nodes":[{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id=\"ph1\">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> to implement asynchronous file operations.","pos":[0,206],"source":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations."},{"content":"These methods are still available in the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id=\"ph2\">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.","pos":[207,590],"source":" These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily."}]},{"pos":[597,838],"content":"<xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>. <xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.","nodes":[{"content":"<xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>. <xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.","pos":[0,241],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> must be called exactly once on every <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id=\"ph3\">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>.","pos":[0,151],"source":"<xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> will block until the I/O operation has completed.","pos":[152,241],"source":" <xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed."}]}]},{"pos":[845,905],"content":"This method overrides <xref:System.IO.Stream.BeginWrite%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph>.","pos":[0,60],"source":"This method overrides <xref:System.IO.Stream.BeginWrite%2A>."}]},{"pos":[912,1482],"content":"<xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O. While either can be used, the underlying operating system resources might allow access in only one of these modes. By default, <xref:System.IO.FileStream> opens the operating system handle synchronously. In Windows, this slows down asynchronous methods. If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.","nodes":[{"content":"<xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O. While either can be used, the underlying operating system resources might allow access in only one of these modes. By default, <xref:System.IO.FileStream> opens the operating system handle synchronously. In Windows, this slows down asynchronous methods. If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.","pos":[0,570],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> provides two different modes of operation: synchronous I/O and asynchronous I/O.","pos":[0,108],"source":"<xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O."},{"content":"While either can be used, the underlying operating system resources might allow access in only one of these modes.","pos":[109,223]},{"content":"By default, <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> opens the operating system handle synchronously.","pos":[224,312],"source":" By default, <xref:System.IO.FileStream> opens the operating system handle synchronously."},{"content":"In Windows, this slows down asynchronous methods.","pos":[313,362]},{"content":"If asynchronous methods are used, use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29&gt;</ph> constructor.","pos":[363,570],"source":" If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor."}]}]},{"pos":[1489,1834],"content":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginWrite%2A>. Errors that occur during an asynchronous write request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndWrite%2A>.","nodes":[{"content":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginWrite%2A>. Errors that occur during an asynchronous write request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndWrite%2A>.","pos":[0,345],"nodes":[{"content":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <ph id=\"ph1\">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>.","pos":[0,136],"source":"If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginWrite%2A>."},{"content":"Errors that occur during an asynchronous write request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph>.","pos":[137,345],"source":" Errors that occur during an asynchronous write request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndWrite%2A>."}]}]},{"pos":[1841,1931],"content":"Multiple simultaneous asynchronous requests render the request completion order uncertain.","nodes":[{"content":"Multiple simultaneous asynchronous requests render the request completion order uncertain.","pos":[0,90]}]},{"pos":[1938,2053],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[114611,116679],"yaml":true,"extradata":"MT"},{"content":"The buffer containing data to write to the current stream.","nodes":[{"pos":[0,58],"content":"The buffer containing data to write to the current stream.","nodes":[{"content":"The buffer containing data to write to the current stream.","pos":[0,58]}]}],"pos":[117545,117604],"yaml":true},{"content":"The zero-based byte offset in <code>array</code> at which to begin copying bytes to the current stream.","nodes":[{"pos":[0,103],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin copying bytes to the current stream.","source":"The zero-based byte offset in <code>array</code> at which to begin copying bytes to the current stream."}],"pos":[117665,117769],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[117832,117870],"yaml":true},{"content":"The method to be called when the asynchronous write operation is completed.","nodes":[{"pos":[0,75],"content":"The method to be called when the asynchronous write operation is completed.","nodes":[{"content":"The method to be called when the asynchronous write operation is completed.","pos":[0,75]}]}],"pos":[117945,118021],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous write request from other requests.","nodes":[{"pos":[0,105],"content":"A user-provided object that distinguishes this particular asynchronous write request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous write request from other requests.","pos":[0,105]}]}],"pos":[118088,118194],"yaml":true},{"content":"An object that references the asynchronous write.","nodes":[{"pos":[0,49],"content":"An object that references the asynchronous write.","nodes":[{"content":"An object that references the asynchronous write.","pos":[0,49]}]}],"pos":[118257,118307],"yaml":true},{"content":"<code>array</code> length minus <code>offset</code> is less than <code>numBytes</code>.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> length minus <ph id=\"ph2\">&lt;code&gt;offset&lt;/code&gt;</ph> is less than <ph id=\"ph3\">&lt;code&gt;numBytes&lt;/code&gt;</ph>.","source":"<code>array</code> length minus <code>offset</code> is less than <code>numBytes</code>."}],"pos":[118460,118548],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[118650,118680],"yaml":true},{"content":"<code>offset</code> or <code>numBytes</code> is negative.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;numBytes&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>numBytes</code> is negative."}],"pos":[118794,118852],"yaml":true},{"content":"The stream does not support writing.","nodes":[{"pos":[0,36],"content":"The stream does not support writing.","nodes":[{"content":"The stream does not support writing.","pos":[0,36]}]}],"pos":[118954,118991],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[119097,119119],"yaml":true},{"content":"An I/O error occurred.","nodes":[{"pos":[0,22],"content":"An I/O error occurred.","nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]}],"pos":[119207,119230],"yaml":true},{"content":"Gets a value indicating whether the current stream supports reading.","nodes":[{"pos":[0,68],"content":"Gets a value indicating whether the current stream supports reading.","nodes":[{"content":"Gets a value indicating whether the current stream supports reading.","pos":[0,68]}]}],"pos":[120309,120378],"yaml":true},{"content":"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.ReadByte%2A>, and <xref:System.IO.FileStream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`.","nodes":[{"pos":[0,262],"content":"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.ReadByte%2A>, and <xref:System.IO.FileStream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.","nodes":[{"content":"If a class derived from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.FileStream.ReadByte%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph> methods throw a <ph id=\"ph5\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,262],"source":"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.ReadByte%2A>, and <xref:System.IO.FileStream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>."}]},{"pos":[269,324],"content":"If the stream is closed, this property returns <ph id=\"ph1\">`false`</ph>.","source":"If the stream is closed, this property returns `false`."}],"pos":[120389,120718],"yaml":true,"extradata":"MT"},{"content":"`true` if the stream supports reading; `false` if the stream is closed or was opened with write-only access.","nodes":[{"pos":[0,108],"content":"<ph id=\"ph1\">`true`</ph> if the stream supports reading; <ph id=\"ph2\">`false`</ph> if the stream is closed or was opened with write-only access.","source":"`true` if the stream supports reading; `false` if the stream is closed or was opened with write-only access."}],"pos":[121614,121725],"yaml":true},{"content":"Gets a value indicating whether the current stream supports seeking.","nodes":[{"pos":[0,68],"content":"Gets a value indicating whether the current stream supports seeking.","nodes":[{"content":"Gets a value indicating whether the current stream supports seeking.","pos":[0,68]}]}],"pos":[123047,123116],"yaml":true},{"content":"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.FileStream.Length%2A>, <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Position%2A>, and <xref:System.IO.FileStream.Seek%2A> throw a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`.","nodes":[{"pos":[0,289],"content":"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.FileStream.Length%2A>, <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Position%2A>, and <xref:System.IO.FileStream.Seek%2A> throw a <xref:System.NotSupportedException>.","nodes":[{"content":"If a class derived from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id=\"ph2\">&lt;xref:System.IO.FileStream.Length%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.FileStream.SetLength%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.FileStream.Position%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph> throw a <ph id=\"ph6\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,289],"source":"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.FileStream.Length%2A>, <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Position%2A>, and <xref:System.IO.FileStream.Seek%2A> throw a <xref:System.NotSupportedException>."}]},{"pos":[296,351],"content":"If the stream is closed, this property returns <ph id=\"ph1\">`false`</ph>.","source":"If the stream is closed, this property returns `false`."}],"pos":[123127,123483],"yaml":true,"extradata":"MT"},{"content":"`true` if the stream supports seeking; `false` if the stream is closed or if the `FileStream` was constructed from an operating-system handle such as a pipe or output to the console.","nodes":[{"pos":[0,182],"content":"<ph id=\"ph1\">`true`</ph> if the stream supports seeking; <ph id=\"ph2\">`false`</ph> if the stream is closed or if the <ph id=\"ph3\">`FileStream`</ph> was constructed from an operating-system handle such as a pipe or output to the console.","source":"`true` if the stream supports seeking; `false` if the stream is closed or if the `FileStream` was constructed from an operating-system handle such as a pipe or output to the console."}],"pos":[124073,124258],"yaml":true},{"content":"Gets a value indicating whether the current stream supports writing.","nodes":[{"pos":[0,68],"content":"Gets a value indicating whether the current stream supports writing.","nodes":[{"content":"Gets a value indicating whether the current stream supports writing.","pos":[0,68]}]}],"pos":[125586,125655],"yaml":true},{"content":"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.FileStream.BeginWrite%2A>, or <xref:System.IO.FileStream.WriteByte%2A> throws a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`.","nodes":[{"pos":[0,296],"content":"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.FileStream.BeginWrite%2A>, or <xref:System.IO.FileStream.WriteByte%2A> throws a <xref:System.NotSupportedException>.","nodes":[{"content":"If a class derived from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id=\"ph2\">&lt;xref:System.IO.FileStream.SetLength%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.FileStream.Write%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.IO.FileStream.WriteByte%2A&gt;</ph> throws a <ph id=\"ph6\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,296],"source":"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.FileStream.BeginWrite%2A>, or <xref:System.IO.FileStream.WriteByte%2A> throws a <xref:System.NotSupportedException>."}]},{"pos":[303,358],"content":"If the stream is closed, this property returns <ph id=\"ph1\">`false`</ph>.","source":"If the stream is closed, this property returns `false`."}],"pos":[125666,126029],"yaml":true,"extradata":"MT"},{"content":"`true` if the stream supports writing; `false` if the stream is closed or was opened with read-only access.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">`true`</ph> if the stream supports writing; <ph id=\"ph2\">`false`</ph> if the stream is closed or was opened with read-only access.","source":"`true` if the stream supports writing; `false` if the stream is closed or was opened with read-only access."}],"pos":[127391,127501],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.IO.FileStream\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,133],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.IO.FileStream\"></xref> and optionally releases the managed resources."}],"pos":[128897,129031],"yaml":true},{"content":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.FileStream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.FileStream.Dispose%2A> with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.FileStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.","nodes":[{"pos":[0,418],"content":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.FileStream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.FileStream.Dispose%2A> with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,141],"source":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id=\"ph2\">&lt;xref:System.IO.FileStream.Dispose%2A&gt;</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[142,305],"source":" <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.FileStream.Dispose%2A> method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">&lt;xref:System.IO.FileStream.Dispose%2A&gt;</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[306,418],"source":" <xref:System.Object.Finalize%2A> invokes <xref:System.IO.FileStream.Dispose%2A> with `disposing` set to `false`."}]},{"pos":[425,687],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.FileStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.IO.FileStream&gt;</ph> references.","pos":[0,154],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.FileStream> references."},{"content":"This method invokes the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.","pos":[155,262],"source":" This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object."}]}],"pos":[129042,129734],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[129889,129992],"yaml":true},{"content":"Waits for the pending asynchronous read operation to complete. (Consider using <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)","nodes":[{"pos":[0,216],"content":"Waits for the pending asynchronous read operation to complete. (Consider using <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)","nodes":[{"content":"Waits for the pending asynchronous read operation to complete.","pos":[0,62]},{"content":"(Consider using <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"&gt;&lt;/xref&gt;</ph> instead.)","pos":[63,216],"source":" (Consider using <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)"}]}],"pos":[131392,131609],"yaml":true},{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.  \n  \n <xref:System.IO.FileStream.EndRead%2A> must be called exactly for every call to <xref:System.IO.FileStream.BeginRead%2A>. Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.  \n  \n This method overrides <xref:System.IO.Stream.EndRead%2A>.  \n  \n <xref:System.IO.FileStream.EndRead%2A> can be called on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginRead%2A>. Calling <xref:System.IO.FileStream.EndRead%2A> tells you how many bytes were read from the stream. <xref:System.IO.FileStream.EndRead%2A> will block until the I/O operation has completed.","nodes":[{"pos":[0,588],"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.","nodes":[{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id=\"ph1\">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> to implement asynchronous file operations.","pos":[0,204],"source":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations."},{"content":"These methods are still available in the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id=\"ph2\">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.","pos":[205,588],"source":" These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily."}]},{"pos":[595,825],"content":"<xref:System.IO.FileStream.EndRead%2A> must be called exactly for every call to <xref:System.IO.FileStream.BeginRead%2A>. Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.","nodes":[{"content":"<xref:System.IO.FileStream.EndRead%2A> must be called exactly for every call to <xref:System.IO.FileStream.BeginRead%2A>. Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.","pos":[0,230],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> must be called exactly for every call to <ph id=\"ph2\">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>.","pos":[0,121],"source":"<xref:System.IO.FileStream.EndRead%2A> must be called exactly for every call to <xref:System.IO.FileStream.BeginRead%2A>."},{"content":"Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.","pos":[122,230]}]}]},{"pos":[832,889],"content":"This method overrides <xref:System.IO.Stream.EndRead%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>.","pos":[0,57],"source":"This method overrides <xref:System.IO.Stream.EndRead%2A>."}]},{"pos":[896,1219],"content":"<xref:System.IO.FileStream.EndRead%2A> can be called on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginRead%2A>. Calling <xref:System.IO.FileStream.EndRead%2A> tells you how many bytes were read from the stream. <xref:System.IO.FileStream.EndRead%2A> will block until the I/O operation has completed.","nodes":[{"content":"<xref:System.IO.FileStream.EndRead%2A> can be called on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginRead%2A>. Calling <xref:System.IO.FileStream.EndRead%2A> tells you how many bytes were read from the stream. <xref:System.IO.FileStream.EndRead%2A> will block until the I/O operation has completed.","pos":[0,323],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> can be called on every <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id=\"ph3\">&lt;xref:System.IO.FileStream.BeginRead%2A&gt;</ph>.","pos":[0,135],"source":"<xref:System.IO.FileStream.EndRead%2A> can be called on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginRead%2A>."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> tells you how many bytes were read from the stream.","pos":[136,234],"source":" Calling <xref:System.IO.FileStream.EndRead%2A> tells you how many bytes were read from the stream."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndRead%2A&gt;</ph> will block until the I/O operation has completed.","pos":[235,323],"source":" <xref:System.IO.FileStream.EndRead%2A> will block until the I/O operation has completed."}]}]}],"pos":[131620,132848],"yaml":true,"extradata":"MT"},{"content":"The reference to the pending asynchronous request to wait for.","nodes":[{"pos":[0,62],"content":"The reference to the pending asynchronous request to wait for.","nodes":[{"content":"The reference to the pending asynchronous request to wait for.","pos":[0,62]}]}],"pos":[133652,133715],"yaml":true},{"content":"The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.","nodes":[{"pos":[0,203],"content":"The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.","nodes":[{"content":"The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.","pos":[0,203],"nodes":[{"content":"The number of bytes read from the stream, between 0 and the number of bytes you requested.","pos":[0,90]},{"content":"Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.","pos":[91,203]}]}]}],"pos":[133771,133975],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[134133,134169],"yaml":true},{"content":"This <xref href=\"System.IAsyncResult\"></xref> object was not created by calling <xref href=\"System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> on this class.","nodes":[{"pos":[0,222],"content":"This <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object was not created by calling <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> on this class.","source":"This <xref href=\"System.IAsyncResult\"></xref> object was not created by calling <xref href=\"System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> on this class."}],"pos":[134263,134486],"yaml":true},{"content":"<xref href=\"System.IO.FileStream.EndRead(System.IAsyncResult)\"></xref> is called multiple times.","nodes":[{"pos":[0,96],"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.EndRead(System.IAsyncResult)\"&gt;&lt;/xref&gt;</ph> is called multiple times.","source":"<xref href=\"System.IO.FileStream.EndRead(System.IAsyncResult)\"></xref> is called multiple times."}],"pos":[134596,134693],"yaml":true},{"content":"The stream is closed or an internal error has occurred.","nodes":[{"pos":[0,55],"content":"The stream is closed or an internal error has occurred.","nodes":[{"content":"The stream is closed or an internal error has occurred.","pos":[0,55]}]}],"pos":[134781,134837],"yaml":true},{"content":"Ends an asynchronous write operation and blocks until the I/O operation is complete. (Consider using <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)","nodes":[{"pos":[0,239],"content":"Ends an asynchronous write operation and blocks until the I/O operation is complete. (Consider using <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)","nodes":[{"content":"Ends an asynchronous write operation and blocks until the I/O operation is complete.","pos":[0,84]},{"content":"(Consider using <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"&gt;&lt;/xref&gt;</ph> instead.)","pos":[85,239],"source":" (Consider using <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)"}]}],"pos":[136000,136240],"yaml":true},{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.  \n  \n This method overrides <xref:System.IO.Stream.EndWrite%2A>.  \n  \n <xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>. <xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.","nodes":[{"pos":[0,590],"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.","nodes":[{"content":"In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id=\"ph1\">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> to implement asynchronous file operations.","pos":[0,206],"source":"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations."},{"content":"These methods are still available in the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id=\"ph2\">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.","pos":[207,590],"source":" These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily."}]},{"pos":[597,655],"content":"This method overrides <xref:System.IO.Stream.EndWrite%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph>.","pos":[0,58],"source":"This method overrides <xref:System.IO.Stream.EndWrite%2A>."}]},{"pos":[662,903],"content":"<xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>. <xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.","nodes":[{"content":"<xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>. <xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.","pos":[0,241],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> must be called exactly once on every <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id=\"ph3\">&lt;xref:System.IO.FileStream.BeginWrite%2A&gt;</ph>.","pos":[0,151],"source":"<xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileStream.EndWrite%2A&gt;</ph> will block until the I/O operation has completed.","pos":[152,241],"source":" <xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed."}]}]}],"pos":[136251,137161],"yaml":true,"extradata":"MT"},{"content":"The pending asynchronous I/O request.","nodes":[{"pos":[0,37],"content":"The pending asynchronous I/O request.","nodes":[{"content":"The pending asynchronous I/O request.","pos":[0,37]}]}],"pos":[137967,138005],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[138164,138200],"yaml":true},{"content":"This <xref href=\"System.IAsyncResult\"></xref> object was not created by calling <xref href=\"System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> on this class.","nodes":[{"pos":[0,219],"content":"This <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object was not created by calling <ph id=\"ph2\">&lt;xref href=\"System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> on this class.","source":"This <xref href=\"System.IAsyncResult\"></xref> object was not created by calling <xref href=\"System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> on this class."}],"pos":[138294,138514],"yaml":true},{"content":"<xref href=\"System.IO.FileStream.EndWrite(System.IAsyncResult)\"></xref> is called multiple times.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.EndWrite(System.IAsyncResult)\"&gt;&lt;/xref&gt;</ph> is called multiple times.","source":"<xref href=\"System.IO.FileStream.EndWrite(System.IAsyncResult)\"></xref> is called multiple times."}],"pos":[138624,138722],"yaml":true},{"content":"The stream is closed or an internal error has occurred.","nodes":[{"pos":[0,55],"content":"The stream is closed or an internal error has occurred.","nodes":[{"content":"The stream is closed or an internal error has occurred.","pos":[0,55]}]}],"pos":[138810,138866],"yaml":true},{"content":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the `FileStream`.","nodes":[{"pos":[0,129],"content":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id=\"ph1\">`FileStream`</ph>.","source":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the `FileStream`."}],"pos":[139955,140085],"yaml":true},{"content":"The garbage collector calls `Finalize` when the current object is ready to be finalized. `Finalize` closes the `FileStream`.","nodes":[{"pos":[0,124],"content":"The garbage collector calls `Finalize` when the current object is ready to be finalized. `Finalize` closes the `FileStream`.","nodes":[{"content":"The garbage collector calls <ph id=\"ph1\">`Finalize`</ph> when the current object is ready to be finalized.","pos":[0,88],"source":"The garbage collector calls `Finalize` when the current object is ready to be finalized."},{"content":"<ph id=\"ph1\">`Finalize`</ph> closes the <ph id=\"ph2\">`FileStream`</ph>.","pos":[89,124],"source":"`Finalize` closes the `FileStream`."}]}],"pos":[140096,140221],"yaml":true,"extradata":"MT"},{"content":"Clears buffers for this stream and causes any buffered data to be written to the file.","nodes":[{"pos":[0,86],"content":"Clears buffers for this stream and causes any buffered data to be written to the file.","nodes":[{"content":"Clears buffers for this stream and causes any buffered data to be written to the file.","pos":[0,86]}]}],"pos":[141594,141681],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.Flush%2A?displayProperty=fullName>.  \n  \n When you call the <xref:System.IO.FileStream.Flush%2A?displayProperty=fullName> method, the operating system I/O buffer is also flushed.  \n  \n A stream’s encoder is not flushed unless you explicitly call <xref:System.IO.FileStream.Flush%2A> or dispose of the object. Setting <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  \n  \n Because a buffer can be used for either reading or writing, <xref:System.IO.FileStream.Flush> performs the following two functions:  \n  \n-   Any data previously written to the buffer is copied to the file and the buffer is cleared except for its encoder state.  \n  \n-   If <xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=fullName> is `true` and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer. The buffer is then cleared.  \n  \n Use the <xref:System.IO.FileStream.Flush%28System.Boolean%29> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.","nodes":[{"pos":[0,80],"content":"This method overrides <xref:System.IO.Stream.Flush%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=fullName&gt;</ph>.","pos":[0,80],"source":"This method overrides <xref:System.IO.Stream.Flush%2A?displayProperty=fullName>."}]},{"pos":[87,223],"content":"When you call the <xref:System.IO.FileStream.Flush%2A?displayProperty=fullName> method, the operating system I/O buffer is also flushed.","nodes":[{"content":"When you call the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%2A?displayProperty=fullName&gt;</ph> method, the operating system I/O buffer is also flushed.","pos":[0,136],"source":"When you call the <xref:System.IO.FileStream.Flush%2A?displayProperty=fullName> method, the operating system I/O buffer is also flushed."}]},{"pos":[230,816],"content":"A stream’s encoder is not flushed unless you explicitly call <xref:System.IO.FileStream.Flush%2A> or dispose of the object. Setting <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","nodes":[{"content":"A stream’s encoder is not flushed unless you explicitly call <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> or dispose of the object.","pos":[0,123],"source":"A stream’s encoder is not flushed unless you explicitly call <xref:System.IO.FileStream.Flush%2A> or dispose of the object."},{"content":"Setting <ph id=\"ph1\">&lt;xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName&gt;</ph> to <ph id=\"ph2\">`true`</ph> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.","pos":[124,315],"source":" Setting <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed."},{"content":"This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.","pos":[316,440]},{"content":"This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.","pos":[441,586]}]},{"pos":[823,954],"content":"Because a buffer can be used for either reading or writing, <xref:System.IO.FileStream.Flush> performs the following two functions:","nodes":[{"content":"Because a buffer can be used for either reading or writing, <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush&gt;</ph> performs the following two functions:","pos":[0,131],"source":"Because a buffer can be used for either reading or writing, <xref:System.IO.FileStream.Flush> performs the following two functions:"}]},{"pos":[964,1083],"content":"Any data previously written to the buffer is copied to the file and the buffer is cleared except for its encoder state.","nodes":[{"content":"Any data previously written to the buffer is copied to the file and the buffer is cleared except for its encoder state.","pos":[0,119]}]},{"pos":[1093,1370],"content":"If <xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=fullName> is `true` and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer. The buffer is then cleared.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=fullName&gt;</ph> is <ph id=\"ph2\">`true`</ph> and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer.","pos":[0,249],"source":"If <xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=fullName> is `true` and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer."},{"content":"The buffer is then cleared.","pos":[250,277]}]},{"pos":[1377,1550],"content":"Use the <xref:System.IO.FileStream.Flush%28System.Boolean%29> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%28System.Boolean%29&gt;</ph> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.","pos":[0,173],"source":"Use the <xref:System.IO.FileStream.Flush%28System.Boolean%29> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk."}]}],"pos":[141692,143257],"yaml":true,"extradata":"MT"},{"content":"An I/O error occurred.","nodes":[{"pos":[0,22],"content":"An I/O error occurred.","nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]}],"pos":[144001,144024],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[144130,144152],"yaml":true},{"content":"Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.","nodes":[{"pos":[0,133],"content":"Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.","nodes":[{"content":"Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.","pos":[0,133]}]}],"pos":[145476,145610],"yaml":true},{"content":"Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.  \n  \n When you call the <xref:System.IO.FileStream.Flush%2A> method, the operating system I/O buffer is also flushed.","nodes":[{"pos":[0,113],"content":"Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.","nodes":[{"content":"Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.","pos":[0,113]}]},{"pos":[120,231],"content":"When you call the <xref:System.IO.FileStream.Flush%2A> method, the operating system I/O buffer is also flushed.","nodes":[{"content":"When you call the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Flush%2A&gt;</ph> method, the operating system I/O buffer is also flushed.","pos":[0,111],"source":"When you call the <xref:System.IO.FileStream.Flush%2A> method, the operating system I/O buffer is also flushed."}]}],"pos":[145621,145857],"yaml":true,"extradata":"MT"},{"content":"`true` to flush all intermediate file buffers; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> to flush all intermediate file buffers; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to flush all intermediate file buffers; otherwise, `false`."}],"pos":[146010,146079],"yaml":true},{"content":"Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.","nodes":[{"pos":[0,151],"content":"Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.","nodes":[{"content":"Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.","pos":[0,151]}]}],"pos":[147580,147732],"yaml":true},{"content":"When you call the <xref:System.IO.FileStream.FlushAsync%2A> method, the operating system I/O buffer is also flushed.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.","nodes":[{"pos":[0,116],"content":"When you call the <xref:System.IO.FileStream.FlushAsync%2A> method, the operating system I/O buffer is also flushed.","nodes":[{"content":"When you call the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.FlushAsync%2A&gt;</ph> method, the operating system I/O buffer is also flushed.","pos":[0,116],"source":"When you call the <xref:System.IO.FileStream.FlushAsync%2A> method, the operating system I/O buffer is also flushed."}]},{"pos":[123,505],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.","pos":[0,382],"nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."},{"content":"If the handle to the file is disposed, the returned task contains the <ph id=\"ph1\">&lt;xref:System.ObjectDisposedException&gt;</ph> exception in the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property.","pos":[200,382],"source":" If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property."}]}]}],"pos":[147743,148253],"yaml":true,"extradata":"MT"},{"content":"The token to monitor for cancellation requests.","nodes":[{"pos":[0,47],"content":"The token to monitor for cancellation requests.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]}]}],"pos":[148497,148545],"yaml":true},{"content":"A task that represents the asynchronous flush operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous flush operation.","nodes":[{"content":"A task that represents the asynchronous flush operation.","pos":[0,56]}]}],"pos":[148616,148673],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[148838,148868],"yaml":true},{"content":"Gets a <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> object that encapsulates the access control list (ACL) entries for the file described by the current <xref href=\"System.IO.FileStream\"></xref> object.","nodes":[{"pos":[0,221],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.FileSecurity\"&gt;&lt;/xref&gt;</ph> object that encapsulates the access control list (ACL) entries for the file described by the current <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets a <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> object that encapsulates the access control list (ACL) entries for the file described by the current <xref href=\"System.IO.FileStream\"></xref> object."}],"pos":[150129,150351],"yaml":true},{"content":"While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.GetAccessControl%2A> can be used to retrieve the access control list (ACL) entries of an existing file, consider using <xref:System.IO.File.GetAccessControl%2A?displayProperty=fullName> method, as it is easier to use.  \n  \n Use the <xref:System.IO.FileStream.GetAccessControl%2A> method to retrieve the ACL entries for a file.  \n  \n An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).","nodes":[{"pos":[0,292],"content":"While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.GetAccessControl%2A> can be used to retrieve the access control list (ACL) entries of an existing file, consider using <xref:System.IO.File.GetAccessControl%2A?displayProperty=fullName> method, as it is easier to use.","nodes":[{"content":"While the <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> class and <ph id=\"ph2\">&lt;xref:System.IO.FileStream.GetAccessControl%2A&gt;</ph> can be used to retrieve the access control list (ACL) entries of an existing file, consider using <ph id=\"ph3\">&lt;xref:System.IO.File.GetAccessControl%2A?displayProperty=fullName&gt;</ph> method, as it is easier to use.","pos":[0,292],"source":"While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.GetAccessControl%2A> can be used to retrieve the access control list (ACL) entries of an existing file, consider using <xref:System.IO.File.GetAccessControl%2A?displayProperty=fullName> method, as it is easier to use."}]},{"pos":[299,401],"content":"Use the <xref:System.IO.FileStream.GetAccessControl%2A> method to retrieve the ACL entries for a file.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.GetAccessControl%2A&gt;</ph> method to retrieve the ACL entries for a file.","pos":[0,102],"source":"Use the <xref:System.IO.FileStream.GetAccessControl%2A> method to retrieve the ACL entries for a file."}]},{"pos":[408,673],"content":"An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).","nodes":[{"content":"An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.","pos":[0,114]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Add or Remove Access Control List Entries<ept id=\"p1\">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.","pos":[115,265],"source":" For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)."}]}],"pos":[150362,151042],"yaml":true,"extradata":"MT"},{"content":"An object that encapsulates the access control settings for the file described by the current <xref href=\"System.IO.FileStream\"></xref> object.","nodes":[{"pos":[0,143],"content":"An object that encapsulates the access control settings for the file described by the current <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> object.","source":"An object that encapsulates the access control settings for the file described by the current <xref href=\"System.IO.FileStream\"></xref> object."}],"pos":[151241,151385],"yaml":true},{"content":"The file is closed.","nodes":[{"pos":[0,19],"content":"The file is closed.","nodes":[{"content":"The file is closed.","pos":[0,19]}]}],"pos":[151556,151576],"yaml":true},{"content":"An I/O error occurred while opening the file.","nodes":[{"pos":[0,45],"content":"An I/O error occurred while opening the file.","nodes":[{"content":"An I/O error occurred while opening the file.","pos":[0,45]}]}],"pos":[151664,151710],"yaml":true},{"content":"The file could not be found.","nodes":[{"pos":[0,28],"content":"The file could not be found.","nodes":[{"content":"The file could not be found.","pos":[0,28]}]}],"pos":[151800,151829],"yaml":true},{"content":"This operation is not supported on the current platform.  \n  \n -or-  \n  \n The caller does not have the required permission.","nodes":[{"pos":[0,56],"content":"This operation is not supported on the current platform.","nodes":[{"content":"This operation is not supported on the current platform.","pos":[0,56]}]},{"pos":[63,67],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[74,123],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[151943,152073],"yaml":true},{"content":"Gets the operating system file handle for the file that the current `FileStream` object encapsulates.","nodes":[{"pos":[0,101],"content":"Gets the operating system file handle for the file that the current <ph id=\"ph1\">`FileStream`</ph> object encapsulates.","source":"Gets the operating system file handle for the file that the current `FileStream` object encapsulates."}],"pos":[153049,153151],"yaml":true},{"content":"This property is an operating system handle for use with operating-system-provided system calls (such as `ReadFile` on Windows). It will not work with C library functions that expect a file descriptor, such as `fread`.  \n  \n The operating system handle might have been opened synchronously or asynchronously, depending on which `FileStream` constructor was called. Use the <xref:System.IO.FileStream.IsAsync%2A> property to discover whether this handle was opened asynchronously. In Win32, this means the handle was opened for overlapped IO, and it requires different parameters to `ReadFile` and `WriteFile`.  \n  \n> [!CAUTION]\n>  Data corruption might occur if a `FileStream` is created, its handle is passed, some operation moves the handle's file pointer, and then the `FileStream` is used again. Multiple threads cannot safely write to the same file simultaneously, and `FileStream` buffering code assumes that it exclusively controls the handle. `FileStream` might throw an <xref:System.IO.IOException> if `FileStream` detects that some other process has moved the file pointer. To avoid this, do not write any data into a portion of the file that `FileStream` might have buffered, and restore the file pointer to the location it had when methods were last called on `FileStream`.","nodes":[{"pos":[0,218],"content":"This property is an operating system handle for use with operating-system-provided system calls (such as `ReadFile` on Windows). It will not work with C library functions that expect a file descriptor, such as `fread`.","nodes":[{"content":"This property is an operating system handle for use with operating-system-provided system calls (such as <ph id=\"ph1\">`ReadFile`</ph> on Windows).","pos":[0,128],"source":"This property is an operating system handle for use with operating-system-provided system calls (such as `ReadFile` on Windows)."},{"content":"It will not work with C library functions that expect a file descriptor, such as <ph id=\"ph1\">`fread`</ph>.","pos":[129,218],"source":" It will not work with C library functions that expect a file descriptor, such as `fread`."}]},{"pos":[225,609],"content":"The operating system handle might have been opened synchronously or asynchronously, depending on which `FileStream` constructor was called. Use the <xref:System.IO.FileStream.IsAsync%2A> property to discover whether this handle was opened asynchronously. In Win32, this means the handle was opened for overlapped IO, and it requires different parameters to `ReadFile` and `WriteFile`.","nodes":[{"content":"The operating system handle might have been opened synchronously or asynchronously, depending on which <ph id=\"ph1\">`FileStream`</ph> constructor was called.","pos":[0,139],"source":"The operating system handle might have been opened synchronously or asynchronously, depending on which `FileStream` constructor was called."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property to discover whether this handle was opened asynchronously.","pos":[140,254],"source":" Use the <xref:System.IO.FileStream.IsAsync%2A> property to discover whether this handle was opened asynchronously."},{"content":"In Win32, this means the handle was opened for overlapped IO, and it requires different parameters to <ph id=\"ph1\">`ReadFile`</ph> and <ph id=\"ph2\">`WriteFile`</ph>.","pos":[255,384],"source":" In Win32, this means the handle was opened for overlapped IO, and it requires different parameters to `ReadFile` and `WriteFile`."}]},{"pos":[617,1285],"content":"[!CAUTION]\n Data corruption might occur if a `FileStream` is created, its handle is passed, some operation moves the handle's file pointer, and then the `FileStream` is used again. Multiple threads cannot safely write to the same file simultaneously, and `FileStream` buffering code assumes that it exclusively controls the handle. `FileStream` might throw an <xref:System.IO.IOException> if `FileStream` detects that some other process has moved the file pointer. To avoid this, do not write any data into a portion of the file that `FileStream` might have buffered, and restore the file pointer to the location it had when methods were last called on `FileStream`.","leadings":["","> "],"nodes":[{"content":" Data corruption might occur if a `FileStream` is created, its handle is passed, some operation moves the handle's file pointer, and then the `FileStream` is used again. Multiple threads cannot safely write to the same file simultaneously, and `FileStream` buffering code assumes that it exclusively controls the handle. `FileStream` might throw an <xref:System.IO.IOException> if `FileStream` detects that some other process has moved the file pointer. To avoid this, do not write any data into a portion of the file that `FileStream` might have buffered, and restore the file pointer to the location it had when methods were last called on `FileStream`.","pos":[11,666],"nodes":[{"content":"Data corruption might occur if a <ph id=\"ph1\">`FileStream`</ph> is created, its handle is passed, some operation moves the handle's file pointer, and then the <ph id=\"ph2\">`FileStream`</ph> is used again.","pos":[1,169],"source":" Data corruption might occur if a `FileStream` is created, its handle is passed, some operation moves the handle's file pointer, and then the `FileStream` is used again."},{"content":"Multiple threads cannot safely write to the same file simultaneously, and <ph id=\"ph1\">`FileStream`</ph> buffering code assumes that it exclusively controls the handle.","pos":[170,320],"source":" Multiple threads cannot safely write to the same file simultaneously, and `FileStream` buffering code assumes that it exclusively controls the handle."},{"content":"<ph id=\"ph1\">`FileStream`</ph> might throw an <ph id=\"ph2\">&lt;xref:System.IO.IOException&gt;</ph> if <ph id=\"ph3\">`FileStream`</ph> detects that some other process has moved the file pointer.","pos":[321,453],"source":"`FileStream` might throw an <xref:System.IO.IOException> if `FileStream` detects that some other process has moved the file pointer."},{"content":"To avoid this, do not write any data into a portion of the file that <ph id=\"ph1\">`FileStream`</ph> might have buffered, and restore the file pointer to the location it had when methods were last called on <ph id=\"ph2\">`FileStream`</ph>.","pos":[454,655],"source":" To avoid this, do not write any data into a portion of the file that `FileStream` might have buffered, and restore the file pointer to the location it had when methods were last called on `FileStream`."}]}]}],"pos":[153162,154455],"yaml":true,"extradata":"MT"},{"content":"The operating system file handle for the file encapsulated by this `FileStream` object, or -1 if the `FileStream` has been closed.","nodes":[{"pos":[0,130],"content":"The operating system file handle for the file encapsulated by this <ph id=\"ph1\">`FileStream`</ph> object, or -1 if the <ph id=\"ph2\">`FileStream`</ph> has been closed.","source":"The operating system file handle for the file encapsulated by this `FileStream` object, or -1 if the `FileStream` has been closed."}],"pos":[154637,154768],"yaml":true},{"content":"The caller does not have the required permission.","nodes":[{"pos":[0,49],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[154935,154985],"yaml":true},{"content":"Gets a value indicating whether the `FileStream` was opened asynchronously or synchronously.","nodes":[{"pos":[0,92],"content":"Gets a value indicating whether the <ph id=\"ph1\">`FileStream`</ph> was opened asynchronously or synchronously.","source":"Gets a value indicating whether the `FileStream` was opened asynchronously or synchronously."}],"pos":[156113,156206],"yaml":true},{"content":"The `IsAsync` property detects whether the `FileStream` handle was opened asynchronously, enabling your code to use the <xref:System.IO.FileStream.Handle%2A> property correctly. In Win32, `IsAsync` being true means the handle was opened for overlapped I/O, and thus requires different parameters to `ReadFile` and `WriteFile`.  \n  \n You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter. When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method. When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.","nodes":[{"pos":[0,326],"content":"The `IsAsync` property detects whether the `FileStream` handle was opened asynchronously, enabling your code to use the <xref:System.IO.FileStream.Handle%2A> property correctly. In Win32, `IsAsync` being true means the handle was opened for overlapped I/O, and thus requires different parameters to `ReadFile` and `WriteFile`.","nodes":[{"content":"The <ph id=\"ph1\">`IsAsync`</ph> property detects whether the <ph id=\"ph2\">`FileStream`</ph> handle was opened asynchronously, enabling your code to use the <ph id=\"ph3\">&lt;xref:System.IO.FileStream.Handle%2A&gt;</ph> property correctly.","pos":[0,177],"source":"The `IsAsync` property detects whether the `FileStream` handle was opened asynchronously, enabling your code to use the <xref:System.IO.FileStream.Handle%2A> property correctly."},{"content":"In Win32, <ph id=\"ph1\">`IsAsync`</ph> being true means the handle was opened for overlapped I/O, and thus requires different parameters to <ph id=\"ph2\">`ReadFile`</ph> and <ph id=\"ph3\">`WriteFile`</ph>.","pos":[178,326],"source":" In Win32, `IsAsync` being true means the handle was opened for overlapped I/O, and thus requires different parameters to `ReadFile` and `WriteFile`."}]},{"pos":[333,1063],"content":"You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter. When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method. When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.","nodes":[{"content":"You specify this value when you create an instance of the <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> class using a constructor that has an <ph id=\"ph2\">`isAsync`</ph>, <ph id=\"ph3\">`useAsync`</ph>, or <ph id=\"ph4\">`options`</ph> parameter.","pos":[0,170],"source":"You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter."},{"content":"When the property is <ph id=\"ph1\">`true`</ph>, the stream utilizes overlapped I/O to perform file operations asynchronously.","pos":[171,277],"source":" When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously."},{"content":"However, the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property does not have to be <ph id=\"ph2\">`true`</ph> to call the <ph id=\"ph3\">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.IO.Stream.CopyToAsync%2A&gt;</ph> method.","pos":[278,512],"source":" However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.IsAsync%2A&gt;</ph> property is <ph id=\"ph2\">`false`</ph> and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.","pos":[513,730],"source":" When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously."}]}],"pos":[156217,157285],"yaml":true,"extradata":"MT"},{"content":"`true` if the `FileStream` was opened asynchronously; otherwise, `false`.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">`FileStream`</ph> was opened asynchronously; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the `FileStream` was opened asynchronously; otherwise, `false`."}],"pos":[158039,158115],"yaml":true},{"content":"Gets the length in bytes of the stream.","nodes":[{"pos":[0,39],"content":"Gets the length in bytes of the stream.","nodes":[{"content":"Gets the length in bytes of the stream.","pos":[0,39]}]}],"pos":[159431,159471],"yaml":true},{"content":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,115],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[159482,159598],"yaml":true,"extradata":"MT"},{"content":"A long value representing the length of the stream in bytes.","nodes":[{"pos":[0,60],"content":"A long value representing the length of the stream in bytes.","nodes":[{"content":"A long value representing the length of the stream in bytes.","pos":[0,60]}]}],"pos":[160301,160362],"yaml":true},{"content":"<xref href=\"System.IO.FileStream.CanSeek\"></xref> for this stream is `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream.CanSeek\"&gt;&lt;/xref&gt;</ph> for this stream is <ph id=\"ph2\">`false`</ph>.","source":"<xref href=\"System.IO.FileStream.CanSeek\"></xref> for this stream is `false`."}],"pos":[160519,160597],"yaml":true},{"content":"An I/O error, such as the file being closed, occurred.","nodes":[{"pos":[0,54],"content":"An I/O error, such as the file being closed, occurred.","nodes":[{"content":"An I/O error, such as the file being closed, occurred.","pos":[0,54]}]}],"pos":[160685,160740],"yaml":true},{"content":"Prevents other processes from reading from or writing to the <xref href=\"System.IO.FileStream\"></xref>.","nodes":[{"pos":[0,103],"content":"Prevents other processes from reading from or writing to the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph>.","source":"Prevents other processes from reading from or writing to the <xref href=\"System.IO.FileStream\"></xref>."}],"pos":[162081,162185],"yaml":true},{"content":"Locking a range of a file stream gives the threads of the locking process exclusive access to that range of the file stream.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,124],"content":"Locking a range of a file stream gives the threads of the locking process exclusive access to that range of the file stream.","nodes":[{"content":"Locking a range of a file stream gives the threads of the locking process exclusive access to that range of the file stream.","pos":[0,124]}]},{"pos":[131,246],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[162196,162447],"yaml":true,"extradata":"MT"},{"content":"The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).","nodes":[{"pos":[0,106],"content":"The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).","nodes":[{"content":"The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).","pos":[0,106],"nodes":[{"content":"The beginning of the range to lock.","pos":[0,35]},{"content":"The value of this parameter must be equal to or greater than zero (0).","pos":[36,106]}]}]}],"pos":[163317,163424],"yaml":true},{"content":"The range to be locked.","nodes":[{"pos":[0,23],"content":"The range to be locked.","nodes":[{"content":"The range to be locked.","pos":[0,23]}]}],"pos":[163485,163509],"yaml":true},{"content":"<code>position</code> or <code>length</code> is negative.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>position</code> or <code>length</code> is negative."}],"pos":[163676,163734],"yaml":true},{"content":"The file is closed.","nodes":[{"pos":[0,19],"content":"The file is closed.","nodes":[{"content":"The file is closed.","pos":[0,19]}]}],"pos":[163840,163860],"yaml":true},{"content":"The process cannot access the file because another process has locked a portion of the file.","nodes":[{"pos":[0,92],"content":"The process cannot access the file because another process has locked a portion of the file.","nodes":[{"content":"The process cannot access the file because another process has locked a portion of the file.","pos":[0,92]}]}],"pos":[163948,164041],"yaml":true},{"content":"Gets the name of the `FileStream` that was passed to the constructor.","nodes":[{"pos":[0,69],"content":"Gets the name of the <ph id=\"ph1\">`FileStream`</ph> that was passed to the constructor.","source":"Gets the name of the `FileStream` that was passed to the constructor."}],"pos":[165102,165172],"yaml":true},{"content":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,115],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[165183,165299],"yaml":true,"extradata":"MT"},{"content":"A string that is the name of the `FileStream`.","nodes":[{"pos":[0,46],"content":"A string that is the name of the <ph id=\"ph1\">`FileStream`</ph>.","source":"A string that is the name of the `FileStream`."}],"pos":[166043,166090],"yaml":true},{"content":"Gets or sets the current position of this stream.","nodes":[{"pos":[0,49],"content":"Gets or sets the current position of this stream.","nodes":[{"content":"Gets or sets the current position of this stream.","pos":[0,49]}]}],"pos":[167415,167465],"yaml":true},{"content":"Seeking to any location beyond the length of the stream is supported.  When you seek beyond the length of the file, the file size grows.  In Microsoft Windows NT and newer, any data added to the end of the file is set to zero.  In Microsoft Windows 98 or earlier, any data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream. Setting the position of the stream to a large value beyond the end of the stream in Windows 98 or earlier may result in an exception being raised.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,535],"content":"Seeking to any location beyond the length of the stream is supported.  When you seek beyond the length of the file, the file size grows.  In Microsoft Windows NT and newer, any data added to the end of the file is set to zero.  In Microsoft Windows 98 or earlier, any data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream. Setting the position of the stream to a large value beyond the end of the stream in Windows 98 or earlier may result in an exception being raised.","nodes":[{"content":"Seeking to any location beyond the length of the stream is supported.  When you seek beyond the length of the file, the file size grows.  In Microsoft Windows NT and newer, any data added to the end of the file is set to zero.  In Microsoft Windows 98 or earlier, any data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream. Setting the position of the stream to a large value beyond the end of the stream in Windows 98 or earlier may result in an exception being raised.","pos":[0,535],"nodes":[{"content":"Seeking to any location beyond the length of the stream is supported.","pos":[0,69]},{"content":"When you seek beyond the length of the file, the file size grows.","pos":[71,136]},{"content":"In Microsoft Windows NT and newer, any data added to the end of the file is set to zero.","pos":[138,226]},{"content":"In Microsoft Windows 98 or earlier, any data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.","pos":[228,388]},{"content":"Setting the position of the stream to a large value beyond the end of the stream in Windows 98 or earlier may result in an exception being raised.","pos":[389,535]}]}]},{"pos":[542,657],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[167476,168138],"yaml":true,"extradata":"MT"},{"content":"The current position of this stream.","nodes":[{"pos":[0,36],"content":"The current position of this stream.","nodes":[{"content":"The current position of this stream.","pos":[0,36]}]}],"pos":[168848,168885],"yaml":true},{"content":"The stream does not support seeking.","nodes":[{"pos":[0,36],"content":"The stream does not support seeking.","nodes":[{"content":"The stream does not support seeking.","pos":[0,36]}]}],"pos":[169044,169081],"yaml":true},{"content":"An I/O error occurred.  \n  \n \\- or -  \n  \n The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.","nodes":[{"pos":[0,22],"content":"An I/O error occurred.","nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[29,36],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[43,140],"content":"The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.","nodes":[{"content":"The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.","pos":[0,97]}]}],"pos":[169169,169317],"yaml":true},{"content":"Attempted to set the position to a negative value.","nodes":[{"pos":[0,50],"content":"Attempted to set the position to a negative value.","nodes":[{"content":"Attempted to set the position to a negative value.","pos":[0,50]}]}],"pos":[169431,169482],"yaml":true},{"content":"Attempted seeking past the end of a stream that does not support this.","nodes":[{"pos":[0,70],"content":"Attempted seeking past the end of a stream that does not support this.","nodes":[{"content":"Attempted seeking past the end of a stream that does not support this.","pos":[0,70]}]}],"pos":[169588,169659],"yaml":true},{"content":"Reads a block of bytes from the stream and writes the data in a given buffer.","nodes":[{"pos":[0,77],"content":"Reads a block of bytes from the stream and writes the data in a given buffer.","nodes":[{"content":"Reads a block of bytes from the stream and writes the data in a given buffer.","pos":[0,77]}]}],"pos":[171091,171169],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.Read%2A>.  \n  \n The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin reading, and the `count` parameter gives the maximum number of bytes to be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.  \n  \n The <xref:System.IO.FileStream.Read%2A> method returns zero only after reaching the end of the stream. Otherwise, <xref:System.IO.FileStream.Read%2A> always reads at least one byte from the stream before returning. If no data is available from the stream upon a call to <xref:System.IO.FileStream.Read%2A>, the method will block until at least one byte of data can be returned. An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.  \n  \n Use <xref:System.IO.BinaryReader> for reading primitive data types.  \n  \n Do not interrupt a thread that is performing a read operation. Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,54],"content":"This method overrides <xref:System.IO.Stream.Read%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>.","pos":[0,54],"source":"This method overrides <xref:System.IO.Stream.Read%2A>."}]},{"pos":[61,544],"content":"The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin reading, and the `count` parameter gives the maximum number of bytes to be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.","nodes":[{"content":"The <ph id=\"ph1\">`offset`</ph> parameter gives the offset of the byte in <ph id=\"ph2\">`array`</ph> (the buffer index) at which to begin reading, and the <ph id=\"ph3\">`count`</ph> parameter gives the maximum number of bytes to be read from this stream.","pos":[0,197],"source":"The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin reading, and the `count` parameter gives the maximum number of bytes to be read from this stream."},{"content":"The returned value is the actual number of bytes read, or zero if the end of the stream is reached.","pos":[198,297]},{"content":"If the read operation is successful, the current position of the stream is advanced by the number of bytes read.","pos":[298,410]},{"content":"If an exception occurs, the current position of the stream is unchanged.","pos":[411,483]}]},{"pos":[551,1043],"content":"The <xref:System.IO.FileStream.Read%2A> method returns zero only after reaching the end of the stream. Otherwise, <xref:System.IO.FileStream.Read%2A> always reads at least one byte from the stream before returning. If no data is available from the stream upon a call to <xref:System.IO.FileStream.Read%2A>, the method will block until at least one byte of data can be returned. An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","nodes":[{"content":"The <xref:System.IO.FileStream.Read%2A> method returns zero only after reaching the end of the stream. Otherwise, <xref:System.IO.FileStream.Read%2A> always reads at least one byte from the stream before returning. If no data is available from the stream upon a call to <xref:System.IO.FileStream.Read%2A>, the method will block until at least one byte of data can be returned. An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","pos":[0,492],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph> method returns zero only after reaching the end of the stream.","pos":[0,102],"source":"The <xref:System.IO.FileStream.Read%2A> method returns zero only after reaching the end of the stream."},{"content":"Otherwise, <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph> always reads at least one byte from the stream before returning.","pos":[103,214],"source":" Otherwise, <xref:System.IO.FileStream.Read%2A> always reads at least one byte from the stream before returning."},{"content":"If no data is available from the stream upon a call to <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Read%2A&gt;</ph>, the method will block until at least one byte of data can be returned.","pos":[215,377],"source":" If no data is available from the stream upon a call to <xref:System.IO.FileStream.Read%2A>, the method will block until at least one byte of data can be returned."},{"content":"An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","pos":[378,492]}]}]},{"pos":[1050,1117],"content":"Use <xref:System.IO.BinaryReader> for reading primitive data types.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.","pos":[0,67],"source":"Use <xref:System.IO.BinaryReader> for reading primitive data types."}]},{"pos":[1124,1351],"content":"Do not interrupt a thread that is performing a read operation. Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.","nodes":[{"content":"Do not interrupt a thread that is performing a read operation. Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.","pos":[0,227],"nodes":[{"content":"Do not interrupt a thread that is performing a read operation.","pos":[0,62]},{"content":"Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.","pos":[63,227]}]}]},{"pos":[1358,1473],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[171180,172666],"yaml":true,"extradata":"MT"},{"content":"When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1<code>)</code> replaced by the bytes read from the current source.","nodes":[{"pos":[0,219],"content":"When this method returns, contains the specified byte array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1<bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">)</ph><ept id=\"p4\">&lt;/code&gt;</ept> replaced by the bytes read from the current source.","source":"When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1<code>)</code> replaced by the bytes read from the current source."}],"pos":[173170,173390],"yaml":true},{"content":"The byte offset in <code>array</code> at which the read bytes will be placed.","nodes":[{"pos":[0,77],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which the read bytes will be placed.","source":"The byte offset in <code>array</code> at which the read bytes will be placed."}],"pos":[173451,173529],"yaml":true},{"content":"The maximum number of bytes to read.","nodes":[{"pos":[0,36],"content":"The maximum number of bytes to read.","nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]}],"pos":[173589,173626],"yaml":true},{"content":"The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.","nodes":[{"pos":[0,199],"content":"The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.","nodes":[{"content":"The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.","pos":[0,199],"nodes":[{"content":"The total number of bytes read into the buffer.","pos":[0,47]},{"content":"This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.","pos":[48,199]}]}]}],"pos":[173682,173882],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[174037,174067],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[174181,174236],"yaml":true},{"content":"The stream does not support reading.","nodes":[{"pos":[0,36],"content":"The stream does not support reading.","nodes":[{"content":"The stream does not support reading.","pos":[0,36]}]}],"pos":[174338,174375],"yaml":true},{"content":"An I/O error occurred.","nodes":[{"pos":[0,22],"content":"An I/O error occurred.","nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]}],"pos":[174463,174486],"yaml":true},{"content":"<code>offset</code> and <code>count</code> describe an invalid range in <code>array</code>.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> describe an invalid range in <ph id=\"ph3\">&lt;code&gt;array&lt;/code&gt;</ph>.","source":"<code>offset</code> and <code>count</code> describe an invalid range in <code>array</code>."}],"pos":[174580,174672],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[174778,174827],"yaml":true},{"content":"Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","nodes":[{"pos":[0,170],"content":"Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","nodes":[{"content":"Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","pos":[0,170]}]}],"pos":[176451,176622],"yaml":true},{"content":"The <xref:System.IO.FileStream.ReadAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.","nodes":[{"pos":[0,562],"content":"The <xref:System.IO.FileStream.ReadAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.FileStream.ReadAsync%2A&gt;</ph> method enables you to perform resource-intensive file operations without blocking the main thread.","pos":[0,143],"source":"The <xref:System.IO.FileStream.ReadAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread."},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[144,458],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"The async methods are used in conjunction with the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords in Visual Basic and C#.","pos":[459,562],"source":" The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#."}]},{"pos":[569,684],"content":"Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.","pos":[0,115],"source":"Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading."}]},{"pos":[691,1073],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.","pos":[0,382],"nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."},{"content":"If the handle to the file is disposed, the returned task contains the <ph id=\"ph1\">&lt;xref:System.ObjectDisposedException&gt;</ph> exception in the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property.","pos":[200,382],"source":" If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property."}]}]}],"pos":[176633,177713],"yaml":true,"extradata":"MT"},{"content":"The buffer to write the data into.","nodes":[{"pos":[0,34],"content":"The buffer to write the data into.","nodes":[{"content":"The buffer to write the data into.","pos":[0,34]}]}],"pos":[178327,178362],"yaml":true},{"content":"The byte offset in <code>buffer</code> at which to begin writing data from the stream.","nodes":[{"pos":[0,86],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing data from the stream.","source":"The byte offset in <code>buffer</code> at which to begin writing data from the stream."}],"pos":[178423,178510],"yaml":true},{"content":"The maximum number of bytes to read.","nodes":[{"pos":[0,36],"content":"The maximum number of bytes to read.","nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]}],"pos":[178570,178607],"yaml":true},{"content":"The token to monitor for cancellation requests.","nodes":[{"pos":[0,47],"content":"The token to monitor for cancellation requests.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]}]}],"pos":[178701,178749],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"pos":[0,367],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.","pos":[56,160],"source":" The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","pos":[161,367]}]}],"pos":[178834,179202],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[179362,179393],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[179507,179562],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[179656,179744],"yaml":true},{"content":"The stream does not support reading.","nodes":[{"pos":[0,36],"content":"The stream does not support reading.","nodes":[{"content":"The stream does not support reading.","pos":[0,36]}]}],"pos":[179846,179883],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[179989,180019],"yaml":true},{"content":"The stream is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The stream is currently in use by a previous read operation.","nodes":[{"content":"The stream is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[180129,180190],"yaml":true},{"content":"Reads a byte from the file and advances the read position one byte.","nodes":[{"pos":[0,67],"content":"Reads a byte from the file and advances the read position one byte.","nodes":[{"content":"Reads a byte from the file and advances the read position one byte.","pos":[0,67]}]}],"pos":[181463,181531],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.ReadByte%2A>.  \n  \n> [!NOTE]\n>  Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading. For additional information, see <xref:System.IO.Stream.CanRead%2A>.","nodes":[{"pos":[0,58],"content":"This method overrides <xref:System.IO.Stream.ReadByte%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>.","pos":[0,58],"source":"This method overrides <xref:System.IO.Stream.ReadByte%2A>."}]},{"pos":[66,260],"content":"[!NOTE]\n Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading. For additional information, see <xref:System.IO.Stream.CanRead%2A>.","leadings":["","> "],"nodes":[{"content":" Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading. For additional information, see <xref:System.IO.Stream.CanRead%2A>.","pos":[8,192],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.","pos":[1,116],"source":" Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanRead%2A&gt;</ph>.","pos":[117,184],"source":" For additional information, see <xref:System.IO.Stream.CanRead%2A>."}]}]}],"pos":[181542,181808],"yaml":true,"extradata":"MT"},{"content":"The byte, cast to an <xref href=\"System.Int32\"></xref>, or -1 if the end of the stream has been reached.","nodes":[{"pos":[0,104],"content":"The byte, cast to an <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph>, or -1 if the end of the stream has been reached.","source":"The byte, cast to an <xref href=\"System.Int32\"></xref>, or -1 if the end of the stream has been reached."}],"pos":[182475,182580],"yaml":true},{"content":"The current stream does not support reading.","nodes":[{"pos":[0,44],"content":"The current stream does not support reading.","nodes":[{"content":"The current stream does not support reading.","pos":[0,44]}]}],"pos":[182739,182784],"yaml":true},{"content":"The current stream is closed.","nodes":[{"pos":[0,29],"content":"The current stream is closed.","nodes":[{"content":"The current stream is closed.","pos":[0,29]}]}],"pos":[182890,182920],"yaml":true},{"content":"Gets a <xref href=\"Microsoft.Win32.SafeHandles.SafeFileHandle\"></xref> object that represents the operating system file handle for the file that the current <xref href=\"System.IO.FileStream\"></xref> object encapsulates.","nodes":[{"pos":[0,219],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.SafeFileHandle\"&gt;&lt;/xref&gt;</ph> object that represents the operating system file handle for the file that the current <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> object encapsulates.","source":"Gets a <xref href=\"Microsoft.Win32.SafeHandles.SafeFileHandle\"></xref> object that represents the operating system file handle for the file that the current <xref href=\"System.IO.FileStream\"></xref> object encapsulates."}],"pos":[184225,184445],"yaml":true},{"content":"The <xref:System.IO.FileStream.SafeFileHandle%2A> property automatically flushes the stream and sets the current stream position to 0.  This allows the file to be moved or the stream position to be reset by another stream using the <xref:System.IO.FileStream.SafeFileHandle%2A> returned by this property.","nodes":[{"pos":[0,304],"content":"The <xref:System.IO.FileStream.SafeFileHandle%2A> property automatically flushes the stream and sets the current stream position to 0.  This allows the file to be moved or the stream position to be reset by another stream using the <xref:System.IO.FileStream.SafeFileHandle%2A> returned by this property.","nodes":[{"content":"The <xref:System.IO.FileStream.SafeFileHandle%2A> property automatically flushes the stream and sets the current stream position to 0.  This allows the file to be moved or the stream position to be reset by another stream using the <xref:System.IO.FileStream.SafeFileHandle%2A> returned by this property.","pos":[0,304],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph> property automatically flushes the stream and sets the current stream position to 0.","pos":[0,134],"source":"The <xref:System.IO.FileStream.SafeFileHandle%2A> property automatically flushes the stream and sets the current stream position to 0."},{"content":"This allows the file to be moved or the stream position to be reset by another stream using the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.SafeFileHandle%2A&gt;</ph> returned by this property.","pos":[136,304],"source":"  This allows the file to be moved or the stream position to be reset by another stream using the <xref:System.IO.FileStream.SafeFileHandle%2A> returned by this property."}]}]}],"pos":[184456,184761],"yaml":true,"extradata":"MT"},{"content":"An object that represents the operating system file handle for the file that the current <xref href=\"System.IO.FileStream\"></xref> object encapsulates.","nodes":[{"pos":[0,151],"content":"An object that represents the operating system file handle for the file that the current <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> object encapsulates.","source":"An object that represents the operating system file handle for the file that the current <xref href=\"System.IO.FileStream\"></xref> object encapsulates."}],"pos":[184952,185104],"yaml":true},{"content":"Sets the current position of this stream to the given value.","nodes":[{"pos":[0,60],"content":"Sets the current position of this stream to the given value.","nodes":[{"content":"Sets the current position of this stream to the given value.","pos":[0,60]}]}],"pos":[186575,186636],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  Use the <xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName> property to determine whether the current instance supports seeking. For additional information, see <xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName>.  \n  \n You can seek to any location beyond the length of the stream. When you seek beyond the length of the file, the file size grows. In Windows NT and later versions, data added to the end of the file is set to zero. In Windows 98 or earlier versions, data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,79],"content":"This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.Seek%2A?displayProperty=fullName&gt;</ph>.","pos":[0,79],"source":"This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=fullName>."}]},{"pos":[87,331],"content":"[!NOTE]\n Use the <xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName> property to determine whether the current instance supports seeking. For additional information, see <xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName>.","leadings":["","> "],"nodes":[{"content":" Use the <xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName> property to determine whether the current instance supports seeking. For additional information, see <xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName>.","pos":[8,242],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName&gt;</ph> property to determine whether the current instance supports seeking.","pos":[1,141],"source":" Use the <xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName> property to determine whether the current instance supports seeking."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName&gt;</ph>.","pos":[142,234],"source":" For additional information, see <xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName>."}]}]},{"pos":[338,705],"content":"You can seek to any location beyond the length of the stream. When you seek beyond the length of the file, the file size grows. In Windows NT and later versions, data added to the end of the file is set to zero. In Windows 98 or earlier versions, data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.","nodes":[{"content":"You can seek to any location beyond the length of the stream. When you seek beyond the length of the file, the file size grows. In Windows NT and later versions, data added to the end of the file is set to zero. In Windows 98 or earlier versions, data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.","pos":[0,367],"nodes":[{"content":"You can seek to any location beyond the length of the stream.","pos":[0,61]},{"content":"When you seek beyond the length of the file, the file size grows.","pos":[62,127]},{"content":"In Windows NT and later versions, data added to the end of the file is set to zero.","pos":[128,211]},{"content":"In Windows 98 or earlier versions, data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.","pos":[212,367]}]}]},{"pos":[712,827],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[186647,187484],"yaml":true,"extradata":"MT"},{"content":"The point relative to <code>origin</code> from which to begin seeking.","nodes":[{"pos":[0,70],"content":"The point relative to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">origin</ph><ept id=\"p1\">&lt;/code&gt;</ept> from which to begin seeking.","source":"The point relative to <code>origin</code> from which to begin seeking."}],"pos":[188693,188764],"yaml":true},{"content":"Specifies the beginning, the end, or the current position as a reference point for <code>offset</code>, using a value of type <xref href=\"System.IO.SeekOrigin\"></xref>.","nodes":[{"pos":[0,168],"content":"Specifies the beginning, the end, or the current position as a reference point for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept>, using a value of type <ph id=\"ph2\">&lt;xref href=\"System.IO.SeekOrigin\"&gt;&lt;/xref&gt;</ph>.","source":"Specifies the beginning, the end, or the current position as a reference point for <code>offset</code>, using a value of type <xref href=\"System.IO.SeekOrigin\"></xref>."}],"pos":[188833,189002],"yaml":true},{"content":"The new position in the stream.","nodes":[{"pos":[0,31],"content":"The new position in the stream.","nodes":[{"content":"The new position in the stream.","pos":[0,31]}]}],"pos":[189058,189090],"yaml":true},{"content":"An I/O error occurred.","nodes":[{"pos":[0,22],"content":"An I/O error occurred.","nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]}],"pos":[189231,189254],"yaml":true},{"content":"The stream does not support seeking, such as if the `FileStream` is constructed from a pipe or console output.","nodes":[{"pos":[0,110],"content":"The stream does not support seeking, such as if the <ph id=\"ph1\">`FileStream`</ph> is constructed from a pipe or console output.","source":"The stream does not support seeking, such as if the `FileStream` is constructed from a pipe or console output."}],"pos":[189356,189467],"yaml":true},{"content":"Seeking is attempted before the beginning of the stream.","nodes":[{"pos":[0,56],"content":"Seeking is attempted before the beginning of the stream.","nodes":[{"content":"Seeking is attempted before the beginning of the stream.","pos":[0,56]}]}],"pos":[189561,189618],"yaml":true},{"content":"Methods were called after the stream was closed.","nodes":[{"pos":[0,48],"content":"Methods were called after the stream was closed.","nodes":[{"content":"Methods were called after the stream was closed.","pos":[0,48]}]}],"pos":[189724,189773],"yaml":true},{"content":"Applies access control list (ACL) entries described by a <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> object to the file described by the current <xref href=\"System.IO.FileStream\"></xref> object.","nodes":[{"pos":[0,214],"content":"Applies access control list (ACL) entries described by a <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.FileSecurity\"&gt;&lt;/xref&gt;</ph> object to the file described by the current <ph id=\"ph2\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> object.","source":"Applies access control list (ACL) entries described by a <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> object to the file described by the current <xref href=\"System.IO.FileStream\"></xref> object."}],"pos":[191202,191417],"yaml":true},{"content":"While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.SetAccessControl%2A> can be used on an existing file, consider using the <xref:System.IO.File.SetAccessControl%2A?displayProperty=fullName> method as it is easier to use.  \n  \n The <xref:System.IO.FileStream.SetAccessControl%2A> method applies access control list (ACL) entries to a file that represents the noninherited ACL list.  \n  \n> [!CAUTION]\n>  The ACL specified for the `fileSecurity` parameter replaces the existing ACL for the file. To add permissions for a new user, use the <xref:System.IO.FileStream.GetAccessControl%2A> method to obtain the existing ACL, modify it, and then use <xref:System.IO.FileStream.SetAccessControl%2A> to apply it back to the file.  \n  \n An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).","nodes":[{"pos":[0,245],"content":"While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.SetAccessControl%2A> can be used on an existing file, consider using the <xref:System.IO.File.SetAccessControl%2A?displayProperty=fullName> method as it is easier to use.","nodes":[{"content":"While the <ph id=\"ph1\">&lt;xref:System.IO.FileStream&gt;</ph> class and <ph id=\"ph2\">&lt;xref:System.IO.FileStream.SetAccessControl%2A&gt;</ph> can be used on an existing file, consider using the <ph id=\"ph3\">&lt;xref:System.IO.File.SetAccessControl%2A?displayProperty=fullName&gt;</ph> method as it is easier to use.","pos":[0,245],"source":"While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.SetAccessControl%2A> can be used on an existing file, consider using the <xref:System.IO.File.SetAccessControl%2A?displayProperty=fullName> method as it is easier to use."}]},{"pos":[252,405],"content":"The <xref:System.IO.FileStream.SetAccessControl%2A> method applies access control list (ACL) entries to a file that represents the noninherited ACL list.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.FileStream.SetAccessControl%2A&gt;</ph> method applies access control list (ACL) entries to a file that represents the noninherited ACL list.","pos":[0,153],"source":"The <xref:System.IO.FileStream.SetAccessControl%2A> method applies access control list (ACL) entries to a file that represents the noninherited ACL list."}]},{"pos":[413,745],"content":"[!CAUTION]\n The ACL specified for the `fileSecurity` parameter replaces the existing ACL for the file. To add permissions for a new user, use the <xref:System.IO.FileStream.GetAccessControl%2A> method to obtain the existing ACL, modify it, and then use <xref:System.IO.FileStream.SetAccessControl%2A> to apply it back to the file.","leadings":["","> "],"nodes":[{"content":" The ACL specified for the `fileSecurity` parameter replaces the existing ACL for the file. To add permissions for a new user, use the <xref:System.IO.FileStream.GetAccessControl%2A> method to obtain the existing ACL, modify it, and then use <xref:System.IO.FileStream.SetAccessControl%2A> to apply it back to the file.","pos":[11,330],"nodes":[{"content":"The ACL specified for the <ph id=\"ph1\">`fileSecurity`</ph> parameter replaces the existing ACL for the file.","pos":[1,91],"source":" The ACL specified for the `fileSecurity` parameter replaces the existing ACL for the file."},{"content":"To add permissions for a new user, use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.GetAccessControl%2A&gt;</ph> method to obtain the existing ACL, modify it, and then use <ph id=\"ph2\">&lt;xref:System.IO.FileStream.SetAccessControl%2A&gt;</ph> to apply it back to the file.","pos":[92,319],"source":" To add permissions for a new user, use the <xref:System.IO.FileStream.GetAccessControl%2A> method to obtain the existing ACL, modify it, and then use <xref:System.IO.FileStream.SetAccessControl%2A> to apply it back to the file."}]}]},{"pos":[752,1017],"content":"An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).","nodes":[{"content":"An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file.","pos":[0,114]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Add or Remove Access Control List Entries<ept id=\"p1\">](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)</ept>.","pos":[115,265],"source":" For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md)."}]}],"pos":[191428,192455],"yaml":true,"extradata":"MT"},{"content":"An object that describes an ACL entry to apply to the current file.","nodes":[{"pos":[0,67],"content":"An object that describes an ACL entry to apply to the current file.","nodes":[{"content":"An object that describes an ACL entry to apply to the current file.","pos":[0,67]}]}],"pos":[192679,192747],"yaml":true},{"content":"The file is closed.","nodes":[{"pos":[0,19],"content":"The file is closed.","nodes":[{"content":"The file is closed.","pos":[0,19]}]}],"pos":[192918,192938],"yaml":true},{"content":"The <code>fileSecurity</code> parameter is `null`.","nodes":[{"pos":[0,50],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fileSecurity</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>fileSecurity</code> parameter is `null`."}],"pos":[193040,193091],"yaml":true},{"content":"The file could not be found or modified.","nodes":[{"pos":[0,40],"content":"The file could not be found or modified.","nodes":[{"content":"The file could not be found or modified.","pos":[0,40]}]}],"pos":[193181,193222],"yaml":true},{"content":"The current process does not have access to open the file.","nodes":[{"pos":[0,58],"content":"The current process does not have access to open the file.","nodes":[{"content":"The current process does not have access to open the file.","pos":[0,58]}]}],"pos":[193336,193395],"yaml":true},{"content":"Sets the length of this stream to the given value.","nodes":[{"pos":[0,50],"content":"Sets the length of this stream to the given value.","nodes":[{"content":"Sets the length of this stream to the given value.","pos":[0,50]}]}],"pos":[194475,194526],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.SetLength%2A>.  \n  \n If the given value is less than the current length of the stream, the stream is truncated. In this scenario, if the current position is greater than the new length, the current position is moved to the last byte of the stream. If the given value is larger than the current length of the stream, the stream is expanded, and the current position remains the same. If the stream is expanded, the contents of the stream between the old and the new length are undefined.  \n  \n A stream must support both writing and seeking for `SetLength` to work.  \n  \n> [!NOTE]\n>  Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.FileStream.CanSeek%2A> property to determine whether seeking is supported. For additional information, see <xref:System.IO.Stream.CanWrite%2A> and <xref:System.IO.Stream.CanSeek%2A>.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,59],"content":"This method overrides <xref:System.IO.Stream.SetLength%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>.","pos":[0,59],"source":"This method overrides <xref:System.IO.Stream.SetLength%2A>."}]},{"pos":[66,531],"content":"If the given value is less than the current length of the stream, the stream is truncated. In this scenario, if the current position is greater than the new length, the current position is moved to the last byte of the stream. If the given value is larger than the current length of the stream, the stream is expanded, and the current position remains the same. If the stream is expanded, the contents of the stream between the old and the new length are undefined.","nodes":[{"content":"If the given value is less than the current length of the stream, the stream is truncated. In this scenario, if the current position is greater than the new length, the current position is moved to the last byte of the stream. If the given value is larger than the current length of the stream, the stream is expanded, and the current position remains the same. If the stream is expanded, the contents of the stream between the old and the new length are undefined.","pos":[0,465],"nodes":[{"content":"If the given value is less than the current length of the stream, the stream is truncated.","pos":[0,90]},{"content":"In this scenario, if the current position is greater than the new length, the current position is moved to the last byte of the stream.","pos":[91,226]},{"content":"If the given value is larger than the current length of the stream, the stream is expanded, and the current position remains the same.","pos":[227,361]},{"content":"If the stream is expanded, the contents of the stream between the old and the new length are undefined.","pos":[362,465]}]}]},{"pos":[538,609],"content":"A stream must support both writing and seeking for <ph id=\"ph1\">`SetLength`</ph> to work.","source":"A stream must support both writing and seeking for `SetLength` to work."},{"pos":[617,951],"content":"[!NOTE]\n Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.FileStream.CanSeek%2A> property to determine whether seeking is supported. For additional information, see <xref:System.IO.Stream.CanWrite%2A> and <xref:System.IO.Stream.CanSeek%2A>.","leadings":["","> "],"nodes":[{"content":" Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.FileStream.CanSeek%2A> property to determine whether seeking is supported. For additional information, see <xref:System.IO.Stream.CanWrite%2A> and <xref:System.IO.Stream.CanSeek%2A>.","pos":[8,332],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing, and the <ph id=\"ph2\">&lt;xref:System.IO.FileStream.CanSeek%2A&gt;</ph> property to determine whether seeking is supported.","pos":[1,216],"source":" Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.FileStream.CanSeek%2A> property to determine whether seeking is supported."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph>.","pos":[217,324],"source":" For additional information, see <xref:System.IO.Stream.CanWrite%2A> and <xref:System.IO.Stream.CanSeek%2A>."}]}]},{"pos":[958,1073],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[194537,195622],"yaml":true,"extradata":"MT"},{"content":"The new length of the stream.","nodes":[{"pos":[0,29],"content":"The new length of the stream.","nodes":[{"content":"The new length of the stream.","pos":[0,29]}]}],"pos":[195766,195796],"yaml":true},{"content":"An I/O error has occurred.","nodes":[{"pos":[0,26],"content":"An I/O error has occurred.","nodes":[{"content":"An I/O error has occurred.","pos":[0,26]}]}],"pos":[195942,195969],"yaml":true},{"content":"The stream does not support both writing and seeking.","nodes":[{"pos":[0,53],"content":"The stream does not support both writing and seeking.","nodes":[{"content":"The stream does not support both writing and seeking.","pos":[0,53]}]}],"pos":[196071,196125],"yaml":true},{"content":"Attempted to set the <code>value</code> parameter to less than 0.","nodes":[{"pos":[0,65],"content":"Attempted to set the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter to less than 0.","source":"Attempted to set the <code>value</code> parameter to less than 0."}],"pos":[196239,196305],"yaml":true},{"content":"Allows access by other processes to all or part of a file that was previously locked.","nodes":[{"pos":[0,85],"content":"Allows access by other processes to all or part of a file that was previously locked.","nodes":[{"content":"Allows access by other processes to all or part of a file that was previously locked.","pos":[0,85]}]}],"pos":[197658,197744],"yaml":true},{"content":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,115],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[197755,197871],"yaml":true,"extradata":"MT"},{"content":"The beginning of the range to unlock.","nodes":[{"pos":[0,37],"content":"The beginning of the range to unlock.","nodes":[{"content":"The beginning of the range to unlock.","pos":[0,37]}]}],"pos":[198792,198830],"yaml":true},{"content":"The range to be unlocked.","nodes":[{"pos":[0,25],"content":"The range to be unlocked.","nodes":[{"content":"The range to be unlocked.","pos":[0,25]}]}],"pos":[198891,198917],"yaml":true},{"content":"<code>position</code> or <code>length</code> is negative.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is negative.","source":"<code>position</code> or <code>length</code> is negative."}],"pos":[199086,199144],"yaml":true},{"content":"Writes a block of bytes to the file stream.","nodes":[{"pos":[0,43],"content":"Writes a block of bytes to the file stream.","nodes":[{"content":"Writes a block of bytes to the file stream.","pos":[0,43]}]}],"pos":[200398,200442],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.Write%2A>.  \n  \n The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin copying, and the `count` parameter gives the number of bytes that will be written to the stream. If the write operation is successful, the current position of the stream is advanced by the number of bytes written. If an exception occurs, the current position of the stream is unchanged.  \n  \n> [!NOTE]\n>  Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.  \n  \n Do not interrupt a thread that is performing a write operation. Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.  \n  \n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).","nodes":[{"pos":[0,55],"content":"This method overrides <xref:System.IO.Stream.Write%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>.","pos":[0,55],"source":"This method overrides <xref:System.IO.Stream.Write%2A>."}]},{"pos":[62,448],"content":"The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin copying, and the `count` parameter gives the number of bytes that will be written to the stream. If the write operation is successful, the current position of the stream is advanced by the number of bytes written. If an exception occurs, the current position of the stream is unchanged.","nodes":[{"content":"The <ph id=\"ph1\">`offset`</ph> parameter gives the offset of the byte in <ph id=\"ph2\">`array`</ph> (the buffer index) at which to begin copying, and the <ph id=\"ph3\">`count`</ph> parameter gives the number of bytes that will be written to the stream.","pos":[0,196],"source":"The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin copying, and the `count` parameter gives the number of bytes that will be written to the stream."},{"content":"If the write operation is successful, the current position of the stream is advanced by the number of bytes written.","pos":[197,313]},{"content":"If an exception occurs, the current position of the stream is unchanged.","pos":[314,386]}]},{"pos":[456,652],"content":"[!NOTE]\n Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.","leadings":["","> "],"nodes":[{"content":" Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.","pos":[8,194],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.","pos":[1,117],"source":" Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>.","pos":[118,186],"source":" For additional information, see <xref:System.IO.Stream.CanWrite%2A>."}]}]},{"pos":[659,887],"content":"Do not interrupt a thread that is performing a write operation. Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.","nodes":[{"content":"Do not interrupt a thread that is performing a write operation. Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.","pos":[0,228],"nodes":[{"content":"Do not interrupt a thread that is performing a write operation.","pos":[0,63]},{"content":"Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.","pos":[64,228]}]}]},{"pos":[894,1009],"content":"For a list of common file and directory operations, see <bpt id=\"p1\">[</bpt>Common I/O Tasks<ept id=\"p1\">](~/docs/standard/io/common-i-o-tasks.md)</ept>.","source":"For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md)."}],"pos":[200453,201474],"yaml":true,"extradata":"MT"},{"content":"The buffer containing data to write to the stream.","nodes":[{"pos":[0,50],"content":"The buffer containing data to write to the stream.","nodes":[{"content":"The buffer containing data to write to the stream.","pos":[0,50]}]}],"pos":[202169,202220],"yaml":true},{"content":"The zero-based byte offset in <code>array</code> from which to begin copying bytes to the stream.","nodes":[{"pos":[0,97],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> from which to begin copying bytes to the stream.","source":"The zero-based byte offset in <code>array</code> from which to begin copying bytes to the stream."}],"pos":[202281,202379],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[202439,202477],"yaml":true},{"content":"<code>array</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;array&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>array</code> is `null`."}],"pos":[202633,202663],"yaml":true},{"content":"<code>offset</code> and <code>count</code> describe an invalid range in <code>array</code>.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> describe an invalid range in <ph id=\"ph3\">&lt;code&gt;array&lt;/code&gt;</ph>.","source":"<code>offset</code> and <code>count</code> describe an invalid range in <code>array</code>."}],"pos":[202757,202849],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[202963,203018],"yaml":true},{"content":"An I/O error occurred.  \n  \n \\- or -  \n  \n Another thread may have caused an unexpected change in the position of the operating system's file handle.","nodes":[{"pos":[0,22],"content":"An I/O error occurred.","nodes":[{"content":"An I/O error occurred.","pos":[0,22]}]},{"pos":[29,36],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[43,149],"content":"Another thread may have caused an unexpected change in the position of the operating system's file handle.","nodes":[{"content":"Another thread may have caused an unexpected change in the position of the operating system's file handle.","pos":[0,106]}]}],"pos":[203106,203263],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[203369,203391],"yaml":true},{"content":"The current stream instance does not support writing.","nodes":[{"pos":[0,53],"content":"The current stream instance does not support writing.","nodes":[{"content":"The current stream instance does not support writing.","pos":[0,53]}]}],"pos":[203493,203547],"yaml":true},{"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","nodes":[{"pos":[0,181],"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","nodes":[{"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","pos":[0,181]}]}],"pos":[205177,205359],"yaml":true},{"content":"The <xref:System.IO.FileStream.WriteAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \n  \n Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports reading.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.","nodes":[{"pos":[0,563],"content":"The <xref:System.IO.FileStream.WriteAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.FileStream.WriteAsync%2A&gt;</ph> method enables you to perform resource-intensive file operations without blocking the main thread.","pos":[0,144],"source":"The <xref:System.IO.FileStream.WriteAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread."},{"content":"This performance consideration is particularly important in a <ph id=\"ph1\">[!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]</ph> app or <ph id=\"ph2\">[!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)]</ph> app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.","pos":[145,459],"source":" This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working."},{"content":"The async methods are used in conjunction with the <ph id=\"ph1\">`async`</ph> and <ph id=\"ph2\">`await`</ph> keywords in Visual Basic and C#.","pos":[460,563],"source":" The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#."}]},{"pos":[570,686],"content":"Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports reading.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports reading.","pos":[0,116],"source":"Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports reading."}]},{"pos":[693,1075],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.","pos":[0,382],"nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."},{"content":"If the handle to the file is disposed, the returned task contains the <ph id=\"ph1\">&lt;xref:System.ObjectDisposedException&gt;</ph> exception in the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Exception%2A&gt;</ph> property.","pos":[200,382],"source":" If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property."}]}]}],"pos":[205370,206452],"yaml":true,"extradata":"MT"},{"content":"The buffer to write data from.","nodes":[{"pos":[0,30],"content":"The buffer to write data from.","nodes":[{"content":"The buffer to write data from.","pos":[0,30]}]}],"pos":[207061,207092],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.","nodes":[{"pos":[0,98],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> from which to begin copying bytes to the stream.","source":"The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream."}],"pos":[207153,207252],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[207312,207350],"yaml":true},{"content":"The token to monitor for cancellation requests.","nodes":[{"pos":[0,47],"content":"The token to monitor for cancellation requests.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]}]}],"pos":[207444,207492],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[207563,207620],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[207781,207812],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[207926,207981],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[208075,208163],"yaml":true},{"content":"The stream does not support writing.","nodes":[{"pos":[0,36],"content":"The stream does not support writing.","nodes":[{"content":"The stream does not support writing.","pos":[0,36]}]}],"pos":[208265,208302],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[208408,208438],"yaml":true},{"content":"The stream is currently in use by a previous write operation.","nodes":[{"pos":[0,61],"content":"The stream is currently in use by a previous write operation.","nodes":[{"content":"The stream is currently in use by a previous write operation.","pos":[0,61]}]}],"pos":[208548,208610],"yaml":true},{"content":"Writes a byte to the current position in the file stream.","nodes":[{"pos":[0,57],"content":"Writes a byte to the current position in the file stream.","nodes":[{"content":"Writes a byte to the current position in the file stream.","pos":[0,57]}]}],"pos":[209940,209998],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.WriteByte%2A>.  \n  \n Use `WriteByte` to write a byte to a `FileStream` efficiently. If the stream is closed or not writable, an exception will be thrown.  \n  \n> [!NOTE]\n>  Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.","nodes":[{"pos":[0,59],"content":"This method overrides <xref:System.IO.Stream.WriteByte%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph>.","pos":[0,59],"source":"This method overrides <xref:System.IO.Stream.WriteByte%2A>."}]},{"pos":[66,198],"content":"Use `WriteByte` to write a byte to a `FileStream` efficiently. If the stream is closed or not writable, an exception will be thrown.","nodes":[{"content":"Use <ph id=\"ph1\">`WriteByte`</ph> to write a byte to a <ph id=\"ph2\">`FileStream`</ph> efficiently.","pos":[0,62],"source":"Use `WriteByte` to write a byte to a `FileStream` efficiently."},{"content":"If the stream is closed or not writable, an exception will be thrown.","pos":[63,132]}]},{"pos":[206,402],"content":"[!NOTE]\n Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.","leadings":["","> "],"nodes":[{"content":" Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.","pos":[8,194],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.FileStream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.","pos":[1,117],"source":" Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>.","pos":[118,186],"source":" For additional information, see <xref:System.IO.Stream.CanWrite%2A>."}]}]}],"pos":[210009,210419],"yaml":true,"extradata":"MT"},{"content":"A byte to write to the stream.","nodes":[{"pos":[0,30],"content":"A byte to write to the stream.","nodes":[{"content":"A byte to write to the stream.","pos":[0,30]}]}],"pos":[211098,211129],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[211293,211315],"yaml":true},{"content":"The stream does not support writing.","nodes":[{"pos":[0,36],"content":"The stream does not support writing.","nodes":[{"content":"The stream does not support writing.","pos":[0,36]}]}],"pos":[211417,211454],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.FileStream\n  commentId: T:System.IO.FileStream\n  id: FileStream\n  children:\n  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)\n  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)\n  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)\n  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)\n  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)\n  - System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)\n  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)\n  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)\n  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)\n  - System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)\n  - System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)\n  - System.IO.FileStream.#ctor(System.String,System.IO.FileMode)\n  - System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)\n  - System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)\n  - System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.FileStream.CanRead\n  - System.IO.FileStream.CanSeek\n  - System.IO.FileStream.CanWrite\n  - System.IO.FileStream.Dispose(System.Boolean)\n  - System.IO.FileStream.EndRead(System.IAsyncResult)\n  - System.IO.FileStream.EndWrite(System.IAsyncResult)\n  - System.IO.FileStream.Finalize\n  - System.IO.FileStream.Flush\n  - System.IO.FileStream.Flush(System.Boolean)\n  - System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)\n  - System.IO.FileStream.GetAccessControl\n  - System.IO.FileStream.Handle\n  - System.IO.FileStream.IsAsync\n  - System.IO.FileStream.Length\n  - System.IO.FileStream.Lock(System.Int64,System.Int64)\n  - System.IO.FileStream.Name\n  - System.IO.FileStream.Position\n  - System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.FileStream.ReadByte\n  - System.IO.FileStream.SafeFileHandle\n  - System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)\n  - System.IO.FileStream.SetLength(System.Int64)\n  - System.IO.FileStream.Unlock(System.Int64,System.Int64)\n  - System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.FileStream.WriteByte(System.Byte)\n  langs:\n  - csharp\n  name: FileStream\n  nameWithType: FileStream\n  fullName: System.IO.FileStream\n  type: Class\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Provides a <xref href=\"System.IO.Stream\"></xref> for a file, supporting both synchronous and asynchronous read and write operations.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/filestream.cs#e23a38af5d11ddd3). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n Use the <xref:System.IO.FileStream> class to read from, write to, open, and close files on a file system, and to manipulate other file-related operating system handles, including pipes, standard input, and standard output. You can use the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.Stream.CopyTo%2A>, and <xref:System.IO.FileStream.Flush%2A> methods to perform synchronous operations, or the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A> methods to perform asynchronous operations. Use the asynchronous methods to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. <xref:System.IO.FileStream> buffers input and output for better performance.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n The <xref:System.IO.FileStream.IsAsync%2A> property detects whether the file handle was opened asynchronously. You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter. When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method. When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.  \\n  \\n The <xref:System.IO.FileStream.Seek%2A> method supports random access to files. <xref:System.IO.FileStream.Seek%2A> allows the read/write position to be moved to any position within the file. This is done with byte offset reference point parameters. The byte offset is relative to the seek reference point, which can be the beginning, the current position, or the end of the underlying file, as represented by the three members of the <xref:System.IO.SeekOrigin> enumeration.  \\n  \\n> [!NOTE]\\n>  Disk files always support random access. At the time of construction, the <xref:System.IO.FileStream.CanSeek%2A> property value is set to `true` or `false` depending on the underlying file type.If the underlying file type is FILE_TYPE_DISK, as defined in winbase.h, the <xref:System.IO.FileStream.CanSeek%2A> property value is `true`. Otherwise, the <xref:System.IO.FileStream.CanSeek%2A> property value is `false`.  \\n  \\n If a process terminates with part of a file locked or closes a file that has outstanding locks, the behavior is undefined.  \\n  \\n For directory operations and other file operations, see the <xref:System.IO.File>, <xref:System.IO.Directory>, and <xref:System.IO.Path> classes. The <xref:System.IO.File> class is a utility class that has static methods primarily for the creation of <xref:System.IO.FileStream> objects based on file paths. The <xref:System.IO.MemoryStream> class creates a stream from a byte array and is similar to the <xref:System.IO.FileStream> class.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).  \\n  \\n## Detection of Stream Position Changes  \\n When a <xref:System.IO.FileStream> object does not have an exclusive hold on its handle, another thread could access the file handle concurrently and change the position of the operating system's file pointer that is associated with the file handle. In this case, the cached position in the <xref:System.IO.FileStream> object and the cached data in the buffer could be compromised. The <xref:System.IO.FileStream> object routinely performs checks on methods that access the cached buffer to ensure that the operating system's handle position is the same as the cached position used by the <xref:System.IO.FileStream> object.  \\n  \\n If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Read%2A> method, the .NET Framework discards the contents of the buffer and reads the stream from the file again. This can affect performance, depending on the size of the file and any other processes that could affect the position of the file stream.  \\n  \\n If an unexpected change in the handle position is detected in a call to the <xref:System.IO.FileStream.Write%2A> method, the contents of the buffer are discarded and an <xref:System.IO.IOException> exception is thrown.  \\n  \\n A <xref:System.IO.FileStream> object will not have an exclusive hold on its handle when either the <xref:System.IO.FileStream.SafeFileHandle%2A> property is accessed to expose the handle or the <xref:System.IO.FileStream> object is given the <xref:System.IO.FileStream.SafeFileHandle%2A> property in its constructor.\"\n  example:\n  - \"The following example demonstrates some of the <xref:System.IO.FileStream> constructors.  \\n  \\n [!code-cpp[fstream class#1](~/samples/snippets/cpp/VS_Snippets_CLR/FStream Class/CPP/fstream class.cpp#1)]\\n [!code-csharp[fstream class#1](~/samples/snippets/csharp/VS_Snippets_CLR/FStream Class/CS/fstream class.cs#1)]\\n [!code-vb[fstream class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FStream Class/VB/fstream class.vb#1)]  \\n  \\n The following example shows how to write to a file asynchronously. This code runs in a WPF app that has a TextBlock named UserInput and a button hooked up to a Click event handler that is named Button_Click. The file path needs to be changed to a file than exits on the computer.  \\n  \\n [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]\\n [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class FileStream : System.IO.Stream\n  inheritance:\n  - System.Object\n  - System.IO.Stream\n  derivedClasses:\n  - System.IO.IsolatedStorage.IsolatedStorageFileStream\n  implements: []\n  inheritedMembers:\n  - System.IO.Stream.CanTimeout\n  - System.IO.Stream.Close\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.CreateWaitHandle\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.Null\n  - System.IO.Stream.ObjectInvariant\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadTimeout\n  - System.IO.Stream.Synchronized(System.IO.Stream)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteTimeout\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.FileStream)\n  - System.IO.FileSystemAclExtensions.SetAccessControl(System.IO.FileStream,System.Security.AccessControl.FileSecurity)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)\n  commentId: M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)\n  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(SafeFileHandle, FileAccess)\n  nameWithType: FileStream.FileStream(SafeFileHandle, FileAccess)\n  fullName: FileStream.FileStream(SafeFileHandle, FileAccess)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission.\n  remarks: \"When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented.  \\n  \\n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access);\n    parameters:\n    - id: handle\n      type: Microsoft.Win32.SafeHandles.SafeFileHandle\n      description: A file handle for the file that the current `FileStream` object will encapsulate.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>access</code> is not a field of <xref href=\"System.IO.FileAccess\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as a disk error, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)\n  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)\n  id: '#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, FileSecurity)\n  nameWithType: FileStream.FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, FileSecurity)\n  fullName: FileStream.FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, FileSecurity)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.\n  remarks: \"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file. To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.  \\n  \\n The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.  \\n  \\n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \\n  \\n> [!NOTE]\\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \\n  \\n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example writes data to a file and then reads the data using the <xref:System.IO.FileStream> object.  \\n  \\n [!code-cpp[IO.FileStream.ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.FileStream.ctor2/cpp/example.cpp#1)]\\n [!code-csharp[IO.FileStream.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.FileStream.ctor2/CS/example.cs#1)]\\n [!code-vb[IO.FileStream.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.FileStream.ctor2/VB/example.vb#1)]\"\n  syntax:\n    content: public FileStream (string path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that the current <xref href=\"System.IO.FileStream\"></xref> object will encapsulate.\n    - id: mode\n      type: System.IO.FileMode\n      description: A constant that determines how to open or create the file.\n    - id: rights\n      type: System.Security.AccessControl.FileSystemRights\n      description: A constant that determines the access rights to use when creating access and audit rules for the file.\n    - id: share\n      type: System.IO.FileShare\n      description: A constant that determines how the file will be shared by processes.\n    - id: bufferSize\n      type: System.Int32\n      description: A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.\n    - id: options\n      type: System.IO.FileOptions\n      description: A constant that specifies additional file options.\n    - id: fileSecurity\n      type: System.Security.AccessControl.FileSecurity\n      description: A constant that determines the access control and audit security for the file.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\"), contains only white space, or contains one or more invalid characters.  \\n  \\n -or-  \\n  \\n <code>path</code> refers to a non-file device, such as \\\"con:\\\", \\\"com1:\\\", \\\"lpt1:\\\", etc. in an NTFS environment.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>bufferSize</code> is negative or zero.  \\n  \\n -or-  \\n  \\n <code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value.\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.IO.FileOptions.Encrypted\\\"></xref> is specified for <code>options</code>, but file encryption is not supported on the current platform.\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified <code>path</code>, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Windows NT or later.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)\n  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)\n  id: '#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions)\n  nameWithType: FileStream.FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions)\n  fullName: FileStream.FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options.\n  remarks: \"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n Use this <xref:System.IO.FileStream.%23ctor%2A> constructor to apply access rights at the point of creation of a file. To access or modify rights on an existing file, consider using the <xref:System.IO.File.GetAccessControl%2A> and <xref:System.IO.File.SetAccessControl%2A> methods.  \\n  \\n The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.  \\n  \\n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \\n  \\n> [!NOTE]\\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \\n  \\n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public FileStream (string path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that the current <xref href=\"System.IO.FileStream\"></xref> object will encapsulate.\n    - id: mode\n      type: System.IO.FileMode\n      description: A constant that determines how to open or create the file.\n    - id: rights\n      type: System.Security.AccessControl.FileSystemRights\n      description: A constant that determines the access rights to use when creating access and audit rules for the file.\n    - id: share\n      type: System.IO.FileShare\n      description: A constant that determines how the file will be shared by processes.\n    - id: bufferSize\n      type: System.Int32\n      description: A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.\n    - id: options\n      type: System.IO.FileOptions\n      description: A constant that specifies additional file options.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\"), contains only white space, or contains one or more invalid characters.  \\n  \\n -or-  \\n  \\n <code>path</code> refers to a non-file device, such as \\\"con:\\\", \\\"com1:\\\", \\\"lpt1:\\\", etc. in an NTFS environment.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>bufferSize</code> is negative or zero.  \\n  \\n -or-  \\n  \\n <code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value.\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Windows NT or later.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.IO.FileOptions.Encrypted\\\"></xref> is specified for <code>options</code>, but file encryption is not supported on the current platform.\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified <code>path</code>, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)\n  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)\n  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(String, FileMode, FileAccess, FileShare, Int32, FileOptions)\n  nameWithType: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32, FileOptions)\n  fullName: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32, FileOptions)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.\n  remarks: \"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n The `fileOptions` parameter is used to provide access to more advanced operations that can be leveraged when creating a <xref:System.IO.FileStream> object.  \\n  \\n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \\n  \\n> [!NOTE]\\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \\n  \\n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example writes data to a file and then reads the data using the <xref:System.IO.FileStream> object.  \\n  \\n [!code-cpp[IO.FileStream.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.FileStream.ctor1/cpp/example.cpp#1)]\\n [!code-csharp[IO.FileStream.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.FileStream.ctor1/CS/example.cs#1)]\\n [!code-vb[IO.FileStream.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.FileStream.ctor1/VB/example.vb#1)]\"\n  syntax:\n    content: public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that the current `FileStream` object will encapsulate.\n    - id: mode\n      type: System.IO.FileMode\n      description: A constant that determines how to open or create the file.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.\n    - id: share\n      type: System.IO.FileShare\n      description: A constant that determines how the file will be shared by processes.\n    - id: bufferSize\n      type: System.Int32\n      description: A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.\n    - id: options\n      type: System.IO.FileOptions\n      description: A value that specifies additional file options.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\"), contains only white space, or contains one or more invalid characters.  \\n  \\n -or-  \\n  \\n <code>path</code> refers to a non-file device, such as \\\"con:\\\", \\\"com1:\\\", \\\"lpt1:\\\", etc. in an NTFS environment.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>bufferSize</code> is negative or zero.  \\n  \\n -or-  \\n  \\n <code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value.\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.IO.FileOptions.Encrypted\\\"></xref> is specified for <code>options</code>, but file encryption is not supported on the current platform.\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)\n  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)\n  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(String, FileMode, FileAccess, FileShare, Int32, Boolean)\n  nameWithType: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32, Boolean)\n  fullName: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32, Boolean)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.\n  remarks: \"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \\n  \\n> [!NOTE]\\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \\n  \\n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example shows how to asynchronously write data to a file and then verify that the data was written correctly. A `State` object is created to pass information from the main thread to the `EndReadCallback` and `EndWriteCallback` methods.  \\n  \\n [!code-cpp[System.IO.FileStream2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#1)]\\n [!code-csharp[System.IO.FileStream2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#1)]\\n [!code-vb[System.IO.FileStream2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#1)]\"\n  syntax:\n    content: public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that the current `FileStream` object will encapsulate.\n    - id: mode\n      type: System.IO.FileMode\n      description: A constant that determines how to open or create the file.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.\n    - id: share\n      type: System.IO.FileShare\n      description: A constant that determines how the file will be shared by processes.\n    - id: bufferSize\n      type: System.Int32\n      description: A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096..\n    - id: useAsync\n      type: System.Boolean\n      description: Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying `true`, the handle might be opened synchronously depending on the platform. When opened asynchronously, the <xref href=\"System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> and <xref href=\"System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the <code>useAsync</code> parameter to `true`. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\"), contains only white space, or contains one or more invalid characters.  \\n  \\n -or-  \\n  \\n <code>path</code> refers to a non-file device, such as \\\"con:\\\", \\\"com1:\\\", \\\"lpt1:\\\", etc. in an NTFS environment.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>bufferSize</code> is negative or zero.  \\n  \\n -or-  \\n  \\n <code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value.\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \\n  \\n -or-  \\n  \\n The system is running Windows 98 or Windows 98 Second Edition and <code>share</code> is set to `FileShare.Delete`.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)\n  commentId: M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)\n  id: '#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(IntPtr, FileAccess, Boolean, Int32, Boolean)\n  nameWithType: FileStream.FileStream(IntPtr, FileAccess, Boolean, Int32, Boolean)\n  fullName: FileStream.FileStream(IntPtr, FileAccess, Boolean, Int32, Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, `FileStream` instance ownership, buffer size, and synchronous or asynchronous state.\n  remarks: \"The `FileStream` object is given the specified access to the file. The ownership of the handle will be as specified. If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle. In particular, the file's handle count is decremented. The `FileStream` object is given the specified buffer size.  \\n  \\n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.  \\n  \\n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use FileStream(SafeFileHandle handle, FileAccess access, int bufferSize, bool isAsync) instead\")]\n\n      public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: A file handle for the file that this `FileStream` object will encapsulate.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.\n    - id: ownsHandle\n      type: System.Boolean\n      description: '`true` if the file handle will be owned by this `FileStream` instance; otherwise, `false`.'\n    - id: bufferSize\n      type: System.Int32\n      description: A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.\n    - id: isAsync\n      type: System.Boolean\n      description: '`true` if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, `false`.'\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>access</code> is less than `FileAccess.Read` or greater than `FileAccess.ReadWrite` or <code>bufferSize</code> is less than or equal to 0.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The handle is invalid.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as a disk error, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(String, FileMode, FileAccess, FileShare)\n  nameWithType: FileStream.FileStream(String, FileMode, FileAccess, FileShare)\n  fullName: FileStream.FileStream(String, FileMode, FileAccess, FileShare)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write permission, and sharing permission.\n  remarks: \"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \\n  \\n The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed). The buffer size is set to the default size of 4096 bytes (4 KB).  \\n  \\n> [!NOTE]\\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \\n  \\n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.  \\n  \\n [!code-cpp[System.IO.FileStream3#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#2)]\\n [!code-csharp[System.IO.FileStream3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#2)]\\n [!code-vb[System.IO.FileStream3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#2)]\"\n  syntax:\n    content: public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that the current `FileStream` object will encapsulate.\n    - id: mode\n      type: System.IO.FileMode\n      description: A constant that determines how to open or create the file.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.\n    - id: share\n      type: System.IO.FileShare\n      description: A constant that determines how the file will be shared by processes.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\"), contains only white space, or contains one or more invalid characters.  \\n  \\n -or-  \\n  \\n <code>path</code> refers to a non-file device, such as \\\"con:\\\", \\\"com1:\\\", \\\"lpt1:\\\", etc. in an NTFS environment.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \\n  \\n -or-  \\n  \\n The system is running Windows 98 or Windows 98 Second Edition and <code>share</code> is set to `FileShare.Delete`.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>mode</code> contains an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)\n  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)\n  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(String, FileMode, FileAccess, FileShare, Int32)\n  nameWithType: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32)\n  fullName: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, read/write and sharing permission, and buffer size.\n  remarks: \"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \\n  \\n> [!NOTE]\\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \\n  \\n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that the current `FileStream` object will encapsulate.\n    - id: mode\n      type: System.IO.FileMode\n      description: A constant that determines how to open or create the file.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.\n    - id: share\n      type: System.IO.FileShare\n      description: A constant that determines how the file will be shared by processes.\n    - id: bufferSize\n      type: System.Int32\n      description: A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\"), contains only white space, or contains one or more invalid characters.  \\n  \\n -or-  \\n  \\n <code>path</code> refers to a non-file device, such as \\\"con:\\\", \\\"com1:\\\", \\\"lpt1:\\\", etc. in an NTFS environment.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>bufferSize</code> is negative or zero.  \\n  \\n -or-  \\n  \\n <code>mode</code>, <code>access</code>, or <code>share</code> contain an invalid value.\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \\n  \\n -or-  \\n  \\n The system is running Windows 98 or Windows 98 Second Edition and <code>share</code> is set to `FileShare.Delete`.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)\n  commentId: M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)\n  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(SafeFileHandle, FileAccess, Int32, Boolean)\n  nameWithType: FileStream.FileStream(SafeFileHandle, FileAccess, Int32, Boolean)\n  fullName: FileStream.FileStream(SafeFileHandle, FileAccess, Int32, Boolean)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.\n  remarks: \"You set the `isAsync` parameter to `true` to open the file handle asynchronously. When the parameter is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the parameter does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method. When the `isAsync` parameter is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.  \\n  \\n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.  \\n  \\n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync);\n    parameters:\n    - id: handle\n      type: Microsoft.Win32.SafeHandles.SafeFileHandle\n      description: A file handle for the file that this `FileStream` object will encapsulate.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.\n    - id: bufferSize\n      type: System.Int32\n      description: A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.\n    - id: isAsync\n      type: System.Boolean\n      description: '`true` if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, `false`.'\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>handle</code> parameter is an invalid handle.  \\n  \\n -or-  \\n  \\n The <code>handle</code> parameter is a synchronous handle and it was used asynchronously.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>bufferSize</code> parameter is negative.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as a disk error, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)\n  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)\n  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(String, FileMode, FileAccess)\n  nameWithType: FileStream.FileStream(String, FileMode, FileAccess)\n  fullName: FileStream.FileStream(String, FileMode, FileAccess)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path, creation mode, and read/write permission.\n  remarks: \"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \\n  \\n The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed). The buffer size is set to the default size of 4096 bytes (4 KB).  \\n  \\n> [!NOTE]\\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \\n  \\n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \\n  \\n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that the current `FileStream` object will encapsulate.\n    - id: mode\n      type: System.IO.FileMode\n      description: A constant that determines how to open or create the file.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that determines how the file can be accessed by the `FileStream` object. This also determines the values returned by the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object. <xref href=\"System.IO.FileStream.CanSeek\"></xref> is `true` if <code>path</code> specifies a disk file.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\"), contains only white space, or contains one or more invalid characters.  \\n  \\n -or-  \\n  \\n <code>path</code> refers to a non-file device, such as \\\"con:\\\", \\\"com1:\\\", \\\"lpt1:\\\", etc. in an NTFS environment.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified <code>path</code>, such as when <code>access</code> is `Write` or `ReadWrite` and the file or directory is set for read-only access.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>mode</code> contains an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)\n  commentId: M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)\n  id: '#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(IntPtr, FileAccess, Boolean)\n  nameWithType: FileStream.FileStream(IntPtr, FileAccess, Boolean)\n  fullName: FileStream.FileStream(IntPtr, FileAccess, Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission and `FileStream` instance ownership.\n  remarks: \"The `FileStream` object is given the specified access to the file. The ownership of the handle will be as specified. If this process owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle and the file's handle count is decremented. The `FileStream` object is given the default buffer size of 4096 bytes.  \\n  \\n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling methods other than `Close` after you are done using the handle.  \\n  \\n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use FileStream(SafeFileHandle handle, FileAccess access) instead\")]\n\n      public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: A file handle for the file that the current `FileStream` object will encapsulate.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.\n    - id: ownsHandle\n      type: System.Boolean\n      description: '`true` if the file handle will be owned by this `FileStream` instance; otherwise, `false`.'\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>access</code> is not a field of <xref href=\"System.IO.FileAccess\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as a disk error, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)\n  commentId: M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)\n  id: '#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(SafeFileHandle, FileAccess, Int32)\n  nameWithType: FileStream.FileStream(SafeFileHandle, FileAccess, Int32)\n  fullName: FileStream.FileStream(SafeFileHandle, FileAccess, Int32)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, and buffer size.\n  remarks: \"`FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.  \\n  \\n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize);\n    parameters:\n    - id: handle\n      type: Microsoft.Win32.SafeHandles.SafeFileHandle\n      description: A file handle for the file that the current `FileStream` object will encapsulate.\n    - id: access\n      type: System.IO.FileAccess\n      description: A <xref href=\"System.IO.FileAccess\"></xref> constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.\n    - id: bufferSize\n      type: System.Int32\n      description: A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>handle</code> parameter is an invalid handle.  \\n  \\n -or-  \\n  \\n The <code>handle</code> parameter is a synchronous handle and it was used asynchronously.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>bufferSize</code> parameter is negative.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as a disk error, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode)\n  commentId: M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)\n  id: '#ctor(System.String,System.IO.FileMode)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(String, FileMode)\n  nameWithType: FileStream.FileStream(String, FileMode)\n  fullName: FileStream.FileStream(String, FileMode)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class with the specified path and creation mode.\n  remarks: \"The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\"\\\\\\\\\\\\\\\\.\\\\PHYSICALDRIVE0 \\\".  \\n  \\n The `path` parameter can be a file name, including a file on a Universal Naming Convention (UNC) share.  \\n  \\n The constructor is given read/write access to the file, and it is opened sharing Read access (that is, requests to open the file for writing by this or another process will fail until the `FileStream` object has been closed, but read attempts will succeed).  \\n  \\n You cannot use this constructor to open read-only files; instead, you must use a constructor that accepts a `FileAccess` parameter with the value set to `FileAccess.Read`.  \\n  \\n The buffer size is set to the default size of 4096 bytes (4 KB).  \\n  \\n> [!NOTE]\\n>  `path` is not required to be a file stored on disk; it can be any part of a system that supports access through streams. For example, depending on the system, this class can access a physical device.  \\n  \\n <xref:System.IO.Stream.CanSeek%2A> is `true` for all <xref:System.IO.FileStream> objects that encapsulate files. If `path` indicates a device that does not support seeking, the <xref:System.IO.FileStream.CanSeek%2A> property on the resulting <xref:System.IO.FileStream> is `false`. For additional information, see <xref:System.IO.Stream.CanSeek%2A>.  \\n  \\n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \\n  \\n For constructors without a <xref:System.IO.FileAccess> parameter, if the `mode` parameter is set to <xref:System.IO.FileMode.Append>, <xref:System.IO.FileAccess.Write> is the default access. Otherwise, the access is set to <xref:System.IO.FileAccess.ReadWrite>.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.  \\n  \\n [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]\\n [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]\\n [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]\"\n  syntax:\n    content: public FileStream (string path, System.IO.FileMode mode);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that the current `FileStream` object will encapsulate.\n    - id: mode\n      type: System.IO.FileMode\n      description: A constant that determines how to open or create the file.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>path</code> is an empty string (\\\"\\\"), contains only white space, or contains one or more invalid characters.  \\n  \\n -or-  \\n  \\n <code>path</code> refers to a non-file device, such as \\\"con:\\\", \\\"com1:\\\", \\\"lpt1:\\\", etc. in an NTFS environment.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>path</code> refers to a non-file device, such as \"con:\", \"com1:\", \"lpt1:\", etc. in a non-NTFS environment.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>path</code> is `null`.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file cannot be found, such as when <code>mode</code> is `FileMode.Truncate` or `FileMode.Open`, and the file specified by <code>path</code> does not exist. The file must already exist in these modes.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as specifying `FileMode.CreateNew` when the file specified by <code>path</code> already exists, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, such as being on an unmapped drive.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>mode</code> contains an invalid value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)\n  commentId: M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)\n  id: '#ctor(System.IntPtr,System.IO.FileAccess)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(IntPtr, FileAccess)\n  nameWithType: FileStream.FileStream(IntPtr, FileAccess)\n  fullName: FileStream.FileStream(IntPtr, FileAccess)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission.\n  remarks: \"When <xref:System.IO.Stream.Close%2A> is called, the handle is also closed and the file's handle count is decremented.  \\n  \\n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use FileStream(SafeFileHandle handle, FileAccess access) instead\")]\n\n      public FileStream (IntPtr handle, System.IO.FileAccess access);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: A file handle for the file that the current `FileStream` object will encapsulate.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>access</code> is not a field of <xref href=\"System.IO.FileAccess\"></xref>.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as a disk error, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)\n  commentId: M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)\n  id: '#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)'\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FileStream(IntPtr, FileAccess, Boolean, Int32)\n  nameWithType: FileStream.FileStream(IntPtr, FileAccess, Boolean, Int32)\n  fullName: FileStream.FileStream(IntPtr, FileAccess, Boolean, Int32)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.FileStream\"></xref> class for the specified file handle, with the specified read/write permission, `FileStream` instance ownership, and buffer size.\n  remarks: \"The `FileStream` object is given the specified access to the file. The ownership of the handle will be as specified. If this `FileStream` owns the handle, a call to the <xref:System.IO.Stream.Close%2A> method will also close the handle. In particular, the file's handle count is decremented. The `FileStream` object is given the specified buffer size.  \\n  \\n `FileStream` assumes that it has exclusive control over the handle. Reading, writing, or seeking while a `FileStream` is also holding a handle could result in data corruption. For data safety, call <xref:System.IO.FileStream.Flush%2A> before using the handle, and avoid calling any methods other than `Close` after you are done using the handle. Alternately, read and write to the handle before calling this `FileStream` constructor.  \\n  \\n `FileShare.Read` is the default for those <xref:System.IO.FileStream> constructors without a `FileShare` parameter.  \\n  \\n> [!CAUTION]\\n>  When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use FileStream(SafeFileHandle handle, FileAccess access, int bufferSize) instead\")]\n\n      public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize);\n    parameters:\n    - id: handle\n      type: System.IntPtr\n      description: A file handle for the file that this `FileStream` object will encapsulate.\n    - id: access\n      type: System.IO.FileAccess\n      description: A constant that sets the <xref href=\"System.IO.FileStream.CanRead\"></xref> and <xref href=\"System.IO.FileStream.CanWrite\"></xref> properties of the `FileStream` object.\n    - id: ownsHandle\n      type: System.Boolean\n      description: '`true` if the file handle will be owned by this `FileStream` instance; otherwise, `false`.'\n    - id: bufferSize\n      type: System.Int32\n      description: A positive <xref href=\"System.Int32\"></xref> value greater than 0 indicating the buffer size. The default buffer size is 4096.\n  overload: System.IO.FileStream.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>bufferSize</code> is negative.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error, such as a disk error, occurred.  \\n  \\n -or-  \\n  \\n The stream has been closed.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The <code>access</code> requested is not permitted by the operating system for the specified file handle, such as when <code>access</code> is `Write` or `ReadWrite` and the file handle is set for read-only access.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: FileStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: FileStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Begins an asynchronous read operation. (Consider using <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)\n  remarks: \"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.  \\n  \\n <xref:System.IO.FileStream.EndRead%2A> must be called exactly once for every call to <xref:System.IO.FileStream.BeginRead%2A>. Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.  \\n  \\n <xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O. While either can be used, the underlying operating system resources might allow access in only one of these modes. By default, <xref:System.IO.FileStream> opens the operating system handle synchronously. In Windows, this slows down asynchronous methods. If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \\n  \\n> [!NOTE]\\n>  Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading. For additional information, see <xref:System.IO.Stream.CanRead%2A>.  \\n  \\n If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginRead%2A>. Errors that occur during an asynchronous read request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndRead%2A>.  \\n  \\n <xref:System.IO.Stream.EndRead%2A> must be called with this <xref:System.IAsyncResult> to find out how many bytes were read.  \\n  \\n Multiple simultaneous asynchronous requests render the request completion order uncertain.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \\n  \\n [!code-cpp[System.IO.FileStream2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#3)]\\n [!code-csharp[System.IO.FileStream2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#3)]\\n [!code-vb[System.IO.FileStream2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#3)]\"\n  syntax:\n    content: public override IAsyncResult BeginRead (byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);\n    parameters:\n    - id: array\n      type: System.Byte[]\n      description: The buffer to read data into.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>array</code> at which to begin reading.\n    - id: numBytes\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    - id: userCallback\n      type: System.AsyncCallback\n      description: The method to be called when the asynchronous read operation is completed.\n    - id: stateObject\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous read request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An object that references the asynchronous read.\n  overload: System.IO.FileStream.BeginRead*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The array length minus <code>offset</code> is less than <code>numBytes</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>numBytes</code> is negative.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An asynchronous read was attempted past the end of the file.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: FileStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: FileStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Begins an asynchronous write operation. (Consider using <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)\n  remarks: \"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.  \\n  \\n <xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>. <xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.  \\n  \\n This method overrides <xref:System.IO.Stream.BeginWrite%2A>.  \\n  \\n <xref:System.IO.FileStream> provides two different modes of operation: synchronous I/O and asynchronous I/O. While either can be used, the underlying operating system resources might allow access in only one of these modes. By default, <xref:System.IO.FileStream> opens the operating system handle synchronously. In Windows, this slows down asynchronous methods. If asynchronous methods are used, use the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \\n  \\n If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from <xref:System.IO.FileStream.BeginWrite%2A>. Errors that occur during an asynchronous write request, such as a disk failure during the IO request, occur on the thread pool thread and become visible upon a call to <xref:System.IO.FileStream.EndWrite%2A>.  \\n  \\n Multiple simultaneous asynchronous requests render the request completion order uncertain.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \\n  \\n [!code-cpp[System.IO.FileStream2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#2)]\\n [!code-csharp[System.IO.FileStream2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#2)]\\n [!code-vb[System.IO.FileStream2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#2)]\"\n  syntax:\n    content: public override IAsyncResult BeginWrite (byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);\n    parameters:\n    - id: array\n      type: System.Byte[]\n      description: The buffer containing data to write to the current stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>array</code> at which to begin copying bytes to the current stream.\n    - id: numBytes\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    - id: userCallback\n      type: System.AsyncCallback\n      description: The method to be called when the asynchronous write operation is completed.\n    - id: stateObject\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous write request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An object that references the asynchronous write.\n  overload: System.IO.FileStream.BeginWrite*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>array</code> length minus <code>offset</code> is less than <code>numBytes</code>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>numBytes</code> is negative.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.CanRead\n  commentId: P:System.IO.FileStream.CanRead\n  id: CanRead\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: FileStream.CanRead\n  fullName: FileStream.CanRead\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets a value indicating whether the current stream supports reading.\n  remarks: \"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.FileStream.Read%2A>, <xref:System.IO.FileStream.ReadByte%2A>, and <xref:System.IO.FileStream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.  \\n  \\n If the stream is closed, this property returns `false`.\"\n  example:\n  - \"The following example demonstrates a use of the `CanRead` property. The output of this code is \\\"MyFile.txt is not writable.\\\" To get the output message \\\"MyFile.txt can be both written to and read from.\\\", change the `FileAccess` parameter to `ReadWrite` in the `FileStream` constructor.  \\n  \\n [!code-cpp[Classic FileStream.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FileStream.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CS/source.cs#1)]\\n [!code-vb[Classic FileStream.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/VB/source.vb#1)]\"\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stream supports reading; `false` if the stream is closed or was opened with write-only access.'\n  overload: System.IO.FileStream.CanRead*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.CanSeek\n  commentId: P:System.IO.FileStream.CanSeek\n  id: CanSeek\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: FileStream.CanSeek\n  fullName: FileStream.CanSeek\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets a value indicating whether the current stream supports seeking.\n  remarks: \"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.FileStream.Length%2A>, <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Position%2A>, and <xref:System.IO.FileStream.Seek%2A> throw a <xref:System.NotSupportedException>.  \\n  \\n If the stream is closed, this property returns `false`.\"\n  example:\n  - \"The following example uses the `CanSeek` property to check whether a stream supports seeking.  \\n  \\n [!code-cpp[fstream canseek#1](~/samples/snippets/cpp/VS_Snippets_CLR/FStream CanSeek/CPP/fstream canseek.cpp#1)]\\n [!code-csharp[fstream canseek#1](~/samples/snippets/csharp/VS_Snippets_CLR/FStream CanSeek/CS/fstream canseek.cs#1)]\\n [!code-vb[fstream canseek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FStream CanSeek/VB/fstream canseek.vb#1)]\"\n  syntax:\n    content: public override bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stream supports seeking; `false` if the stream is closed or if the `FileStream` was constructed from an operating-system handle such as a pipe or output to the console.'\n  overload: System.IO.FileStream.CanSeek*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.CanWrite\n  commentId: P:System.IO.FileStream.CanWrite\n  id: CanWrite\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: FileStream.CanWrite\n  fullName: FileStream.CanWrite\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets a value indicating whether the current stream supports writing.\n  remarks: \"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.FileStream.SetLength%2A>, <xref:System.IO.FileStream.Write%2A>, <xref:System.IO.FileStream.BeginWrite%2A>, or <xref:System.IO.FileStream.WriteByte%2A> throws a <xref:System.NotSupportedException>.  \\n  \\n If the stream is closed, this property returns `false`.\"\n  example:\n  - \"The following example uses the `CanWrite` property to check whether a stream supports writing.  \\n  \\n [!code-cpp[fstream canwrite#1](~/samples/snippets/cpp/VS_Snippets_CLR/FStream CanWrite/CPP/fstream canwrite.cpp#1)]\\n [!code-csharp[fstream canwrite#1](~/samples/snippets/csharp/VS_Snippets_CLR/FStream CanWrite/CS/fstream canwrite.cs#1)]\\n [!code-vb[fstream canwrite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FStream CanWrite/VB/fstream canwrite.vb#1)]  \\n  \\n The following is an example using the `CanWrite` property. The output of this code is \\\"MyFile.txt is writable.\\\" To get the output message \\\"MyFile.txt can be both written to and read from.\\\", change the `FileAccess` parameter to `ReadWrite` in the `FileStream` constructor.  \\n  \\n [!code-cpp[Classic FileStream.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanWrite Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FileStream.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanWrite Example/CS/source.cs#1)]\\n [!code-vb[Classic FileStream.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanWrite Example/VB/source.vb#1)]\"\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stream supports writing; `false` if the stream is closed or was opened with read-only access.'\n  overload: System.IO.FileStream.CanWrite*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Dispose(System.Boolean)\n  commentId: M:System.IO.FileStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: FileStream.Dispose(Boolean)\n  fullName: FileStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Releases the unmanaged resources used by the <xref href=\"System.IO.FileStream\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.FileStream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.FileStream.Dispose%2A> with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.FileStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.IO.FileStream.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.EndRead(System.IAsyncResult)\n  commentId: M:System.IO.FileStream.EndRead(System.IAsyncResult)\n  id: EndRead(System.IAsyncResult)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: EndRead(IAsyncResult)\n  nameWithType: FileStream.EndRead(IAsyncResult)\n  fullName: FileStream.EndRead(IAsyncResult)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Waits for the pending asynchronous read operation to complete. (Consider using <xref href=\"System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)\n  remarks: \"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginRead%2A> and <xref:System.IO.FileStream.EndRead%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.  \\n  \\n <xref:System.IO.FileStream.EndRead%2A> must be called exactly for every call to <xref:System.IO.FileStream.BeginRead%2A>. Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.  \\n  \\n This method overrides <xref:System.IO.Stream.EndRead%2A>.  \\n  \\n <xref:System.IO.FileStream.EndRead%2A> can be called on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginRead%2A>. Calling <xref:System.IO.FileStream.EndRead%2A> tells you how many bytes were read from the stream. <xref:System.IO.FileStream.EndRead%2A> will block until the I/O operation has completed.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \\n  \\n [!code-cpp[System.IO.FileStream2#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#4)]\\n [!code-csharp[System.IO.FileStream2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#4)]\\n [!code-vb[System.IO.FileStream2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#4)]\"\n  syntax:\n    content: public override int EndRead (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The reference to the pending asynchronous request to wait for.\n    return:\n      type: System.Int32\n      description: The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.\n  overload: System.IO.FileStream.EndRead*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: This <xref href=\"System.IAsyncResult\"></xref> object was not created by calling <xref href=\"System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> on this class.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.IO.FileStream.EndRead(System.IAsyncResult)\"></xref> is called multiple times.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The stream is closed or an internal error has occurred.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.EndWrite(System.IAsyncResult)\n  commentId: M:System.IO.FileStream.EndWrite(System.IAsyncResult)\n  id: EndWrite(System.IAsyncResult)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: EndWrite(IAsyncResult)\n  nameWithType: FileStream.EndWrite(IAsyncResult)\n  fullName: FileStream.EndWrite(IAsyncResult)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Ends an asynchronous write operation and blocks until the I/O operation is complete. (Consider using <xref href=\"System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\"></xref> instead.)\n  remarks: \"In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.FileStream.BeginWrite%2A> and <xref:System.IO.FileStream.EndWrite%2A> to implement asynchronous file operations. These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.FileStream.FlushAsync%2A>, help you implement asynchronous file operations more easily.  \\n  \\n This method overrides <xref:System.IO.Stream.EndWrite%2A>.  \\n  \\n <xref:System.IO.FileStream.EndWrite%2A> must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.FileStream.BeginWrite%2A>. <xref:System.IO.FileStream.EndWrite%2A> will block until the I/O operation has completed.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \\n  \\n [!code-cpp[System.IO.FileStream2#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#3)]\\n [!code-csharp[System.IO.FileStream2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#3)]\\n [!code-vb[System.IO.FileStream2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#3)]\"\n  syntax:\n    content: public override void EndWrite (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: The pending asynchronous I/O request.\n  overload: System.IO.FileStream.EndWrite*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: This <xref href=\"System.IAsyncResult\"></xref> object was not created by calling <xref href=\"System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\"></xref> on this class.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.IO.FileStream.EndWrite(System.IAsyncResult)\"></xref> is called multiple times.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The stream is closed or an internal error has occurred.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Finalize\n  commentId: M:System.IO.FileStream.Finalize\n  id: Finalize\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: FileStream.Finalize()\n  fullName: FileStream.Finalize()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the `FileStream`.\n  remarks: The garbage collector calls `Finalize` when the current object is ready to be finalized. `Finalize` closes the `FileStream`.\n  syntax:\n    content: ~FileStream ();\n    parameters: []\n  overload: System.IO.FileStream.Finalize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Flush\n  commentId: M:System.IO.FileStream.Flush\n  id: Flush\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: FileStream.Flush()\n  fullName: FileStream.Flush()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Clears buffers for this stream and causes any buffered data to be written to the file.\n  remarks: \"This method overrides <xref:System.IO.Stream.Flush%2A?displayProperty=fullName>.  \\n  \\n When you call the <xref:System.IO.FileStream.Flush%2A?displayProperty=fullName> method, the operating system I/O buffer is also flushed.  \\n  \\n A stream’s encoder is not flushed unless you explicitly call <xref:System.IO.FileStream.Flush%2A> or dispose of the object. Setting <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  \\n  \\n Because a buffer can be used for either reading or writing, <xref:System.IO.FileStream.Flush> performs the following two functions:  \\n  \\n-   Any data previously written to the buffer is copied to the file and the buffer is cleared except for its encoder state.  \\n  \\n-   If <xref:System.IO.BufferedStream.CanSeek%2A?displayProperty=fullName> is `true` and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer. The buffer is then cleared.  \\n  \\n Use the <xref:System.IO.FileStream.Flush%28System.Boolean%29> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.  \\n  \\n [!code-cpp[System.IO.FileStream3#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#4)]\\n [!code-csharp[System.IO.FileStream3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#4)]\\n [!code-vb[System.IO.FileStream3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#4)]\"\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.IO.FileStream.Flush*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Flush(System.Boolean)\n  commentId: M:System.IO.FileStream.Flush(System.Boolean)\n  id: Flush(System.Boolean)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Flush(Boolean)\n  nameWithType: FileStream.Flush(Boolean)\n  fullName: FileStream.Flush(Boolean)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.\n  remarks: \"Use this overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.  \\n  \\n When you call the <xref:System.IO.FileStream.Flush%2A> method, the operating system I/O buffer is also flushed.\"\n  syntax:\n    content: public virtual void Flush (bool flushToDisk);\n    parameters:\n    - id: flushToDisk\n      type: System.Boolean\n      description: '`true` to flush all intermediate file buffers; otherwise, `false`.'\n  overload: System.IO.FileStream.Flush*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)\n  commentId: M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)\n  id: FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: FlushAsync(CancellationToken)\n  nameWithType: FileStream.FlushAsync(CancellationToken)\n  fullName: FileStream.FlushAsync(CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.\n  remarks: \"When you call the <xref:System.IO.FileStream.FlushAsync%2A> method, the operating system I/O buffer is also flushed.  \\n  \\n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.\"\n  syntax:\n    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous flush operation.\n  overload: System.IO.FileStream.FlushAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.GetAccessControl\n  commentId: M:System.IO.FileStream.GetAccessControl\n  id: GetAccessControl\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: GetAccessControl()\n  nameWithType: FileStream.GetAccessControl()\n  fullName: FileStream.GetAccessControl()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Gets a <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> object that encapsulates the access control list (ACL) entries for the file described by the current <xref href=\"System.IO.FileStream\"></xref> object.\n  remarks: \"While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.GetAccessControl%2A> can be used to retrieve the access control list (ACL) entries of an existing file, consider using <xref:System.IO.File.GetAccessControl%2A?displayProperty=fullName> method, as it is easier to use.  \\n  \\n Use the <xref:System.IO.FileStream.GetAccessControl%2A> method to retrieve the ACL entries for a file.  \\n  \\n An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).\"\n  syntax:\n    content: public System.Security.AccessControl.FileSecurity GetAccessControl ();\n    parameters: []\n    return:\n      type: System.Security.AccessControl.FileSecurity\n      description: An object that encapsulates the access control settings for the file described by the current <xref href=\"System.IO.FileStream\"></xref> object.\n  overload: System.IO.FileStream.GetAccessControl*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The file is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while opening the file.\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The file could not be found.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"This operation is not supported on the current platform.  \\n  \\n -or-  \\n  \\n The caller does not have the required permission.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Handle\n  commentId: P:System.IO.FileStream.Handle\n  id: Handle\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Handle\n  nameWithType: FileStream.Handle\n  fullName: FileStream.Handle\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets the operating system file handle for the file that the current `FileStream` object encapsulates.\n  remarks: \"This property is an operating system handle for use with operating-system-provided system calls (such as `ReadFile` on Windows). It will not work with C library functions that expect a file descriptor, such as `fread`.  \\n  \\n The operating system handle might have been opened synchronously or asynchronously, depending on which `FileStream` constructor was called. Use the <xref:System.IO.FileStream.IsAsync%2A> property to discover whether this handle was opened asynchronously. In Win32, this means the handle was opened for overlapped IO, and it requires different parameters to `ReadFile` and `WriteFile`.  \\n  \\n> [!CAUTION]\\n>  Data corruption might occur if a `FileStream` is created, its handle is passed, some operation moves the handle's file pointer, and then the `FileStream` is used again. Multiple threads cannot safely write to the same file simultaneously, and `FileStream` buffering code assumes that it exclusively controls the handle. `FileStream` might throw an <xref:System.IO.IOException> if `FileStream` detects that some other process has moved the file pointer. To avoid this, do not write any data into a portion of the file that `FileStream` might have buffered, and restore the file pointer to the location it had when methods were last called on `FileStream`.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use SafeFileHandle instead\")]\n\n      public virtual IntPtr Handle { get; }\n    return:\n      type: System.IntPtr\n      description: The operating system file handle for the file encapsulated by this `FileStream` object, or -1 if the `FileStream` has been closed.\n  overload: System.IO.FileStream.Handle*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The caller does not have the required permission.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.IsAsync\n  commentId: P:System.IO.FileStream.IsAsync\n  id: IsAsync\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: IsAsync\n  nameWithType: FileStream.IsAsync\n  fullName: FileStream.IsAsync\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets a value indicating whether the `FileStream` was opened asynchronously or synchronously.\n  remarks: \"The `IsAsync` property detects whether the `FileStream` handle was opened asynchronously, enabling your code to use the <xref:System.IO.FileStream.Handle%2A> property correctly. In Win32, `IsAsync` being true means the handle was opened for overlapped I/O, and thus requires different parameters to `ReadFile` and `WriteFile`.  \\n  \\n You specify this value when you create an instance of the <xref:System.IO.FileStream> class using a constructor that has an `isAsync`, `useAsync`, or `options` parameter. When the property is `true`, the stream utilizes overlapped I/O to perform file operations asynchronously. However, the <xref:System.IO.FileStream.IsAsync%2A> property does not have to be `true` to call the <xref:System.IO.FileStream.ReadAsync%2A>, <xref:System.IO.FileStream.WriteAsync%2A>, or <xref:System.IO.Stream.CopyToAsync%2A> method. When the <xref:System.IO.FileStream.IsAsync%2A> property is `false` and you call the asynchronous read and write operations, the UI thread is still not blocked, but the actual I/O operation is performed synchronously.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \\n  \\n [!code-cpp[System.IO.FileStream2#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#2)]\\n [!code-csharp[System.IO.FileStream2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#2)]\\n [!code-vb[System.IO.FileStream2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#2)]\"\n  syntax:\n    content: public virtual bool IsAsync { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the `FileStream` was opened asynchronously; otherwise, `false`.'\n  overload: System.IO.FileStream.IsAsync*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Length\n  commentId: P:System.IO.FileStream.Length\n  id: Length\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Length\n  nameWithType: FileStream.Length\n  fullName: FileStream.Length\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets the length in bytes of the stream.\n  remarks: For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\n  example:\n  - \"The following example uses the `Length` and `Position` properties to check for an end-of-file condition.  \\n  \\n [!code-cpp[Classic FileStream.Length Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FileStream.Length Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CS/source.cs#1)]\\n [!code-vb[Classic FileStream.Length Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.Length Example/VB/source.vb#1)]\"\n  syntax:\n    content: public override long Length { get; }\n    return:\n      type: System.Int64\n      description: A long value representing the length of the stream in bytes.\n  overload: System.IO.FileStream.Length*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <xref href=\"System.IO.FileStream.CanSeek\"></xref> for this stream is `false`.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error, such as the file being closed, occurred.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Lock(System.Int64,System.Int64)\n  commentId: M:System.IO.FileStream.Lock(System.Int64,System.Int64)\n  id: Lock(System.Int64,System.Int64)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Lock(Int64, Int64)\n  nameWithType: FileStream.Lock(Int64, Int64)\n  fullName: FileStream.Lock(Int64, Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Prevents other processes from reading from or writing to the <xref href=\"System.IO.FileStream\"></xref>.\n  remarks: \"Locking a range of a file stream gives the threads of the locking process exclusive access to that range of the file stream.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following code example demonstrates how to lock part of a file so another process cannot access that part of the file even though it has read/write access to the file. Run the program simultaneously in different command windows and investigate using the different console input options.  \\n  \\n [!code-cpp[System.IO.FileStream3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#1)]\\n [!code-csharp[System.IO.FileStream3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#1)]\\n [!code-vb[System.IO.FileStream3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#1)]\"\n  syntax:\n    content: public virtual void Lock (long position, long length);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).\n    - id: length\n      type: System.Int64\n      description: The range to be locked.\n  overload: System.IO.FileStream.Lock*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> or <code>length</code> is negative.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The file is closed.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The process cannot access the file because another process has locked a portion of the file.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Name\n  commentId: P:System.IO.FileStream.Name\n  id: Name\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Name\n  nameWithType: FileStream.Name\n  fullName: FileStream.Name\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets the name of the `FileStream` that was passed to the constructor.\n  remarks: For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.FileStream.%23ctor%28System.String%2CSystem.IO.FileMode%2CSystem.IO.FileAccess%2CSystem.IO.FileShare%2CSystem.Int32%2CSystem.Boolean%29> constructor.  \\n  \\n [!code-cpp[System.IO.FileStream2#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream2/CPP/source.cpp#4)]\\n [!code-csharp[System.IO.FileStream2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream2/CS/source.cs#4)]\\n [!code-vb[System.IO.FileStream2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream2/VB/source.vb#4)]\"\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: A string that is the name of the `FileStream`.\n  overload: System.IO.FileStream.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Position\n  commentId: P:System.IO.FileStream.Position\n  id: Position\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Position\n  nameWithType: FileStream.Position\n  fullName: FileStream.Position\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets or sets the current position of this stream.\n  remarks: \"Seeking to any location beyond the length of the stream is supported.  When you seek beyond the length of the file, the file size grows.  In Microsoft Windows NT and newer, any data added to the end of the file is set to zero.  In Microsoft Windows 98 or earlier, any data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream. Setting the position of the stream to a large value beyond the end of the stream in Windows 98 or earlier may result in an exception being raised.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example uses the `Length` and `Position` properties to check for an end-of-file condition.  \\n  \\n [!code-cpp[Classic FileStream.Length Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FileStream.Length Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.Length Example/CS/source.cs#1)]\\n [!code-vb[Classic FileStream.Length Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.Length Example/VB/source.vb#1)]\"\n  syntax:\n    content: public override long Position { get; set; }\n    return:\n      type: System.Int64\n      description: The current position of this stream.\n  overload: System.IO.FileStream.Position*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support seeking.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error occurred.  \\n  \\n \\\\- or -  \\n  \\n The position was set to a very large value beyond the end of the stream in Windows 98 or earlier.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Attempted to set the position to a negative value.\n  - type: System.IO.EndOfStreamException\n    commentId: T:System.IO.EndOfStreamException\n    description: Attempted seeking past the end of a stream that does not support this.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: FileStream.Read(Byte[], Int32, Int32)\n  fullName: FileStream.Read(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Reads a block of bytes from the stream and writes the data in a given buffer.\n  remarks: \"This method overrides <xref:System.IO.Stream.Read%2A>.  \\n  \\n The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin reading, and the `count` parameter gives the maximum number of bytes to be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.  \\n  \\n The <xref:System.IO.FileStream.Read%2A> method returns zero only after reaching the end of the stream. Otherwise, <xref:System.IO.FileStream.Read%2A> always reads at least one byte from the stream before returning. If no data is available from the stream upon a call to <xref:System.IO.FileStream.Read%2A>, the method will block until at least one byte of data can be returned. An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.  \\n  \\n Use <xref:System.IO.BinaryReader> for reading primitive data types.  \\n  \\n Do not interrupt a thread that is performing a read operation. Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example reads the contents from a <xref:System.IO.FileStream> and writes it into another <xref:System.IO.FileStream>.  \\n  \\n [!code-csharp[FSRead#1](~/samples/snippets/csharp/VS_Snippets_CLR/FSRead/CS/fsread.cs#1)]\\n [!code-vb[FSRead#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FSRead/VB/fsread.vb#1)]\"\n  syntax:\n    content: public override int Read (byte[] array, int offset, int count);\n    parameters:\n    - id: array\n      type: System.Byte[]\n      description: When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1<code>)</code> replaced by the bytes read from the current source.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>array</code> at which the read bytes will be placed.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    return:\n      type: System.Int32\n      description: The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.\n  overload: System.IO.FileStream.Read*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support reading.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>offset</code> and <code>count</code> describe an invalid range in <code>array</code>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: FileStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: FileStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.\n  remarks: \"The <xref:System.IO.FileStream.ReadAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \\n  \\n Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading.  \\n  \\n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.\"\n  example:\n  - \"The following example shows how to read from a file asynchronously.  \\n  \\n [!code-csharp[Asynchronous_File_IO_async#4](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example4.cs#4)]\\n [!code-vb[Asynchronous_File_IO_async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example4.vb#4)]\"\n  syntax:\n    content: public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write the data into.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>buffer</code> at which to begin writing data from the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.\n  overload: System.IO.FileStream.ReadAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The stream is currently in use by a previous read operation.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.ReadByte\n  commentId: M:System.IO.FileStream.ReadByte\n  id: ReadByte\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: ReadByte()\n  nameWithType: FileStream.ReadByte()\n  fullName: FileStream.ReadByte()\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Reads a byte from the file and advances the read position one byte.\n  remarks: \"This method overrides <xref:System.IO.Stream.ReadByte%2A>.  \\n  \\n> [!NOTE]\\n>  Use the <xref:System.IO.FileStream.CanRead%2A> property to determine whether the current instance supports reading. For additional information, see <xref:System.IO.Stream.CanRead%2A>.\"\n  example:\n  - \"The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.  \\n  \\n [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]\\n [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]\\n [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]\"\n  syntax:\n    content: public override int ReadByte ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The byte, cast to an <xref href=\"System.Int32\"></xref>, or -1 if the end of the stream has been reached.\n  overload: System.IO.FileStream.ReadByte*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current stream does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current stream is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.SafeFileHandle\n  commentId: P:System.IO.FileStream.SafeFileHandle\n  id: SafeFileHandle\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: SafeFileHandle\n  nameWithType: FileStream.SafeFileHandle\n  fullName: FileStream.SafeFileHandle\n  type: Property\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Gets a <xref href=\"Microsoft.Win32.SafeHandles.SafeFileHandle\"></xref> object that represents the operating system file handle for the file that the current <xref href=\"System.IO.FileStream\"></xref> object encapsulates.\n  remarks: The <xref:System.IO.FileStream.SafeFileHandle%2A> property automatically flushes the stream and sets the current stream position to 0.  This allows the file to be moved or the stream position to be reset by another stream using the <xref:System.IO.FileStream.SafeFileHandle%2A> returned by this property.\n  syntax:\n    content: public virtual Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle { get; }\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeFileHandle\n      description: An object that represents the operating system file handle for the file that the current <xref href=\"System.IO.FileStream\"></xref> object encapsulates.\n  overload: System.IO.FileStream.SafeFileHandle*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)\n  commentId: M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: FileStream.Seek(Int64, SeekOrigin)\n  fullName: FileStream.Seek(Int64, SeekOrigin)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Sets the current position of this stream to the given value.\n  remarks: \"This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  Use the <xref:System.IO.FileStream.CanSeek%2A?displayProperty=fullName> property to determine whether the current instance supports seeking. For additional information, see <xref:System.IO.Stream.CanSeek%2A?displayProperty=fullName>.  \\n  \\n You can seek to any location beyond the length of the stream. When you seek beyond the length of the file, the file size grows. In Windows NT and later versions, data added to the end of the file is set to zero. In Windows 98 or earlier versions, data added to the end of the file is not set to zero, which means that previously deleted data is visible to the stream.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"The following example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.  \\n  \\n [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]\\n [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]\\n [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]  \\n  \\n The following example reads text in the reverse direction, from the end of file to the beginning of the file, by using the various <xref:System.IO.SeekOrigin> values with the <xref:System.IO.FileStream.Seek%2A> method.  \\n  \\n [!code-csharp[System.IO.FileStream.Seek#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.filestream.seek/cs/source.cs#1)]\\n [!code-vb[System.IO.FileStream.Seek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.filestream.seek/vb/source.vb#1)]\"\n  syntax:\n    content: public override long Seek (long offset, System.IO.SeekOrigin origin);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: The point relative to <code>origin</code> from which to begin seeking.\n    - id: origin\n      type: System.IO.SeekOrigin\n      description: Specifies the beginning, the end, or the current position as a reference point for <code>offset</code>, using a value of type <xref href=\"System.IO.SeekOrigin\"></xref>.\n    return:\n      type: System.Int64\n      description: The new position in the stream.\n  overload: System.IO.FileStream.Seek*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support seeking, such as if the `FileStream` is constructed from a pipe or console output.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Seeking is attempted before the beginning of the stream.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Methods were called after the stream was closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)\n  commentId: M:System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)\n  id: SetAccessControl(System.Security.AccessControl.FileSecurity)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: SetAccessControl(FileSecurity)\n  nameWithType: FileStream.SetAccessControl(FileSecurity)\n  fullName: FileStream.SetAccessControl(FileSecurity)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.IO\n  summary: Applies access control list (ACL) entries described by a <xref href=\"System.Security.AccessControl.FileSecurity\"></xref> object to the file described by the current <xref href=\"System.IO.FileStream\"></xref> object.\n  remarks: \"While the <xref:System.IO.FileStream> class and <xref:System.IO.FileStream.SetAccessControl%2A> can be used on an existing file, consider using the <xref:System.IO.File.SetAccessControl%2A?displayProperty=fullName> method as it is easier to use.  \\n  \\n The <xref:System.IO.FileStream.SetAccessControl%2A> method applies access control list (ACL) entries to a file that represents the noninherited ACL list.  \\n  \\n> [!CAUTION]\\n>  The ACL specified for the `fileSecurity` parameter replaces the existing ACL for the file. To add permissions for a new user, use the <xref:System.IO.FileStream.GetAccessControl%2A> method to obtain the existing ACL, modify it, and then use <xref:System.IO.FileStream.SetAccessControl%2A> to apply it back to the file.  \\n  \\n An ACL describes individuals and/or groups who have, or do not have, rights to specific actions on the given file. For more information, see [How to: Add or Remove Access Control List Entries](~/docs/standard/io/how-to-add-or-remove-access-control-list-entries.md).\"\n  syntax:\n    content: public void SetAccessControl (System.Security.AccessControl.FileSecurity fileSecurity);\n    parameters:\n    - id: fileSecurity\n      type: System.Security.AccessControl.FileSecurity\n      description: An object that describes an ACL entry to apply to the current file.\n  overload: System.IO.FileStream.SetAccessControl*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The file is closed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>fileSecurity</code> parameter is `null`.\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The file could not be found or modified.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The current process does not have access to open the file.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.SetLength(System.Int64)\n  commentId: M:System.IO.FileStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: FileStream.SetLength(Int64)\n  fullName: FileStream.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Sets the length of this stream to the given value.\n  remarks: \"This method overrides <xref:System.IO.Stream.SetLength%2A>.  \\n  \\n If the given value is less than the current length of the stream, the stream is truncated. In this scenario, if the current position is greater than the new length, the current position is moved to the last byte of the stream. If the given value is larger than the current length of the stream, the stream is expanded, and the current position remains the same. If the stream is expanded, the contents of the stream between the old and the new length are undefined.  \\n  \\n A stream must support both writing and seeking for `SetLength` to work.  \\n  \\n> [!NOTE]\\n>  Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.FileStream.CanSeek%2A> property to determine whether seeking is supported. For additional information, see <xref:System.IO.Stream.CanWrite%2A> and <xref:System.IO.Stream.CanSeek%2A>.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  syntax:\n    content: public override void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The new length of the stream.\n  overload: System.IO.FileStream.SetLength*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error has occurred.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support both writing and seeking.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Attempted to set the <code>value</code> parameter to less than 0.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Unlock(System.Int64,System.Int64)\n  commentId: M:System.IO.FileStream.Unlock(System.Int64,System.Int64)\n  id: Unlock(System.Int64,System.Int64)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Unlock(Int64, Int64)\n  nameWithType: FileStream.Unlock(Int64, Int64)\n  fullName: FileStream.Unlock(Int64, Int64)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Allows access by other processes to all or part of a file that was previously locked.\n  remarks: For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\n  example:\n  - \"The following code example demonstrates how to lock part of a file so another process cannot access that part of the file even though it has read/write access to the file, and then unlock the specified part of the file . Run the program simultaneously in different command windows and investigate using the different console input options.  \\n  \\n [!code-cpp[System.IO.FileStream3#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#1)]\\n [!code-csharp[System.IO.FileStream3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#1)]\\n [!code-vb[System.IO.FileStream3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#1)]\"\n  syntax:\n    content: public virtual void Unlock (long position, long length);\n    parameters:\n    - id: position\n      type: System.Int64\n      description: The beginning of the range to unlock.\n    - id: length\n      type: System.Int64\n      description: The range to be unlocked.\n  overload: System.IO.FileStream.Unlock*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>position</code> or <code>length</code> is negative.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: FileStream.Write(Byte[], Int32, Int32)\n  fullName: FileStream.Write(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Writes a block of bytes to the file stream.\n  remarks: \"This method overrides <xref:System.IO.Stream.Write%2A>.  \\n  \\n The `offset` parameter gives the offset of the byte in `array` (the buffer index) at which to begin copying, and the `count` parameter gives the number of bytes that will be written to the stream. If the write operation is successful, the current position of the stream is advanced by the number of bytes written. If an exception occurs, the current position of the stream is unchanged.  \\n  \\n> [!NOTE]\\n>  Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.  \\n  \\n Do not interrupt a thread that is performing a write operation. Although the application may appear to run successfully after the thread is unblocked, the interruption can decrease your application's performance and reliability.  \\n  \\n For a list of common file and directory operations, see [Common I/O Tasks](~/docs/standard/io/common-i-o-tasks.md).\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.FileStream.Lock%2A> method.  \\n  \\n [!code-cpp[System.IO.FileStream3#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream3/CPP/fstreamlock.cpp#3)]\\n [!code-csharp[System.IO.FileStream3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream3/CS/fstreamlock.cs#3)]\\n [!code-vb[System.IO.FileStream3#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream3/VB/fstreamlock.vb#3)]\"\n  syntax:\n    content: public override void Write (byte[] array, int offset, int count);\n    parameters:\n    - id: array\n      type: System.Byte[]\n      description: The buffer containing data to write to the stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>array</code> from which to begin copying bytes to the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to write.\n  overload: System.IO.FileStream.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>array</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>offset</code> and <code>count</code> describe an invalid range in <code>array</code>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"An I/O error occurred.  \\n  \\n \\\\- or -  \\n  \\n Another thread may have caused an unexpected change in the position of the operating system's file handle.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current stream instance does not support writing.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: FileStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: FileStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.\n  remarks: \"The <xref:System.IO.FileStream.WriteAsync%2A> method enables you to perform resource-intensive file operations without blocking the main thread. This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working. The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.  \\n  \\n Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports reading.  \\n  \\n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property. If the handle to the file is disposed, the returned task contains the <xref:System.ObjectDisposedException> exception in the <xref:System.Threading.Tasks.Task.Exception%2A> property.\"\n  example:\n  - \"The following example shows how to write asynchronously to a file.  \\n  \\n [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]\\n [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]\"\n  syntax:\n    content: public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write data from.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.FileStream.WriteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The stream is currently in use by a previous write operation.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.FileStream.WriteByte(System.Byte)\n  commentId: M:System.IO.FileStream.WriteByte(System.Byte)\n  id: WriteByte(System.Byte)\n  parent: System.IO.FileStream\n  langs:\n  - csharp\n  name: WriteByte(Byte)\n  nameWithType: FileStream.WriteByte(Byte)\n  fullName: FileStream.WriteByte(Byte)\n  type: Method\n  assemblies:\n  - System.IO.FileSystem\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.IO\n  summary: Writes a byte to the current position in the file stream.\n  remarks: \"This method overrides <xref:System.IO.Stream.WriteByte%2A>.  \\n  \\n Use `WriteByte` to write a byte to a `FileStream` efficiently. If the stream is closed or not writable, an exception will be thrown.  \\n  \\n> [!NOTE]\\n>  Use the <xref:System.IO.FileStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.\"\n  example:\n  - \"The following code example shows how to write data to a file, byte by byte, and then verify that the data was written correctly.  \\n  \\n [!code-cpp[System.IO.FileStream1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.FileStream1/CPP/source.cpp#1)]\\n [!code-csharp[System.IO.FileStream1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.FileStream1/CS/source.cs#1)]\\n [!code-vb[System.IO.FileStream1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.FileStream1/VB/source.vb#1)]\"\n  syntax:\n    content: public override void WriteByte (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: A byte to write to the stream.\n  overload: System.IO.FileStream.WriteByte*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support writing.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.IO.FileNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: FileNotFoundException\n  nameWithType: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n- uid: System.IO.DirectoryNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: DirectoryNotFoundException\n  nameWithType: DirectoryNotFoundException\n  fullName: System.IO.DirectoryNotFoundException\n- uid: System.IO.PathTooLongException\n  parent: System.IO\n  isExternal: false\n  name: PathTooLongException\n  nameWithType: PathTooLongException\n  fullName: System.IO.PathTooLongException\n- uid: System.PlatformNotSupportedException\n  parent: System\n  isExternal: false\n  name: PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.IO.EndOfStreamException\n  parent: System.IO\n  isExternal: false\n  name: EndOfStreamException\n  nameWithType: EndOfStreamException\n  fullName: System.IO.EndOfStreamException\n- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(SafeFileHandle, FileAccess)\n  nameWithType: FileStream.FileStream(SafeFileHandle, FileAccess)\n  fullName: FileStream.FileStream(SafeFileHandle, FileAccess)\n- uid: Microsoft.Win32.SafeHandles.SafeFileHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeFileHandle\n  nameWithType: SafeFileHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle\n- uid: System.IO.FileAccess\n  parent: System.IO\n  isExternal: false\n  name: FileAccess\n  nameWithType: FileAccess\n  fullName: System.IO.FileAccess\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, FileSecurity)\n  nameWithType: FileStream.FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, FileSecurity)\n  fullName: FileStream.FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, FileSecurity)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.FileMode\n  parent: System.IO\n  isExternal: false\n  name: FileMode\n  nameWithType: FileMode\n  fullName: System.IO.FileMode\n- uid: System.Security.AccessControl.FileSystemRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: FileSystemRights\n  nameWithType: FileSystemRights\n  fullName: System.Security.AccessControl.FileSystemRights\n- uid: System.IO.FileShare\n  parent: System.IO\n  isExternal: false\n  name: FileShare\n  nameWithType: FileShare\n  fullName: System.IO.FileShare\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.FileOptions\n  parent: System.IO\n  isExternal: false\n  name: FileOptions\n  nameWithType: FileOptions\n  fullName: System.IO.FileOptions\n- uid: System.Security.AccessControl.FileSecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: FileSecurity\n  nameWithType: FileSecurity\n  fullName: System.Security.AccessControl.FileSecurity\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions)\n  nameWithType: FileStream.FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions)\n  fullName: FileStream.FileStream(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions)\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(String, FileMode, FileAccess, FileShare, Int32, FileOptions)\n  nameWithType: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32, FileOptions)\n  fullName: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32, FileOptions)\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(String, FileMode, FileAccess, FileShare, Int32, Boolean)\n  nameWithType: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32, Boolean)\n  fullName: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(IntPtr, FileAccess, Boolean, Int32, Boolean)\n  nameWithType: FileStream.FileStream(IntPtr, FileAccess, Boolean, Int32, Boolean)\n  fullName: FileStream.FileStream(IntPtr, FileAccess, Boolean, Int32, Boolean)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(String, FileMode, FileAccess, FileShare)\n  nameWithType: FileStream.FileStream(String, FileMode, FileAccess, FileShare)\n  fullName: FileStream.FileStream(String, FileMode, FileAccess, FileShare)\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(String, FileMode, FileAccess, FileShare, Int32)\n  nameWithType: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32)\n  fullName: FileStream.FileStream(String, FileMode, FileAccess, FileShare, Int32)\n- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(SafeFileHandle, FileAccess, Int32, Boolean)\n  nameWithType: FileStream.FileStream(SafeFileHandle, FileAccess, Int32, Boolean)\n  fullName: FileStream.FileStream(SafeFileHandle, FileAccess, Int32, Boolean)\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(String, FileMode, FileAccess)\n  nameWithType: FileStream.FileStream(String, FileMode, FileAccess)\n  fullName: FileStream.FileStream(String, FileMode, FileAccess)\n- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(IntPtr, FileAccess, Boolean)\n  nameWithType: FileStream.FileStream(IntPtr, FileAccess, Boolean)\n  fullName: FileStream.FileStream(IntPtr, FileAccess, Boolean)\n- uid: System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(SafeFileHandle, FileAccess, Int32)\n  nameWithType: FileStream.FileStream(SafeFileHandle, FileAccess, Int32)\n  fullName: FileStream.FileStream(SafeFileHandle, FileAccess, Int32)\n- uid: System.IO.FileStream.#ctor(System.String,System.IO.FileMode)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(String, FileMode)\n  nameWithType: FileStream.FileStream(String, FileMode)\n  fullName: FileStream.FileStream(String, FileMode)\n- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(IntPtr, FileAccess)\n  nameWithType: FileStream.FileStream(IntPtr, FileAccess)\n  fullName: FileStream.FileStream(IntPtr, FileAccess)\n- uid: System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream(IntPtr, FileAccess, Boolean, Int32)\n  nameWithType: FileStream.FileStream(IntPtr, FileAccess, Boolean, Int32)\n  fullName: FileStream.FileStream(IntPtr, FileAccess, Boolean, Int32)\n- uid: System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: FileStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: FileStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: FileStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: FileStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.FileStream.CanRead\n  parent: System.IO.FileStream\n  isExternal: false\n  name: CanRead\n  nameWithType: FileStream.CanRead\n  fullName: FileStream.CanRead\n- uid: System.IO.FileStream.CanSeek\n  parent: System.IO.FileStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: FileStream.CanSeek\n  fullName: FileStream.CanSeek\n- uid: System.IO.FileStream.CanWrite\n  parent: System.IO.FileStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: FileStream.CanWrite\n  fullName: FileStream.CanWrite\n- uid: System.IO.FileStream.Dispose(System.Boolean)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: FileStream.Dispose(Boolean)\n  fullName: FileStream.Dispose(Boolean)\n- uid: System.IO.FileStream.EndRead(System.IAsyncResult)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: FileStream.EndRead(IAsyncResult)\n  fullName: FileStream.EndRead(IAsyncResult)\n- uid: System.IO.FileStream.EndWrite(System.IAsyncResult)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: FileStream.EndWrite(IAsyncResult)\n  fullName: FileStream.EndWrite(IAsyncResult)\n- uid: System.IO.FileStream.Finalize\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Finalize()\n  nameWithType: FileStream.Finalize()\n  fullName: FileStream.Finalize()\n- uid: System.IO.FileStream.Flush\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Flush()\n  nameWithType: FileStream.Flush()\n  fullName: FileStream.Flush()\n- uid: System.IO.FileStream.Flush(System.Boolean)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Flush(Boolean)\n  nameWithType: FileStream.Flush(Boolean)\n  fullName: FileStream.Flush(Boolean)\n- uid: System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FlushAsync(CancellationToken)\n  nameWithType: FileStream.FlushAsync(CancellationToken)\n  fullName: FileStream.FlushAsync(CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.IO.FileStream.GetAccessControl\n  parent: System.IO.FileStream\n  isExternal: false\n  name: GetAccessControl()\n  nameWithType: FileStream.GetAccessControl()\n  fullName: FileStream.GetAccessControl()\n- uid: System.IO.FileStream.Handle\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Handle\n  nameWithType: FileStream.Handle\n  fullName: FileStream.Handle\n- uid: System.IO.FileStream.IsAsync\n  parent: System.IO.FileStream\n  isExternal: false\n  name: IsAsync\n  nameWithType: FileStream.IsAsync\n  fullName: FileStream.IsAsync\n- uid: System.IO.FileStream.Length\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Length\n  nameWithType: FileStream.Length\n  fullName: FileStream.Length\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.IO.FileStream.Lock(System.Int64,System.Int64)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Lock(Int64, Int64)\n  nameWithType: FileStream.Lock(Int64, Int64)\n  fullName: FileStream.Lock(Int64, Int64)\n- uid: System.IO.FileStream.Name\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Name\n  nameWithType: FileStream.Name\n  fullName: FileStream.Name\n- uid: System.IO.FileStream.Position\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Position\n  nameWithType: FileStream.Position\n  fullName: FileStream.Position\n- uid: System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: FileStream.Read(Byte[], Int32, Int32)\n  fullName: FileStream.Read(Byte[], Int32, Int32)\n- uid: System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: FileStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: FileStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Int32>\n  nameWithType: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.FileStream.ReadByte\n  parent: System.IO.FileStream\n  isExternal: false\n  name: ReadByte()\n  nameWithType: FileStream.ReadByte()\n  fullName: FileStream.ReadByte()\n- uid: System.IO.FileStream.SafeFileHandle\n  parent: System.IO.FileStream\n  isExternal: false\n  name: SafeFileHandle\n  nameWithType: FileStream.SafeFileHandle\n  fullName: FileStream.SafeFileHandle\n- uid: System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: FileStream.Seek(Int64, SeekOrigin)\n  fullName: FileStream.Seek(Int64, SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: false\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: SetAccessControl(FileSecurity)\n  nameWithType: FileStream.SetAccessControl(FileSecurity)\n  fullName: FileStream.SetAccessControl(FileSecurity)\n- uid: System.IO.FileStream.SetLength(System.Int64)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: FileStream.SetLength(Int64)\n  fullName: FileStream.SetLength(Int64)\n- uid: System.IO.FileStream.Unlock(System.Int64,System.Int64)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Unlock(Int64, Int64)\n  nameWithType: FileStream.Unlock(Int64, Int64)\n  fullName: FileStream.Unlock(Int64, Int64)\n- uid: System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: FileStream.Write(Byte[], Int32, Int32)\n  fullName: FileStream.Write(Byte[], Int32, Int32)\n- uid: System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: FileStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: FileStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.FileStream.WriteByte(System.Byte)\n  parent: System.IO.FileStream\n  isExternal: false\n  name: WriteByte(Byte)\n  nameWithType: FileStream.WriteByte(Byte)\n  fullName: FileStream.WriteByte(Byte)\n- uid: System.IO.FileStream.#ctor*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FileStream\n  nameWithType: FileStream.FileStream\n  fullName: FileStream.FileStream\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.BeginRead*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: BeginRead\n  nameWithType: FileStream.BeginRead\n  fullName: FileStream.BeginRead\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.BeginWrite*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: BeginWrite\n  nameWithType: FileStream.BeginWrite\n  fullName: FileStream.BeginWrite\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.CanRead*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: CanRead\n  nameWithType: FileStream.CanRead\n  fullName: FileStream.CanRead\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.CanSeek*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: FileStream.CanSeek\n  fullName: FileStream.CanSeek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.CanWrite*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: FileStream.CanWrite\n  fullName: FileStream.CanWrite\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Dispose*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Dispose\n  nameWithType: FileStream.Dispose\n  fullName: FileStream.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.EndRead*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: EndRead\n  nameWithType: FileStream.EndRead\n  fullName: FileStream.EndRead\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.EndWrite*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: EndWrite\n  nameWithType: FileStream.EndWrite\n  fullName: FileStream.EndWrite\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Finalize*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Finalize\n  nameWithType: FileStream.Finalize\n  fullName: FileStream.Finalize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Flush*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Flush\n  nameWithType: FileStream.Flush\n  fullName: FileStream.Flush\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.FlushAsync*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: FlushAsync\n  nameWithType: FileStream.FlushAsync\n  fullName: FileStream.FlushAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.GetAccessControl*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: GetAccessControl\n  nameWithType: FileStream.GetAccessControl\n  fullName: FileStream.GetAccessControl\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Handle*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Handle\n  nameWithType: FileStream.Handle\n  fullName: FileStream.Handle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.IsAsync*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: IsAsync\n  nameWithType: FileStream.IsAsync\n  fullName: FileStream.IsAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Length*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Length\n  nameWithType: FileStream.Length\n  fullName: FileStream.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Lock*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Lock\n  nameWithType: FileStream.Lock\n  fullName: FileStream.Lock\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Name*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Name\n  nameWithType: FileStream.Name\n  fullName: FileStream.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Position*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Position\n  nameWithType: FileStream.Position\n  fullName: FileStream.Position\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Read*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Read\n  nameWithType: FileStream.Read\n  fullName: FileStream.Read\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.ReadAsync*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: ReadAsync\n  nameWithType: FileStream.ReadAsync\n  fullName: FileStream.ReadAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.ReadByte*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: ReadByte\n  nameWithType: FileStream.ReadByte\n  fullName: FileStream.ReadByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.SafeFileHandle*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: SafeFileHandle\n  nameWithType: FileStream.SafeFileHandle\n  fullName: FileStream.SafeFileHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Seek*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Seek\n  nameWithType: FileStream.Seek\n  fullName: FileStream.Seek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.SetAccessControl*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: SetAccessControl\n  nameWithType: FileStream.SetAccessControl\n  fullName: FileStream.SetAccessControl\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.SetLength*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: SetLength\n  nameWithType: FileStream.SetLength\n  fullName: FileStream.SetLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Unlock*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Unlock\n  nameWithType: FileStream.Unlock\n  fullName: FileStream.Unlock\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.Write*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: Write\n  nameWithType: FileStream.Write\n  fullName: FileStream.Write\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.WriteAsync*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: WriteAsync\n  nameWithType: FileStream.WriteAsync\n  fullName: FileStream.WriteAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.IO.FileStream.WriteByte*\n  parent: System.IO.FileStream\n  isExternal: false\n  name: WriteByte\n  nameWithType: FileStream.WriteByte\n  fullName: FileStream.WriteByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/FileStream.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IO.Stream.CanTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: Stream.CanTimeout\n  fullName: Stream.CanTimeout\n- uid: System.IO.Stream.Close\n  parent: System.IO.Stream\n  isExternal: false\n  name: Close()\n  nameWithType: Stream.Close()\n  fullName: Stream.Close()\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream, Int32)\n  nameWithType: Stream.CopyTo(Stream, Int32)\n  fullName: Stream.CopyTo(Stream, Int32)\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream)\n  nameWithType: Stream.CopyTo(Stream)\n  fullName: Stream.CopyTo(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream)\n  nameWithType: Stream.CopyToAsync(Stream)\n  fullName: Stream.CopyToAsync(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32)\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n  fullName: Stream.CopyToAsync(Stream, Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.IO.Stream.CreateWaitHandle\n  parent: System.IO.Stream\n  isExternal: false\n  name: CreateWaitHandle()\n  nameWithType: Stream.CreateWaitHandle()\n  fullName: Stream.CreateWaitHandle()\n- uid: System.IO.Stream.Dispose\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose()\n  nameWithType: Stream.Dispose()\n  fullName: Stream.Dispose()\n- uid: System.IO.Stream.FlushAsync\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync()\n  nameWithType: Stream.FlushAsync()\n  fullName: Stream.FlushAsync()\n- uid: System.IO.Stream.Null\n  parent: System.IO.Stream\n  isExternal: false\n  name: \"Null\"\n  nameWithType: Stream.Null\n  fullName: Stream.Null\n- uid: System.IO.Stream.ObjectInvariant\n  parent: System.IO.Stream\n  isExternal: false\n  name: ObjectInvariant()\n  nameWithType: Stream.ObjectInvariant()\n  fullName: Stream.ObjectInvariant()\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.ReadTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: Stream.ReadTimeout\n  fullName: Stream.ReadTimeout\n- uid: System.IO.Stream.Synchronized(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Synchronized(Stream)\n  nameWithType: Stream.Synchronized(Stream)\n  fullName: Stream.Synchronized(Stream)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.WriteTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: Stream.WriteTimeout\n  fullName: Stream.WriteTimeout\n- uid: System.IO.FileSystemAclExtensions.GetAccessControl(System.IO.FileStream)\n  parent: System.IO.FileSystemAclExtensions\n  isExternal: false\n  name: GetAccessControl(FileStream)\n  nameWithType: FileSystemAclExtensions.GetAccessControl(FileStream)\n  fullName: FileSystemAclExtensions.GetAccessControl(FileStream)\n- uid: System.IO.FileSystemAclExtensions.SetAccessControl(System.IO.FileStream,System.Security.AccessControl.FileSecurity)\n  parent: System.IO.FileSystemAclExtensions\n  isExternal: false\n  name: SetAccessControl(FileStream, FileSecurity)\n  nameWithType: FileSystemAclExtensions.SetAccessControl(FileStream, FileSecurity)\n  fullName: FileSystemAclExtensions.SetAccessControl(FileStream, FileSecurity)\n"}