{"nodes":[{"content":"Represents the method that handles exceptions that are thrown during the update of the binding source value. This must be used with the <xref href=\"System.Windows.Controls.ExceptionValidationRule\"></xref>.","nodes":[{"pos":[0,205],"content":"Represents the method that handles exceptions that are thrown during the update of the binding source value. This must be used with the <xref href=\"System.Windows.Controls.ExceptionValidationRule\"></xref>.","nodes":[{"content":"Represents the method that handles exceptions that are thrown during the update of the binding source value.","pos":[0,108]},{"content":"This must be used with the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.ExceptionValidationRule\"&gt;&lt;/xref&gt;</ph>.","pos":[109,205],"source":" This must be used with the <xref href=\"System.Windows.Controls.ExceptionValidationRule\"></xref>."}]}],"pos":[497,703],"yaml":true},{"content":"If you have associated the <xref:System.Windows.Controls.ExceptionValidationRule> with your <xref:System.Windows.Data.Binding> object you have the option to use the <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> property to set this callback to provide custom logic for handling the exceptions. This callback is invoked whenever any exception is encountered when the binding engine updates the binding source value.  \n  \n If an <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> is not specified on the <xref:System.Windows.Data.Binding>, the binding engine creates a <xref:System.Windows.Controls.ValidationError> with the exception and adds it to the <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> collection of the bound element.","nodes":[{"pos":[0,434],"content":"If you have associated the <xref:System.Windows.Controls.ExceptionValidationRule> with your <xref:System.Windows.Data.Binding> object you have the option to use the <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> property to set this callback to provide custom logic for handling the exceptions. This callback is invoked whenever any exception is encountered when the binding engine updates the binding source value.","nodes":[{"content":"If you have associated the <xref:System.Windows.Controls.ExceptionValidationRule> with your <xref:System.Windows.Data.Binding> object you have the option to use the <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> property to set this callback to provide custom logic for handling the exceptions. This callback is invoked whenever any exception is encountered when the binding engine updates the binding source value.","pos":[0,434],"nodes":[{"content":"If you have associated the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ExceptionValidationRule&gt;</ph> with your <ph id=\"ph2\">&lt;xref:System.Windows.Data.Binding&gt;</ph> object you have the option to use the <ph id=\"ph3\">&lt;xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A&gt;</ph> property to set this callback to provide custom logic for handling the exceptions.","pos":[0,313],"source":"If you have associated the <xref:System.Windows.Controls.ExceptionValidationRule> with your <xref:System.Windows.Data.Binding> object you have the option to use the <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> property to set this callback to provide custom logic for handling the exceptions."},{"content":"This callback is invoked whenever any exception is encountered when the binding engine updates the binding source value.","pos":[314,434]}]}]},{"pos":[441,796],"content":"If an <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> is not specified on the <xref:System.Windows.Data.Binding>, the binding engine creates a <xref:System.Windows.Controls.ValidationError> with the exception and adds it to the <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> collection of the bound element.","nodes":[{"content":"If an <ph id=\"ph1\">&lt;xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A&gt;</ph> is not specified on the <ph id=\"ph2\">&lt;xref:System.Windows.Data.Binding&gt;</ph>, the binding engine creates a <ph id=\"ph3\">&lt;xref:System.Windows.Controls.ValidationError&gt;</ph> with the exception and adds it to the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName&gt;</ph> collection of the bound element.","pos":[0,355],"source":"If an <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> is not specified on the <xref:System.Windows.Data.Binding>, the binding engine creates a <xref:System.Windows.Controls.ValidationError> with the exception and adds it to the <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> collection of the bound element."}]}],"pos":[714,1515],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Data.UpdateSourceExceptionFilterCallback\n  commentId: T:System.Windows.Data.UpdateSourceExceptionFilterCallback\n  id: UpdateSourceExceptionFilterCallback\n  langs:\n  - csharp\n  name: UpdateSourceExceptionFilterCallback\n  nameWithType: UpdateSourceExceptionFilterCallback\n  fullName: System.Windows.Data.UpdateSourceExceptionFilterCallback\n  type: Delegate\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Data\n  summary: Represents the method that handles exceptions that are thrown during the update of the binding source value. This must be used with the <xref href=\"System.Windows.Controls.ExceptionValidationRule\"></xref>.\n  remarks: \"If you have associated the <xref:System.Windows.Controls.ExceptionValidationRule> with your <xref:System.Windows.Data.Binding> object you have the option to use the <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> property to set this callback to provide custom logic for handling the exceptions. This callback is invoked whenever any exception is encountered when the binding engine updates the binding source value.  \\n  \\n If an <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> is not specified on the <xref:System.Windows.Data.Binding>, the binding engine creates a <xref:System.Windows.Controls.ValidationError> with the exception and adds it to the <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> collection of the bound element.\"\n  example:\n  - \"The <xref:System.Windows.Controls.TextBox.Text%2A> property of the following <xref:System.Windows.Controls.TextBox> is data-bound to a source property `Age3` that is of type `int`. The <xref:System.Windows.Controls.ExceptionValidationRule> checks for exceptions that are thrown during the update of the source property (such as when the user enters a value that cannot be converted to an integer).  \\n  \\n [!code-xml[BindValidation#tbExceptionFilter](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml#tbexceptionfilter)]  \\n  \\n You have the option to provide custom logic to handle those exceptions. The following example shows how to use the <xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A> property to set an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>:  \\n  \\n [!code-csharp[BindValidation#filtercallback](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#filtercallback)]  \\n  \\n The following is an example implementation of an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>:  \\n  \\n [!code-csharp[BindValidation#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/Window1.xaml.cs#handler)]  \\n  \\n For the complete sample, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972).\"\n  syntax:\n    content: public delegate object UpdateSourceExceptionFilterCallback(object bindExpression, Exception exception);\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Data/UpdateSourceExceptionFilterCallback.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}