{"nodes":[{"content":"Directs tracing or debugging output to either the standard output or the standard error stream.","nodes":[{"pos":[0,95],"content":"Directs tracing or debugging output to either the standard output or the standard error stream.","nodes":[{"content":"Directs tracing or debugging output to either the standard output or the standard error stream.","pos":[0,95]}]}],"pos":[563,659],"yaml":true},{"content":"Use the <xref:System.Diagnostics.ConsoleTraceListener> class to write trace and debugging messages to the console. You can initialize a <xref:System.Diagnostics.ConsoleTraceListener> object to write trace messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream or to the <xref:System.Console.Error%2A?displayProperty=fullName> stream.  \n  \n> [!IMPORTANT]\n>  <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a`try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n When trace and debugging output is enabled, the <xref:System.Diagnostics.ConsoleTraceListener> messages are written to the specified <xref:System.Console?displayProperty=fullName> stream, which is similar to the way messages are written with the <xref:System.Console.Write%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName> methods. In a console application, the <xref:System.Console?displayProperty=fullName> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <xref:System.IO.TextWriter?displayProperty=fullName> instance.  \n  \n> [!NOTE]\n>  If the console does not exist, as in a Windows-based application, messages written to the console are not displayed.  \n  \n Add a <xref:System.Diagnostics.ConsoleTraceListener> object to the appropriate <xref:System.Diagnostics.Trace.Listeners%2A> collection if you want messages written through <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, or <xref:System.Diagnostics.Debug> to be written to the console. In addition, you can write messages directly to the console using the <xref:System.Diagnostics.Trace.Write%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> methods.  \n  \n> [!NOTE]\n>  The <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes share the same <xref:System.Diagnostics.TraceListenerCollection> collection, accessed through their respective `Listeners` properties. If you add a <xref:System.Diagnostics.ConsoleTraceListener> object to the collection using one of these classes, the other class automatically uses the same listener.  \n  \n Most compilers enable trace and debug output through conditional compilation flags. If you do not enable tracing or debugging, the messages written through the <xref:System.Diagnostics.Debug?displayProperty=fullName> and <xref:System.Diagnostics.Trace?displayProperty=fullName> classes are effectively ignored. The syntax to enable trace and debug output is compiler specific; if you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \n  \n-   To enable debugging in C#, add the **/d:DEBUG**flag to the compiler command line when you compile your code, or you can add **#define DEBUG** to the top of your file. In Visual Basic, add the **/d:DEBUG=True** flag to the compiler command line.  \n  \n-   To enable tracing in C#, add the **/d:TRACE** flag to the compiler command line when you compile your code, or add **#define TRACE** to the top of your file. In Visual Basic, add the **/d:TRACE=True** flag to the compiler command line.  \n  \n You can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection in your code, or you can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection through the application configuration file. Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your code to write messages for a specific code section or execution path. Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your application configuration file to direct all trace and debug messages to the console while the application executes.  \n  \n To write trace and debug messages to the console for a specific section of code, initialize a <xref:System.Diagnostics.ConsoleTraceListener> object and add it to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. Instrument the section of code that contains messages using the <xref:System.Diagnostics.Trace> or <xref:System.Diagnostics.Debug> classes. At the end of the code section, remove the <xref:System.Diagnostics.ConsoleTraceListener> object from the <xref:System.Diagnostics.Trace.Listeners%2A> collection, and call the <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> method on the <xref:System.Diagnostics.ConsoleTraceListener>.  \n  \n To direct all trace and debug messages to the console while the application executes, add a <xref:System.Diagnostics.ConsoleTraceListener> object to the application configuration file. Edit the configuration file that corresponds to the name of your application, or the app.config file in a [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] project. In this file, insert an element for a <xref:System.Diagnostics.ConsoleTraceListener>.  \n  \n The following example adds a <xref:System.Diagnostics.ConsoleTraceListener> object named `configConsoleListener` to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"false\" indentsize=\"4\">  \n      <listeners>  \n        <add name=\"configConsoleListener\"            type=\"System.Diagnostics.ConsoleTraceListener\" />  \n      </listeners>  \n    </trace>  \n  </system.diagnostics>  \n </configuration>  \n```  \n  \n For details about adding trace listeners in the application configuration file, see [\\&lt;listeners\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md).","nodes":[{"pos":[0,355],"content":"Use the <xref:System.Diagnostics.ConsoleTraceListener> class to write trace and debugging messages to the console. You can initialize a <xref:System.Diagnostics.ConsoleTraceListener> object to write trace messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream or to the <xref:System.Console.Error%2A?displayProperty=fullName> stream.","nodes":[{"content":"Use the <xref:System.Diagnostics.ConsoleTraceListener> class to write trace and debugging messages to the console. You can initialize a <xref:System.Diagnostics.ConsoleTraceListener> object to write trace messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream or to the <xref:System.Console.Error%2A?displayProperty=fullName> stream.","pos":[0,355],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> class to write trace and debugging messages to the console.","pos":[0,114],"source":"Use the <xref:System.Diagnostics.ConsoleTraceListener> class to write trace and debugging messages to the console."},{"content":"You can initialize a <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to write trace messages to the <ph id=\"ph2\">&lt;xref:System.Console.Out%2A?displayProperty=fullName&gt;</ph> stream or to the <ph id=\"ph3\">&lt;xref:System.Console.Error%2A?displayProperty=fullName&gt;</ph> stream.","pos":[115,355],"source":" You can initialize a <xref:System.Diagnostics.ConsoleTraceListener> object to write trace messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream or to the <xref:System.Console.Error%2A?displayProperty=fullName> stream."}]}]},{"pos":[363,863],"content":"[!IMPORTANT]\n <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a`try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a`try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,498],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,37],"source":" <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[38,132]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a<ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[133,243],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a`try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[244,351],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[352,485],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[870,1501],"content":"When trace and debugging output is enabled, the <xref:System.Diagnostics.ConsoleTraceListener> messages are written to the specified <xref:System.Console?displayProperty=fullName> stream, which is similar to the way messages are written with the <xref:System.Console.Write%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName> methods. In a console application, the <xref:System.Console?displayProperty=fullName> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <xref:System.IO.TextWriter?displayProperty=fullName> instance.","nodes":[{"content":"When trace and debugging output is enabled, the <xref:System.Diagnostics.ConsoleTraceListener> messages are written to the specified <xref:System.Console?displayProperty=fullName> stream, which is similar to the way messages are written with the <xref:System.Console.Write%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName> methods. In a console application, the <xref:System.Console?displayProperty=fullName> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <xref:System.IO.TextWriter?displayProperty=fullName> instance.","pos":[0,631],"nodes":[{"content":"When trace and debugging output is enabled, the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> messages are written to the specified <ph id=\"ph2\">&lt;xref:System.Console?displayProperty=fullName&gt;</ph> stream, which is similar to the way messages are written with the <ph id=\"ph3\">&lt;xref:System.Console.Write%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Console.WriteLine%2A?displayProperty=fullName&gt;</ph> methods.","pos":[0,373],"source":"When trace and debugging output is enabled, the <xref:System.Diagnostics.ConsoleTraceListener> messages are written to the specified <xref:System.Console?displayProperty=fullName> stream, which is similar to the way messages are written with the <xref:System.Console.Write%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName> methods."},{"content":"In a console application, the <ph id=\"ph1\">&lt;xref:System.Console?displayProperty=fullName&gt;</ph> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <ph id=\"ph2\">&lt;xref:System.IO.TextWriter?displayProperty=fullName&gt;</ph> instance.","pos":[374,631],"source":" In a console application, the <xref:System.Console?displayProperty=fullName> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <xref:System.IO.TextWriter?displayProperty=fullName> instance."}]}]},{"pos":[1509,1636],"content":"[!NOTE]\n If the console does not exist, as in a Windows-based application, messages written to the console are not displayed.","leadings":["","> "],"nodes":[{"content":"If the console does not exist, as in a Windows-based application, messages written to the console are not displayed.","pos":[9,125]}]},{"pos":[1643,2169],"content":"Add a <xref:System.Diagnostics.ConsoleTraceListener> object to the appropriate <xref:System.Diagnostics.Trace.Listeners%2A> collection if you want messages written through <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, or <xref:System.Diagnostics.Debug> to be written to the console. In addition, you can write messages directly to the console using the <xref:System.Diagnostics.Trace.Write%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> methods.","nodes":[{"content":"Add a <xref:System.Diagnostics.ConsoleTraceListener> object to the appropriate <xref:System.Diagnostics.Trace.Listeners%2A> collection if you want messages written through <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, or <xref:System.Diagnostics.Debug> to be written to the console. In addition, you can write messages directly to the console using the <xref:System.Diagnostics.Trace.Write%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> methods.","pos":[0,526],"nodes":[{"content":"Add a <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the appropriate <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection if you want messages written through <ph id=\"ph3\">&lt;xref:System.Diagnostics.Trace&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Diagnostics.TraceSource&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.Diagnostics.Debug&gt;</ph> to be written to the console.","pos":[0,308],"source":"Add a <xref:System.Diagnostics.ConsoleTraceListener> object to the appropriate <xref:System.Diagnostics.Trace.Listeners%2A> collection if you want messages written through <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, or <xref:System.Diagnostics.Debug> to be written to the console."},{"content":"In addition, you can write messages directly to the console using the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Trace.Write%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName&gt;</ph> methods.","pos":[309,526],"source":" In addition, you can write messages directly to the console using the <xref:System.Diagnostics.Trace.Write%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> methods."}]}]},{"pos":[2177,2569],"content":"[!NOTE]\n The <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes share the same <xref:System.Diagnostics.TraceListenerCollection> collection, accessed through their respective `Listeners` properties. If you add a <xref:System.Diagnostics.ConsoleTraceListener> object to the collection using one of these classes, the other class automatically uses the same listener.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes share the same <xref:System.Diagnostics.TraceListenerCollection> collection, accessed through their respective `Listeners` properties. If you add a <xref:System.Diagnostics.ConsoleTraceListener> object to the collection using one of these classes, the other class automatically uses the same listener.","pos":[8,390],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace&gt;</ph> classes share the same <ph id=\"ph3\">&lt;xref:System.Diagnostics.TraceListenerCollection&gt;</ph> collection, accessed through their respective <ph id=\"ph4\">`Listeners`</ph> properties.","pos":[1,215],"source":" The <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes share the same <xref:System.Diagnostics.TraceListenerCollection> collection, accessed through their respective `Listeners` properties."},{"content":"If you add a <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the collection using one of these classes, the other class automatically uses the same listener.","pos":[216,382],"source":" If you add a <xref:System.Diagnostics.ConsoleTraceListener> object to the collection using one of these classes, the other class automatically uses the same listener."}]}]},{"pos":[2576,3050],"content":"Most compilers enable trace and debug output through conditional compilation flags. If you do not enable tracing or debugging, the messages written through the <xref:System.Diagnostics.Debug?displayProperty=fullName> and <xref:System.Diagnostics.Trace?displayProperty=fullName> classes are effectively ignored. The syntax to enable trace and debug output is compiler specific; if you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.","nodes":[{"content":"Most compilers enable trace and debug output through conditional compilation flags. If you do not enable tracing or debugging, the messages written through the <xref:System.Diagnostics.Debug?displayProperty=fullName> and <xref:System.Diagnostics.Trace?displayProperty=fullName> classes are effectively ignored. The syntax to enable trace and debug output is compiler specific; if you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.","pos":[0,474],"nodes":[{"content":"Most compilers enable trace and debug output through conditional compilation flags.","pos":[0,83]},{"content":"If you do not enable tracing or debugging, the messages written through the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Debug?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace?displayProperty=fullName&gt;</ph> classes are effectively ignored.","pos":[84,310],"source":" If you do not enable tracing or debugging, the messages written through the <xref:System.Diagnostics.Debug?displayProperty=fullName> and <xref:System.Diagnostics.Trace?displayProperty=fullName> classes are effectively ignored."},{"content":"The syntax to enable trace and debug output is compiler specific; if you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.","pos":[311,474]}]}]},{"pos":[3060,3304],"content":"To enable debugging in C#, add the **/d:DEBUG**flag to the compiler command line when you compile your code, or you can add **#define DEBUG** to the top of your file. In Visual Basic, add the **/d:DEBUG=True** flag to the compiler command line.","nodes":[{"content":"To enable debugging in C#, add the <bpt id=\"p1\">**</bpt>/d:DEBUG<ept id=\"p1\">**</ept>flag to the compiler command line when you compile your code, or you can add <bpt id=\"p2\">**</bpt>#define DEBUG<ept id=\"p2\">**</ept> to the top of your file.","pos":[0,166],"source":"To enable debugging in C#, add the **/d:DEBUG**flag to the compiler command line when you compile your code, or you can add **#define DEBUG** to the top of your file."},{"content":"In Visual Basic, add the <bpt id=\"p1\">**</bpt>/d:DEBUG=True<ept id=\"p1\">**</ept> flag to the compiler command line.","pos":[167,244],"source":" In Visual Basic, add the **/d:DEBUG=True** flag to the compiler command line."}]},{"pos":[3314,3549],"content":"To enable tracing in C#, add the **/d:TRACE** flag to the compiler command line when you compile your code, or add **#define TRACE** to the top of your file. In Visual Basic, add the **/d:TRACE=True** flag to the compiler command line.","nodes":[{"content":"To enable tracing in C#, add the <bpt id=\"p1\">**</bpt>/d:TRACE<ept id=\"p1\">**</ept> flag to the compiler command line when you compile your code, or add <bpt id=\"p2\">**</bpt>#define TRACE<ept id=\"p2\">**</ept> to the top of your file.","pos":[0,157],"source":"To enable tracing in C#, add the **/d:TRACE** flag to the compiler command line when you compile your code, or add **#define TRACE** to the top of your file."},{"content":"In Visual Basic, add the <bpt id=\"p1\">**</bpt>/d:TRACE=True<ept id=\"p1\">**</ept> flag to the compiler command line.","pos":[158,235],"source":" In Visual Basic, add the **/d:TRACE=True** flag to the compiler command line."}]},{"pos":[3556,4205],"content":"You can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection in your code, or you can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection through the application configuration file. Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your code to write messages for a specific code section or execution path. Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your application configuration file to direct all trace and debug messages to the console while the application executes.","nodes":[{"content":"You can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection in your code, or you can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection through the application configuration file. Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your code to write messages for a specific code section or execution path. Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your application configuration file to direct all trace and debug messages to the console while the application executes.","pos":[0,649],"nodes":[{"content":"You can add a <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection in your code, or you can add a <ph id=\"ph3\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the <ph id=\"ph4\">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection through the application configuration file.","pos":[0,322],"source":"You can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection in your code, or you can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection through the application configuration file."},{"content":"Add the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object in your code to write messages for a specific code section or execution path.","pos":[323,462],"source":" Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your code to write messages for a specific code section or execution path."},{"content":"Add the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object in your application configuration file to direct all trace and debug messages to the console while the application executes.","pos":[463,649],"source":" Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your application configuration file to direct all trace and debug messages to the console while the application executes."}]}]},{"pos":[4212,4871],"content":"To write trace and debug messages to the console for a specific section of code, initialize a <xref:System.Diagnostics.ConsoleTraceListener> object and add it to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. Instrument the section of code that contains messages using the <xref:System.Diagnostics.Trace> or <xref:System.Diagnostics.Debug> classes. At the end of the code section, remove the <xref:System.Diagnostics.ConsoleTraceListener> object from the <xref:System.Diagnostics.Trace.Listeners%2A> collection, and call the <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> method on the <xref:System.Diagnostics.ConsoleTraceListener>.","nodes":[{"content":"To write trace and debug messages to the console for a specific section of code, initialize a <xref:System.Diagnostics.ConsoleTraceListener> object and add it to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. Instrument the section of code that contains messages using the <xref:System.Diagnostics.Trace> or <xref:System.Diagnostics.Debug> classes. At the end of the code section, remove the <xref:System.Diagnostics.ConsoleTraceListener> object from the <xref:System.Diagnostics.Trace.Listeners%2A> collection, and call the <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> method on the <xref:System.Diagnostics.ConsoleTraceListener>.","pos":[0,659],"nodes":[{"content":"To write trace and debug messages to the console for a specific section of code, initialize a <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object and add it to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection.","pos":[0,222],"source":"To write trace and debug messages to the console for a specific section of code, initialize a <xref:System.Diagnostics.ConsoleTraceListener> object and add it to the <xref:System.Diagnostics.Trace.Listeners%2A> collection."},{"content":"Instrument the section of code that contains messages using the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Trace&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Diagnostics.Debug&gt;</ph> classes.","pos":[223,362],"source":" Instrument the section of code that contains messages using the <xref:System.Diagnostics.Trace> or <xref:System.Diagnostics.Debug> classes."},{"content":"At the end of the code section, remove the <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object from the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection, and call the <ph id=\"ph3\">&lt;xref:System.Diagnostics.TextWriterTraceListener.Close%2A&gt;</ph> method on the <ph id=\"ph4\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>.","pos":[363,659],"source":" At the end of the code section, remove the <xref:System.Diagnostics.ConsoleTraceListener> object from the <xref:System.Diagnostics.Trace.Listeners%2A> collection, and call the <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> method on the <xref:System.Diagnostics.ConsoleTraceListener>."}]}]},{"pos":[4878,5315],"content":"To direct all trace and debug messages to the console while the application executes, add a <xref:System.Diagnostics.ConsoleTraceListener> object to the application configuration file. Edit the configuration file that corresponds to the name of your application, or the app.config file in a [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] project. In this file, insert an element for a <xref:System.Diagnostics.ConsoleTraceListener>.","nodes":[{"content":"To direct all trace and debug messages to the console while the application executes, add a <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to the application configuration file.","pos":[0,184],"source":"To direct all trace and debug messages to the console while the application executes, add a <xref:System.Diagnostics.ConsoleTraceListener> object to the application configuration file."},{"content":"Edit the configuration file that corresponds to the name of your application, or the app.config file in a <ph id=\"ph1\">[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]</ph> project.","pos":[185,351],"source":" Edit the configuration file that corresponds to the name of your application, or the app.config file in a [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] project."},{"content":"In this file, insert an element for a <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph>.","pos":[352,437],"source":" In this file, insert an element for a <xref:System.Diagnostics.ConsoleTraceListener>."}]},{"pos":[5322,5498],"content":"The following example adds a <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object named <ph id=\"ph2\">`configConsoleListener`</ph> to the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Trace.Listeners%2A&gt;</ph> collection.","source":"The following example adds a <xref:System.Diagnostics.ConsoleTraceListener> object named `configConsoleListener` to the <xref:System.Diagnostics.Trace.Listeners%2A> collection."},{"pos":[5817,6011],"content":"For details about adding trace listeners in the application configuration file, see <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&amp;</ph>lt;listeners<ph id=\"ph2\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)</ept>.","source":"For details about adding trace listeners in the application configuration file, see [\\&lt;listeners\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)."}],"pos":[670,6737],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.ConsoleTraceListener\"></xref> class with trace output written to the standard output stream.","nodes":[{"pos":[0,157],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ConsoleTraceListener\"&gt;&lt;/xref&gt;</ph> class with trace output written to the standard output stream.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.ConsoleTraceListener\"></xref> class with trace output written to the standard output stream."}],"pos":[11786,11944],"yaml":true},{"content":"This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream. Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (\"\").","nodes":[{"pos":[0,272],"content":"This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream. Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (\"\").","nodes":[{"content":"This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream. Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (\"\").","pos":[0,272],"nodes":[{"content":"This constructor initializes a <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to write messages to the <ph id=\"ph2\">&lt;xref:System.Console.Out%2A?displayProperty=fullName&gt;</ph> stream.","pos":[0,171],"source":"This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property is initialized to an empty string (\"\").","pos":[172,272],"source":" Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (\"\")."}]}]}],"pos":[11955,12228],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.ConsoleTraceListener\"></xref> class with an option to write trace output to the standard output stream or the standard error stream.","nodes":[{"pos":[0,197],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.ConsoleTraceListener\"&gt;&lt;/xref&gt;</ph> class with an option to write trace output to the standard output stream or the standard error stream.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.ConsoleTraceListener\"></xref> class with an option to write trace output to the standard output stream or the standard error stream."}],"pos":[14086,14284],"yaml":true},{"content":"This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to either the <xref:System.Console.Out%2A?displayProperty=fullName> or the <xref:System.Console.Error%2A?displayProperty=fullName> stream. Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (\"\").","nodes":[{"pos":[0,342],"content":"This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to either the <xref:System.Console.Out%2A?displayProperty=fullName> or the <xref:System.Console.Error%2A?displayProperty=fullName> stream. Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (\"\").","nodes":[{"content":"This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to either the <xref:System.Console.Out%2A?displayProperty=fullName> or the <xref:System.Console.Error%2A?displayProperty=fullName> stream. Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (\"\").","pos":[0,342],"nodes":[{"content":"This constructor initializes a <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> object to write messages to either the <ph id=\"ph2\">&lt;xref:System.Console.Out%2A?displayProperty=fullName&gt;</ph> or the <ph id=\"ph3\">&lt;xref:System.Console.Error%2A?displayProperty=fullName&gt;</ph> stream.","pos":[0,241],"source":"This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to either the <xref:System.Console.Out%2A?displayProperty=fullName> or the <xref:System.Console.Error%2A?displayProperty=fullName> stream."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.Diagnostics.TraceListener.Name%2A&gt;</ph> property is initialized to an empty string (\"\").","pos":[242,342],"source":" Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (\"\")."}]}]}],"pos":[14295,14638],"yaml":true,"extradata":"MT"},{"content":"`true` to write tracing and debugging output to the standard error stream; `false` to write tracing and debugging output to the standard output stream.","nodes":[{"pos":[0,151],"content":"<ph id=\"ph1\">`true`</ph> to write tracing and debugging output to the standard error stream; <ph id=\"ph2\">`false`</ph> to write tracing and debugging output to the standard output stream.","source":"`true` to write tracing and debugging output to the standard error stream; `false` to write tracing and debugging output to the standard output stream."}],"pos":[15430,15584],"yaml":true},{"content":"Closes the output to the stream specified for this trace listener.","nodes":[{"pos":[0,66],"content":"Closes the output to the stream specified for this trace listener.","nodes":[{"content":"Closes the output to the stream specified for this trace listener.","pos":[0,66]}]}],"pos":[16616,16683],"yaml":true},{"content":"The stream specified for this <xref:System.Diagnostics.ConsoleTraceListener> instance (either the <xref:System.Console.Out%2A?displayProperty=fullName> stream or the <xref:System.Console.Error%2A?displayProperty=fullName> stream) is closed.","nodes":[{"pos":[0,240],"content":"The stream specified for this <xref:System.Diagnostics.ConsoleTraceListener> instance (either the <xref:System.Console.Out%2A?displayProperty=fullName> stream or the <xref:System.Console.Error%2A?displayProperty=fullName> stream) is closed.","nodes":[{"content":"The stream specified for this <ph id=\"ph1\">&lt;xref:System.Diagnostics.ConsoleTraceListener&gt;</ph> instance (either the <ph id=\"ph2\">&lt;xref:System.Console.Out%2A?displayProperty=fullName&gt;</ph> stream or the <ph id=\"ph3\">&lt;xref:System.Console.Error%2A?displayProperty=fullName&gt;</ph> stream) is closed.","pos":[0,240],"source":"The stream specified for this <xref:System.Diagnostics.ConsoleTraceListener> instance (either the <xref:System.Console.Out%2A?displayProperty=fullName> stream or the <xref:System.Console.Error%2A?displayProperty=fullName> stream) is closed."}]}],"pos":[16694,16935],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.ConsoleTraceListener\n  commentId: T:System.Diagnostics.ConsoleTraceListener\n  id: ConsoleTraceListener\n  children:\n  - System.Diagnostics.ConsoleTraceListener.#ctor\n  - System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)\n  - System.Diagnostics.ConsoleTraceListener.Close\n  langs:\n  - csharp\n  name: ConsoleTraceListener\n  nameWithType: ConsoleTraceListener\n  fullName: System.Diagnostics.ConsoleTraceListener\n  type: Class\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Directs tracing or debugging output to either the standard output or the standard error stream.\n  remarks: \"Use the <xref:System.Diagnostics.ConsoleTraceListener> class to write trace and debugging messages to the console. You can initialize a <xref:System.Diagnostics.ConsoleTraceListener> object to write trace messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream or to the <xref:System.Console.Error%2A?displayProperty=fullName> stream.  \\n  \\n> [!IMPORTANT]\\n>  <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a`try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n When trace and debugging output is enabled, the <xref:System.Diagnostics.ConsoleTraceListener> messages are written to the specified <xref:System.Console?displayProperty=fullName> stream, which is similar to the way messages are written with the <xref:System.Console.Write%2A?displayProperty=fullName> or <xref:System.Console.WriteLine%2A?displayProperty=fullName> methods. In a console application, the <xref:System.Console?displayProperty=fullName> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <xref:System.IO.TextWriter?displayProperty=fullName> instance.  \\n  \\n> [!NOTE]\\n>  If the console does not exist, as in a Windows-based application, messages written to the console are not displayed.  \\n  \\n Add a <xref:System.Diagnostics.ConsoleTraceListener> object to the appropriate <xref:System.Diagnostics.Trace.Listeners%2A> collection if you want messages written through <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, or <xref:System.Diagnostics.Debug> to be written to the console. In addition, you can write messages directly to the console using the <xref:System.Diagnostics.Trace.Write%2A?displayProperty=fullName> or <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> methods.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes share the same <xref:System.Diagnostics.TraceListenerCollection> collection, accessed through their respective `Listeners` properties. If you add a <xref:System.Diagnostics.ConsoleTraceListener> object to the collection using one of these classes, the other class automatically uses the same listener.  \\n  \\n Most compilers enable trace and debug output through conditional compilation flags. If you do not enable tracing or debugging, the messages written through the <xref:System.Diagnostics.Debug?displayProperty=fullName> and <xref:System.Diagnostics.Trace?displayProperty=fullName> classes are effectively ignored. The syntax to enable trace and debug output is compiler specific; if you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.  \\n  \\n-   To enable debugging in C#, add the **/d:DEBUG**flag to the compiler command line when you compile your code, or you can add **#define DEBUG** to the top of your file. In Visual Basic, add the **/d:DEBUG=True** flag to the compiler command line.  \\n  \\n-   To enable tracing in C#, add the **/d:TRACE** flag to the compiler command line when you compile your code, or add **#define TRACE** to the top of your file. In Visual Basic, add the **/d:TRACE=True** flag to the compiler command line.  \\n  \\n You can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection in your code, or you can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection through the application configuration file. Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your code to write messages for a specific code section or execution path. Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your application configuration file to direct all trace and debug messages to the console while the application executes.  \\n  \\n To write trace and debug messages to the console for a specific section of code, initialize a <xref:System.Diagnostics.ConsoleTraceListener> object and add it to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. Instrument the section of code that contains messages using the <xref:System.Diagnostics.Trace> or <xref:System.Diagnostics.Debug> classes. At the end of the code section, remove the <xref:System.Diagnostics.ConsoleTraceListener> object from the <xref:System.Diagnostics.Trace.Listeners%2A> collection, and call the <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> method on the <xref:System.Diagnostics.ConsoleTraceListener>.  \\n  \\n To direct all trace and debug messages to the console while the application executes, add a <xref:System.Diagnostics.ConsoleTraceListener> object to the application configuration file. Edit the configuration file that corresponds to the name of your application, or the app.config file in a [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] project. In this file, insert an element for a <xref:System.Diagnostics.ConsoleTraceListener>.  \\n  \\n The following example adds a <xref:System.Diagnostics.ConsoleTraceListener> object named `configConsoleListener` to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \\n  \\n```  \\n<configuration>  \\n  <system.diagnostics>  \\n    <trace autoflush=\\\"false\\\" indentsize=\\\"4\\\">  \\n      <listeners>  \\n        <add name=\\\"configConsoleListener\\\"            type=\\\"System.Diagnostics.ConsoleTraceListener\\\" />  \\n      </listeners>  \\n    </trace>  \\n  </system.diagnostics>  \\n </configuration>  \\n```  \\n  \\n For details about adding trace listeners in the application configuration file, see [\\\\&lt;listeners\\\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md).\"\n  example:\n  - \"The following code example implements a console application consisting of a class with two public methods.  \\n  \\n The `Main` method examines the command-line arguments and determines if trace output should be directed to the standard error stream or the standard output stream. `Main` creates and initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream, and adds this object to the trace listener collection. It then calls the `WriteEnvironmentInfoToTrace` method, which writes details about the executing environment and the trace listener configuration to the trace output.  \\n  \\n When the example application runs, the environment and trace configuration details are written to the specified console output stream through the <xref:System.Diagnostics.ConsoleTraceListener> object.  \\n  \\n [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]\\n [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]\"\n  syntax:\n    content: 'public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener'\n  inheritance:\n  - System.Object\n  - System.Diagnostics.TraceListener\n  - System.Diagnostics.TextWriterTraceListener\n  implements: []\n  inheritedMembers:\n  - System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)\n  - System.Diagnostics.TextWriterTraceListener.Flush\n  - System.Diagnostics.TextWriterTraceListener.Write(System.String)\n  - System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)\n  - System.Diagnostics.TextWriterTraceListener.Writer\n  - System.Diagnostics.TraceListener.Attributes\n  - System.Diagnostics.TraceListener.Dispose\n  - System.Diagnostics.TraceListener.Fail(System.String)\n  - System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  - System.Diagnostics.TraceListener.Filter\n  - System.Diagnostics.TraceListener.GetSupportedAttributes\n  - System.Diagnostics.TraceListener.IndentLevel\n  - System.Diagnostics.TraceListener.IndentSize\n  - System.Diagnostics.TraceListener.IsThreadSafe\n  - System.Diagnostics.TraceListener.Name\n  - System.Diagnostics.TraceListener.NeedIndent\n  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  - System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  - System.Diagnostics.TraceListener.TraceOutputOptions\n  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  - System.Diagnostics.TraceListener.Write(System.Object)\n  - System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  - System.Diagnostics.TraceListener.Write(System.String,System.String)\n  - System.Diagnostics.TraceListener.WriteIndent\n  - System.Diagnostics.TraceListener.WriteLine(System.Object)\n  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ConsoleTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ConsoleTraceListener.#ctor\n  commentId: M:System.Diagnostics.ConsoleTraceListener.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.ConsoleTraceListener\n  langs:\n  - csharp\n  name: ConsoleTraceListener()\n  nameWithType: ConsoleTraceListener.ConsoleTraceListener()\n  fullName: ConsoleTraceListener.ConsoleTraceListener()\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.ConsoleTraceListener\"></xref> class with trace output written to the standard output stream.\n  remarks: This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to the <xref:System.Console.Out%2A?displayProperty=fullName> stream. Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (\"\").\n  example:\n  - \"The following code example initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream and adds it to the trace listener collection. This code example is part of a larger example provided for the <xref:System.Diagnostics.ConsoleTraceListener> class.  \\n  \\n [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]\\n [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]\"\n  syntax:\n    content: public ConsoleTraceListener ();\n    parameters: []\n  overload: System.Diagnostics.ConsoleTraceListener.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ConsoleTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)\n  commentId: M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Diagnostics.ConsoleTraceListener\n  langs:\n  - csharp\n  name: ConsoleTraceListener(Boolean)\n  nameWithType: ConsoleTraceListener.ConsoleTraceListener(Boolean)\n  fullName: ConsoleTraceListener.ConsoleTraceListener(Boolean)\n  type: Constructor\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.ConsoleTraceListener\"></xref> class with an option to write trace output to the standard output stream or the standard error stream.\n  remarks: This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to either the <xref:System.Console.Out%2A?displayProperty=fullName> or the <xref:System.Console.Error%2A?displayProperty=fullName> stream. Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string (\"\").\n  example:\n  - \"The following code example initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream and adds it to the trace listener collection. This code example is part of a larger example provided for the <xref:System.Diagnostics.ConsoleTraceListener> class.  \\n  \\n [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]\\n [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]\"\n  syntax:\n    content: public ConsoleTraceListener (bool useErrorStream);\n    parameters:\n    - id: useErrorStream\n      type: System.Boolean\n      description: '`true` to write tracing and debugging output to the standard error stream; `false` to write tracing and debugging output to the standard output stream.'\n  overload: System.Diagnostics.ConsoleTraceListener.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ConsoleTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.ConsoleTraceListener.Close\n  commentId: M:System.Diagnostics.ConsoleTraceListener.Close\n  id: Close\n  parent: System.Diagnostics.ConsoleTraceListener\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: ConsoleTraceListener.Close()\n  fullName: ConsoleTraceListener.Close()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Diagnostics\n  summary: Closes the output to the stream specified for this trace listener.\n  remarks: The stream specified for this <xref:System.Diagnostics.ConsoleTraceListener> instance (either the <xref:System.Console.Out%2A?displayProperty=fullName> stream or the <xref:System.Console.Error%2A?displayProperty=fullName> stream) is closed.\n  syntax:\n    content: public override void Close ();\n    parameters: []\n  overload: System.Diagnostics.ConsoleTraceListener.Close*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ConsoleTraceListener.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Diagnostics.TextWriterTraceListener\n  parent: System.Diagnostics\n  isExternal: false\n  name: TextWriterTraceListener\n  nameWithType: TextWriterTraceListener\n  fullName: System.Diagnostics.TextWriterTraceListener\n- uid: System.Diagnostics.ConsoleTraceListener.#ctor\n  parent: System.Diagnostics.ConsoleTraceListener\n  isExternal: false\n  name: ConsoleTraceListener()\n  nameWithType: ConsoleTraceListener.ConsoleTraceListener()\n  fullName: ConsoleTraceListener.ConsoleTraceListener()\n- uid: System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)\n  parent: System.Diagnostics.ConsoleTraceListener\n  isExternal: false\n  name: ConsoleTraceListener(Boolean)\n  nameWithType: ConsoleTraceListener.ConsoleTraceListener(Boolean)\n  fullName: ConsoleTraceListener.ConsoleTraceListener(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.ConsoleTraceListener.Close\n  parent: System.Diagnostics.ConsoleTraceListener\n  isExternal: false\n  name: Close()\n  nameWithType: ConsoleTraceListener.Close()\n  fullName: ConsoleTraceListener.Close()\n- uid: System.Diagnostics.ConsoleTraceListener.#ctor*\n  parent: System.Diagnostics.ConsoleTraceListener\n  isExternal: false\n  name: ConsoleTraceListener\n  nameWithType: ConsoleTraceListener.ConsoleTraceListener\n  fullName: ConsoleTraceListener.ConsoleTraceListener\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ConsoleTraceListener.xml\n- uid: System.Diagnostics.ConsoleTraceListener.Close*\n  parent: System.Diagnostics.ConsoleTraceListener\n  isExternal: false\n  name: Close\n  nameWithType: ConsoleTraceListener.Close\n  fullName: ConsoleTraceListener.Close\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/ConsoleTraceListener.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Diagnostics.TraceListener.Attributes\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Attributes\n  nameWithType: TraceListener.Attributes\n  fullName: TraceListener.Attributes\n- uid: System.Diagnostics.TraceListener.Dispose\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Dispose()\n  nameWithType: TraceListener.Dispose()\n  fullName: TraceListener.Dispose()\n- uid: System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: TextWriterTraceListener.Dispose(Boolean)\n  fullName: TextWriterTraceListener.Dispose(Boolean)\n- uid: System.Diagnostics.TraceListener.Fail(System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Fail(String)\n  nameWithType: TraceListener.Fail(String)\n  fullName: TraceListener.Fail(String)\n- uid: System.Diagnostics.TraceListener.Fail(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Fail(String, String)\n  nameWithType: TraceListener.Fail(String, String)\n  fullName: TraceListener.Fail(String, String)\n- uid: System.Diagnostics.TraceListener.Filter\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Filter\n  nameWithType: TraceListener.Filter\n  fullName: TraceListener.Filter\n- uid: System.Diagnostics.TextWriterTraceListener.Flush\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: false\n  name: Flush()\n  nameWithType: TextWriterTraceListener.Flush()\n  fullName: TextWriterTraceListener.Flush()\n- uid: System.Diagnostics.TraceListener.GetSupportedAttributes\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: GetSupportedAttributes()\n  nameWithType: TraceListener.GetSupportedAttributes()\n  fullName: TraceListener.GetSupportedAttributes()\n- uid: System.Diagnostics.TraceListener.IndentLevel\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IndentLevel\n  nameWithType: TraceListener.IndentLevel\n  fullName: TraceListener.IndentLevel\n- uid: System.Diagnostics.TraceListener.IndentSize\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IndentSize\n  nameWithType: TraceListener.IndentSize\n  fullName: TraceListener.IndentSize\n- uid: System.Diagnostics.TraceListener.IsThreadSafe\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: IsThreadSafe\n  nameWithType: TraceListener.IsThreadSafe\n  fullName: TraceListener.IsThreadSafe\n- uid: System.Diagnostics.TraceListener.Name\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Name\n  nameWithType: TraceListener.Name\n  fullName: TraceListener.Name\n- uid: System.Diagnostics.TraceListener.NeedIndent\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: NeedIndent\n  nameWithType: TraceListener.NeedIndent\n  fullName: TraceListener.NeedIndent\n- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  nameWithType: TraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n  fullName: TraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object)\n- uid: System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  nameWithType: TraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n  fullName: TraceListener.TraceData(TraceEventCache, String, TraceEventType, Int32, Object[])\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n  nameWithType: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n  fullName: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32)\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  nameWithType: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n  fullName: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String)\n- uid: System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  nameWithType: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n  fullName: TraceListener.TraceEvent(TraceEventCache, String, TraceEventType, Int32, String, Object[])\n- uid: System.Diagnostics.TraceListener.TraceOutputOptions\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceOutputOptions\n  nameWithType: TraceListener.TraceOutputOptions\n  fullName: TraceListener.TraceOutputOptions\n- uid: System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n  nameWithType: TraceListener.TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n  fullName: TraceListener.TraceTransfer(TraceEventCache, String, Int32, String, Guid)\n- uid: System.Diagnostics.TraceListener.Write(System.Object)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(Object)\n  nameWithType: TraceListener.Write(Object)\n  fullName: TraceListener.Write(Object)\n- uid: System.Diagnostics.TextWriterTraceListener.Write(System.String)\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: false\n  name: Write(String)\n  nameWithType: TextWriterTraceListener.Write(String)\n  fullName: TextWriterTraceListener.Write(String)\n- uid: System.Diagnostics.TraceListener.Write(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(Object, String)\n  nameWithType: TraceListener.Write(Object, String)\n  fullName: TraceListener.Write(Object, String)\n- uid: System.Diagnostics.TraceListener.Write(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: Write(String, String)\n  nameWithType: TraceListener.Write(String, String)\n  fullName: TraceListener.Write(String, String)\n- uid: System.Diagnostics.TraceListener.WriteIndent\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteIndent()\n  nameWithType: TraceListener.WriteIndent()\n  fullName: TraceListener.WriteIndent()\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(Object)\n  nameWithType: TraceListener.WriteLine(Object)\n  fullName: TraceListener.WriteLine(Object)\n- uid: System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: false\n  name: WriteLine(String)\n  nameWithType: TextWriterTraceListener.WriteLine(String)\n  fullName: TextWriterTraceListener.WriteLine(String)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(Object, String)\n  nameWithType: TraceListener.WriteLine(Object, String)\n  fullName: TraceListener.WriteLine(Object, String)\n- uid: System.Diagnostics.TraceListener.WriteLine(System.String,System.String)\n  parent: System.Diagnostics.TraceListener\n  isExternal: false\n  name: WriteLine(String, String)\n  nameWithType: TraceListener.WriteLine(String, String)\n  fullName: TraceListener.WriteLine(String, String)\n- uid: System.Diagnostics.TextWriterTraceListener.Writer\n  parent: System.Diagnostics.TextWriterTraceListener\n  isExternal: false\n  name: Writer\n  nameWithType: TextWriterTraceListener.Writer\n  fullName: TextWriterTraceListener.Writer\n"}