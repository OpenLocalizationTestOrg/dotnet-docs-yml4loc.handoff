{"nodes":[{"content":"Acts as a base class for deriving concrete wrapper classes to implement the application settings feature in Window Forms applications.","nodes":[{"pos":[0,134],"content":"Acts as a base class for deriving concrete wrapper classes to implement the application settings feature in Window Forms applications.","nodes":[{"content":"Acts as a base class for deriving concrete wrapper classes to implement the application settings feature in Window Forms applications.","pos":[0,134]}]}],"pos":[2221,2356],"yaml":true},{"content":"<xref:System.Configuration.ApplicationSettingsBase> adds the following functionality to the <xref:System.Configuration.SettingsBase> class, which is used by Web-based applications:  \n  \n-   The ability to detect attributes on a derived, settings wrapper class. <xref:System.Configuration.ApplicationSettingsBase> supports the declarative model used for wrapper class properties, as described later.  \n  \n-   Higher-level <xref:System.Configuration.ApplicationSettingsBase.Save%2A> and <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods.  \n  \n-   Additional validation events that you can handle to ensure the correctness of individual settings.  \n  \n In the application settings architecture, to access a group of settings properties you need to derive a concrete wrapper class from <xref:System.Configuration.ApplicationSettingsBase>. The wrapper class customizes <xref:System.Configuration.ApplicationSettingsBase> in the following ways:  \n  \n-   For every settings property to be accessed, a corresponding strongly typed public property is added to the wrapper class. This property has `get` and `set` accessors for read/write application settings, but only a `get` accessor for read-only settings.  \n  \n-   Appropriated attributes must be applied to the wrapper class's public properties to indicate characteristics of the settings property, such as the setting's scope (application or user), whether the setting should support roaming, the default value for the setting, the settings provider to be used, and so on. Each property is required to specify its scope, using either <xref:System.Configuration.ApplicationScopedSettingAttribute> or <xref:System.Configuration.UserScopedSettingAttribute>. Application-scoped settings are read-only if the default <xref:System.Configuration.LocalFileSettingsProvider> is used.  \n  \n The <xref:System.Configuration.ApplicationSettingsBase> class uses reflection to detect these attributes at run time. Most of this information gets passed to the settings provider layer, which is responsible for storage, persistence format, and so on.  \n  \n When an application has multiple settings wrapper classes, each class defines a *settings group*. Each group has the following characteristics:  \n  \n-   A group can contain any number or type of property settings.  \n  \n-   If the group name is not explicitly set by the decorating the wrapper class with a <xref:System.Configuration.SettingsGroupNameAttribute>, then a name is automatically generated.  \n  \n By default, all client-based applications use the <xref:System.Configuration.LocalFileSettingsProvider> to provide storage. If an alternate settings provider is desired, then the wrapper class or property must be decorated with a corresponding <xref:System.Configuration.SettingsProviderAttribute>.  \n  \n For more information about using application settings, see [Application Settings for Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md).","nodes":[{"pos":[0,180],"content":"<xref:System.Configuration.ApplicationSettingsBase> adds the following functionality to the <xref:System.Configuration.SettingsBase> class, which is used by Web-based applications:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> adds the following functionality to the <ph id=\"ph2\">&lt;xref:System.Configuration.SettingsBase&gt;</ph> class, which is used by Web-based applications:","pos":[0,180],"source":"<xref:System.Configuration.ApplicationSettingsBase> adds the following functionality to the <xref:System.Configuration.SettingsBase> class, which is used by Web-based applications:"}]},{"pos":[190,398],"content":"The ability to detect attributes on a derived, settings wrapper class. <xref:System.Configuration.ApplicationSettingsBase> supports the declarative model used for wrapper class properties, as described later.","nodes":[{"content":"The ability to detect attributes on a derived, settings wrapper class. <xref:System.Configuration.ApplicationSettingsBase> supports the declarative model used for wrapper class properties, as described later.","pos":[0,208],"nodes":[{"content":"The ability to detect attributes on a derived, settings wrapper class.","pos":[0,70]},{"content":"<ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> supports the declarative model used for wrapper class properties, as described later.","pos":[71,208],"source":" <xref:System.Configuration.ApplicationSettingsBase> supports the declarative model used for wrapper class properties, as described later."}]}]},{"pos":[408,555],"content":"Higher-level <xref:System.Configuration.ApplicationSettingsBase.Save%2A> and <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods.","nodes":[{"content":"Higher-level <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> methods.","pos":[0,147],"source":"Higher-level <xref:System.Configuration.ApplicationSettingsBase.Save%2A> and <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods."}]},{"pos":[565,663],"content":"Additional validation events that you can handle to ensure the correctness of individual settings.","nodes":[{"content":"Additional validation events that you can handle to ensure the correctness of individual settings.","pos":[0,98]}]},{"pos":[670,958],"content":"In the application settings architecture, to access a group of settings properties you need to derive a concrete wrapper class from <xref:System.Configuration.ApplicationSettingsBase>. The wrapper class customizes <xref:System.Configuration.ApplicationSettingsBase> in the following ways:","nodes":[{"content":"In the application settings architecture, to access a group of settings properties you need to derive a concrete wrapper class from <xref:System.Configuration.ApplicationSettingsBase>. The wrapper class customizes <xref:System.Configuration.ApplicationSettingsBase> in the following ways:","pos":[0,288],"nodes":[{"content":"In the application settings architecture, to access a group of settings properties you need to derive a concrete wrapper class from <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>.","pos":[0,184],"source":"In the application settings architecture, to access a group of settings properties you need to derive a concrete wrapper class from <xref:System.Configuration.ApplicationSettingsBase>."},{"content":"The wrapper class customizes <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> in the following ways:","pos":[185,288],"source":" The wrapper class customizes <xref:System.Configuration.ApplicationSettingsBase> in the following ways:"}]}]},{"pos":[968,1220],"content":"For every settings property to be accessed, a corresponding strongly typed public property is added to the wrapper class. This property has `get` and `set` accessors for read/write application settings, but only a `get` accessor for read-only settings.","nodes":[{"content":"For every settings property to be accessed, a corresponding strongly typed public property is added to the wrapper class.","pos":[0,121]},{"content":"This property has <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors for read/write application settings, but only a <ph id=\"ph3\">`get`</ph> accessor for read-only settings.","pos":[122,252],"source":" This property has `get` and `set` accessors for read/write application settings, but only a `get` accessor for read-only settings."}]},{"pos":[1230,1841],"content":"Appropriated attributes must be applied to the wrapper class's public properties to indicate characteristics of the settings property, such as the setting's scope (application or user), whether the setting should support roaming, the default value for the setting, the settings provider to be used, and so on. Each property is required to specify its scope, using either <xref:System.Configuration.ApplicationScopedSettingAttribute> or <xref:System.Configuration.UserScopedSettingAttribute>. Application-scoped settings are read-only if the default <xref:System.Configuration.LocalFileSettingsProvider> is used.","nodes":[{"content":"Appropriated attributes must be applied to the wrapper class's public properties to indicate characteristics of the settings property, such as the setting's scope (application or user), whether the setting should support roaming, the default value for the setting, the settings provider to be used, and so on. Each property is required to specify its scope, using either <xref:System.Configuration.ApplicationScopedSettingAttribute> or <xref:System.Configuration.UserScopedSettingAttribute>. Application-scoped settings are read-only if the default <xref:System.Configuration.LocalFileSettingsProvider> is used.","pos":[0,611],"nodes":[{"content":"Appropriated attributes must be applied to the wrapper class's public properties to indicate characteristics of the settings property, such as the setting's scope (application or user), whether the setting should support roaming, the default value for the setting, the settings provider to be used, and so on.","pos":[0,309]},{"content":"Each property is required to specify its scope, using either <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationScopedSettingAttribute&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Configuration.UserScopedSettingAttribute&gt;</ph>.","pos":[310,491],"source":" Each property is required to specify its scope, using either <xref:System.Configuration.ApplicationScopedSettingAttribute> or <xref:System.Configuration.UserScopedSettingAttribute>."},{"content":"Application-scoped settings are read-only if the default <ph id=\"ph1\">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph> is used.","pos":[492,611],"source":" Application-scoped settings are read-only if the default <xref:System.Configuration.LocalFileSettingsProvider> is used."}]}]},{"pos":[1848,2099],"content":"The <xref:System.Configuration.ApplicationSettingsBase> class uses reflection to detect these attributes at run time. Most of this information gets passed to the settings provider layer, which is responsible for storage, persistence format, and so on.","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase> class uses reflection to detect these attributes at run time. Most of this information gets passed to the settings provider layer, which is responsible for storage, persistence format, and so on.","pos":[0,251],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> class uses reflection to detect these attributes at run time.","pos":[0,117],"source":"The <xref:System.Configuration.ApplicationSettingsBase> class uses reflection to detect these attributes at run time."},{"content":"Most of this information gets passed to the settings provider layer, which is responsible for storage, persistence format, and so on.","pos":[118,251]}]}]},{"pos":[2106,2249],"content":"When an application has multiple settings wrapper classes, each class defines a *settings group*. Each group has the following characteristics:","nodes":[{"content":"When an application has multiple settings wrapper classes, each class defines a <bpt id=\"p1\">*</bpt>settings group<ept id=\"p1\">*</ept>.","pos":[0,97],"source":"When an application has multiple settings wrapper classes, each class defines a *settings group*."},{"content":"Each group has the following characteristics:","pos":[98,143]}]},{"pos":[2259,2319],"content":"A group can contain any number or type of property settings.","nodes":[{"content":"A group can contain any number or type of property settings.","pos":[0,60]}]},{"pos":[2329,2507],"content":"If the group name is not explicitly set by the decorating the wrapper class with a <xref:System.Configuration.SettingsGroupNameAttribute>, then a name is automatically generated.","nodes":[{"content":"If the group name is not explicitly set by the decorating the wrapper class with a <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsGroupNameAttribute&gt;</ph>, then a name is automatically generated.","pos":[0,178],"source":"If the group name is not explicitly set by the decorating the wrapper class with a <xref:System.Configuration.SettingsGroupNameAttribute>, then a name is automatically generated."}]},{"pos":[2514,2812],"content":"By default, all client-based applications use the <xref:System.Configuration.LocalFileSettingsProvider> to provide storage. If an alternate settings provider is desired, then the wrapper class or property must be decorated with a corresponding <xref:System.Configuration.SettingsProviderAttribute>.","nodes":[{"content":"By default, all client-based applications use the <xref:System.Configuration.LocalFileSettingsProvider> to provide storage. If an alternate settings provider is desired, then the wrapper class or property must be decorated with a corresponding <xref:System.Configuration.SettingsProviderAttribute>.","pos":[0,298],"nodes":[{"content":"By default, all client-based applications use the <ph id=\"ph1\">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph> to provide storage.","pos":[0,123],"source":"By default, all client-based applications use the <xref:System.Configuration.LocalFileSettingsProvider> to provide storage."},{"content":"If an alternate settings provider is desired, then the wrapper class or property must be decorated with a corresponding <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph>.","pos":[124,298],"source":" If an alternate settings provider is desired, then the wrapper class or property must be decorated with a corresponding <xref:System.Configuration.SettingsProviderAttribute>."}]}]},{"pos":[2819,2997],"content":"For more information about using application settings, see <bpt id=\"p1\">[</bpt>Application Settings for Windows Forms<ept id=\"p1\">](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md)</ept>.","source":"For more information about using application settings, see [Application Settings for Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md)."}],"pos":[2367,5391],"yaml":true,"extradata":"MT"},{"content":"Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class to its default state.","nodes":[{"pos":[0,124],"content":"Initializes an instance of the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.ApplicationSettingsBase\"&gt;&lt;/xref&gt;</ph> class to its default state.","source":"Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class to its default state."}],"pos":[9425,9550],"yaml":true},{"content":"The default constructor was designed to work under the assumption that there is no component associated with the current settings wrapper class, which derives from <xref:System.Configuration.ApplicationSettingsBase>.  \n  \n When an instance of a wrapper class is created, inherited code will automatically perform the following actions:  \n  \n1.  Reflect over the class.  \n  \n2.  For each property on the wrapper marked with either `[UserScopedSettingAttribute]` or `[ApplicationScopedSettingAttribute]`, a corresponding <xref:System.Configuration.SettingsProperty> is created.  \n  \n3.  Each <xref:System.Configuration.SettingsProperty> has some of its properties set based on other attributes that are optionally present on the wrapper's properties, such as the default value or the settings provider.  \n  \n4.  All other attributes are simply put into an attribute bag, the <xref:System.Configuration.SettingsProperty.Attributes%2A> property of the <xref:System.Configuration.SettingsProperty> class.  \n  \n5.  All <xref:System.Configuration.SettingsProperty> objects are added to a <xref:System.Configuration.SettingsPropertyCollection> represented by the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> property of the <xref:System.Configuration.ApplicationSettingsBase> class. This collection is then passed to the <xref:System.Configuration.SettingsBase.Initialize%2A> method.  \n  \n As implied by step 3 mentioned previously, <xref:System.Configuration.ApplicationSettingsBase> natively works with several property attributes, specifically the following: <xref:System.Configuration.SettingsProviderAttribute>, <xref:System.Configuration.DefaultSettingValueAttribute>, and <xref:System.Configuration.SettingsSerializeAsAttribute>. All other settings attributes are simply passed through to the appropriate underlying provider.","nodes":[{"pos":[0,216],"content":"The default constructor was designed to work under the assumption that there is no component associated with the current settings wrapper class, which derives from <xref:System.Configuration.ApplicationSettingsBase>.","nodes":[{"content":"The default constructor was designed to work under the assumption that there is no component associated with the current settings wrapper class, which derives from <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>.","pos":[0,216],"source":"The default constructor was designed to work under the assumption that there is no component associated with the current settings wrapper class, which derives from <xref:System.Configuration.ApplicationSettingsBase>."}]},{"pos":[223,335],"content":"When an instance of a wrapper class is created, inherited code will automatically perform the following actions:","nodes":[{"content":"When an instance of a wrapper class is created, inherited code will automatically perform the following actions:","pos":[0,112]}]},{"pos":[345,368],"content":"Reflect over the class.","nodes":[{"content":"Reflect over the class.","pos":[0,23]}]},{"pos":[378,575],"content":"For each property on the wrapper marked with either <ph id=\"ph1\">`[UserScopedSettingAttribute]`</ph> or <ph id=\"ph2\">`[ApplicationScopedSettingAttribute]`</ph>, a corresponding <ph id=\"ph3\">&lt;xref:System.Configuration.SettingsProperty&gt;</ph> is created.","source":"For each property on the wrapper marked with either `[UserScopedSettingAttribute]` or `[ApplicationScopedSettingAttribute]`, a corresponding <xref:System.Configuration.SettingsProperty> is created."},{"pos":[585,800],"content":"Each <xref:System.Configuration.SettingsProperty> has some of its properties set based on other attributes that are optionally present on the wrapper's properties, such as the default value or the settings provider.","nodes":[{"content":"Each <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProperty&gt;</ph> has some of its properties set based on other attributes that are optionally present on the wrapper's properties, such as the default value or the settings provider.","pos":[0,215],"source":"Each <xref:System.Configuration.SettingsProperty> has some of its properties set based on other attributes that are optionally present on the wrapper's properties, such as the default value or the settings provider."}]},{"pos":[810,999],"content":"All other attributes are simply put into an attribute bag, the <xref:System.Configuration.SettingsProperty.Attributes%2A> property of the <xref:System.Configuration.SettingsProperty> class.","nodes":[{"content":"All other attributes are simply put into an attribute bag, the <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProperty.Attributes%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Configuration.SettingsProperty&gt;</ph> class.","pos":[0,189],"source":"All other attributes are simply put into an attribute bag, the <xref:System.Configuration.SettingsProperty.Attributes%2A> property of the <xref:System.Configuration.SettingsProperty> class."}]},{"pos":[1009,1396],"content":"All <xref:System.Configuration.SettingsProperty> objects are added to a <xref:System.Configuration.SettingsPropertyCollection> represented by the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> property of the <xref:System.Configuration.ApplicationSettingsBase> class. This collection is then passed to the <xref:System.Configuration.SettingsBase.Initialize%2A> method.","nodes":[{"content":"All <xref:System.Configuration.SettingsProperty> objects are added to a <xref:System.Configuration.SettingsPropertyCollection> represented by the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> property of the <xref:System.Configuration.ApplicationSettingsBase> class. This collection is then passed to the <xref:System.Configuration.SettingsBase.Initialize%2A> method.","pos":[0,387],"nodes":[{"content":"All <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProperty&gt;</ph> objects are added to a <ph id=\"ph2\">&lt;xref:System.Configuration.SettingsPropertyCollection&gt;</ph> represented by the <ph id=\"ph3\">&lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt;</ph> property of the <ph id=\"ph4\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> class.","pos":[0,286],"source":"All <xref:System.Configuration.SettingsProperty> objects are added to a <xref:System.Configuration.SettingsPropertyCollection> represented by the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> property of the <xref:System.Configuration.ApplicationSettingsBase> class."},{"content":"This collection is then passed to the <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsBase.Initialize%2A&gt;</ph> method.","pos":[287,387],"source":" This collection is then passed to the <xref:System.Configuration.SettingsBase.Initialize%2A> method."}]}]},{"pos":[1403,1845],"content":"As implied by step 3 mentioned previously, <xref:System.Configuration.ApplicationSettingsBase> natively works with several property attributes, specifically the following: <xref:System.Configuration.SettingsProviderAttribute>, <xref:System.Configuration.DefaultSettingValueAttribute>, and <xref:System.Configuration.SettingsSerializeAsAttribute>. All other settings attributes are simply passed through to the appropriate underlying provider.","nodes":[{"content":"As implied by step 3 mentioned previously, <xref:System.Configuration.ApplicationSettingsBase> natively works with several property attributes, specifically the following: <xref:System.Configuration.SettingsProviderAttribute>, <xref:System.Configuration.DefaultSettingValueAttribute>, and <xref:System.Configuration.SettingsSerializeAsAttribute>. All other settings attributes are simply passed through to the appropriate underlying provider.","pos":[0,442],"nodes":[{"content":"As implied by step 3 mentioned previously, <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> natively works with several property attributes, specifically the following: <ph id=\"ph2\">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Configuration.DefaultSettingValueAttribute&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Configuration.SettingsSerializeAsAttribute&gt;</ph>.","pos":[0,346],"source":"As implied by step 3 mentioned previously, <xref:System.Configuration.ApplicationSettingsBase> natively works with several property attributes, specifically the following: <xref:System.Configuration.SettingsProviderAttribute>, <xref:System.Configuration.DefaultSettingValueAttribute>, and <xref:System.Configuration.SettingsSerializeAsAttribute>."},{"content":"All other settings attributes are simply passed through to the appropriate underlying provider.","pos":[347,442]}]}]}],"pos":[9561,11423],"yaml":true,"extradata":"MT"},{"content":"Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class using the supplied owner component.","nodes":[{"pos":[0,138],"content":"Initializes an instance of the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.ApplicationSettingsBase\"&gt;&lt;/xref&gt;</ph> class using the supplied owner component.","source":"Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class using the supplied owner component."}],"pos":[12841,12980],"yaml":true},{"content":"This constructor is exactly equivalent to the <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29> constructor using the invocation:  \n  \n `ApplicationSettingsBase(owner, String.Empty)`  \n  \n For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.","nodes":[{"pos":[0,193],"content":"This constructor is exactly equivalent to the <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29> constructor using the invocation:","nodes":[{"content":"This constructor is exactly equivalent to the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29&gt;</ph> constructor using the invocation:","pos":[0,193],"source":"This constructor is exactly equivalent to the <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29> constructor using the invocation:"}]},{"pos":[253,431],"content":"For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.","nodes":[{"content":"For information about how reflection is used during the instantiation of a wrapper class, see the default <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;</ph> constructor.","pos":[0,178],"source":"For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor."}]}],"pos":[12991,13429],"yaml":true,"extradata":"MT"},{"content":"The component that will act as the owner of the application settings object.","nodes":[{"pos":[0,76],"content":"The component that will act as the owner of the application settings object.","nodes":[{"content":"The component that will act as the owner of the application settings object.","pos":[0,76]}]}],"pos":[13624,13701],"yaml":true},{"content":"<code>owner</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>owner</code> is `null`."}],"pos":[13881,13911],"yaml":true},{"content":"Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class using the supplied settings key.","nodes":[{"pos":[0,135],"content":"Initializes an instance of the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.ApplicationSettingsBase\"&gt;&lt;/xref&gt;</ph> class using the supplied settings key.","source":"Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class using the supplied settings key."}],"pos":[15099,15235],"yaml":true},{"content":"This constructor initializes the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property to the value of the `settingsKey` parameter. This property is useful in disambiguating different instances of the settings wrapper class in the same application domain.  \n  \n For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.","nodes":[{"pos":[0,277],"content":"This constructor initializes the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property to the value of the `settingsKey` parameter. This property is useful in disambiguating different instances of the settings wrapper class in the same application domain.","nodes":[{"content":"This constructor initializes the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</ph> property to the value of the <ph id=\"ph2\">`settingsKey`</ph> parameter.","pos":[0,153],"source":"This constructor initializes the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property to the value of the `settingsKey` parameter."},{"content":"This property is useful in disambiguating different instances of the settings wrapper class in the same application domain.","pos":[154,277]}]},{"pos":[284,462],"content":"For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.","nodes":[{"content":"For information about how reflection is used during the instantiation of a wrapper class, see the default <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;</ph> constructor.","pos":[0,178],"source":"For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor."}]}],"pos":[15246,15713],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that uniquely identifies separate instances of the wrapper class.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that uniquely identifies separate instances of the wrapper class.","source":"A <xref href=\"System.String\"></xref> that uniquely identifies separate instances of the wrapper class."}],"pos":[15875,15978],"yaml":true},{"content":"Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class using the supplied owner component and settings key.","nodes":[{"pos":[0,155],"content":"Initializes an instance of the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.ApplicationSettingsBase\"&gt;&lt;/xref&gt;</ph> class using the supplied owner component and settings key.","source":"Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class using the supplied owner component and settings key."}],"pos":[17382,17538],"yaml":true},{"content":"The <xref:System.ComponentModel.IComponent> object specified by the `owner` parameter acts as the owner of the current instance of this applications settings class. During the initialization of the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>, the owner's site is queried for a <xref:System.Configuration.ISettingsProviderService>. If one exists, it is used in preference to native settings provider for all the properties of the wrapper class, as specified by the <xref:System.Configuration.SettingsProviderAttribute>.  \n  \n This constructor initializes the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property to the value of the `settingsKey` parameter. This property is useful in disambiguating different instances of the wrapper class in the same application domain.  \n  \n For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.","nodes":[{"pos":[0,562],"content":"The <xref:System.ComponentModel.IComponent> object specified by the `owner` parameter acts as the owner of the current instance of this applications settings class. During the initialization of the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>, the owner's site is queried for a <xref:System.Configuration.ISettingsProviderService>. If one exists, it is used in preference to native settings provider for all the properties of the wrapper class, as specified by the <xref:System.Configuration.SettingsProviderAttribute>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.IComponent&gt;</ph> object specified by the <ph id=\"ph2\">`owner`</ph> parameter acts as the owner of the current instance of this applications settings class.","pos":[0,164],"source":"The <xref:System.ComponentModel.IComponent> object specified by the `owner` parameter acts as the owner of the current instance of this applications settings class."},{"content":"During the initialization of the settings wrapper class derived from <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>, the owner's site is queried for a <ph id=\"ph2\">&lt;xref:System.Configuration.ISettingsProviderService&gt;</ph>.","pos":[165,374],"source":" During the initialization of the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>, the owner's site is queried for a <xref:System.Configuration.ISettingsProviderService>."},{"content":"If one exists, it is used in preference to native settings provider for all the properties of the wrapper class, as specified by the <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph>.","pos":[375,562],"source":" If one exists, it is used in preference to native settings provider for all the properties of the wrapper class, as specified by the <xref:System.Configuration.SettingsProviderAttribute>."}]},{"pos":[569,837],"content":"This constructor initializes the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property to the value of the `settingsKey` parameter. This property is useful in disambiguating different instances of the wrapper class in the same application domain.","nodes":[{"content":"This constructor initializes the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</ph> property to the value of the <ph id=\"ph2\">`settingsKey`</ph> parameter.","pos":[0,153],"source":"This constructor initializes the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property to the value of the `settingsKey` parameter."},{"content":"This property is useful in disambiguating different instances of the wrapper class in the same application domain.","pos":[154,268]}]},{"pos":[844,1022],"content":"For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.","nodes":[{"content":"For information about how reflection is used during the instantiation of a wrapper class, see the default <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor&gt;</ph> constructor.","pos":[0,178],"source":"For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor."}]}],"pos":[17549,18578],"yaml":true,"extradata":"MT"},{"content":"The component that will act as the owner of the application settings object.","nodes":[{"pos":[0,76],"content":"The component that will act as the owner of the application settings object.","nodes":[{"content":"The component that will act as the owner of the application settings object.","pos":[0,76]}]}],"pos":[18793,18870],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that uniquely identifies separate instances of the wrapper class.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that uniquely identifies separate instances of the wrapper class.","source":"A <xref href=\"System.String\"></xref> that uniquely identifies separate instances of the wrapper class."}],"pos":[18937,19040],"yaml":true},{"content":"<code>owner</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;owner&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>owner</code> is `null`."}],"pos":[19220,19250],"yaml":true},{"content":"Gets the application settings context associated with the settings group.","nodes":[{"pos":[0,73],"content":"Gets the application settings context associated with the settings group.","nodes":[{"content":"Gets the application settings context associated with the settings group.","pos":[0,73]}]}],"pos":[20322,20396],"yaml":true},{"content":"Each settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase> has a context associated with it. The context is passed to the settings provider for each property to identify how the property is used. Context therefore acts as a hint to help the settings provider determine how best to persist the associated application settings values.  \n  \n In contrast, the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property enables the settings provider to disambiguate multiple instances of the same wrapper class.","nodes":[{"pos":[0,366],"content":"Each settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase> has a context associated with it. The context is passed to the settings provider for each property to identify how the property is used. Context therefore acts as a hint to help the settings provider determine how best to persist the associated application settings values.","nodes":[{"content":"Each settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase> has a context associated with it. The context is passed to the settings provider for each property to identify how the property is used. Context therefore acts as a hint to help the settings provider determine how best to persist the associated application settings values.","pos":[0,366],"nodes":[{"content":"Each settings wrapper class derived from <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> has a context associated with it.","pos":[0,126],"source":"Each settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase> has a context associated with it."},{"content":"The context is passed to the settings provider for each property to identify how the property is used.","pos":[127,229]},{"content":"Context therefore acts as a hint to help the settings provider determine how best to persist the associated application settings values.","pos":[230,366]}]}]},{"pos":[373,557],"content":"In contrast, the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property enables the settings provider to disambiguate multiple instances of the same wrapper class.","nodes":[{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</ph> property enables the settings provider to disambiguate multiple instances of the same wrapper class.","pos":[0,184],"source":"In contrast, the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property enables the settings provider to disambiguate multiple instances of the same wrapper class."}]}],"pos":[20407,20969],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Configuration.SettingsContext\"></xref> associated with the settings group.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsContext\"&gt;&lt;/xref&gt;</ph> associated with the settings group.","source":"A <xref href=\"System.Configuration.SettingsContext\"></xref> associated with the settings group."}],"pos":[21199,21295],"yaml":true},{"content":"Returns the value of the named settings property for the previous version of the same application.","nodes":[{"pos":[0,98],"content":"Returns the value of the named settings property for the previous version of the same application.","nodes":[{"content":"Returns the value of the named settings property for the previous version of the same application.","pos":[0,98]}]}],"pos":[22648,22747],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method is often used in conjunction with the <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> method when migrating application settings during the installation of a new version of an application.","nodes":[{"pos":[0,288],"content":"The <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method is often used in conjunction with the <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> method when migrating application settings during the installation of a new version of an application.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A&gt;</ph> method is often used in conjunction with the <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A&gt;</ph> method when migrating application settings during the installation of a new version of an application.","pos":[0,288],"source":"The <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method is often used in conjunction with the <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> method when migrating application settings during the installation of a new version of an application."}]}],"pos":[22758,23047],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> containing the name of the settings property whose value is to be returned.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the name of the settings property whose value is to be returned.","source":"A <xref href=\"System.String\"></xref> containing the name of the settings property whose value is to be returned."}],"pos":[23210,23323],"yaml":true},{"content":"An <xref href=\"System.Object\"></xref> containing the value of the specified <xref href=\"System.Configuration.SettingsProperty\"></xref> if found; otherwise, `null`.","nodes":[{"pos":[0,163],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> containing the value of the specified <ph id=\"ph2\">&lt;xref href=\"System.Configuration.SettingsProperty\"&gt;&lt;/xref&gt;</ph> if found; otherwise, <ph id=\"ph3\">`null`</ph>.","source":"An <xref href=\"System.Object\"></xref> containing the value of the specified <xref href=\"System.Configuration.SettingsProperty\"></xref> if found; otherwise, `null`."}],"pos":[23380,23544],"yaml":true},{"content":"The property does not exist. The property count is zero or the property cannot be found in the data store.","nodes":[{"pos":[0,106],"content":"The property does not exist. The property count is zero or the property cannot be found in the data store.","nodes":[{"content":"The property does not exist. The property count is zero or the property cannot be found in the data store.","pos":[0,106],"nodes":[{"content":"The property does not exist.","pos":[0,28]},{"content":"The property count is zero or the property cannot be found in the data store.","pos":[29,106]}]}]}],"pos":[23789,23896],"yaml":true},{"content":"Gets or sets the value of the specified application settings property.","nodes":[{"pos":[0,70],"content":"Gets or sets the value of the specified application settings property.","nodes":[{"content":"Gets or sets the value of the specified application settings property.","pos":[0,70]}]}],"pos":[25019,25090],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.Item%2A> property, also known as the indexer, is routinely used in the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>. <xref:System.Configuration.ApplicationSettingsBase.Item%2A> binds the public property of the wrapper class to the corresponding settings property.  \n  \n <xref:System.Configuration.ApplicationSettingsBase.Item%2A> raises several events depending on the operation being performed:  \n  \n-   The first time a property is retrieved, the <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> event is raised.  \n  \n-   When a property is set, the <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> event is raised. If the handler does not cancel the event, then the property value is set and the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event is raised.","nodes":[{"pos":[0,361],"content":"The <xref:System.Configuration.ApplicationSettingsBase.Item%2A> property, also known as the indexer, is routinely used in the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>. <xref:System.Configuration.ApplicationSettingsBase.Item%2A> binds the public property of the wrapper class to the corresponding settings property.","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase.Item%2A> property, also known as the indexer, is routinely used in the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>. <xref:System.Configuration.ApplicationSettingsBase.Item%2A> binds the public property of the wrapper class to the corresponding settings property.","pos":[0,361],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</ph> property, also known as the indexer, is routinely used in the settings wrapper class derived from <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>.","pos":[0,214],"source":"The <xref:System.Configuration.ApplicationSettingsBase.Item%2A> property, also known as the indexer, is routinely used in the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</ph> binds the public property of the wrapper class to the corresponding settings property.","pos":[215,361],"source":" <xref:System.Configuration.ApplicationSettingsBase.Item%2A> binds the public property of the wrapper class to the corresponding settings property."}]}]},{"pos":[368,493],"content":"<xref:System.Configuration.ApplicationSettingsBase.Item%2A> raises several events depending on the operation being performed:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</ph> raises several events depending on the operation being performed:","pos":[0,125],"source":"<xref:System.Configuration.ApplicationSettingsBase.Item%2A> raises several events depending on the operation being performed:"}]},{"pos":[503,630],"content":"The first time a property is retrieved, the <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> event is raised.","nodes":[{"content":"The first time a property is retrieved, the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded&gt;</ph> event is raised.","pos":[0,127],"source":"The first time a property is retrieved, the <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> event is raised."}]},{"pos":[640,923],"content":"When a property is set, the <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> event is raised. If the handler does not cancel the event, then the property value is set and the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event is raised.","nodes":[{"content":"When a property is set, the <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> event is raised. If the handler does not cancel the event, then the property value is set and the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event is raised.","pos":[0,283],"nodes":[{"content":"When a property is set, the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A&gt;</ph> event is raised.","pos":[0,117],"source":"When a property is set, the <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> event is raised."},{"content":"If the handler does not cancel the event, then the property value is set and the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;</ph> event is raised.","pos":[118,283],"source":" If the handler does not cancel the event, then the property value is set and the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event is raised."}]}]}],"pos":[25101,26033],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> containing the name of the property to access.","nodes":[{"pos":[0,83],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the name of the property to access.","source":"A <xref href=\"System.String\"></xref> containing the name of the property to access."}],"pos":[26237,26321],"yaml":true},{"content":"If found, the value of the named settings property; otherwise, `null`.","nodes":[{"pos":[0,70],"content":"If found, the value of the named settings property; otherwise, <ph id=\"ph1\">`null`</ph>.","source":"If found, the value of the named settings property; otherwise, `null`."}],"pos":[26378,26449],"yaml":true},{"content":"There are no properties associated with the current wrapper or the specified property could not be found.","nodes":[{"pos":[0,105],"content":"There are no properties associated with the current wrapper or the specified property could not be found.","nodes":[{"content":"There are no properties associated with the current wrapper or the specified property could not be found.","pos":[0,105]}]}],"pos":[26680,26786],"yaml":true},{"content":"An attempt was made to set a read-only property.","nodes":[{"pos":[0,48],"content":"An attempt was made to set a read-only property.","nodes":[{"content":"An attempt was made to set a read-only property.","pos":[0,48]}]}],"pos":[26944,26993],"yaml":true},{"content":"The value supplied is of a type incompatible with the settings property, during a set operation.","nodes":[{"pos":[0,96],"content":"The value supplied is of a type incompatible with the settings property, during a set operation.","nodes":[{"content":"The value supplied is of a type incompatible with the settings property, during a set operation.","pos":[0,96]}]}],"pos":[27149,27246],"yaml":true},{"content":"The configuration file could not be parsed.","nodes":[{"pos":[0,43],"content":"The configuration file could not be parsed.","nodes":[{"content":"The configuration file could not be parsed.","pos":[0,43]}]}],"pos":[27390,27434],"yaml":true},{"content":"Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.PropertyChanged\"></xref> event.","nodes":[{"pos":[0,99],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.ApplicationSettingsBase.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.PropertyChanged\"></xref> event."}],"pos":[28892,28992],"yaml":true},{"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Configuration.ApplicationSettingsBase.OnPropertyChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,183],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[190,426],"content":"The <xref:System.Configuration.ApplicationSettingsBase.OnPropertyChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase.OnPropertyChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,236],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.OnPropertyChanged%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,161],"source":"The <xref:System.Configuration.ApplicationSettingsBase.OnPropertyChanged%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[162,236]}]}]}],"pos":[29003,29434],"yaml":true,"extradata":"MT"},{"content":"The source of the event.","nodes":[{"pos":[0,24],"content":"The source of the event.","nodes":[{"content":"The source of the event.","pos":[0,24]}]}],"pos":[29643,29668],"yaml":true},{"content":"A <xref href=\"System.ComponentModel.PropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,99],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.PropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.ComponentModel.PropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[29758,29858],"yaml":true},{"content":"Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.SettingChanging\"></xref> event.","nodes":[{"pos":[0,99],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.ApplicationSettingsBase.SettingChanging\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.SettingChanging\"></xref> event."}],"pos":[31366,31466],"yaml":true},{"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,183],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[190,426],"content":"The <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,236],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,161],"source":"The <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[162,236]}]}]}],"pos":[31477,31908],"yaml":true,"extradata":"MT"},{"content":"The source of the event.","nodes":[{"pos":[0,24],"content":"The source of the event.","nodes":[{"content":"The source of the event.","pos":[0,24]}]}],"pos":[32116,32141],"yaml":true},{"content":"A <xref href=\"System.Configuration.SettingChangingEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,98],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingChangingEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Configuration.SettingChangingEventArgs\"></xref> that contains the event data."}],"pos":[32230,32329],"yaml":true},{"content":"Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.SettingsLoaded\"></xref> event.","nodes":[{"pos":[0,98],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.ApplicationSettingsBase.SettingsLoaded\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.SettingsLoaded\"></xref> event."}],"pos":[33825,33924],"yaml":true},{"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,183],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[190,425],"content":"The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,235],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,160],"source":"The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[161,235]}]}]}],"pos":[33935,34365],"yaml":true,"extradata":"MT"},{"content":"The source of the event.","nodes":[{"pos":[0,24],"content":"The source of the event.","nodes":[{"content":"The source of the event.","pos":[0,24]}]}],"pos":[34571,34596],"yaml":true},{"content":"A <xref href=\"System.Configuration.SettingsLoadedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,97],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsLoadedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Configuration.SettingsLoadedEventArgs\"></xref> that contains the event data."}],"pos":[34684,34782],"yaml":true},{"content":"Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.SettingsSaving\"></xref> event.","nodes":[{"pos":[0,98],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.ApplicationSettingsBase.SettingsSaving\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.SettingsSaving\"></xref> event."}],"pos":[36232,36331],"yaml":true},{"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \n  \n The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsSaving%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"pos":[0,183],"content":"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).","nodes":[{"content":"Raising an event invokes the event handler through a delegate.","pos":[0,62]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>NIB: Raising an Event<ept id=\"p1\">](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)</ept>.","pos":[63,183],"source":" For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)."}]},{"pos":[190,425],"content":"The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsSaving%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsSaving%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.","pos":[0,235],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.OnSettingsSaving%2A&gt;</ph> method also allows derived classes to handle the event without attaching a delegate.","pos":[0,160],"source":"The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsSaving%2A> method also allows derived classes to handle the event without attaching a delegate."},{"content":"This is the preferred technique for handling the event in a derived class.","pos":[161,235]}]}]}],"pos":[36342,36772],"yaml":true,"extradata":"MT"},{"content":"The source of the event.","nodes":[{"pos":[0,24],"content":"The source of the event.","nodes":[{"content":"The source of the event.","pos":[0,24]}]}],"pos":[36971,36996],"yaml":true},{"content":"A <xref href=\"System.ComponentModel.CancelEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.CancelEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.ComponentModel.CancelEventArgs\"></xref> that contains the event data."}],"pos":[37077,37168],"yaml":true},{"content":"Gets the collection of settings properties in the wrapper.","nodes":[{"pos":[0,58],"content":"Gets the collection of settings properties in the wrapper.","nodes":[{"content":"Gets the collection of settings properties in the wrapper.","pos":[0,58]}]}],"pos":[38350,38409],"yaml":true},{"content":"The `get` accessor of the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> property reflects over the metadata of the settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, to dynamically determine the set of available application settings properties.  \n  \n The <xref:System.Configuration.ApplicationSettingsBase> class natively recognizes certain characteristics of an application setting, such as its name, property type, settings provider, default value, read only status, and a serialization preference. These characteristics are mirrored as properties in the <xref:System.Configuration.SettingsProperty> class. All other attributes of the settings property are just passed through to its associated settings provider.","nodes":[{"pos":[0,312],"content":"The <ph id=\"ph1\">`get`</ph> accessor of the <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt;</ph> property reflects over the metadata of the settings wrapper class, which is derived from <ph id=\"ph3\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph>, to dynamically determine the set of available application settings properties.","source":"The `get` accessor of the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> property reflects over the metadata of the settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, to dynamically determine the set of available application settings properties."},{"pos":[319,783],"content":"The <xref:System.Configuration.ApplicationSettingsBase> class natively recognizes certain characteristics of an application setting, such as its name, property type, settings provider, default value, read only status, and a serialization preference. These characteristics are mirrored as properties in the <xref:System.Configuration.SettingsProperty> class. All other attributes of the settings property are just passed through to its associated settings provider.","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase> class natively recognizes certain characteristics of an application setting, such as its name, property type, settings provider, default value, read only status, and a serialization preference. These characteristics are mirrored as properties in the <xref:System.Configuration.SettingsProperty> class. All other attributes of the settings property are just passed through to its associated settings provider.","pos":[0,464],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> class natively recognizes certain characteristics of an application setting, such as its name, property type, settings provider, default value, read only status, and a serialization preference.","pos":[0,249],"source":"The <xref:System.Configuration.ApplicationSettingsBase> class natively recognizes certain characteristics of an application setting, such as its name, property type, settings provider, default value, read only status, and a serialization preference."},{"content":"These characteristics are mirrored as properties in the <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProperty&gt;</ph> class.","pos":[250,357],"source":" These characteristics are mirrored as properties in the <xref:System.Configuration.SettingsProperty> class."},{"content":"All other attributes of the settings property are just passed through to its associated settings provider.","pos":[358,464]}]}]}],"pos":[38420,39208],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Configuration.SettingsPropertyCollection\"></xref> containing all the <xref href=\"System.Configuration.SettingsProperty\"></xref> objects used in the current wrapper.","nodes":[{"pos":[0,185],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsPropertyCollection\"&gt;&lt;/xref&gt;</ph> containing all the <ph id=\"ph2\">&lt;xref href=\"System.Configuration.SettingsProperty\"&gt;&lt;/xref&gt;</ph> objects used in the current wrapper.","source":"A <xref href=\"System.Configuration.SettingsPropertyCollection\"></xref> containing all the <xref href=\"System.Configuration.SettingsProperty\"></xref> objects used in the current wrapper."}],"pos":[39463,39649],"yaml":true},{"content":"The associated settings provider could not be found or its instantiation failed.","nodes":[{"pos":[0,80],"content":"The associated settings provider could not be found or its instantiation failed.","nodes":[{"content":"The associated settings provider could not be found or its instantiation failed.","pos":[0,80]}]}],"pos":[39876,39957],"yaml":true},{"content":"Occurs after the value of an application settings property is changed.","nodes":[{"pos":[0,70],"content":"Occurs after the value of an application settings property is changed.","nodes":[{"content":"Occurs after the value of an application settings property is changed.","pos":[0,70]}]}],"pos":[41139,41210],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event is raised when a settings property is changed through the `set` accessor of the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method, or for every property that is restored when a call is made to the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> or <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> methods.  \n  \n There is no corresponding `PropertyChanging` event for this class; instead, see the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event.","nodes":[{"pos":[0,426],"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;</ph> event is raised when a settings property is changed through the <ph id=\"ph2\">`set`</ph> accessor of the <ph id=\"ph3\">&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</ph> method, or for every property that is restored when a call is made to the <ph id=\"ph4\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</ph> methods.","source":"The <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event is raised when a settings property is changed through the `set` accessor of the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method, or for every property that is restored when a call is made to the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> or <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> methods."},{"pos":[433,591],"content":"There is no corresponding <ph id=\"ph1\">`PropertyChanging`</ph> event for this class; instead, see the <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt;</ph> event.","source":"There is no corresponding `PropertyChanging` event for this class; instead, see the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event."}],"pos":[41221,41817],"yaml":true,"extradata":"MT"},{"content":"Gets a collection of property values.","nodes":[{"pos":[0,37],"content":"Gets a collection of property values.","nodes":[{"content":"Gets a collection of property values.","pos":[0,37]}]}],"pos":[43147,43185],"yaml":true},{"content":"A <xref href=\"System.Configuration.SettingsPropertyValueCollection\"></xref> of property values.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsPropertyValueCollection\"&gt;&lt;/xref&gt;</ph> of property values.","source":"A <xref href=\"System.Configuration.SettingsPropertyValueCollection\"></xref> of property values."}],"pos":[43454,43550],"yaml":true},{"content":"Gets the collection of application settings providers used by the wrapper.","nodes":[{"pos":[0,74],"content":"Gets the collection of application settings providers used by the wrapper.","nodes":[{"content":"Gets the collection of application settings providers used by the wrapper.","pos":[0,74]}]}],"pos":[44789,44864],"yaml":true},{"content":"The <xref:System.Configuration.SettingsProviderAttribute> determines what setting provider is used by a settings wrapper class or an individual setting property. If this attribute is not specified, a client application will use the <xref:System.Configuration.LocalFileSettingsProvider>.","nodes":[{"pos":[0,286],"content":"The <xref:System.Configuration.SettingsProviderAttribute> determines what setting provider is used by a settings wrapper class or an individual setting property. If this attribute is not specified, a client application will use the <xref:System.Configuration.LocalFileSettingsProvider>.","nodes":[{"content":"The <xref:System.Configuration.SettingsProviderAttribute> determines what setting provider is used by a settings wrapper class or an individual setting property. If this attribute is not specified, a client application will use the <xref:System.Configuration.LocalFileSettingsProvider>.","pos":[0,286],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProviderAttribute&gt;</ph> determines what setting provider is used by a settings wrapper class or an individual setting property.","pos":[0,161],"source":"The <xref:System.Configuration.SettingsProviderAttribute> determines what setting provider is used by a settings wrapper class or an individual setting property."},{"content":"If this attribute is not specified, a client application will use the <ph id=\"ph1\">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph>.","pos":[162,286],"source":" If this attribute is not specified, a client application will use the <xref:System.Configuration.LocalFileSettingsProvider>."}]}]}],"pos":[44875,45162],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Configuration.SettingsProviderCollection\"></xref> containing all the <xref href=\"System.Configuration.SettingsProvider\"></xref> objects used by the settings properties of the current settings wrapper.","nodes":[{"pos":[0,221],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Configuration.SettingsProviderCollection\"&gt;&lt;/xref&gt;</ph> containing all the <ph id=\"ph2\">&lt;xref href=\"System.Configuration.SettingsProvider\"&gt;&lt;/xref&gt;</ph> objects used by the settings properties of the current settings wrapper.","source":"A <xref href=\"System.Configuration.SettingsProviderCollection\"></xref> containing all the <xref href=\"System.Configuration.SettingsProvider\"></xref> objects used by the settings properties of the current settings wrapper."}],"pos":[45416,45638],"yaml":true},{"content":"Refreshes the application settings property values from persistent storage.","nodes":[{"pos":[0,75],"content":"Refreshes the application settings property values from persistent storage.","nodes":[{"content":"Refreshes the application settings property values from persistent storage.","pos":[0,75]}]}],"pos":[46858,46934],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method clears the currently cached property values, causing a reload of these values from persistent storage when they are subsequently accessed. This method performs the following actions:  \n  \n-   It clears the currently cached properties by clearing the collection represented by the <xref:System.Configuration.SettingsBase.PropertyValues%2A> property.  \n  \n-   It raises the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event for every member of the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> collection.  \n  \n <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contrasts with <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.","nodes":[{"pos":[0,255],"content":"The <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method clears the currently cached property values, causing a reload of these values from persistent storage when they are subsequently accessed. This method performs the following actions:","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method clears the currently cached property values, causing a reload of these values from persistent storage when they are subsequently accessed. This method performs the following actions:","pos":[0,255],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> method clears the currently cached property values, causing a reload of these values from persistent storage when they are subsequently accessed.","pos":[0,211],"source":"The <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method clears the currently cached property values, causing a reload of these values from persistent storage when they are subsequently accessed."},{"content":"This method performs the following actions:","pos":[212,255]}]}]},{"pos":[265,421],"content":"It clears the currently cached properties by clearing the collection represented by the <xref:System.Configuration.SettingsBase.PropertyValues%2A> property.","nodes":[{"content":"It clears the currently cached properties by clearing the collection represented by the <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsBase.PropertyValues%2A&gt;</ph> property.","pos":[0,156],"source":"It clears the currently cached properties by clearing the collection represented by the <xref:System.Configuration.SettingsBase.PropertyValues%2A> property."}]},{"pos":[431,620],"content":"It raises the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event for every member of the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> collection.","nodes":[{"content":"It raises the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;</ph> event for every member of the <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Properties%2A&gt;</ph> collection.","pos":[0,189],"source":"It raises the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event for every member of the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> collection."}]},{"pos":[627,899],"content":"<xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contrasts with <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> contrasts with <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</ph> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.","pos":[0,272],"source":"<xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contrasts with <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values."}]}],"pos":[46945,47853],"yaml":true,"extradata":"MT"},{"content":"Restores the persisted application settings values to their corresponding default properties.","nodes":[{"pos":[0,93],"content":"Restores the persisted application settings values to their corresponding default properties.","nodes":[{"content":"Restores the persisted application settings values to their corresponding default properties.","pos":[0,93]}]}],"pos":[49929,50023],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method overwrites the user-scoped settings properties by restoring the currently persisted value of each application settings. This method performs the following actions:  \n  \n-   It calls the <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName> method on every settings provider that supports this optional method.  \n  \n-   It calls the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method to force a refresh of the settings property values.  \n  \n <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contrasts with <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.","nodes":[{"pos":[0,235],"content":"The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method overwrites the user-scoped settings properties by restoring the currently persisted value of each application settings. This method performs the following actions:","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method overwrites the user-scoped settings properties by restoring the currently persisted value of each application settings. This method performs the following actions:","pos":[0,235],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</ph> method overwrites the user-scoped settings properties by restoring the currently persisted value of each application settings.","pos":[0,191],"source":"The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method overwrites the user-scoped settings properties by restoring the currently persisted value of each application settings."},{"content":"This method performs the following actions:","pos":[192,235]}]}]},{"pos":[245,418],"content":"It calls the <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName> method on every settings provider that supports this optional method.","nodes":[{"content":"It calls the <ph id=\"ph1\">&lt;xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName&gt;</ph> method on every settings provider that supports this optional method.","pos":[0,173],"source":"It calls the <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName> method on every settings provider that supports this optional method."}]},{"pos":[428,561],"content":"It calls the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method to force a refresh of the settings property values.","nodes":[{"content":"It calls the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> method to force a refresh of the settings property values.","pos":[0,133],"source":"It calls the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method to force a refresh of the settings property values."}]},{"pos":[568,840],"content":"<xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contrasts with <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> contrasts with <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</ph> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.","pos":[0,272],"source":"<xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contrasts with <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values."}]}],"pos":[50034,50883],"yaml":true,"extradata":"MT"},{"content":"The configuration file could not be parsed.","nodes":[{"pos":[0,43],"content":"The configuration file could not be parsed.","nodes":[{"content":"The configuration file could not be parsed.","pos":[0,43]}]}],"pos":[52030,52074],"yaml":true},{"content":"Stores the current values of the application settings properties.","nodes":[{"pos":[0,65],"content":"Stores the current values of the application settings properties.","nodes":[{"content":"Stores the current values of the application settings properties.","pos":[0,65]}]}],"pos":[53132,53198],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method writes the current value of each settings property to its associated data store. For each property, this method calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method on the associated settings provider.  \n  \n This method differs from the base class implementation in that it raises the <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event before the values are written.  \n  \n If the only settings defined are application-scoped settings, <xref:System.Configuration.ApplicationSettingsBase.Save%2A> will have no effect and return no error if called with the default <xref:System.Configuration.LocalFileSettingsProvider>. <xref:System.Configuration.LocalFileSettingsProvider> only saves user-scoped settings.  \n  \n> [!IMPORTANT]\n>  There is no corresponding Load method because the values of application settings are automatically loaded during wrapper class initialization. In contrast, these values are not automatically saved when an application ends. Therefore, you must explicitly call the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method to persist the current values of the application settings. This is typically performed in the <xref:System.Windows.Forms.Form.Closing> event handler of the primary or containing <xref:System.Windows.Forms.Form>.","nodes":[{"pos":[0,302],"content":"The <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method writes the current value of each settings property to its associated data store. For each property, this method calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method on the associated settings provider.","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method writes the current value of each settings property to its associated data store. For each property, this method calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method on the associated settings provider.","pos":[0,302],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</ph> method writes the current value of each settings property to its associated data store.","pos":[0,151],"source":"The <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method writes the current value of each settings property to its associated data store."},{"content":"For each property, this method calls the <ph id=\"ph1\">&lt;xref:System.Configuration.SettingsProvider.SetPropertyValues%2A&gt;</ph> method on the associated settings provider.","pos":[152,302],"source":" For each property, this method calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method on the associated settings provider."}]}]},{"pos":[309,489],"content":"This method differs from the base class implementation in that it raises the <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event before the values are written.","nodes":[{"content":"This method differs from the base class implementation in that it raises the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsSaving&gt;</ph> event before the values are written.","pos":[0,180],"source":"This method differs from the base class implementation in that it raises the <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event before the values are written."}]},{"pos":[496,826],"content":"If the only settings defined are application-scoped settings, <xref:System.Configuration.ApplicationSettingsBase.Save%2A> will have no effect and return no error if called with the default <xref:System.Configuration.LocalFileSettingsProvider>. <xref:System.Configuration.LocalFileSettingsProvider> only saves user-scoped settings.","nodes":[{"content":"If the only settings defined are application-scoped settings, <xref:System.Configuration.ApplicationSettingsBase.Save%2A> will have no effect and return no error if called with the default <xref:System.Configuration.LocalFileSettingsProvider>. <xref:System.Configuration.LocalFileSettingsProvider> only saves user-scoped settings.","pos":[0,330],"nodes":[{"content":"If the only settings defined are application-scoped settings, <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</ph> will have no effect and return no error if called with the default <ph id=\"ph2\">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph>.","pos":[0,243],"source":"If the only settings defined are application-scoped settings, <xref:System.Configuration.ApplicationSettingsBase.Save%2A> will have no effect and return no error if called with the default <xref:System.Configuration.LocalFileSettingsProvider>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Configuration.LocalFileSettingsProvider&gt;</ph> only saves user-scoped settings.","pos":[244,330],"source":" <xref:System.Configuration.LocalFileSettingsProvider> only saves user-scoped settings."}]}]},{"pos":[834,1391],"content":"[!IMPORTANT]\n There is no corresponding Load method because the values of application settings are automatically loaded during wrapper class initialization. In contrast, these values are not automatically saved when an application ends. Therefore, you must explicitly call the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method to persist the current values of the application settings. This is typically performed in the <xref:System.Windows.Forms.Form.Closing> event handler of the primary or containing <xref:System.Windows.Forms.Form>.","leadings":["","> "],"nodes":[{"content":" There is no corresponding Load method because the values of application settings are automatically loaded during wrapper class initialization. In contrast, these values are not automatically saved when an application ends. Therefore, you must explicitly call the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method to persist the current values of the application settings. This is typically performed in the <xref:System.Windows.Forms.Form.Closing> event handler of the primary or containing <xref:System.Windows.Forms.Form>.","pos":[13,555],"nodes":[{"content":"There is no corresponding Load method because the values of application settings are automatically loaded during wrapper class initialization.","pos":[1,143]},{"content":"In contrast, these values are not automatically saved when an application ends.","pos":[144,223]},{"content":"Therefore, you must explicitly call the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</ph> method to persist the current values of the application settings.","pos":[224,389],"source":" Therefore, you must explicitly call the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method to persist the current values of the application settings."},{"content":"This is typically performed in the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Form.Closing&gt;</ph> event handler of the primary or containing <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Form&gt;</ph>.","pos":[390,542],"source":" This is typically performed in the <xref:System.Windows.Forms.Form.Closing> event handler of the primary or containing <xref:System.Windows.Forms.Form>."}]}]}],"pos":[53209,54610],"yaml":true,"extradata":"MT"},{"content":"Occurs before the value of an application settings property is changed.","nodes":[{"pos":[0,71],"content":"Occurs before the value of an application settings property is changed.","nodes":[{"content":"Occurs before the value of an application settings property is changed.","pos":[0,71]}]}],"pos":[56750,56822],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event occurs before an application setting value property is changed through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method. This event is not raised when the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> or <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> methods are called. <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> can be canceled through the <xref:System.Configuration.SettingChangingEventArgs> event data class.  \n  \n You typically use the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event to handle immediate validation of an individual settings property. For more information about validation, see [How to: Validate Application Settings](~/docs/framework/winforms/advanced/how-to-validate-application-settings.md).  \n  \n There is no corresponding `SettingChanged` event for this class; instead, see the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event.","nodes":[{"pos":[0,567],"content":"The <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event occurs before an application setting value property is changed through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method. This event is not raised when the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> or <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> methods are called. <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> can be canceled through the <xref:System.Configuration.SettingChangingEventArgs> event data class.","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event occurs before an application setting value property is changed through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method. This event is not raised when the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> or <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> methods are called. <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> can be canceled through the <xref:System.Configuration.SettingChangingEventArgs> event data class.","pos":[0,567],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt;</ph> event occurs before an application setting value property is changed through the <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</ph> method.","pos":[0,220],"source":"The <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event occurs before an application setting value property is changed through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method."},{"content":"This event is not raised when the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</ph> methods are called.","pos":[221,400],"source":" This event is not raised when the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> or <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> methods are called."},{"content":"<ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt;</ph> can be canceled through the <ph id=\"ph2\">&lt;xref:System.Configuration.SettingChangingEventArgs&gt;</ph> event data class.","pos":[401,567],"source":" <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> can be canceled through the <xref:System.Configuration.SettingChangingEventArgs> event data class."}]}]},{"pos":[574,896],"content":"You typically use the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event to handle immediate validation of an individual settings property. For more information about validation, see [How to: Validate Application Settings](~/docs/framework/winforms/advanced/how-to-validate-application-settings.md).","nodes":[{"content":"You typically use the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt;</ph> event to handle immediate validation of an individual settings property.","pos":[0,162],"source":"You typically use the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event to handle immediate validation of an individual settings property."},{"content":"For more information about validation, see <bpt id=\"p1\">[</bpt>How to: Validate Application Settings<ept id=\"p1\">](~/docs/framework/winforms/advanced/how-to-validate-application-settings.md)</ept>.","pos":[163,322],"source":" For more information about validation, see [How to: Validate Application Settings](~/docs/framework/winforms/advanced/how-to-validate-application-settings.md)."}]},{"pos":[903,1059],"content":"There is no corresponding <ph id=\"ph1\">`SettingChanged`</ph> event for this class; instead, see the <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.PropertyChanged&gt;</ph> event.","source":"There is no corresponding `SettingChanged` event for this class; instead, see the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event."}],"pos":[56833,57899],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the settings key for the application settings group.","nodes":[{"pos":[0,65],"content":"Gets or sets the settings key for the application settings group.","nodes":[{"content":"Gets or sets the settings key for the application settings group.","pos":[0,65]}]}],"pos":[60033,60099],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property is provided to enable client code, and in particular the settings provider, to disambiguate between multiple instances of the same application settings class.  \n  \n Unless the settings wrapper class is designed using the singleton pattern, there can be multiple instances of the same application settings class in a single application. The value of <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should be set according to how the property values are intended to be shared.  \n  \n-   If the settings properties of the wrapper are intended to be shared across all instances of the wrapper in the same application, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have the same value in all of the instances. This is the default behavior of the <xref:System.Configuration.ApplicationSettingsBase> class.  \n  \n-   If the settings properties of the wrapper are intended to be per instance, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have a unique value for every instance. The <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29> version of the constructor enables you to initialize <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> to a unique string.  \n  \n In contrast, the <xref:System.Configuration.ApplicationSettingsBase.Context%2A> property provides hints to the settings provider to enable it to persist values in an efficient and orderly manner.  \n  \n The <xref:System.Configuration.SettingChangingEventArgs> class contains a similar <xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A> property that helps identify the source of the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event.","nodes":[{"pos":[0,238],"content":"The <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property is provided to enable client code, and in particular the settings provider, to disambiguate between multiple instances of the same application settings class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</ph> property is provided to enable client code, and in particular the settings provider, to disambiguate between multiple instances of the same application settings class.","pos":[0,238],"source":"The <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property is provided to enable client code, and in particular the settings provider, to disambiguate between multiple instances of the same application settings class."}]},{"pos":[245,573],"content":"Unless the settings wrapper class is designed using the singleton pattern, there can be multiple instances of the same application settings class in a single application. The value of <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should be set according to how the property values are intended to be shared.","nodes":[{"content":"Unless the settings wrapper class is designed using the singleton pattern, there can be multiple instances of the same application settings class in a single application. The value of <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should be set according to how the property values are intended to be shared.","pos":[0,328],"nodes":[{"content":"Unless the settings wrapper class is designed using the singleton pattern, there can be multiple instances of the same application settings class in a single application.","pos":[0,170]},{"content":"The value of <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</ph> should be set according to how the property values are intended to be shared.","pos":[171,328],"source":" The value of <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should be set according to how the property values are intended to be shared."}]}]},{"pos":[583,930],"content":"If the settings properties of the wrapper are intended to be shared across all instances of the wrapper in the same application, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have the same value in all of the instances. This is the default behavior of the <xref:System.Configuration.ApplicationSettingsBase> class.","nodes":[{"content":"If the settings properties of the wrapper are intended to be shared across all instances of the wrapper in the same application, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have the same value in all of the instances. This is the default behavior of the <xref:System.Configuration.ApplicationSettingsBase> class.","pos":[0,347],"nodes":[{"content":"If the settings properties of the wrapper are intended to be shared across all instances of the wrapper in the same application, then <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</ph> should have the same value in all of the instances.","pos":[0,252],"source":"If the settings properties of the wrapper are intended to be shared across all instances of the wrapper in the same application, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have the same value in all of the instances."},{"content":"This is the default behavior of the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase&gt;</ph> class.","pos":[253,347],"source":" This is the default behavior of the <xref:System.Configuration.ApplicationSettingsBase> class."}]}]},{"pos":[940,1356],"content":"If the settings properties of the wrapper are intended to be per instance, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have a unique value for every instance. The <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29> version of the constructor enables you to initialize <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> to a unique string.","nodes":[{"content":"If the settings properties of the wrapper are intended to be per instance, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have a unique value for every instance. The <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29> version of the constructor enables you to initialize <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> to a unique string.","pos":[0,416],"nodes":[{"content":"If the settings properties of the wrapper are intended to be per instance, then <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</ph> should have a unique value for every instance.","pos":[0,193],"source":"If the settings properties of the wrapper are intended to be per instance, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have a unique value for every instance."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29&gt;</ph> version of the constructor enables you to initialize <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A&gt;</ph> to a unique string.","pos":[194,416],"source":" The <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29> version of the constructor enables you to initialize <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> to a unique string."}]}]},{"pos":[1363,1558],"content":"In contrast, the <xref:System.Configuration.ApplicationSettingsBase.Context%2A> property provides hints to the settings provider to enable it to persist values in an efficient and orderly manner.","nodes":[{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Context%2A&gt;</ph> property provides hints to the settings provider to enable it to persist values in an efficient and orderly manner.","pos":[0,195],"source":"In contrast, the <xref:System.Configuration.ApplicationSettingsBase.Context%2A> property provides hints to the settings provider to enable it to persist values in an efficient and orderly manner."}]},{"pos":[1565,1835],"content":"The <xref:System.Configuration.SettingChangingEventArgs> class contains a similar <xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A> property that helps identify the source of the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.SettingChangingEventArgs&gt;</ph> class contains a similar <ph id=\"ph2\">&lt;xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A&gt;</ph> property that helps identify the source of the <ph id=\"ph3\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingChanging&gt;</ph> event.","pos":[0,270],"source":"The <xref:System.Configuration.SettingChangingEventArgs> class contains a similar <xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A> property that helps identify the source of the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event."}]}],"pos":[60110,61958],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> containing the settings key for the current settings group.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the settings key for the current settings group.","source":"A <xref href=\"System.String\"></xref> containing the settings key for the current settings group."}],"pos":[62135,62232],"yaml":true},{"content":"Occurs after the application settings are retrieved from storage.","nodes":[{"pos":[0,65],"content":"Occurs after the application settings are retrieved from storage.","nodes":[{"content":"Occurs after the application settings are retrieved from storage.","pos":[0,65]}]}],"pos":[63495,63561],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> event occurs only after the initial `get` access of the first configuration property used, typically through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method. Subsequent accesses use values for the settings property that are cached locally. The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> and <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods will clear all cached values so this event will be raised again upon subsequent property access.","nodes":[{"pos":[0,569],"content":"The <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> event occurs only after the initial `get` access of the first configuration property used, typically through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method. Subsequent accesses use values for the settings property that are cached locally. The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> and <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods will clear all cached values so this event will be raised again upon subsequent property access.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded&gt;</ph> event occurs only after the initial <ph id=\"ph2\">`get`</ph> access of the first configuration property used, typically through the <ph id=\"ph3\">&lt;xref:System.Configuration.ApplicationSettingsBase.Item%2A&gt;</ph> method.","pos":[0,251],"source":"The <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> event occurs only after the initial `get` access of the first configuration property used, typically through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method."},{"content":"Subsequent accesses use values for the settings property that are cached locally.","pos":[252,333]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reset%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Reload%2A&gt;</ph> methods will clear all cached values so this event will be raised again upon subsequent property access.","pos":[334,569],"source":" The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> and <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods will clear all cached values so this event will be raised again upon subsequent property access."}]}],"pos":[63572,64142],"yaml":true,"extradata":"MT"},{"content":"Occurs before values are saved to the data store.","nodes":[{"pos":[0,49],"content":"Occurs before values are saved to the data store.","nodes":[{"content":"Occurs before values are saved to the data store.","pos":[0,49]}]}],"pos":[65464,65514],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event is raised by the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method before it stores the application settings properties to their associated data store. The associated event handler can cancel this event.","nodes":[{"pos":[0,297],"content":"The <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event is raised by the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method before it stores the application settings properties to their associated data store. The associated event handler can cancel this event.","nodes":[{"content":"The <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event is raised by the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method before it stores the application settings properties to their associated data store. The associated event handler can cancel this event.","pos":[0,297],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.SettingsSaving&gt;</ph> event is raised by the <ph id=\"ph2\">&lt;xref:System.Configuration.ApplicationSettingsBase.Save%2A&gt;</ph> method before it stores the application settings properties to their associated data store.","pos":[0,245],"source":"The <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event is raised by the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method before it stores the application settings properties to their associated data store."},{"content":"The associated event handler can cancel this event.","pos":[246,297]}]}]}],"pos":[65525,65823],"yaml":true,"extradata":"MT"},{"content":"Updates application settings to reflect a more recent installation of the application.","nodes":[{"pos":[0,86],"content":"Updates application settings to reflect a more recent installation of the application.","nodes":[{"content":"Updates application settings to reflect a more recent installation of the application.","pos":[0,86]}]}],"pos":[67946,68033],"yaml":true},{"content":"The <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> method performs two actions to assure smooth transition to a new version of an application:  \n  \n-   It notifies all of the corresponding settings providers of the existence of the upgraded application through a call to their <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName> method, assuming they have implemented the <xref:System.Configuration.IApplicationSettingsProvider> interface. This action is not performed if the settings wrapper class is marked with <xref:System.Configuration.NoSettingsVersionUpgradeAttribute>.  \n  \n-   It reloads the values for all of the application settings.  \n  \n You can override the default behavior of <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> to implement custom upgrading or merging behavior. Use the <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method to retrieve individual values for a setting for the previous version of the application. Examples of custom upgrade behavior include:  \n  \n-   Using new policy defaults that override one or more of the previous user-specified values or previous defaults.  \n  \n-   Special translation of old values to be compatible with newer ranges, a different settings property group, and so on.","nodes":[{"pos":[0,158],"content":"The <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> method performs two actions to assure smooth transition to a new version of an application:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A&gt;</ph> method performs two actions to assure smooth transition to a new version of an application:","pos":[0,158],"source":"The <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> method performs two actions to assure smooth transition to a new version of an application:"}]},{"pos":[168,633],"content":"It notifies all of the corresponding settings providers of the existence of the upgraded application through a call to their <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName> method, assuming they have implemented the <xref:System.Configuration.IApplicationSettingsProvider> interface. This action is not performed if the settings wrapper class is marked with <xref:System.Configuration.NoSettingsVersionUpgradeAttribute>.","nodes":[{"content":"It notifies all of the corresponding settings providers of the existence of the upgraded application through a call to their <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName> method, assuming they have implemented the <xref:System.Configuration.IApplicationSettingsProvider> interface. This action is not performed if the settings wrapper class is marked with <xref:System.Configuration.NoSettingsVersionUpgradeAttribute>.","pos":[0,465],"nodes":[{"content":"It notifies all of the corresponding settings providers of the existence of the upgraded application through a call to their <ph id=\"ph1\">&lt;xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName&gt;</ph> method, assuming they have implemented the <ph id=\"ph2\">&lt;xref:System.Configuration.IApplicationSettingsProvider&gt;</ph> interface.","pos":[0,328],"source":"It notifies all of the corresponding settings providers of the existence of the upgraded application through a call to their <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName> method, assuming they have implemented the <xref:System.Configuration.IApplicationSettingsProvider> interface."},{"content":"This action is not performed if the settings wrapper class is marked with <ph id=\"ph1\">&lt;xref:System.Configuration.NoSettingsVersionUpgradeAttribute&gt;</ph>.","pos":[329,465],"source":" This action is not performed if the settings wrapper class is marked with <xref:System.Configuration.NoSettingsVersionUpgradeAttribute>."}]}]},{"pos":[643,701],"content":"It reloads the values for all of the application settings.","nodes":[{"content":"It reloads the values for all of the application settings.","pos":[0,58]}]},{"pos":[708,1085],"content":"You can override the default behavior of <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> to implement custom upgrading or merging behavior. Use the <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method to retrieve individual values for a setting for the previous version of the application. Examples of custom upgrade behavior include:","nodes":[{"content":"You can override the default behavior of <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> to implement custom upgrading or merging behavior. Use the <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method to retrieve individual values for a setting for the previous version of the application. Examples of custom upgrade behavior include:","pos":[0,377],"nodes":[{"content":"You can override the default behavior of <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A&gt;</ph> to implement custom upgrading or merging behavior.","pos":[0,154],"source":"You can override the default behavior of <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> to implement custom upgrading or merging behavior."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A&gt;</ph> method to retrieve individual values for a setting for the previous version of the application.","pos":[155,332],"source":" Use the <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method to retrieve individual values for a setting for the previous version of the application."},{"content":"Examples of custom upgrade behavior include:","pos":[333,377]}]}]},{"pos":[1095,1206],"content":"Using new policy defaults that override one or more of the previous user-specified values or previous defaults.","nodes":[{"content":"Using new policy defaults that override one or more of the previous user-specified values or previous defaults.","pos":[0,111]}]},{"pos":[1216,1333],"content":"Special translation of old values to be compatible with newer ranges, a different settings property group, and so on.","nodes":[{"content":"Special translation of old values to be compatible with newer ranges, a different settings property group, and so on.","pos":[0,117]}]}],"pos":[68044,69390],"yaml":true,"extradata":"MT"},{"content":"The configuration file could not be parsed.","nodes":[{"pos":[0,43],"content":"The configuration file could not be parsed.","nodes":[{"content":"The configuration file could not be parsed.","pos":[0,43]}]}],"pos":[69688,69732],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.ApplicationSettingsBase\n  commentId: T:System.Configuration.ApplicationSettingsBase\n  id: ApplicationSettingsBase\n  children:\n  - System.Configuration.ApplicationSettingsBase.#ctor\n  - System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent)\n  - System.Configuration.ApplicationSettingsBase.#ctor(System.String)\n  - System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent,System.String)\n  - System.Configuration.ApplicationSettingsBase.Context\n  - System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)\n  - System.Configuration.ApplicationSettingsBase.Item(System.String)\n  - System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)\n  - System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)\n  - System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)\n  - System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)\n  - System.Configuration.ApplicationSettingsBase.Properties\n  - System.Configuration.ApplicationSettingsBase.PropertyChanged\n  - System.Configuration.ApplicationSettingsBase.PropertyValues\n  - System.Configuration.ApplicationSettingsBase.Providers\n  - System.Configuration.ApplicationSettingsBase.Reload\n  - System.Configuration.ApplicationSettingsBase.Reset\n  - System.Configuration.ApplicationSettingsBase.Save\n  - System.Configuration.ApplicationSettingsBase.SettingChanging\n  - System.Configuration.ApplicationSettingsBase.SettingsKey\n  - System.Configuration.ApplicationSettingsBase.SettingsLoaded\n  - System.Configuration.ApplicationSettingsBase.SettingsSaving\n  - System.Configuration.ApplicationSettingsBase.Upgrade\n  langs:\n  - csharp\n  name: ApplicationSettingsBase\n  nameWithType: ApplicationSettingsBase\n  fullName: System.Configuration.ApplicationSettingsBase\n  type: Class\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Acts as a base class for deriving concrete wrapper classes to implement the application settings feature in Window Forms applications.\n  remarks: \"<xref:System.Configuration.ApplicationSettingsBase> adds the following functionality to the <xref:System.Configuration.SettingsBase> class, which is used by Web-based applications:  \\n  \\n-   The ability to detect attributes on a derived, settings wrapper class. <xref:System.Configuration.ApplicationSettingsBase> supports the declarative model used for wrapper class properties, as described later.  \\n  \\n-   Higher-level <xref:System.Configuration.ApplicationSettingsBase.Save%2A> and <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods.  \\n  \\n-   Additional validation events that you can handle to ensure the correctness of individual settings.  \\n  \\n In the application settings architecture, to access a group of settings properties you need to derive a concrete wrapper class from <xref:System.Configuration.ApplicationSettingsBase>. The wrapper class customizes <xref:System.Configuration.ApplicationSettingsBase> in the following ways:  \\n  \\n-   For every settings property to be accessed, a corresponding strongly typed public property is added to the wrapper class. This property has `get` and `set` accessors for read/write application settings, but only a `get` accessor for read-only settings.  \\n  \\n-   Appropriated attributes must be applied to the wrapper class's public properties to indicate characteristics of the settings property, such as the setting's scope (application or user), whether the setting should support roaming, the default value for the setting, the settings provider to be used, and so on. Each property is required to specify its scope, using either <xref:System.Configuration.ApplicationScopedSettingAttribute> or <xref:System.Configuration.UserScopedSettingAttribute>. Application-scoped settings are read-only if the default <xref:System.Configuration.LocalFileSettingsProvider> is used.  \\n  \\n The <xref:System.Configuration.ApplicationSettingsBase> class uses reflection to detect these attributes at run time. Most of this information gets passed to the settings provider layer, which is responsible for storage, persistence format, and so on.  \\n  \\n When an application has multiple settings wrapper classes, each class defines a *settings group*. Each group has the following characteristics:  \\n  \\n-   A group can contain any number or type of property settings.  \\n  \\n-   If the group name is not explicitly set by the decorating the wrapper class with a <xref:System.Configuration.SettingsGroupNameAttribute>, then a name is automatically generated.  \\n  \\n By default, all client-based applications use the <xref:System.Configuration.LocalFileSettingsProvider> to provide storage. If an alternate settings provider is desired, then the wrapper class or property must be decorated with a corresponding <xref:System.Configuration.SettingsProviderAttribute>.  \\n  \\n For more information about using application settings, see [Application Settings for Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md).\"\n  example:\n  - \"The following code example demonstrates the use of application settings to persist the following attributes of the main form: location, size, background color, and title bar text. All of these attributes are persisted as single application settings properties in the `FormSettings` class, named `FormLocation`, `FormSize`, `FormBackColor` and `FormText`, respectively. All except for `FormText` and `Size` are data bound to their associated form properties and have a default setting value applied using <xref:System.Configuration.DefaultSettingValueAttribute>.  \\n  \\n The form contains four child controls that have the following names and functions:  \\n  \\n-   A button named `btnBackColor` used to display the **Color** common dialog box.  \\n  \\n-   A button named `btnReload` used to <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> the application settings.  \\n  \\n-   A button named `btnReset` used to <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> the application settings.  \\n  \\n-   A textbox named `tbStatus` used to display status information about the program.  \\n  \\n Notice that after every execution of the application, an additional period character is appended to the title text of the form.  \\n  \\n This code example requires a Form with a <xref:System.Windows.Forms.ColorDialog> class named `colorDialog1`, and a <xref:System.Windows.Forms.StatusStrip> control with a <xref:System.Windows.Forms.ToolStripStatusLabel> named `tbStatus`. Additionally, it requires three <xref:System.Windows.Forms.Button> objects named `btnReload`, `btnReset`, and `btnBackColor`.  \\n  \\n [!code-cpp[AppSettingsSample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#1)]\\n [!code-csharp[AppSettingsSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#1)]\\n [!code-vb[AppSettingsSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#1)]\"\n  syntax:\n    content: 'public abstract class ApplicationSettingsBase : System.Configuration.SettingsBase, System.ComponentModel.INotifyPropertyChanged'\n  inheritance:\n  - System.Object\n  - System.Configuration.SettingsBase\n  implements:\n  - System.ComponentModel.INotifyPropertyChanged\n  inheritedMembers:\n  - System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)\n  - System.Configuration.SettingsBase.IsSynchronized\n  - System.Configuration.SettingsBase.Synchronized(System.Configuration.SettingsBase)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.#ctor\n  commentId: M:System.Configuration.ApplicationSettingsBase.#ctor\n  id: '#ctor'\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: ApplicationSettingsBase()\n  nameWithType: ApplicationSettingsBase.ApplicationSettingsBase()\n  fullName: ApplicationSettingsBase.ApplicationSettingsBase()\n  type: Constructor\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class to its default state.\n  remarks: \"The default constructor was designed to work under the assumption that there is no component associated with the current settings wrapper class, which derives from <xref:System.Configuration.ApplicationSettingsBase>.  \\n  \\n When an instance of a wrapper class is created, inherited code will automatically perform the following actions:  \\n  \\n1.  Reflect over the class.  \\n  \\n2.  For each property on the wrapper marked with either `[UserScopedSettingAttribute]` or `[ApplicationScopedSettingAttribute]`, a corresponding <xref:System.Configuration.SettingsProperty> is created.  \\n  \\n3.  Each <xref:System.Configuration.SettingsProperty> has some of its properties set based on other attributes that are optionally present on the wrapper's properties, such as the default value or the settings provider.  \\n  \\n4.  All other attributes are simply put into an attribute bag, the <xref:System.Configuration.SettingsProperty.Attributes%2A> property of the <xref:System.Configuration.SettingsProperty> class.  \\n  \\n5.  All <xref:System.Configuration.SettingsProperty> objects are added to a <xref:System.Configuration.SettingsPropertyCollection> represented by the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> property of the <xref:System.Configuration.ApplicationSettingsBase> class. This collection is then passed to the <xref:System.Configuration.SettingsBase.Initialize%2A> method.  \\n  \\n As implied by step 3 mentioned previously, <xref:System.Configuration.ApplicationSettingsBase> natively works with several property attributes, specifically the following: <xref:System.Configuration.SettingsProviderAttribute>, <xref:System.Configuration.DefaultSettingValueAttribute>, and <xref:System.Configuration.SettingsSerializeAsAttribute>. All other settings attributes are simply passed through to the appropriate underlying provider.\"\n  syntax:\n    content: protected ApplicationSettingsBase ();\n    parameters: []\n  overload: System.Configuration.ApplicationSettingsBase.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent)\n  commentId: M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent)\n  id: '#ctor(System.ComponentModel.IComponent)'\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: ApplicationSettingsBase(IComponent)\n  nameWithType: ApplicationSettingsBase.ApplicationSettingsBase(IComponent)\n  fullName: ApplicationSettingsBase.ApplicationSettingsBase(IComponent)\n  type: Constructor\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class using the supplied owner component.\n  remarks: \"This constructor is exactly equivalent to the <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.ComponentModel.IComponent%2CSystem.String%29> constructor using the invocation:  \\n  \\n `ApplicationSettingsBase(owner, String.Empty)`  \\n  \\n For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.\"\n  syntax:\n    content: protected ApplicationSettingsBase (System.ComponentModel.IComponent owner);\n    parameters:\n    - id: owner\n      type: System.ComponentModel.IComponent\n      description: The component that will act as the owner of the application settings object.\n  overload: System.Configuration.ApplicationSettingsBase.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>owner</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.#ctor(System.String)\n  commentId: M:System.Configuration.ApplicationSettingsBase.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: ApplicationSettingsBase(String)\n  nameWithType: ApplicationSettingsBase.ApplicationSettingsBase(String)\n  fullName: ApplicationSettingsBase.ApplicationSettingsBase(String)\n  type: Constructor\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class using the supplied settings key.\n  remarks: \"This constructor initializes the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property to the value of the `settingsKey` parameter. This property is useful in disambiguating different instances of the settings wrapper class in the same application domain.  \\n  \\n For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.\"\n  syntax:\n    content: protected ApplicationSettingsBase (string settingsKey);\n    parameters:\n    - id: settingsKey\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that uniquely identifies separate instances of the wrapper class.\n  overload: System.Configuration.ApplicationSettingsBase.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent,System.String)\n  commentId: M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent,System.String)\n  id: '#ctor(System.ComponentModel.IComponent,System.String)'\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: ApplicationSettingsBase(IComponent, String)\n  nameWithType: ApplicationSettingsBase.ApplicationSettingsBase(IComponent, String)\n  fullName: ApplicationSettingsBase.ApplicationSettingsBase(IComponent, String)\n  type: Constructor\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Initializes an instance of the <xref href=\"System.Configuration.ApplicationSettingsBase\"></xref> class using the supplied owner component and settings key.\n  remarks: \"The <xref:System.ComponentModel.IComponent> object specified by the `owner` parameter acts as the owner of the current instance of this applications settings class. During the initialization of the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>, the owner's site is queried for a <xref:System.Configuration.ISettingsProviderService>. If one exists, it is used in preference to native settings provider for all the properties of the wrapper class, as specified by the <xref:System.Configuration.SettingsProviderAttribute>.  \\n  \\n This constructor initializes the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property to the value of the `settingsKey` parameter. This property is useful in disambiguating different instances of the wrapper class in the same application domain.  \\n  \\n For information about how reflection is used during the instantiation of a wrapper class, see the default <xref:System.Configuration.ApplicationSettingsBase.%23ctor> constructor.\"\n  syntax:\n    content: protected ApplicationSettingsBase (System.ComponentModel.IComponent owner, string settingsKey);\n    parameters:\n    - id: owner\n      type: System.ComponentModel.IComponent\n      description: The component that will act as the owner of the application settings object.\n    - id: settingsKey\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that uniquely identifies separate instances of the wrapper class.\n  overload: System.Configuration.ApplicationSettingsBase.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>owner</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.Context\n  commentId: P:System.Configuration.ApplicationSettingsBase.Context\n  id: Context\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: Context\n  nameWithType: ApplicationSettingsBase.Context\n  fullName: ApplicationSettingsBase.Context\n  type: Property\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Gets the application settings context associated with the settings group.\n  remarks: \"Each settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase> has a context associated with it. The context is passed to the settings provider for each property to identify how the property is used. Context therefore acts as a hint to help the settings provider determine how best to persist the associated application settings values.  \\n  \\n In contrast, the <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property enables the settings provider to disambiguate multiple instances of the same wrapper class.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public override System.Configuration.SettingsContext Context { get; }\n    return:\n      type: System.Configuration.SettingsContext\n      description: A <xref href=\"System.Configuration.SettingsContext\"></xref> associated with the settings group.\n  overload: System.Configuration.ApplicationSettingsBase.Context*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)\n  commentId: M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)\n  id: GetPreviousVersion(System.String)\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: GetPreviousVersion(String)\n  nameWithType: ApplicationSettingsBase.GetPreviousVersion(String)\n  fullName: ApplicationSettingsBase.GetPreviousVersion(String)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Returns the value of the named settings property for the previous version of the same application.\n  remarks: The <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method is often used in conjunction with the <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> method when migrating application settings during the installation of a new version of an application.\n  syntax:\n    content: public object GetPreviousVersion (string propertyName);\n    parameters:\n    - id: propertyName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the name of the settings property whose value is to be returned.\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> containing the value of the specified <xref href=\"System.Configuration.SettingsProperty\"></xref> if found; otherwise, `null`.\n  overload: System.Configuration.ApplicationSettingsBase.GetPreviousVersion*\n  exceptions:\n  - type: System.Configuration.SettingsPropertyNotFoundException\n    commentId: T:System.Configuration.SettingsPropertyNotFoundException\n    description: The property does not exist. The property count is zero or the property cannot be found in the data store.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.Item(System.String)\n  commentId: P:System.Configuration.ApplicationSettingsBase.Item(System.String)\n  id: Item(System.String)\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: ApplicationSettingsBase.Item(String)\n  fullName: ApplicationSettingsBase.Item(String)\n  type: Property\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Gets or sets the value of the specified application settings property.\n  remarks: \"The <xref:System.Configuration.ApplicationSettingsBase.Item%2A> property, also known as the indexer, is routinely used in the settings wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>. <xref:System.Configuration.ApplicationSettingsBase.Item%2A> binds the public property of the wrapper class to the corresponding settings property.  \\n  \\n <xref:System.Configuration.ApplicationSettingsBase.Item%2A> raises several events depending on the operation being performed:  \\n  \\n-   The first time a property is retrieved, the <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> event is raised.  \\n  \\n-   When a property is set, the <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> event is raised. If the handler does not cancel the event, then the property value is set and the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event is raised.\"\n  syntax:\n    content: >-\n      [System.MonoTODO]\n\n      public override object this[string propertyName] { get; set; }\n    parameters:\n    - id: propertyName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the name of the property to access.\n    return:\n      type: System.Object\n      description: If found, the value of the named settings property; otherwise, `null`.\n  overload: System.Configuration.ApplicationSettingsBase.Item*\n  exceptions:\n  - type: System.Configuration.SettingsPropertyNotFoundException\n    commentId: T:System.Configuration.SettingsPropertyNotFoundException\n    description: There are no properties associated with the current wrapper or the specified property could not be found.\n  - type: System.Configuration.SettingsPropertyIsReadOnlyException\n    commentId: T:System.Configuration.SettingsPropertyIsReadOnlyException\n    description: An attempt was made to set a read-only property.\n  - type: System.Configuration.SettingsPropertyWrongTypeException\n    commentId: T:System.Configuration.SettingsPropertyWrongTypeException\n    description: The value supplied is of a type incompatible with the settings property, during a set operation.\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: The configuration file could not be parsed.\n  attributes:\n  - type: System.MonoTODO\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)\n  commentId: M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)\n  id: OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: OnPropertyChanged(Object, PropertyChangedEventArgs)\n  nameWithType: ApplicationSettingsBase.OnPropertyChanged(Object, PropertyChangedEventArgs)\n  fullName: ApplicationSettingsBase.OnPropertyChanged(Object, PropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.PropertyChanged\"></xref> event.\n  remarks: \"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Configuration.ApplicationSettingsBase.OnPropertyChanged%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected virtual void OnPropertyChanged (object sender, System.ComponentModel.PropertyChangedEventArgs e);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The source of the event.\n    - id: e\n      type: System.ComponentModel.PropertyChangedEventArgs\n      description: A <xref href=\"System.ComponentModel.PropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Configuration.ApplicationSettingsBase.OnPropertyChanged*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)\n  commentId: M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)\n  id: OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: OnSettingChanging(Object, SettingChangingEventArgs)\n  nameWithType: ApplicationSettingsBase.OnSettingChanging(Object, SettingChangingEventArgs)\n  fullName: ApplicationSettingsBase.OnSettingChanging(Object, SettingChangingEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.SettingChanging\"></xref> event.\n  remarks: \"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Configuration.ApplicationSettingsBase.OnSettingChanging%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected virtual void OnSettingChanging (object sender, System.Configuration.SettingChangingEventArgs e);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The source of the event.\n    - id: e\n      type: System.Configuration.SettingChangingEventArgs\n      description: A <xref href=\"System.Configuration.SettingChangingEventArgs\"></xref> that contains the event data.\n  overload: System.Configuration.ApplicationSettingsBase.OnSettingChanging*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)\n  commentId: M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)\n  id: OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: OnSettingsLoaded(Object, SettingsLoadedEventArgs)\n  nameWithType: ApplicationSettingsBase.OnSettingsLoaded(Object, SettingsLoadedEventArgs)\n  fullName: ApplicationSettingsBase.OnSettingsLoaded(Object, SettingsLoadedEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.SettingsLoaded\"></xref> event.\n  remarks: \"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected virtual void OnSettingsLoaded (object sender, System.Configuration.SettingsLoadedEventArgs e);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The source of the event.\n    - id: e\n      type: System.Configuration.SettingsLoadedEventArgs\n      description: A <xref href=\"System.Configuration.SettingsLoadedEventArgs\"></xref> that contains the event data.\n  overload: System.Configuration.ApplicationSettingsBase.OnSettingsLoaded*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)\n  commentId: M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)\n  id: OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: OnSettingsSaving(Object, CancelEventArgs)\n  nameWithType: ApplicationSettingsBase.OnSettingsSaving(Object, CancelEventArgs)\n  fullName: ApplicationSettingsBase.OnSettingsSaving(Object, CancelEventArgs)\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Raises the <xref href=\"System.Configuration.ApplicationSettingsBase.SettingsSaving\"></xref> event.\n  remarks: \"Raising an event invokes the event handler through a delegate. For more information, see [NIB: Raising an Event](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  \\n  \\n The <xref:System.Configuration.ApplicationSettingsBase.OnSettingsSaving%2A> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.\"\n  syntax:\n    content: protected virtual void OnSettingsSaving (object sender, System.ComponentModel.CancelEventArgs e);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The source of the event.\n    - id: e\n      type: System.ComponentModel.CancelEventArgs\n      description: A <xref href=\"System.ComponentModel.CancelEventArgs\"></xref> that contains the event data.\n  overload: System.Configuration.ApplicationSettingsBase.OnSettingsSaving*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.Properties\n  commentId: P:System.Configuration.ApplicationSettingsBase.Properties\n  id: Properties\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: ApplicationSettingsBase.Properties\n  fullName: ApplicationSettingsBase.Properties\n  type: Property\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Gets the collection of settings properties in the wrapper.\n  remarks: \"The `get` accessor of the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> property reflects over the metadata of the settings wrapper class, which is derived from <xref:System.Configuration.ApplicationSettingsBase>, to dynamically determine the set of available application settings properties.  \\n  \\n The <xref:System.Configuration.ApplicationSettingsBase> class natively recognizes certain characteristics of an application setting, such as its name, property type, settings provider, default value, read only status, and a serialization preference. These characteristics are mirrored as properties in the <xref:System.Configuration.SettingsProperty> class. All other attributes of the settings property are just passed through to its associated settings provider.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public override System.Configuration.SettingsPropertyCollection Properties { get; }\n    return:\n      type: System.Configuration.SettingsPropertyCollection\n      description: A <xref href=\"System.Configuration.SettingsPropertyCollection\"></xref> containing all the <xref href=\"System.Configuration.SettingsProperty\"></xref> objects used in the current wrapper.\n  overload: System.Configuration.ApplicationSettingsBase.Properties*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: The associated settings provider could not be found or its instantiation failed.\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.PropertyChanged\n  commentId: E:System.Configuration.ApplicationSettingsBase.PropertyChanged\n  id: PropertyChanged\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: PropertyChanged\n  nameWithType: ApplicationSettingsBase.PropertyChanged\n  fullName: ApplicationSettingsBase.PropertyChanged\n  type: Event\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Occurs after the value of an application settings property is changed.\n  remarks: \"The <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event is raised when a settings property is changed through the `set` accessor of the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method, or for every property that is restored when a call is made to the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> or <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> methods.  \\n  \\n There is no corresponding `PropertyChanging` event for this class; instead, see the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event.\"\n  syntax:\n    content: public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;\n    return:\n      type: System.ComponentModel.PropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.PropertyValues\n  commentId: P:System.Configuration.ApplicationSettingsBase.PropertyValues\n  id: PropertyValues\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: PropertyValues\n  nameWithType: ApplicationSettingsBase.PropertyValues\n  fullName: ApplicationSettingsBase.PropertyValues\n  type: Property\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Gets a collection of property values.\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public override System.Configuration.SettingsPropertyValueCollection PropertyValues { get; }\n    return:\n      type: System.Configuration.SettingsPropertyValueCollection\n      description: A <xref href=\"System.Configuration.SettingsPropertyValueCollection\"></xref> of property values.\n  overload: System.Configuration.ApplicationSettingsBase.PropertyValues*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.Providers\n  commentId: P:System.Configuration.ApplicationSettingsBase.Providers\n  id: Providers\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: Providers\n  nameWithType: ApplicationSettingsBase.Providers\n  fullName: ApplicationSettingsBase.Providers\n  type: Property\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Gets the collection of application settings providers used by the wrapper.\n  remarks: The <xref:System.Configuration.SettingsProviderAttribute> determines what setting provider is used by a settings wrapper class or an individual setting property. If this attribute is not specified, a client application will use the <xref:System.Configuration.LocalFileSettingsProvider>.\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public override System.Configuration.SettingsProviderCollection Providers { get; }\n    return:\n      type: System.Configuration.SettingsProviderCollection\n      description: A <xref href=\"System.Configuration.SettingsProviderCollection\"></xref> containing all the <xref href=\"System.Configuration.SettingsProvider\"></xref> objects used by the settings properties of the current settings wrapper.\n  overload: System.Configuration.ApplicationSettingsBase.Providers*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.Reload\n  commentId: M:System.Configuration.ApplicationSettingsBase.Reload\n  id: Reload\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: Reload()\n  nameWithType: ApplicationSettingsBase.Reload()\n  fullName: ApplicationSettingsBase.Reload()\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Refreshes the application settings property values from persistent storage.\n  remarks: \"The <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method clears the currently cached property values, causing a reload of these values from persistent storage when they are subsequently accessed. This method performs the following actions:  \\n  \\n-   It clears the currently cached properties by clearing the collection represented by the <xref:System.Configuration.SettingsBase.PropertyValues%2A> property.  \\n  \\n-   It raises the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event for every member of the <xref:System.Configuration.ApplicationSettingsBase.Properties%2A> collection.  \\n  \\n <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contrasts with <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.\"\n  example:\n  - \"The following code example shows the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method being invoked in the body of the <xref:System.Windows.Forms.Control.Click> event handler for a button named `btnReload`. As a result of this call, the currently stored values for the application settings are reloaded into their corresponding properties. The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.  \\n  \\n [!code-cpp[AppSettingsSample#6](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#6)]\\n [!code-csharp[AppSettingsSample#6](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#6)]\\n [!code-vb[AppSettingsSample#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#6)]\"\n  syntax:\n    content: public void Reload ();\n    parameters: []\n  overload: System.Configuration.ApplicationSettingsBase.Reload*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.Reset\n  commentId: M:System.Configuration.ApplicationSettingsBase.Reset\n  id: Reset\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: ApplicationSettingsBase.Reset()\n  fullName: ApplicationSettingsBase.Reset()\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Restores the persisted application settings values to their corresponding default properties.\n  remarks: \"The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method overwrites the user-scoped settings properties by restoring the currently persisted value of each application settings. This method performs the following actions:  \\n  \\n-   It calls the <xref:System.Configuration.IApplicationSettingsProvider.Reset%2A?displayProperty=fullName> method on every settings provider that supports this optional method.  \\n  \\n-   It calls the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> method to force a refresh of the settings property values.  \\n  \\n <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> contrasts with <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> in that the former will load the last set of saved application settings values, whereas the latter will load the saved default values.\"\n  example:\n  - \"The following code example shows the <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> method being invoked in the body of the <xref:System.Windows.Forms.Control.Click> event handler for a button named `btnReset`. As a result of this call, the stored default values for the application settings are reloaded into their corresponding properties. The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.  \\n  \\n [!code-cpp[AppSettingsSample#5](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#5)]\\n [!code-csharp[AppSettingsSample#5](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#5)]\\n [!code-vb[AppSettingsSample#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#5)]\"\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Configuration.ApplicationSettingsBase.Reset*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: The configuration file could not be parsed.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.Save\n  commentId: M:System.Configuration.ApplicationSettingsBase.Save\n  id: Save\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: Save()\n  nameWithType: ApplicationSettingsBase.Save()\n  fullName: ApplicationSettingsBase.Save()\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Stores the current values of the application settings properties.\n  remarks: \"The <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method writes the current value of each settings property to its associated data store. For each property, this method calls the <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> method on the associated settings provider.  \\n  \\n This method differs from the base class implementation in that it raises the <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event before the values are written.  \\n  \\n If the only settings defined are application-scoped settings, <xref:System.Configuration.ApplicationSettingsBase.Save%2A> will have no effect and return no error if called with the default <xref:System.Configuration.LocalFileSettingsProvider>. <xref:System.Configuration.LocalFileSettingsProvider> only saves user-scoped settings.  \\n  \\n> [!IMPORTANT]\\n>  There is no corresponding Load method because the values of application settings are automatically loaded during wrapper class initialization. In contrast, these values are not automatically saved when an application ends. Therefore, you must explicitly call the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method to persist the current values of the application settings. This is typically performed in the <xref:System.Windows.Forms.Form.Closing> event handler of the primary or containing <xref:System.Windows.Forms.Form>.\"\n  example:\n  - \"The following code example shows the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method being called from the <xref:System.Windows.Forms.Form.Closing> event handler for the primary form. This method also appends an extra period to the settings property that is associated with the form's <xref:System.Windows.Forms.Control.Text%2A> property.  \\n  \\n The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.  \\n  \\n [!code-cpp[AppSettingsSample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#3)]\\n [!code-csharp[AppSettingsSample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#3)]\\n [!code-vb[AppSettingsSample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#3)]\"\n  syntax:\n    content: public override void Save ();\n    parameters: []\n  overload: System.Configuration.ApplicationSettingsBase.Save*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.SettingChanging\n  commentId: E:System.Configuration.ApplicationSettingsBase.SettingChanging\n  id: SettingChanging\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: SettingChanging\n  nameWithType: ApplicationSettingsBase.SettingChanging\n  fullName: ApplicationSettingsBase.SettingChanging\n  type: Event\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Occurs before the value of an application settings property is changed.\n  remarks: \"The <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event occurs before an application setting value property is changed through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method. This event is not raised when the <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> or <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> methods are called. <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> can be canceled through the <xref:System.Configuration.SettingChangingEventArgs> event data class.  \\n  \\n You typically use the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event to handle immediate validation of an individual settings property. For more information about validation, see [How to: Validate Application Settings](~/docs/framework/winforms/advanced/how-to-validate-application-settings.md).  \\n  \\n There is no corresponding `SettingChanged` event for this class; instead, see the <xref:System.Configuration.ApplicationSettingsBase.PropertyChanged> event.\"\n  example:\n  - \"The following code example shows the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event handler for object of type `FormSettings`, which is a wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>. The handler displays the event information in a textbox named `tbStatus`. The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.  \\n  \\n [!code-cpp[AppSettingsSample#7](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#7)]\\n [!code-csharp[AppSettingsSample#7](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#7)]\\n [!code-vb[AppSettingsSample#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#7)]\"\n  syntax:\n    content: public event System.Configuration.SettingChangingEventHandler SettingChanging;\n    return:\n      type: System.Configuration.SettingChangingEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.SettingsKey\n  commentId: P:System.Configuration.ApplicationSettingsBase.SettingsKey\n  id: SettingsKey\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: SettingsKey\n  nameWithType: ApplicationSettingsBase.SettingsKey\n  fullName: ApplicationSettingsBase.SettingsKey\n  type: Property\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Gets or sets the settings key for the application settings group.\n  remarks: \"The <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> property is provided to enable client code, and in particular the settings provider, to disambiguate between multiple instances of the same application settings class.  \\n  \\n Unless the settings wrapper class is designed using the singleton pattern, there can be multiple instances of the same application settings class in a single application. The value of <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should be set according to how the property values are intended to be shared.  \\n  \\n-   If the settings properties of the wrapper are intended to be shared across all instances of the wrapper in the same application, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have the same value in all of the instances. This is the default behavior of the <xref:System.Configuration.ApplicationSettingsBase> class.  \\n  \\n-   If the settings properties of the wrapper are intended to be per instance, then <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> should have a unique value for every instance. The <xref:System.Configuration.ApplicationSettingsBase.%23ctor%28System.String%29> version of the constructor enables you to initialize <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A> to a unique string.  \\n  \\n In contrast, the <xref:System.Configuration.ApplicationSettingsBase.Context%2A> property provides hints to the settings provider to enable it to persist values in an efficient and orderly manner.  \\n  \\n The <xref:System.Configuration.SettingChangingEventArgs> class contains a similar <xref:System.Configuration.SettingChangingEventArgs.SettingKey%2A> property that helps identify the source of the <xref:System.Configuration.ApplicationSettingsBase.SettingChanging> event.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public string SettingsKey { get; set; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the settings key for the current settings group.\n  overload: System.Configuration.ApplicationSettingsBase.SettingsKey*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.SettingsLoaded\n  commentId: E:System.Configuration.ApplicationSettingsBase.SettingsLoaded\n  id: SettingsLoaded\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: SettingsLoaded\n  nameWithType: ApplicationSettingsBase.SettingsLoaded\n  fullName: ApplicationSettingsBase.SettingsLoaded\n  type: Event\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Occurs after the application settings are retrieved from storage.\n  remarks: The <xref:System.Configuration.ApplicationSettingsBase.SettingsLoaded> event occurs only after the initial `get` access of the first configuration property used, typically through the <xref:System.Configuration.ApplicationSettingsBase.Item%2A> method. Subsequent accesses use values for the settings property that are cached locally. The <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> and <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> methods will clear all cached values so this event will be raised again upon subsequent property access.\n  syntax:\n    content: public event System.Configuration.SettingsLoadedEventHandler SettingsLoaded;\n    return:\n      type: System.Configuration.SettingsLoadedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.SettingsSaving\n  commentId: E:System.Configuration.ApplicationSettingsBase.SettingsSaving\n  id: SettingsSaving\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: SettingsSaving\n  nameWithType: ApplicationSettingsBase.SettingsSaving\n  fullName: ApplicationSettingsBase.SettingsSaving\n  type: Event\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Occurs before values are saved to the data store.\n  remarks: The <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event is raised by the <xref:System.Configuration.ApplicationSettingsBase.Save%2A> method before it stores the application settings properties to their associated data store. The associated event handler can cancel this event.\n  example:\n  - \"The following code example shows the <xref:System.Configuration.ApplicationSettingsBase.SettingsSaving> event handler for object of type `FormSettings`, which is a wrapper class derived from <xref:System.Configuration.ApplicationSettingsBase>. The handler queries the user to save the current application settings property values. The full code example is listed in the <xref:System.Configuration.ApplicationSettingsBase> class overview.  \\n  \\n [!code-cpp[AppSettingsSample#8](~/samples/snippets/cpp/VS_Snippets_Winforms/AppSettingsSample/cpp/AppSettingsSample.cpp#8)]\\n [!code-csharp[AppSettingsSample#8](~/samples/snippets/csharp/VS_Snippets_Winforms/AppSettingsSample/CS/AppSettingsSample.cs#8)]\\n [!code-vb[AppSettingsSample#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/AppSettingsSample/VB/Form1.vb#8)]\"\n  syntax:\n    content: public event System.Configuration.SettingsSavingEventHandler SettingsSaving;\n    return:\n      type: System.Configuration.SettingsSavingEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Configuration.ApplicationSettingsBase.Upgrade\n  commentId: M:System.Configuration.ApplicationSettingsBase.Upgrade\n  id: Upgrade\n  parent: System.Configuration.ApplicationSettingsBase\n  langs:\n  - csharp\n  name: Upgrade()\n  nameWithType: ApplicationSettingsBase.Upgrade()\n  fullName: ApplicationSettingsBase.Upgrade()\n  type: Method\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Updates application settings to reflect a more recent installation of the application.\n  remarks: \"The <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> method performs two actions to assure smooth transition to a new version of an application:  \\n  \\n-   It notifies all of the corresponding settings providers of the existence of the upgraded application through a call to their <xref:System.Configuration.IApplicationSettingsProvider.Upgrade%2A?displayProperty=fullName> method, assuming they have implemented the <xref:System.Configuration.IApplicationSettingsProvider> interface. This action is not performed if the settings wrapper class is marked with <xref:System.Configuration.NoSettingsVersionUpgradeAttribute>.  \\n  \\n-   It reloads the values for all of the application settings.  \\n  \\n You can override the default behavior of <xref:System.Configuration.ApplicationSettingsBase.Upgrade%2A> to implement custom upgrading or merging behavior. Use the <xref:System.Configuration.ApplicationSettingsBase.GetPreviousVersion%2A> method to retrieve individual values for a setting for the previous version of the application. Examples of custom upgrade behavior include:  \\n  \\n-   Using new policy defaults that override one or more of the previous user-specified values or previous defaults.  \\n  \\n-   Special translation of old values to be compatible with newer ranges, a different settings property group, and so on.\"\n  syntax:\n    content: public virtual void Upgrade ();\n    parameters: []\n  overload: System.Configuration.ApplicationSettingsBase.Upgrade*\n  exceptions:\n  - type: System.Configuration.ConfigurationErrorsException\n    commentId: T:System.Configuration.ConfigurationErrorsException\n    description: The configuration file could not be parsed.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Configuration.SettingsBase\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsBase\n  nameWithType: SettingsBase\n  fullName: System.Configuration.SettingsBase\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Configuration.SettingsPropertyNotFoundException\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsPropertyNotFoundException\n  nameWithType: SettingsPropertyNotFoundException\n  fullName: System.Configuration.SettingsPropertyNotFoundException\n- uid: System.Configuration.SettingsPropertyIsReadOnlyException\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsPropertyIsReadOnlyException\n  nameWithType: SettingsPropertyIsReadOnlyException\n  fullName: System.Configuration.SettingsPropertyIsReadOnlyException\n- uid: System.Configuration.SettingsPropertyWrongTypeException\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsPropertyWrongTypeException\n  nameWithType: SettingsPropertyWrongTypeException\n  fullName: System.Configuration.SettingsPropertyWrongTypeException\n- uid: System.Configuration.ConfigurationErrorsException\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationErrorsException\n  nameWithType: ConfigurationErrorsException\n  fullName: System.Configuration.ConfigurationErrorsException\n- uid: System.Configuration.ApplicationSettingsBase.#ctor\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: ApplicationSettingsBase()\n  nameWithType: ApplicationSettingsBase.ApplicationSettingsBase()\n  fullName: ApplicationSettingsBase.ApplicationSettingsBase()\n- uid: System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent)\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: ApplicationSettingsBase(IComponent)\n  nameWithType: ApplicationSettingsBase.ApplicationSettingsBase(IComponent)\n  fullName: ApplicationSettingsBase.ApplicationSettingsBase(IComponent)\n- uid: System.ComponentModel.IComponent\n  parent: System.ComponentModel\n  isExternal: false\n  name: IComponent\n  nameWithType: IComponent\n  fullName: System.ComponentModel.IComponent\n- uid: System.Configuration.ApplicationSettingsBase.#ctor(System.String)\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: ApplicationSettingsBase(String)\n  nameWithType: ApplicationSettingsBase.ApplicationSettingsBase(String)\n  fullName: ApplicationSettingsBase.ApplicationSettingsBase(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent,System.String)\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: ApplicationSettingsBase(IComponent, String)\n  nameWithType: ApplicationSettingsBase.ApplicationSettingsBase(IComponent, String)\n  fullName: ApplicationSettingsBase.ApplicationSettingsBase(IComponent, String)\n- uid: System.Configuration.ApplicationSettingsBase.Context\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Context\n  nameWithType: ApplicationSettingsBase.Context\n  fullName: ApplicationSettingsBase.Context\n- uid: System.Configuration.SettingsContext\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsContext\n  nameWithType: SettingsContext\n  fullName: System.Configuration.SettingsContext\n- uid: System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: GetPreviousVersion(String)\n  nameWithType: ApplicationSettingsBase.GetPreviousVersion(String)\n  fullName: ApplicationSettingsBase.GetPreviousVersion(String)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Configuration.ApplicationSettingsBase.Item(System.String)\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Item(String)\n  nameWithType: ApplicationSettingsBase.Item(String)\n  fullName: ApplicationSettingsBase.Item(String)\n- uid: System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: OnPropertyChanged(Object, PropertyChangedEventArgs)\n  nameWithType: ApplicationSettingsBase.OnPropertyChanged(Object, PropertyChangedEventArgs)\n  fullName: ApplicationSettingsBase.OnPropertyChanged(Object, PropertyChangedEventArgs)\n- uid: System.ComponentModel.PropertyChangedEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyChangedEventArgs\n  nameWithType: PropertyChangedEventArgs\n  fullName: System.ComponentModel.PropertyChangedEventArgs\n- uid: System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: OnSettingChanging(Object, SettingChangingEventArgs)\n  nameWithType: ApplicationSettingsBase.OnSettingChanging(Object, SettingChangingEventArgs)\n  fullName: ApplicationSettingsBase.OnSettingChanging(Object, SettingChangingEventArgs)\n- uid: System.Configuration.SettingChangingEventArgs\n  parent: System.Configuration\n  isExternal: false\n  name: SettingChangingEventArgs\n  nameWithType: SettingChangingEventArgs\n  fullName: System.Configuration.SettingChangingEventArgs\n- uid: System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: OnSettingsLoaded(Object, SettingsLoadedEventArgs)\n  nameWithType: ApplicationSettingsBase.OnSettingsLoaded(Object, SettingsLoadedEventArgs)\n  fullName: ApplicationSettingsBase.OnSettingsLoaded(Object, SettingsLoadedEventArgs)\n- uid: System.Configuration.SettingsLoadedEventArgs\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsLoadedEventArgs\n  nameWithType: SettingsLoadedEventArgs\n  fullName: System.Configuration.SettingsLoadedEventArgs\n- uid: System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: OnSettingsSaving(Object, CancelEventArgs)\n  nameWithType: ApplicationSettingsBase.OnSettingsSaving(Object, CancelEventArgs)\n  fullName: ApplicationSettingsBase.OnSettingsSaving(Object, CancelEventArgs)\n- uid: System.ComponentModel.CancelEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: CancelEventArgs\n  nameWithType: CancelEventArgs\n  fullName: System.ComponentModel.CancelEventArgs\n- uid: System.Configuration.ApplicationSettingsBase.Properties\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Properties\n  nameWithType: ApplicationSettingsBase.Properties\n  fullName: ApplicationSettingsBase.Properties\n- uid: System.Configuration.SettingsPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsPropertyCollection\n  nameWithType: SettingsPropertyCollection\n  fullName: System.Configuration.SettingsPropertyCollection\n- uid: System.Configuration.ApplicationSettingsBase.PropertyChanged\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: PropertyChanged\n  nameWithType: ApplicationSettingsBase.PropertyChanged\n  fullName: ApplicationSettingsBase.PropertyChanged\n- uid: System.ComponentModel.PropertyChangedEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyChangedEventHandler\n  nameWithType: PropertyChangedEventHandler\n  fullName: System.ComponentModel.PropertyChangedEventHandler\n- uid: System.Configuration.ApplicationSettingsBase.PropertyValues\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: PropertyValues\n  nameWithType: ApplicationSettingsBase.PropertyValues\n  fullName: ApplicationSettingsBase.PropertyValues\n- uid: System.Configuration.SettingsPropertyValueCollection\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsPropertyValueCollection\n  nameWithType: SettingsPropertyValueCollection\n  fullName: System.Configuration.SettingsPropertyValueCollection\n- uid: System.Configuration.ApplicationSettingsBase.Providers\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Providers\n  nameWithType: ApplicationSettingsBase.Providers\n  fullName: ApplicationSettingsBase.Providers\n- uid: System.Configuration.SettingsProviderCollection\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsProviderCollection\n  nameWithType: SettingsProviderCollection\n  fullName: System.Configuration.SettingsProviderCollection\n- uid: System.Configuration.ApplicationSettingsBase.Reload\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Reload()\n  nameWithType: ApplicationSettingsBase.Reload()\n  fullName: ApplicationSettingsBase.Reload()\n- uid: System.Configuration.ApplicationSettingsBase.Reset\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Reset()\n  nameWithType: ApplicationSettingsBase.Reset()\n  fullName: ApplicationSettingsBase.Reset()\n- uid: System.Configuration.ApplicationSettingsBase.Save\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Save()\n  nameWithType: ApplicationSettingsBase.Save()\n  fullName: ApplicationSettingsBase.Save()\n- uid: System.Configuration.ApplicationSettingsBase.SettingChanging\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: SettingChanging\n  nameWithType: ApplicationSettingsBase.SettingChanging\n  fullName: ApplicationSettingsBase.SettingChanging\n- uid: System.Configuration.SettingChangingEventHandler\n  parent: System.Configuration\n  isExternal: false\n  name: SettingChangingEventHandler\n  nameWithType: SettingChangingEventHandler\n  fullName: System.Configuration.SettingChangingEventHandler\n- uid: System.Configuration.ApplicationSettingsBase.SettingsKey\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: SettingsKey\n  nameWithType: ApplicationSettingsBase.SettingsKey\n  fullName: ApplicationSettingsBase.SettingsKey\n- uid: System.Configuration.ApplicationSettingsBase.SettingsLoaded\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: SettingsLoaded\n  nameWithType: ApplicationSettingsBase.SettingsLoaded\n  fullName: ApplicationSettingsBase.SettingsLoaded\n- uid: System.Configuration.SettingsLoadedEventHandler\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsLoadedEventHandler\n  nameWithType: SettingsLoadedEventHandler\n  fullName: System.Configuration.SettingsLoadedEventHandler\n- uid: System.Configuration.ApplicationSettingsBase.SettingsSaving\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: SettingsSaving\n  nameWithType: ApplicationSettingsBase.SettingsSaving\n  fullName: ApplicationSettingsBase.SettingsSaving\n- uid: System.Configuration.SettingsSavingEventHandler\n  parent: System.Configuration\n  isExternal: false\n  name: SettingsSavingEventHandler\n  nameWithType: SettingsSavingEventHandler\n  fullName: System.Configuration.SettingsSavingEventHandler\n- uid: System.Configuration.ApplicationSettingsBase.Upgrade\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Upgrade()\n  nameWithType: ApplicationSettingsBase.Upgrade()\n  fullName: ApplicationSettingsBase.Upgrade()\n- uid: System.Configuration.ApplicationSettingsBase.#ctor*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: ApplicationSettingsBase\n  nameWithType: ApplicationSettingsBase.ApplicationSettingsBase\n  fullName: ApplicationSettingsBase.ApplicationSettingsBase\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.Context*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Context\n  nameWithType: ApplicationSettingsBase.Context\n  fullName: ApplicationSettingsBase.Context\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.GetPreviousVersion*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: GetPreviousVersion\n  nameWithType: ApplicationSettingsBase.GetPreviousVersion\n  fullName: ApplicationSettingsBase.GetPreviousVersion\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.Item*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Item\n  nameWithType: ApplicationSettingsBase.Item\n  fullName: ApplicationSettingsBase.Item\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.OnPropertyChanged*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: OnPropertyChanged\n  nameWithType: ApplicationSettingsBase.OnPropertyChanged\n  fullName: ApplicationSettingsBase.OnPropertyChanged\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.OnSettingChanging*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: OnSettingChanging\n  nameWithType: ApplicationSettingsBase.OnSettingChanging\n  fullName: ApplicationSettingsBase.OnSettingChanging\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.OnSettingsLoaded*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: OnSettingsLoaded\n  nameWithType: ApplicationSettingsBase.OnSettingsLoaded\n  fullName: ApplicationSettingsBase.OnSettingsLoaded\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.OnSettingsSaving*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: OnSettingsSaving\n  nameWithType: ApplicationSettingsBase.OnSettingsSaving\n  fullName: ApplicationSettingsBase.OnSettingsSaving\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.Properties*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Properties\n  nameWithType: ApplicationSettingsBase.Properties\n  fullName: ApplicationSettingsBase.Properties\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.PropertyValues*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: PropertyValues\n  nameWithType: ApplicationSettingsBase.PropertyValues\n  fullName: ApplicationSettingsBase.PropertyValues\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.Providers*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Providers\n  nameWithType: ApplicationSettingsBase.Providers\n  fullName: ApplicationSettingsBase.Providers\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.Reload*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Reload\n  nameWithType: ApplicationSettingsBase.Reload\n  fullName: ApplicationSettingsBase.Reload\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.Reset*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Reset\n  nameWithType: ApplicationSettingsBase.Reset\n  fullName: ApplicationSettingsBase.Reset\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.Save*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Save\n  nameWithType: ApplicationSettingsBase.Save\n  fullName: ApplicationSettingsBase.Save\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.SettingsKey*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: SettingsKey\n  nameWithType: ApplicationSettingsBase.SettingsKey\n  fullName: ApplicationSettingsBase.SettingsKey\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Configuration.ApplicationSettingsBase.Upgrade*\n  parent: System.Configuration.ApplicationSettingsBase\n  isExternal: false\n  name: Upgrade\n  nameWithType: ApplicationSettingsBase.Upgrade\n  fullName: ApplicationSettingsBase.Upgrade\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ApplicationSettingsBase.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)\n  parent: System.Configuration.SettingsBase\n  isExternal: false\n  name: Initialize(SettingsContext, SettingsPropertyCollection, SettingsProviderCollection)\n  nameWithType: SettingsBase.Initialize(SettingsContext, SettingsPropertyCollection, SettingsProviderCollection)\n  fullName: SettingsBase.Initialize(SettingsContext, SettingsPropertyCollection, SettingsProviderCollection)\n- uid: System.Configuration.SettingsBase.IsSynchronized\n  parent: System.Configuration.SettingsBase\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: SettingsBase.IsSynchronized\n  fullName: SettingsBase.IsSynchronized\n- uid: System.Configuration.SettingsBase.Synchronized(System.Configuration.SettingsBase)\n  parent: System.Configuration.SettingsBase\n  isExternal: false\n  name: Synchronized(SettingsBase)\n  nameWithType: SettingsBase.Synchronized(SettingsBase)\n  fullName: SettingsBase.Synchronized(SettingsBase)\n- uid: System.ComponentModel.INotifyPropertyChanged\n  parent: System.ComponentModel\n  isExternal: false\n  name: INotifyPropertyChanged\n  nameWithType: INotifyPropertyChanged\n  fullName: System.ComponentModel.INotifyPropertyChanged\n"}