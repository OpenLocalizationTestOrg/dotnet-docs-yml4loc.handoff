<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6f1a2edcceba7342bc876edde4351d7cf0470a5c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.IdentityModel.Services.ClaimsPrincipalPermission.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">520ff49b4a81060c38b7286ea2239fb93d23b6dd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">18c66f5387e7a0eeefa1142aa3ba2279f314e44a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents a permission that uses a <ph id="ph1">&lt;xref href="System.Security.Claims.ClaimsAuthorizationManager"&gt;&lt;/xref&gt;</ph> implementation to determine if access to a resource should be granted to the active principal.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> class provides the capability to perform imperative access checks by using the <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt;</ph> that is configured for an application.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>By invoking the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> method or the static <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A&gt;</ph> method, you can provide protection to resources from within the execution path of your code according to the authorization policy defined for your claims authentication manager.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Declarative access checks can be performed by using the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> class uses the claims authorization manager configured by the <ph id="ph2">&lt;xref:System.IdentityModel.Configuration.IdentityConfiguration&gt;</ph> that is set under the <ph id="ph3">&lt;xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is true in all cases, even in scenarios where WS-Federation is not used; for example, active (WCF) Web applications and Console applications.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify the claims authorization manager either in configuration or programmatically.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>To specify the claims authorization manager in a configuration file, set the <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;claimsAuthorizationManager<ph id="ph2">\&amp;</ph>gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)</ept> element under an <bpt id="p2">[</bpt><ph id="ph3">\&amp;</ph>lt;identityConfiguration<ph id="ph4">\&amp;</ph>gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)</ept> element and ensure that this identity configuration is referenced by the <bpt id="p3">[</bpt><ph id="ph5">\&amp;</ph>lt;federationConfiguration<ph id="ph6">\&amp;</ph>gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md)</ept> element that is loaded by the runtime (for example, by setting the <ph id="ph7">`identityConfigurationName`</ph> attribute).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the claims authorization manager programmatically, provide a handler for the <ph id="ph1">&lt;xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=fullName&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>On one level, the functionality provided by <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> is similar to the role-based access checks (RBAC) provided through the <ph id="ph2">&lt;xref:System.Security.Permissions.PrincipalPermission&gt;</ph> class; however, the <ph id="ph3">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager&gt;</ph> class performs checks based on the claims presented by the active principal.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This enables far more granularity than is available through pure RBAC, where many permissions are typically collected under a single role.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Perhaps, more importantly, claims-based authorization enables better separation of business logic and authorization policy because permission can be demanded for a specific action on a resource in code and back-end policy can be used to configure which claims the presenting entity must possess in order to satisfy the demand.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Like RBAC, <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> performs a user-based access check, that is, unlike code access security implemented by classes that derive from the <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class and use a stack walk to ensure that all callers of the code have been granted a permission, <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> performs its check only on the current principal.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The static <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A&gt;</ph> method checks access for a specified action on a specified resource.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The resource and action are both strings and are typically URIs.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also initialize an instance of <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> with an action and a resource and call the <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the constructor only takes a single resource and action, <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> objects can be combined through the <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>A permission created by using these methods may contain multiple resource-action pairs.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both methods determine access by invoking the <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName&gt;</ph> method of the configured claims authorization manager with an <ph id="ph2">&lt;xref:System.Security.Claims.AuthorizationContext&gt;</ph> composed of the active principal (<ph id="ph3">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName&gt;</ph>), the resource, and the action.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>They throw a <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> if the current principal is not authorized to perform the action on the resource; otherwise, execution proceeds.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the case of a <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> that contains multiple resource-action pairs, the <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName&gt;</ph> method is invoked for each of the resource-action pairs contained in the permission.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the call to <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> to succeed, the active principal must be authorized for all of the resource-action pairs contained in the permission.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Creates a new instance of the <ph id="ph1">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> object is initialized with the specified resource-action pair.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can call the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> method to perform an access check.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the constructor only takes a single resource and action, <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> objects can be combined through the <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission created through these methods may contain multiple resource-action pairs.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The resource on which the principal should be authorized.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The action for which the principal should be authorized.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;resource&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or an empty string.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;action&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Checks if the current principal is authorized to perform the specified action on the specified resource.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The principal must be authorized for the specified action on the specified resource or the <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName&gt;</ph> method of the configured claims authorization manager is invoked with an <ph id="ph2">&lt;xref:System.Security.Claims.AuthorizationContext&gt;</ph> composed of the active principal (<ph id="ph3">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;</ph>), the resource, and the action.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The resource on which the principal should be authorized.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The action for which the principal should be authorized.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The current principal is not assignable from <ph id="ph1">&lt;xref href="System.Security.Claims.ClaimsPrincipal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>There is no <ph id="ph1">&lt;xref href="System.Security.Claims.ClaimsAuthorizationManager"&gt;&lt;/xref&gt;</ph> configured.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The authorization check failed.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Returns a copy of the current <ph id="ph1">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph> instance.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph> copied from the current instance.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Checks if the current principal is authorized for the resource-action pairs associated with the current instance.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current principal must be authorized for all of the resource-action pairs associated with this instance or the <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although the constructor only takes a single resource and action, <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph> objects can be combined through the <ph id="ph2">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission created through these methods may contain multiple resource-action pairs.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> method invokes the <ph id="ph2">&lt;xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=fullName&gt;</ph> method of the configured claims authorization manager with an <ph id="ph3">&lt;xref:System.Security.Claims.AuthorizationContext&gt;</ph> composed of the active principal (<ph id="ph4">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A&gt;</ph>), the resource, and the action for each of the resource-action pairs contained in the permission.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> to succeed the active principal must be authorized for all of the resource-action pairs that are contained in the permission.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The current principal is not assignable from <ph id="ph1">&lt;xref href="System.Security.Claims.ClaimsPrincipal"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>There is no <ph id="ph1">&lt;xref href="System.Security.Claims.ClaimsAuthorizationManager"&gt;&lt;/xref&gt;</ph> configured.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The authorization check failed.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Reconstructs the current permission and its state from the specified XML encoding.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reconstructs a permission from the XML encoding created by a call to the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The XML encoding to use to reconstruct the permission.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;element&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The encoding contains unrecognized elements or attributes or improperly formed XML.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns a permission that is the intersection of the current permission and the specified permission.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission that is returned has only the resource-action pairs that were present both in the current permission and in the specified permission.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Resource-action pairs that existed in only one or the other of the permissions are not included.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> to succeed on the new permission, the current principal only needs to be authorized for the resource-action pairs that were common to the current permission and the specified permission.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The permission to intersect with the current permission.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>It must be an instance of <ph id="ph1">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph> that represents the intersection of the current permission and the specified permission; or <ph id="ph2">`null`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">target</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">null</ph><ept id="p2">&lt;/code&gt;</ept> or is not an instance of <ph id="ph5">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether current permission is a subset of the specified permission.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>The current permission is a subset of the specified permission if all of the resource-action pairs contained in the current permission are also present in the specified permission.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`target`</ph> is <ph id="ph2">`null`</ph> or is not an instance of <ph id="ph3">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission&gt;</ph>, the <ph id="ph4">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A&gt;</ph> returns <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The permission to be tested for the subset relationship.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>It must be an instance of <ph id="ph1">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if current permission is a subset of the specified permission; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the permission is unrestricted.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the permission is unrestricted; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Always returns <ph id="ph1">`true`</ph> indicating that permission is unrestricted.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Returns the XML encoded form of the current permission and its state.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The principal can be reconstructed from its XML encoded form by calling the <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The XML encoded form of the current permission and its state.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Returns a new permission that is the union of the current permission and the specified permission.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph> object that has all of the resource-action pairs that are present in the current instance and the target instance.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The permission that is returned has all of the resource-action pairs that are present in the current permission and all of the resource-action pairs that are present the specified permission.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a <ph id="ph1">&lt;xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A&gt;</ph> to succeed on the new permission, the current principal must be authorized for all of the resource-action pairs that existed in the current permission and all of the resource-action pairs that existed in the specified permission.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The permission to combine with current permission.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>It must be of type <ph id="ph1">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>A new <ph id="ph1">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph> that represents the union of the current permission and the specified permission; or <ph id="ph2">`null`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">target</ph><ept id="p1">&lt;/code&gt;</ept> is <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">null</ph><ept id="p2">&lt;/code&gt;</ept> or is not an instance of <ph id="ph5">&lt;xref href="System.IdentityModel.Services.ClaimsPrincipalPermission"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>