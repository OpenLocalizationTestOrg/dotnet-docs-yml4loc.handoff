{"nodes":[{"content":"Provides a managed equivalent of an unmanaged host.","nodes":[{"pos":[0,51],"content":"Provides a managed equivalent of an unmanaged host.","nodes":[{"content":"Provides a managed equivalent of an unmanaged host.","pos":[0,51]}]}],"pos":[982,1034],"yaml":true},{"content":"> [!IMPORTANT]\n>  Do not use <xref:System.AppDomainManager> to configure an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host.  \n  \n Implementing the <xref:System.AppDomainManager> class enables a hosting application to participate in the creation of new application domains. To replace the default <xref:System.AppDomainManager>, identify the assembly and type of the replacement <xref:System.AppDomainManager> in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the [\\<appDomainManagerAssembly>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md) and [\\<appDomainManagerType>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md) elements in your configuration file. The assembly must be fully trusted and be contained in the global assembly cache or the directory of the starting application. The type and assembly names must be fully qualified in the environment variables. For example:  \n  \n `set APPDOMAIN_MANAGER_TYPE=MyNamespace.TestAppDomainManager`  \n  \n `set APPDOMAIN_MANAGER_ASM=customappDomainmanager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f1368f7b12a08d72`  \n  \n> [!IMPORTANT]\n>  If the assembly that contains your subclass of <xref:System.AppDomainManager> depends on assemblies that are marked with the conditional <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute, you must include those assemblies in the list that you pass to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A> property of the <xref:System.AppDomainSetup> you use to create application domains. Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.  \n  \n The <xref:System.AppDomainManager> is the managed equivalent of the unmanaged host. An <xref:System.AppDomainManager> object participates in the creation of new application domains in a process and can customize the new <xref:System.AppDomain> before other managed code runs. The <xref:System.AppDomainManager> can also supply host managers that participate in other aspects of common language runtime execution. For example, an <xref:System.AppDomainManager> can identify a <xref:System.Security.HostSecurityManager> object that participates in the security decisions of the application domain.  \n  \n> [!NOTE]\n>  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.  \n  \n> [!NOTE]\n>  This class contains a link demand and an inheritance demand at the class level. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).","nodes":[{"pos":[2,161],"content":"[!IMPORTANT]\n Do not use <xref:System.AppDomainManager> to configure an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host.","leadings":["","> "],"nodes":[{"content":" Do not use <xref:System.AppDomainManager> to configure an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host.","pos":[13,157],"nodes":[{"content":"Do not use <ph id=\"ph1\">&lt;xref:System.AppDomainManager&gt;</ph> to configure an application domain in ASP.NET.","pos":[1,89],"source":" Do not use <xref:System.AppDomainManager> to configure an application domain in ASP.NET."},{"content":"In ASP.NET, configuration must be handled by the host.","pos":[90,144]}]}]},{"pos":[168,1029],"content":"Implementing the <xref:System.AppDomainManager> class enables a hosting application to participate in the creation of new application domains. To replace the default <xref:System.AppDomainManager>, identify the assembly and type of the replacement <xref:System.AppDomainManager> in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the [\\<appDomainManagerAssembly>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md) and [\\<appDomainManagerType>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md) elements in your configuration file. The assembly must be fully trusted and be contained in the global assembly cache or the directory of the starting application. The type and assembly names must be fully qualified in the environment variables. For example:","nodes":[{"content":"Implementing the <ph id=\"ph1\">&lt;xref:System.AppDomainManager&gt;</ph> class enables a hosting application to participate in the creation of new application domains.","pos":[0,142],"source":"Implementing the <xref:System.AppDomainManager> class enables a hosting application to participate in the creation of new application domains."},{"content":"To replace the default <ph id=\"ph1\">&lt;xref:System.AppDomainManager&gt;</ph>, identify the assembly and type of the replacement <ph id=\"ph2\">&lt;xref:System.AppDomainManager&gt;</ph> in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the <bpt id=\"p1\">[</bpt><ph id=\"ph3\">\\&lt;</ph>appDomainManagerAssembly&gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id=\"p2\">[</bpt><ph id=\"ph4\">\\&lt;</ph>appDomainManagerType&gt;<ept id=\"p2\">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in your configuration file.","pos":[143,639],"source":" To replace the default <xref:System.AppDomainManager>, identify the assembly and type of the replacement <xref:System.AppDomainManager> in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the [\\<appDomainManagerAssembly>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md) and [\\<appDomainManagerType>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md) elements in your configuration file."},{"content":"The assembly must be fully trusted and be contained in the global assembly cache or the directory of the starting application.","pos":[640,766]},{"content":"The type and assembly names must be fully qualified in the environment variables.","pos":[767,848]},{"content":"For example:","pos":[849,861]}]},{"pos":[1229,1771],"content":"[!IMPORTANT]\n If the assembly that contains your subclass of <xref:System.AppDomainManager> depends on assemblies that are marked with the conditional <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute, you must include those assemblies in the list that you pass to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A> property of the <xref:System.AppDomainSetup> you use to create application domains. Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.","leadings":["","> "],"nodes":[{"content":" If the assembly that contains your subclass of <xref:System.AppDomainManager> depends on assemblies that are marked with the conditional <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute, you must include those assemblies in the list that you pass to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A> property of the <xref:System.AppDomainSetup> you use to create application domains. Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.","pos":[13,540],"nodes":[{"content":"If the assembly that contains your subclass of <ph id=\"ph1\">&lt;xref:System.AppDomainManager&gt;</ph> depends on assemblies that are marked with the conditional <ph id=\"ph2\">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> (APTCA) attribute, you must include those assemblies in the list that you pass to the <ph id=\"ph3\">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph> property of the <ph id=\"ph4\">&lt;xref:System.AppDomainSetup&gt;</ph> you use to create application domains.","pos":[1,430],"source":" If the assembly that contains your subclass of <xref:System.AppDomainManager> depends on assemblies that are marked with the conditional <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute, you must include those assemblies in the list that you pass to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A> property of the <xref:System.AppDomainSetup> you use to create application domains."},{"content":"Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.","pos":[431,527]}]}]},{"pos":[1778,2373],"content":"The <xref:System.AppDomainManager> is the managed equivalent of the unmanaged host. An <xref:System.AppDomainManager> object participates in the creation of new application domains in a process and can customize the new <xref:System.AppDomain> before other managed code runs. The <xref:System.AppDomainManager> can also supply host managers that participate in other aspects of common language runtime execution. For example, an <xref:System.AppDomainManager> can identify a <xref:System.Security.HostSecurityManager> object that participates in the security decisions of the application domain.","nodes":[{"content":"The <xref:System.AppDomainManager> is the managed equivalent of the unmanaged host. An <xref:System.AppDomainManager> object participates in the creation of new application domains in a process and can customize the new <xref:System.AppDomain> before other managed code runs. The <xref:System.AppDomainManager> can also supply host managers that participate in other aspects of common language runtime execution. For example, an <xref:System.AppDomainManager> can identify a <xref:System.Security.HostSecurityManager> object that participates in the security decisions of the application domain.","pos":[0,595],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.AppDomainManager&gt;</ph> is the managed equivalent of the unmanaged host.","pos":[0,83],"source":"The <xref:System.AppDomainManager> is the managed equivalent of the unmanaged host."},{"content":"An <ph id=\"ph1\">&lt;xref:System.AppDomainManager&gt;</ph> object participates in the creation of new application domains in a process and can customize the new <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph> before other managed code runs.","pos":[84,275],"source":" An <xref:System.AppDomainManager> object participates in the creation of new application domains in a process and can customize the new <xref:System.AppDomain> before other managed code runs."},{"content":"The <ph id=\"ph1\">&lt;xref:System.AppDomainManager&gt;</ph> can also supply host managers that participate in other aspects of common language runtime execution.","pos":[276,412],"source":" The <xref:System.AppDomainManager> can also supply host managers that participate in other aspects of common language runtime execution."},{"content":"For example, an <ph id=\"ph1\">&lt;xref:System.AppDomainManager&gt;</ph> can identify a <ph id=\"ph2\">&lt;xref:System.Security.HostSecurityManager&gt;</ph> object that participates in the security decisions of the application domain.","pos":[413,595],"source":" For example, an <xref:System.AppDomainManager> can identify a <xref:System.Security.HostSecurityManager> object that participates in the security decisions of the application domain."}]}]},{"pos":[2381,2888],"content":"[!NOTE]\n Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.","leadings":["","> "],"nodes":[{"content":"Only assemblies granted <ph id=\"ph1\">`FullTrust`</ph>, such as assemblies in the global assembly cache or identified as <ph id=\"ph2\">`fullTrustAssemblies`</ph> in the <ph id=\"ph3\">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName&gt;</ph> method can be loaded in the  <ph id=\"ph4\">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph> constructor and the <ph id=\"ph5\">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> method.","pos":[9,505],"source":" Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method."}]},{"pos":[2896,3325],"content":"[!NOTE]\n This class contains a link demand and an inheritance demand at the class level. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).","leadings":["","> "],"nodes":[{"content":" This class contains a link demand and an inheritance demand at the class level. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).","pos":[8,427],"nodes":[{"content":"This class contains a link demand and an inheritance demand at the class level.","pos":[1,80]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when either the immediate caller or the derived class does not have infrastructure permission.","pos":[81,228],"source":" A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have infrastructure permission."},{"content":"For details about security demands, see <bpt id=\"p1\">[</bpt>Link Demands<ept id=\"p1\">](~/docs/framework/misc/link-demands.md)</ept> and <bpt id=\"p2\">[</bpt>Inheritance Demands<ept id=\"p2\">](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.","pos":[229,419],"source":" For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)."}]}]}],"pos":[1045,4393],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.AppDomainManager\"></xref> class.","nodes":[{"pos":[0,85],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.AppDomainManager\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.AppDomainManager\"></xref> class."}],"pos":[6622,6708],"yaml":true},{"content":"> [!NOTE]\n>  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.","nodes":[{"pos":[2,509],"content":"[!NOTE]\n Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.","leadings":["","> "],"nodes":[{"content":"Only assemblies granted <ph id=\"ph1\">`FullTrust`</ph>, such as assemblies in the global assembly cache or identified as <ph id=\"ph2\">`fullTrustAssemblies`</ph> in the <ph id=\"ph3\">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName&gt;</ph> method can be loaded in the  <ph id=\"ph4\">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph> constructor and the <ph id=\"ph5\">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> method.","pos":[9,505],"source":" Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method."}]}],"pos":[6719,7241],"yaml":true,"extradata":"MT"},{"content":"Gets the application activator that handles the activation of add-ins and manifest-based applications for the domain.","nodes":[{"pos":[0,117],"content":"Gets the application activator that handles the activation of add-ins and manifest-based applications for the domain.","nodes":[{"content":"Gets the application activator that handles the activation of add-ins and manifest-based applications for the domain.","pos":[0,117]}]}],"pos":[8420,8538],"yaml":true},{"content":"There is a single designated instance of the <xref:System.Runtime.Hosting.ApplicationActivator> class in each <xref:System.AppDomain> to which all add-in and manifest-based application activation calls are routed. The <xref:System.AppDomainManager> for the current <xref:System.AppDomain> can provide its own custom <xref:System.Runtime.Hosting.ApplicationActivator>, or an instance of the default <xref:System.Runtime.Hosting.ApplicationActivator> is created.","nodes":[{"pos":[0,460],"content":"There is a single designated instance of the <xref:System.Runtime.Hosting.ApplicationActivator> class in each <xref:System.AppDomain> to which all add-in and manifest-based application activation calls are routed. The <xref:System.AppDomainManager> for the current <xref:System.AppDomain> can provide its own custom <xref:System.Runtime.Hosting.ApplicationActivator>, or an instance of the default <xref:System.Runtime.Hosting.ApplicationActivator> is created.","nodes":[{"content":"There is a single designated instance of the <xref:System.Runtime.Hosting.ApplicationActivator> class in each <xref:System.AppDomain> to which all add-in and manifest-based application activation calls are routed. The <xref:System.AppDomainManager> for the current <xref:System.AppDomain> can provide its own custom <xref:System.Runtime.Hosting.ApplicationActivator>, or an instance of the default <xref:System.Runtime.Hosting.ApplicationActivator> is created.","pos":[0,460],"nodes":[{"content":"There is a single designated instance of the <ph id=\"ph1\">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> class in each <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph> to which all add-in and manifest-based application activation calls are routed.","pos":[0,213],"source":"There is a single designated instance of the <xref:System.Runtime.Hosting.ApplicationActivator> class in each <xref:System.AppDomain> to which all add-in and manifest-based application activation calls are routed."},{"content":"The <ph id=\"ph1\">&lt;xref:System.AppDomainManager&gt;</ph> for the current <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph> can provide its own custom <ph id=\"ph3\">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>, or an instance of the default <ph id=\"ph4\">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> is created.","pos":[214,460],"source":" The <xref:System.AppDomainManager> for the current <xref:System.AppDomain> can provide its own custom <xref:System.Runtime.Hosting.ApplicationActivator>, or an instance of the default <xref:System.Runtime.Hosting.ApplicationActivator> is created."}]}]}],"pos":[8549,9010],"yaml":true,"extradata":"MT"},{"content":"The application activator.","nodes":[{"pos":[0,26],"content":"The application activator.","nodes":[{"content":"The application activator.","pos":[0,26]}]}],"pos":[9209,9236],"yaml":true},{"content":"Indicates whether the specified operation is allowed in the application domain.","nodes":[{"pos":[0,79],"content":"Indicates whether the specified operation is allowed in the application domain.","nodes":[{"content":"Indicates whether the specified operation is allowed in the application domain.","pos":[0,79]}]}],"pos":[10502,10582],"yaml":true},{"content":"The default implementation of this method returns `false`.  \n  \n This method is called when the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName> method has been called to increase the isolated storage quota. An application that hosts the common language runtime (CLR) can override the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method to perform policy decisions based on an <xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState> object (which inherits <xref:System.Security.SecurityState>), and can then allow or prevent the increase. For example, a host could prompt the end user to approve or deny the request to increase the quota. The host's implementation of <xref:System.AppDomainManager.CheckSecuritySettings%2A> should take into account the possibility of denial-of-service attacks. For example, it should prompt the user only if the method is called from a user-initiated event such as a button click.","nodes":[{"pos":[0,58],"content":"The default implementation of this method returns <ph id=\"ph1\">`false`</ph>.","source":"The default implementation of this method returns `false`."},{"pos":[65,979],"content":"This method is called when the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName> method has been called to increase the isolated storage quota. An application that hosts the common language runtime (CLR) can override the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method to perform policy decisions based on an <xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState> object (which inherits <xref:System.Security.SecurityState>), and can then allow or prevent the increase. For example, a host could prompt the end user to approve or deny the request to increase the quota. The host's implementation of <xref:System.AppDomainManager.CheckSecuritySettings%2A> should take into account the possibility of denial-of-service attacks. For example, it should prompt the user only if the method is called from a user-initiated event such as a button click.","nodes":[{"content":"This method is called when the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName> method has been called to increase the isolated storage quota. An application that hosts the common language runtime (CLR) can override the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method to perform policy decisions based on an <xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState> object (which inherits <xref:System.Security.SecurityState>), and can then allow or prevent the increase. For example, a host could prompt the end user to approve or deny the request to increase the quota. The host's implementation of <xref:System.AppDomainManager.CheckSecuritySettings%2A> should take into account the possibility of denial-of-service attacks. For example, it should prompt the user only if the method is called from a user-initiated event such as a button click.","pos":[0,914],"nodes":[{"content":"This method is called when the <ph id=\"ph1\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName&gt;</ph> method has been called to increase the isolated storage quota.","pos":[0,190],"source":"This method is called when the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName> method has been called to increase the isolated storage quota."},{"content":"An application that hosts the common language runtime (CLR) can override the <ph id=\"ph1\">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt;</ph> method to perform policy decisions based on an <ph id=\"ph2\">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState&gt;</ph> object (which inherits <ph id=\"ph3\">&lt;xref:System.Security.SecurityState&gt;</ph>), and can then allow or prevent the increase.","pos":[191,538],"source":" An application that hosts the common language runtime (CLR) can override the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method to perform policy decisions based on an <xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState> object (which inherits <xref:System.Security.SecurityState>), and can then allow or prevent the increase."},{"content":"For example, a host could prompt the end user to approve or deny the request to increase the quota.","pos":[539,638]},{"content":"The host's implementation of <ph id=\"ph1\">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt;</ph> should take into account the possibility of denial-of-service attacks.","pos":[639,794],"source":" The host's implementation of <xref:System.AppDomainManager.CheckSecuritySettings%2A> should take into account the possibility of denial-of-service attacks."},{"content":"For example, it should prompt the user only if the method is called from a user-initiated event such as a button click.","pos":[795,914]}]}]}],"pos":[10593,11577],"yaml":true,"extradata":"MT"},{"content":"A subclass of <xref href=\"System.Security.SecurityState\"></xref> that identifies the operation whose security status is requested.","nodes":[{"pos":[0,130],"content":"A subclass of <ph id=\"ph1\">&lt;xref href=\"System.Security.SecurityState\"&gt;&lt;/xref&gt;</ph> that identifies the operation whose security status is requested.","source":"A subclass of <xref href=\"System.Security.SecurityState\"></xref> that identifies the operation whose security status is requested."}],"pos":[11774,11905],"yaml":true},{"content":"`true` if the host allows the operation specified by <code>state</code> to be performed in the application domain; otherwise, `false`.","nodes":[{"pos":[0,134],"content":"<ph id=\"ph1\">`true`</ph> if the host allows the operation specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> to be performed in the application domain; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the host allows the operation specified by <code>state</code> to be performed in the application domain; otherwise, `false`."}],"pos":[11963,12100],"yaml":true},{"content":"Returns a new or existing application domain.","nodes":[{"pos":[0,45],"content":"Returns a new or existing application domain.","nodes":[{"content":"Returns a new or existing application domain.","pos":[0,45]}]}],"pos":[13484,13530],"yaml":true},{"content":"The friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain. For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.  \n  \n The default <xref:System.AppDomainManager.CreateDomain%2A> method calls the protected <xref:System.AppDomainManager.CreateDomainHelper%2A> method to create the <xref:System.AppDomain>. Overrides of this method do not need to call the <xref:System.AppDomainManager.CreateDomainHelper%2A> method but can return an existing domain.","nodes":[{"pos":[0,201],"content":"The friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain. For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.","nodes":[{"content":"The friendly name, specified by the <ph id=\"ph1\">`friendlyName`</ph> parameter, can be displayed in user interfaces to identify the domain.","pos":[0,121],"source":"The friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> property.","pos":[122,201],"source":" For more information, see the <xref:System.AppDomain.FriendlyName%2A> property."}]},{"pos":[208,536],"content":"The default <xref:System.AppDomainManager.CreateDomain%2A> method calls the protected <xref:System.AppDomainManager.CreateDomainHelper%2A> method to create the <xref:System.AppDomain>. Overrides of this method do not need to call the <xref:System.AppDomainManager.CreateDomainHelper%2A> method but can return an existing domain.","nodes":[{"content":"The default <xref:System.AppDomainManager.CreateDomain%2A> method calls the protected <xref:System.AppDomainManager.CreateDomainHelper%2A> method to create the <xref:System.AppDomain>. Overrides of this method do not need to call the <xref:System.AppDomainManager.CreateDomainHelper%2A> method but can return an existing domain.","pos":[0,328],"nodes":[{"content":"The default <ph id=\"ph1\">&lt;xref:System.AppDomainManager.CreateDomain%2A&gt;</ph> method calls the protected <ph id=\"ph2\">&lt;xref:System.AppDomainManager.CreateDomainHelper%2A&gt;</ph> method to create the <ph id=\"ph3\">&lt;xref:System.AppDomain&gt;</ph>.","pos":[0,184],"source":"The default <xref:System.AppDomainManager.CreateDomain%2A> method calls the protected <xref:System.AppDomainManager.CreateDomainHelper%2A> method to create the <xref:System.AppDomain>."},{"content":"Overrides of this method do not need to call the <ph id=\"ph1\">&lt;xref:System.AppDomainManager.CreateDomainHelper%2A&gt;</ph> method but can return an existing domain.","pos":[185,328],"source":" Overrides of this method do not need to call the <xref:System.AppDomainManager.CreateDomainHelper%2A> method but can return an existing domain."}]}]}],"pos":[13541,14082],"yaml":true,"extradata":"MT"},{"content":"The friendly name of the domain.","nodes":[{"pos":[0,32],"content":"The friendly name of the domain.","nodes":[{"content":"The friendly name of the domain.","pos":[0,32]}]}],"pos":[14326,14359],"yaml":true},{"content":"An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.","nodes":[{"pos":[0,111],"content":"An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.","nodes":[{"content":"An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.","pos":[0,111]}]}],"pos":[14445,14557],"yaml":true},{"content":"An object that contains application domain initialization information.","nodes":[{"pos":[0,70],"content":"An object that contains application domain initialization information.","nodes":[{"content":"An object that contains application domain initialization information.","pos":[0,70]}]}],"pos":[14634,14705],"yaml":true},{"content":"A new or existing application domain.","nodes":[{"pos":[0,37],"content":"A new or existing application domain.","nodes":[{"content":"A new or existing application domain.","pos":[0,37]}]}],"pos":[14765,14803],"yaml":true},{"content":"Provides a helper method to create an application domain.","nodes":[{"pos":[0,57],"content":"Provides a helper method to create an application domain.","nodes":[{"content":"Provides a helper method to create an application domain.","pos":[0,57]}]}],"pos":[16214,16272],"yaml":true},{"content":"This protected helper method handles the creation of a new application domain.  \n  \n This friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain. For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.","nodes":[{"pos":[0,78],"content":"This protected helper method handles the creation of a new application domain.","nodes":[{"content":"This protected helper method handles the creation of a new application domain.","pos":[0,78]}]},{"pos":[85,287],"content":"This friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain. For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.","nodes":[{"content":"This friendly name, specified by the <ph id=\"ph1\">`friendlyName`</ph> parameter, can be displayed in user interfaces to identify the domain.","pos":[0,122],"source":"This friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> property.","pos":[123,202],"source":" For more information, see the <xref:System.AppDomain.FriendlyName%2A> property."}]}],"pos":[16283,16575],"yaml":true,"extradata":"MT"},{"content":"The friendly name of the domain.","nodes":[{"pos":[0,32],"content":"The friendly name of the domain.","nodes":[{"content":"The friendly name of the domain.","pos":[0,32]}]}],"pos":[16827,16860],"yaml":true},{"content":"An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.","nodes":[{"pos":[0,111],"content":"An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.","nodes":[{"content":"An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.","pos":[0,111]}]}],"pos":[16946,17058],"yaml":true},{"content":"An object that contains application domain initialization information.","nodes":[{"pos":[0,70],"content":"An object that contains application domain initialization information.","nodes":[{"content":"An object that contains application domain initialization information.","pos":[0,70]}]}],"pos":[17135,17206],"yaml":true},{"content":"A newly created application domain.","nodes":[{"pos":[0,35],"content":"A newly created application domain.","nodes":[{"content":"A newly created application domain.","pos":[0,35]}]}],"pos":[17266,17302],"yaml":true},{"content":"<code>friendlyName</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;friendlyName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>friendlyName</code> is `null`."}],"pos":[17474,17511],"yaml":true},{"content":"Gets the entry assembly for an application.","nodes":[{"pos":[0,43],"content":"Gets the entry assembly for an application.","nodes":[{"content":"Gets the entry assembly for an application.","pos":[0,43]}]}],"pos":[18518,18562],"yaml":true},{"content":"If the application is a manifest-activated application, the entry assembly is determined from the application manifest. If the application is not manifest activated, the entry assembly is the process executable in the default application domain. In other application domains, the entry assembly is the first executable that was executed by the <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,419],"content":"If the application is a manifest-activated application, the entry assembly is determined from the application manifest. If the application is not manifest activated, the entry assembly is the process executable in the default application domain. In other application domains, the entry assembly is the first executable that was executed by the <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName> method.","nodes":[{"content":"If the application is a manifest-activated application, the entry assembly is determined from the application manifest. If the application is not manifest activated, the entry assembly is the process executable in the default application domain. In other application domains, the entry assembly is the first executable that was executed by the <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName> method.","pos":[0,419],"nodes":[{"content":"If the application is a manifest-activated application, the entry assembly is determined from the application manifest.","pos":[0,119]},{"content":"If the application is not manifest activated, the entry assembly is the process executable in the default application domain.","pos":[120,245]},{"content":"In other application domains, the entry assembly is the first executable that was executed by the <ph id=\"ph1\">&lt;xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName&gt;</ph> method.","pos":[246,419],"source":" In other application domains, the entry assembly is the first executable that was executed by the <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName> method."}]}]}],"pos":[18573,18993],"yaml":true,"extradata":"MT"},{"content":"The entry assembly for the application.","nodes":[{"pos":[0,39],"content":"The entry assembly for the application.","nodes":[{"content":"The entry assembly for the application.","pos":[0,39]}]}],"pos":[19151,19191],"yaml":true},{"content":"Gets the host execution context manager that manages the flow of the execution context.","nodes":[{"pos":[0,87],"content":"Gets the host execution context manager that manages the flow of the execution context.","nodes":[{"content":"Gets the host execution context manager that manages the flow of the execution context.","pos":[0,87]}]}],"pos":[20350,20438],"yaml":true},{"content":"This property allows a host to provide a <xref:System.Threading.HostExecutionContextManager> that can participate in the flow of the execution context across asynchronous calls.","nodes":[{"pos":[0,177],"content":"This property allows a host to provide a <xref:System.Threading.HostExecutionContextManager> that can participate in the flow of the execution context across asynchronous calls.","nodes":[{"content":"This property allows a host to provide a <ph id=\"ph1\">&lt;xref:System.Threading.HostExecutionContextManager&gt;</ph> that can participate in the flow of the execution context across asynchronous calls.","pos":[0,177],"source":"This property allows a host to provide a <xref:System.Threading.HostExecutionContextManager> that can participate in the flow of the execution context across asynchronous calls."}]}],"pos":[20449,20627],"yaml":true,"extradata":"MT"},{"content":"The host execution context manager.","nodes":[{"pos":[0,35],"content":"The host execution context manager.","nodes":[{"content":"The host execution context manager.","pos":[0,35]}]}],"pos":[20835,20871],"yaml":true},{"content":"Gets the host security manager that participates in security decisions for the application domain.","nodes":[{"pos":[0,98],"content":"Gets the host security manager that participates in security decisions for the application domain.","nodes":[{"content":"Gets the host security manager that participates in security decisions for the application domain.","pos":[0,98]}]}],"pos":[21996,22095],"yaml":true},{"content":"This property allows a host to provide a <xref:System.Security.HostSecurityManager> to participate in the security decisions for the application domain.","nodes":[{"pos":[0,152],"content":"This property allows a host to provide a <xref:System.Security.HostSecurityManager> to participate in the security decisions for the application domain.","nodes":[{"content":"This property allows a host to provide a <ph id=\"ph1\">&lt;xref:System.Security.HostSecurityManager&gt;</ph> to participate in the security decisions for the application domain.","pos":[0,152],"source":"This property allows a host to provide a <xref:System.Security.HostSecurityManager> to participate in the security decisions for the application domain."}]}],"pos":[22106,22259],"yaml":true,"extradata":"MT"},{"content":"The host security manager.","nodes":[{"pos":[0,26],"content":"The host security manager.","nodes":[{"content":"The host security manager.","pos":[0,26]}]}],"pos":[23015,23042],"yaml":true},{"content":"Gets the initialization flags for custom application domain managers.","nodes":[{"pos":[0,69],"content":"Gets the initialization flags for custom application domain managers.","nodes":[{"content":"Gets the initialization flags for custom application domain managers.","pos":[0,69]}]}],"pos":[24159,24229],"yaml":true},{"content":"A bitwise combination of the enumeration values that describe the initialization action to perform. The default is <xref href=\"System.AppDomainManagerInitializationOptions.None\"></xref>.","nodes":[{"pos":[0,186],"content":"A bitwise combination of the enumeration values that describe the initialization action to perform. The default is <xref href=\"System.AppDomainManagerInitializationOptions.None\"></xref>.","nodes":[{"content":"A bitwise combination of the enumeration values that describe the initialization action to perform.","pos":[0,99]},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.AppDomainManagerInitializationOptions.None\"&gt;&lt;/xref&gt;</ph>.","pos":[100,186],"source":" The default is <xref href=\"System.AppDomainManagerInitializationOptions.None\"></xref>."}]}],"pos":[24419,24606],"yaml":true},{"content":"Initializes the new application domain.","nodes":[{"pos":[0,39],"content":"Initializes the new application domain.","nodes":[{"content":"Initializes the new application domain.","pos":[0,39]}]}],"pos":[25838,25878],"yaml":true},{"content":"> [!IMPORTANT]\n>  Do not use this method to initialize an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host. If you use this method to initialize the application domain, the host throws <xref:System.InvalidOperationException> when it attempts to initialize the application domain. The exception message indicates that initialization has already occurred.  \n  \n This method is called immediately after the constructor. The default <xref:System.AppDomainManager.InitializeNewDomain%2A> implementation does nothing.  A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <xref:System.AppDomain>.  \n  \n Also, for add-in activations, a custom implementation could identify the current <xref:System.AppDomain> as the target application domain.  \n  \n Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain. To do this, adjust the <xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A> and <xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A> properties on the <xref:System.Security.Policy.ApplicationTrust> object that is assigned to the <xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=fullName> property of `appDomainInfo`, before you initialize the application domain.  \n  \n> [!NOTE]\n>  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.","nodes":[{"pos":[2,389],"content":"[!IMPORTANT]\n Do not use this method to initialize an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host. If you use this method to initialize the application domain, the host throws <xref:System.InvalidOperationException> when it attempts to initialize the application domain. The exception message indicates that initialization has already occurred.","leadings":["","> "],"nodes":[{"content":" Do not use this method to initialize an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host. If you use this method to initialize the application domain, the host throws <xref:System.InvalidOperationException> when it attempts to initialize the application domain. The exception message indicates that initialization has already occurred.","pos":[13,385],"nodes":[{"content":"Do not use this method to initialize an application domain in ASP.NET.","pos":[1,71]},{"content":"In ASP.NET, configuration must be handled by the host.","pos":[72,126]},{"content":"If you use this method to initialize the application domain, the host throws <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> when it attempts to initialize the application domain.","pos":[127,298],"source":" If you use this method to initialize the application domain, the host throws <xref:System.InvalidOperationException> when it attempts to initialize the application domain."},{"content":"The exception message indicates that initialization has already occurred.","pos":[299,372]}]}]},{"pos":[396,732],"content":"This method is called immediately after the constructor. The default <xref:System.AppDomainManager.InitializeNewDomain%2A> implementation does nothing.  A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <xref:System.AppDomain>.","nodes":[{"content":"This method is called immediately after the constructor. The default <xref:System.AppDomainManager.InitializeNewDomain%2A> implementation does nothing.  A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <xref:System.AppDomain>.","pos":[0,336],"nodes":[{"content":"This method is called immediately after the constructor.","pos":[0,56]},{"content":"The default <ph id=\"ph1\">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> implementation does nothing.","pos":[57,151],"source":" The default <xref:System.AppDomainManager.InitializeNewDomain%2A> implementation does nothing."},{"content":"A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <ph id=\"ph1\">&lt;xref:System.AppDomain&gt;</ph>.","pos":[153,336],"source":"  A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <xref:System.AppDomain>."}]}]},{"pos":[739,877],"content":"Also, for add-in activations, a custom implementation could identify the current <xref:System.AppDomain> as the target application domain.","nodes":[{"content":"Also, for add-in activations, a custom implementation could identify the current <ph id=\"ph1\">&lt;xref:System.AppDomain&gt;</ph> as the target application domain.","pos":[0,138],"source":"Also, for add-in activations, a custom implementation could identify the current <xref:System.AppDomain> as the target application domain."}]},{"pos":[884,1511],"content":"Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain. To do this, adjust the <xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A> and <xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A> properties on the <xref:System.Security.Policy.ApplicationTrust> object that is assigned to the <xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=fullName> property of `appDomainInfo`, before you initialize the application domain.","nodes":[{"content":"Beginning with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain.","pos":[0,219],"source":"Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain."},{"content":"To do this, adjust the <ph id=\"ph1\">&lt;xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A&gt;</ph> properties on the <ph id=\"ph3\">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> object that is assigned to the <ph id=\"ph4\">&lt;xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=fullName&gt;</ph> property of <ph id=\"ph5\">`appDomainInfo`</ph>, before you initialize the application domain.","pos":[220,627],"source":" To do this, adjust the <xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A> and <xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A> properties on the <xref:System.Security.Policy.ApplicationTrust> object that is assigned to the <xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=fullName> property of `appDomainInfo`, before you initialize the application domain."}]},{"pos":[1519,2026],"content":"[!NOTE]\n Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.","leadings":["","> "],"nodes":[{"content":"Only assemblies granted <ph id=\"ph1\">`FullTrust`</ph>, such as assemblies in the global assembly cache or identified as <ph id=\"ph2\">`fullTrustAssemblies`</ph> in the <ph id=\"ph3\">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName&gt;</ph> method can be loaded in the  <ph id=\"ph4\">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph> constructor and the <ph id=\"ph5\">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> method.","pos":[9,505],"source":" Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method."}]}],"pos":[25889,27928],"yaml":true,"extradata":"MT"},{"content":"An object that contains application domain initialization information.","nodes":[{"pos":[0,70],"content":"An object that contains application domain initialization information.","nodes":[{"content":"An object that contains application domain initialization information.","pos":[0,70]}]}],"pos":[28688,28759],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.AppDomainManager\n  commentId: T:System.AppDomainManager\n  id: AppDomainManager\n  children:\n  - System.AppDomainManager.#ctor\n  - System.AppDomainManager.ApplicationActivator\n  - System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)\n  - System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)\n  - System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)\n  - System.AppDomainManager.EntryAssembly\n  - System.AppDomainManager.HostExecutionContextManager\n  - System.AppDomainManager.HostSecurityManager\n  - System.AppDomainManager.InitializationFlags\n  - System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)\n  langs:\n  - csharp\n  name: AppDomainManager\n  nameWithType: AppDomainManager\n  fullName: System.AppDomainManager\n  type: Class\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Provides a managed equivalent of an unmanaged host.\n  remarks: \"> [!IMPORTANT]\\n>  Do not use <xref:System.AppDomainManager> to configure an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host.  \\n  \\n Implementing the <xref:System.AppDomainManager> class enables a hosting application to participate in the creation of new application domains. To replace the default <xref:System.AppDomainManager>, identify the assembly and type of the replacement <xref:System.AppDomainManager> in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the [\\\\<appDomainManagerAssembly>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md) and [\\\\<appDomainManagerType>](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md) elements in your configuration file. The assembly must be fully trusted and be contained in the global assembly cache or the directory of the starting application. The type and assembly names must be fully qualified in the environment variables. For example:  \\n  \\n `set APPDOMAIN_MANAGER_TYPE=MyNamespace.TestAppDomainManager`  \\n  \\n `set APPDOMAIN_MANAGER_ASM=customappDomainmanager, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f1368f7b12a08d72`  \\n  \\n> [!IMPORTANT]\\n>  If the assembly that contains your subclass of <xref:System.AppDomainManager> depends on assemblies that are marked with the conditional <xref:System.Security.AllowPartiallyTrustedCallersAttribute> (APTCA) attribute, you must include those assemblies in the list that you pass to the <xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A> property of the <xref:System.AppDomainSetup> you use to create application domains. Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.  \\n  \\n The <xref:System.AppDomainManager> is the managed equivalent of the unmanaged host. An <xref:System.AppDomainManager> object participates in the creation of new application domains in a process and can customize the new <xref:System.AppDomain> before other managed code runs. The <xref:System.AppDomainManager> can also supply host managers that participate in other aspects of common language runtime execution. For example, an <xref:System.AppDomainManager> can identify a <xref:System.Security.HostSecurityManager> object that participates in the security decisions of the application domain.  \\n  \\n> [!NOTE]\\n>  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.  \\n  \\n> [!NOTE]\\n>  This class contains a link demand and an inheritance demand at the class level. A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have infrastructure permission. For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).\"\n  example:\n  - \"The following example shows a very simple implementation of <xref:System.AppDomainManager>.  \\n  \\n [!code-csharp[System.AppDomainManager#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#1)]\\n [!code-vb[System.AppDomainManager#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class AppDomainManager : MarshalByRefObject\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AppDomainManager.#ctor\n  commentId: M:System.AppDomainManager.#ctor\n  id: '#ctor'\n  parent: System.AppDomainManager\n  langs:\n  - csharp\n  name: AppDomainManager()\n  nameWithType: AppDomainManager.AppDomainManager()\n  fullName: AppDomainManager.AppDomainManager()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.AppDomainManager\"></xref> class.\n  remarks: >-\n    > [!NOTE]\n\n    >  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.\n  syntax:\n    content: public AppDomainManager ();\n    parameters: []\n  overload: System.AppDomainManager.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AppDomainManager.ApplicationActivator\n  commentId: P:System.AppDomainManager.ApplicationActivator\n  id: ApplicationActivator\n  parent: System.AppDomainManager\n  langs:\n  - csharp\n  name: ApplicationActivator\n  nameWithType: AppDomainManager.ApplicationActivator\n  fullName: AppDomainManager.ApplicationActivator\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the application activator that handles the activation of add-ins and manifest-based applications for the domain.\n  remarks: There is a single designated instance of the <xref:System.Runtime.Hosting.ApplicationActivator> class in each <xref:System.AppDomain> to which all add-in and manifest-based application activation calls are routed. The <xref:System.AppDomainManager> for the current <xref:System.AppDomain> can provide its own custom <xref:System.Runtime.Hosting.ApplicationActivator>, or an instance of the default <xref:System.Runtime.Hosting.ApplicationActivator> is created.\n  syntax:\n    content: public virtual System.Runtime.Hosting.ApplicationActivator ApplicationActivator { get; }\n    return:\n      type: System.Runtime.Hosting.ApplicationActivator\n      description: The application activator.\n  overload: System.AppDomainManager.ApplicationActivator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)\n  commentId: M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)\n  id: CheckSecuritySettings(System.Security.SecurityState)\n  parent: System.AppDomainManager\n  langs:\n  - csharp\n  name: CheckSecuritySettings(SecurityState)\n  nameWithType: AppDomainManager.CheckSecuritySettings(SecurityState)\n  fullName: AppDomainManager.CheckSecuritySettings(SecurityState)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Indicates whether the specified operation is allowed in the application domain.\n  remarks: \"The default implementation of this method returns `false`.  \\n  \\n This method is called when the <xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=fullName> method has been called to increase the isolated storage quota. An application that hosts the common language runtime (CLR) can override the <xref:System.AppDomainManager.CheckSecuritySettings%2A> method to perform policy decisions based on an <xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState> object (which inherits <xref:System.Security.SecurityState>), and can then allow or prevent the increase. For example, a host could prompt the end user to approve or deny the request to increase the quota. The host's implementation of <xref:System.AppDomainManager.CheckSecuritySettings%2A> should take into account the possibility of denial-of-service attacks. For example, it should prompt the user only if the method is called from a user-initiated event such as a button click.\"\n  syntax:\n    content: public virtual bool CheckSecuritySettings (System.Security.SecurityState state);\n    parameters:\n    - id: state\n      type: System.Security.SecurityState\n      description: A subclass of <xref href=\"System.Security.SecurityState\"></xref> that identifies the operation whose security status is requested.\n    return:\n      type: System.Boolean\n      description: '`true` if the host allows the operation specified by <code>state</code> to be performed in the application domain; otherwise, `false`.'\n  overload: System.AppDomainManager.CheckSecuritySettings*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)\n  commentId: M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)\n  id: CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)\n  parent: System.AppDomainManager\n  langs:\n  - csharp\n  name: CreateDomain(String, Evidence, AppDomainSetup)\n  nameWithType: AppDomainManager.CreateDomain(String, Evidence, AppDomainSetup)\n  fullName: AppDomainManager.CreateDomain(String, Evidence, AppDomainSetup)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Returns a new or existing application domain.\n  remarks: \"The friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain. For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.  \\n  \\n The default <xref:System.AppDomainManager.CreateDomain%2A> method calls the protected <xref:System.AppDomainManager.CreateDomainHelper%2A> method to create the <xref:System.AppDomain>. Overrides of this method do not need to call the <xref:System.AppDomainManager.CreateDomainHelper%2A> method but can return an existing domain.\"\n  syntax:\n    content: public virtual AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);\n    parameters:\n    - id: friendlyName\n      type: System.String\n      description: The friendly name of the domain.\n    - id: securityInfo\n      type: System.Security.Policy.Evidence\n      description: An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.\n    - id: appDomainInfo\n      type: System.AppDomainSetup\n      description: An object that contains application domain initialization information.\n    return:\n      type: System.AppDomain\n      description: A new or existing application domain.\n  overload: System.AppDomainManager.CreateDomain*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)\n  commentId: M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)\n  id: CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)\n  parent: System.AppDomainManager\n  langs:\n  - csharp\n  name: CreateDomainHelper(String, Evidence, AppDomainSetup)\n  nameWithType: AppDomainManager.CreateDomainHelper(String, Evidence, AppDomainSetup)\n  fullName: AppDomainManager.CreateDomainHelper(String, Evidence, AppDomainSetup)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Provides a helper method to create an application domain.\n  remarks: \"This protected helper method handles the creation of a new application domain.  \\n  \\n This friendly name, specified by the `friendlyName` parameter, can be displayed in user interfaces to identify the domain. For more information, see the <xref:System.AppDomain.FriendlyName%2A> property.\"\n  syntax:\n    content: protected static AppDomain CreateDomainHelper (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);\n    parameters:\n    - id: friendlyName\n      type: System.String\n      description: The friendly name of the domain.\n    - id: securityInfo\n      type: System.Security.Policy.Evidence\n      description: An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.\n    - id: appDomainInfo\n      type: System.AppDomainSetup\n      description: An object that contains application domain initialization information.\n    return:\n      type: System.AppDomain\n      description: A newly created application domain.\n  overload: System.AppDomainManager.CreateDomainHelper*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>friendlyName</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AppDomainManager.EntryAssembly\n  commentId: P:System.AppDomainManager.EntryAssembly\n  id: EntryAssembly\n  parent: System.AppDomainManager\n  langs:\n  - csharp\n  name: EntryAssembly\n  nameWithType: AppDomainManager.EntryAssembly\n  fullName: AppDomainManager.EntryAssembly\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the entry assembly for an application.\n  remarks: If the application is a manifest-activated application, the entry assembly is determined from the application manifest. If the application is not manifest activated, the entry assembly is the process executable in the default application domain. In other application domains, the entry assembly is the first executable that was executed by the <xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=fullName> method.\n  syntax:\n    content: public virtual System.Reflection.Assembly EntryAssembly { get; }\n    return:\n      type: System.Reflection.Assembly\n      description: The entry assembly for the application.\n  overload: System.AppDomainManager.EntryAssembly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AppDomainManager.HostExecutionContextManager\n  commentId: P:System.AppDomainManager.HostExecutionContextManager\n  id: HostExecutionContextManager\n  parent: System.AppDomainManager\n  langs:\n  - csharp\n  name: HostExecutionContextManager\n  nameWithType: AppDomainManager.HostExecutionContextManager\n  fullName: AppDomainManager.HostExecutionContextManager\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the host execution context manager that manages the flow of the execution context.\n  remarks: This property allows a host to provide a <xref:System.Threading.HostExecutionContextManager> that can participate in the flow of the execution context across asynchronous calls.\n  syntax:\n    content: public virtual System.Threading.HostExecutionContextManager HostExecutionContextManager { get; }\n    return:\n      type: System.Threading.HostExecutionContextManager\n      description: The host execution context manager.\n  overload: System.AppDomainManager.HostExecutionContextManager*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AppDomainManager.HostSecurityManager\n  commentId: P:System.AppDomainManager.HostSecurityManager\n  id: HostSecurityManager\n  parent: System.AppDomainManager\n  langs:\n  - csharp\n  name: HostSecurityManager\n  nameWithType: AppDomainManager.HostSecurityManager\n  fullName: AppDomainManager.HostSecurityManager\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the host security manager that participates in security decisions for the application domain.\n  remarks: This property allows a host to provide a <xref:System.Security.HostSecurityManager> to participate in the security decisions for the application domain.\n  example:\n  - \"The following example shows an override of the <xref:System.AppDomainManager.HostSecurityManager%2A> property for a custom application domain manager. This code example is part of a larger example provided for the <xref:System.AppDomainManager> class.  \\n  \\n [!code-csharp[System.AppDomainManager#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#3)]\\n [!code-vb[System.AppDomainManager#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#3)]\"\n  syntax:\n    content: public virtual System.Security.HostSecurityManager HostSecurityManager { get; }\n    return:\n      type: System.Security.HostSecurityManager\n      description: The host security manager.\n  overload: System.AppDomainManager.HostSecurityManager*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AppDomainManager.InitializationFlags\n  commentId: P:System.AppDomainManager.InitializationFlags\n  id: InitializationFlags\n  parent: System.AppDomainManager\n  langs:\n  - csharp\n  name: InitializationFlags\n  nameWithType: AppDomainManager.InitializationFlags\n  fullName: AppDomainManager.InitializationFlags\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Gets the initialization flags for custom application domain managers.\n  syntax:\n    content: public AppDomainManagerInitializationOptions InitializationFlags { get; set; }\n    return:\n      type: System.AppDomainManagerInitializationOptions\n      description: A bitwise combination of the enumeration values that describe the initialization action to perform. The default is <xref href=\"System.AppDomainManagerInitializationOptions.None\"></xref>.\n  overload: System.AppDomainManager.InitializationFlags*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)\n  commentId: M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)\n  id: InitializeNewDomain(System.AppDomainSetup)\n  parent: System.AppDomainManager\n  langs:\n  - csharp\n  name: InitializeNewDomain(AppDomainSetup)\n  nameWithType: AppDomainManager.InitializeNewDomain(AppDomainSetup)\n  fullName: AppDomainManager.InitializeNewDomain(AppDomainSetup)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System\n  summary: Initializes the new application domain.\n  remarks: \"> [!IMPORTANT]\\n>  Do not use this method to initialize an application domain in ASP.NET. In ASP.NET, configuration must be handled by the host. If you use this method to initialize the application domain, the host throws <xref:System.InvalidOperationException> when it attempts to initialize the application domain. The exception message indicates that initialization has already occurred.  \\n  \\n This method is called immediately after the constructor. The default <xref:System.AppDomainManager.InitializeNewDomain%2A> implementation does nothing.  A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <xref:System.AppDomain>.  \\n  \\n Also, for add-in activations, a custom implementation could identify the current <xref:System.AppDomain> as the target application domain.  \\n  \\n Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain. To do this, adjust the <xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A> and <xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A> properties on the <xref:System.Security.Policy.ApplicationTrust> object that is assigned to the <xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=fullName> property of `appDomainInfo`, before you initialize the application domain.  \\n  \\n> [!NOTE]\\n>  Only assemblies granted `FullTrust`, such as assemblies in the global assembly cache or identified as `fullTrustAssemblies` in the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=fullName> method can be loaded in the  <xref:System.AppDomainManager.%23ctor%2A> constructor and the <xref:System.AppDomainManager.InitializeNewDomain%2A> method.\"\n  example:\n  - \"The following example shows an override of the <xref:System.AppDomainManager.InitializeNewDomain%2A> method for a custom application domain manager. This code example is part of a larger example provided for the <xref:System.AppDomainManager> class.  \\n  \\n [!code-csharp[System.AppDomainManager#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomainManager/CS/customAppDomainManager.cs#2)]\\n [!code-vb[System.AppDomainManager#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomainManager/VB/customAppDomainManager.vb#2)]\"\n  syntax:\n    content: public virtual void InitializeNewDomain (AppDomainSetup appDomainInfo);\n    parameters:\n    - id: appDomainInfo\n      type: System.AppDomainSetup\n      description: An object that contains application domain initialization information.\n  overload: System.AppDomainManager.InitializeNewDomain*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: false\n  name: MarshalByRefObject\n  nameWithType: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.AppDomainManager.#ctor\n  parent: System.AppDomainManager\n  isExternal: false\n  name: AppDomainManager()\n  nameWithType: AppDomainManager.AppDomainManager()\n  fullName: AppDomainManager.AppDomainManager()\n- uid: System.AppDomainManager.ApplicationActivator\n  parent: System.AppDomainManager\n  isExternal: false\n  name: ApplicationActivator\n  nameWithType: AppDomainManager.ApplicationActivator\n  fullName: AppDomainManager.ApplicationActivator\n- uid: System.Runtime.Hosting.ApplicationActivator\n  parent: System.Runtime.Hosting\n  isExternal: false\n  name: ApplicationActivator\n  nameWithType: ApplicationActivator\n  fullName: System.Runtime.Hosting.ApplicationActivator\n- uid: System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)\n  parent: System.AppDomainManager\n  isExternal: false\n  name: CheckSecuritySettings(SecurityState)\n  nameWithType: AppDomainManager.CheckSecuritySettings(SecurityState)\n  fullName: AppDomainManager.CheckSecuritySettings(SecurityState)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.SecurityState\n  parent: System.Security\n  isExternal: false\n  name: SecurityState\n  nameWithType: SecurityState\n  fullName: System.Security.SecurityState\n- uid: System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)\n  parent: System.AppDomainManager\n  isExternal: false\n  name: CreateDomain(String, Evidence, AppDomainSetup)\n  nameWithType: AppDomainManager.CreateDomain(String, Evidence, AppDomainSetup)\n  fullName: AppDomainManager.CreateDomain(String, Evidence, AppDomainSetup)\n- uid: System.AppDomain\n  parent: System\n  isExternal: false\n  name: AppDomain\n  nameWithType: AppDomain\n  fullName: System.AppDomain\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Policy.Evidence\n  parent: System.Security.Policy\n  isExternal: false\n  name: Evidence\n  nameWithType: Evidence\n  fullName: System.Security.Policy.Evidence\n- uid: System.AppDomainSetup\n  parent: System\n  isExternal: false\n  name: AppDomainSetup\n  nameWithType: AppDomainSetup\n  fullName: System.AppDomainSetup\n- uid: System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)\n  parent: System.AppDomainManager\n  isExternal: false\n  name: CreateDomainHelper(String, Evidence, AppDomainSetup)\n  nameWithType: AppDomainManager.CreateDomainHelper(String, Evidence, AppDomainSetup)\n  fullName: AppDomainManager.CreateDomainHelper(String, Evidence, AppDomainSetup)\n- uid: System.AppDomainManager.EntryAssembly\n  parent: System.AppDomainManager\n  isExternal: false\n  name: EntryAssembly\n  nameWithType: AppDomainManager.EntryAssembly\n  fullName: AppDomainManager.EntryAssembly\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.AppDomainManager.HostExecutionContextManager\n  parent: System.AppDomainManager\n  isExternal: false\n  name: HostExecutionContextManager\n  nameWithType: AppDomainManager.HostExecutionContextManager\n  fullName: AppDomainManager.HostExecutionContextManager\n- uid: System.Threading.HostExecutionContextManager\n  parent: System.Threading\n  isExternal: false\n  name: HostExecutionContextManager\n  nameWithType: HostExecutionContextManager\n  fullName: System.Threading.HostExecutionContextManager\n- uid: System.AppDomainManager.HostSecurityManager\n  parent: System.AppDomainManager\n  isExternal: false\n  name: HostSecurityManager\n  nameWithType: AppDomainManager.HostSecurityManager\n  fullName: AppDomainManager.HostSecurityManager\n- uid: System.Security.HostSecurityManager\n  parent: System.Security\n  isExternal: false\n  name: HostSecurityManager\n  nameWithType: HostSecurityManager\n  fullName: System.Security.HostSecurityManager\n- uid: System.AppDomainManager.InitializationFlags\n  parent: System.AppDomainManager\n  isExternal: false\n  name: InitializationFlags\n  nameWithType: AppDomainManager.InitializationFlags\n  fullName: AppDomainManager.InitializationFlags\n- uid: System.AppDomainManagerInitializationOptions\n  parent: System\n  isExternal: false\n  name: AppDomainManagerInitializationOptions\n  nameWithType: AppDomainManagerInitializationOptions\n  fullName: System.AppDomainManagerInitializationOptions\n- uid: System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)\n  parent: System.AppDomainManager\n  isExternal: false\n  name: InitializeNewDomain(AppDomainSetup)\n  nameWithType: AppDomainManager.InitializeNewDomain(AppDomainSetup)\n  fullName: AppDomainManager.InitializeNewDomain(AppDomainSetup)\n- uid: System.AppDomainManager.#ctor*\n  parent: System.AppDomainManager\n  isExternal: false\n  name: AppDomainManager\n  nameWithType: AppDomainManager.AppDomainManager\n  fullName: AppDomainManager.AppDomainManager\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n- uid: System.AppDomainManager.ApplicationActivator*\n  parent: System.AppDomainManager\n  isExternal: false\n  name: ApplicationActivator\n  nameWithType: AppDomainManager.ApplicationActivator\n  fullName: AppDomainManager.ApplicationActivator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n- uid: System.AppDomainManager.CheckSecuritySettings*\n  parent: System.AppDomainManager\n  isExternal: false\n  name: CheckSecuritySettings\n  nameWithType: AppDomainManager.CheckSecuritySettings\n  fullName: AppDomainManager.CheckSecuritySettings\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n- uid: System.AppDomainManager.CreateDomain*\n  parent: System.AppDomainManager\n  isExternal: false\n  name: CreateDomain\n  nameWithType: AppDomainManager.CreateDomain\n  fullName: AppDomainManager.CreateDomain\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n- uid: System.AppDomainManager.CreateDomainHelper*\n  parent: System.AppDomainManager\n  isExternal: false\n  name: CreateDomainHelper\n  nameWithType: AppDomainManager.CreateDomainHelper\n  fullName: AppDomainManager.CreateDomainHelper\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n- uid: System.AppDomainManager.EntryAssembly*\n  parent: System.AppDomainManager\n  isExternal: false\n  name: EntryAssembly\n  nameWithType: AppDomainManager.EntryAssembly\n  fullName: AppDomainManager.EntryAssembly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n- uid: System.AppDomainManager.HostExecutionContextManager*\n  parent: System.AppDomainManager\n  isExternal: false\n  name: HostExecutionContextManager\n  nameWithType: AppDomainManager.HostExecutionContextManager\n  fullName: AppDomainManager.HostExecutionContextManager\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n- uid: System.AppDomainManager.HostSecurityManager*\n  parent: System.AppDomainManager\n  isExternal: false\n  name: HostSecurityManager\n  nameWithType: AppDomainManager.HostSecurityManager\n  fullName: AppDomainManager.HostSecurityManager\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n- uid: System.AppDomainManager.InitializationFlags*\n  parent: System.AppDomainManager\n  isExternal: false\n  name: InitializationFlags\n  nameWithType: AppDomainManager.InitializationFlags\n  fullName: AppDomainManager.InitializationFlags\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n- uid: System.AppDomainManager.InitializeNewDomain*\n  parent: System.AppDomainManager\n  isExternal: false\n  name: InitializeNewDomain\n  nameWithType: AppDomainManager.InitializeNewDomain\n  fullName: AppDomainManager.InitializeNewDomain\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/AppDomainManager.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n"}