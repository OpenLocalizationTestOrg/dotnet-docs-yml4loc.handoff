{"nodes":[{"content":"Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.","nodes":[{"pos":[0,118],"content":"Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.","nodes":[{"content":"Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.","pos":[0,118]}]}],"pos":[774,893],"yaml":true},{"content":"Ordinarily, types and members with `internal` scope (in C#) and `friend` scope (in Visual Basic) are visible only in the assembly in which they are defined. The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.  \n  \n The attribute is applied at the assembly level. This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project. You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly. You can define multiple friend assemblies in two ways. They can appear as individual assembly-level attributes, as the following example illustrates.  \n  \n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  \n  \n They can also appear with separate<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> tags but a single `assembly` keyword, as the following example illustrates.  \n  \n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  \n  \n The friend assembly is identified by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor. Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.  \n  \n If both assemblies are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file name extension.  \n  \n If both assemblies are signed with a strong name, the argument to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token). To get the full public key of a strong-named assembly, see the [Getting the full public key](#Key) section later in this article. For more information about using <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> with strong-named assemblies, see the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor.  \n  \n Do not include values for the <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, or <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error. If you use a compiler that does not treat it as an error (such as the [IL Assembler (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) and the assemblies are strong-named, a <xref:System.MethodAccessException> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute.  \n  \n For more information about how to use this attribute, see the following topics:  \n  \n-   [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  \n  \n-   [Friend Assemblies](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  \n  \n<a name=\"Key\"></a>   \n## Getting the full public key  \n You can use the [Strong Name Tool (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file. To do this, you perform the following steps:  \n  \n1.  Extract the public key from the strong-named key file to a separate file:  \n  \n     **Sn -p**  *snk_file* *outfile*  \n  \n2.  Display the full public key to the console:  \n  \n     **Sn -tp**  *outfile*  \n  \n3.  Copy and paste the full public key value into your source code.  \n  \n## Compiling the friend assembly with C#  \n If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option. This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references. The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.  \n  \n## Compiling the friend assembly with C++  \n In C++, in order to make the internal members enabled by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute accessible to a friend assembly, you must use the `as_friend` attribute in the C++  directive. For more information, see [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd).","nodes":[{"pos":[0,336],"content":"Ordinarily, types and members with `internal` scope (in C#) and `friend` scope (in Visual Basic) are visible only in the assembly in which they are defined. The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.","nodes":[{"content":"Ordinarily, types and members with <ph id=\"ph1\">`internal`</ph> scope (in C#) and <ph id=\"ph2\">`friend`</ph> scope (in Visual Basic) are visible only in the assembly in which they are defined.","pos":[0,156],"source":"Ordinarily, types and members with `internal` scope (in C#) and `friend` scope (in Visual Basic) are visible only in the assembly in which they are defined."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.","pos":[157,336],"source":" The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly."}]},{"pos":[343,824],"content":"The attribute is applied at the assembly level. This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project. You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly. You can define multiple friend assemblies in two ways. They can appear as individual assembly-level attributes, as the following example illustrates.","nodes":[{"content":"The attribute is applied at the assembly level. This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project. You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly. You can define multiple friend assemblies in two ways. They can appear as individual assembly-level attributes, as the following example illustrates.","pos":[0,481],"nodes":[{"content":"The attribute is applied at the assembly level.","pos":[0,47]},{"content":"This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project.","pos":[48,197]},{"content":"You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly.","pos":[198,331]},{"content":"You can define multiple friend assemblies in two ways.","pos":[332,386]},{"content":"They can appear as individual assembly-level attributes, as the following example illustrates.","pos":[387,481]}]}]},{"pos":[831,1244],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Runtime.CompilerServices.InternalsVisibleToAttribute#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Runtime.CompilerServices.InternalsVisibleToAttribute#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]"},{"pos":[1251,1427],"content":"They can also appear with separate<ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> tags but a single <ph id=\"ph2\">`assembly`</ph> keyword, as the following example illustrates.","source":"They can also appear with separate<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> tags but a single `assembly` keyword, as the following example illustrates."},{"pos":[1434,1847],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Runtime.CompilerServices.InternalsVisibleToAttribute#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Runtime.CompilerServices.InternalsVisibleToAttribute#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]"},{"pos":[1854,2107],"content":"The friend assembly is identified by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor. Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.","nodes":[{"content":"The friend assembly is identified by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor. Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.","pos":[0,253],"nodes":[{"content":"The friend assembly is identified by the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor.","pos":[0,131],"source":"The friend assembly is identified by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor."},{"content":"Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.","pos":[132,253]}]}]},{"pos":[2114,2278],"content":"If both assemblies are unsigned, the <ph id=\"ph1\">`assemblyName`</ph> argument consists of the name of the friend assembly, specified without a directory path or file name extension.","source":"If both assemblies are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file name extension."},{"pos":[2285,2958],"content":"If both assemblies are signed with a strong name, the argument to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token). To get the full public key of a strong-named assembly, see the [Getting the full public key](#Key) section later in this article. For more information about using <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> with strong-named assemblies, see the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor.","nodes":[{"content":"If both assemblies are signed with a strong name, the argument to the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token).","pos":[0,314],"source":"If both assemblies are signed with a strong name, the argument to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token)."},{"content":"To get the full public key of a strong-named assembly, see the <bpt id=\"p1\">[</bpt>Getting the full public key<ept id=\"p1\">](#Key)</ept> section later in this article.","pos":[315,444],"source":" To get the full public key of a strong-named assembly, see the [Getting the full public key](#Key) section later in this article."},{"content":"For more information about using <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> with strong-named assemblies, see the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor.","pos":[445,673],"source":" For more information about using <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> with strong-named assemblies, see the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor."}]},{"pos":[2965,3665],"content":"Do not include values for the <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, or <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error. If you use a compiler that does not treat it as an error (such as the [IL Assembler (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) and the assemblies are strong-named, a <xref:System.MethodAccessException> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute.","nodes":[{"content":"Do not include values for the <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A&gt;</ph> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error.","pos":[0,294],"source":"Do not include values for the <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, or <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error."},{"content":"If you use a compiler that does not treat it as an error (such as the <bpt id=\"p1\">[</bpt>IL Assembler (ILAsm.exe)<ept id=\"p1\">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>) and the assemblies are strong-named, a <ph id=\"ph1\">&lt;xref:System.MethodAccessException&gt;</ph> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute.","pos":[295,700],"source":" If you use a compiler that does not treat it as an error (such as the [IL Assembler (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) and the assemblies are strong-named, a <xref:System.MethodAccessException> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute."}]},{"pos":[3672,3751],"content":"For more information about how to use this attribute, see the following topics:","nodes":[{"content":"For more information about how to use this attribute, see the following topics:","pos":[0,79]}]},{"pos":[3761,3858],"content":"<bpt id=\"p1\">[</bpt>Friend Assemblies (C++)<ept id=\"p1\">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept>","source":"[Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)"},{"pos":[3868,3959],"content":"<bpt id=\"p1\">[</bpt>Friend Assemblies<ept id=\"p1\">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept>","source":"[Friend Assemblies](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)"},{"pos":[3990,4017],"content":"Getting the full public key","linkify":"Getting the full public key","nodes":[{"content":"Getting the full public key","pos":[0,27]}]},{"pos":[4021,4229],"content":"You can use the [Strong Name Tool (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file. To do this, you perform the following steps:","nodes":[{"content":"You can use the <bpt id=\"p1\">[</bpt>Strong Name Tool (Sn.exe)<ept id=\"p1\">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to retrieve the full public key from a strong-named key (.snk) file.","pos":[0,163],"source":"You can use the [Strong Name Tool (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file."},{"content":"To do this, you perform the following steps:","pos":[164,208]}]},{"pos":[4239,4312],"content":"Extract the public key from the strong-named key file to a separate file:","nodes":[{"content":"Extract the public key from the strong-named key file to a separate file:","pos":[0,73]}]},{"pos":[4323,4354],"content":"<bpt id=\"p1\">**</bpt>Sn -p<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>snk_file<ept id=\"p2\">*</ept> <bpt id=\"p3\">*</bpt>outfile<ept id=\"p3\">*</ept>","source":"**Sn -p**  *snk_file* *outfile*"},{"pos":[4364,4407],"content":"Display the full public key to the console:","nodes":[{"content":"Display the full public key to the console:","pos":[0,43]}]},{"pos":[4418,4439],"content":"<bpt id=\"p1\">**</bpt>Sn -tp<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>outfile<ept id=\"p2\">*</ept>","source":"**Sn -tp**  *outfile*"},{"pos":[4449,4512],"content":"Copy and paste the full public key value into your source code.","nodes":[{"content":"Copy and paste the full public key value into your source code.","pos":[0,63]}]},{"pos":[4521,4558],"content":"Compiling the friend assembly with C#","linkify":"Compiling the friend assembly with C#","nodes":[{"content":"Compiling the friend assembly with C#","pos":[0,37]}]},{"pos":[4562,5084],"content":"If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option. This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references. The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.","nodes":[{"content":"If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the <bpt id=\"p1\">**</bpt>/out<ept id=\"p1\">**</ept> compiler option.","pos":[0,168],"source":"If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option."},{"content":"This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.","pos":[169,319]},{"content":"The <bpt id=\"p1\">**</bpt>/out<ept id=\"p1\">**</ept> compiler option is optional for the Visual Basic compiler, and the corresponding <bpt id=\"p2\">**</bpt>-out<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>-o<ept id=\"p3\">**</ept> compiler option should not be used when compiling friend assemblies with the F# compiler.","pos":[320,522],"source":" The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler."}]},{"pos":[5093,5131],"content":"Compiling the friend assembly with C++","linkify":"Compiling the friend assembly with C++","nodes":[{"content":"Compiling the friend assembly with C++","pos":[0,38]}]},{"pos":[5135,5492],"content":"In C++, in order to make the internal members enabled by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute accessible to a friend assembly, you must use the `as_friend` attribute in the C++  directive. For more information, see [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd).","nodes":[{"content":"In C++, in order to make the internal members enabled by the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute accessible to a friend assembly, you must use the <ph id=\"ph2\">`as_friend`</ph> attribute in the C++  directive.","pos":[0,232],"source":"In C++, in order to make the internal members enabled by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute accessible to a friend assembly, you must use the `as_friend` attribute in the C++  directive."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Friend Assemblies (C++)<ept id=\"p1\">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept>.","pos":[233,357],"source":" For more information, see [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)."}]}],"pos":[904,6445],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute\"></xref> class with the name of the specified friend assembly.","nodes":[{"pos":[0,168],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute\"&gt;&lt;/xref&gt;</ph> class with the name of the specified friend assembly.","source":"Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute\"></xref> class with the name of the specified friend assembly."}],"pos":[16071,16240],"yaml":true},{"content":"The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor defines a friend assembly, which is an assembly that has access to the internal types and members of the current assembly.  \n  \n Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name. (For more information about strong-named assemblies, see [Creating and Using Strong-Named Assemblies](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).) If both are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file extension. If both are signed, `assemblyName` consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token). The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the `assemblyName` argument.  \n  \n> [!IMPORTANT]\n>  If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option. This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references. The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.  \n  \n You can use [Sn.exe (Strong Name Tool)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file. To do this, you perform the following steps:  \n  \n1.  Extract the public key from the strong-named key file to a separate file:  \n  \n     **Sn -p**  *snk_file* *outfile*  \n  \n2.  Display the full public key to the console:  \n  \n     **Sn -tp**  *outfile*  \n  \n3.  Copy and paste the full public key value into your source code.  \n  \n For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:  \n  \n-   [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  \n  \n-   [Friend Assemblies](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)","nodes":[{"pos":[0,216],"content":"The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor defines a friend assembly, which is an assembly that has access to the internal types and members of the current assembly.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor defines a friend assembly, which is an assembly that has access to the internal types and members of the current assembly.","pos":[0,216],"source":"The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor defines a friend assembly, which is an assembly that has access to the internal types and members of the current assembly."}]},{"pos":[223,1026],"content":"Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name. (For more information about strong-named assemblies, see [Creating and Using Strong-Named Assemblies](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).) If both are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file extension. If both are signed, `assemblyName` consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token). The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the `assemblyName` argument.","nodes":[{"content":"Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name.","pos":[0,110]},{"content":"(For more information about strong-named assemblies, see <bpt id=\"p1\">[</bpt>Creating and Using Strong-Named Assemblies<ept id=\"p1\">](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>.) If both are unsigned, the <ph id=\"ph1\">`assemblyName`</ph> argument consists of the name of the friend assembly, specified without a directory path or file extension.","pos":[111,435],"source":" (For more information about strong-named assemblies, see [Creating and Using Strong-Named Assemblies](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).) If both are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file extension."},{"content":"If both are signed, <ph id=\"ph1\">`assemblyName`</ph> consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token).","pos":[436,628],"source":" If both are signed, `assemblyName` consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token)."},{"content":"The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the <ph id=\"ph1\">`assemblyName`</ph> argument.","pos":[629,803],"source":" The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the `assemblyName` argument."}]},{"pos":[1034,1572],"content":"[!IMPORTANT]\n If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option. This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references. The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.","leadings":["","> "],"nodes":[{"content":" If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option. This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references. The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.","pos":[13,536],"nodes":[{"content":"If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the <bpt id=\"p1\">**</bpt>/out<ept id=\"p1\">**</ept> compiler option.","pos":[1,169],"source":" If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option."},{"content":"This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.","pos":[170,320]},{"content":"The <bpt id=\"p1\">**</bpt>/out<ept id=\"p1\">**</ept> compiler option is optional for the Visual Basic compiler, and the corresponding <bpt id=\"p2\">**</bpt>-out<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>-o<ept id=\"p3\">**</ept> compiler option should not be used when compiling friend assemblies with the F# compiler.","pos":[321,523],"source":" The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler."}]}]},{"pos":[1579,1783],"content":"You can use [Sn.exe (Strong Name Tool)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file. To do this, you perform the following steps:","nodes":[{"content":"You can use <bpt id=\"p1\">[</bpt>Sn.exe (Strong Name Tool)<ept id=\"p1\">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to retrieve the full public key from a strong-named key (.snk) file.","pos":[0,159],"source":"You can use [Sn.exe (Strong Name Tool)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file."},{"content":"To do this, you perform the following steps:","pos":[160,204]}]},{"pos":[1793,1866],"content":"Extract the public key from the strong-named key file to a separate file:","nodes":[{"content":"Extract the public key from the strong-named key file to a separate file:","pos":[0,73]}]},{"pos":[1877,1908],"content":"<bpt id=\"p1\">**</bpt>Sn -p<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>snk_file<ept id=\"p2\">*</ept> <bpt id=\"p3\">*</bpt>outfile<ept id=\"p3\">*</ept>","source":"**Sn -p**  *snk_file* *outfile*"},{"pos":[1918,1961],"content":"Display the full public key to the console:","nodes":[{"content":"Display the full public key to the console:","pos":[0,43]}]},{"pos":[1972,1993],"content":"<bpt id=\"p1\">**</bpt>Sn -tp<ept id=\"p1\">**</ept>  <bpt id=\"p2\">*</bpt>outfile<ept id=\"p2\">*</ept>","source":"**Sn -tp**  *outfile*"},{"pos":[2003,2066],"content":"Copy and paste the full public key value into your source code.","nodes":[{"content":"Copy and paste the full public key value into your source code.","pos":[0,63]}]},{"pos":[2073,2218],"content":"For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:","nodes":[{"content":"For more information about how to use the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute, see the following topics:","pos":[0,145],"source":"For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:"}]},{"pos":[2228,2325],"content":"<bpt id=\"p1\">[</bpt>Friend Assemblies (C++)<ept id=\"p1\">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept>","source":"[Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)"},{"pos":[2335,2426],"content":"<bpt id=\"p1\">[</bpt>Friend Assemblies<ept id=\"p1\">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept>","source":"[Friend Assemblies](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)"}],"pos":[16251,18703],"yaml":true,"extradata":"MT"},{"content":"The name of a friend assembly.","nodes":[{"pos":[0,30],"content":"The name of a friend assembly.","nodes":[{"content":"The name of a friend assembly.","pos":[0,30]}]}],"pos":[22760,22791],"yaml":true},{"content":"This property is not implemented.","nodes":[{"pos":[0,33],"content":"This property is not implemented.","nodes":[{"content":"This property is not implemented.","pos":[0,33]}]}],"pos":[24572,24606],"yaml":true},{"content":"This property does not return a value.","nodes":[{"pos":[0,38],"content":"This property does not return a value.","nodes":[{"content":"This property does not return a value.","pos":[0,38]}]}],"pos":[24733,24772],"yaml":true},{"content":"Gets the name of the friend assembly to which all types and type members that are marked with the `internal` keyword are to be made visible.","nodes":[{"pos":[0,140],"content":"Gets the name of the friend assembly to which all types and type members that are marked with the <ph id=\"ph1\">`internal`</ph> keyword are to be made visible.","source":"Gets the name of the friend assembly to which all types and type members that are marked with the `internal` keyword are to be made visible."}],"pos":[26181,26322],"yaml":true},{"content":"For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:  \n  \n-   [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  \n  \n-   [Friend Assemblies](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)","nodes":[{"pos":[0,145],"content":"For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:","nodes":[{"content":"For more information about how to use the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute, see the following topics:","pos":[0,145],"source":"For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:"}]},{"pos":[155,252],"content":"<bpt id=\"p1\">[</bpt>Friend Assemblies (C++)<ept id=\"p1\">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept>","source":"[Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)"},{"pos":[262,353],"content":"<bpt id=\"p1\">[</bpt>Friend Assemblies<ept id=\"p1\">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept>","source":"[Friend Assemblies](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)"}],"pos":[26333,26693],"yaml":true,"extradata":"MT"},{"content":"A string that represents the name of the friend assembly.","nodes":[{"pos":[0,57],"content":"A string that represents the name of the friend assembly.","nodes":[{"content":"A string that represents the name of the friend assembly.","pos":[0,57]}]}],"pos":[26809,26867],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  commentId: T:System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  id: InternalsVisibleToAttribute\n  children:\n  - System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)\n  - System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible\n  - System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName\n  langs:\n  - csharp\n  name: InternalsVisibleToAttribute\n  nameWithType: InternalsVisibleToAttribute\n  fullName: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.\n  remarks: \"Ordinarily, types and members with `internal` scope (in C#) and `friend` scope (in Visual Basic) are visible only in the assembly in which they are defined. The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.  \\n  \\n The attribute is applied at the assembly level. This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project. You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly. You can define multiple friend assemblies in two ways. They can appear as individual assembly-level attributes, as the following example illustrates.  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]\\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  \\n  \\n They can also appear with separate<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> tags but a single `assembly` keyword, as the following example illustrates.  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]\\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  \\n  \\n The friend assembly is identified by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor. Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.  \\n  \\n If both assemblies are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file name extension.  \\n  \\n If both assemblies are signed with a strong name, the argument to the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token). To get the full public key of a strong-named assembly, see the [Getting the full public key](#Key) section later in this article. For more information about using <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> with strong-named assemblies, see the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor.  \\n  \\n Do not include values for the <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, or <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error. If you use a compiler that does not treat it as an error (such as the [IL Assembler (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) and the assemblies are strong-named, a <xref:System.MethodAccessException> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute.  \\n  \\n For more information about how to use this attribute, see the following topics:  \\n  \\n-   [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  \\n  \\n-   [Friend Assemblies](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  \\n  \\n<a name=\\\"Key\\\"></a>   \\n## Getting the full public key  \\n You can use the [Strong Name Tool (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file. To do this, you perform the following steps:  \\n  \\n1.  Extract the public key from the strong-named key file to a separate file:  \\n  \\n     **Sn -p**  *snk_file* *outfile*  \\n  \\n2.  Display the full public key to the console:  \\n  \\n     **Sn -tp**  *outfile*  \\n  \\n3.  Copy and paste the full public key value into your source code.  \\n  \\n## Compiling the friend assembly with C#  \\n If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option. This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references. The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.  \\n  \\n## Compiling the friend assembly with C++  \\n In C++, in order to make the internal members enabled by the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute accessible to a friend assembly, you must use the `as_friend` attribute in the C++  directive. For more information, see [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd).\"\n  example:\n  - \"**Signed assemblies**  \\n  \\n The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` method named `AppendDirectorySeparator` in a signed assembly visible to another signed assembly. It defines a `FileUtilities` class that includes an internal `AppendDirectorySeparator` method. The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute is applied to the assembly that contains the `FileUtilities` class. The attribute allows an assembly named `Friend1` to access this internal member.  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]\\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  \\n  \\n If the following example is compiled into a strong-named assembly named `Friend1`, the `Example.Main` method in `Friend1` can successfully call the `FileUtilities.AppendDirectorySeparator` method, although the method is internal to the `Assembly1` assembly. Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.  \\n  \\n [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]\\n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]\\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  \\n  \\n **Unsigned assemblies**  \\n  \\n The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` member of an unsigned assembly visible to another unsigned assembly. The attribute ensures that the `internal` `StringLib.IsFirstLetterUpperCase` method in an assembly named `UtilityLib` is visible to the code in an assembly named `Friend2`.  The following is the source code for UtilityLib.dll:  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]\\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  \\n  \\n The following example provides the source code for the `Friend2` assembly. Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.  \\n  \\n [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]\\n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]\\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)]\n\n      public sealed class InternalsVisibleToAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/InternalsVisibleToAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)\n  commentId: M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  langs:\n  - csharp\n  name: InternalsVisibleToAttribute(String)\n  nameWithType: InternalsVisibleToAttribute.InternalsVisibleToAttribute(String)\n  fullName: InternalsVisibleToAttribute.InternalsVisibleToAttribute(String)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.InternalsVisibleToAttribute\"></xref> class with the name of the specified friend assembly.\n  remarks: \"The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> constructor defines a friend assembly, which is an assembly that has access to the internal types and members of the current assembly.  \\n  \\n Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name. (For more information about strong-named assemblies, see [Creating and Using Strong-Named Assemblies](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).) If both are unsigned, the `assemblyName` argument consists of the name of the friend assembly, specified without a directory path or file extension. If both are signed, `assemblyName` consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token). The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the `assemblyName` argument.  \\n  \\n> [!IMPORTANT]\\n>  If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the **/out** compiler option. This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references. The **/out** compiler option is optional for the Visual Basic compiler, and the corresponding **-out** or **-o** compiler option should not be used when compiling friend assemblies with the F# compiler.  \\n  \\n You can use [Sn.exe (Strong Name Tool)](~/docs/framework/tools/sn-exe-strong-name-tool.md) to retrieve the full public key from a strong-named key (.snk) file. To do this, you perform the following steps:  \\n  \\n1.  Extract the public key from the strong-named key file to a separate file:  \\n  \\n     **Sn -p**  *snk_file* *outfile*  \\n  \\n2.  Display the full public key to the console:  \\n  \\n     **Sn -tp**  *outfile*  \\n  \\n3.  Copy and paste the full public key value into your source code.  \\n  \\n For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:  \\n  \\n-   [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  \\n  \\n-   [Friend Assemblies](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)\"\n  example:\n  - \"**Signed assemblies**  \\n  \\n The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` method named `AppendDirectorySeparator` in a signed assembly visible to another signed assembly. It defines a `FileUtilities` class that includes an internal `AppendDirectorySeparator` method. The <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute is applied to the assembly that contains the `FileUtilities` class. The attribute allows an assembly named `Friend1` to access this internal member.  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]\\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  \\n  \\n If the following example is compiled into a strong-named assembly named `Friend1`, it can successfully call the `FileUtilities.AppendDirectorySeparator` method, even though the method is internal to the `Assembly1` assembly. Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.  \\n  \\n [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]\\n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]\\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  \\n  \\n The following example uses the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute to make an `internal` member of an unsigned assembly visible to another unsigned assembly. The attribute ensures that the `internal` `StringLib.IsFirstLetterUpperCase` method in an assembly named `UtilityLib` is visible to the code in an assembly named `Friend2`.  The following is the source code for UtilityLib.dll:  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]\\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  \\n  \\n **Unsigned assemblies**  \\n  \\n The following example provides the source code for the `Friend2` assembly. Note that if you are compiling in C# from the command line, you must use the **/out** compiler switch to ensure that the name of the friend assembly is available when the compiler binds to external references.  \\n  \\n [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]\\n [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]\\n [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]\"\n  syntax:\n    content: public InternalsVisibleToAttribute (string assemblyName);\n    parameters:\n    - id: assemblyName\n      type: System.String\n      description: The name of a friend assembly.\n  overload: System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/InternalsVisibleToAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible\n  commentId: P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible\n  id: AllInternalsVisible\n  parent: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  langs:\n  - csharp\n  name: AllInternalsVisible\n  nameWithType: InternalsVisibleToAttribute.AllInternalsVisible\n  fullName: InternalsVisibleToAttribute.AllInternalsVisible\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: This property is not implemented.\n  syntax:\n    content: public bool AllInternalsVisible { get; set; }\n    return:\n      type: System.Boolean\n      description: This property does not return a value.\n  overload: System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/InternalsVisibleToAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName\n  commentId: P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName\n  id: AssemblyName\n  parent: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  langs:\n  - csharp\n  name: AssemblyName\n  nameWithType: InternalsVisibleToAttribute.AssemblyName\n  fullName: InternalsVisibleToAttribute.AssemblyName\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Gets the name of the friend assembly to which all types and type members that are marked with the `internal` keyword are to be made visible.\n  remarks: \"For more information about how to use the <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> attribute, see the following topics:  \\n  \\n-   [Friend Assemblies (C++)](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  \\n  \\n-   [Friend Assemblies](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)\"\n  syntax:\n    content: public string AssemblyName { get; }\n    return:\n      type: System.String\n      description: A string that represents the name of the friend assembly.\n  overload: System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/InternalsVisibleToAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)\n  parent: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  isExternal: false\n  name: InternalsVisibleToAttribute(String)\n  nameWithType: InternalsVisibleToAttribute.InternalsVisibleToAttribute(String)\n  fullName: InternalsVisibleToAttribute.InternalsVisibleToAttribute(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible\n  parent: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  isExternal: false\n  name: AllInternalsVisible\n  nameWithType: InternalsVisibleToAttribute.AllInternalsVisible\n  fullName: InternalsVisibleToAttribute.AllInternalsVisible\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName\n  parent: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  isExternal: false\n  name: AssemblyName\n  nameWithType: InternalsVisibleToAttribute.AssemblyName\n  fullName: InternalsVisibleToAttribute.AssemblyName\n- uid: System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor*\n  parent: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  isExternal: false\n  name: InternalsVisibleToAttribute\n  nameWithType: InternalsVisibleToAttribute.InternalsVisibleToAttribute\n  fullName: InternalsVisibleToAttribute.InternalsVisibleToAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/InternalsVisibleToAttribute.xml\n- uid: System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible*\n  parent: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  isExternal: false\n  name: AllInternalsVisible\n  nameWithType: InternalsVisibleToAttribute.AllInternalsVisible\n  fullName: InternalsVisibleToAttribute.AllInternalsVisible\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/InternalsVisibleToAttribute.xml\n- uid: System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName*\n  parent: System.Runtime.CompilerServices.InternalsVisibleToAttribute\n  isExternal: false\n  name: AssemblyName\n  nameWithType: InternalsVisibleToAttribute.AssemblyName\n  fullName: InternalsVisibleToAttribute.AssemblyName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/InternalsVisibleToAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}