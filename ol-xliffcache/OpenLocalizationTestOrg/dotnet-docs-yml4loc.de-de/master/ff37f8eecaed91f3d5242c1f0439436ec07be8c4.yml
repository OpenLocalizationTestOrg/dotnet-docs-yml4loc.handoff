### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  commentId: T:System.Collections.Concurrent.OrderablePartitioner`1
  id: OrderablePartitioner`1
  children:
  - System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  - System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  - System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  langs:
  - csharp
  name: OrderablePartitioner<TSource>
  nameWithType: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  type: Class
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Represents a particular manner of splitting an orderable data source into multiple partitions.
  remarks: The implementation of the derived class is responsible for ordering the elements into key-value pairs in whatever manner is appropriate. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  example:
  - "The following example shows how to implement an orderable partitioner that returns one element at a time:  \n  \n [!code-csharp[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/cs/orderablepartitioner.cs#1)]\n [!code-vb[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/vb/orderablepartitioner.vb#1)]"
  syntax:
    content: 'public abstract class OrderablePartitioner<TSource> : System.Collections.Concurrent.Partitioner<TSource>'
    typeParameters:
    - id: TSource
      description: Type of the elements in the collection.
  inheritance:
  - System.Object
  - System.Collections.Concurrent.Partitioner`1
  implements: []
  inheritedMembers:
  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  name: OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)
  nameWithType: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)
  fullName: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)
  type: Constructor
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Called from constructors in derived classes to initialize the <xref href="System.Collections.Concurrent.OrderablePartitioner`1"></xref> class with the specified constraints on the index keys.
  remarks: For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: protected OrderablePartitioner (bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);
    parameters:
    - id: keysOrderedInEachPartition
      type: System.Boolean
      description: Indicates whether the elements in each partition are yielded in the order of increasing keys.
    - id: keysOrderedAcrossPartitions
      type: System.Boolean
      description: Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.
    - id: keysNormalized
      type: System.Boolean
      description: Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.
  overload: System.Collections.Concurrent.OrderablePartitioner`1.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  id: GetDynamicPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  name: GetDynamicPartitions()
  nameWithType: OrderablePartitioner<TSource>.GetDynamicPartitions()
  fullName: OrderablePartitioner<TSource>.GetDynamicPartitions()
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates an object that can partition the underlying collection into a variable number of partitions.
  remarks: "The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.  \n  \n The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> except that the returned set of partitions does not provide the keys for the elements.  \n  \n The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."
  syntax:
    content: public override System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TSource}
      description: An object that can create partitions over the underlying data source.
  overload: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  id: GetOrderableDynamicPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  name: GetOrderableDynamicPartitions()
  nameWithType: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()
  fullName: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Creates an object that can partition the underlying collection into a variable number of partitions.
  remarks: "The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=fullName> interface. Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.  \n  \n Each partition is represented as an enumerator over key-value pairs. The value in the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements.  \n  \n The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<long,TSource>> GetOrderableDynamicPartitions ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}
      description: An object that can create partitions over the underlying data source.
  overload: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Dynamic partitioning is not supported by this partitioner.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  id: GetOrderablePartitions(System.Int32)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  name: GetOrderablePartitions(Int32)
  nameWithType: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)
  fullName: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Partitions the underlying collection into the specified number of orderable partitions.
  remarks: "Each partition is represented as an enumerator over key-value pairs.  \n  \n The value of the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements in the data source.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."
  syntax:
    content: public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<long,TSource>>> GetOrderablePartitions (int partitionCount);
    parameters:
    - id: partitionCount
      type: System.Int32
      description: The number of partitions to create.
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}}
      description: A list containing <code>partitionCount</code> enumerators.
  overload: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  id: GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  name: GetPartitions(Int32)
  nameWithType: OrderablePartitioner<TSource>.GetPartitions(Int32)
  fullName: OrderablePartitioner<TSource>.GetPartitions(Int32)
  type: Method
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Partitions the underlying collection into the given number of ordered partitions.
  remarks: "The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> except that the returned set of partitions does not provide the keys for the elements.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."
  syntax:
    content: public override System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions (int partitionCount);
    parameters:
    - id: partitionCount
      type: System.Int32
      description: The number of partitions to create.
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}
      description: A list containing <code>partitionCount</code> enumerators.
  overload: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  id: KeysNormalized
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  name: KeysNormalized
  nameWithType: OrderablePartitioner<TSource>.KeysNormalized
  fullName: OrderablePartitioner<TSource>.KeysNormalized
  type: Property
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Gets whether order keys are normalized.
  remarks: "If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> returns true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If the property returns false, order keys must still be distinct, but only their relative order is considered, not their absolute values.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."
  syntax:
    content: public bool KeysNormalized { get; }
    return:
      type: System.Boolean
      description: true if the keys are normalized; otherwise false.
  overload: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  id: KeysOrderedAcrossPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  name: KeysOrderedAcrossPartitions
  nameWithType: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions
  fullName: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions
  type: Property
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Gets whether elements in an earlier partition always come before elements in a later partition.
  remarks: "If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> returns true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.  \n  \n For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)."
  syntax:
    content: public bool KeysOrderedAcrossPartitions { get; }
    return:
      type: System.Boolean
      description: true if the elements in an earlier partition always come before elements in a later partition; otherwise false.
  overload: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  id: KeysOrderedInEachPartition
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  name: KeysOrderedInEachPartition
  nameWithType: OrderablePartitioner<TSource>.KeysOrderedInEachPartition
  fullName: OrderablePartitioner<TSource>.KeysOrderedInEachPartition
  type: Property
  assemblies:
  - System.Collections.Concurrent
  - mscorlib
  - netstandard
  namespace: System.Collections.Concurrent
  summary: Gets whether elements in each partition are yielded in the order of increasing keys.
  remarks: For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md).
  syntax:
    content: public bool KeysOrderedInEachPartition { get; }
    return:
      type: System.Boolean
      description: true if the elements in each partition are yielded in the order of increasing keys; otherwise false.
  overload: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)
  nameWithType: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)
  fullName: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>(Boolean, Boolean, Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: GetDynamicPartitions()
  nameWithType: OrderablePartitioner<TSource>.GetDynamicPartitions()
  fullName: OrderablePartitioner<TSource>.GetDynamicPartitions()
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: GetOrderableDynamicPartitions()
  nameWithType: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()
  fullName: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()
- uid: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey,TValue>
  nameWithType: KeyValuePair<TKey,TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>
- uid: System.Int64
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<KeyValuePair<Int64,TSource>>
  nameWithType: IEnumerable<KeyValuePair<Int64,TSource>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Int64,TSource>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: GetOrderablePartitions(Int32)
  nameWithType: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)
  fullName: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)
- uid: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,TSource}}}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<IEnumerator<KeyValuePair<Int64,TSource>>>
  nameWithType: IList<IEnumerator<KeyValuePair<Int64,TSource>>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Int64,TSource>>>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: GetPartitions(Int32)
  nameWithType: OrderablePartitioner<TSource>.GetPartitions(Int32)
  fullName: OrderablePartitioner<TSource>.GetPartitions(Int32)
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<IEnumerator<TSource>>
  nameWithType: IList<IEnumerator<TSource>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: KeysNormalized
  nameWithType: OrderablePartitioner<TSource>.KeysNormalized
  fullName: OrderablePartitioner<TSource>.KeysNormalized
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: KeysOrderedAcrossPartitions
  nameWithType: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions
  fullName: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: KeysOrderedInEachPartition
  nameWithType: OrderablePartitioner<TSource>.KeysOrderedInEachPartition
  fullName: OrderablePartitioner<TSource>.KeysOrderedInEachPartition
- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor*
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: OrderablePartitioner<TSource>
  nameWithType: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>
  fullName: OrderablePartitioner<TSource>.OrderablePartitioner<TSource>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions*
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: GetDynamicPartitions
  nameWithType: OrderablePartitioner<TSource>.GetDynamicPartitions
  fullName: OrderablePartitioner<TSource>.GetDynamicPartitions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions*
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: GetOrderableDynamicPartitions
  nameWithType: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions
  fullName: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions*
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: GetOrderablePartitions
  nameWithType: OrderablePartitioner<TSource>.GetOrderablePartitions
  fullName: OrderablePartitioner<TSource>.GetOrderablePartitions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions*
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: GetPartitions
  nameWithType: OrderablePartitioner<TSource>.GetPartitions
  fullName: OrderablePartitioner<TSource>.GetPartitions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized*
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: KeysNormalized
  nameWithType: OrderablePartitioner<TSource>.KeysNormalized
  fullName: OrderablePartitioner<TSource>.KeysNormalized
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions*
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: KeysOrderedAcrossPartitions
  nameWithType: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions
  fullName: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition*
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  isExternal: false
  name: KeysOrderedInEachPartition
  nameWithType: OrderablePartitioner<TSource>.KeysOrderedInEachPartition
  fullName: OrderablePartitioner<TSource>.KeysOrderedInEachPartition
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Concurrent/OrderablePartitioner`1.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
  fullName: Partitioner<TSource>.SupportsDynamicPartitions
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel<TSource>(Partitioner<TSource>)
  nameWithType: ParallelEnumerable.AsParallel<TSource>(Partitioner<TSource>)
  fullName: ParallelEnumerable.AsParallel<TSource>(Partitioner<TSource>)
