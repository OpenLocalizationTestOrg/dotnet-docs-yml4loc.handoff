### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA256
  commentId: T:System.Security.Cryptography.HMACSHA256
  id: HMACSHA256
  children:
  - System.Security.Cryptography.HMACSHA256.#ctor
  - System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  - System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)
  - System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMACSHA256.HashFinal
  - System.Security.Cryptography.HMACSHA256.HashSize
  - System.Security.Cryptography.HMACSHA256.Initialize
  - System.Security.Cryptography.HMACSHA256.Key
  langs:
  - csharp
  name: HMACSHA256
  nameWithType: HMACSHA256
  fullName: System.Security.Cryptography.HMACSHA256
  type: Class
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Computes a Hash-based Message Authentication Code (HMAC) by using the <xref href="System.Security.Cryptography.SHA256"></xref> hash function.
  remarks: "<xref:System.Security.Cryptography.HMACSHA256> is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 256 bits in length.  \n  \n An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.  \n  \n Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.  \n  \n <xref:System.Security.Cryptography.HMACSHA256> accepts keys of any size, and produces a hash sequence 256 bits in length."
  example:
  - "The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACSHA256> object and then how to verify the file.  \n  \n [!code-cpp[HMACSHA256#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACSHA256/CPP/hmacsha256.cpp#1)]\n [!code-csharp[HMACSHA256#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACSHA256/CS/hmacsha256.cs#1)]\n [!code-vb[HMACSHA256#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACSHA256/vb/hmacsha256.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA256 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HMACSHA256.#ctor
  commentId: M:System.Security.Cryptography.HMACSHA256.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HMACSHA256()
  nameWithType: HMACSHA256.HMACSHA256()
  fullName: HMACSHA256.HMACSHA256()
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.HMACSHA256"></xref> class with a randomly generated key.
  remarks: "<xref:System.Security.Cryptography.HMACSHA256> is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 256 bits in length.  \n  \n This constructor uses a 64-byte, randomly generated key."
  syntax:
    content: public HMACSHA256 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA256.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  commentId: M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HMACSHA256(Byte[])
  nameWithType: HMACSHA256.HMACSHA256(Byte[])
  fullName: HMACSHA256.HMACSHA256(Byte[])
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.HMACSHA256"></xref> class with the specified key data.
  remarks: <xref:System.Security.Cryptography.HMACSHA256> is a type of keyed hash algorithm that is constructed from the SHA-256 hash function and used as a Hash-based Message Authentication Code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 256 bits in length.
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA256> class.
  syntax:
    content: public HMACSHA256 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: The secret key for <xref href="System.Security.Cryptography.HMACSHA256"></xref> encryption. The key can be any length. However, the recommended size is 64 bytes. If the key is more than 64 bytes long, it is hashed (using SHA-256) to derive a 64-byte key. If it is less than 64 bytes long, it is padded to 64 bytes.
  overload: System.Security.Cryptography.HMACSHA256.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>key</code> parameter is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HMACSHA256.Dispose(Boolean)
  fullName: HMACSHA256.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
  overload: System.Security.Cryptography.HMACSHA256.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HashCore(Byte[], Int32, Int32)
  nameWithType: HMACSHA256.HashCore(Byte[], Int32, Int32)
  fullName: HMACSHA256.HashCore(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void HashCore (byte[] rgb, int ib, int cb);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: ''
    - id: ib
      type: System.Int32
      description: ''
    - id: cb
      type: System.Int32
      description: ''
  overload: System.Security.Cryptography.HMACSHA256.HashCore*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.HashFinal
  commentId: M:System.Security.Cryptography.HMACSHA256.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HashFinal()
  nameWithType: HMACSHA256.HashFinal()
  fullName: HMACSHA256.HashFinal()
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: ''
  overload: System.Security.Cryptography.HMACSHA256.HashFinal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.HashSize
  commentId: P:System.Security.Cryptography.HMACSHA256.HashSize
  id: HashSize
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HashSize
  nameWithType: HMACSHA256.HashSize
  fullName: HMACSHA256.HashSize
  type: Property
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override int HashSize { get; }
    return:
      type: System.Int32
      description: ''
  overload: System.Security.Cryptography.HMACSHA256.HashSize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.Initialize
  commentId: M:System.Security.Cryptography.HMACSHA256.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: Initialize()
  nameWithType: HMACSHA256.Initialize()
  fullName: HMACSHA256.Initialize()
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA256.Initialize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.Key
  commentId: P:System.Security.Cryptography.HMACSHA256.Key
  id: Key
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: Key
  nameWithType: HMACSHA256.Key
  fullName: HMACSHA256.Key
  type: Property
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: ''
  overload: System.Security.Cryptography.HMACSHA256.Key*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
references:
- uid: System.Security.Cryptography.HMAC
  parent: System.Security.Cryptography
  isExternal: false
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA256.#ctor
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256()
  nameWithType: HMACSHA256.HMACSHA256()
  fullName: HMACSHA256.HMACSHA256()
- uid: System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256(Byte[])
  nameWithType: HMACSHA256.HMACSHA256(Byte[])
  fullName: HMACSHA256.HMACSHA256(Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HMACSHA256.Dispose(Boolean)
  fullName: HMACSHA256.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HashCore(Byte[], Int32, Int32)
  nameWithType: HMACSHA256.HashCore(Byte[], Int32, Int32)
  fullName: HMACSHA256.HashCore(Byte[], Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.HMACSHA256.HashFinal
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HashFinal()
  nameWithType: HMACSHA256.HashFinal()
  fullName: HMACSHA256.HashFinal()
- uid: System.Security.Cryptography.HMACSHA256.HashSize
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HashSize
  nameWithType: HMACSHA256.HashSize
  fullName: HMACSHA256.HashSize
- uid: System.Security.Cryptography.HMACSHA256.Initialize
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: Initialize()
  nameWithType: HMACSHA256.Initialize()
  fullName: HMACSHA256.Initialize()
- uid: System.Security.Cryptography.HMACSHA256.Key
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: Key
  nameWithType: HMACSHA256.Key
  fullName: HMACSHA256.Key
- uid: System.Security.Cryptography.HMACSHA256.#ctor*
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256
  nameWithType: HMACSHA256.HMACSHA256
  fullName: HMACSHA256.HMACSHA256
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.Dispose*
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: Dispose
  nameWithType: HMACSHA256.Dispose
  fullName: HMACSHA256.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.HashCore*
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HashCore
  nameWithType: HMACSHA256.HashCore
  fullName: HMACSHA256.HashCore
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.HashFinal*
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HashFinal
  nameWithType: HMACSHA256.HashFinal
  fullName: HMACSHA256.HashFinal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.HashSize*
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HashSize
  nameWithType: HMACSHA256.HashSize
  fullName: HMACSHA256.HashSize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.Initialize*
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: Initialize
  nameWithType: HMACSHA256.Initialize
  fullName: HMACSHA256.Initialize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Security.Cryptography.HMACSHA256.Key*
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: Key
  nameWithType: HMACSHA256.Key
  fullName: HMACSHA256.Key
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA256.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
  fullName: HashAlgorithm.CanReuseTransform
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
  fullName: HashAlgorithm.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.HashAlgorithm.Clear
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: HashAlgorithm.Clear()
  fullName: HashAlgorithm.Clear()
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Byte[])
  nameWithType: HashAlgorithm.ComputeHash(Byte[])
  fullName: HashAlgorithm.ComputeHash(Byte[])
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Stream)
  nameWithType: HashAlgorithm.ComputeHash(Stream)
  fullName: HashAlgorithm.ComputeHash(Stream)
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Byte[], Int32, Int32)
  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)
  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)
- uid: System.Security.Cryptography.HMAC.Create
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create()
  nameWithType: HMAC.Create()
  fullName: HMAC.Create()
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create(String)
  nameWithType: HMAC.Create(String)
  fullName: HMAC.Create(String)
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: HashAlgorithm.Dispose()
  fullName: HashAlgorithm.Dispose()
- uid: System.Security.Cryptography.HashAlgorithm.Hash
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Hash
  nameWithType: HashAlgorithm.Hash
  fullName: HashAlgorithm.Hash
- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSizeValue
  nameWithType: HashAlgorithm.HashSizeValue
  fullName: HashAlgorithm.HashSizeValue
- uid: System.Security.Cryptography.HashAlgorithm.HashValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashValue
  nameWithType: HashAlgorithm.HashValue
  fullName: HashAlgorithm.HashValue
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
  fullName: HashAlgorithm.InputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
  fullName: HashAlgorithm.OutputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.State
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: State
  nameWithType: HashAlgorithm.State
  fullName: HashAlgorithm.State
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformFinalBlock(Byte[], Int32, Int32)
  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)
  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)
- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyValue
  nameWithType: KeyedHashAlgorithm.KeyValue
  fullName: KeyedHashAlgorithm.KeyValue
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  fullName: HMAC.BlockSizeValue
- uid: System.Security.Cryptography.HMAC.HashName
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashName
  nameWithType: HMAC.HashName
  fullName: HMAC.HashName
