<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bdd64556cfc17d68b5208798906d60c7b7b7cf0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.CodeDom.MemberAttributes.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffc4f3736c5ebb51249e240deb2b70a086f7c386</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cd871c9ee8cc2888688366245d905e2346b7f21</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines member attribute identifiers for class members.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The identifiers defined in the <ph id="ph1">&lt;xref:System.CodeDom.MemberAttributes&gt;</ph> enumeration can be used to indicate the scope and access attributes of a class member.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no <ph id="ph1">`Virtual`</ph> member attribute.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>A member is declared virtual by setting its member access to Public (<ph id="ph1">`property1.Attributes = MemberAttributes.Public`</ph>) without specifying it as Final.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The absence of the Final flag makes a member <ph id="ph1">`virtual`</ph> in C# (<ph id="ph2">`public virtual`</ph>), <ph id="ph3">`overrideable`</ph> in Visual Basic (<ph id="ph4">`Public Overrideable`</ph>).</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>To avoid declaring the member as <ph id="ph1">`virtual`</ph> or <ph id="ph2">`overrideable`</ph>, set both the Public and Final flags in the <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>See the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property for more information on setting member attributes.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The pattern for setting the access flags (flags containing the terms <ph id="ph1">`Public`</ph>, <ph id="ph2">`Private`</ph>, <ph id="ph3">`Assembly`</ph>, or <ph id="ph4">`Family`</ph>) is to mask out all access flags using the AccessMask mask and then set the desired access flag.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the code statement to identify a constructor (named <ph id="ph1">`constructor1`</ph>) as public is <ph id="ph2">`constructor1.Attributes = (constructor1.Attributes &amp; ~MemberAttributes.AccessMask) | MemberAttributes.Public;`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property directly to an access flag (for example, <ph id="ph2">`constructor1.Attributes = MemberAttributes.Public;`</ph>) erases all other flags that might be set.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This pattern should also be used for setting the scope flags (Abstract, Final, Static, Override or Const) using the ScopeMask mask.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An abstract member.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An access mask.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A member that is accessible to any class within the same assembly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A constant member.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A member that is accessible within the family of its class and derived classes.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A member that is accessible within its class, and derived classes in the same assembly.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A member that cannot be overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A new member.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An overloaded member.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A member that overrides a base class member.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A private member.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A public member.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A scope mask.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A static member.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In Visual Basic, this is equivalent to the <ph id="ph1">`Shared`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A VTable mask.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>