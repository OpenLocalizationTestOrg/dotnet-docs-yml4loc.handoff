### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDiffieHellman
  commentId: T:System.Security.Cryptography.ECDiffieHellman
  id: ECDiffieHellman
  children:
  - System.Security.Cryptography.ECDiffieHellman.#ctor
  - System.Security.Cryptography.ECDiffieHellman.Create
  - System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  - System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)
  - System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDiffieHellman.PublicKey
  - System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  langs:
  - csharp
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
  type: Class
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Provides an abstract base class that Elliptic Curve Diffie-Hellman (ECDH) algorithm implementations can derive from. This class provides the basic set of operations that all ECDH implementations must support.
  remarks: This class serves as the abstract base class for ECDH implementations.
  syntax:
    content: 'public abstract class ECDiffieHellman : System.Security.Cryptography.AsymmetricAlgorithm'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  derivedClasses:
  - System.Security.Cryptography.ECDiffieHellmanCng
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor
  commentId: M:System.Security.Cryptography.ECDiffieHellman.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ECDiffieHellman()
  nameWithType: ECDiffieHellman.ECDiffieHellman()
  fullName: ECDiffieHellman.ECDiffieHellman()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.ECDiffieHellman"></xref> class.
  remarks: This constructor is called by classes that derive from the <xref:System.Security.Cryptography.ECDiffieHellman> class. The <xref:System.Security.Cryptography.ECDiffieHellmanCng> class is the only implementation that is currently included in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]. For information about how to create a new implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm, see the <xref:System.Security.Cryptography.ECDiffieHellman.Create%2A> method.
  syntax:
    content: protected ECDiffieHellman ();
    parameters: []
  overload: System.Security.Cryptography.ECDiffieHellman.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  commentId: M:System.Security.Cryptography.ECDiffieHellman.Create
  id: Create
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: ECDiffieHellman.Create()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: A new instance of the default implementation of this class.
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)
  commentId: M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)
  id: Create(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create(ECCurve)
  nameWithType: ECDiffieHellman.Create(ECCurve)
  fullName: ECDiffieHellman.Create(ECCurve)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with a new public/private key-pair generated over the specified curve.
  remarks: "curve must validate (that is, it must return true when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method.  \n  \n Characteristic-2 curves are not supported on Windows."
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECCurve curve);
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
      description: The curve to use to generate a new public/private key-pair.
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>curve</code> does not validate.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)
  commentId: M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)
  id: Create(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create(ECParameters)
  nameWithType: ECDiffieHellman.Create(ECParameters)
  fullName: ECDiffieHellman.Create(ECParameters)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm with the key described by the specified  <xref href="System.Security.Cryptography.ECParameters"></xref> object.
  remarks: "`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method. Parameters over implicit curves are not supported.  \n  \n Characteristic-2 curves are not supported on Windows."
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create (System.Security.Cryptography.ECParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.ECParameters
      description: The parameters  for the elliptic curve cryptography (ECC) algorithm.
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: A new instance of the default implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>parameters</code> does not validate.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  commentId: M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: ECDiffieHellman.Create(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Creates a new instance of the specified implementation of the Elliptic Curve Diffie-Hellman (ECDH) algorithm.
  remarks: "If you develop your own implementation of an <xref:System.Security.Cryptography.ECDiffieHellman> object, you can use the <xref:System.Security.Cryptography.ECDiffieHellman.Create%28System.String%29> method overload to create a custom `algorithm` string that specifies your implementation.  \n  \n The `algorithm` parameter specifies the name of an implementation of the ECDH algorithm. The following strings all refer to the same implementation, which is the only implementation currently supported in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]:  \n  \n-   \"ECDH\"  \n  \n-   \"ECDiffieHellman\"  \n  \n-   \"ECDiffieHellmanCng\"  \n  \n-   \"System.Security.Cryptography.ECDiffieHellmanCng\"  \n  \n You can also provide the name of a custom ECDH implementation for the `algorithm` parameter. If you do that, the <xref:System.Security.Cryptography.CryptoConfig> object will use it to determine whether an ECDH object can be created."
  syntax:
    content: public static System.Security.Cryptography.ECDiffieHellman Create (string algorithm);
    parameters:
    - id: algorithm
      type: System.String
      description: The name of an implementation of the ECDH algorithm.
    return:
      type: System.Security.Cryptography.ECDiffieHellman
      description: A new instance of the specified implementation of this class. If the specified algorithm name does not map to an ECDH implementation, this method returns `null`.
  overload: System.Security.Cryptography.ECDiffieHellman.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>algorithm</code> parameter is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)
  fullName: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives bytes that can be used as a key using a hash function, given another party's public key and hash algorithm's name.
  remarks: This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash%2A> method passing `null` as the prepend and append values.
  syntax:
    content: public byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm  to use to derive the key material.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  exceptions: []
  version:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  id: DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
  fullName: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When implemented in a derived class, derives bytes that can be used as a key using a hash function, given another party's public key, hash algorithm's name, a prepend value and an append value.
  syntax:
    content: public virtual byte[] DeriveKeyFromHash (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm  to use to derive the key material.
    - id: secretPrepend
      type: System.Byte[]
      description: A value to prepend to the derived secret before hashing.
    - id: secretAppend
      type: System.Byte[]
      description: A value to append to the derived secret before hashing.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: A derived class must override this method.
  version:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
  fullName: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When implemented in a derived class, derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).
  syntax:
    content: public virtual byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey, byte[] secretPrepend, byte[] secretAppend);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm to use to derive the key material.
    - id: hmacKey
      type: System.Byte[]
      description: The key for the HMAC.
    - id: secretPrepend
      type: System.Byte[]
      description: A value to prepend to the derived secret before hashing.
    - id: secretAppend
      type: System.Byte[]
      description: A value to append to the derived secret before hashing.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: A derived class must override this method.
  version:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  id: DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])
  fullName: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives bytes that can be used as a key using a Hash-based Message Authentication Code (HMAC).
  remarks: This overload calls the <xref:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac%2A> method passing `null` as the prepend and append values.
  syntax:
    content: public byte[] DeriveKeyFromHmac (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, byte[] hmacKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: The hash algorithm to use to derive the key material.
    - id: hmacKey
      type: System.Byte[]
      description: The key for the HMAC.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  exceptions: []
  version:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  id: DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Derives bytes that can be used as a key, given another party's public key.
  remarks: For more information about public keys, see the <xref:System.Security.Cryptography.ECDiffieHellmanPublicKey> class.
  syntax:
    content: public virtual byte[] DeriveKeyMaterial (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  id: DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
  fullName: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When implemented in a derived class, derives bytes that can be used as a key using a Transport Layer Security (TLS) Pseudo-Random Function (PRF) derivation algorithm.
  syntax:
    content: public virtual byte[] DeriveKeyTls (System.Security.Cryptography.ECDiffieHellmanPublicKey otherPartyPublicKey, byte[] prfLabel, byte[] prfSeed);
    parameters:
    - id: otherPartyPublicKey
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The other party's public key.
    - id: prfLabel
      type: System.Byte[]
      description: The ASCII-encoded PRF label.
    - id: prfSeed
      type: System.Byte[]
      description: The 64-byte PRF seed.
    return:
      type: System.Byte[]
      description: The key material from the key exchange with the other party’s public key.
  overload: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: A derived class must override this method.
  version:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)
  id: ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDiffieHellman.ExportExplicitParameters(Boolean)
  fullName: ECDiffieHellman.ExportExplicitParameters(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, exports either the public or the public and private key information using the explicit curve form from a working <xref href="System.Security.Cryptography.ECDiffieHellman"></xref> key to an <xref href="System.Security.Cryptography.ECParameters"></xref> structure so that it can be passed to the <xref href="System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)"></xref> method.
  syntax:
    content: public virtual System.Security.Cryptography.ECParameters ExportExplicitParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otherwise, `false`.'
    return:
      type: System.Security.Cryptography.ECParameters
      description: An object that represents the point on the curve for this key, using the explicit curve format.
  overload: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: A derived class must override this method.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: ECDiffieHellman.ExportParameters(Boolean)
  fullName: ECDiffieHellman.ExportParameters(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, exports either the public or the public and private key information from a working <xref href="System.Security.Cryptography.ECDiffieHellman"></xref> key to an <xref href="System.Security.Cryptography.ECParameters"></xref> structure so that it can be passed to the <xref href="System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)"></xref> method.
  remarks: If the curve has a name, the <xref:System.Security.Cryptography.ECParameters.Curve> property contains named curve parameters; otherwise, it will contain explicit parameters.
  syntax:
    content: public virtual System.Security.Cryptography.ECParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: '`true` to include private parameters; otehrwise,  `false` to include public parameters only.'
    return:
      type: System.Security.Cryptography.ECParameters
      description: An object that represents the point on the curve for this key. It can be passed to the <xref href="System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)"></xref> method.
  overload: System.Security.Cryptography.ECDiffieHellman.ExportParameters*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: A derived class must override this method.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)
  commentId: M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)
  id: GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: GenerateKey(ECCurve)
  nameWithType: ECDiffieHellman.GenerateKey(ECCurve)
  fullName: ECDiffieHellman.GenerateKey(ECCurve)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, generates a new ephemeral public/private key pair for the specified curve.
  remarks: "`curve` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECCurve.Validate%2A?displayProperty=fullName> method) and must not be implicit.  \n  \n Characteristic-2 curves are not supported on Windows."
  syntax:
    content: public virtual void GenerateKey (System.Security.Cryptography.ECCurve curve);
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
      description: The curve used to generate an ephemeral public/private key pair.
  overload: System.Security.Cryptography.ECDiffieHellman.GenerateKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>curve</code> does not validate.
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: A derived class must override this method.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)
  commentId: M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)
  id: ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: ImportParameters(ECParameters)
  nameWithType: ECDiffieHellman.ImportParameters(ECParameters)
  fullName: ECDiffieHellman.ImportParameters(ECParameters)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, imports the specified parameters for an <xref href="System.Security.Cryptography.ECCurve"></xref> as an ephemeral key into the current <xref href="System.Security.Cryptography.ECDiffieHellman"></xref> object.
  remarks: "`parameters` must validate (that is, it must return `true`) when passed to the <xref:System.Security.Cryptography.ECParameters.Validate%2A?displayProperty=fullName> method. Parameters over implicit curves are not supported.  \n  \n Characteristic-2 curves are not supported on Windows."
  syntax:
    content: public virtual void ImportParameters (System.Security.Cryptography.ECParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.ECParameters
      description: The curve's parameters to import.
  overload: System.Security.Cryptography.ECDiffieHellman.ImportParameters*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: <code>parameters</code> does not validate.
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: A derived class must override this method.
  version:
  - netframework-4.7
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  commentId: P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: ECDiffieHellman.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets the name of the key exchange algorithm.
  remarks: "The default (non-overridden) implementation of this property returns the string \"ECDiffieHellman\".  \n  \n This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class."
  syntax:
    content: public override string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: The name of the key exchange algorithm.
  overload: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey
  commentId: P:System.Security.Cryptography.ECDiffieHellman.PublicKey
  id: PublicKey
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: ECDiffieHellman.PublicKey
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets the public key that is being used by the current Elliptic Curve Diffie-Hellman (ECDH) instance.
  syntax:
    content: public abstract System.Security.Cryptography.ECDiffieHellmanPublicKey PublicKey { get; }
    return:
      type: System.Security.Cryptography.ECDiffieHellmanPublicKey
      description: The public part of the ECDH key pair that is being used by this <xref href="System.Security.Cryptography.ECDiffieHellman"></xref> instance.
  overload: System.Security.Cryptography.ECDiffieHellman.PublicKey*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  commentId: P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: ECDiffieHellman.SignatureAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: Gets the name of the signature algorithm.
  remarks: "This property is inherited from the <xref:System.Security.Cryptography.AsymmetricAlgorithm> base class.  \n  \n The Elliptic Curve Diffie-Hellman (ECDH) algorithm is used for key derivation, not digital signature generation. Therefore, this property returns `null`."
  syntax:
    content: public override string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: Always `null`.
  overload: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ECDiffieHellman()
  nameWithType: ECDiffieHellman.ECDiffieHellman()
  fullName: ECDiffieHellman.ECDiffieHellman()
- uid: System.Security.Cryptography.ECDiffieHellman.Create
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create()
  nameWithType: ECDiffieHellman.Create()
  fullName: ECDiffieHellman.Create()
- uid: System.Security.Cryptography.ECDiffieHellman
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman
  fullName: System.Security.Cryptography.ECDiffieHellman
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(ECCurve)
  nameWithType: ECDiffieHellman.Create(ECCurve)
  fullName: ECDiffieHellman.Create(ECCurve)
- uid: System.Security.Cryptography.ECCurve
  parent: System.Security.Cryptography
  isExternal: false
  name: ECCurve
  nameWithType: ECCurve
  fullName: System.Security.Cryptography.ECCurve
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(ECParameters)
  nameWithType: ECDiffieHellman.Create(ECParameters)
  fullName: ECDiffieHellman.Create(ECParameters)
- uid: System.Security.Cryptography.ECParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: ECParameters
  nameWithType: ECParameters
  fullName: System.Security.Cryptography.ECParameters
- uid: System.Security.Cryptography.ECDiffieHellman.Create(System.String)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create(String)
  nameWithType: ECDiffieHellman.Create(String)
  fullName: ECDiffieHellman.Create(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)
  fullName: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ECDiffieHellmanPublicKey
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDiffieHellmanPublicKey
  nameWithType: ECDiffieHellmanPublicKey
  fullName: System.Security.Cryptography.ECDiffieHellmanPublicKey
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
  fullName: ECDiffieHellman.DeriveKeyFromHash(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
  fullName: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[], Byte[], Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])
  fullName: ECDiffieHellman.DeriveKeyFromHmac(ECDiffieHellmanPublicKey, HashAlgorithmName, Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  nameWithType: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
  fullName: ECDiffieHellman.DeriveKeyMaterial(ECDiffieHellmanPublicKey)
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
  nameWithType: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
  fullName: ECDiffieHellman.DeriveKeyTls(ECDiffieHellmanPublicKey, Byte[], Byte[])
- uid: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDiffieHellman.ExportExplicitParameters(Boolean)
  fullName: ECDiffieHellman.ExportExplicitParameters(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: ECDiffieHellman.ExportParameters(Boolean)
  fullName: ECDiffieHellman.ExportParameters(Boolean)
- uid: System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: GenerateKey(ECCurve)
  nameWithType: ECDiffieHellman.GenerateKey(ECCurve)
  fullName: ECDiffieHellman.GenerateKey(ECCurve)
- uid: System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ImportParameters(ECParameters)
  nameWithType: ECDiffieHellman.ImportParameters(ECParameters)
  fullName: ECDiffieHellman.ImportParameters(ECParameters)
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: ECDiffieHellman.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: ECDiffieHellman.PublicKey
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: ECDiffieHellman.SignatureAlgorithm
- uid: System.Security.Cryptography.ECDiffieHellman.#ctor*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ECDiffieHellman
  nameWithType: ECDiffieHellman.ECDiffieHellman
  fullName: ECDiffieHellman.ECDiffieHellman
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.Create*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: Create
  nameWithType: ECDiffieHellman.Create
  fullName: ECDiffieHellman.Create
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHash
  nameWithType: ECDiffieHellman.DeriveKeyFromHash
  fullName: ECDiffieHellman.DeriveKeyFromHash
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyFromHmac
  nameWithType: ECDiffieHellman.DeriveKeyFromHmac
  fullName: ECDiffieHellman.DeriveKeyFromHmac
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyMaterial
  nameWithType: ECDiffieHellman.DeriveKeyMaterial
  fullName: ECDiffieHellman.DeriveKeyMaterial
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: DeriveKeyTls
  nameWithType: ECDiffieHellman.DeriveKeyTls
  fullName: ECDiffieHellman.DeriveKeyTls
  monikers:
  - netframework-4.6.2
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ExportExplicitParameters
  nameWithType: ECDiffieHellman.ExportExplicitParameters
  fullName: ECDiffieHellman.ExportExplicitParameters
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.ExportParameters*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ExportParameters
  nameWithType: ECDiffieHellman.ExportParameters
  fullName: ECDiffieHellman.ExportParameters
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.GenerateKey*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: GenerateKey
  nameWithType: ECDiffieHellman.GenerateKey
  fullName: ECDiffieHellman.GenerateKey
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.ImportParameters*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: ImportParameters
  nameWithType: ECDiffieHellman.ImportParameters
  fullName: ECDiffieHellman.ImportParameters
  monikers:
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: ECDiffieHellman.KeyExchangeAlgorithm
  fullName: ECDiffieHellman.KeyExchangeAlgorithm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.PublicKey*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: PublicKey
  nameWithType: ECDiffieHellman.PublicKey
  fullName: ECDiffieHellman.PublicKey
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm*
  parent: System.Security.Cryptography.ECDiffieHellman
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: ECDiffieHellman.SignatureAlgorithm
  fullName: ECDiffieHellman.SignatureAlgorithm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ECDiffieHellman.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: AsymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: AsymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: AsymmetricAlgorithm.Dispose(Boolean)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: FromXmlString(String)
  nameWithType: AsymmetricAlgorithm.FromXmlString(String)
  fullName: AsymmetricAlgorithm.FromXmlString(String)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: AsymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: AsymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: AsymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)
  fullName: AsymmetricAlgorithm.ToXmlString(Boolean)
