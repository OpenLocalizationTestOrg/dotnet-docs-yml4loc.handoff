{"nodes":[{"content":"Provides a base class for a service that will exist as part of a service application. <xref href=\"System.ServiceProcess.ServiceBase\"></xref> must be derived from when creating a new service class.","nodes":[{"pos":[0,196],"content":"Provides a base class for a service that will exist as part of a service application. <xref href=\"System.ServiceProcess.ServiceBase\"></xref> must be derived from when creating a new service class.","nodes":[{"content":"Provides a base class for a service that will exist as part of a service application.","pos":[0,85]},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase\"&gt;&lt;/xref&gt;</ph> must be derived from when creating a new service class.","pos":[86,196],"source":"<xref href=\"System.ServiceProcess.ServiceBase\"></xref> must be derived from when creating a new service class."}]}],"pos":[1924,2121],"yaml":true},{"content":"Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application. Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods. For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.  \n  \n A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account. The service can run without any user being logged on to the computer.  \n  \n By default, services run under the System account, which is not the same as the Administrator account. You cannot change the rights of the System account. Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.  \n  \n An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service. The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system. The installer also associates each service with an event log that you can use to record service commands. The `main()` function in the executable defines which services should run. The current working directory of the service is the system directory, not the directory in which the executable is located.  \n  \n When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable. However, running the service is not the same as running the executable. The executable only loads the service. The service is accessed (for example, started and stopped) through the Service Control Manager.  \n  \n The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service. The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes. The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.  \n  \n The Service Control Manager (SCM) provides a way to interact with the service. You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service. The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands. Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class. If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.  \n  \n You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface. You can automate the tasks available in the console. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.  \n  \n You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in <xref:System.ServiceProcess.ServiceBase>. However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden. The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method. The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the <xref:System.ServiceProcess.ServiceBase> object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.  \n  \n You can use `InstallUtil.exe` to install services on your system.  \n  \n> [!NOTE]\n>  You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log. Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging.","nodes":[{"pos":[0,486],"content":"Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application. Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods. For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.","nodes":[{"content":"Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application. Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods. For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.","pos":[0,486],"nodes":[{"content":"Derive from <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> when defining your service class in a service application.","pos":[0,111],"source":"Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application."},{"content":"Any useful service overrides the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> methods.","pos":[112,260],"source":" Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods."},{"content":"For additional functionality, you can override <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> with specific behavior in response to changes in the service state.","pos":[261,486],"source":" For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state."}]}]},{"pos":[493,699],"content":"A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account. The service can run without any user being logged on to the computer.","nodes":[{"content":"A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account. The service can run without any user being logged on to the computer.","pos":[0,206],"nodes":[{"content":"A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account.","pos":[0,136]},{"content":"The service can run without any user being logged on to the computer.","pos":[137,206]}]}]},{"pos":[706,1002],"content":"By default, services run under the System account, which is not the same as the Administrator account. You cannot change the rights of the System account. Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.","nodes":[{"content":"By default, services run under the System account, which is not the same as the Administrator account. You cannot change the rights of the System account. Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.","pos":[0,296],"nodes":[{"content":"By default, services run under the System account, which is not the same as the Administrator account.","pos":[0,102]},{"content":"You cannot change the rights of the System account.","pos":[103,154]},{"content":"Alternatively, you can use a <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceProcessInstaller&gt;</ph> to specify a user account under which the service will run.","pos":[155,296],"source":" Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run."}]}]},{"pos":[1009,1551],"content":"An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service. The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system. The installer also associates each service with an event log that you can use to record service commands. The `main()` function in the executable defines which services should run. The current working directory of the service is the system directory, not the directory in which the executable is located.","nodes":[{"content":"An executable can contain more than one service but must contain a separate <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> for each service.","pos":[0,139],"source":"An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceInstaller&gt;</ph> instance registers the service with the system.","pos":[140,237],"source":" The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system."},{"content":"The installer also associates each service with an event log that you can use to record service commands.","pos":[238,343]},{"content":"The <ph id=\"ph1\">`main()`</ph> function in the executable defines which services should run.","pos":[344,418],"source":" The `main()` function in the executable defines which services should run."},{"content":"The current working directory of the service is the system directory, not the directory in which the executable is located.","pos":[419,542]}]},{"pos":[1558,1947],"content":"When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable. However, running the service is not the same as running the executable. The executable only loads the service. The service is accessed (for example, started and stopped) through the Service Control Manager.","nodes":[{"content":"When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable. However, running the service is not the same as running the executable. The executable only loads the service. The service is accessed (for example, started and stopped) through the Service Control Manager.","pos":[0,389],"nodes":[{"content":"When you start a service, the system locates the executable and runs the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method for that service, contained within the executable.","pos":[0,182],"source":"When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable."},{"content":"However, running the service is not the same as running the executable.","pos":[183,254]},{"content":"The executable only loads the service.","pos":[255,293]},{"content":"The service is accessed (for example, started and stopped) through the Service Control Manager.","pos":[294,389]}]}]},{"pos":[1954,2826],"content":"The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service. The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes. The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.","nodes":[{"content":"The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service. The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes. The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.","pos":[0,872],"nodes":[{"content":"The executable calls the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> derived class's constructor the first time you call Start on the service.","pos":[0,139],"source":"The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> command-handling method is called immediately after the constructor executes.","pos":[140,273],"source":" The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes."},{"content":"The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.","pos":[274,512],"source":" The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>."},{"content":"Any resources that can be released by <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should be created in <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.","pos":[513,675],"source":" Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>."},{"content":"Creating resources in the constructor prevents them from being created properly if the service is started again after <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> has released the resources.","pos":[676,872],"source":" Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources."}]}]},{"pos":[2833,4067],"content":"The Service Control Manager (SCM) provides a way to interact with the service. You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service. The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands. Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class. If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.","nodes":[{"content":"The Service Control Manager (SCM) provides a way to interact with the service.","pos":[0,78]},{"content":"You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service.","pos":[79,173]},{"content":"The SCM uses the values of <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> to determine whether the service accepts Stop, Pause, or Continue commands.","pos":[174,396],"source":" The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands."},{"content":"Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id=\"ph3\">`true`</ph> in the service class.","pos":[397,647],"source":" Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class."},{"content":"If enabled, the command is passed to the service, and <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> is called.","pos":[648,875],"source":" If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called."},{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id=\"ph4\">`false`</ph>, the corresponding command-handling method (such as <ph id=\"ph5\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) will not be processed, even if you have implemented the method.","pos":[876,1234],"source":" If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method."}]},{"pos":[4074,4636],"content":"You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface. You can automate the tasks available in the console. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> class to do programmatically what the SCM does using a user interface.","pos":[0,133],"source":"You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface."},{"content":"You can automate the tasks available in the console.","pos":[134,186]},{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id=\"ph4\">`true`</ph> but you have not implemented a corresponding command-handling method (such as <ph id=\"ph5\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>) the system throws an exception and ignores the command.","pos":[187,562],"source":" If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command."}]},{"pos":[4643,5496],"content":"You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in <xref:System.ServiceProcess.ServiceBase>. However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden. The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method. The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the <xref:System.ServiceProcess.ServiceBase> object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.","nodes":[{"content":"You do not have to implement <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph>, or any other method in <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.","pos":[0,198],"source":"You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in <xref:System.ServiceProcess.ServiceBase>."},{"content":"However, the service's behavior is described in <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, so at minimum, this member should be overridden.","pos":[199,348],"source":" However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden."},{"content":"The <ph id=\"ph1\">`main()`</ph> function of the executable registers the service in the executable with the Service Control Manager by calling the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph> method.","pos":[349,532],"source":" The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> object passed to the <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A&gt;</ph> method must match the <ph id=\"ph4\">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A&gt;</ph> property of the service installer for that service.","pos":[533,853],"source":" The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the <xref:System.ServiceProcess.ServiceBase> object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service."}]},{"pos":[5503,5568],"content":"You can use <ph id=\"ph1\">`InstallUtil.exe`</ph> to install services on your system.","source":"You can use `InstallUtil.exe` to install services on your system."},{"pos":[5576,5964],"content":"[!NOTE]\n You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log. Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging.","leadings":["","> "],"nodes":[{"content":" You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log. Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging.","pos":[8,386],"nodes":[{"content":"You can specify a log other than the Application event log to receive notification of service calls, but neither the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> nor the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property can write to a custom log.","pos":[1,266],"source":" You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log."},{"content":"Set <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id=\"ph2\">`false`</ph> if you do not want to use automatic logging.","pos":[267,378],"source":" Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging."}]}]}],"pos":[2132,8120],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the <xref href=\"System.ServiceProcess.ServiceBase\"></xref> class.","nodes":[{"pos":[0,91],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase\"&gt;&lt;/xref&gt;</ph> class.","source":"Creates a new instance of the <xref href=\"System.ServiceProcess.ServiceBase\"></xref> class."}],"pos":[10171,10263],"yaml":true},{"content":"Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class. Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class. The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component. No other processing is specifically required in the constructor. You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor. Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.  \n  \n If you override the constructor in your derived class, call the base class constructor in your code.  \n  \n The <xref:System.ServiceProcess.ServiceBase> constructor sets <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true`. If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false`.  \n  \n If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.  \n  \n If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started. Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.  \n  \n> [!NOTE]\n>  If you override the base class constructor, you should explicitly call it in the constructor of your derived class.","nodes":[{"pos":[0,699],"content":"Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class. Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class. The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component. No other processing is specifically required in the constructor. You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor. Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.","nodes":[{"content":"Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class. Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class. The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component. No other processing is specifically required in the constructor. You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor. Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.","pos":[0,699],"nodes":[{"content":"Do not create an instance of the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class.","pos":[0,80],"source":"Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class."},{"content":"Instead, derive from <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> and instantiate your derived class.","pos":[81,178],"source":" Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class."},{"content":"The minimum you need to implement in the constructor for a class inherited from <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> is to set the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> on your component.","pos":[179,388],"source":" The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component."},{"content":"No other processing is specifically required in the constructor.","pos":[389,453]},{"content":"You should handle most initialization in <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> rather than in the constructor.","pos":[454,578],"source":" You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor."},{"content":"Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.","pos":[579,699]}]}]},{"pos":[706,806],"content":"If you override the constructor in your derived class, call the base class constructor in your code.","nodes":[{"content":"If you override the constructor in your derived class, call the base class constructor in your code.","pos":[0,100]}]},{"pos":[813,1106],"content":"The <xref:System.ServiceProcess.ServiceBase> constructor sets <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true`. If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> constructor sets <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id=\"ph3\">`true`</ph>.","pos":[0,124],"source":"The <xref:System.ServiceProcess.ServiceBase> constructor sets <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true`."},{"content":"If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id=\"ph2\">`false`</ph>.","pos":[125,293],"source":" If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false`."}]},{"pos":[1113,1280],"content":"If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.","nodes":[{"content":"If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.","pos":[0,167]}]},{"pos":[1287,1607],"content":"If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started. Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.","nodes":[{"content":"If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started. Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.","pos":[0,320],"nodes":[{"content":"If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started.","pos":[0,190]},{"content":"Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.","pos":[191,320]}]}]},{"pos":[1615,1741],"content":"[!NOTE]\n If you override the base class constructor, you should explicitly call it in the constructor of your derived class.","leadings":["","> "],"nodes":[{"content":"If you override the base class constructor, you should explicitly call it in the constructor of your derived class.","pos":[9,124]}]}],"pos":[10274,12029],"yaml":true,"extradata":"MT"},{"content":"Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.","nodes":[{"pos":[0,87],"content":"Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.","nodes":[{"content":"Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.","pos":[0,87]}]}],"pos":[13069,13157],"yaml":true},{"content":"Setting <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true` instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service. The name of the service is used as the log's <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>.  \n  \n To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.  \n  \n> [!NOTE]\n>  The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log. Trying to access the event log before the source name is set throws an exception.","nodes":[{"pos":[0,364],"content":"Setting <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true` instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service. The name of the service is used as the log's <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>.","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service.","pos":[0,248],"source":"Setting <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true` instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service."},{"content":"The name of the service is used as the log's <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName&gt;</ph>.","pos":[249,364],"source":" The name of the service is used as the log's <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>."}]},{"pos":[371,768],"content":"To report information to a custom event log rather than the Application log, set <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id=\"ph2\">`false`</ph> and write instructions within the command-handling methods <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to post to the appropriate log.","source":"To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log."},{"pos":[776,1048],"content":"[!NOTE]\n The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log. Trying to access the event log before the source name is set throws an exception.","leadings":["","> "],"nodes":[{"content":" The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log. Trying to access the event log before the source name is set throws an exception.","pos":[8,270],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>, which supplies the source string for the event log, must be set before the service attempts to write to the event log.","pos":[1,180],"source":" The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log."},{"content":"Trying to access the event log before the source name is set throws an exception.","pos":[181,262]}]}]}],"pos":[13168,14224],"yaml":true,"extradata":"MT"},{"content":"`true` to report information in the event log; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> to report information in the event log; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to report information in the event log; otherwise, `false`."}],"pos":[14418,14487],"yaml":true},{"content":"Gets or sets a value indicating whether the service can handle notifications of computer power status changes.","nodes":[{"pos":[0,110],"content":"Gets or sets a value indicating whether the service can handle notifications of computer power status changes.","nodes":[{"content":"Gets or sets a value indicating whether the service can handle notifications of computer power status changes.","pos":[0,110]}]}],"pos":[15617,15728],"yaml":true},{"content":"When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.  \n  \n If <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> is `true`, the command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> method is called if defined. If <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is not implemented in the derived class, the SCM handles the power event through the empty base class <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,215],"content":"When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.","nodes":[{"content":"When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph>.","pos":[0,215],"source":"When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>."}]},{"pos":[222,682],"content":"If <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> is `true`, the command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> method is called if defined. If <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is not implemented in the derived class, the SCM handles the power event through the empty base class <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName> method.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the command is passed to the service and the <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> method is called if defined.","pos":[0,208],"source":"If <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> is `true`, the command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> method is called if defined."},{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> is not implemented in the derived class, the SCM handles the power event through the empty base class <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName&gt;</ph> method.","pos":[209,460],"source":" If <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is not implemented in the derived class, the SCM handles the power event through the empty base class <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName> method."}]}],"pos":[15739,16426],"yaml":true,"extradata":"MT"},{"content":"`true` if the service handles the computer power status changes indicated in the <xref href=\"System.ServiceProcess.PowerBroadcastStatus\"></xref> class, otherwise, `false`.","nodes":[{"pos":[0,171],"content":"<ph id=\"ph1\">`true`</ph> if the service handles the computer power status changes indicated in the <ph id=\"ph2\">&lt;xref href=\"System.ServiceProcess.PowerBroadcastStatus\"&gt;&lt;/xref&gt;</ph> class, otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the service handles the computer power status changes indicated in the <xref href=\"System.ServiceProcess.PowerBroadcastStatus\"></xref> class, otherwise, `false`."}],"pos":[16553,16727],"yaml":true},{"content":"This property is modified after the service was started.","nodes":[{"pos":[0,56],"content":"This property is modified after the service was started.","nodes":[{"content":"This property is modified after the service was started.","pos":[0,56]}]}],"pos":[16918,16975],"yaml":true},{"content":"Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.","nodes":[{"pos":[0,129],"content":"Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.","nodes":[{"content":"Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.","pos":[0,129]}]}],"pos":[18017,18147],"yaml":true},{"content":"`true` if the service can handle Terminal Server session change events; otherwise, `false`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">`true`</ph> if the service can handle Terminal Server session change events; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the service can handle Terminal Server session change events; otherwise, `false`."}],"pos":[18349,18443],"yaml":true},{"content":"This property is modified after the service was started.","nodes":[{"pos":[0,56],"content":"This property is modified after the service was started.","nodes":[{"content":"This property is modified after the service was started.","pos":[0,56]}]}],"pos":[18642,18699],"yaml":true},{"content":"Gets or sets a value indicating whether the service can be paused and resumed.","nodes":[{"pos":[0,78],"content":"Gets or sets a value indicating whether the service can be paused and resumed.","nodes":[{"content":"Gets or sets a value indicating whether the service can be paused and resumed.","pos":[0,78]}]}],"pos":[19751,19830],"yaml":true},{"content":"Set the value of the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property in the constructor for the service.  \n  \n When a service is paused, it halts what it is doing. When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs.  \n  \n Sending a Pause request to the service can conserve system resources. Pause may not release all system resources, but Stop does. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.  \n  \n When <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true`, override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service. <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.  \n  \n If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented. In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.","nodes":[{"pos":[0,129],"content":"Set the value of the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property in the constructor for the service.","nodes":[{"content":"Set the value of the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property in the constructor for the service.","pos":[0,129],"source":"Set the value of the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property in the constructor for the service."}]},{"pos":[136,345],"content":"When a service is paused, it halts what it is doing. When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs.","nodes":[{"content":"When a service is paused, it halts what it is doing. When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs.","pos":[0,209],"nodes":[{"content":"When a service is paused, it halts what it is doing.","pos":[0,52]},{"content":"When you continue the service (either through the Service Control Manager or programmatically), <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> runs.","pos":[53,209],"source":" When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs."}]}]},{"pos":[352,753],"content":"Sending a Pause request to the service can conserve system resources. Pause may not release all system resources, but Stop does. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.","nodes":[{"content":"Sending a Pause request to the service can conserve system resources. Pause may not release all system resources, but Stop does. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.","pos":[0,401],"nodes":[{"content":"Sending a Pause request to the service can conserve system resources.","pos":[0,69]},{"content":"Pause may not release all system resources, but Stop does.","pos":[70,128]},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> are often implemented to perform less processing than <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.","pos":[129,401],"source":" <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>."}]}]},{"pos":[760,1250],"content":"When <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true`, override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service. <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, override <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service.","pos":[0,334],"source":"When <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true`, override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> should be implemented to undo the processing in <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.","pos":[335,490],"source":" <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>."}]},{"pos":[1257,1717],"content":"If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented. In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if they are implemented.","pos":[0,318],"source":"If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented."},{"content":"In the SCM, the <ph id=\"ph1\">`Pause`</ph> and <ph id=\"ph2\">`Continue`</ph> controls are disabled when <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[319,460],"source":" In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`."}]}],"pos":[19841,21569],"yaml":true,"extradata":"MT"},{"content":"`true` if the service can be paused; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if the service can be paused; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the service can be paused; otherwise, `false`."}],"pos":[21696,21755],"yaml":true},{"content":"The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.CanPauseAndContinue\"></xref> property cannot be changed once the service has started.","nodes":[{"pos":[0,173],"content":"The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.CanPauseAndContinue\"></xref> property cannot be changed once the service has started.","nodes":[{"content":"The service has already been started.","pos":[0,37]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase.CanPauseAndContinue\"&gt;&lt;/xref&gt;</ph> property cannot be changed once the service has started.","pos":[38,173],"source":" The <xref href=\"System.ServiceProcess.ServiceBase.CanPauseAndContinue\"></xref> property cannot be changed once the service has started."}]}],"pos":[21946,22120],"yaml":true},{"content":"Gets or sets a value indicating whether the service should be notified when the system is shutting down.","nodes":[{"pos":[0,104],"content":"Gets or sets a value indicating whether the service should be notified when the system is shutting down.","nodes":[{"content":"Gets or sets a value indicating whether the service should be notified when the system is shutting down.","pos":[0,104]}]}],"pos":[23066,23171],"yaml":true},{"content":"If <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> is `true`, the service is notified when the system is shutting down. At shutdown, the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method is called if it has been implemented in your derived class.  \n  \n> [!NOTE]\n>  Only the system should cause the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method to execute; the service can call it, but this is not recommended.","nodes":[{"pos":[0,266],"content":"If <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> is `true`, the service is notified when the system is shutting down. At shutdown, the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method is called if it has been implemented in your derived class.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the service is notified when the system is shutting down.","pos":[0,127],"source":"If <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> is `true`, the service is notified when the system is shutting down."},{"content":"At shutdown, the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> method is called if it has been implemented in your derived class.","pos":[128,266],"source":" At shutdown, the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method is called if it has been implemented in your derived class."}]},{"pos":[274,445],"content":"[!NOTE]\n Only the system should cause the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method to execute; the service can call it, but this is not recommended.","leadings":["","> "],"nodes":[{"content":"Only the system should cause the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> method to execute; the service can call it, but this is not recommended.","pos":[9,169],"source":" Only the system should cause the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method to execute; the service can call it, but this is not recommended."}]}],"pos":[23182,23633],"yaml":true,"extradata":"MT"},{"content":"`true` if the service should be notified when the system is shutting down; otherwise, `false`.  The default is `false`.","nodes":[{"pos":[0,119],"content":"`true` if the service should be notified when the system is shutting down; otherwise, `false`.  The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the service should be notified when the system is shutting down; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,94],"source":"`true` if the service should be notified when the system is shutting down; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[96,119],"source":"  The default is `false`."}]}],"pos":[23752,23874],"yaml":true},{"content":"The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.CanShutdown\"></xref> property cannot be changed once the service has started.","nodes":[{"pos":[0,165],"content":"The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.CanShutdown\"></xref> property cannot be changed once the service has started.","nodes":[{"content":"The service has already been started.","pos":[0,37]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase.CanShutdown\"&gt;&lt;/xref&gt;</ph> property cannot be changed once the service has started.","pos":[38,165],"source":" The <xref href=\"System.ServiceProcess.ServiceBase.CanShutdown\"></xref> property cannot be changed once the service has started."}]}],"pos":[24057,24223],"yaml":true},{"content":"Gets or sets a value indicating whether the service can be stopped once it has started.","nodes":[{"pos":[0,87],"content":"Gets or sets a value indicating whether the service can be stopped once it has started.","nodes":[{"content":"Gets or sets a value indicating whether the service can be stopped once it has started.","pos":[0,87]}]}],"pos":[25145,25233],"yaml":true},{"content":"When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A>. For most services, the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, but some operating system services, for example, do not allow the user to stop them.  \n  \n If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,370],"content":"When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A>. For most services, the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, but some operating system services, for example, do not allow the user to stop them.","nodes":[{"content":"When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph>.","pos":[0,190],"source":"When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A>."},{"content":"For most services, the value of <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, but some operating system services, for example, do not allow the user to stop them.","pos":[191,370],"source":" For most services, the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, but some operating system services, for example, do not allow the user to stop them."}]},{"pos":[377,819],"content":"If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName> method.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the Stop command is passed to the service and the <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method is called if it is defined.","pos":[0,201],"source":"If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined."},{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName&gt;</ph> method.","pos":[202,442],"source":" If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName> method."}]}],"pos":[25244,26068],"yaml":true,"extradata":"MT"},{"content":"`true` if the service can be stopped and the <xref href=\"System.ServiceProcess.ServiceBase.OnStop\"></xref> method called; otherwise, `false`.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">`true`</ph> if the service can be stopped and the <ph id=\"ph2\">&lt;xref href=\"System.ServiceProcess.ServiceBase.OnStop\"&gt;&lt;/xref&gt;</ph> method called; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the service can be stopped and the <xref href=\"System.ServiceProcess.ServiceBase.OnStop\"></xref> method called; otherwise, `false`."}],"pos":[26183,26327],"yaml":true},{"content":"The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.CanStop\"></xref> property cannot be changed once the service has started.","nodes":[{"pos":[0,161],"content":"The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.CanStop\"></xref> property cannot be changed once the service has started.","nodes":[{"content":"The service has already been started.","pos":[0,37]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase.CanStop\"&gt;&lt;/xref&gt;</ph> property cannot be changed once the service has started.","pos":[38,161],"source":" The <xref href=\"System.ServiceProcess.ServiceBase.CanStop\"></xref> property cannot be changed once the service has started."}]}],"pos":[26506,26668],"yaml":true},{"content":"Disposes of the resources (other than memory) used by the <xref href=\"System.ServiceProcess.ServiceBase\"></xref>.","nodes":[{"pos":[0,113],"content":"Disposes of the resources (other than memory) used by the <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase\"&gt;&lt;/xref&gt;</ph>.","source":"Disposes of the resources (other than memory) used by the <xref href=\"System.ServiceProcess.ServiceBase\"></xref>."}],"pos":[27663,27777],"yaml":true},{"content":"Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class. The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state. After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection.  \n  \n> [!NOTE]\n>  Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>. Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors.  \n  \n <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>. If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released.","nodes":[{"pos":[0,546],"content":"Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class. The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state. After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection.","nodes":[{"content":"Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class. The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state. After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection.","pos":[0,546],"nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> in your derived class (and through it, in the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> class) when you are finished using the derived class.","pos":[0,197],"source":"Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> method leaves the derived class in an unusable state.","pos":[198,307],"source":" The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state."},{"content":"After calling <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>, you must release all references to the derived class and <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> so the memory they were occupying can be reclaimed by garbage collection.","pos":[308,546],"source":" After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection."}]}]},{"pos":[554,908],"content":"[!NOTE]\n Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>. Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors.","leadings":["","> "],"nodes":[{"content":" Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>. Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors.","pos":[8,352],"nodes":[{"content":"Always call <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> before you release your last reference to the class derived from <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph>.","pos":[1,171],"source":" Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>."},{"content":"Otherwise, the resources <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase&gt;</ph> and the derived class are using will not be freed until garbage collection calls the objects' destructors.","pos":[172,344],"source":" Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors."}]}]},{"pos":[915,1351],"content":"<xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>. If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released.","nodes":[{"content":"<xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>. If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released.","pos":[0,436],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is often implemented to process the code in <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, combined with a call to <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph>.","pos":[0,224],"source":"<xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>."},{"content":"If you choose to do this in your derived class, it is customary to implement <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to allocate whatever <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.Dispose%2A&gt;</ph> released.","pos":[225,436],"source":" If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released."}]}]}],"pos":[27788,29147],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[29302,29405],"yaml":true},{"content":"Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.","nodes":[{"pos":[0,131],"content":"Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.","nodes":[{"content":"Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.","pos":[0,131]}]}],"pos":[30388,30520],"yaml":true},{"content":"The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName> properties set. The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log. These values are set automatically and cannot be changed for automatic logging of service commands.  \n  \n When <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log. You can use the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to write additional messages to that log as well. The component calls <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName> using this <xref:System.ServiceProcess.ServiceBase.EventLog%2A> member.  \n  \n To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.","nodes":[{"pos":[0,511],"content":"The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName> properties set. The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log. These values are set automatically and cannot be changed for automatic logging of service commands.","nodes":[{"content":"The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName> properties set. The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log. These values are set automatically and cannot be changed for automatic logging of service commands.","pos":[0,511],"nodes":[{"content":"The constructor initializes the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property to an instance with the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName&gt;</ph> properties set.","pos":[0,274],"source":"The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName> properties set."},{"content":"The source is the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> of the service, and the log is the computer's Application log.","pos":[275,411],"source":" The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log."},{"content":"These values are set automatically and cannot be changed for automatic logging of service commands.","pos":[412,511]}]}]},{"pos":[518,986],"content":"When <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log. You can use the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to write additional messages to that log as well. The component calls <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName> using this <xref:System.ServiceProcess.ServiceBase.EventLog%2A> member.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log.","pos":[0,174],"source":"When <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property to write additional messages to that log as well.","pos":[175,302],"source":" You can use the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to write additional messages to that log as well."},{"content":"The component calls <ph id=\"ph1\">&lt;xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName&gt;</ph> using this <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> member.","pos":[303,468],"source":" The component calls <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName> using this <xref:System.ServiceProcess.ServiceBase.EventLog%2A> member."}]},{"pos":[993,1390],"content":"To report information to a custom event log rather than the Application log, set <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> to <ph id=\"ph2\">`false`</ph> and write instructions within the command-handling methods <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to post to the appropriate log.","source":"To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log."}],"pos":[30531,31928],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Diagnostics.EventLog\"></xref> instance whose source is registered to the Application log.","nodes":[{"pos":[0,111],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.EventLog\"&gt;&lt;/xref&gt;</ph> instance whose source is registered to the Application log.","source":"An <xref href=\"System.Diagnostics.EventLog\"></xref> instance whose source is registered to the Application log."}],"pos":[32140,32252],"yaml":true},{"content":"Gets or sets the exit code for the service.","nodes":[{"pos":[0,43],"content":"Gets or sets the exit code for the service.","nodes":[{"content":"Gets or sets the exit code for the service.","pos":[0,43]}]}],"pos":[33301,33345],"yaml":true},{"content":"Set the <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.","nodes":[{"pos":[0,170],"content":"Set the <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.","nodes":[{"content":"Set the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.ExitCode%2A&gt;</ph> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.","pos":[0,170],"source":"Set the <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager."}]}],"pos":[33356,33527],"yaml":true,"extradata":"MT"},{"content":"The exit code for the service.","nodes":[{"pos":[0,30],"content":"The exit code for the service.","nodes":[{"content":"The exit code for the service.","pos":[0,30]}]}],"pos":[33707,33738],"yaml":true},{"content":"Indicates the maximum size for a service name.","nodes":[{"pos":[0,46],"content":"Indicates the maximum size for a service name.","nodes":[{"content":"Indicates the maximum size for a service name.","pos":[0,46]}]}],"pos":[34824,34871],"yaml":true},{"content":"ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.","nodes":[{"pos":[0,128],"content":"ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.","nodes":[{"content":"ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.","pos":[0,128]}]}],"pos":[34882,35011],"yaml":true,"extradata":"MT"},{"content":"When implemented in a derived class, <xref href=\"System.ServiceProcess.ServiceBase.OnContinue\"></xref> runs when a Continue command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service resumes normal functioning after being paused.","nodes":[{"pos":[0,280],"content":"When implemented in a derived class, <xref href=\"System.ServiceProcess.ServiceBase.OnContinue\"></xref> runs when a Continue command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service resumes normal functioning after being paused.","nodes":[{"content":"When implemented in a derived class, <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase.OnContinue\"&gt;&lt;/xref&gt;</ph> runs when a Continue command is sent to the service by the Service Control Manager (SCM).","pos":[0,192],"source":"When implemented in a derived class, <xref href=\"System.ServiceProcess.ServiceBase.OnContinue\"></xref> runs when a Continue command is sent to the service by the Service Control Manager (SCM)."},{"content":"Specifies actions to take when a service resumes normal functioning after being paused.","pos":[193,280]}]}],"pos":[36074,36355],"yaml":true},{"content":"Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>. When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again.  \n  \n <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.  \n  \n If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented. In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.","nodes":[{"pos":[0,361],"content":"Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>. When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again.","nodes":[{"content":"Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>. When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again.","pos":[0,361],"nodes":[{"content":"Implement <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to mirror your application's response to <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.","pos":[0,158],"source":"Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>."},{"content":"When you continue the service (either through the Services console or programmatically), the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> processing runs, and the service becomes active again.","pos":[159,361],"source":" When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again."}]}]},{"pos":[368,544],"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> is expected to be overridden when the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property is <ph id=\"ph3\">`true`</ph>.","source":"<xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`."},{"pos":[551,1011],"content":"If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented. In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if they are implemented.","pos":[0,318],"source":"If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented."},{"content":"In the SCM, the <ph id=\"ph1\">`Pause`</ph> and <ph id=\"ph2\">`Continue`</ph> controls are disabled when <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[319,460],"source":" In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`."}]}],"pos":[36366,37384],"yaml":true,"extradata":"MT"},{"content":"When implemented in a derived class, <xref href=\"System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)\"></xref> executes when the Service Control Manager (SCM) passes a custom command to the service. Specifies actions to take when a command with the specified parameter value occurs.","nodes":[{"pos":[0,293],"content":"When implemented in a derived class, <xref href=\"System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)\"></xref> executes when the Service Control Manager (SCM) passes a custom command to the service. Specifies actions to take when a command with the specified parameter value occurs.","nodes":[{"content":"When implemented in a derived class, <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)\"&gt;&lt;/xref&gt;</ph> executes when the Service Control Manager (SCM) passes a custom command to the service.","pos":[0,209],"source":"When implemented in a derived class, <xref href=\"System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)\"></xref> executes when the Service Control Manager (SCM) passes a custom command to the service."},{"content":"Specifies actions to take when a command with the specified parameter value occurs.","pos":[210,293]}]}],"pos":[38553,38847],"yaml":true},{"content":"<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.  \n  \n The SCM does not examine the custom command to verify whether the service supports the `command` parameter passed in. It passes the custom command directly to the service. If the service does not recognize the `command` parameter, it does nothing.  \n  \n Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component. Use a switch statement or if..then condition to handle the custom commands you define on your service.  \n  \n The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255. Integers below 128 correspond to system-reserved values.  \n  \n If the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> property is `true`, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.","nodes":[{"pos":[0,161],"content":"<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.","pos":[0,161],"source":"<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> lets you specify additional functionality beyond starting, stopping, pausing and continuing services."}]},{"pos":[168,415],"content":"The SCM does not examine the custom command to verify whether the service supports the `command` parameter passed in. It passes the custom command directly to the service. If the service does not recognize the `command` parameter, it does nothing.","nodes":[{"content":"The SCM does not examine the custom command to verify whether the service supports the <ph id=\"ph1\">`command`</ph> parameter passed in.","pos":[0,117],"source":"The SCM does not examine the custom command to verify whether the service supports the `command` parameter passed in."},{"content":"It passes the custom command directly to the service.","pos":[118,171]},{"content":"If the service does not recognize the <ph id=\"ph1\">`command`</ph> parameter, it does nothing.","pos":[172,247],"source":" If the service does not recognize the `command` parameter, it does nothing."}]},{"pos":[422,695],"content":"Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component. Use a switch statement or if..then condition to handle the custom commands you define on your service.","nodes":[{"content":"Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component. Use a switch statement or if..then condition to handle the custom commands you define on your service.","pos":[0,273],"nodes":[{"content":"Custom commands are raised by an <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A&gt;</ph> statement in a <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceController&gt;</ph> component.","pos":[0,170],"source":"Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component."},{"content":"Use a switch statement or if..then condition to handle the custom commands you define on your service.","pos":[171,273]}]}]},{"pos":[702,936],"content":"The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255. Integers below 128 correspond to system-reserved values.","nodes":[{"content":"The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255. Integers below 128 correspond to system-reserved values.","pos":[0,234],"nodes":[{"content":"The only values for a custom command that you can define in your application or use in <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A&gt;</ph> are those between 128 and 255.","pos":[0,177],"source":"The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255."},{"content":"Integers below 128 correspond to system-reserved values.","pos":[178,234]}]}]},{"pos":[943,1154],"content":"If the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.","source":"If the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> property is `true`, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed."}],"pos":[38858,40023],"yaml":true,"extradata":"MT"},{"content":"The command message sent to the service.","nodes":[{"pos":[0,40],"content":"The command message sent to the service.","nodes":[{"content":"The command message sent to the service.","pos":[0,40]}]}],"pos":[40178,40219],"yaml":true},{"content":"When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service pauses.","nodes":[{"pos":[0,176],"content":"When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service pauses.","nodes":[{"content":"When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service pauses.","pos":[0,176],"nodes":[{"content":"When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM).","pos":[0,127]},{"content":"Specifies actions to take when a service pauses.","pos":[128,176]}]}]}],"pos":[41208,41385],"yaml":true},{"content":"Use <xref:System.ServiceProcess.ServiceBase.OnPause%2A> to specify the processing that occurs when the service receives a Pause command. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.  \n  \n When you continue a paused service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing is run, and the service becomes active again.  \n  \n The Pause command only allows your application to react to a specific event. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do.  \n  \n Sending a Pause request to the service can conserve system resources because Pause need not release all system resources. For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues. If you define Pause to release all system resources, it behaves like a Stop command.  \n  \n Set <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to `true`, and override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service. <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.  \n  \n If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if implemented. In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.","nodes":[{"pos":[0,310],"content":"Use <xref:System.ServiceProcess.ServiceBase.OnPause%2A> to specify the processing that occurs when the service receives a Pause command. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> to specify the processing that occurs when the service receives a Pause command.","pos":[0,136],"source":"Use <xref:System.ServiceProcess.ServiceBase.OnPause%2A> to specify the processing that occurs when the service receives a Pause command."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> is expected to be overridden when the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> property is <ph id=\"ph3\">`true`</ph>.","pos":[137,310],"source":" <xref:System.ServiceProcess.ServiceBase.OnPause%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`."}]},{"pos":[317,526],"content":"When you continue a paused service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing is run, and the service becomes active again.","nodes":[{"content":"When you continue a paused service (either through the Services console or programmatically), the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> processing is run, and the service becomes active again.","pos":[0,209],"source":"When you continue a paused service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing is run, and the service becomes active again."}]},{"pos":[533,722],"content":"The Pause command only allows your application to react to a specific event. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do.","nodes":[{"content":"The Pause command only allows your application to react to a specific event. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do.","pos":[0,189],"nodes":[{"content":"The Pause command only allows your application to react to a specific event.","pos":[0,76]},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> does nothing to the service that you do not define it to do.","pos":[77,189],"source":" <xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do."}]}]},{"pos":[729,1138],"content":"Sending a Pause request to the service can conserve system resources because Pause need not release all system resources. For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues. If you define Pause to release all system resources, it behaves like a Stop command.","nodes":[{"content":"Sending a Pause request to the service can conserve system resources because Pause need not release all system resources. For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues. If you define Pause to release all system resources, it behaves like a Stop command.","pos":[0,409],"nodes":[{"content":"Sending a Pause request to the service can conserve system resources because Pause need not release all system resources.","pos":[0,121]},{"content":"For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues.","pos":[122,324]},{"content":"If you define Pause to release all system resources, it behaves like a Stop command.","pos":[325,409]}]}]},{"pos":[1145,1612],"content":"Set <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to `true`, and override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service. <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.","nodes":[{"content":"Set <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph>, and override <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service.","pos":[0,311],"source":"Set <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to `true`, and override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> should be implemented to undo the processing in <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>.","pos":[312,467],"source":" <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>."}]},{"pos":[1619,2070],"content":"If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if implemented. In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the SCM will not pass Pause or Continue requests to the service, so the <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph> methods will not be called even if implemented.","pos":[0,309],"source":"If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if implemented."},{"content":"In the SCM, the <ph id=\"ph1\">`Pause`</ph> and <ph id=\"ph2\">`Continue`</ph> controls are disabled when <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A&gt;</ph> is <ph id=\"ph4\">`false`</ph>.","pos":[310,451],"source":" In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`."}]}],"pos":[41396,43479],"yaml":true,"extradata":"MT"},{"content":"When implemented in a derived class, executes when the computer's power status has changed. This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.","nodes":[{"pos":[0,202],"content":"When implemented in a derived class, executes when the computer's power status has changed. This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.","nodes":[{"content":"When implemented in a derived class, executes when the computer's power status has changed. This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.","pos":[0,202],"nodes":[{"content":"When implemented in a derived class, executes when the computer's power status has changed.","pos":[0,91]},{"content":"This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.","pos":[92,202]}]}]}],"pos":[44759,44962],"yaml":true},{"content":"Use <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> to specify the processing that occurs when the system event indicated in the <xref:System.ServiceProcess.PowerBroadcastStatus> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.  \n  \n <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> property is `true`.","nodes":[{"pos":[0,298],"content":"Use <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> to specify the processing that occurs when the system event indicated in the <xref:System.ServiceProcess.PowerBroadcastStatus> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> to specify the processing that occurs when the system event indicated in the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.PowerBroadcastStatus&gt;</ph> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.","pos":[0,298],"source":"Use <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> to specify the processing that occurs when the system event indicated in the <xref:System.ServiceProcess.PowerBroadcastStatus> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power."}]},{"pos":[305,483],"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A&gt;</ph> is expected to be overridden when the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A&gt;</ph> property is <ph id=\"ph3\">`true`</ph>.","source":"<xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> property is `true`."}],"pos":[44973,45461],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ServiceProcess.PowerBroadcastStatus\"></xref> that indicates a notification from the system about its power status.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.PowerBroadcastStatus\"&gt;&lt;/xref&gt;</ph> that indicates a notification from the system about its power status.","source":"A <xref href=\"System.ServiceProcess.PowerBroadcastStatus\"></xref> that indicates a notification from the system about its power status."}],"pos":[45690,45826],"yaml":true},{"content":"When implemented in a derived class, the needs of your application determine what value to return. For example, if a `QuerySuspend` broadcast status is passed, you could cause your application to reject the query by returning `false`.","nodes":[{"pos":[0,234],"content":"When implemented in a derived class, the needs of your application determine what value to return. For example, if a `QuerySuspend` broadcast status is passed, you could cause your application to reject the query by returning `false`.","nodes":[{"content":"When implemented in a derived class, the needs of your application determine what value to return.","pos":[0,98]},{"content":"For example, if a <ph id=\"ph1\">`QuerySuspend`</ph> broadcast status is passed, you could cause your application to reject the query by returning <ph id=\"ph2\">`false`</ph>.","pos":[99,234],"source":" For example, if a `QuerySuspend` broadcast status is passed, you could cause your application to reject the query by returning `false`."}]}],"pos":[45884,46119],"yaml":true},{"content":"Executes when a change event is received from a Terminal Server session.","nodes":[{"pos":[0,72],"content":"Executes when a change event is received from a Terminal Server session.","nodes":[{"content":"Executes when a change event is received from a Terminal Server session.","pos":[0,72]}]}],"pos":[47369,47442],"yaml":true},{"content":"You must set the <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> property to `true` to enable the execution of this method.","nodes":[{"pos":[0,147],"content":"You must set the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph> to enable the execution of this method.","source":"You must set the <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> property to `true` to enable the execution of this method."}],"pos":[47453,47601],"yaml":true,"extradata":"MT"},{"content":"A structure that identifies the change type.","nodes":[{"pos":[0,44],"content":"A structure that identifies the change type.","nodes":[{"content":"A structure that identifies the change type.","pos":[0,44]}]}],"pos":[47853,47898],"yaml":true},{"content":"When implemented in a derived class, executes when the system is shutting down. Specifies what should occur immediately prior to the system shutting down.","nodes":[{"pos":[0,154],"content":"When implemented in a derived class, executes when the system is shutting down. Specifies what should occur immediately prior to the system shutting down.","nodes":[{"content":"When implemented in a derived class, executes when the system is shutting down. Specifies what should occur immediately prior to the system shutting down.","pos":[0,154],"nodes":[{"content":"When implemented in a derived class, executes when the system is shutting down.","pos":[0,79]},{"content":"Specifies what should occur immediately prior to the system shutting down.","pos":[80,154]}]}]}],"pos":[48905,49060],"yaml":true},{"content":"Use <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> to specify the processing that occurs when the system shuts down.  \n  \n This event occurs only when the operating system is shut down, not when the computer is turned off.  \n  \n <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> property is `true`.","nodes":[{"pos":[0,124],"content":"Use <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> to specify the processing that occurs when the system shuts down.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> to specify the processing that occurs when the system shuts down.","pos":[0,124],"source":"Use <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> to specify the processing that occurs when the system shuts down."}]},{"pos":[131,230],"content":"This event occurs only when the operating system is shut down, not when the computer is turned off.","nodes":[{"content":"This event occurs only when the operating system is shut down, not when the computer is turned off.","pos":[0,99]}]},{"pos":[237,405],"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnShutdown%2A&gt;</ph> is expected to be overridden when the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.CanShutdown%2A&gt;</ph> property is <ph id=\"ph3\">`true`</ph>.","source":"<xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> property is `true`."}],"pos":[49071,49483],"yaml":true,"extradata":"MT"},{"content":"When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically). Specifies actions to take when the service starts.","nodes":[{"pos":[0,256],"content":"When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically). Specifies actions to take when the service starts.","nodes":[{"content":"When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically). Specifies actions to take when the service starts.","pos":[0,256],"nodes":[{"content":"When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically).","pos":[0,205]},{"content":"Specifies actions to take when the service starts.","pos":[206,256]}]}]}],"pos":[50622,50879],"yaml":true},{"content":"Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command. <xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service. <xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare.  \n  \n> [!CAUTION]\n>  Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service. The constructor is called when the application's executable runs, not when the service runs. The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. When you continue, for example, the constructor is not called again because the SCM already holds the object in memory. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called.  \n  \n Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>. In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup.  \n  \n <xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class. For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.  \n  \n Process initialization arguments for the service in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method, not in the Main method. The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console. The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel. Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<service name>*). You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`.","nodes":[{"pos":[0,370],"content":"Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command. <xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service. <xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare.","nodes":[{"content":"Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command. <xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service. <xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare.","pos":[0,370],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to specify the processing that occurs when the service receives a Start command.","pos":[0,136],"source":"Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> is the method in which you specify the behavior of the service.","pos":[137,252],"source":" <xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> can take arguments as a way to pass data, but this usage is rare.","pos":[253,370],"source":" <xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare."}]}]},{"pos":[378,1163],"content":"[!CAUTION]\n Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service. The constructor is called when the application's executable runs, not when the service runs. The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. When you continue, for example, the constructor is not called again because the SCM already holds the object in memory. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called.","leadings":["","> "],"nodes":[{"content":" Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service. The constructor is called when the application's executable runs, not when the service runs. The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. When you continue, for example, the constructor is not called again because the SCM already holds the object in memory. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called.","pos":[11,783],"nodes":[{"content":"Do not use the constructor to perform processing that should be in <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.","pos":[1,120],"source":" Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> to handle all initialization of your service.","pos":[121,222],"source":" Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service."},{"content":"The constructor is called when the application's executable runs, not when the service runs.","pos":[223,315]},{"content":"The executable runs before <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>.","pos":[316,395],"source":" The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>."},{"content":"When you continue, for example, the constructor is not called again because the SCM already holds the object in memory.","pos":[396,515]},{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> releases resources allocated in the constructor rather than in <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, the needed resources would not be created again the second time the service is called.","pos":[516,772],"source":" If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called."}]}]},{"pos":[1170,1507],"content":"Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>. In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup.","nodes":[{"content":"Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>. In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup.","pos":[0,337],"nodes":[{"content":"Services can be set to start automatically when the computer reboots by setting the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceInstaller.StartType%2A&gt;</ph> on the service's installer to <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceStartMode.Automatic&gt;</ph>.","pos":[0,229],"source":"Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>."},{"content":"In such a situation, <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> would be called at system startup.","pos":[230,337],"source":" In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup."}]}]},{"pos":[1514,1803],"content":"<xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class. For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.","nodes":[{"content":"<xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class. For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.","pos":[0,289],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> is expected to be overridden in the derived class.","pos":[0,102],"source":"<xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class."},{"content":"For the service to be useful, <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should both be implemented in your service class.","pos":[103,289],"source":" For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class."}]}]},{"pos":[1810,2646],"content":"Process initialization arguments for the service in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method, not in the Main method. The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console. The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel. Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<service name>*). You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`.","nodes":[{"content":"Process initialization arguments for the service in the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method, not in the Main method.","pos":[0,139],"source":"Process initialization arguments for the service in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method, not in the Main method."},{"content":"The arguments in the <ph id=\"ph1\">`args`</ph> parameter array can be set manually in the properties window for the service in the Services console.","pos":[140,269],"source":" The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console."},{"content":"The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel.","pos":[270,424]},{"content":"Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services<ph id=\"ph1\">\\\\</ph><bpt id=\"p1\">*</bpt><ph id=\"ph2\">\\&lt;</ph>service name&gt;<ept id=\"p1\">*</ept>).","pos":[425,647],"source":" Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\\\*\\<service name>*)."},{"content":"You can obtain the arguments from the registry using the <ph id=\"ph1\">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph> method, for example:  <ph id=\"ph2\">`string[] imagePathArgs = Environment.GetCommandLineArgs();`</ph>.","pos":[648,836],"source":" You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`."}]}],"pos":[50890,53554],"yaml":true,"extradata":"MT"},{"content":"Data passed by the start command.","nodes":[{"pos":[0,33],"content":"Data passed by the start command.","nodes":[{"content":"Data passed by the start command.","pos":[0,33]}]}],"pos":[53703,53737],"yaml":true},{"content":"When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service stops running.","nodes":[{"pos":[0,182],"content":"When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service stops running.","nodes":[{"content":"When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service stops running.","pos":[0,182],"nodes":[{"content":"When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM).","pos":[0,126]},{"content":"Specifies actions to take when a service stops running.","pos":[127,182]}]}]}],"pos":[54712,54895],"yaml":true},{"content":"Use <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to specify the processing that occurs when the service receives a Stop command.  \n  \n When the SCM receives a Stop command, it uses the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> to verify whether the service accepts Stop commands. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service, and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the service, the SCM handles the Stop command.  \n  \n If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `false`, the SCM ignores the Stop command. It is not passed to the service. The Stop command returns and throws an exception.  \n  \n <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class. For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.","nodes":[{"pos":[0,134],"content":"Use <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to specify the processing that occurs when the service receives a Stop command.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> to specify the processing that occurs when the service receives a Stop command.","pos":[0,134],"source":"Use <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to specify the processing that occurs when the service receives a Stop command."}]},{"pos":[141,630],"content":"When the SCM receives a Stop command, it uses the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> to verify whether the service accepts Stop commands. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service, and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the service, the SCM handles the Stop command.","nodes":[{"content":"When the SCM receives a Stop command, it uses the value of <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> to verify whether the service accepts Stop commands.","pos":[0,163],"source":"When the SCM receives a Stop command, it uses the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> to verify whether the service accepts Stop commands."},{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the Stop command is passed to the service, and the <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method is called if it is defined.","pos":[164,366],"source":" If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service, and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined."},{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is not implemented in the service, the SCM handles the Stop command.","pos":[367,489],"source":" If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the service, the SCM handles the Stop command."}]},{"pos":[637,820],"content":"If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `false`, the SCM ignores the Stop command. It is not passed to the service. The Stop command returns and throws an exception.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.CanStop%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, the SCM ignores the Stop command.","pos":[0,100],"source":"If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `false`, the SCM ignores the Stop command."},{"content":"It is not passed to the service.","pos":[101,133]},{"content":"The Stop command returns and throws an exception.","pos":[134,183]}]},{"pos":[827,1115],"content":"<xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class. For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.","nodes":[{"content":"<xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class. For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.","pos":[0,288],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> is expected to be overridden in the derived class.","pos":[0,101],"source":"<xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class."},{"content":"For the service to be useful, <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> should both be implemented in your service class.","pos":[102,288],"source":" For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class."}]}]}],"pos":[54906,56030],"yaml":true,"extradata":"MT"},{"content":"Requests additional time for a pending operation.","nodes":[{"pos":[0,49],"content":"Requests additional time for a pending operation.","nodes":[{"content":"Requests additional time for a pending operation.","pos":[0,49]}]}],"pos":[57227,57277],"yaml":true},{"content":"The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.  If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"pos":[0,606],"content":"The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.  If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"content":"The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.  If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown.","pos":[0,606],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A&gt;</ph> method is intended to be called by the overridden <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnContinue%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.OnPause%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.","pos":[0,484],"source":"The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding."},{"content":"If the pending operation is not a continue, pause, start, or stop, an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.","pos":[486,606],"source":"  If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown."}]}]}],"pos":[57288,57895],"yaml":true,"extradata":"MT"},{"content":"The requested time in milliseconds.","nodes":[{"pos":[0,35],"content":"The requested time in milliseconds.","nodes":[{"content":"The requested time in milliseconds.","pos":[0,35]}]}],"pos":[58122,58158],"yaml":true},{"content":"The service is not in a pending state.","nodes":[{"pos":[0,38],"content":"The service is not in a pending state.","nodes":[{"content":"The service is not in a pending state.","pos":[0,38]}]}],"pos":[58351,58390],"yaml":true},{"content":"Registers the executable for a service with the Service Control Manager (SCM).","nodes":[{"pos":[0,78],"content":"Registers the executable for a service with the Service Control Manager (SCM).","nodes":[{"content":"Registers the executable for a service with the Service Control Manager (SCM).","pos":[0,78]}]}],"pos":[59488,59567],"yaml":true},{"content":"Call this overload in the `main()` function of the service executable to register the service with the Service Control Manager. After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, the Service Control Manager issues a Start command, which results in a call to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method in the service. The service is not started until the Start command is executed.  \n  \n The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName> method is called in much the same way as <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> for Windows Forms applications.  \n  \n If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if the service specified by the `service` parameter fails to start.","nodes":[{"pos":[0,449],"content":"Call this overload in the `main()` function of the service executable to register the service with the Service Control Manager. After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, the Service Control Manager issues a Start command, which results in a call to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method in the service. The service is not started until the Start command is executed.","nodes":[{"content":"Call this overload in the <ph id=\"ph1\">`main()`</ph> function of the service executable to register the service with the Service Control Manager.","pos":[0,127],"source":"Call this overload in the `main()` function of the service executable to register the service with the Service Control Manager."},{"content":"After you call <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29&gt;</ph>, the Service Control Manager issues a Start command, which results in a call to the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> method in the service.","pos":[128,385],"source":" After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, the Service Control Manager issues a Start command, which results in a call to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method in the service."},{"content":"The service is not started until the Start command is executed.","pos":[386,449]}]},{"pos":[456,677],"content":"The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName> method is called in much the same way as <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> for Windows Forms applications.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName&gt;</ph> method is called in much the same way as <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName&gt;</ph> for Windows Forms applications.","pos":[0,221],"source":"The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName> method is called in much the same way as <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> for Windows Forms applications."}]},{"pos":[684,854],"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, an entry is written to the event log if the service specified by the <ph id=\"ph3\">`service`</ph> parameter fails to start.","source":"If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if the service specified by the `service` parameter fails to start."}],"pos":[59578,60439],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ServiceProcess.ServiceBase\"></xref> which indicates a service to start.","nodes":[{"pos":[0,92],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase\"&gt;&lt;/xref&gt;</ph> which indicates a service to start.","source":"A <xref href=\"System.ServiceProcess.ServiceBase\"></xref> which indicates a service to start."}],"pos":[60629,60722],"yaml":true},{"content":"<code>service</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;service&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>service</code> is `null`."}],"pos":[60881,60913],"yaml":true},{"content":"Registers the executable for multiple services with the Service Control Manager (SCM).","nodes":[{"pos":[0,86],"content":"Registers the executable for multiple services with the Service Control Manager (SCM).","nodes":[{"content":"Registers the executable for multiple services with the Service Control Manager (SCM).","pos":[0,86]}]}],"pos":[61948,62035],"yaml":true},{"content":"Call this overload in the `main()` function of the service executable to register the services with the Service Control Manager. After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, the Service Control Manager issues Start commands, which result in calls to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> methods in the services. The services are not started until the Start commands are executed.  \n  \n The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName> method is called in much the same way as the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> method for Windows Forms applications.  \n  \n If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if any service in the array fails to start.","nodes":[{"pos":[0,459],"content":"Call this overload in the `main()` function of the service executable to register the services with the Service Control Manager. After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, the Service Control Manager issues Start commands, which result in calls to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> methods in the services. The services are not started until the Start commands are executed.","nodes":[{"content":"Call this overload in the <ph id=\"ph1\">`main()`</ph> function of the service executable to register the services with the Service Control Manager.","pos":[0,128],"source":"Call this overload in the `main()` function of the service executable to register the services with the Service Control Manager."},{"content":"After you call <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29&gt;</ph>, the Service Control Manager issues Start commands, which result in calls to the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnStart%2A&gt;</ph> methods in the services.","pos":[129,391],"source":" After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, the Service Control Manager issues Start commands, which result in calls to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> methods in the services."},{"content":"The services are not started until the Start commands are executed.","pos":[392,459]}]},{"pos":[466,698],"content":"The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName> method is called in much the same way as the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> method for Windows Forms applications.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName&gt;</ph> method is called in much the same way as the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName&gt;</ph> method for Windows Forms applications.","pos":[0,232],"source":"The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName> method is called in much the same way as the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> method for Windows Forms applications."}]},{"pos":[705,851],"content":"If <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.AutoLog%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, an entry is written to the event log if any service in the array fails to start.","source":"If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if any service in the array fails to start."}],"pos":[62046,62904],"yaml":true,"extradata":"MT"},{"content":"An array of ServiceBase instances, which indicate services to start.","nodes":[{"pos":[0,68],"content":"An array of ServiceBase instances, which indicate services to start.","nodes":[{"content":"An array of ServiceBase instances, which indicate services to start.","pos":[0,68]}]}],"pos":[63100,63169],"yaml":true},{"content":"You did not supply a service to start. The array might be `null` or empty.","nodes":[{"pos":[0,74],"content":"You did not supply a service to start. The array might be `null` or empty.","nodes":[{"content":"You did not supply a service to start.","pos":[0,38]},{"content":"The array might be <ph id=\"ph1\">`null`</ph> or empty.","pos":[39,74],"source":" The array might be `null` or empty."}]}],"pos":[63328,63403],"yaml":true},{"content":"Gets the service control handle for the service.","nodes":[{"pos":[0,48],"content":"Gets the service control handle for the service.","nodes":[{"content":"Gets the service control handle for the service.","pos":[0,48]}]}],"pos":[64344,64393],"yaml":true},{"content":"The service control handle is used to communicate with the Service Control Manager (SCM).  The handle can be used to update the service control manager's status information for the calling service using the unmanaged `SetServiceStatus` function.","nodes":[{"pos":[0,245],"content":"The service control handle is used to communicate with the Service Control Manager (SCM).  The handle can be used to update the service control manager's status information for the calling service using the unmanaged `SetServiceStatus` function.","nodes":[{"content":"The service control handle is used to communicate with the Service Control Manager (SCM).","pos":[0,89]},{"content":"The handle can be used to update the service control manager's status information for the calling service using the unmanaged <ph id=\"ph1\">`SetServiceStatus`</ph> function.","pos":[91,245],"source":"  The handle can be used to update the service control manager's status information for the calling service using the unmanaged `SetServiceStatus` function."}]}],"pos":[64404,64650],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IntPtr\"></xref> structure that contains the service control handle for the service.","nodes":[{"pos":[0,105],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> structure that contains the service control handle for the service.","source":"An <xref href=\"System.IntPtr\"></xref> structure that contains the service control handle for the service."}],"pos":[64770,64876],"yaml":true},{"content":"Registers the command handler and starts the service.","nodes":[{"pos":[0,53],"content":"Registers the command handler and starts the service.","nodes":[{"content":"Registers the command handler and starts the service.","pos":[0,53]}]}],"pos":[66075,66129],"yaml":true},{"content":"The number of arguments in the argument array.","nodes":[{"pos":[0,46],"content":"The number of arguments in the argument array.","nodes":[{"content":"The number of arguments in the argument array.","pos":[0,46]}]}],"pos":[66365,66412],"yaml":true},{"content":"An <xref href=\"System.IntPtr\"></xref> structure that points to an array of arguments.","nodes":[{"pos":[0,85],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> structure that points to an array of arguments.","source":"An <xref href=\"System.IntPtr\"></xref> structure that points to an array of arguments."}],"pos":[66478,66564],"yaml":true},{"content":"Gets or sets the short name used to identify the service to the system.","nodes":[{"pos":[0,71],"content":"Gets or sets the short name used to identify the service to the system.","nodes":[{"content":"Gets or sets the short name used to identify the service to the system.","pos":[0,71]}]}],"pos":[67652,67724],"yaml":true},{"content":"The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifies the service to the Service Control Manager. The value of this property must be identical to the name recorded for the service in the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> property of the corresponding installer class. In code, the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service is usually set in the `main()` function of the executable.  \n  \n The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property. This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log.  \n  \n The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log. Trying to access the event log before the source name is set causes an exception to be thrown.","nodes":[{"pos":[0,479],"content":"The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifies the service to the Service Control Manager. The value of this property must be identical to the name recorded for the service in the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> property of the corresponding installer class. In code, the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service is usually set in the `main()` function of the executable.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> identifies the service to the Service Control Manager.","pos":[0,114],"source":"The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifies the service to the Service Control Manager."},{"content":"The value of this property must be identical to the name recorded for the service in the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName&gt;</ph> property of the corresponding installer class.","pos":[115,336],"source":" The value of this property must be identical to the name recorded for the service in the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> property of the corresponding installer class."},{"content":"In code, the <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> of the service is usually set in the <ph id=\"ph2\">`main()`</ph> function of the executable.","pos":[337,479],"source":" In code, the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service is usually set in the `main()` function of the executable."}]},{"pos":[486,863],"content":"The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property. This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log.","nodes":[{"content":"The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property. This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log.","pos":[0,377],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph> is also used to specify the <ph id=\"ph2\">&lt;xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName&gt;</ph> associated with the <ph id=\"ph3\">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> property.","pos":[0,240],"source":"The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property."},{"content":"This <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.EventLog%2A&gt;</ph> is an instance that writes service command information to the Application log.","pos":[241,377],"source":" This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log."}]}]},{"pos":[870,1133],"content":"The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log. Trying to access the event log before the source name is set causes an exception to be thrown.","nodes":[{"content":"The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log. Trying to access the event log before the source name is set causes an exception to be thrown.","pos":[0,263],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.ServiceName%2A&gt;</ph>, which supplies the source string for the event log, must be set before the service writes to the event log.","pos":[0,168],"source":"The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log."},{"content":"Trying to access the event log before the source name is set causes an exception to be thrown.","pos":[169,263]}]}]}],"pos":[67735,68875],"yaml":true,"extradata":"MT"},{"content":"The name of the service.","nodes":[{"pos":[0,24],"content":"The name of the service.","nodes":[{"content":"The name of the service.","pos":[0,24]}]}],"pos":[69255,69280],"yaml":true},{"content":"The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.ServiceName\"></xref> property cannot be changed once the service has started.","nodes":[{"pos":[0,165],"content":"The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.ServiceName\"></xref> property cannot be changed once the service has started.","nodes":[{"content":"The service has already been started.","pos":[0,37]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase.ServiceName\"&gt;&lt;/xref&gt;</ph> property cannot be changed once the service has started.","pos":[38,165],"source":" The <xref href=\"System.ServiceProcess.ServiceBase.ServiceName\"></xref> property cannot be changed once the service has started."}]}],"pos":[69463,69629],"yaml":true},{"content":"The specified name is a zero-length string or is longer than <xref href=\"System.ServiceProcess.ServiceBase.MaxNameLength\"></xref>, or the specified name contains forward slash or backslash characters.","nodes":[{"pos":[0,200],"content":"The specified name is a zero-length string or is longer than <ph id=\"ph1\">&lt;xref href=\"System.ServiceProcess.ServiceBase.MaxNameLength\"&gt;&lt;/xref&gt;</ph>, or the specified name contains forward slash or backslash characters.","source":"The specified name is a zero-length string or is longer than <xref href=\"System.ServiceProcess.ServiceBase.MaxNameLength\"></xref>, or the specified name contains forward slash or backslash characters."}],"pos":[69723,69924],"yaml":true},{"content":"Stops the executing service.","nodes":[{"pos":[0,28],"content":"Stops the executing service.","nodes":[{"content":"Stops the executing service.","pos":[0,28]}]}],"pos":[70951,70980],"yaml":true},{"content":"The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method.  After the application is stopped, the service state is set to stopped. If the application is a hosted service, the application domain is unloaded.","nodes":[{"pos":[0,333],"content":"The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method.  After the application is stopped, the service state is set to stopped. If the application is a hosted service, the application domain is unloaded.","nodes":[{"content":"The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method.  After the application is stopped, the service state is set to stopped. If the application is a hosted service, the application domain is unloaded.","pos":[0,333],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceProcess.ServiceBase.Stop%2A&gt;</ph> method sets the service state to indicate a stop is pending and calls the <ph id=\"ph2\">&lt;xref:System.ServiceProcess.ServiceBase.OnStop%2A&gt;</ph> method.","pos":[0,185],"source":"The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method."},{"content":"After the application is stopped, the service state is set to stopped.","pos":[187,257]},{"content":"If the application is a hosted service, the application domain is unloaded.","pos":[258,333]}]}]}],"pos":[70991,71325],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceProcess.ServiceBase\n  commentId: T:System.ServiceProcess.ServiceBase\n  id: ServiceBase\n  children:\n  - System.ServiceProcess.ServiceBase.#ctor\n  - System.ServiceProcess.ServiceBase.AutoLog\n  - System.ServiceProcess.ServiceBase.CanHandlePowerEvent\n  - System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent\n  - System.ServiceProcess.ServiceBase.CanPauseAndContinue\n  - System.ServiceProcess.ServiceBase.CanShutdown\n  - System.ServiceProcess.ServiceBase.CanStop\n  - System.ServiceProcess.ServiceBase.Dispose(System.Boolean)\n  - System.ServiceProcess.ServiceBase.EventLog\n  - System.ServiceProcess.ServiceBase.ExitCode\n  - System.ServiceProcess.ServiceBase.MaxNameLength\n  - System.ServiceProcess.ServiceBase.OnContinue\n  - System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)\n  - System.ServiceProcess.ServiceBase.OnPause\n  - System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)\n  - System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)\n  - System.ServiceProcess.ServiceBase.OnShutdown\n  - System.ServiceProcess.ServiceBase.OnStart(System.String[])\n  - System.ServiceProcess.ServiceBase.OnStop\n  - System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)\n  - System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)\n  - System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])\n  - System.ServiceProcess.ServiceBase.ServiceHandle\n  - System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)\n  - System.ServiceProcess.ServiceBase.ServiceName\n  - System.ServiceProcess.ServiceBase.Stop\n  langs:\n  - csharp\n  name: ServiceBase\n  nameWithType: ServiceBase\n  fullName: System.ServiceProcess.ServiceBase\n  type: Class\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Provides a base class for a service that will exist as part of a service application. <xref href=\"System.ServiceProcess.ServiceBase\"></xref> must be derived from when creating a new service class.\n  remarks: \"Derive from <xref:System.ServiceProcess.ServiceBase> when defining your service class in a service application. Any useful service overrides the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods. For additional functionality, you can override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> with specific behavior in response to changes in the service state.  \\n  \\n A service is a long-running executable that does not support a user interface, and which might not run under the logged-on user account. The service can run without any user being logged on to the computer.  \\n  \\n By default, services run under the System account, which is not the same as the Administrator account. You cannot change the rights of the System account. Alternatively, you can use a <xref:System.ServiceProcess.ServiceProcessInstaller> to specify a user account under which the service will run.  \\n  \\n An executable can contain more than one service but must contain a separate <xref:System.ServiceProcess.ServiceInstaller> for each service. The <xref:System.ServiceProcess.ServiceInstaller> instance registers the service with the system. The installer also associates each service with an event log that you can use to record service commands. The `main()` function in the executable defines which services should run. The current working directory of the service is the system directory, not the directory in which the executable is located.  \\n  \\n When you start a service, the system locates the executable and runs the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method for that service, contained within the executable. However, running the service is not the same as running the executable. The executable only loads the service. The service is accessed (for example, started and stopped) through the Service Control Manager.  \\n  \\n The executable calls the <xref:System.ServiceProcess.ServiceBase> derived class's constructor the first time you call Start on the service. The <xref:System.ServiceProcess.ServiceBase.OnStart%2A> command-handling method is called immediately after the constructor executes. The constructor is not executed again after the first time the service has been loaded, so it is necessary to separate the processing performed by the constructor from that performed by <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Any resources that can be released by <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should be created in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Creating resources in the constructor prevents them from being created properly if the service is started again after <xref:System.ServiceProcess.ServiceBase.OnStop%2A> has released the resources.  \\n  \\n The Service Control Manager (SCM) provides a way to interact with the service. You can use the SCM to pass Start, Stop, Pause, Continue, or custom commands into the service. The SCM uses the values of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> and <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to determine whether the service accepts Stop, Pause, or Continue commands. Stop, Pause, and Continue are enabled in the SCM's context menus only if the corresponding property <xref:System.ServiceProcess.ServiceBase.CanStop%2A> or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` in the service class. If enabled, the command is passed to the service, and <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is called. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) will not be processed, even if you have implemented the method.  \\n  \\n You can use the <xref:System.ServiceProcess.ServiceController> class to do programmatically what the SCM does using a user interface. You can automate the tasks available in the console. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A>, <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A>, or <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true` but you have not implemented a corresponding command-handling method (such as <xref:System.ServiceProcess.ServiceBase.OnStop%2A>) the system throws an exception and ignores the command.  \\n  \\n You do not have to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, <xref:System.ServiceProcess.ServiceBase.OnStop%2A>, or any other method in <xref:System.ServiceProcess.ServiceBase>. However, the service's behavior is described in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, so at minimum, this member should be overridden. The `main()` function of the executable registers the service in the executable with the Service Control Manager by calling the <xref:System.ServiceProcess.ServiceBase.Run%2A> method. The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> property of the <xref:System.ServiceProcess.ServiceBase> object passed to the <xref:System.ServiceProcess.ServiceBase.Run%2A> method must match the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> property of the service installer for that service.  \\n  \\n You can use `InstallUtil.exe` to install services on your system.  \\n  \\n> [!NOTE]\\n>  You can specify a log other than the Application event log to receive notification of service calls, but neither the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> nor the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property can write to a custom log. Set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` if you do not want to use automatic logging.\"\n  syntax:\n    content: 'public class ServiceBase : System.ComponentModel.Component'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.ComponentModel.Component\n  implements: []\n  inheritedMembers:\n  - System.ComponentModel.Component.CanRaiseEvents\n  - System.ComponentModel.Component.Container\n  - System.ComponentModel.Component.DesignMode\n  - System.ComponentModel.Component.Dispose\n  - System.ComponentModel.Component.Disposed\n  - System.ComponentModel.Component.Events\n  - System.ComponentModel.Component.GetService(System.Type)\n  - System.ComponentModel.Component.Site\n  - System.ComponentModel.Component.ToString\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.#ctor\n  commentId: M:System.ServiceProcess.ServiceBase.#ctor\n  id: '#ctor'\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: ServiceBase()\n  nameWithType: ServiceBase.ServiceBase()\n  fullName: ServiceBase.ServiceBase()\n  type: Constructor\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Creates a new instance of the <xref href=\"System.ServiceProcess.ServiceBase\"></xref> class.\n  remarks: \"Do not create an instance of the <xref:System.ServiceProcess.ServiceBase> class. Instead, derive from <xref:System.ServiceProcess.ServiceBase> and instantiate your derived class. The minimum you need to implement in the constructor for a class inherited from <xref:System.ServiceProcess.ServiceBase> is to set the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> on your component. No other processing is specifically required in the constructor. You should handle most initialization in <xref:System.ServiceProcess.ServiceBase.OnStart%2A> rather than in the constructor. Otherwise, there is no guarantee the objects will be reinitialized when you restart a service after it has been stopped.  \\n  \\n If you override the constructor in your derived class, call the base class constructor in your code.  \\n  \\n The <xref:System.ServiceProcess.ServiceBase> constructor sets <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true`. If you do not want to automatically log calls to the service from the Service Control Manager (SCM), set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false`.  \\n  \\n If the executable contains a single service, the system calls the service's constructor when Start is selected from the SCM, and runs the destructor if Stop is called.  \\n  \\n If the executable contains multiple services, calling Start on one service causes the constructors to be called for all services in the executable, but only the specified service is started. Destructors for the services are run together when all services have been stopped, not individually when each service is stopped.  \\n  \\n> [!NOTE]\\n>  If you override the base class constructor, you should explicitly call it in the constructor of your derived class.\"\n  syntax:\n    content: public ServiceBase ();\n    parameters: []\n  overload: System.ServiceProcess.ServiceBase.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.AutoLog\n  commentId: P:System.ServiceProcess.ServiceBase.AutoLog\n  id: AutoLog\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: AutoLog\n  nameWithType: ServiceBase.AutoLog\n  fullName: ServiceBase.AutoLog\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Indicates whether to report Start, Stop, Pause, and Continue commands in the event log.\n  remarks: \"Setting <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `true` instructs the service to use the Application event log to report command failures, as well as state change information for Start, Stop, Pause, and Continue events on the service. The name of the service is used as the log's <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName>.  \\n  \\n To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.  \\n  \\n> [!NOTE]\\n>  The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service attempts to write to the event log. Trying to access the event log before the source name is set throws an exception.\"\n  syntax:\n    content: >-\n      [System.ServiceProcess.ServiceProcessDescription(\"SBAutoLog\")]\n\n      public bool AutoLog { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` to report information in the event log; otherwise, `false`.'\n  overload: System.ServiceProcess.ServiceBase.AutoLog*\n  exceptions: []\n  attributes:\n  - type: System.ServiceProcess.ServiceProcessDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent\n  commentId: P:System.ServiceProcess.ServiceBase.CanHandlePowerEvent\n  id: CanHandlePowerEvent\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: CanHandlePowerEvent\n  nameWithType: ServiceBase.CanHandlePowerEvent\n  fullName: ServiceBase.CanHandlePowerEvent\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets or sets a value indicating whether the service can handle notifications of computer power status changes.\n  remarks: \"When the computer power status changes, the Service Control Manager (SCM) verifies whether the service accepts power event commands using the value of <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A>.  \\n  \\n If <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> is `true`, the command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> method is called if defined. If <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is not implemented in the derived class, the SCM handles the power event through the empty base class <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public bool CanHandlePowerEvent { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the service handles the computer power status changes indicated in the <xref href=\"System.ServiceProcess.PowerBroadcastStatus\"></xref> class, otherwise, `false`.'\n  overload: System.ServiceProcess.ServiceBase.CanHandlePowerEvent*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This property is modified after the service was started.\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent\n  commentId: P:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent\n  id: CanHandleSessionChangeEvent\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: CanHandleSessionChangeEvent\n  nameWithType: ServiceBase.CanHandleSessionChangeEvent\n  fullName: ServiceBase.CanHandleSessionChangeEvent\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets or sets a value that indicates whether the service can handle session change events received from a Terminal Server session.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public bool CanHandleSessionChangeEvent { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the service can handle Terminal Server session change events; otherwise, `false`.'\n  overload: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This property is modified after the service was started.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue\n  commentId: P:System.ServiceProcess.ServiceBase.CanPauseAndContinue\n  id: CanPauseAndContinue\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: CanPauseAndContinue\n  nameWithType: ServiceBase.CanPauseAndContinue\n  fullName: ServiceBase.CanPauseAndContinue\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets or sets a value indicating whether the service can be paused and resumed.\n  remarks: \"Set the value of the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property in the constructor for the service.  \\n  \\n When a service is paused, it halts what it is doing. When you continue the service (either through the Service Control Manager or programmatically), <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> runs.  \\n  \\n Sending a Pause request to the service can conserve system resources. Pause may not release all system resources, but Stop does. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> are often implemented to perform less processing than <xref:System.ServiceProcess.ServiceBase.OnStop%2A> and <xref:System.ServiceProcess.ServiceBase.OnStart%2A>.  \\n  \\n When <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `true`, override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the Service Control Manager (SCM) passes a Pause or Continue request to your service. <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.  \\n  \\n If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented. In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.\"\n  syntax:\n    content: public bool CanPauseAndContinue { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the service can be paused; otherwise, `false`.'\n  overload: System.ServiceProcess.ServiceBase.CanPauseAndContinue*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.CanPauseAndContinue\"></xref> property cannot be changed once the service has started.\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.CanShutdown\n  commentId: P:System.ServiceProcess.ServiceBase.CanShutdown\n  id: CanShutdown\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: CanShutdown\n  nameWithType: ServiceBase.CanShutdown\n  fullName: ServiceBase.CanShutdown\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets or sets a value indicating whether the service should be notified when the system is shutting down.\n  remarks: \"If <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> is `true`, the service is notified when the system is shutting down. At shutdown, the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method is called if it has been implemented in your derived class.  \\n  \\n> [!NOTE]\\n>  Only the system should cause the <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> method to execute; the service can call it, but this is not recommended.\"\n  syntax:\n    content: public bool CanShutdown { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the service should be notified when the system is shutting down; otherwise, `false`.  The default is `false`.'\n  overload: System.ServiceProcess.ServiceBase.CanShutdown*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.CanShutdown\"></xref> property cannot be changed once the service has started.\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.CanStop\n  commentId: P:System.ServiceProcess.ServiceBase.CanStop\n  id: CanStop\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: CanStop\n  nameWithType: ServiceBase.CanStop\n  fullName: ServiceBase.CanStop\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets or sets a value indicating whether the service can be stopped once it has started.\n  remarks: \"When Stop is called on a service, the Service Control Manager (SCM) verifies whether the service accepts Stop commands using the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A>. For most services, the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, but some operating system services, for example, do not allow the user to stop them.  \\n  \\n If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the derived class, the SCM handles the Stop command through the empty base class <xref:System.ServiceProcess.ServiceBase.OnStop%2A?displayProperty=fullName> method.\"\n  syntax:\n    content: public bool CanStop { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the service can be stopped and the <xref href=\"System.ServiceProcess.ServiceBase.OnStop\"></xref> method called; otherwise, `false`.'\n  overload: System.ServiceProcess.ServiceBase.CanStop*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.CanStop\"></xref> property cannot be changed once the service has started.\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.Dispose(System.Boolean)\n  commentId: M:System.ServiceProcess.ServiceBase.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ServiceBase.Dispose(Boolean)\n  fullName: ServiceBase.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Disposes of the resources (other than memory) used by the <xref href=\"System.ServiceProcess.ServiceBase\"></xref>.\n  remarks: \"Call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> in your derived class (and through it, in the <xref:System.ServiceProcess.ServiceBase> class) when you are finished using the derived class. The <xref:System.ServiceProcess.ServiceBase.Dispose%2A> method leaves the derived class in an unusable state. After calling <xref:System.ServiceProcess.ServiceBase.Dispose%2A>, you must release all references to the derived class and <xref:System.ServiceProcess.ServiceBase> so the memory they were occupying can be reclaimed by garbage collection.  \\n  \\n> [!NOTE]\\n>  Always call <xref:System.ServiceProcess.ServiceBase.Dispose%2A> before you release your last reference to the class derived from <xref:System.ServiceProcess.ServiceBase>. Otherwise, the resources <xref:System.ServiceProcess.ServiceBase> and the derived class are using will not be freed until garbage collection calls the objects' destructors.  \\n  \\n <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is often implemented to process the code in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, combined with a call to <xref:System.ServiceProcess.ServiceBase.Dispose%2A>. If you choose to do this in your derived class, it is customary to implement <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to allocate whatever <xref:System.ServiceProcess.ServiceBase.Dispose%2A> released.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.ServiceProcess.ServiceBase.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.EventLog\n  commentId: P:System.ServiceProcess.ServiceBase.EventLog\n  id: EventLog\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: EventLog\n  nameWithType: ServiceBase.EventLog\n  fullName: ServiceBase.EventLog\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets an event log you can use to write notification of service command calls, such as Start and Stop, to the Application event log.\n  remarks: \"The constructor initializes the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to an instance with the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> and <xref:System.Diagnostics.EventLog.Log%2A?displayProperty=fullName> properties set. The source is the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service, and the log is the computer's Application log. These values are set automatically and cannot be changed for automatic logging of service commands.  \\n  \\n When <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, Start, Stop, Pause, Continue, and custom commands are recorded automatically in the Application event log. You can use the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property to write additional messages to that log as well. The component calls <xref:System.Diagnostics.EventLog.WriteEntry%2A?displayProperty=fullName> using this <xref:System.ServiceProcess.ServiceBase.EventLog%2A> member.  \\n  \\n To report information to a custom event log rather than the Application log, set <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> to `false` and write instructions within the command-handling methods <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to post to the appropriate log.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public virtual System.Diagnostics.EventLog EventLog { get; }\n    return:\n      type: System.Diagnostics.EventLog\n      description: An <xref href=\"System.Diagnostics.EventLog\"></xref> instance whose source is registered to the Application log.\n  overload: System.ServiceProcess.ServiceBase.EventLog*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.ExitCode\n  commentId: P:System.ServiceProcess.ServiceBase.ExitCode\n  id: ExitCode\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: ExitCode\n  nameWithType: ServiceBase.ExitCode\n  fullName: ServiceBase.ExitCode\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets or sets the exit code for the service.\n  remarks: Set the <xref:System.ServiceProcess.ServiceBase.ExitCode%2A> property to a non-zero value before stopping the service to indicate an error to the Service Control Manager.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public int ExitCode { get; set; }\n    return:\n      type: System.Int32\n      description: The exit code for the service.\n  overload: System.ServiceProcess.ServiceBase.ExitCode*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.MaxNameLength\n  commentId: F:System.ServiceProcess.ServiceBase.MaxNameLength\n  id: MaxNameLength\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: MaxNameLength\n  nameWithType: ServiceBase.MaxNameLength\n  fullName: ServiceBase.MaxNameLength\n  type: Field\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Indicates the maximum size for a service name.\n  remarks: ServiceName and DisplayName both have size restrictions that must be observed when setting the properties on your service class.\n  syntax:\n    content: public const int MaxNameLength = 80;\n    return:\n      type: System.Int32\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.OnContinue\n  commentId: M:System.ServiceProcess.ServiceBase.OnContinue\n  id: OnContinue\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: OnContinue()\n  nameWithType: ServiceBase.OnContinue()\n  fullName: ServiceBase.OnContinue()\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: When implemented in a derived class, <xref href=\"System.ServiceProcess.ServiceBase.OnContinue\"></xref> runs when a Continue command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service resumes normal functioning after being paused.\n  remarks: \"Implement <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to mirror your application's response to <xref:System.ServiceProcess.ServiceBase.OnPause%2A>. When you continue the service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing runs, and the service becomes active again.  \\n  \\n <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.  \\n  \\n If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if they are implemented. In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.\"\n  syntax:\n    content: protected virtual void OnContinue ();\n    parameters: []\n  overload: System.ServiceProcess.ServiceBase.OnContinue*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)\n  commentId: M:System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)\n  id: OnCustomCommand(System.Int32)\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: OnCustomCommand(Int32)\n  nameWithType: ServiceBase.OnCustomCommand(Int32)\n  fullName: ServiceBase.OnCustomCommand(Int32)\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: When implemented in a derived class, <xref href=\"System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)\"></xref> executes when the Service Control Manager (SCM) passes a custom command to the service. Specifies actions to take when a command with the specified parameter value occurs.\n  remarks: \"<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> lets you specify additional functionality beyond starting, stopping, pausing and continuing services.  \\n  \\n The SCM does not examine the custom command to verify whether the service supports the `command` parameter passed in. It passes the custom command directly to the service. If the service does not recognize the `command` parameter, it does nothing.  \\n  \\n Custom commands are raised by an <xref:System.ServiceProcess.ServiceController.ExecuteCommand%2A> statement in a <xref:System.ServiceProcess.ServiceController> component. Use a switch statement or if..then condition to handle the custom commands you define on your service.  \\n  \\n The only values for a custom command that you can define in your application or use in <xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> are those between 128 and 255. Integers below 128 correspond to system-reserved values.  \\n  \\n If the <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> property is `true`, custom commands, like all other commands, write entries to the event log to report whether the method execution succeeded or failed.\"\n  syntax:\n    content: protected virtual void OnCustomCommand (int command);\n    parameters:\n    - id: command\n      type: System.Int32\n      description: The command message sent to the service.\n  overload: System.ServiceProcess.ServiceBase.OnCustomCommand*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.OnPause\n  commentId: M:System.ServiceProcess.ServiceBase.OnPause\n  id: OnPause\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: OnPause()\n  nameWithType: ServiceBase.OnPause()\n  fullName: ServiceBase.OnPause()\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: When implemented in a derived class, executes when a Pause command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service pauses.\n  remarks: \"Use <xref:System.ServiceProcess.ServiceBase.OnPause%2A> to specify the processing that occurs when the service receives a Pause command. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> property is `true`.  \\n  \\n When you continue a paused service (either through the Services console or programmatically), the <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> processing is run, and the service becomes active again.  \\n  \\n The Pause command only allows your application to react to a specific event. <xref:System.ServiceProcess.ServiceBase.OnPause%2A> does nothing to the service that you do not define it to do.  \\n  \\n Sending a Pause request to the service can conserve system resources because Pause need not release all system resources. For example, if threads have been opened by the process, pausing a service rather than stopping it can allow the threads to remain open, obviating the need to reallocate them when the service continues. If you define Pause to release all system resources, it behaves like a Stop command.  \\n  \\n Set <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> to `true`, and override <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> to specify the processing that should occur when the SCM passes a Pause or Continue request to your service. <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> should be implemented to undo the processing in <xref:System.ServiceProcess.ServiceBase.OnPause%2A>.  \\n  \\n If <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`, the SCM will not pass Pause or Continue requests to the service, so the <xref:System.ServiceProcess.ServiceBase.OnPause%2A> and <xref:System.ServiceProcess.ServiceBase.OnContinue%2A> methods will not be called even if implemented. In the SCM, the `Pause` and `Continue` controls are disabled when <xref:System.ServiceProcess.ServiceBase.CanPauseAndContinue%2A> is `false`.\"\n  syntax:\n    content: protected virtual void OnPause ();\n    parameters: []\n  overload: System.ServiceProcess.ServiceBase.OnPause*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)\n  commentId: M:System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)\n  id: OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: OnPowerEvent(PowerBroadcastStatus)\n  nameWithType: ServiceBase.OnPowerEvent(PowerBroadcastStatus)\n  fullName: ServiceBase.OnPowerEvent(PowerBroadcastStatus)\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: When implemented in a derived class, executes when the computer's power status has changed. This applies to laptop computers when they go into suspended mode, which is not the same as a system shutdown.\n  remarks: \"Use <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> to specify the processing that occurs when the system event indicated in the <xref:System.ServiceProcess.PowerBroadcastStatus> enumeration occurs--for example, when the computer is placed in suspended mode or indicates low battery power.  \\n  \\n <xref:System.ServiceProcess.ServiceBase.OnPowerEvent%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanHandlePowerEvent%2A> property is `true`.\"\n  syntax:\n    content: protected virtual bool OnPowerEvent (System.ServiceProcess.PowerBroadcastStatus powerStatus);\n    parameters:\n    - id: powerStatus\n      type: System.ServiceProcess.PowerBroadcastStatus\n      description: A <xref href=\"System.ServiceProcess.PowerBroadcastStatus\"></xref> that indicates a notification from the system about its power status.\n    return:\n      type: System.Boolean\n      description: When implemented in a derived class, the needs of your application determine what value to return. For example, if a `QuerySuspend` broadcast status is passed, you could cause your application to reject the query by returning `false`.\n  overload: System.ServiceProcess.ServiceBase.OnPowerEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)\n  commentId: M:System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)\n  id: OnSessionChange(System.ServiceProcess.SessionChangeDescription)\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: OnSessionChange(SessionChangeDescription)\n  nameWithType: ServiceBase.OnSessionChange(SessionChangeDescription)\n  fullName: ServiceBase.OnSessionChange(SessionChangeDescription)\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Executes when a change event is received from a Terminal Server session.\n  remarks: You must set the <xref:System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent%2A> property to `true` to enable the execution of this method.\n  syntax:\n    content: protected virtual void OnSessionChange (System.ServiceProcess.SessionChangeDescription changeDescription);\n    parameters:\n    - id: changeDescription\n      type: System.ServiceProcess.SessionChangeDescription\n      description: A structure that identifies the change type.\n  overload: System.ServiceProcess.ServiceBase.OnSessionChange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.OnShutdown\n  commentId: M:System.ServiceProcess.ServiceBase.OnShutdown\n  id: OnShutdown\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: OnShutdown()\n  nameWithType: ServiceBase.OnShutdown()\n  fullName: ServiceBase.OnShutdown()\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: When implemented in a derived class, executes when the system is shutting down. Specifies what should occur immediately prior to the system shutting down.\n  remarks: \"Use <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> to specify the processing that occurs when the system shuts down.  \\n  \\n This event occurs only when the operating system is shut down, not when the computer is turned off.  \\n  \\n <xref:System.ServiceProcess.ServiceBase.OnShutdown%2A> is expected to be overridden when the <xref:System.ServiceProcess.ServiceBase.CanShutdown%2A> property is `true`.\"\n  syntax:\n    content: protected virtual void OnShutdown ();\n    parameters: []\n  overload: System.ServiceProcess.ServiceBase.OnShutdown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.OnStart(System.String[])\n  commentId: M:System.ServiceProcess.ServiceBase.OnStart(System.String[])\n  id: OnStart(System.String[])\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: OnStart(String[])\n  nameWithType: ServiceBase.OnStart(String[])\n  fullName: ServiceBase.OnStart(String[])\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: When implemented in a derived class, executes when a Start command is sent to the service by the Service Control Manager (SCM) or when the operating system starts (for a service that starts automatically). Specifies actions to take when the service starts.\n  remarks: \"Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to specify the processing that occurs when the service receives a Start command. <xref:System.ServiceProcess.ServiceBase.OnStart%2A> is the method in which you specify the behavior of the service. <xref:System.ServiceProcess.ServiceBase.OnStart%2A> can take arguments as a way to pass data, but this usage is rare.  \\n  \\n> [!CAUTION]\\n>  Do not use the constructor to perform processing that should be in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. Use <xref:System.ServiceProcess.ServiceBase.OnStart%2A> to handle all initialization of your service. The constructor is called when the application's executable runs, not when the service runs. The executable runs before <xref:System.ServiceProcess.ServiceBase.OnStart%2A>. When you continue, for example, the constructor is not called again because the SCM already holds the object in memory. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> releases resources allocated in the constructor rather than in <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, the needed resources would not be created again the second time the service is called.  \\n  \\n Services can be set to start automatically when the computer reboots by setting the <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> on the service's installer to <xref:System.ServiceProcess.ServiceStartMode.Automatic>. In such a situation, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> would be called at system startup.  \\n  \\n <xref:System.ServiceProcess.ServiceBase.OnStart%2A> is expected to be overridden in the derived class. For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.  \\n  \\n Process initialization arguments for the service in the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method, not in the Main method. The arguments in the `args` parameter array can be set manually in the properties window for the service in the Services console. The arguments entered in the console are not saved; they are passed to the service on a one-time basis when the service is started from the control panel. Arguments that must be present when the service is automatically started can be placed in the ImagePath string value for the service's registry key (HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\\\\\*\\\\<service name>*). You can obtain the arguments from the registry using the <xref:System.Environment.GetCommandLineArgs%2A> method, for example:  `string[] imagePathArgs = Environment.GetCommandLineArgs();`.\"\n  syntax:\n    content: protected virtual void OnStart (string[] args);\n    parameters:\n    - id: args\n      type: System.String[]\n      description: Data passed by the start command.\n  overload: System.ServiceProcess.ServiceBase.OnStart*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.OnStop\n  commentId: M:System.ServiceProcess.ServiceBase.OnStop\n  id: OnStop\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: OnStop()\n  nameWithType: ServiceBase.OnStop()\n  fullName: ServiceBase.OnStop()\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: When implemented in a derived class, executes when a Stop command is sent to the service by the Service Control Manager (SCM). Specifies actions to take when a service stops running.\n  remarks: \"Use <xref:System.ServiceProcess.ServiceBase.OnStop%2A> to specify the processing that occurs when the service receives a Stop command.  \\n  \\n When the SCM receives a Stop command, it uses the value of <xref:System.ServiceProcess.ServiceBase.CanStop%2A> to verify whether the service accepts Stop commands. If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `true`, the Stop command is passed to the service, and the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method is called if it is defined. If <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is not implemented in the service, the SCM handles the Stop command.  \\n  \\n If <xref:System.ServiceProcess.ServiceBase.CanStop%2A> is `false`, the SCM ignores the Stop command. It is not passed to the service. The Stop command returns and throws an exception.  \\n  \\n <xref:System.ServiceProcess.ServiceBase.OnStop%2A> is expected to be overridden in the derived class. For the service to be useful, <xref:System.ServiceProcess.ServiceBase.OnStart%2A> and <xref:System.ServiceProcess.ServiceBase.OnStop%2A> should both be implemented in your service class.\"\n  syntax:\n    content: protected virtual void OnStop ();\n    parameters: []\n  overload: System.ServiceProcess.ServiceBase.OnStop*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)\n  commentId: M:System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)\n  id: RequestAdditionalTime(System.Int32)\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: RequestAdditionalTime(Int32)\n  nameWithType: ServiceBase.RequestAdditionalTime(Int32)\n  fullName: ServiceBase.RequestAdditionalTime(Int32)\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Requests additional time for a pending operation.\n  remarks: The <xref:System.ServiceProcess.ServiceBase.RequestAdditionalTime%2A> method is intended to be called by the overridden <xref:System.ServiceProcess.ServiceBase.OnContinue%2A>, <xref:System.ServiceProcess.ServiceBase.OnPause%2A>, <xref:System.ServiceProcess.ServiceBase.OnStart%2A>, or <xref:System.ServiceProcess.ServiceBase.OnStop%2A> methods to request additional time for a pending operation, to prevent the Service Control Manager (SCM) from marking the service as not responding.  If the pending operation is not a continue, pause, start, or stop, an <xref:System.InvalidOperationException> is thrown.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public void RequestAdditionalTime (int milliseconds);\n    parameters:\n    - id: milliseconds\n      type: System.Int32\n      description: The requested time in milliseconds.\n  overload: System.ServiceProcess.ServiceBase.RequestAdditionalTime*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The service is not in a pending state.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)\n  commentId: M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)\n  id: Run(System.ServiceProcess.ServiceBase)\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: Run(ServiceBase)\n  nameWithType: ServiceBase.Run(ServiceBase)\n  fullName: ServiceBase.Run(ServiceBase)\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Registers the executable for a service with the Service Control Manager (SCM).\n  remarks: \"Call this overload in the `main()` function of the service executable to register the service with the Service Control Manager. After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%29>, the Service Control Manager issues a Start command, which results in a call to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> method in the service. The service is not started until the Start command is executed.  \\n  \\n The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName> method is called in much the same way as <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> for Windows Forms applications.  \\n  \\n If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if the service specified by the `service` parameter fails to start.\"\n  syntax:\n    content: public static void Run (System.ServiceProcess.ServiceBase service);\n    parameters:\n    - id: service\n      type: System.ServiceProcess.ServiceBase\n      description: A <xref href=\"System.ServiceProcess.ServiceBase\"></xref> which indicates a service to start.\n  overload: System.ServiceProcess.ServiceBase.Run*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>service</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])\n  commentId: M:System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])\n  id: Run(System.ServiceProcess.ServiceBase[])\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: Run(ServiceBase[])\n  nameWithType: ServiceBase.Run(ServiceBase[])\n  fullName: ServiceBase.Run(ServiceBase[])\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Registers the executable for multiple services with the Service Control Manager (SCM).\n  remarks: \"Call this overload in the `main()` function of the service executable to register the services with the Service Control Manager. After you call <xref:System.ServiceProcess.ServiceBase.Run%28System.ServiceProcess.ServiceBase%5B%5D%29>, the Service Control Manager issues Start commands, which result in calls to the <xref:System.ServiceProcess.ServiceBase.OnStart%2A> methods in the services. The services are not started until the Start commands are executed.  \\n  \\n The <xref:System.ServiceProcess.ServiceBase.Run%2A?displayProperty=fullName> method is called in much the same way as the <xref:System.Windows.Forms.Application.Run%2A?displayProperty=fullName> method for Windows Forms applications.  \\n  \\n If <xref:System.ServiceProcess.ServiceBase.AutoLog%2A> is `true`, an entry is written to the event log if any service in the array fails to start.\"\n  syntax:\n    content: public static void Run (System.ServiceProcess.ServiceBase[] services);\n    parameters:\n    - id: services\n      type: System.ServiceProcess.ServiceBase[]\n      description: An array of ServiceBase instances, which indicate services to start.\n  overload: System.ServiceProcess.ServiceBase.Run*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: You did not supply a service to start. The array might be `null` or empty.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.ServiceHandle\n  commentId: P:System.ServiceProcess.ServiceBase.ServiceHandle\n  id: ServiceHandle\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: ServiceHandle\n  nameWithType: ServiceBase.ServiceHandle\n  fullName: ServiceBase.ServiceHandle\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets the service control handle for the service.\n  remarks: The service control handle is used to communicate with the Service Control Manager (SCM).  The handle can be used to update the service control manager's status information for the calling service using the unmanaged `SetServiceStatus` function.\n  syntax:\n    content: protected IntPtr ServiceHandle { get; }\n    return:\n      type: System.IntPtr\n      description: An <xref href=\"System.IntPtr\"></xref> structure that contains the service control handle for the service.\n  overload: System.ServiceProcess.ServiceBase.ServiceHandle*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)\n  commentId: M:System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)\n  id: ServiceMainCallback(System.Int32,System.IntPtr)\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: ServiceMainCallback(Int32, IntPtr)\n  nameWithType: ServiceBase.ServiceMainCallback(Int32, IntPtr)\n  fullName: ServiceBase.ServiceMainCallback(Int32, IntPtr)\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Registers the command handler and starts the service.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public void ServiceMainCallback (int argCount, IntPtr argPointer);\n    parameters:\n    - id: argCount\n      type: System.Int32\n      description: The number of arguments in the argument array.\n    - id: argPointer\n      type: System.IntPtr\n      description: An <xref href=\"System.IntPtr\"></xref> structure that points to an array of arguments.\n  overload: System.ServiceProcess.ServiceBase.ServiceMainCallback*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.ServiceName\n  commentId: P:System.ServiceProcess.ServiceBase.ServiceName\n  id: ServiceName\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: ServiceName\n  nameWithType: ServiceBase.ServiceName\n  fullName: ServiceBase.ServiceName\n  type: Property\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Gets or sets the short name used to identify the service to the system.\n  remarks: \"The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> identifies the service to the Service Control Manager. The value of this property must be identical to the name recorded for the service in the <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=fullName> property of the corresponding installer class. In code, the <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> of the service is usually set in the `main()` function of the executable.  \\n  \\n The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A> is also used to specify the <xref:System.Diagnostics.EventLog.Source%2A?displayProperty=fullName> associated with the <xref:System.ServiceProcess.ServiceBase.EventLog%2A> property. This <xref:System.ServiceProcess.ServiceBase.EventLog%2A> is an instance that writes service command information to the Application log.  \\n  \\n The <xref:System.ServiceProcess.ServiceBase.ServiceName%2A>, which supplies the source string for the event log, must be set before the service writes to the event log. Trying to access the event log before the source name is set causes an exception to be thrown.\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\")]\n\n      [System.ServiceProcess.ServiceProcessDescription(\"SBServiceName\")]\n\n      public string ServiceName { get; set; }\n    return:\n      type: System.String\n      description: The name of the service.\n  overload: System.ServiceProcess.ServiceBase.ServiceName*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The service has already been started. The <xref href=\"System.ServiceProcess.ServiceBase.ServiceName\"></xref> property cannot be changed once the service has started.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The specified name is a zero-length string or is longer than <xref href=\"System.ServiceProcess.ServiceBase.MaxNameLength\"></xref>, or the specified name contains forward slash or backslash characters.\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  - type: System.ServiceProcess.ServiceProcessDescriptionAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.ServiceProcess.ServiceBase.Stop\n  commentId: M:System.ServiceProcess.ServiceBase.Stop\n  id: Stop\n  parent: System.ServiceProcess.ServiceBase\n  langs:\n  - csharp\n  name: Stop()\n  nameWithType: ServiceBase.Stop()\n  fullName: ServiceBase.Stop()\n  type: Method\n  assemblies:\n  - System.ServiceProcess\n  namespace: System.ServiceProcess\n  summary: Stops the executing service.\n  remarks: The <xref:System.ServiceProcess.ServiceBase.Stop%2A> method sets the service state to indicate a stop is pending and calls the <xref:System.ServiceProcess.ServiceBase.OnStop%2A> method.  After the application is stopped, the service state is set to stopped. If the application is a hosted service, the application domain is unloaded.\n  syntax:\n    content: public void Stop ();\n    parameters: []\n  overload: System.ServiceProcess.ServiceBase.Stop*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.ComponentModel.Component\n  parent: System.ComponentModel\n  isExternal: false\n  name: Component\n  nameWithType: Component\n  fullName: System.ComponentModel.Component\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ServiceProcess.ServiceBase.#ctor\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: ServiceBase()\n  nameWithType: ServiceBase.ServiceBase()\n  fullName: ServiceBase.ServiceBase()\n- uid: System.ServiceProcess.ServiceBase.AutoLog\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: AutoLog\n  nameWithType: ServiceBase.AutoLog\n  fullName: ServiceBase.AutoLog\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: CanHandlePowerEvent\n  nameWithType: ServiceBase.CanHandlePowerEvent\n  fullName: ServiceBase.CanHandlePowerEvent\n- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: CanHandleSessionChangeEvent\n  nameWithType: ServiceBase.CanHandleSessionChangeEvent\n  fullName: ServiceBase.CanHandleSessionChangeEvent\n- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: CanPauseAndContinue\n  nameWithType: ServiceBase.CanPauseAndContinue\n  fullName: ServiceBase.CanPauseAndContinue\n- uid: System.ServiceProcess.ServiceBase.CanShutdown\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: CanShutdown\n  nameWithType: ServiceBase.CanShutdown\n  fullName: ServiceBase.CanShutdown\n- uid: System.ServiceProcess.ServiceBase.CanStop\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: CanStop\n  nameWithType: ServiceBase.CanStop\n  fullName: ServiceBase.CanStop\n- uid: System.ServiceProcess.ServiceBase.Dispose(System.Boolean)\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ServiceBase.Dispose(Boolean)\n  fullName: ServiceBase.Dispose(Boolean)\n- uid: System.ServiceProcess.ServiceBase.EventLog\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: EventLog\n  nameWithType: ServiceBase.EventLog\n  fullName: ServiceBase.EventLog\n- uid: System.Diagnostics.EventLog\n  parent: System.Diagnostics\n  isExternal: false\n  name: EventLog\n  nameWithType: EventLog\n  fullName: System.Diagnostics.EventLog\n- uid: System.ServiceProcess.ServiceBase.ExitCode\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: ExitCode\n  nameWithType: ServiceBase.ExitCode\n  fullName: ServiceBase.ExitCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ServiceProcess.ServiceBase.MaxNameLength\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: MaxNameLength\n  nameWithType: ServiceBase.MaxNameLength\n  fullName: ServiceBase.MaxNameLength\n- uid: System.ServiceProcess.ServiceBase.OnContinue\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnContinue()\n  nameWithType: ServiceBase.OnContinue()\n  fullName: ServiceBase.OnContinue()\n- uid: System.ServiceProcess.ServiceBase.OnCustomCommand(System.Int32)\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnCustomCommand(Int32)\n  nameWithType: ServiceBase.OnCustomCommand(Int32)\n  fullName: ServiceBase.OnCustomCommand(Int32)\n- uid: System.ServiceProcess.ServiceBase.OnPause\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnPause()\n  nameWithType: ServiceBase.OnPause()\n  fullName: ServiceBase.OnPause()\n- uid: System.ServiceProcess.ServiceBase.OnPowerEvent(System.ServiceProcess.PowerBroadcastStatus)\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnPowerEvent(PowerBroadcastStatus)\n  nameWithType: ServiceBase.OnPowerEvent(PowerBroadcastStatus)\n  fullName: ServiceBase.OnPowerEvent(PowerBroadcastStatus)\n- uid: System.ServiceProcess.PowerBroadcastStatus\n  parent: System.ServiceProcess\n  isExternal: false\n  name: PowerBroadcastStatus\n  nameWithType: PowerBroadcastStatus\n  fullName: System.ServiceProcess.PowerBroadcastStatus\n- uid: System.ServiceProcess.ServiceBase.OnSessionChange(System.ServiceProcess.SessionChangeDescription)\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnSessionChange(SessionChangeDescription)\n  nameWithType: ServiceBase.OnSessionChange(SessionChangeDescription)\n  fullName: ServiceBase.OnSessionChange(SessionChangeDescription)\n- uid: System.ServiceProcess.SessionChangeDescription\n  parent: System.ServiceProcess\n  isExternal: false\n  name: SessionChangeDescription\n  nameWithType: SessionChangeDescription\n  fullName: System.ServiceProcess.SessionChangeDescription\n- uid: System.ServiceProcess.ServiceBase.OnShutdown\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnShutdown()\n  nameWithType: ServiceBase.OnShutdown()\n  fullName: ServiceBase.OnShutdown()\n- uid: System.ServiceProcess.ServiceBase.OnStart(System.String[])\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnStart(String[])\n  nameWithType: ServiceBase.OnStart(String[])\n  fullName: ServiceBase.OnStart(String[])\n- uid: System.String\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ServiceProcess.ServiceBase.OnStop\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnStop()\n  nameWithType: ServiceBase.OnStop()\n  fullName: ServiceBase.OnStop()\n- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime(System.Int32)\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: RequestAdditionalTime(Int32)\n  nameWithType: ServiceBase.RequestAdditionalTime(Int32)\n  fullName: ServiceBase.RequestAdditionalTime(Int32)\n- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase)\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: Run(ServiceBase)\n  nameWithType: ServiceBase.Run(ServiceBase)\n  fullName: ServiceBase.Run(ServiceBase)\n- uid: System.ServiceProcess.ServiceBase\n  parent: System.ServiceProcess\n  isExternal: false\n  name: ServiceBase\n  nameWithType: ServiceBase\n  fullName: System.ServiceProcess.ServiceBase\n- uid: System.ServiceProcess.ServiceBase.Run(System.ServiceProcess.ServiceBase[])\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: Run(ServiceBase[])\n  nameWithType: ServiceBase.Run(ServiceBase[])\n  fullName: ServiceBase.Run(ServiceBase[])\n- uid: System.ServiceProcess.ServiceBase[]\n  parent: System.ServiceProcess\n  isExternal: false\n  name: ServiceBase[]\n  nameWithType: ServiceBase[]\n  fullName: System.ServiceProcess.ServiceBase[]\n  spec.csharp:\n  - uid: System.ServiceProcess.ServiceBase\n    name: ServiceBase\n    nameWithType: ServiceBase\n    fullName: System.ServiceProcess.ServiceBase\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.ServiceProcess.ServiceBase.ServiceHandle\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: ServiceHandle\n  nameWithType: ServiceBase.ServiceHandle\n  fullName: ServiceBase.ServiceHandle\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback(System.Int32,System.IntPtr)\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: ServiceMainCallback(Int32, IntPtr)\n  nameWithType: ServiceBase.ServiceMainCallback(Int32, IntPtr)\n  fullName: ServiceBase.ServiceMainCallback(Int32, IntPtr)\n- uid: System.ServiceProcess.ServiceBase.ServiceName\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: ServiceName\n  nameWithType: ServiceBase.ServiceName\n  fullName: ServiceBase.ServiceName\n- uid: System.ServiceProcess.ServiceBase.Stop\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: Stop()\n  nameWithType: ServiceBase.Stop()\n  fullName: ServiceBase.Stop()\n- uid: System.ServiceProcess.ServiceBase.#ctor*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: ServiceBase\n  nameWithType: ServiceBase.ServiceBase\n  fullName: ServiceBase.ServiceBase\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.AutoLog*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: AutoLog\n  nameWithType: ServiceBase.AutoLog\n  fullName: ServiceBase.AutoLog\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.CanHandlePowerEvent*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: CanHandlePowerEvent\n  nameWithType: ServiceBase.CanHandlePowerEvent\n  fullName: ServiceBase.CanHandlePowerEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.CanHandleSessionChangeEvent*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: CanHandleSessionChangeEvent\n  nameWithType: ServiceBase.CanHandleSessionChangeEvent\n  fullName: ServiceBase.CanHandleSessionChangeEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.CanPauseAndContinue*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: CanPauseAndContinue\n  nameWithType: ServiceBase.CanPauseAndContinue\n  fullName: ServiceBase.CanPauseAndContinue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.CanShutdown*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: CanShutdown\n  nameWithType: ServiceBase.CanShutdown\n  fullName: ServiceBase.CanShutdown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.CanStop*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: CanStop\n  nameWithType: ServiceBase.CanStop\n  fullName: ServiceBase.CanStop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.Dispose*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: Dispose\n  nameWithType: ServiceBase.Dispose\n  fullName: ServiceBase.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.EventLog*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: EventLog\n  nameWithType: ServiceBase.EventLog\n  fullName: ServiceBase.EventLog\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.ExitCode*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: ExitCode\n  nameWithType: ServiceBase.ExitCode\n  fullName: ServiceBase.ExitCode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.OnContinue*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnContinue\n  nameWithType: ServiceBase.OnContinue\n  fullName: ServiceBase.OnContinue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.OnCustomCommand*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnCustomCommand\n  nameWithType: ServiceBase.OnCustomCommand\n  fullName: ServiceBase.OnCustomCommand\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.OnPause*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnPause\n  nameWithType: ServiceBase.OnPause\n  fullName: ServiceBase.OnPause\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.OnPowerEvent*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnPowerEvent\n  nameWithType: ServiceBase.OnPowerEvent\n  fullName: ServiceBase.OnPowerEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.OnSessionChange*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnSessionChange\n  nameWithType: ServiceBase.OnSessionChange\n  fullName: ServiceBase.OnSessionChange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.OnShutdown*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnShutdown\n  nameWithType: ServiceBase.OnShutdown\n  fullName: ServiceBase.OnShutdown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.OnStart*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnStart\n  nameWithType: ServiceBase.OnStart\n  fullName: ServiceBase.OnStart\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.OnStop*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: OnStop\n  nameWithType: ServiceBase.OnStop\n  fullName: ServiceBase.OnStop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.RequestAdditionalTime*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: RequestAdditionalTime\n  nameWithType: ServiceBase.RequestAdditionalTime\n  fullName: ServiceBase.RequestAdditionalTime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.Run*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: Run\n  nameWithType: ServiceBase.Run\n  fullName: ServiceBase.Run\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.ServiceHandle*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: ServiceHandle\n  nameWithType: ServiceBase.ServiceHandle\n  fullName: ServiceBase.ServiceHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.ServiceMainCallback*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: ServiceMainCallback\n  nameWithType: ServiceBase.ServiceMainCallback\n  fullName: ServiceBase.ServiceMainCallback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.ServiceName*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: ServiceName\n  nameWithType: ServiceBase.ServiceName\n  fullName: ServiceBase.ServiceName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.ServiceProcess.ServiceBase.Stop*\n  parent: System.ServiceProcess.ServiceBase\n  isExternal: false\n  name: Stop\n  nameWithType: ServiceBase.Stop\n  fullName: ServiceBase.Stop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceProcess/ServiceBase.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.ComponentModel.Component.ToString\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: ToString()\n  nameWithType: Component.ToString()\n  fullName: Component.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.ComponentModel.Component.CanRaiseEvents\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: CanRaiseEvents\n  nameWithType: Component.CanRaiseEvents\n  fullName: Component.CanRaiseEvents\n- uid: System.ComponentModel.Component.Container\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Container\n  nameWithType: Component.Container\n  fullName: Component.Container\n- uid: System.ComponentModel.Component.DesignMode\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: DesignMode\n  nameWithType: Component.DesignMode\n  fullName: Component.DesignMode\n- uid: System.ComponentModel.Component.Dispose\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Dispose()\n  nameWithType: Component.Dispose()\n  fullName: Component.Dispose()\n- uid: System.ComponentModel.Component.Disposed\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Disposed\n  nameWithType: Component.Disposed\n  fullName: Component.Disposed\n- uid: System.ComponentModel.Component.Events\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Events\n  nameWithType: Component.Events\n  fullName: Component.Events\n- uid: System.ComponentModel.Component.GetService(System.Type)\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: GetService(Type)\n  nameWithType: Component.GetService(Type)\n  fullName: Component.GetService(Type)\n- uid: System.ComponentModel.Component.Site\n  parent: System.ComponentModel.Component\n  isExternal: false\n  name: Site\n  nameWithType: Component.Site\n  fullName: Component.Site\n"}