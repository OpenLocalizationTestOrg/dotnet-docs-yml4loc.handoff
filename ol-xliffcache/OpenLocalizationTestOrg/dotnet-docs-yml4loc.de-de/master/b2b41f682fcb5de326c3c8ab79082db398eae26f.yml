### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  id: Task`1
  children:
  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0})
  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)
  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.Factory
  - System.Threading.Tasks.Task`1.GetAwaiter
  - System.Threading.Tasks.Task`1.Result
  langs:
  - csharp
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  type: Class
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Represents an asynchronous operation that can return a value.
  remarks: "The <xref:System.Threading.Tasks.Task%601> class represents a single operation that returns a value and that usually executes asynchronously. <xref:System.Threading.Tasks.Task%601> objects are one of the central components of the  first introduced in the .NET Framework 4. Because the work performed by a <xref:System.Threading.Tasks.Task%601> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.  \n  \n <xref:System.Threading.Tasks.Task%601> instances may be created in a variety of ways. The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> or <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. These methods provide a simple way to start a task by using default values and without acquiring additional parameters. The following example uses the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> method to start a task that loops and then displays the number of loop iterations:  \n  \n [!code-csharp[System.Threading.Tasks.Task\\`1#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/run1.cs#6)]\n [!code-vb[System.Threading.Tasks.Task\\`1#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/run1.vb#6)]  \n  \n An alternative, and the most common way to start a task in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is to call the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method. The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory> object, and the <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory%601> object. Overloads of their `StartNew` method let you pass arguments, define task creation options, and specify a task scheduler. The following example uses the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> method to start a task. It is functionally equivalent to the code in the previous example.  \n  \n [!code-csharp[System.Threading.Tasks.Task\\`1#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/startnew1.cs#7)]\n [!code-vb[System.Threading.Tasks.Task\\`1#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/startnew1.vb#7)]  \n  \n For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).  \n  \n The <xref:System.Threading.Tasks.Task%601> class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> and `Task.Factory.StartNew` methods are the preferred mechanisms for creating and scheduling computational tasks, but for scenarios where task creation and scheduling must be separated, the constructors may be used, and the task's <xref:System.Threading.Tasks.Task.Start%2A> method may then be used to schedule the task for execution at a later time.  \n  \n Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context. That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread. For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes. For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref:System.Globalization.CultureInfo> topic. Note that Store apps follow the Windows Runtime in setting and getting the default culture.  \n  \nFor operations that do not return a value, you use the <xref:System.Threading.Tasks.Task> class. If you're developing with C# 7, for a more lightweight task that is a value type rather than a reference type, use the <xref:System.Threading.Tasks.ValueTask?displayProperty=fullName> structure; it is supported starting with C# 7."
  syntax:
    content: 'public class Task<TResult> : System.Threading.Tasks.Task'
    typeParameters:
    - id: TResult
      description: The type of the result produced by this <xref href="System.Threading.Tasks.Task`1"></xref>.
  inheritance:
  - System.Object
  - System.Threading.Tasks.Task
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Threading.Tasks.Task.AsyncState
  - System.Threading.Tasks.Task.CompletedTask
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.CreationOptions
  - System.Threading.Tasks.Task.CurrentId
  - System.Threading.Tasks.Task.Delay(System.Int32)
  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Dispose
  - System.Threading.Tasks.Task.Dispose(System.Boolean)
  - System.Threading.Tasks.Task.Exception
  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromException(System.Exception)
  - System.Threading.Tasks.Task.FromException``1(System.Exception)
  - System.Threading.Tasks.Task.FromResult``1(``0)
  - System.Threading.Tasks.Task.Id
  - System.Threading.Tasks.Task.IsCanceled
  - System.Threading.Tasks.Task.IsCompleted
  - System.Threading.Tasks.Task.IsCompletedSuccessfully
  - System.Threading.Tasks.Task.IsFaulted
  - System.Threading.Tasks.Task.Run(System.Action)
  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{``0})
  - System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.RunSynchronously
  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Start
  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Status
  - System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  - System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  - System.Threading.Tasks.Task.Wait
  - System.Threading.Tasks.Task.Wait(System.Int32)
  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.Yield
  extensionMethods:
  - System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})
  - System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})
  - System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task)
  - System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task,System.TimeSpan)
  - System.Windows.Threading.TaskExtensions.IsDispatcherOperationTask(System.Threading.Tasks.Task)
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0})
  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})
  id: '#ctor(System.Func{`0})'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task<TResult>(Func<TResult>)
  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>)
  fullName: Task<TResult>.Task<TResult>(Func<TResult>)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task`1"></xref> with the specified function.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  example:
  - "The following example counts the approximate number of words in text files that represent published books. Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression. The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=fullName> method is called to ensure that all tasks have completed before displaying the word count of each book to the console.  \n  \n Object instantiation is separated from object execution in this example so that the example can ensure that each file exists. If they do not,  it displays the name of the missing file. Otherwise, it calls the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to launch each task.  \n  \n [!code-csharp[System.Threading.Tasks.Task.ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run3.cs#2)]\n [!code-vb[System.Threading.Tasks.Task.ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run3.vb#2)]  \n  \n The regular expression pattern `\\p{P}*\\s+` matches zero, one, or more punctuation characters followed by one or more whitespace characters. It assumes that the total number of matches equals the approximate word count."
  syntax:
    content: public Task (Func<TResult> function);
    parameters:
    - id: function
      type: System.Func`1
      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href="System.Threading.Tasks.Task`1.Result"></xref> property will be set to return the result value of the function.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)
  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)
  id: '#ctor(System.Func{System.Object,`0},System.Object)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task<TResult>(Func<Object,TResult>, Object)
  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object)
  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task`1"></xref> with the specified function and state.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Func<object,TResult> function, object state);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href="System.Threading.Tasks.Task`1.Result"></xref> property will be set to return the result value of the function.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)
  id: '#ctor(System.Func{`0},System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task<TResult>(Func<TResult>, CancellationToken)
  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken)
  fullName: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task`1"></xref> with the specified function.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Func<TResult> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func`1
      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href="System.Threading.Tasks.Task`1.Result"></xref> property will be set to return the result value of the function.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> to be assigned to this task.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> that created <code>cancellationToken</code> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task<TResult>(Func<TResult>, TaskCreationOptions)
  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, TaskCreationOptions)
  fullName: Task<TResult>.Task<TResult>(Func<TResult>, TaskCreationOptions)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task`1"></xref> with the specified function and creation options.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func`1
      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href="System.Threading.Tasks.Task`1.Result"></xref> property will be set to return the result value of the function.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <xref href="System.Threading.Tasks.TaskCreationOptions"></xref> used to customize the task's behavior.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskCreationOptions"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task<TResult>(Func<Object,TResult>, Object, CancellationToken)
  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken)
  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task`1"></xref> with the specified action, state, and options.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href="System.Threading.Tasks.Task`1.Result"></xref> property will be set to return the result value of the function.
    - id: state
      type: System.Object
      description: An object representing data to be used by the function.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> to be assigned to the new task.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> that created <code>cancellationToken</code> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task`1"></xref> with the specified action, state, and options.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href="System.Threading.Tasks.Task`1.Result"></xref> property will be set to return the result value of the function.
    - id: state
      type: System.Object
      description: An object representing data to be used by the function.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <xref href="System.Threading.Tasks.TaskCreationOptions"></xref> used to customize the task's behavior.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskCreationOptions"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)
  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)
  fullName: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task`1"></xref> with the specified function and creation options.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method.  The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func`1
      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href="System.Threading.Tasks.Task`1.Result"></xref> property will be set to return the result value of the function.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <xref href="System.Threading.Tasks.TaskCreationOptions"></xref> used to customize the task's behavior.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> that created <code>cancellationToken</code> has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskCreationOptions"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)
  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)
  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task`1"></xref> with the specified action, state, and options.
  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.
  syntax:
    content: public Task (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href="System.Threading.Tasks.Task`1.Result"></xref> property will be set to return the result value of the function.
    - id: state
      type: System.Object
      description: An object representing data to be used by the function.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> to be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <xref href="System.Threading.Tasks.TaskCreationOptions"></xref> used to customize the task's behavior.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource"></xref> that created <code>cancellationToken</code> has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskCreationOptions"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)
  commentId: M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)
  id: ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ConfigureAwait(Boolean)
  nameWithType: Task<TResult>.ConfigureAwait(Boolean)
  fullName: Task<TResult>.ConfigureAwait(Boolean)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Configures an awaiter used to await this <xref href="System.Threading.Tasks.Task`1"></xref>.
  syntax:
    content: public System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait (bool continueOnCapturedContext);
    parameters:
    - id: continueOnCapturedContext
      type: System.Boolean
      description: true to attempt to marshal the continuation back to the original context captured; otherwise, false.
    return:
      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1
      description: An object used to await this task.
  overload: System.Threading.Tasks.Task`1.ConfigureAwait*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed. If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
      description: An action to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></xref>, as  well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> to associate with the continuation task and to use for its  execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>scheduler</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref>.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled. For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult}}
      description: An action to run according the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>continuationAction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
      description: An action to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>scheduler</code> argument is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
      description: An action to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationAction</code> argument is null.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
      description: An action to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such  as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationAction</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.
  remarks: "The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.  \n  \n For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)."
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult}}
      description: An action to according the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task`1"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationAction</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>>, CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a cancelable continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.
  example:
  - "The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user. An array is used to hold information about the prime numbers. The array index represents the number, and the element's value indicates whether that number is composite (its value is `true`) or prime (its value is `false`). This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.  \n  \n A cancellation token is passed to both the antecedent and the continuation task. A <xref:System.Timers.Timer?displayProperty=fullName> object is used to define a timeout value of 100 milliseconds. If the event fires, the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> method is called, and the cancellation token is used to request cancellation of the tasks.  \n  \n [!code-csharp[System.Threading.Tasks.Task\\`1.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continue1.cs#1)]\n [!code-vb[System.Threading.Tasks.Task\\`1.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continue1.vb#1)]  \n  \n Typically, supplying a value of about 100,000 causes the timeout interval to expire and the <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event to fire, and the cancellation request to be set."
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult}}
      description: An action to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate is passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that is passed to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation task.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationAction</code> argument is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>,Object>, Object)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that that is passed state information and that executes when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.
  example:
  - "The following example creates a task that is passed an integer between 2 and 20 and returns an array that contains the first ten exponents (from n<sup>1</sup> to n<sup>10</sup>) of that number. A continuation task is then responsible for displaying the exponents. It is passed both the antecedent and the original number whose exponents the antecedent generates.  \n  \n [!code-csharp[System.Threading.Tasks.Task\\`1.ContinueWith#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continuewith3.cs#3)]\n [!code-vb[System.Threading.Tasks.Task\\`1.ContinueWith#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continuewith3.vb#3)]"
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
      description: An action to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationAction</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>>)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes asynchronously when the target task completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to being canceled.
  example:
  - "The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user. An array is used to hold information about the prime numbers. The array index represents the number, and the element's value indicates whether that number is composite (its value is `true`) or prime (its value is `false`). This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.  \n  \n [!code-csharp[System.Threading.Tasks.Task\\`1.ContinueWith#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continue2.cs#2)]\n [!code-vb[System.Threading.Tasks.Task\\`1.ContinueWith#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continue2.vb#2)]"
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult}}
      description: An action to run when the antecedent <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be passed the completed task as an argument.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation task.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task`1"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationAction</code> argument is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>>, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskScheduler)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult}}
      description: An action to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be passed the completed task as an argument.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task`1"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>continuationAction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: "The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.  \n  \n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>. This task's completion state will be transferred to the task returned from the <xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=fullName> call."
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
      description: A function to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> to associate with the continuation task and to use for its execution.
    typeParameters:
    - id: TNewResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>scheduler</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The  <code>continuationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref>.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.
  remarks: "The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.  \n  \n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>."
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
      description: "A function to run according the condition specified in <code>continuationOptions</code>.  \n  \n When run, the delegate will be passed as an argument this completed task."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> to associate with the continuation task and to use for its execution.
    typeParameters:
    - id: TNewResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>continuationFunction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
      description: A function to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> to associate with the continuation task and to use for its execution.
    typeParameters:
    - id: TNewResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>scheduler</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: "The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.  \n  \n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>. This task's completion state will be transferred to the task returned from the ContinueWith call."
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
      description: A function to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></xref>.
    typeParameters:
    - id: TNewResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationFunction</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
      description: A function to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new task.
    typeParameters:
    - id: TNewResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationFunction</code> argument is null.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken"></xref> has already been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.
  remarks: "The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.  \n  \n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>.."
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
      description: "A function to run according the condition specified in <code>continuationOptions</code>.  \n  \n When run, the delegate will be passed the completed task as an argument."
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously"></xref>.
    typeParameters:
    - id: TNewResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task`1"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationFunction</code> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
      description: A function to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> that will be assigned to the new task.
    typeParameters:
    - id: TNewResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationFunction</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.
  example:
  - "The following example creates a chain of continuation tasks. Each task provides the current time, a <xref:System.DateTime> object, for the state argument of the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%2CSystem.Object%7D%2CSystem.Object%29> method. Each <xref:System.DateTime> value represents the time at which the continue task is created. Each task produces as its result a second <xref:System.DateTime> value that represents the time at which the task finishes. After all tasks finish, the example displays the date and times at which each continuation task starts and finishes.  \n  \n [!code-csharp[TPL_ContinuationState#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_continuationstate/cs/continuationstate.cs#1)]\n [!code-vb[TPL_ContinuationState#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_continuationstate/vb/continuationstate.vb#1)]"
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
      description: A function to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    typeParameters:
    - id: TNewResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationFunction</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
      description: A function to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be passed the completed task as an argument.
    typeParameters:
    - id: TNewResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task`1"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>continuationFunction</code> argument is null.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task`1"></xref> completes.
  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
      description: A function to run when the <xref href="System.Threading.Tasks.Task`1"></xref> completes. When run, the delegate will be passed the completed task as an argument.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> to associate with the continuation task and to use for its execution.
    typeParameters:
    - id: TNewResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.Task`1.ContinueWith``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task`1"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>continuationFunction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.Factory
  commentId: P:System.Threading.Tasks.Task`1.Factory
  id: Factory
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Factory
  nameWithType: Task<TResult>.Factory
  fullName: Task<TResult>.Factory
  type: Property
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Provides access to factory methods for creating and configuring <xref href="System.Threading.Tasks.Task`1"></xref> instances.
  remarks: "This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory%601> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=fullName> constructor. It has the following property values:  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Threading.Tasks.TaskFactory%601.CancellationToken%2A?displayProperty=fullName>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory%601.ContinuationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskContinuationOptions?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory%601.CreationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory%601.Scheduler%2A?displayProperty=fullName>|`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=fullName>|  \n  \n The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a <xref:System.Threading.Tasks.Task%601> object with default configuration values.  \n  \n The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make three calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method. The first starts a `Task<Int32>` object, which executes a lambda expression that returns 1. The second starts a `Task<Test>` object, which executes a lambda expression that instantiates a new `Test` instance. The third starts a `Task<String[]>` object, which enumerates the files in the C:\\Users\\Public\\Pictures\\Sample Pictures\\ directory. (Note that successful execution of the example requires that the directory exist and that it contain files.  \n  \n [!code-csharp[TPL#10](~/samples/snippets/csharp/VS_Snippets_Misc/tpl/cs/returnavalue10.cs#10)]\n [!code-vb[TPL#10](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl/vb/10_returnavalue.vb#10)]"
  syntax:
    content: public static System.Threading.Tasks.TaskFactory<TResult> Factory { get; }
    return:
      type: System.Threading.Tasks.TaskFactory`1
      description: A factory object that can create a variety of <xref href="System.Threading.Tasks.Task`1"></xref> objects.
  overload: System.Threading.Tasks.Task`1.Factory*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.GetAwaiter
  commentId: M:System.Threading.Tasks.Task`1.GetAwaiter
  id: GetAwaiter
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: GetAwaiter()
  nameWithType: Task<TResult>.GetAwaiter()
  fullName: Task<TResult>.GetAwaiter()
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Gets an awaiter used to await this <xref href="System.Threading.Tasks.Task`1"></xref>.
  remarks: This method is intended for compiler user rather than use directly in code.
  syntax:
    content: public System.Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter ();
    parameters: []
    return:
      type: System.Runtime.CompilerServices.TaskAwaiter`1
      description: An awaiter instance.
  overload: System.Threading.Tasks.Task`1.GetAwaiter*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Task`1.Result
  commentId: P:System.Threading.Tasks.Task`1.Result
  id: Result
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Result
  nameWithType: Task<TResult>.Result
  fullName: Task<TResult>.Result
  type: Property
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Gets the result value of this <xref href="System.Threading.Tasks.Task`1"></xref>.
  remarks: "Accessing the property's get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the <xref:System.Threading.Tasks.Task.Wait%2A> method.  \n  \n Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <xref:System.Threading.Tasks.Task%601.Result%2A> property. Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the <xref:System.Threading.Tasks.Task%601.Result%2A> property does not return a value. Instead, attempting to access the property value throws an <xref:System.AggregateException> exception."
  example:
  - "The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument. If the directory contains files, it executes a lambda expression that instantiates a <xref:System.IO.FileStream> object for each file in the directory and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=fullName> property. If a directory contains no files, it simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property is zero (0). When the tasks finish, the total number of bytes in all a directory's files is available from the <xref:System.Threading.Tasks.Task%601.Result%2A> property.  \n  \n [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]\n [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]"
  syntax:
    content: public TResult Result { get; }
    return:
      type: TResult
      description: The result value of this <xref href="System.Threading.Tasks.Task`1"></xref>, which is the same type as the task's type parameter.
  overload: System.Threading.Tasks.Task`1.Result*
  exceptions:
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.  \n  \n -or-  \n  \n An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  nameWithType: AggregateException
  fullName: System.AggregateException
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0})
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>(Func<TResult>)
  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>)
  fullName: Task<TResult>.Task<TResult>(Func<TResult>)
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>(Func<Object,TResult>, Object)
  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object)
  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object)
- uid: System.Func`2
  name: Func<T,TResult>
  nameWithType: Func<T,TResult>
  fullName: System.Func<T,TResult>
- uid: System.Object
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{System.Object,TResult}
  parent: System
  isExternal: false
  name: Func<Object,TResult>
  nameWithType: Func<Object,TResult>
  fullName: System.Func<System.Object,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>(Func<TResult>, CancellationToken)
  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken)
  fullName: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>(Func<TResult>, TaskCreationOptions)
  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, TaskCreationOptions)
  fullName: Task<TResult>.Task<TResult>(Func<TResult>, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>(Func<Object,TResult>, Object, CancellationToken)
  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken)
  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken)
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)
  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)
  fullName: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)
  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)
  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ConfigureAwait(Boolean)
  nameWithType: Task<TResult>.ConfigureAwait(Boolean)
  fullName: Task<TResult>.ConfigureAwait(Boolean)
- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: ConfiguredTaskAwaitable<TResult>
  nameWithType: ConfiguredTaskAwaitable<TResult>
  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult>
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Action`2
  name: Action<T1,T2>
  nameWithType: Action<T1,T2>
  fullName: System.Action<T1,T2>
- uid: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
  parent: System
  isExternal: false
  name: Action<Task<TResult>,Object>
  nameWithType: Action<Task<TResult>,Object>
  fullName: System.Action<System.Threading.Tasks.Task<TResult>,System.Object>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.Action{System.Threading.Tasks.Task{TResult}}
  parent: System
  isExternal: false
  name: Action<Task<TResult>>
  nameWithType: Action<Task<TResult>>
  fullName: System.Action<System.Threading.Tasks.Task<TResult>>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>>, CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>,Object>, Object)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>>)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>>, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskScheduler)
  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskScheduler)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: TNewResult
  name: TNewResult
  nameWithType: TNewResult
  fullName: TNewResult
- uid: System.Threading.Tasks.Task{TNewResult}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TNewResult>
  nameWithType: Task<TNewResult>
  fullName: System.Threading.Tasks.Task<TNewResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TNewResult
    name: TNewResult
    nameWithType: TNewResult
    fullName: TNewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Func`3
  name: Func<T1,T2,TResult>
  nameWithType: Func<T1,T2,TResult>
  fullName: System.Func<T1,T2,TResult>
- uid: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
  parent: System
  isExternal: false
  name: Func<Task<TResult>,Object,TNewResult>
  nameWithType: Func<Task<TResult>,Object,TNewResult>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>,System.Object,TNewResult>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TNewResult
    name: TNewResult
    nameWithType: TNewResult
    fullName: TNewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
  parent: System
  isExternal: false
  name: Func<Task<TResult>,TNewResult>
  nameWithType: Func<Task<TResult>,TNewResult>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>,TNewResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TNewResult
    name: TNewResult
    nameWithType: TNewResult
    fullName: TNewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)
  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)
- uid: System.Threading.Tasks.Task`1.Factory
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Factory
  nameWithType: Task<TResult>.Factory
  fullName: Task<TResult>.Factory
- uid: System.Threading.Tasks.TaskFactory`1
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskFactory<TResult>
  nameWithType: TaskFactory<TResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>
- uid: System.Threading.Tasks.Task`1.GetAwaiter
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: GetAwaiter()
  nameWithType: Task<TResult>.GetAwaiter()
  fullName: Task<TResult>.GetAwaiter()
- uid: System.Runtime.CompilerServices.TaskAwaiter`1
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: TaskAwaiter<TResult>
  nameWithType: TaskAwaiter<TResult>
  fullName: System.Runtime.CompilerServices.TaskAwaiter<TResult>
- uid: System.Threading.Tasks.Task`1.Result
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Result
  nameWithType: Task<TResult>.Result
  fullName: Task<TResult>.Result
- uid: System.Threading.Tasks.Task`1.#ctor*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>.Task<TResult>
  fullName: Task<TResult>.Task<TResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
- uid: System.Threading.Tasks.Task`1.ConfigureAwait*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ConfigureAwait
  nameWithType: Task<TResult>.ConfigureAwait
  fullName: Task<TResult>.ConfigureAwait
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
- uid: System.Threading.Tasks.Task`1.ContinueWith*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith
  nameWithType: Task<TResult>.ContinueWith
  fullName: Task<TResult>.ContinueWith
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
- uid: System.Threading.Tasks.Task`1.ContinueWith``1*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>
  nameWithType: Task<TResult>.ContinueWith<TNewResult>
  fullName: Task<TResult>.ContinueWith<TNewResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
- uid: System.Threading.Tasks.Task`1.Factory*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Factory
  nameWithType: Task<TResult>.Factory
  fullName: Task<TResult>.Factory
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
- uid: System.Threading.Tasks.Task`1.GetAwaiter*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: GetAwaiter
  nameWithType: Task<TResult>.GetAwaiter
  fullName: Task<TResult>.GetAwaiter
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
- uid: System.Threading.Tasks.Task`1.Result*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Result
  nameWithType: Task<TResult>.Result
  fullName: Task<TResult>.Result
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Threading.Tasks.Task.AsyncState
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: AsyncState
  nameWithType: Task.AsyncState
  fullName: Task.AsyncState
- uid: System.Threading.Tasks.Task.CompletedTask
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: CompletedTask
  nameWithType: Task.CompletedTask
  fullName: Task.CompletedTask
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>, Object, TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, TaskScheduler)
  fullName: Task.ContinueWith(Action<Task,Object>, Object, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)
  fullName: Task.ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>, Object, CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken)
  fullName: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>, Object)
  nameWithType: Task.ContinueWith(Action<Task,Object>, Object)
  fullName: Task.ContinueWith(Action<Task,Object>, Object)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>, TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task>, TaskContinuationOptions)
  fullName: Task.ContinueWith(Action<Task>, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>, CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken)
  fullName: Task.ContinueWith(Action<Task>, CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>)
  nameWithType: Task.ContinueWith(Action<Task>)
  fullName: Task.ContinueWith(Action<Task>)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>, TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>, TaskScheduler)
  fullName: Task.ContinueWith(Action<Task>, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)
  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)
  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)
  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)
  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)
  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)
  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object)
  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object)
  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)
  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)
  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)
  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)
  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>(Func<Task,TResult>)
  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>)
  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)
  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)
  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)
- uid: System.Threading.Tasks.Task.CreationOptions
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: CreationOptions
  nameWithType: Task.CreationOptions
  fullName: Task.CreationOptions
- uid: System.Threading.Tasks.Task.CurrentId
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: CurrentId
  nameWithType: Task.CurrentId
  fullName: Task.CurrentId
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(TimeSpan, CancellationToken)
  nameWithType: Task.Delay(TimeSpan, CancellationToken)
  fullName: Task.Delay(TimeSpan, CancellationToken)
- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(Int32, CancellationToken)
  nameWithType: Task.Delay(Int32, CancellationToken)
  fullName: Task.Delay(Int32, CancellationToken)
- uid: System.Threading.Tasks.Task.Delay(System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(Int32)
  nameWithType: Task.Delay(Int32)
  fullName: Task.Delay(Int32)
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(TimeSpan)
  nameWithType: Task.Delay(TimeSpan)
  fullName: Task.Delay(TimeSpan)
- uid: System.Threading.Tasks.Task.Dispose
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Dispose()
  nameWithType: Task.Dispose()
  fullName: Task.Dispose()
- uid: System.Threading.Tasks.Task.Dispose(System.Boolean)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Task.Dispose(Boolean)
  fullName: Task.Dispose(Boolean)
- uid: System.Threading.Tasks.Task.Exception
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Exception
  nameWithType: Task.Exception
  fullName: Task.Exception
- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromCanceled(CancellationToken)
  nameWithType: Task.FromCanceled(CancellationToken)
  fullName: Task.FromCanceled(CancellationToken)
- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromCanceled<TResult>(CancellationToken)
  nameWithType: Task.FromCanceled<TResult>(CancellationToken)
  fullName: Task.FromCanceled<TResult>(CancellationToken)
- uid: System.Threading.Tasks.Task.FromException(System.Exception)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromException(Exception)
  nameWithType: Task.FromException(Exception)
  fullName: Task.FromException(Exception)
- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromException<TResult>(Exception)
  nameWithType: Task.FromException<TResult>(Exception)
  fullName: Task.FromException<TResult>(Exception)
- uid: System.Threading.Tasks.Task.FromResult``1(``0)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromResult<TResult>(TResult)
  nameWithType: Task.FromResult<TResult>(TResult)
  fullName: Task.FromResult<TResult>(TResult)
- uid: System.Threading.Tasks.Task.Id
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Id
  nameWithType: Task.Id
  fullName: Task.Id
- uid: System.Threading.Tasks.Task.IsCanceled
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IsCanceled
  nameWithType: Task.IsCanceled
  fullName: Task.IsCanceled
- uid: System.Threading.Tasks.Task.IsCompleted
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IsCompleted
  nameWithType: Task.IsCompleted
  fullName: Task.IsCompleted
- uid: System.Threading.Tasks.Task.IsCompletedSuccessfully
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IsCompletedSuccessfully
  nameWithType: Task.IsCompletedSuccessfully
  fullName: Task.IsCompletedSuccessfully
- uid: System.Threading.Tasks.Task.IsFaulted
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IsFaulted
  nameWithType: Task.IsFaulted
  fullName: Task.IsFaulted
- uid: System.Threading.Tasks.Task.Run(System.Action)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Action)
  nameWithType: Task.Run(Action)
  fullName: Task.Run(Action)
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<Task>)
  nameWithType: Task.Run(Func<Task>)
  fullName: Task.Run(Func<Task>)
- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Action, CancellationToken)
  nameWithType: Task.Run(Action, CancellationToken)
  fullName: Task.Run(Action, CancellationToken)
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<Task>, CancellationToken)
  nameWithType: Task.Run(Func<Task>, CancellationToken)
  fullName: Task.Run(Func<Task>, CancellationToken)
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run<TResult>(Func<TResult>, CancellationToken)
  nameWithType: Task.Run<TResult>(Func<TResult>, CancellationToken)
  fullName: Task.Run<TResult>(Func<TResult>, CancellationToken)
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run<TResult>(Func<Task<TResult>>, CancellationToken)
  nameWithType: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)
  fullName: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run<TResult>(Func<Task<TResult>>)
  nameWithType: Task.Run<TResult>(Func<Task<TResult>>)
  fullName: Task.Run<TResult>(Func<Task<TResult>>)
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run<TResult>(Func<TResult>)
  nameWithType: Task.Run<TResult>(Func<TResult>)
  fullName: Task.Run<TResult>(Func<TResult>)
- uid: System.Threading.Tasks.Task.RunSynchronously
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: RunSynchronously()
  nameWithType: Task.RunSynchronously()
  fullName: Task.RunSynchronously()
- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: RunSynchronously(TaskScheduler)
  nameWithType: Task.RunSynchronously(TaskScheduler)
  fullName: Task.RunSynchronously(TaskScheduler)
- uid: System.Threading.Tasks.Task.Start
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Start()
  nameWithType: Task.Start()
  fullName: Task.Start()
- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Start(TaskScheduler)
  nameWithType: Task.Start(TaskScheduler)
  fullName: Task.Start(TaskScheduler)
- uid: System.Threading.Tasks.Task.Status
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Status
  nameWithType: Task.Status
  fullName: Task.Status
- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(TimeSpan)
  nameWithType: Task.Wait(TimeSpan)
  fullName: Task.Wait(TimeSpan)
- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(Int32, CancellationToken)
  nameWithType: Task.Wait(Int32, CancellationToken)
  fullName: Task.Wait(Int32, CancellationToken)
- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(CancellationToken)
  nameWithType: Task.Wait(CancellationToken)
  fullName: Task.Wait(CancellationToken)
- uid: System.Threading.Tasks.Task.Wait(System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(Int32)
  nameWithType: Task.Wait(Int32)
  fullName: Task.Wait(Int32)
- uid: System.Threading.Tasks.Task.Wait
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait()
  nameWithType: Task.Wait()
  fullName: Task.Wait()
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[])
  nameWithType: Task.WaitAll(Task[])
  fullName: Task.WaitAll(Task[])
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[], Int32)
  nameWithType: Task.WaitAll(Task[], Int32)
  fullName: Task.WaitAll(Task[], Int32)
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[], CancellationToken)
  nameWithType: Task.WaitAll(Task[], CancellationToken)
  fullName: Task.WaitAll(Task[], CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[], TimeSpan)
  nameWithType: Task.WaitAll(Task[], TimeSpan)
  fullName: Task.WaitAll(Task[], TimeSpan)
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[], Int32, CancellationToken)
  nameWithType: Task.WaitAll(Task[], Int32, CancellationToken)
  fullName: Task.WaitAll(Task[], Int32, CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[], Int32, CancellationToken)
  nameWithType: Task.WaitAny(Task[], Int32, CancellationToken)
  fullName: Task.WaitAny(Task[], Int32, CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[], TimeSpan)
  nameWithType: Task.WaitAny(Task[], TimeSpan)
  fullName: Task.WaitAny(Task[], TimeSpan)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[], Int32)
  nameWithType: Task.WaitAny(Task[], Int32)
  fullName: Task.WaitAny(Task[], Int32)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[], CancellationToken)
  nameWithType: Task.WaitAny(Task[], CancellationToken)
  fullName: Task.WaitAny(Task[], CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[])
  nameWithType: Task.WaitAny(Task[])
  fullName: Task.WaitAny(Task[])
- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll(IEnumerable<Task>)
  nameWithType: Task.WhenAll(IEnumerable<Task>)
  fullName: Task.WhenAll(IEnumerable<Task>)
- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll(Task[])
  nameWithType: Task.WhenAll(Task[])
  fullName: Task.WhenAll(Task[])
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll<TResult>(IEnumerable<Task<TResult>>)
  nameWithType: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)
  fullName: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll<TResult>(Task<TResult>[])
  nameWithType: Task.WhenAll<TResult>(Task<TResult>[])
  fullName: Task.WhenAll<TResult>(Task<TResult>[])
- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny(IEnumerable<Task>)
  nameWithType: Task.WhenAny(IEnumerable<Task>)
  fullName: Task.WhenAny(IEnumerable<Task>)
- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny(Task[])
  nameWithType: Task.WhenAny(Task[])
  fullName: Task.WhenAny(Task[])
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny<TResult>(Task<TResult>[])
  nameWithType: Task.WhenAny<TResult>(Task<TResult>[])
  fullName: Task.WhenAny<TResult>(Task<TResult>[])
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny<TResult>(IEnumerable<Task<TResult>>)
  nameWithType: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)
  fullName: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)
- uid: System.Threading.Tasks.Task.Yield
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Yield()
  nameWithType: Task.Yield()
  fullName: Task.Yield()
- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IAsyncResult.AsyncWaitHandle
  nameWithType: Task.IAsyncResult.AsyncWaitHandle
  fullName: Task.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IAsyncResult.CompletedSynchronously
  nameWithType: Task.IAsyncResult.CompletedSynchronously
  fullName: Task.IAsyncResult.CompletedSynchronously
- uid: System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.TaskExtensions
  isExternal: false
  name: Unwrap(Task<Task>)
  nameWithType: TaskExtensions.Unwrap(Task<Task>)
  fullName: TaskExtensions.Unwrap(Task<Task>)
- uid: System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.TaskExtensions
  isExternal: false
  name: Unwrap<TResult>(Task<Task<TResult>>)
  nameWithType: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)
  fullName: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)
- uid: System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task)
  parent: System.Windows.Threading.TaskExtensions
  isExternal: false
  name: DispatcherOperationWait(Task)
  nameWithType: TaskExtensions.DispatcherOperationWait(Task)
  fullName: TaskExtensions.DispatcherOperationWait(Task)
- uid: System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task,System.TimeSpan)
  parent: System.Windows.Threading.TaskExtensions
  isExternal: false
  name: DispatcherOperationWait(Task, TimeSpan)
  nameWithType: TaskExtensions.DispatcherOperationWait(Task, TimeSpan)
  fullName: TaskExtensions.DispatcherOperationWait(Task, TimeSpan)
- uid: System.Windows.Threading.TaskExtensions.IsDispatcherOperationTask(System.Threading.Tasks.Task)
  parent: System.Windows.Threading.TaskExtensions
  isExternal: false
  name: IsDispatcherOperationTask(Task)
  nameWithType: TaskExtensions.IsDispatcherOperationTask(Task)
  fullName: TaskExtensions.IsDispatcherOperationTask(Task)
