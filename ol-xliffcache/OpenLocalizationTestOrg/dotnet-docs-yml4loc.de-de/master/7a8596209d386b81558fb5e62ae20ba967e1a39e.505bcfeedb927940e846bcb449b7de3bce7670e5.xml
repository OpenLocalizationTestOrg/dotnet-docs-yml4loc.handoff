{"nodes":[{"content":"Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.","nodes":[{"pos":[0,176],"content":"Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.","nodes":[{"content":"Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.","pos":[0,176]}]}],"pos":[843,1020],"yaml":true},{"content":"In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager. The <xref:System.Transactions.Transaction> class defines a set of methods whose names begin with `Enlist` that provide this functionality. The different `Enlist` methods correspond to the different types of enlistment that a resource maanger may have.  \n  \n This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation. For each resource manager's implementation of the <xref:System.Transactions.IEnlistmentNotification> interface, you should enlist it using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class, depending on whether your resource is volatile or durable. For more information on enlistment and 2PC, see [Enlisting Resources as Participants in a Transaction](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md) and [Committing a Transaction in Single-Phase and Multi-Phase](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md) respectively.  \n  \n The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods.  \n  \n|Method|Description|  \n|------------|-----------------|  \n|<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction.|  \n|<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is commited.|  \n|<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted (that is, rolled back).|  \n|<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt.|  \n  \n> [!NOTE]\n>  You should be aware that notifications might not be sent sequentially, or in a particular order.","nodes":[{"pos":[0,383],"content":"In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager. The <xref:System.Transactions.Transaction> class defines a set of methods whose names begin with `Enlist` that provide this functionality. The different `Enlist` methods correspond to the different types of enlistment that a resource maanger may have.","nodes":[{"content":"In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager.","pos":[0,131]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Transactions.Transaction&gt;</ph> class defines a set of methods whose names begin with <ph id=\"ph2\">`Enlist`</ph> that provide this functionality.","pos":[132,270],"source":" The <xref:System.Transactions.Transaction> class defines a set of methods whose names begin with `Enlist` that provide this functionality."},{"content":"The different <ph id=\"ph1\">`Enlist`</ph> methods correspond to the different types of enlistment that a resource maanger may have.","pos":[271,383],"source":" The different `Enlist` methods correspond to the different types of enlistment that a resource maanger may have."}]},{"pos":[390,1334],"content":"This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation. For each resource manager's implementation of the <xref:System.Transactions.IEnlistmentNotification> interface, you should enlist it using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class, depending on whether your resource is volatile or durable. For more information on enlistment and 2PC, see [Enlisting Resources as Participants in a Transaction](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md) and [Committing a Transaction in Single-Phase and Multi-Phase](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md) respectively.","nodes":[{"content":"This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.","pos":[0,187]},{"content":"For each resource manager's implementation of the <ph id=\"ph1\">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> interface, you should enlist it using the <ph id=\"ph2\">&lt;xref:System.Transactions.Transaction.EnlistVolatile%2A&gt;</ph> method or the <ph id=\"ph3\">&lt;xref:System.Transactions.Transaction.EnlistDurable%2A&gt;</ph> method of the <ph id=\"ph4\">&lt;xref:System.Transactions.Transaction&gt;</ph> class, depending on whether your resource is volatile or durable.","pos":[188,576],"source":" For each resource manager's implementation of the <xref:System.Transactions.IEnlistmentNotification> interface, you should enlist it using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class, depending on whether your resource is volatile or durable."},{"content":"For more information on enlistment and 2PC, see <bpt id=\"p1\">[</bpt>Enlisting Resources as Participants in a Transaction<ept id=\"p1\">](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md)</ept> and <bpt id=\"p2\">[</bpt>Committing a Transaction in Single-Phase and Multi-Phase<ept id=\"p2\">](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md)</ept> respectively.","pos":[577,944],"source":" For more information on enlistment and 2PC, see [Enlisting Resources as Participants in a Transaction](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md) and [Committing a Transaction in Single-Phase and Multi-Phase](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md) respectively."}]},{"pos":[1341,1472],"content":"The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods.","nodes":[{"content":"The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods.","pos":[0,131]}]},{"pos":[1479,1485],"content":"Method","nodes":[{"content":"Method","pos":[0,6]}]},{"pos":[1486,1497],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[1537,1598],"content":"<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>","nodes":[]},{"pos":[1599,1810],"content":"This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction.","nodes":[{"content":"This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction.","pos":[0,211]}]},{"pos":[1815,1875],"content":"<xref:System.Transactions.IEnlistmentNotification.Commit%2A>","nodes":[]},{"pos":[1876,2031],"content":"This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is commited.","nodes":[{"content":"This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is commited.","pos":[0,155]}]},{"pos":[2036,2098],"content":"<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>","nodes":[]},{"pos":[2099,2276],"content":"This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted (that is, rolled back).","nodes":[{"content":"This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted (that is, rolled back).","pos":[0,177]}]},{"pos":[2281,2342],"content":"<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>","nodes":[]},{"pos":[2343,2498],"content":"This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt.","nodes":[{"content":"This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt.","pos":[0,155]}]},{"pos":[2507,2614],"content":"[!NOTE]\n You should be aware that notifications might not be sent sequentially, or in a particular order.","leadings":["","> "],"nodes":[{"content":"You should be aware that notifications might not be sent sequentially, or in a particular order.","pos":[9,105]}]}],"pos":[1031,3662],"yaml":true,"extradata":"MT"},{"content":"Notifies an enlisted object that a transaction is being committed.","nodes":[{"pos":[0,66],"content":"Notifies an enlisted object that a transaction is being committed.","nodes":[{"content":"Notifies an enlisted object that a transaction is being committed.","pos":[0,66]}]}],"pos":[5525,5592],"yaml":true},{"content":"The transaction manager calls this method of an enlisted object during the second phase of a commitment, when it instructs all participants to commit the transaction.  \n  \n The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.  \n  \n If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Commit%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.","nodes":[{"pos":[0,166],"content":"The transaction manager calls this method of an enlisted object during the second phase of a commitment, when it instructs all participants to commit the transaction.","nodes":[{"content":"The transaction manager calls this method of an enlisted object during the second phase of a commitment, when it instructs all participants to commit the transaction.","pos":[0,166]}]},{"pos":[173,396],"content":"The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method on the <ph id=\"ph2\">`enlistment`</ph> parameter.","source":"The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter."},{"pos":[403,1463],"content":"If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Commit%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.","nodes":[{"content":"If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Commit%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.","pos":[0,1060],"nodes":[{"content":"If the resource manager has enlisted durably, but does not respond by calling <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method, the transaction manager is unsure that the resource manager has received the <ph id=\"ph2\">&lt;xref:System.Transactions.IEnlistmentNotification.Commit%2A&gt;</ph> call.","pos":[0,275],"source":"If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Commit%2A> call."},{"content":"As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.","pos":[276,394]},{"content":"If <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.","pos":[396,555],"source":"  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource."},{"content":"This results in resources not being able to be reclaimed.","pos":[556,613]},{"content":"In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.","pos":[614,727]},{"content":"In the case of a transaction managed by <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.","pos":[728,905],"source":" In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process."},{"content":"Therefore, it is crucial that you call the <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method once your resource manager is done with your prepare work.","pos":[906,1060],"source":" Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work."}]}]}],"pos":[5603,7073],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Transactions.Enlistment\"></xref> object used to send a response to the transaction manager.","nodes":[{"pos":[0,113],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Transactions.Enlistment\"&gt;&lt;/xref&gt;</ph> object used to send a response to the transaction manager.","source":"An <xref href=\"System.Transactions.Enlistment\"></xref> object used to send a response to the transaction manager."}],"pos":[7259,7373],"yaml":true},{"content":"Notifies an enlisted object that the status of a transaction is in doubt.","nodes":[{"pos":[0,73],"content":"Notifies an enlisted object that the status of a transaction is in doubt.","nodes":[{"content":"Notifies an enlisted object that the status of a transaction is in doubt.","pos":[0,73]}]}],"pos":[8749,8823],"yaml":true},{"content":"This method is called for volatile resources when the transaction manager has invoked a single phase commit operation to a single durable resource, and then connection to the durable resource was lost prior to getting the transaction result. At that point, the transaction outcome cannot be safely determined.  \n  \n As <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> is considered to be a final state for a transaction, you should not call <xref:System.Transactions.IEnlistmentNotification.Commit%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> after calling <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>.  \n  \n> [!NOTE]\n>  Your implementation of this method for the volatile resource should perform whatever recovery or containment operation it understands on the affected data.  It must also call the <xref:System.Transactions.Enlistment.Done%2A> method on the on the `enlistment` parameter when it has finished its work.  \n  \n If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.","nodes":[{"pos":[0,309],"content":"This method is called for volatile resources when the transaction manager has invoked a single phase commit operation to a single durable resource, and then connection to the durable resource was lost prior to getting the transaction result. At that point, the transaction outcome cannot be safely determined.","nodes":[{"content":"This method is called for volatile resources when the transaction manager has invoked a single phase commit operation to a single durable resource, and then connection to the durable resource was lost prior to getting the transaction result. At that point, the transaction outcome cannot be safely determined.","pos":[0,309],"nodes":[{"content":"This method is called for volatile resources when the transaction manager has invoked a single phase commit operation to a single durable resource, and then connection to the durable resource was lost prior to getting the transaction result.","pos":[0,241]},{"content":"At that point, the transaction outcome cannot be safely determined.","pos":[242,309]}]}]},{"pos":[316,657],"content":"As <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> is considered to be a final state for a transaction, you should not call <xref:System.Transactions.IEnlistmentNotification.Commit%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> after calling <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>.","nodes":[{"content":"As <ph id=\"ph1\">&lt;xref:System.Transactions.IEnlistmentNotification.InDoubt%2A&gt;</ph> is considered to be a final state for a transaction, you should not call <ph id=\"ph2\">&lt;xref:System.Transactions.IEnlistmentNotification.Commit%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Transactions.IEnlistmentNotification.Rollback%2A&gt;</ph> after calling <ph id=\"ph4\">&lt;xref:System.Transactions.IEnlistmentNotification.InDoubt%2A&gt;</ph>.","pos":[0,341],"source":"As <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> is considered to be a final state for a transaction, you should not call <xref:System.Transactions.IEnlistmentNotification.Commit%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> after calling <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>."}]},{"pos":[665,975],"content":"[!NOTE]\n Your implementation of this method for the volatile resource should perform whatever recovery or containment operation it understands on the affected data.  It must also call the <xref:System.Transactions.Enlistment.Done%2A> method on the on the `enlistment` parameter when it has finished its work.","leadings":["","> "],"nodes":[{"content":" Your implementation of this method for the volatile resource should perform whatever recovery or containment operation it understands on the affected data.  It must also call the <xref:System.Transactions.Enlistment.Done%2A> method on the on the `enlistment` parameter when it has finished its work.","pos":[8,308],"nodes":[{"content":"Your implementation of this method for the volatile resource should perform whatever recovery or containment operation it understands on the affected data.","pos":[1,156]},{"content":"It must also call the <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method on the on the <ph id=\"ph2\">`enlistment`</ph> parameter when it has finished its work.","pos":[158,300],"source":"  It must also call the <xref:System.Transactions.Enlistment.Done%2A> method on the on the `enlistment` parameter when it has finished its work."}]}]},{"pos":[982,2043],"content":"If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.","nodes":[{"content":"If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.","pos":[0,1061],"nodes":[{"content":"If the resource manager has enlisted durably, but does not respond by calling <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method, the transaction manager is unsure that the resource manager has received the <ph id=\"ph2\">&lt;xref:System.Transactions.IEnlistmentNotification.InDoubt%2A&gt;</ph> call.","pos":[0,276],"source":"If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> call."},{"content":"As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.","pos":[277,395]},{"content":"If <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.","pos":[397,556],"source":"  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource."},{"content":"This results in resources not being able to be reclaimed.","pos":[557,614]},{"content":"In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.","pos":[615,728]},{"content":"In the case of a transaction managed by <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.","pos":[729,906],"source":" In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process."},{"content":"Therefore, it is crucial that you call the <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method once your resource manager is done with your prepare work.","pos":[907,1061],"source":" Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work."}]}]}],"pos":[8834,10887],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Transactions.Enlistment\"></xref> object used to send a response to the transaction manager.","nodes":[{"pos":[0,113],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Transactions.Enlistment\"&gt;&lt;/xref&gt;</ph> object used to send a response to the transaction manager.","source":"An <xref href=\"System.Transactions.Enlistment\"></xref> object used to send a response to the transaction manager."}],"pos":[11074,11188],"yaml":true},{"content":"Notifies an enlisted object that a transaction is being prepared for commitment.","nodes":[{"pos":[0,80],"content":"Notifies an enlisted object that a transaction is being prepared for commitment.","nodes":[{"content":"Notifies an enlisted object that a transaction is being prepared for commitment.","pos":[0,80]}]}],"pos":[12619,12700],"yaml":true},{"content":"The transaction manager calls this method of an enlisted resource manager during the phase 1 of a commitment, when it asks participants whether they can commit the transaction.  \n  \n When you are implementing a durable resource manager, you should log your prepare record during this phase. The record should contain all the necessary information to perform recovery. This includes the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property, which is passed to the transaction manager in the <xref:System.Transactions.TransactionManager.Reenlist%2A> method during recovery. For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).  \n  \n Your resource manager should complete all work that must be finished before calling the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method of the `preparingEnlistment` parameter to indicate its vote for commitment. You should make sure that this is accomplished before receiving any phase 2 notification such as commit, rollback or in doubt. This is because phase 2 notifications can happen inline on the same thread that called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method in phase 1. As such, you should not do any work after the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications.  \n  \n You can also call the method of the `preparingEnlistment` parameter to indicate a vote for rollback.  \n  \n If you want the object to merely observe and react to the progress of the transaction, without participating in it, your implementation of this method should call the <xref:System.Transactions.Enlistment.Done%2A> method of the `preparingEnlistment` parameter when it has finished its work. By doing so, your resource manager would not receive any phase 2 notification.","nodes":[{"pos":[0,176],"content":"The transaction manager calls this method of an enlisted resource manager during the phase 1 of a commitment, when it asks participants whether they can commit the transaction.","nodes":[{"content":"The transaction manager calls this method of an enlisted resource manager during the phase 1 of a commitment, when it asks participants whether they can commit the transaction.","pos":[0,176]}]},{"pos":[183,728],"content":"When you are implementing a durable resource manager, you should log your prepare record during this phase. The record should contain all the necessary information to perform recovery. This includes the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property, which is passed to the transaction manager in the <xref:System.Transactions.TransactionManager.Reenlist%2A> method during recovery. For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).","nodes":[{"content":"When you are implementing a durable resource manager, you should log your prepare record during this phase.","pos":[0,107]},{"content":"The record should contain all the necessary information to perform recovery.","pos":[108,184]},{"content":"This includes the <ph id=\"ph1\">&lt;xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A&gt;</ph> property, which is passed to the transaction manager in the <ph id=\"ph2\">&lt;xref:System.Transactions.TransactionManager.Reenlist%2A&gt;</ph> method during recovery.","pos":[185,414],"source":" This includes the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property, which is passed to the transaction manager in the <xref:System.Transactions.TransactionManager.Reenlist%2A> method during recovery."},{"content":"For more information on recovery, see <bpt id=\"p1\">[</bpt>Performing Recovery<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)</ept>.","pos":[415,545],"source":" For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)."}]},{"pos":[735,1485],"content":"Your resource manager should complete all work that must be finished before calling the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method of the `preparingEnlistment` parameter to indicate its vote for commitment. You should make sure that this is accomplished before receiving any phase 2 notification such as commit, rollback or in doubt. This is because phase 2 notifications can happen inline on the same thread that called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method in phase 1. As such, you should not do any work after the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications.","nodes":[{"content":"Your resource manager should complete all work that must be finished before calling the <ph id=\"ph1\">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> method of the <ph id=\"ph2\">`preparingEnlistment`</ph> parameter to indicate its vote for commitment.","pos":[0,229],"source":"Your resource manager should complete all work that must be finished before calling the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method of the `preparingEnlistment` parameter to indicate its vote for commitment."},{"content":"You should make sure that this is accomplished before receiving any phase 2 notification such as commit, rollback or in doubt.","pos":[230,356]},{"content":"This is because phase 2 notifications can happen inline on the same thread that called the <ph id=\"ph1\">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> method in phase 1.","pos":[357,525],"source":" This is because phase 2 notifications can happen inline on the same thread that called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method in phase 1."},{"content":"As such, you should not do any work after the <ph id=\"ph1\">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications.","pos":[526,750],"source":" As such, you should not do any work after the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications."}]},{"pos":[1492,1592],"content":"You can also call the method of the <ph id=\"ph1\">`preparingEnlistment`</ph> parameter to indicate a vote for rollback.","source":"You can also call the method of the `preparingEnlistment` parameter to indicate a vote for rollback."},{"pos":[1599,1967],"content":"If you want the object to merely observe and react to the progress of the transaction, without participating in it, your implementation of this method should call the <xref:System.Transactions.Enlistment.Done%2A> method of the `preparingEnlistment` parameter when it has finished its work. By doing so, your resource manager would not receive any phase 2 notification.","nodes":[{"content":"If you want the object to merely observe and react to the progress of the transaction, without participating in it, your implementation of this method should call the <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method of the <ph id=\"ph2\">`preparingEnlistment`</ph> parameter when it has finished its work.","pos":[0,289],"source":"If you want the object to merely observe and react to the progress of the transaction, without participating in it, your implementation of this method should call the <xref:System.Transactions.Enlistment.Done%2A> method of the `preparingEnlistment` parameter when it has finished its work."},{"content":"By doing so, your resource manager would not receive any phase 2 notification.","pos":[290,368]}]}],"pos":[12711,14689],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Transactions.PreparingEnlistment\"></xref> object used to send a response to the transaction manager.","nodes":[{"pos":[0,121],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Transactions.PreparingEnlistment\"&gt;&lt;/xref&gt;</ph> object used to send a response to the transaction manager.","source":"A <xref href=\"System.Transactions.PreparingEnlistment\"></xref> object used to send a response to the transaction manager."}],"pos":[14912,15034],"yaml":true},{"content":"Notifies an enlisted object that a transaction is being rolled back (aborted).","nodes":[{"pos":[0,78],"content":"Notifies an enlisted object that a transaction is being rolled back (aborted).","nodes":[{"content":"Notifies an enlisted object that a transaction is being rolled back (aborted).","pos":[0,78]}]}],"pos":[16417,16496],"yaml":true},{"content":"The transaction manager calls this method of an enlisted object when the transaction is being rolled back (aborted) due to the inability of one or more transaction participants to commit the transaction.  \n  \n The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.  \n  \n If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.","nodes":[{"pos":[0,203],"content":"The transaction manager calls this method of an enlisted object when the transaction is being rolled back (aborted) due to the inability of one or more transaction participants to commit the transaction.","nodes":[{"content":"The transaction manager calls this method of an enlisted object when the transaction is being rolled back (aborted) due to the inability of one or more transaction participants to commit the transaction.","pos":[0,203]}]},{"pos":[210,433],"content":"The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method on the <ph id=\"ph2\">`enlistment`</ph> parameter.","source":"The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter."},{"pos":[440,1502],"content":"If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.","nodes":[{"content":"If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.","pos":[0,1062],"nodes":[{"content":"If the resource manager has enlisted durably, but does not respond by calling <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method, the transaction manager is unsure that the resource manager has received the <ph id=\"ph2\">&lt;xref:System.Transactions.IEnlistmentNotification.Rollback%2A&gt;</ph> call.","pos":[0,277],"source":"If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> call."},{"content":"As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.","pos":[278,396]},{"content":"If <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource.","pos":[398,557],"source":"  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource."},{"content":"This results in resources not being able to be reclaimed.","pos":[558,615]},{"content":"In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process.","pos":[616,729]},{"content":"In the case of a transaction managed by <ph id=\"ph1\">&lt;xref:System.Transactions&gt;</ph>, this results in a gradual and continual increase in the memory consumption of the resource manager's process.","pos":[730,907],"source":" In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process."},{"content":"Therefore, it is crucial that you call the <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method once your resource manager is done with your prepare work.","pos":[908,1062],"source":" Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work."}]}]}],"pos":[16507,18016],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Transactions.Enlistment\"></xref> object used to send a response to the transaction manager.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Transactions.Enlistment\"&gt;&lt;/xref&gt;</ph> object used to send a response to the transaction manager.","source":"A <xref href=\"System.Transactions.Enlistment\"></xref> object used to send a response to the transaction manager."}],"pos":[18204,18317],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.IEnlistmentNotification\n  commentId: T:System.Transactions.IEnlistmentNotification\n  id: IEnlistmentNotification\n  children:\n  - System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)\n  - System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)\n  - System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)\n  - System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)\n  langs:\n  - csharp\n  name: IEnlistmentNotification\n  nameWithType: IEnlistmentNotification\n  fullName: System.Transactions.IEnlistmentNotification\n  type: Interface\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation.\n  remarks: \"In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager. The <xref:System.Transactions.Transaction> class defines a set of methods whose names begin with `Enlist` that provide this functionality. The different `Enlist` methods correspond to the different types of enlistment that a resource maanger may have.  \\n  \\n This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation. For each resource manager's implementation of the <xref:System.Transactions.IEnlistmentNotification> interface, you should enlist it using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class, depending on whether your resource is volatile or durable. For more information on enlistment and 2PC, see [Enlisting Resources as Participants in a Transaction](~/docs/framework/data/transactions/enlisting-resources-as-participants-in-a-transaction.md) and [Committing a Transaction in Single-Phase and Multi-Phase](~/docs/framework/data/transactions/committing-a-transaction-in-single-phase-and-multi-phase.md) respectively.  \\n  \\n The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods.  \\n  \\n|Method|Description|  \\n|------------|-----------------|  \\n|<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction.|  \\n|<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is commited.|  \\n|<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted (that is, rolled back).|  \\n|<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt.|  \\n  \\n> [!NOTE]\\n>  You should be aware that notifications might not be sent sequentially, or in a particular order.\"\n  example:\n  - \"The following example shows an implementation of this interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.  \\n  \\n [!code-csharp[Tx_Enlist#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#1)]\\n [!code-vb[Tx_Enlist#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#1)]\"\n  syntax:\n    content: public interface IEnlistmentNotification\n  derivedClasses:\n  - System.Transactions.ISinglePhaseNotification\n  implements: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/IEnlistmentNotification.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)\n  commentId: M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)\n  id: Commit(System.Transactions.Enlistment)\n  parent: System.Transactions.IEnlistmentNotification\n  langs:\n  - csharp\n  name: Commit(Enlistment)\n  nameWithType: IEnlistmentNotification.Commit(Enlistment)\n  fullName: IEnlistmentNotification.Commit(Enlistment)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Notifies an enlisted object that a transaction is being committed.\n  remarks: \"The transaction manager calls this method of an enlisted object during the second phase of a commitment, when it instructs all participants to commit the transaction.  \\n  \\n The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.  \\n  \\n If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Commit%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.\"\n  syntax:\n    content: public void Commit (System.Transactions.Enlistment enlistment);\n    parameters:\n    - id: enlistment\n      type: System.Transactions.Enlistment\n      description: An <xref href=\"System.Transactions.Enlistment\"></xref> object used to send a response to the transaction manager.\n  overload: System.Transactions.IEnlistmentNotification.Commit*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/IEnlistmentNotification.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)\n  commentId: M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)\n  id: InDoubt(System.Transactions.Enlistment)\n  parent: System.Transactions.IEnlistmentNotification\n  langs:\n  - csharp\n  name: InDoubt(Enlistment)\n  nameWithType: IEnlistmentNotification.InDoubt(Enlistment)\n  fullName: IEnlistmentNotification.InDoubt(Enlistment)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Notifies an enlisted object that the status of a transaction is in doubt.\n  remarks: \"This method is called for volatile resources when the transaction manager has invoked a single phase commit operation to a single durable resource, and then connection to the durable resource was lost prior to getting the transaction result. At that point, the transaction outcome cannot be safely determined.  \\n  \\n As <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> is considered to be a final state for a transaction, you should not call <xref:System.Transactions.IEnlistmentNotification.Commit%2A> or <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> after calling <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>.  \\n  \\n> [!NOTE]\\n>  Your implementation of this method for the volatile resource should perform whatever recovery or containment operation it understands on the affected data.  It must also call the <xref:System.Transactions.Enlistment.Done%2A> method on the on the `enlistment` parameter when it has finished its work.  \\n  \\n If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.\"\n  syntax:\n    content: public void InDoubt (System.Transactions.Enlistment enlistment);\n    parameters:\n    - id: enlistment\n      type: System.Transactions.Enlistment\n      description: An <xref href=\"System.Transactions.Enlistment\"></xref> object used to send a response to the transaction manager.\n  overload: System.Transactions.IEnlistmentNotification.InDoubt*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/IEnlistmentNotification.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)\n  commentId: M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)\n  id: Prepare(System.Transactions.PreparingEnlistment)\n  parent: System.Transactions.IEnlistmentNotification\n  langs:\n  - csharp\n  name: Prepare(PreparingEnlistment)\n  nameWithType: IEnlistmentNotification.Prepare(PreparingEnlistment)\n  fullName: IEnlistmentNotification.Prepare(PreparingEnlistment)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Notifies an enlisted object that a transaction is being prepared for commitment.\n  remarks: \"The transaction manager calls this method of an enlisted resource manager during the phase 1 of a commitment, when it asks participants whether they can commit the transaction.  \\n  \\n When you are implementing a durable resource manager, you should log your prepare record during this phase. The record should contain all the necessary information to perform recovery. This includes the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property, which is passed to the transaction manager in the <xref:System.Transactions.TransactionManager.Reenlist%2A> method during recovery. For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).  \\n  \\n Your resource manager should complete all work that must be finished before calling the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method of the `preparingEnlistment` parameter to indicate its vote for commitment. You should make sure that this is accomplished before receiving any phase 2 notification such as commit, rollback or in doubt. This is because phase 2 notifications can happen inline on the same thread that called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method in phase 1. As such, you should not do any work after the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> call (for example, releasing locks) that you would expect to have completed before receiving the phase 2 notifications.  \\n  \\n You can also call the method of the `preparingEnlistment` parameter to indicate a vote for rollback.  \\n  \\n If you want the object to merely observe and react to the progress of the transaction, without participating in it, your implementation of this method should call the <xref:System.Transactions.Enlistment.Done%2A> method of the `preparingEnlistment` parameter when it has finished its work. By doing so, your resource manager would not receive any phase 2 notification.\"\n  syntax:\n    content: public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);\n    parameters:\n    - id: preparingEnlistment\n      type: System.Transactions.PreparingEnlistment\n      description: A <xref href=\"System.Transactions.PreparingEnlistment\"></xref> object used to send a response to the transaction manager.\n  overload: System.Transactions.IEnlistmentNotification.Prepare*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/IEnlistmentNotification.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)\n  commentId: M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)\n  id: Rollback(System.Transactions.Enlistment)\n  parent: System.Transactions.IEnlistmentNotification\n  langs:\n  - csharp\n  name: Rollback(Enlistment)\n  nameWithType: IEnlistmentNotification.Rollback(Enlistment)\n  fullName: IEnlistmentNotification.Rollback(Enlistment)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Notifies an enlisted object that a transaction is being rolled back (aborted).\n  remarks: \"The transaction manager calls this method of an enlisted object when the transaction is being rolled back (aborted) due to the inability of one or more transaction participants to commit the transaction.  \\n  \\n The resource manager should perform any work necessary to finish the transaction and then inform the TM that it has finished by calling the <xref:System.Transactions.Enlistment.Done%2A> method on the `enlistment` parameter.  \\n  \\n If the resource manager has enlisted durably, but does not respond by calling <xref:System.Transactions.Enlistment.Done%2A> method, the transaction manager is unsure that the resource manager has received the <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> call. As such, the transaction manager keeps waiting for a response, and maintains information relevant to this transaction.  If <xref:System.Transactions.Enlistment.Done%2A> is never called, this piece of information is kept around indefinitely in memory or in a system-wide resource. This results in resources not being able to be reclaimed. In the case of a distributed transaction, this could eventually fill the MSDTC log which halts the MSDTC process. In the case of a transaction managed by <xref:System.Transactions>, this results in a gradual and continual increase in the memory consumption of the resource manager's process. Therefore, it is crucial that you call the <xref:System.Transactions.Enlistment.Done%2A> method once your resource manager is done with your prepare work.\"\n  syntax:\n    content: public void Rollback (System.Transactions.Enlistment enlistment);\n    parameters:\n    - id: enlistment\n      type: System.Transactions.Enlistment\n      description: A <xref href=\"System.Transactions.Enlistment\"></xref> object used to send a response to the transaction manager.\n  overload: System.Transactions.IEnlistmentNotification.Rollback*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/IEnlistmentNotification.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)\n  parent: System.Transactions.IEnlistmentNotification\n  isExternal: false\n  name: Commit(Enlistment)\n  nameWithType: IEnlistmentNotification.Commit(Enlistment)\n  fullName: IEnlistmentNotification.Commit(Enlistment)\n- uid: System.Transactions.Enlistment\n  parent: System.Transactions\n  isExternal: false\n  name: Enlistment\n  nameWithType: Enlistment\n  fullName: System.Transactions.Enlistment\n- uid: System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)\n  parent: System.Transactions.IEnlistmentNotification\n  isExternal: false\n  name: InDoubt(Enlistment)\n  nameWithType: IEnlistmentNotification.InDoubt(Enlistment)\n  fullName: IEnlistmentNotification.InDoubt(Enlistment)\n- uid: System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)\n  parent: System.Transactions.IEnlistmentNotification\n  isExternal: false\n  name: Prepare(PreparingEnlistment)\n  nameWithType: IEnlistmentNotification.Prepare(PreparingEnlistment)\n  fullName: IEnlistmentNotification.Prepare(PreparingEnlistment)\n- uid: System.Transactions.PreparingEnlistment\n  parent: System.Transactions\n  isExternal: false\n  name: PreparingEnlistment\n  nameWithType: PreparingEnlistment\n  fullName: System.Transactions.PreparingEnlistment\n- uid: System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)\n  parent: System.Transactions.IEnlistmentNotification\n  isExternal: false\n  name: Rollback(Enlistment)\n  nameWithType: IEnlistmentNotification.Rollback(Enlistment)\n  fullName: IEnlistmentNotification.Rollback(Enlistment)\n- uid: System.Transactions.IEnlistmentNotification.Commit*\n  parent: System.Transactions.IEnlistmentNotification\n  isExternal: false\n  name: Commit\n  nameWithType: IEnlistmentNotification.Commit\n  fullName: IEnlistmentNotification.Commit\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/IEnlistmentNotification.xml\n- uid: System.Transactions.IEnlistmentNotification.InDoubt*\n  parent: System.Transactions.IEnlistmentNotification\n  isExternal: false\n  name: InDoubt\n  nameWithType: IEnlistmentNotification.InDoubt\n  fullName: IEnlistmentNotification.InDoubt\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/IEnlistmentNotification.xml\n- uid: System.Transactions.IEnlistmentNotification.Prepare*\n  parent: System.Transactions.IEnlistmentNotification\n  isExternal: false\n  name: Prepare\n  nameWithType: IEnlistmentNotification.Prepare\n  fullName: IEnlistmentNotification.Prepare\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/IEnlistmentNotification.xml\n- uid: System.Transactions.IEnlistmentNotification.Rollback*\n  parent: System.Transactions.IEnlistmentNotification\n  isExternal: false\n  name: Rollback\n  nameWithType: IEnlistmentNotification.Rollback\n  fullName: IEnlistmentNotification.Rollback\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/IEnlistmentNotification.xml\n"}