{"nodes":[{"content":"Propagates notification that operations should be canceled.","nodes":[{"pos":[0,59],"content":"Propagates notification that operations should be canceled.","nodes":[{"content":"Propagates notification that operations should be canceled.","pos":[0,59]}]}],"pos":[1555,1615],"yaml":true},{"content":"A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects. You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=fullName> property. You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`. The objects that receive the notification can respond in whatever manner is appropriate.  \n  \n For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).","nodes":[{"pos":[0,938],"content":"A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects. You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=fullName> property. You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`. The objects that receive the notification can respond in whatever manner is appropriate.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken&gt;</ph> enables cooperative cancellation between threads, thread pool work items, or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objects.","pos":[0,164],"source":"A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects."},{"content":"You create a cancellation token by instantiating a <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> object, which manages cancellation tokens retrieved from its <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=fullName&gt;</ph> property.","pos":[165,416],"source":" You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=fullName> property."},{"content":"You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation.","pos":[417,545]},{"content":"The token cannot be used to initiate cancellation.","pos":[546,596]},{"content":"When the owning object calls <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName&gt;</ph>, the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property on every copy of the cancellation token is set to <ph id=\"ph3\">`true`</ph>.","pos":[597,849],"source":" When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`."},{"content":"The objects that receive the notification can respond in whatever manner is appropriate.","pos":[850,938]}]},{"pos":[945,1084],"content":"For more information and code examples see <bpt id=\"p1\">[</bpt>Cancellation in Managed Threads<ept id=\"p1\">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.","source":"For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md)."}],"pos":[1626,2715],"yaml":true,"extradata":"MT"},{"content":"Initializes the <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,72],"content":"Initializes the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes the <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[6237,6310],"yaml":true},{"content":"Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter. If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.  \n  \n If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.","nodes":[{"pos":[0,289],"content":"Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter. If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.","nodes":[{"content":"Tokens created with this constructor will remain in the canceled state specified by the <ph id=\"ph1\">`canceled`</ph> parameter.","pos":[0,109],"source":"Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter."},{"content":"If <ph id=\"ph1\">`canceled`</ph> is <ph id=\"ph2\">`false`</ph>, both <ph id=\"ph3\">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> will be <ph id=\"ph5\">`false`</ph>.","pos":[110,289],"source":" If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`."}]},{"pos":[296,473],"content":"If <ph id=\"ph1\">`canceled`</ph> is <ph id=\"ph2\">`true`</ph>, both <ph id=\"ph3\">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> will be <ph id=\"ph5\">`true`</ph>.","source":"If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`."}],"pos":[6321,6799],"yaml":true,"extradata":"MT"},{"content":"The canceled state for the token.","nodes":[{"pos":[0,33],"content":"The canceled state for the token.","nodes":[{"content":"The canceled state for the token.","pos":[0,33]}]}],"pos":[6945,6979],"yaml":true},{"content":"Gets whether this token is capable of being in the canceled state.","nodes":[{"pos":[0,66],"content":"Gets whether this token is capable of being in the canceled state.","nodes":[{"content":"Gets whether this token is capable of being in the canceled state.","pos":[0,66]}]}],"pos":[8551,8618],"yaml":true},{"content":"If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`. A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName> property.  \n  \n You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.","nodes":[{"pos":[0,419],"content":"If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`. A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName> property.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> returns <ph id=\"ph2\">`false`</ph>, it is guaranteed that the token will never transition into a canceled state, meaning that <ph id=\"ph3\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> will never return <ph id=\"ph4\">`true`</ph>.","pos":[0,263],"source":"If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`."},{"content":"A cancellation token that cannot be canceled is returned by the static <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName&gt;</ph> property.","pos":[264,419],"source":" A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName> property."}]},{"pos":[426,673],"content":"You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.","nodes":[{"content":"You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.IsCancellationRequested%2A&gt;</ph> property to determine whether it has been canceled.","pos":[0,247],"source":"You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled."}]}],"pos":[8629,9307],"yaml":true,"extradata":"MT"},{"content":"`true` if this token is capable of being in the canceled state; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if this token is capable of being in the canceled state; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this token is capable of being in the canceled state; otherwise, `false`."}],"pos":[9423,9509],"yaml":true},{"content":"Determines whether the current <xref href=\"System.Threading.CancellationToken\"></xref> instance is equal to the specified <xref href=\"System.Object\"></xref>.","nodes":[{"pos":[0,157],"content":"Determines whether the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> instance is equal to the specified <ph id=\"ph2\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the current <xref href=\"System.Threading.CancellationToken\"></xref> instance is equal to the specified <xref href=\"System.Object\"></xref>."}],"pos":[11114,11272],"yaml":true},{"content":"The other object to which to compare this instance.","nodes":[{"pos":[0,51],"content":"The other object to which to compare this instance.","nodes":[{"content":"The other object to which to compare this instance.","pos":[0,51]}]}],"pos":[11416,11468],"yaml":true},{"content":"`true` if <code>other</code> is a <xref href=\"System.Threading.CancellationToken\"></xref> and if the two instances are equal; otherwise, `false`. Two tokens are equal if they are associated with the same <xref href=\"System.Threading.CancellationTokenSource\"></xref> or if they were both constructed from public <xref href=\"System.Threading.CancellationToken\"></xref> constructors and their <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> values are equal.","nodes":[{"pos":[0,487],"content":"`true` if <code>other</code> is a <xref href=\"System.Threading.CancellationToken\"></xref> and if the two instances are equal; otherwise, `false`. Two tokens are equal if they are associated with the same <xref href=\"System.Threading.CancellationTokenSource\"></xref> or if they were both constructed from public <xref href=\"System.Threading.CancellationToken\"></xref> constructors and their <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> values are equal.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> is a <ph id=\"ph3\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> and if the two instances are equal; otherwise, <ph id=\"ph4\">`false`</ph>.","pos":[0,145],"source":"`true` if <code>other</code> is a <xref href=\"System.Threading.CancellationToken\"></xref> and if the two instances are equal; otherwise, `false`."},{"content":"Two tokens are equal if they are associated with the same <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> or if they were both constructed from public <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> constructors and their <ph id=\"ph3\">&lt;xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"&gt;&lt;/xref&gt;</ph> values are equal.","pos":[146,487],"source":" Two tokens are equal if they are associated with the same <xref href=\"System.Threading.CancellationTokenSource\"></xref> or if they were both constructed from public <xref href=\"System.Threading.CancellationToken\"></xref> constructors and their <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> values are equal."}]}],"pos":[11526,12016],"yaml":true},{"content":"An associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"An associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"An associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[12191,12286],"yaml":true},{"content":"Determines whether the current <xref href=\"System.Threading.CancellationToken\"></xref> instance is equal to the specified token.","nodes":[{"pos":[0,128],"content":"Determines whether the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> instance is equal to the specified token.","source":"Determines whether the current <xref href=\"System.Threading.CancellationToken\"></xref> instance is equal to the specified token."}],"pos":[13908,14037],"yaml":true},{"content":"The other <xref href=\"System.Threading.CancellationToken\"></xref> to which to compare this instance.","nodes":[{"pos":[0,100],"content":"The other <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> to which to compare this instance.","source":"The other <xref href=\"System.Threading.CancellationToken\"></xref> to which to compare this instance."}],"pos":[14221,14322],"yaml":true},{"content":"`true` if the instances are equal; otherwise, `false`. Two tokens are equal if they are associated with the same <xref href=\"System.Threading.CancellationTokenSource\"></xref> or if they were both constructed from public <xref href=\"System.Threading.CancellationToken\"></xref> constructors and their <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> values are equal.","nodes":[{"pos":[0,396],"content":"`true` if the instances are equal; otherwise, `false`. Two tokens are equal if they are associated with the same <xref href=\"System.Threading.CancellationTokenSource\"></xref> or if they were both constructed from public <xref href=\"System.Threading.CancellationToken\"></xref> constructors and their <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> values are equal.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the instances are equal; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,54],"source":"`true` if the instances are equal; otherwise, `false`."},{"content":"Two tokens are equal if they are associated with the same <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> or if they were both constructed from public <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> constructors and their <ph id=\"ph3\">&lt;xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"&gt;&lt;/xref&gt;</ph> values are equal.","pos":[55,396],"source":" Two tokens are equal if they are associated with the same <xref href=\"System.Threading.CancellationTokenSource\"></xref> or if they were both constructed from public <xref href=\"System.Threading.CancellationToken\"></xref> constructors and their <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> values are equal."}]}],"pos":[14380,14779],"yaml":true},{"content":"Serves as a hash function for a <xref href=\"System.Threading.CancellationToken\"></xref>.","nodes":[{"pos":[0,88],"content":"Serves as a hash function for a <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph>.","source":"Serves as a hash function for a <xref href=\"System.Threading.CancellationToken\"></xref>."}],"pos":[16344,16433],"yaml":true},{"content":"A hash code for the current <xref href=\"System.Threading.CancellationToken\"></xref> instance.","nodes":[{"pos":[0,93],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> instance.","source":"A hash code for the current <xref href=\"System.Threading.CancellationToken\"></xref> instance."}],"pos":[16567,16661],"yaml":true},{"content":"Gets whether cancellation has been requested for this token.","nodes":[{"pos":[0,60],"content":"Gets whether cancellation has been requested for this token.","nodes":[{"content":"Gets whether cancellation has been requested for this token.","pos":[0,60]}]}],"pos":[18299,18360],"yaml":true},{"content":"This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.  \n  \n If this property is `true`, it only guarantees that cancellation has been requested. It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers. Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.","nodes":[{"pos":[0,305],"content":"This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.","nodes":[{"content":"This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource.Cancel%2A&gt;</ph> on the token's associated <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph>.","pos":[0,305],"source":"This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>."}]},{"pos":[312,683],"content":"If this property is `true`, it only guarantees that cancellation has been requested. It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers. Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.","nodes":[{"content":"If this property is <ph id=\"ph1\">`true`</ph>, it only guarantees that cancellation has been requested.","pos":[0,84],"source":"If this property is `true`, it only guarantees that cancellation has been requested."},{"content":"It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers.","pos":[85,245]},{"content":"Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.","pos":[246,371]}]}],"pos":[18371,19059],"yaml":true,"extradata":"MT"},{"content":"`true` if cancellation has been requested for this token; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> if cancellation has been requested for this token; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if cancellation has been requested for this token; otherwise, `false`."}],"pos":[20581,20661],"yaml":true},{"content":"Returns an empty <xref href=\"System.Threading.CancellationToken\"></xref> value.","nodes":[{"pos":[0,79],"content":"Returns an empty <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns an empty <xref href=\"System.Threading.CancellationToken\"></xref> value."}],"pos":[22197,22277],"yaml":true},{"content":"The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.  \n  \n You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.","nodes":[{"pos":[0,161],"content":"The cancellation token returned by this property cannot be canceled; that is, its <ph id=\"ph1\">&lt;xref:System.Threading.CancellationToken.CanBeCanceled%2A&gt;</ph> property is <ph id=\"ph2\">`false`</ph>.","source":"The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`."},{"pos":[168,324],"content":"You can also use the C#  <bpt id=\"p1\">[</bpt>default(CancellationToken)<ept id=\"p1\">](~/docs/csharp/language-reference/keywords/default.md)</ept> statement to create an empty cancellation token.","source":"You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token."}],"pos":[22288,22617],"yaml":true,"extradata":"MT"},{"content":"An empty cancellation token.","nodes":[{"pos":[0,28],"content":"An empty cancellation token.","nodes":[{"content":"An empty cancellation token.","pos":[0,28]}]}],"pos":[22781,22810],"yaml":true},{"content":"Determines whether two <xref href=\"System.Threading.CancellationToken\"></xref> instances are equal.","nodes":[{"pos":[0,99],"content":"Determines whether two <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> instances are equal.","source":"Determines whether two <xref href=\"System.Threading.CancellationToken\"></xref> instances are equal."}],"pos":[24696,24796],"yaml":true},{"content":"The first instance.","nodes":[{"pos":[0,19],"content":"The first instance.","nodes":[{"content":"The first instance.","pos":[0,19]}]}],"pos":[25032,25052],"yaml":true},{"content":"The second instance.","nodes":[{"pos":[0,20],"content":"The second instance.","nodes":[{"content":"The second instance.","pos":[0,20]}]}],"pos":[25134,25155],"yaml":true},{"content":"`true` if the instances are equal; otherwise, `false`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">`true`</ph> if the instances are equal; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the instances are equal; otherwise, `false`."}],"pos":[25213,25270],"yaml":true},{"content":"An associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"An associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"An associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[25450,25545],"yaml":true},{"content":"Determines whether two <xref href=\"System.Threading.CancellationToken\"></xref> instances are not equal.","nodes":[{"pos":[0,103],"content":"Determines whether two <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> instances are not equal.","source":"Determines whether two <xref href=\"System.Threading.CancellationToken\"></xref> instances are not equal."}],"pos":[27373,27477],"yaml":true},{"content":"The first instance.","nodes":[{"pos":[0,19],"content":"The first instance.","nodes":[{"content":"The first instance.","pos":[0,19]}]}],"pos":[27715,27735],"yaml":true},{"content":"The second instance.","nodes":[{"pos":[0,20],"content":"The second instance.","nodes":[{"content":"The second instance.","pos":[0,20]}]}],"pos":[27817,27838],"yaml":true},{"content":"`true` if the instances are not equal; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the instances are not equal; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the instances are not equal; otherwise, `false`."}],"pos":[27896,27957],"yaml":true},{"content":"An associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,94],"content":"An associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"An associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[28139,28234],"yaml":true},{"content":"Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,119],"content":"Registers a delegate that will be called when this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[29772,29892],"yaml":true},{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propagated out of this method call.  \n  \n The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.","nodes":[{"pos":[0,184],"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propagated out of this method call.","nodes":[{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propagated out of this method call.","pos":[0,184],"nodes":[{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously.","pos":[0,103]},{"content":"Any exception the delegate generates will be propagated out of this method call.","pos":[104,184]}]}]},{"pos":[191,336],"content":"The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.","nodes":[{"content":"The current <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph>, if one exists, will be captured along with the delegate and will be used when executing it.","pos":[0,145],"source":"The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it."}]}],"pos":[29903,30244],"yaml":true,"extradata":"MT"},{"content":"The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,105],"content":"The delegate to be executed when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[30429,30535],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenRegistration\"&gt;&lt;/xref&gt;</ph> instance that can be used to deregister the callback.","source":"The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback."}],"pos":[30625,30751],"yaml":true},{"content":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,95],"content":"The associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[30928,31024],"yaml":true},{"content":"<code>callback</code> is null.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;callback&lt;/code&gt;</ph> is null.","source":"<code>callback</code> is null."}],"pos":[31126,31157],"yaml":true},{"content":"Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,119],"content":"Registers a delegate that will be called when this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[32767,32887],"yaml":true},{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.  \n  \n If `useSynchronizationContext` is `true`, the current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.","nodes":[{"pos":[0,184],"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.","nodes":[{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.","pos":[0,184],"nodes":[{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously.","pos":[0,103]},{"content":"Any exception the delegate generates will be propogated out of this method call.","pos":[104,184]}]}]},{"pos":[191,378],"content":"If <ph id=\"ph1\">`useSynchronizationContext`</ph> is <ph id=\"ph2\">`true`</ph>, the current <ph id=\"ph3\">&lt;xref:System.Threading.ExecutionContext&gt;</ph>, if one exists, will be captured along with the delegate and will be used when executing it.","source":"If `useSynchronizationContext` is `true`, the current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it."}],"pos":[32898,33281],"yaml":true,"extradata":"MT"},{"content":"The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,105],"content":"The delegate to be executed when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[33498,33604],"yaml":true},{"content":"A value that indicates whether to capture the current <xref href=\"System.Threading.SynchronizationContext\"></xref> and use it when invoking the <code>callback</code>.","nodes":[{"pos":[0,166],"content":"A value that indicates whether to capture the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.SynchronizationContext\"&gt;&lt;/xref&gt;</ph> and use it when invoking the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A value that indicates whether to capture the current <xref href=\"System.Threading.SynchronizationContext\"></xref> and use it when invoking the <code>callback</code>."}],"pos":[33686,33853],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenRegistration\"&gt;&lt;/xref&gt;</ph> instance that can be used to deregister the callback.","source":"The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback."}],"pos":[33943,34069],"yaml":true},{"content":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,95],"content":"The associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[34246,34342],"yaml":true},{"content":"<code>callback</code> is null.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;callback&lt;/code&gt;</ph> is null.","source":"<code>callback</code> is null."}],"pos":[34444,34475],"yaml":true},{"content":"Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,119],"content":"Registers a delegate that will be called when this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[36148,36268],"yaml":true},{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.  \n  \n The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.","nodes":[{"pos":[0,184],"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.","nodes":[{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.","pos":[0,184],"nodes":[{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously.","pos":[0,103]},{"content":"Any exception the delegate generates will be propogated out of this method call.","pos":[104,184]}]}]},{"pos":[191,336],"content":"The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.","nodes":[{"content":"The current <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph>, if one exists, will be captured along with the delegate and will be used when executing it.","pos":[0,145],"source":"The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it."}]}],"pos":[36279,36620],"yaml":true,"extradata":"MT"},{"content":"The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,105],"content":"The delegate to be executed when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[36842,36948],"yaml":true},{"content":"The state to pass to the <code>callback</code> when the delegate is invoked. This may be null.","nodes":[{"pos":[0,94],"content":"The state to pass to the <code>callback</code> when the delegate is invoked. This may be null.","nodes":[{"content":"The state to pass to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept> when the delegate is invoked.","pos":[0,76],"source":"The state to pass to the <code>callback</code> when the delegate is invoked."},{"content":"This may be null.","pos":[77,94]}]}],"pos":[37009,37104],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenRegistration\"&gt;&lt;/xref&gt;</ph> instance that can be used to deregister the callback.","source":"The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback."}],"pos":[37194,37320],"yaml":true},{"content":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,95],"content":"The associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[37497,37593],"yaml":true},{"content":"<code>callback</code> is null.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;callback&lt;/code&gt;</ph> is null.","source":"<code>callback</code> is null."}],"pos":[37695,37726],"yaml":true},{"content":"Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,119],"content":"Registers a delegate that will be called when this <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[39471,39591],"yaml":true},{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.  \n  \n The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.","nodes":[{"pos":[0,184],"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.","nodes":[{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.","pos":[0,184],"nodes":[{"content":"If this token is already in the canceled state, the delegate will be run immediately and synchronously.","pos":[0,103]},{"content":"Any exception the delegate generates will be propogated out of this method call.","pos":[104,184]}]}]},{"pos":[191,336],"content":"The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.","nodes":[{"content":"The current <ph id=\"ph1\">&lt;xref:System.Threading.ExecutionContext&gt;</ph>, if one exists, will be captured along with the delegate and will be used when executing it.","pos":[0,145],"source":"The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it."}]}],"pos":[39602,39943],"yaml":true,"extradata":"MT"},{"content":"The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.","nodes":[{"pos":[0,105],"content":"The delegate to be executed when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> is canceled.","source":"The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled."}],"pos":[40197,40303],"yaml":true},{"content":"The state to pass to the <code>callback</code> when the delegate is invoked. This may be null.","nodes":[{"pos":[0,94],"content":"The state to pass to the <code>callback</code> when the delegate is invoked. This may be null.","nodes":[{"content":"The state to pass to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept> when the delegate is invoked.","pos":[0,76],"source":"The state to pass to the <code>callback</code> when the delegate is invoked."},{"content":"This may be null.","pos":[77,94]}]}],"pos":[40364,40459],"yaml":true},{"content":"A Boolean value that indicates whether to capture the current <xref href=\"System.Threading.SynchronizationContext\"></xref> and use it when invoking the <code>callback</code>.","nodes":[{"pos":[0,174],"content":"A Boolean value that indicates whether to capture the current <ph id=\"ph1\">&lt;xref href=\"System.Threading.SynchronizationContext\"&gt;&lt;/xref&gt;</ph> and use it when invoking the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">callback</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A Boolean value that indicates whether to capture the current <xref href=\"System.Threading.SynchronizationContext\"></xref> and use it when invoking the <code>callback</code>."}],"pos":[40541,40716],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback.","nodes":[{"pos":[0,125],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenRegistration\"&gt;&lt;/xref&gt;</ph> instance that can be used to deregister the callback.","source":"The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback."}],"pos":[40806,40932],"yaml":true},{"content":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,95],"content":"The associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[41109,41205],"yaml":true},{"content":"<code>callback</code> is null.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;callback&lt;/code&gt;</ph> is null.","source":"<code>callback</code> is null."}],"pos":[41307,41338],"yaml":true},{"content":"Throws a <xref href=\"System.OperationCanceledException\"></xref> if this token has had cancellation requested.","nodes":[{"pos":[0,109],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.OperationCanceledException\"&gt;&lt;/xref&gt;</ph> if this token has had cancellation requested.","source":"Throws a <xref href=\"System.OperationCanceledException\"></xref> if this token has had cancellation requested."}],"pos":[42933,43043],"yaml":true},{"content":"This method provides functionality equivalent to:  \n  \n C#  \n  \n```  \nif (token.IsCancellationRequested)   \n    throw new OperationCanceledException(token);  \n```  \n  \n```vb  \nIf token.IsCancellationRequested Then  \n    Throw New OperationCanceledException(token)  \nEnd If  \n```","nodes":[{"pos":[0,49],"content":"This method provides functionality equivalent to:","nodes":[{"content":"This method provides functionality equivalent to:","pos":[0,49]}]},{"pos":[56,58],"content":"C#","nodes":[{"content":"C#","pos":[0,2]}]}],"pos":[43054,43348],"yaml":true,"extradata":"MT"},{"content":"The token has had cancellation requested.","nodes":[{"pos":[0,41],"content":"The token has had cancellation requested.","nodes":[{"content":"The token has had cancellation requested.","pos":[0,41]}]}],"pos":[43638,43680],"yaml":true},{"content":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,95],"content":"The associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[43786,43882],"yaml":true},{"content":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is signaled when the token is canceled.","nodes":[{"pos":[0,100],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that is signaled when the token is canceled.","source":"Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is signaled when the token is canceled."}],"pos":[45365,45466],"yaml":true},{"content":"Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated. It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle). The handle should not be closed or disposed directly.","nodes":[{"pos":[0,382],"content":"Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated. It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle). The handle should not be closed or disposed directly.","nodes":[{"content":"Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated. It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle). The handle should not be closed or disposed directly.","pos":[0,382],"nodes":[{"content":"Accessing this property causes a <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandle&gt;</ph> to be instantiated.","pos":[0,87],"source":"Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated."},{"content":"It is preferable to only use this property when necessary, and to then dispose the associated <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> instance at the earliest opportunity (disposing the source will dispose of this allocated handle).","pos":[88,328],"source":" It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle)."},{"content":"The handle should not be closed or disposed directly.","pos":[329,382]}]}]}],"pos":[45477,45860],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Threading.WaitHandle\"></xref> that is signaled when the token is canceled.","nodes":[{"pos":[0,95],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.WaitHandle\"&gt;&lt;/xref&gt;</ph> that is signaled when the token is canceled.","source":"A <xref href=\"System.Threading.WaitHandle\"></xref> that is signaled when the token is canceled."}],"pos":[46009,46105],"yaml":true},{"content":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.","nodes":[{"pos":[0,95],"content":"The associated <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed."}],"pos":[46284,46380],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.CancellationToken\n  commentId: T:System.Threading.CancellationToken\n  id: CancellationToken\n  children:\n  - System.Threading.CancellationToken.#ctor(System.Boolean)\n  - System.Threading.CancellationToken.CanBeCanceled\n  - System.Threading.CancellationToken.Equals(System.Object)\n  - System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)\n  - System.Threading.CancellationToken.GetHashCode\n  - System.Threading.CancellationToken.IsCancellationRequested\n  - System.Threading.CancellationToken.None\n  - System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  - System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  - System.Threading.CancellationToken.Register(System.Action)\n  - System.Threading.CancellationToken.Register(System.Action,System.Boolean)\n  - System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)\n  - System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)\n  - System.Threading.CancellationToken.ThrowIfCancellationRequested\n  - System.Threading.CancellationToken.WaitHandle\n  langs:\n  - csharp\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n  type: Struct\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Propagates notification that operations should be canceled.\n  remarks: \"A <xref:System.Threading.CancellationToken> enables cooperative cancellation between threads, thread pool work items, or <xref:System.Threading.Tasks.Task> objects. You create a cancellation token by instantiating a <xref:System.Threading.CancellationTokenSource> object, which manages cancellation tokens retrieved from its <xref:System.Threading.CancellationTokenSource.Token%2A?displayProperty=fullName> property. You then  pass the cancellation token to any number of threads, tasks, or operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName>, the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property on every copy of the cancellation token is set to `true`. The objects that receive the notification can respond in whatever manner is appropriate.  \\n  \\n For more information and code examples see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).\"\n  example:\n  - \"The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments. A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed.  \\n  \\n To handle the possible cancellation of the operation, the example instantiates a <xref:System.Threading.CancellationTokenSource> object that generates a cancellation token which is passed to a <xref:System.Threading.Tasks.TaskFactory> object. The <xref:System.Threading.Tasks.TaskFactory> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument. The <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%60%602%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2CSystem.Func%7BSystem.Threading.Tasks.Task%7B%60%600%7D%5B%5D%2C%60%601%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method is called to ensure that the mean is computed only after all readings have been gathered successfully. If a task has not because it has been cancelled, the call to the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A?displayProperty=fullName> method throws an exception.  \\n  \\n [!code-csharp[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/cs/cancel1.cs#1)]\\n [!code-vb[System.Threading.CancellationTokenSource.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.cancellationtokensource.class/vb/cancel1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public struct CancellationToken\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.#ctor(System.Boolean)\n  commentId: M:System.Threading.CancellationToken.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: CancellationToken(Boolean)\n  nameWithType: CancellationToken.CancellationToken(Boolean)\n  fullName: CancellationToken.CancellationToken(Boolean)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Initializes the <xref href=\"System.Threading.CancellationToken\"></xref>.\n  remarks: \"Tokens created with this constructor will remain in the canceled state specified by the `canceled` parameter. If `canceled` is `false`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `false`.  \\n  \\n If `canceled` is `true`, both <xref:System.Threading.CancellationToken.CanBeCanceled%2A> and <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will be `true`.\"\n  syntax:\n    content: public CancellationToken (bool canceled);\n    parameters:\n    - id: canceled\n      type: System.Boolean\n      description: The canceled state for the token.\n  overload: System.Threading.CancellationToken.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.CanBeCanceled\n  commentId: P:System.Threading.CancellationToken.CanBeCanceled\n  id: CanBeCanceled\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: CanBeCanceled\n  nameWithType: CancellationToken.CanBeCanceled\n  fullName: CancellationToken.CanBeCanceled\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Gets whether this token is capable of being in the canceled state.\n  remarks: \"If <xref:System.Threading.CancellationToken.CanBeCanceled%2A> returns `false`, it is guaranteed that the token will never transition into a canceled state, meaning that <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> will never return `true`. A cancellation token that cannot be canceled is returned by the static <xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName> property.  \\n  \\n You can optionally use this property to determine whether a cancellation token can be canceled before examing the value of the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property to determine whether it has been canceled.\"\n  syntax:\n    content: public bool CanBeCanceled { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this token is capable of being in the canceled state; otherwise, `false`.'\n  overload: System.Threading.CancellationToken.CanBeCanceled*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.Equals(System.Object)\n  commentId: M:System.Threading.CancellationToken.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: CancellationToken.Equals(Object)\n  fullName: CancellationToken.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Determines whether the current <xref href=\"System.Threading.CancellationToken\"></xref> instance is equal to the specified <xref href=\"System.Object\"></xref>.\n  syntax:\n    content: public override bool Equals (object other);\n    parameters:\n    - id: other\n      type: System.Object\n      description: The other object to which to compare this instance.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>other</code> is a <xref href=\"System.Threading.CancellationToken\"></xref> and if the two instances are equal; otherwise, `false`. Two tokens are equal if they are associated with the same <xref href=\"System.Threading.CancellationTokenSource\"></xref> or if they were both constructed from public <xref href=\"System.Threading.CancellationToken\"></xref> constructors and their <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> values are equal.'\n  overload: System.Threading.CancellationToken.Equals*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)\n  commentId: M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)\n  id: Equals(System.Threading.CancellationToken)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: Equals(CancellationToken)\n  nameWithType: CancellationToken.Equals(CancellationToken)\n  fullName: CancellationToken.Equals(CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Determines whether the current <xref href=\"System.Threading.CancellationToken\"></xref> instance is equal to the specified token.\n  syntax:\n    content: public bool Equals (System.Threading.CancellationToken other);\n    parameters:\n    - id: other\n      type: System.Threading.CancellationToken\n      description: The other <xref href=\"System.Threading.CancellationToken\"></xref> to which to compare this instance.\n    return:\n      type: System.Boolean\n      description: '`true` if the instances are equal; otherwise, `false`. Two tokens are equal if they are associated with the same <xref href=\"System.Threading.CancellationTokenSource\"></xref> or if they were both constructed from public <xref href=\"System.Threading.CancellationToken\"></xref> constructors and their <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\"></xref> values are equal.'\n  overload: System.Threading.CancellationToken.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.GetHashCode\n  commentId: M:System.Threading.CancellationToken.GetHashCode\n  id: GetHashCode\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: CancellationToken.GetHashCode()\n  fullName: CancellationToken.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Serves as a hash function for a <xref href=\"System.Threading.CancellationToken\"></xref>.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Threading.CancellationToken\"></xref> instance.\n  overload: System.Threading.CancellationToken.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.IsCancellationRequested\n  commentId: P:System.Threading.CancellationToken.IsCancellationRequested\n  id: IsCancellationRequested\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: IsCancellationRequested\n  nameWithType: CancellationToken.IsCancellationRequested\n  fullName: CancellationToken.IsCancellationRequested\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Gets whether cancellation has been requested for this token.\n  remarks: \"This property indicates whether cancellation has been requested for this token, either through the token initially being constructed in a canceled state, or through calling <xref:System.Threading.CancellationTokenSource.Cancel%2A> on the token's associated <xref:System.Threading.CancellationTokenSource>.  \\n  \\n If this property is `true`, it only guarantees that cancellation has been requested. It does not guarantee that every registered handler has finished executing, nor that cancellation requests have finished propagating to all registered handlers. Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.\"\n  example:\n  - \"The following is a simple example that executes a server process until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property returns `true`.  \\n  \\n [!code-csharp[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/cs/cancellation.cs#12)]\\n [!code-vb[System.Threading.Tasks.CancellationToken.IsCancellationRequested#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.CancellationToken.IsCancellationRequested/vb/cancelthreads.vb#12)]  \\n  \\n The example instantiates a <xref:System.Threading.CancellationTokenSource> object, which controls access to the cancellation token. It then defines two thread procedures. The first is defined as a lambda expression that pools the keyboard and, when the \\\"C\\\" key is pressed, calls <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> to set the cancellation token to the cancelled state. The second is a parameterized method, `ServerClass.StaticMethod`, that executes a loop until the <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true`.  \\n  \\n The main thread then starts the two threads and blocks until the thread that executes the `ServerClass.StaticMethod` method terminates.\"\n  syntax:\n    content: public bool IsCancellationRequested { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if cancellation has been requested for this token; otherwise, `false`.'\n  overload: System.Threading.CancellationToken.IsCancellationRequested*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.None\n  commentId: P:System.Threading.CancellationToken.None\n  id: None\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: None\n  nameWithType: CancellationToken.None\n  fullName: CancellationToken.None\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Returns an empty <xref href=\"System.Threading.CancellationToken\"></xref> value.\n  remarks: \"The cancellation token returned by this property cannot be canceled; that is, its <xref:System.Threading.CancellationToken.CanBeCanceled%2A> property is `false`.  \\n  \\n You can also use the C#  [default(CancellationToken)](~/docs/csharp/language-reference/keywords/default.md) statement to create an empty cancellation token.\"\n  syntax:\n    content: public static System.Threading.CancellationToken None { get; }\n    return:\n      type: System.Threading.CancellationToken\n      description: An empty cancellation token.\n  overload: System.Threading.CancellationToken.None*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  commentId: M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  id: op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: op_Equality(CancellationToken, CancellationToken)\n  nameWithType: CancellationToken.op_Equality(CancellationToken, CancellationToken)\n  fullName: CancellationToken.op_Equality(CancellationToken, CancellationToken)\n  type: Operator\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Determines whether two <xref href=\"System.Threading.CancellationToken\"></xref> instances are equal.\n  syntax:\n    content: public static bool op_Equality (System.Threading.CancellationToken left, System.Threading.CancellationToken right);\n    parameters:\n    - id: left\n      type: System.Threading.CancellationToken\n      description: The first instance.\n    - id: right\n      type: System.Threading.CancellationToken\n      description: The second instance.\n    return:\n      type: System.Boolean\n      description: '`true` if the instances are equal; otherwise, `false`.'\n  overload: System.Threading.CancellationToken.op_Equality*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  commentId: M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  id: op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: op_Inequality(CancellationToken, CancellationToken)\n  nameWithType: CancellationToken.op_Inequality(CancellationToken, CancellationToken)\n  fullName: CancellationToken.op_Inequality(CancellationToken, CancellationToken)\n  type: Operator\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Determines whether two <xref href=\"System.Threading.CancellationToken\"></xref> instances are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Threading.CancellationToken left, System.Threading.CancellationToken right);\n    parameters:\n    - id: left\n      type: System.Threading.CancellationToken\n      description: The first instance.\n    - id: right\n      type: System.Threading.CancellationToken\n      description: The second instance.\n    return:\n      type: System.Boolean\n      description: '`true` if the instances are not equal; otherwise, `false`.'\n  overload: System.Threading.CancellationToken.op_Inequality*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: An associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.Register(System.Action)\n  commentId: M:System.Threading.CancellationToken.Register(System.Action)\n  id: Register(System.Action)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: Register(Action)\n  nameWithType: CancellationToken.Register(Action)\n  fullName: CancellationToken.Register(Action)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  remarks: \"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propagated out of this method call.  \\n  \\n The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.\"\n  syntax:\n    content: public System.Threading.CancellationTokenRegistration Register (Action callback);\n    parameters:\n    - id: callback\n      type: System.Action\n      description: The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n    return:\n      type: System.Threading.CancellationTokenRegistration\n      description: The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback.\n  overload: System.Threading.CancellationToken.Register*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>callback</code> is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.Register(System.Action,System.Boolean)\n  commentId: M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)\n  id: Register(System.Action,System.Boolean)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: Register(Action, Boolean)\n  nameWithType: CancellationToken.Register(Action, Boolean)\n  fullName: CancellationToken.Register(Action, Boolean)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  remarks: \"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.  \\n  \\n If `useSynchronizationContext` is `true`, the current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.\"\n  syntax:\n    content: public System.Threading.CancellationTokenRegistration Register (Action callback, bool useSynchronizationContext);\n    parameters:\n    - id: callback\n      type: System.Action\n      description: The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n    - id: useSynchronizationContext\n      type: System.Boolean\n      description: A value that indicates whether to capture the current <xref href=\"System.Threading.SynchronizationContext\"></xref> and use it when invoking the <code>callback</code>.\n    return:\n      type: System.Threading.CancellationTokenRegistration\n      description: The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback.\n  overload: System.Threading.CancellationToken.Register*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>callback</code> is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)\n  commentId: M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)\n  id: Register(System.Action{System.Object},System.Object)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: Register(Action<Object>, Object)\n  nameWithType: CancellationToken.Register(Action<Object>, Object)\n  fullName: CancellationToken.Register(Action<Object>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  remarks: \"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.  \\n  \\n The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.\"\n  syntax:\n    content: public System.Threading.CancellationTokenRegistration Register (Action<object> callback, object state);\n    parameters:\n    - id: callback\n      type: System.Action{System.Object}\n      description: The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n    - id: state\n      type: System.Object\n      description: The state to pass to the <code>callback</code> when the delegate is invoked. This may be null.\n    return:\n      type: System.Threading.CancellationTokenRegistration\n      description: The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback.\n  overload: System.Threading.CancellationToken.Register*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>callback</code> is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)\n  commentId: M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)\n  id: Register(System.Action{System.Object},System.Object,System.Boolean)\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: Register(Action<Object>, Object, Boolean)\n  nameWithType: CancellationToken.Register(Action<Object>, Object, Boolean)\n  fullName: CancellationToken.Register(Action<Object>, Object, Boolean)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n  remarks: \"If this token is already in the canceled state, the delegate will be run immediately and synchronously. Any exception the delegate generates will be propogated out of this method call.  \\n  \\n The current <xref:System.Threading.ExecutionContext>, if one exists, will be captured along with the delegate and will be used when executing it.\"\n  syntax:\n    content: public System.Threading.CancellationTokenRegistration Register (Action<object> callback, object state, bool useSynchronizationContext);\n    parameters:\n    - id: callback\n      type: System.Action{System.Object}\n      description: The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\"></xref> is canceled.\n    - id: state\n      type: System.Object\n      description: The state to pass to the <code>callback</code> when the delegate is invoked. This may be null.\n    - id: useSynchronizationContext\n      type: System.Boolean\n      description: A Boolean value that indicates whether to capture the current <xref href=\"System.Threading.SynchronizationContext\"></xref> and use it when invoking the <code>callback</code>.\n    return:\n      type: System.Threading.CancellationTokenRegistration\n      description: The <xref href=\"System.Threading.CancellationTokenRegistration\"></xref> instance that can be used to deregister the callback.\n  overload: System.Threading.CancellationToken.Register*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>callback</code> is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.ThrowIfCancellationRequested\n  commentId: M:System.Threading.CancellationToken.ThrowIfCancellationRequested\n  id: ThrowIfCancellationRequested\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: ThrowIfCancellationRequested()\n  nameWithType: CancellationToken.ThrowIfCancellationRequested()\n  fullName: CancellationToken.ThrowIfCancellationRequested()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Throws a <xref href=\"System.OperationCanceledException\"></xref> if this token has had cancellation requested.\n  remarks: \"This method provides functionality equivalent to:  \\n  \\n C#  \\n  \\n```  \\nif (token.IsCancellationRequested)   \\n    throw new OperationCanceledException(token);  \\n```  \\n  \\n```vb  \\nIf token.IsCancellationRequested Then  \\n    Throw New OperationCanceledException(token)  \\nEnd If  \\n```\"\n  syntax:\n    content: public void ThrowIfCancellationRequested ();\n    parameters: []\n  overload: System.Threading.CancellationToken.ThrowIfCancellationRequested*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The token has had cancellation requested.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.CancellationToken.WaitHandle\n  commentId: P:System.Threading.CancellationToken.WaitHandle\n  id: WaitHandle\n  parent: System.Threading.CancellationToken\n  langs:\n  - csharp\n  name: WaitHandle\n  nameWithType: CancellationToken.WaitHandle\n  fullName: CancellationToken.WaitHandle\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Gets a <xref href=\"System.Threading.WaitHandle\"></xref> that is signaled when the token is canceled.\n  remarks: Accessing this property causes a <xref:System.Threading.WaitHandle> to be instantiated. It is preferable to only use this property when necessary, and to then dispose the associated <xref:System.Threading.CancellationTokenSource> instance at the earliest opportunity (disposing the source will dispose of this allocated handle). The handle should not be closed or disposed directly.\n  syntax:\n    content: public System.Threading.WaitHandle WaitHandle { get; }\n    return:\n      type: System.Threading.WaitHandle\n      description: A <xref href=\"System.Threading.WaitHandle\"></xref> that is signaled when the token is canceled.\n  overload: System.Threading.CancellationToken.WaitHandle*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The associated <xref href=\"System.Threading.CancellationTokenSource\"></xref> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  nameWithType: OperationCanceledException\n  fullName: System.OperationCanceledException\n- uid: System.Threading.CancellationToken.#ctor(System.Boolean)\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: CancellationToken(Boolean)\n  nameWithType: CancellationToken.CancellationToken(Boolean)\n  fullName: CancellationToken.CancellationToken(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.CancellationToken.CanBeCanceled\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: CanBeCanceled\n  nameWithType: CancellationToken.CanBeCanceled\n  fullName: CancellationToken.CanBeCanceled\n- uid: System.Threading.CancellationToken.Equals(System.Object)\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CancellationToken.Equals(Object)\n  fullName: CancellationToken.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: Equals(CancellationToken)\n  nameWithType: CancellationToken.Equals(CancellationToken)\n  fullName: CancellationToken.Equals(CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Threading.CancellationToken.GetHashCode\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CancellationToken.GetHashCode()\n  fullName: CancellationToken.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Threading.CancellationToken.IsCancellationRequested\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: IsCancellationRequested\n  nameWithType: CancellationToken.IsCancellationRequested\n  fullName: CancellationToken.IsCancellationRequested\n- uid: System.Threading.CancellationToken.None\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: None\n  nameWithType: CancellationToken.None\n  fullName: CancellationToken.None\n- uid: System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: op_Equality(CancellationToken, CancellationToken)\n  nameWithType: CancellationToken.op_Equality(CancellationToken, CancellationToken)\n  fullName: CancellationToken.op_Equality(CancellationToken, CancellationToken)\n- uid: System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: op_Inequality(CancellationToken, CancellationToken)\n  nameWithType: CancellationToken.op_Inequality(CancellationToken, CancellationToken)\n  fullName: CancellationToken.op_Inequality(CancellationToken, CancellationToken)\n- uid: System.Threading.CancellationToken.Register(System.Action)\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: Register(Action)\n  nameWithType: CancellationToken.Register(Action)\n  fullName: CancellationToken.Register(Action)\n- uid: System.Threading.CancellationTokenRegistration\n  parent: System.Threading\n  isExternal: false\n  name: CancellationTokenRegistration\n  nameWithType: CancellationTokenRegistration\n  fullName: System.Threading.CancellationTokenRegistration\n- uid: System.Action\n  parent: System\n  isExternal: false\n  name: Action\n  nameWithType: Action\n  fullName: System.Action\n- uid: System.Threading.CancellationToken.Register(System.Action,System.Boolean)\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: Register(Action, Boolean)\n  nameWithType: CancellationToken.Register(Action, Boolean)\n  fullName: CancellationToken.Register(Action, Boolean)\n- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: Register(Action<Object>, Object)\n  nameWithType: CancellationToken.Register(Action<Object>, Object)\n  fullName: CancellationToken.Register(Action<Object>, Object)\n- uid: System.Action`1\n  name: Action<T>\n  nameWithType: Action<T>\n  fullName: System.Action<T>\n- uid: System.Action{System.Object}\n  parent: System\n  isExternal: false\n  name: Action<Object>\n  nameWithType: Action<Object>\n  fullName: System.Action<System.Object>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: Register(Action<Object>, Object, Boolean)\n  nameWithType: CancellationToken.Register(Action<Object>, Object, Boolean)\n  fullName: CancellationToken.Register(Action<Object>, Object, Boolean)\n- uid: System.Threading.CancellationToken.ThrowIfCancellationRequested\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: ThrowIfCancellationRequested()\n  nameWithType: CancellationToken.ThrowIfCancellationRequested()\n  fullName: CancellationToken.ThrowIfCancellationRequested()\n- uid: System.Threading.CancellationToken.WaitHandle\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: WaitHandle\n  nameWithType: CancellationToken.WaitHandle\n  fullName: CancellationToken.WaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Threading.CancellationToken.#ctor*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken.CancellationToken\n  fullName: CancellationToken.CancellationToken\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n- uid: System.Threading.CancellationToken.CanBeCanceled*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: CanBeCanceled\n  nameWithType: CancellationToken.CanBeCanceled\n  fullName: CancellationToken.CanBeCanceled\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n- uid: System.Threading.CancellationToken.Equals*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: Equals\n  nameWithType: CancellationToken.Equals\n  fullName: CancellationToken.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n- uid: System.Threading.CancellationToken.GetHashCode*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: GetHashCode\n  nameWithType: CancellationToken.GetHashCode\n  fullName: CancellationToken.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n- uid: System.Threading.CancellationToken.IsCancellationRequested*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: IsCancellationRequested\n  nameWithType: CancellationToken.IsCancellationRequested\n  fullName: CancellationToken.IsCancellationRequested\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n- uid: System.Threading.CancellationToken.None*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: None\n  nameWithType: CancellationToken.None\n  fullName: CancellationToken.None\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n- uid: System.Threading.CancellationToken.op_Equality*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: op_Equality\n  nameWithType: CancellationToken.op_Equality\n  fullName: CancellationToken.op_Equality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n- uid: System.Threading.CancellationToken.op_Inequality*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: op_Inequality\n  nameWithType: CancellationToken.op_Inequality\n  fullName: CancellationToken.op_Inequality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n- uid: System.Threading.CancellationToken.Register*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: Register\n  nameWithType: CancellationToken.Register\n  fullName: CancellationToken.Register\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n- uid: System.Threading.CancellationToken.ThrowIfCancellationRequested*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: ThrowIfCancellationRequested\n  nameWithType: CancellationToken.ThrowIfCancellationRequested\n  fullName: CancellationToken.ThrowIfCancellationRequested\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n- uid: System.Threading.CancellationToken.WaitHandle*\n  parent: System.Threading.CancellationToken\n  isExternal: false\n  name: WaitHandle\n  nameWithType: CancellationToken.WaitHandle\n  fullName: CancellationToken.WaitHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/CancellationToken.xml\n"}