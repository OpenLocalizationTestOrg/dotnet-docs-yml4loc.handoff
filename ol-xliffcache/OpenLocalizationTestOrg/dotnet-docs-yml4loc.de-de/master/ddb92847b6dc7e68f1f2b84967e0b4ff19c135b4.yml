### YamlMime:ManagedReference
items:
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  id: FieldInfo
  children:
  - System.Reflection.FieldInfo.#ctor
  - System.Reflection.FieldInfo.Attributes
  - System.Reflection.FieldInfo.Equals(System.Object)
  - System.Reflection.FieldInfo.FieldHandle
  - System.Reflection.FieldInfo.FieldType
  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.FieldInfo.GetHashCode
  - System.Reflection.FieldInfo.GetOptionalCustomModifiers
  - System.Reflection.FieldInfo.GetRawConstantValue
  - System.Reflection.FieldInfo.GetRequiredCustomModifiers
  - System.Reflection.FieldInfo.GetValue(System.Object)
  - System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)
  - System.Reflection.FieldInfo.IsAssembly
  - System.Reflection.FieldInfo.IsFamily
  - System.Reflection.FieldInfo.IsFamilyAndAssembly
  - System.Reflection.FieldInfo.IsFamilyOrAssembly
  - System.Reflection.FieldInfo.IsInitOnly
  - System.Reflection.FieldInfo.IsLiteral
  - System.Reflection.FieldInfo.IsNotSerialized
  - System.Reflection.FieldInfo.IsPinvokeImpl
  - System.Reflection.FieldInfo.IsPrivate
  - System.Reflection.FieldInfo.IsPublic
  - System.Reflection.FieldInfo.IsSecurityCritical
  - System.Reflection.FieldInfo.IsSecuritySafeCritical
  - System.Reflection.FieldInfo.IsSecurityTransparent
  - System.Reflection.FieldInfo.IsSpecialName
  - System.Reflection.FieldInfo.IsStatic
  - System.Reflection.FieldInfo.MemberType
  - System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)
  - System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)
  - System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  - System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)
  - System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)
  - System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType
  - System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
  type: Class
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Discovers the attributes of a field and provides access to field metadata.
  remarks: "The field information is obtained from metadata. The <xref:System.Reflection.FieldInfo> class does not have a public constructor. <xref:System.Reflection.FieldInfo> objects are obtained by calling either the <xref:System.Type.GetFields%2A> or <xref:System.Type.GetField%2A> method of a `Type` object.  \n  \n Fields are variables defined in the class. <xref:System.Reflection.FieldInfo> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field. The class is not loaded into memory until invoke or get is called on the object."
  example:
  - "The following example uses the <xref:System.Type.GetFields%2A?displayProperty=fullName> method to get the field-related information from the <xref:System.Reflection.FieldInfo> class, and then displays field attributes.  \n  \n [!code-cpp[FieldInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo/CPP/fieldinfo.cpp#1)]\n [!code-csharp[FieldInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo/CS/fieldinfo.cs#1)]\n [!code-vb[FieldInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo/VB/fieldinfo.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class FieldInfo : System.Reflection.MemberInfo, System.Runtime.InteropServices._FieldInfo
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  derivedClasses:
  - Microsoft.JScript.COMFieldInfo
  - Microsoft.JScript.JSField
  - Microsoft.JScript.JSFieldInfo
  - System.Reflection.Emit.FieldBuilder
  implements:
  - System.Runtime.InteropServices._FieldInfo
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  - System.Reflection.MemberInfo.ReflectedType
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  extensionMethods:
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)
  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)
  attributes:
  - type: System.Runtime.InteropServices.ClassInterfaceAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.#ctor
  commentId: M:System.Reflection.FieldInfo.#ctor
  id: '#ctor'
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: FieldInfo()
  nameWithType: FieldInfo.FieldInfo()
  fullName: FieldInfo.FieldInfo()
  type: Constructor
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Initializes a new instance of the `FieldInfo` class.
  syntax:
    content: protected FieldInfo ();
    parameters: []
  overload: System.Reflection.FieldInfo.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.Attributes
  commentId: P:System.Reflection.FieldInfo.Attributes
  id: Attributes
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: Attributes
  nameWithType: FieldInfo.Attributes
  fullName: FieldInfo.Attributes
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the attributes associated with this field.
  remarks: "All members have a set of attributes, which are defined in relation to the specific type of member. `FieldAttributes` informs the user whether this field is the private field, a static field, and so on.  \n  \n To get the `Attributes` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `Attributes`."
  example:
  - "The following code example builds three fields and displays their field attributes. A `FieldAttributes` value can contain more than one attribute, such as both `Public` and `Literal`, as shown in the third field.  \n  \n [!code-cpp[Classic FieldAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldAttributes Example/CPP/source.cpp#1)]\n [!code-csharp[Classic FieldAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldAttributes Example/CS/source.cs#1)]\n [!code-vb[Classic FieldAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldAttributes Example/VB/source.vb#1)]"
  syntax:
    content: public abstract System.Reflection.FieldAttributes Attributes { get; }
    return:
      type: System.Reflection.FieldAttributes
      description: The `FieldAttributes` for this field.
  overload: System.Reflection.FieldInfo.Attributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.Equals(System.Object)
  commentId: M:System.Reflection.FieldInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: FieldInfo.Equals(Object)
  fullName: FieldInfo.Equals(Object)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or `null`.
    return:
      type: System.Boolean
      description: '`true` if <code>obj</code> equals the type and value of this instance; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.FieldHandle
  commentId: P:System.Reflection.FieldInfo.FieldHandle
  id: FieldHandle
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: FieldHandle
  nameWithType: FieldInfo.FieldHandle
  fullName: FieldInfo.FieldHandle
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a `RuntimeFieldHandle`, which is a handle to the internal metadata representation of a field.
  remarks: The handles are valid only in the appdomain in which they were obtained.
  example:
  - "The following example retrieves MyClass.MyField field information and displays the field associated with the field handle.  \n  \n [!code-cpp[FieldInfo_FieldHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_FieldHandle/CPP/fieldinfo_fieldhandle.cpp#1)]\n [!code-csharp[FieldInfo_FieldHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_FieldHandle/CS/fieldinfo_fieldhandle.cs#1)]\n [!code-vb[FieldInfo_FieldHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_FieldHandle/VB/fieldinfo_fieldhandle.vb#1)]"
  syntax:
    content: public abstract RuntimeFieldHandle FieldHandle { get; }
    return:
      type: System.RuntimeFieldHandle
      description: A handle to the internal metadata representation of a field.
  overload: System.Reflection.FieldInfo.FieldHandle*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.FieldType
  commentId: P:System.Reflection.FieldInfo.FieldType
  id: FieldType
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: FieldType
  nameWithType: FieldInfo.FieldType
  fullName: FieldInfo.FieldType
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the type of this field object.
  remarks: "The type is some primitive data type, such as `String`, `Boolean`, or `GUID`.  \n  \n To get the `FieldType` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `FieldType` value."
  example:
  - "The following example creates a field, gets its type and <xref:System.Reflection.FieldInfo>, and displays its <xref:System.Reflection.FieldInfo.FieldType%2A>.  \n  \n [!code-cpp[Classic FieldInfo.FieldType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/CPP/source.cpp#1)]\n [!code-csharp[Classic FieldInfo.FieldType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/CS/source.cs#1)]\n [!code-vb[Classic FieldInfo.FieldType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.FieldType Example/VB/source.vb#1)]"
  syntax:
    content: public abstract Type FieldType { get; }
    return:
      type: System.Type
      description: The type of this field object.
  overload: System.Reflection.FieldInfo.FieldType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  id: GetFieldFromHandle(System.RuntimeFieldHandle)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: GetFieldFromHandle(RuntimeFieldHandle)
  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)
  fullName: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a <xref href="System.Reflection.FieldInfo"></xref> for the field represented by the specified handle.
  remarks: Handles are valid only in the application domain in which they were obtained.
  example:
  - "The following code example uses the <xref:System.Type.GetFields%2A?displayProperty=fullName> method to get <xref:System.Reflection.FieldInfo> objects for the fields of a type, gets a <xref:System.RuntimeFieldHandle> structure for each field, and then retrieves the <xref:System.Reflection.FieldInfo> objects from the handles using this overload of the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%2A> method.  \n  \n [!code-cpp[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/CPP/fieldinfo_getfieldfromhandle.cpp#1)]\n [!code-csharp[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/CS/fieldinfo_getfieldfromhandle.cs#1)]\n [!code-vb[FieldInfo_GetFieldFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle/VB/fieldinfo_getfieldfromhandle.vb#1)]"
  syntax:
    content: public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle);
    parameters:
    - id: handle
      type: System.RuntimeFieldHandle
      description: A <xref href="System.RuntimeFieldHandle"></xref> structure that contains the handle to the internal metadata representation of a field.
    return:
      type: System.Reflection.FieldInfo
      description: A <xref href="System.Reflection.FieldInfo"></xref> object representing the field specified by <code>handle</code>.
  overload: System.Reflection.FieldInfo.GetFieldFromHandle*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>handle</code> is invalid.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)
  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)
  fullName: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a <xref href="System.Reflection.FieldInfo"></xref> for the field represented by the specified handle, for the specified generic type.
  remarks: "Handles are valid only in the application domain in which they were obtained.  \n  \n The recommended practice is that `declaringType` should always be the runtime type handle of the constructed type that `handle` belongs to. That is, if `handle` is a runtime field handle for a field that belongs to `MyType<int>` (`MyType(Of Integer)` in Visual Basic), `declaringType` is the runtime type handle for `MyType<int>`. Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.  \n  \n Implementations are compatible in some cases. For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments. For example, `MyType<string>`, `MyType<object>`, and `MyType<ArrayList>` all share the same implementation. In this situation, the <xref:System.Reflection.FieldInfo> object that is returned represents a field on the type that `declaringType` specifies, regardless of the original source of `handle`. This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.  \n  \n If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position. In that case, the only way to use the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%2CSystem.RuntimeTypeHandle%29?displayProperty=fullName> overload is to ensure that `declaringType` is the runtime type handle for the constructed type that `handle` belongs to."
  example:
  - "The following example shows how to retrieve <xref:System.Reflection.FieldInfo> objects for fields on constructed generic classes. The example defines the generic type `Test<T>` (`Test(Of T)` in Visual Basic) with a single field named `TestField`, of type `T`. The example gets the <xref:System.RuntimeFieldHandle> and <xref:System.RuntimeTypeHandle> for the case where `T` is <xref:System.String>, and demonstrates the following:  \n  \n-   An exception is thrown if the <xref:System.Reflection.FieldInfo.GetFieldFromHandle%28System.RuntimeFieldHandle%29> method overload is used. This is true even if the field is not of type `T`.  \n  \n-   A <xref:System.Reflection.FieldInfo> is retrieved successfully if the runtime type handle is from the same construction as the runtime field handle, in this case `Test<string>`.  \n  \n-   If the runtime type handle is from a compatible construction, in this case `Test<object>`, a <xref:System.Reflection.FieldInfo> for the field on the compatible construction is retrieved.  \n  \n-   If the runtime type handle is not from a compatible construction, an exception is thrown. In this case, a value type is specified for `T`.  \n  \n [!code-csharp[FieldInfo_GetFieldFromHandle2#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/cs/source.cs#1)]\n [!code-vb[FieldInfo_GetFieldFromHandle2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetFieldFromHandle2/vb/source.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);
    parameters:
    - id: handle
      type: System.RuntimeFieldHandle
      description: A <xref href="System.RuntimeFieldHandle"></xref> structure that contains the handle to the internal metadata representation of a field.
    - id: declaringType
      type: System.RuntimeTypeHandle
      description: A <xref href="System.RuntimeTypeHandle"></xref> structure that contains the handle to the generic type that defines the field.
    return:
      type: System.Reflection.FieldInfo
      description: A <xref href="System.Reflection.FieldInfo"></xref> object representing the field specified by <code>handle</code>, in the generic type specified by <code>declaringType</code>.
  overload: System.Reflection.FieldInfo.GetFieldFromHandle*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>handle</code> is invalid.  \n  \n -or-  \n  \n <code>declaringType</code> is not compatible with <code>handle</code>. For example, <code>declaringType</code> is the runtime type handle of the generic type definition, and <code>handle</code> comes from a constructed type."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.GetHashCode
  commentId: M:System.Reflection.FieldInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: FieldInfo.GetHashCode()
  fullName: FieldInfo.GetHashCode()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Reflection.FieldInfo.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.GetOptionalCustomModifiers
  commentId: M:System.Reflection.FieldInfo.GetOptionalCustomModifiers
  id: GetOptionalCustomModifiers
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: GetOptionalCustomModifiers()
  nameWithType: FieldInfo.GetOptionalCustomModifiers()
  fullName: FieldInfo.GetOptionalCustomModifiers()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets an array of types that identify the optional custom modifiers of the field.
  remarks: The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public virtual Type[] GetOptionalCustomModifiers ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects that identify the optional custom modifiers of the current field, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref>.
  overload: System.Reflection.FieldInfo.GetOptionalCustomModifiers*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.GetRawConstantValue
  commentId: M:System.Reflection.FieldInfo.GetRawConstantValue
  id: GetRawConstantValue
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: GetRawConstantValue()
  nameWithType: FieldInfo.GetRawConstantValue()
  fullName: FieldInfo.GetRawConstantValue()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns a literal value associated with the field by a compiler.
  remarks: "This method is provided for designers of managed compilers and code analyzers.  \n  \n This method can be used in both the execution context and the reflection-only context.  \n  \n In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.  \n  \n> [!NOTE]\n>  For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: public virtual object GetRawConstantValue ();
    parameters: []
    return:
      type: System.Object
      description: An <xref href="System.Object"></xref> that contains the literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is `null`.
  overload: System.Reflection.FieldInfo.GetRawConstantValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The Constant table in unmanaged metadata does not contain a constant value for the current field.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: 'The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures.'
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The constant value for the field is not set.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.GetRequiredCustomModifiers
  commentId: M:System.Reflection.FieldInfo.GetRequiredCustomModifiers
  id: GetRequiredCustomModifiers
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: GetRequiredCustomModifiers()
  nameWithType: FieldInfo.GetRequiredCustomModifiers()
  fullName: FieldInfo.GetRequiredCustomModifiers()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets an array of types that identify the required custom modifiers of the property.
  remarks: The <xref:System.Reflection.FieldInfo.GetOptionalCustomModifiers%2A> and <xref:System.Reflection.FieldInfo.GetRequiredCustomModifiers%2A> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref:System.Runtime.CompilerServices.IsBoxed> and related classes in the <xref:System.Runtime.CompilerServices> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.
  syntax:
    content: public virtual Type[] GetRequiredCustomModifiers ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects that identify the required custom modifiers of the current property, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref> or <xref href="System.Runtime.CompilerServices.IsImplicitlyDereferenced"></xref>.
  overload: System.Reflection.FieldInfo.GetRequiredCustomModifiers*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.GetValue(System.Object)
  commentId: M:System.Reflection.FieldInfo.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: GetValue(Object)
  nameWithType: FieldInfo.GetValue(Object)
  fullName: FieldInfo.GetValue(Object)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: When overridden in a derived class, returns the value of a field supported by a given object.
  remarks: "If the field is static, `obj` is ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. Note that the return type of `GetValue` is `Object`. For example, if the field holds a Boolean primitive value, an instance of `Object` with the appropriate Boolean value is returned. Before returning the value, `GetValue` checks to see if the user has access permission.  \n  \n> [!NOTE]\n>  Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example uses the <xref:System.Reflection.FieldInfo.GetValue%2A> method to retrieve the value of a static field. Note that the value of the `obj` argument is `null`.  \n  \n [!code-cpp[getfldval#1](~/samples/snippets/cpp/VS_Snippets_CLR/GetFldVal/CPP/getfldval.cpp#1)]\n [!code-csharp[getfldval#1](~/samples/snippets/csharp/VS_Snippets_CLR/GetFldVal/CS/getfldval.cs#1)]\n [!code-vb[getfldval#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetFldVal/VB/getfldval.vb#1)]  \n  \n The following example retrieves an array of <xref:System.Reflection.FieldInfo> objects that represents the fields of the `FieldsClass` type, and then calls the <xref:System.Reflection.FieldInfo.GetValue%2A> to display the value of each field for the `fieldsInst` object.  \n  \n [!code-cpp[FieldInfo_GetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_GetValue/CPP/fieldinfo_getvalue.cpp#1)]\n [!code-csharp[FieldInfo_GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_GetValue/CS/fieldinfo_getvalue.cs#1)]\n [!code-vb[FieldInfo_GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_GetValue/VB/fieldinfo_getvalue.vb#1)]"
  syntax:
    content: public abstract object GetValue (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object whose field value will be returned.
    return:
      type: System.Object
      description: An object containing the value of the field reflected by this instance.
  overload: System.Reflection.FieldInfo.GetValue*
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch <xref href=\"System.Exception\"></xref> instead.  \n  \n</p>\n    </block>  \n  \n The field is non-static and <code>obj</code> is `null`."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: A field is marked literal, but the field does not have one of the accepted literal types.
  - type: System.FieldAccessException
    commentId: T:System.FieldAccessException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The caller does not have permission to access this field."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The method is neither declared nor inherited by the class of <code>obj</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)
  commentId: M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)
  id: GetValueDirect(System.TypedReference)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: GetValueDirect(TypedReference)
  nameWithType: FieldInfo.GetValueDirect(TypedReference)
  fullName: FieldInfo.GetValueDirect(TypedReference)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the value of a field supported by a given object.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public virtual object GetValueDirect (TypedReference obj);
    parameters:
    - id: obj
      type: System.TypedReference
      description: A <xref href="System.TypedReference"></xref> structure that encapsulates a managed pointer to a location and a runtime representation of the type that might be stored at that location.
    return:
      type: System.Object
      description: An `Object` containing a field value.
  overload: System.Reflection.FieldInfo.GetValueDirect*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The caller requires the Common Language Specification (CLS) alternative, but called this method instead.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Reflection.FieldInfo.GetValue(System.Object)
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsAssembly
  commentId: P:System.Reflection.FieldInfo.IsAssembly
  id: IsAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsAssembly
  nameWithType: FieldInfo.IsAssembly
  fullName: FieldInfo.IsAssembly
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the potential visibility of this field is described by <xref href="System.Reflection.FieldAttributes.Assembly"></xref>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.
  remarks: "The actual visibility of a field is limited by the visibility of its type. The <xref:System.Reflection.FieldInfo.IsAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.  \n  \n The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the only visibility modifier is `internal` (`Friend` in Visual Basic). This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields."
  example:
  - "The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.  \n  \n> [!NOTE]\n>  The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \n  \n [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]\n [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]\n [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]"
  syntax:
    content: public bool IsAssembly { get; }
    return:
      type: System.Boolean
      description: '`true` if the visibility of this field is exactly described by <xref href="System.Reflection.FieldAttributes.Assembly"></xref>; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsAssembly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsFamily
  commentId: P:System.Reflection.FieldInfo.IsFamily
  id: IsFamily
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsFamily
  nameWithType: FieldInfo.IsFamily
  fullName: FieldInfo.IsFamily
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the visibility of this field is described by <xref href="System.Reflection.FieldAttributes.Family"></xref>; that is, the field is visible only within its class and derived classes.
  remarks: The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the only visibility modifier is `protected`. This property is `false` for fields that are `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++); use the <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property to identify such fields.
  example:
  - "The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.  \n  \n> [!NOTE]\n>  The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \n  \n [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]\n [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]\n [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]"
  syntax:
    content: public bool IsFamily { get; }
    return:
      type: System.Boolean
      description: '`true` if access to this field is exactly described by <xref href="System.Reflection.FieldAttributes.Family"></xref>; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsFamily*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsFamilyAndAssembly
  commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly
  id: IsFamilyAndAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsFamilyAndAssembly
  nameWithType: FieldInfo.IsFamilyAndAssembly
  fullName: FieldInfo.IsFamilyAndAssembly
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the visibility of this field is described by <xref href="System.Reflection.FieldAttributes.FamANDAssem"></xref>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.
  remarks: "If a field has <xref:System.Reflection.FieldAttributes.FamANDAssem> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.  \n  \n The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the visibility modifier is `protected private` in C++. Fields with this visibility cannot be defined in Visual Basic or C#."
  example:
  - "The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.  \n  \n> [!NOTE]\n>  The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \n  \n [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]\n [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]\n [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]"
  syntax:
    content: public bool IsFamilyAndAssembly { get; }
    return:
      type: System.Boolean
      description: '`true` if access to this field is exactly described by <xref href="System.Reflection.FieldAttributes.FamANDAssem"></xref>; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsFamilyAndAssembly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsFamilyOrAssembly
  commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly
  id: IsFamilyOrAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsFamilyOrAssembly
  nameWithType: FieldInfo.IsFamilyOrAssembly
  fullName: FieldInfo.IsFamilyOrAssembly
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the potential visibility of this field is described by <xref href="System.Reflection.FieldAttributes.FamORAssem"></xref>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.
  remarks: "If a field has <xref:System.Reflection.FieldAttributes.FamORAssem> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.  \n  \n The actual visibility of a field is limited by the visibility of its type. The <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A> property might be `true` for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.  \n  \n The visibility of a field is exactly described by <xref:System.Reflection.FieldAttributes?displayProperty=fullName> if the visibility modifier is `protected internal` in C# (`Protected Friend` in Visual Basic, `protected public` in C++)."
  example:
  - "The following code example defines fields with varying levels of visibility, and displays the values of their <xref:System.Reflection.FieldInfo.IsAssembly%2A>, <xref:System.Reflection.FieldInfo.IsFamily%2A>, <xref:System.Reflection.FieldInfo.IsFamilyOrAssembly%2A>, and <xref:System.Reflection.FieldInfo.IsFamilyAndAssembly%2A> properties.  \n  \n> [!NOTE]\n>  The Visual Basic and C# languages cannot define fields with <xref:System.Reflection.FieldAttributes?displayProperty=fullName> visibility; that access level appears only in the C++ example.  \n  \n [!code-cpp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CPP/source.cpp#1)]\n [!code-csharp[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/CS/source.cs#1)]\n [!code-vb[Classic FieldInfo.IsAssembly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsAssembly Example/VB/source.vb#1)]"
  syntax:
    content: public bool IsFamilyOrAssembly { get; }
    return:
      type: System.Boolean
      description: '`true` if access to this field is exactly described by <xref href="System.Reflection.FieldAttributes.FamORAssem"></xref>; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsFamilyOrAssembly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsInitOnly
  commentId: P:System.Reflection.FieldInfo.IsInitOnly
  id: IsInitOnly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsInitOnly
  nameWithType: FieldInfo.IsInitOnly
  fullName: FieldInfo.IsInitOnly
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the field can only be set in the body of the constructor.
  remarks: "If the returned value is `true`, the field can only be initialized, and is read-only thereafter.  \n  \n To get the `IsInitOnly` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsInitOnly` property. To access a non-public field, combine <xref:System.Reflection.BindingFlags?displayProperty=fullName> with either or both of <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> in the `GetField` method.  \n  \n The `IsInitOnly` property is set when the <xref:System.Reflection.FieldAttributes?displayProperty=fullName> attribute is set."
  example:
  - "In the following example, two fields are created. The second field is read-only, having no set accessor, and `IsInitOnly` is set to `true`.  \n  \n [!code-cpp[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/CPP/source.cpp#1)]\n [!code-csharp[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/CS/source.cs#1)]\n [!code-vb[Classic FieldInfo.IsInitOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsInitOnly Example/VB/source.vb#1)]  \n  \n This code produces the following output:  \n  \n Reflection.FieldInfo  \n  \n Myfielda - A- modified, IsInitOnly = False  \n  \n Myfieldb - B readonly field, IsInitOnly = True"
  syntax:
    content: public bool IsInitOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the field has the `InitOnly` attribute set; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsInitOnly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsLiteral
  commentId: P:System.Reflection.FieldInfo.IsLiteral
  id: IsLiteral
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsLiteral
  nameWithType: FieldInfo.IsLiteral
  fullName: FieldInfo.IsLiteral
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the value is written at compile time and cannot be changed.
  remarks: The `IsLiteral` property is set when the `FieldAttributes.Literal` attribute is set. If this attribute is set, the field cannot be changed and is constant.
  syntax:
    content: public bool IsLiteral { get; }
    return:
      type: System.Boolean
      description: '`true` if the field has the `Literal` attribute set; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsLiteral*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsNotSerialized
  commentId: P:System.Reflection.FieldInfo.IsNotSerialized
  id: IsNotSerialized
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsNotSerialized
  nameWithType: FieldInfo.IsNotSerialized
  fullName: FieldInfo.IsNotSerialized
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether this field has the `NotSerialized` attribute.
  remarks: The `IsNotSerialized` property returns `true` when the field is marked with the `FieldAttributes.NotSerialized` flag. When this flag is set on a field, it indicates that the field does not have to be serialized when the type is remoted.
  example:
  - "The following example gets the field information of the fields of MyClass, determines if the fields can be serialized, and displays the results.  \n  \n [!code-cpp[FieldInfo_IsNotSerialized#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/CPP/fieldinfo_isnotserialized.cpp#1)]\n [!code-csharp[FieldInfo_IsNotSerialized#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsNotSerialized/CS/fieldinfo_isnotserialized.cs#1)]\n [!code-vb[FieldInfo_IsNotSerialized#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsNotSerialized/VB/fieldinfo_isnotserialized.vb#1)]"
  syntax:
    content: public bool IsNotSerialized { get; }
    return:
      type: System.Boolean
      description: '`true` if the field has the `NotSerialized` attribute set; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsNotSerialized*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsPinvokeImpl
  commentId: P:System.Reflection.FieldInfo.IsPinvokeImpl
  id: IsPinvokeImpl
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsPinvokeImpl
  nameWithType: FieldInfo.IsPinvokeImpl
  fullName: FieldInfo.IsPinvokeImpl
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the corresponding `PinvokeImpl` attribute is set in <xref href="System.Reflection.FieldAttributes"></xref>.
  remarks: ''
  example:
  - "The following example creates a class and displays the name, field and <xref:System.Reflection.FieldInfo.IsPinvokeImpl%2A> property value of the field.  \n  \n [!code-cpp[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/CPP/fieldinfo_ispinvokeimpl.cpp#1)]\n [!code-csharp[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/CS/fieldinfo_ispinvokeimpl.cs#1)]\n [!code-vb[FieldInfo_IsPInvokeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsPInvokeImpl/VB/fieldinfo_ispinvokeimpl.vb#1)]"
  syntax:
    content: public bool IsPinvokeImpl { get; }
    return:
      type: System.Boolean
      description: '`true` if the `PinvokeImpl` attribute is set in <xref href="System.Reflection.FieldAttributes"></xref>; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsPinvokeImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsPrivate
  commentId: P:System.Reflection.FieldInfo.IsPrivate
  id: IsPrivate
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsPrivate
  nameWithType: FieldInfo.IsPrivate
  fullName: FieldInfo.IsPrivate
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the field is private.
  remarks: "Private fields are accessible only from member functions.  \n  \n The `IsPrivate` property is set when the `FieldAttributes.Private` attribute is set.  \n  \n To get the `IsPrivate` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsPrivate` property. To access a non-public field, set the `BindingFlags` to `NonPublic`, and either `Static` or `Instance` in the `GetField` method."
  example:
  - "The following example returns a value indicating whether or not the field of the class is private.  \n  \n [!code-cpp[FieldInfo_IsPrivate#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsPrivate/CPP/fieldinfo_isprivate.cpp#1)]\n [!code-csharp[FieldInfo_IsPrivate#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsPrivate/CS/fieldinfo_isprivate.cs#1)]\n [!code-vb[FieldInfo_IsPrivate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsPrivate/VB/fieldinfo_isprivate.vb#1)]"
  syntax:
    content: public bool IsPrivate { get; }
    return:
      type: System.Boolean
      description: '`true` if the field is private; otherwise; `false`.'
  overload: System.Reflection.FieldInfo.IsPrivate*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsPublic
  commentId: P:System.Reflection.FieldInfo.IsPublic
  id: IsPublic
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsPublic
  nameWithType: FieldInfo.IsPublic
  fullName: FieldInfo.IsPublic
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the field is public.
  remarks: "Public fields are accessible everywhere their corresponding classes are visible.  \n  \n The `IsPublic` property is set when the `FieldAttributes.Public` attribute is set.  \n  \n To get the `IsPublic` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsPublic` property. If the field is other than public, it is protected and cannot be readily accessed. To access a nonpublic field, set the `BindingFlags` to `NonPublic`, specify either `BindingFlags.Instance` or `BindingFlags.Static`, and use this for the `GetField` method."
  example:
  - "The following example returns a value indicating whether or not the field of the class is public or private.  \n  \n [!code-cpp[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/CPP/source.cpp#1)]\n [!code-csharp[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/CS/source.cs#1)]\n [!code-vb[Classic FieldInfo.IsPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsPublic Example/VB/source.vb#1)]"
  syntax:
    content: public bool IsPublic { get; }
    return:
      type: System.Boolean
      description: '`true` if this field is public; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsPublic*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsSecurityCritical
  commentId: P:System.Reflection.FieldInfo.IsSecurityCritical
  id: IsSecurityCritical
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsSecurityCritical
  nameWithType: FieldInfo.IsSecurityCritical
  fullName: FieldInfo.IsSecurityCritical
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value that indicates whether the current field is security-critical or security-safe-critical at the current trust level.
  remarks: "The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."
  syntax:
    content: public virtual bool IsSecurityCritical { get; }
    return:
      type: System.Boolean
      description: '`true` if the current field is security-critical or security-safe-critical at the current trust level; `false` if it is transparent.'
  overload: System.Reflection.FieldInfo.IsSecurityCritical*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsSecuritySafeCritical
  commentId: P:System.Reflection.FieldInfo.IsSecuritySafeCritical
  id: IsSecuritySafeCritical
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsSecuritySafeCritical
  nameWithType: FieldInfo.IsSecuritySafeCritical
  fullName: FieldInfo.IsSecuritySafeCritical
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value that indicates whether the current field is security-safe-critical at the current trust level.
  remarks: "The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."
  syntax:
    content: public virtual bool IsSecuritySafeCritical { get; }
    return:
      type: System.Boolean
      description: '`true` if the current field is security-safe-critical at the current trust level; `false` if it is security-critical or transparent.'
  overload: System.Reflection.FieldInfo.IsSecuritySafeCritical*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsSecurityTransparent
  commentId: P:System.Reflection.FieldInfo.IsSecurityTransparent
  id: IsSecurityTransparent
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsSecurityTransparent
  nameWithType: FieldInfo.IsSecurityTransparent
  fullName: FieldInfo.IsSecurityTransparent
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value that indicates whether the current field is transparent at the current trust level.
  remarks: "The <xref:System.Reflection.FieldInfo.IsSecurityCritical%2A>, <xref:System.Reflection.FieldInfo.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.FieldInfo.IsSecurityTransparent%2A> properties report the transparency level of the field at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types and members, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."
  syntax:
    content: public virtual bool IsSecurityTransparent { get; }
    return:
      type: System.Boolean
      description: '`true` if the field is security-transparent at the current trust level; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsSecurityTransparent*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsSpecialName
  commentId: P:System.Reflection.FieldInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsSpecialName
  nameWithType: FieldInfo.IsSpecialName
  fullName: FieldInfo.IsSpecialName
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the corresponding `SpecialName` attribute is set in the <xref href="System.Reflection.FieldAttributes"></xref> enumerator.
  remarks: Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.
  example:
  - "The following example returns a value indicating whether or not the fields in the class contain a SpecialName attribute.  \n  \n [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]\n [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]\n [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]"
  syntax:
    content: public bool IsSpecialName { get; }
    return:
      type: System.Boolean
      description: '`true` if the `SpecialName` attribute is set in <xref href="System.Reflection.FieldAttributes"></xref>; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsSpecialName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.IsStatic
  commentId: P:System.Reflection.FieldInfo.IsStatic
  id: IsStatic
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: IsStatic
  nameWithType: FieldInfo.IsStatic
  fullName: FieldInfo.IsStatic
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the field is static.
  remarks: "When a field is static, one copy of the field is shared by all instances of the type.  \n  \n The `IsStatic` property is set when the `FieldAttributes.Static` attribute is set.  \n  \n To get the `IsStatic` property, first get the class `Type`. From the `Type`, get the `FieldInfo`. From the `FieldInfo`, get the `IsStatic` property. To access a non-public field, set the `BindingFlags` to `NonPublic` in the `GetField` method and set the accessibility to `Instance` or `Static`."
  example:
  - "The following example determines whether the specified field is static and displays the result.  \n  \n [!code-cpp[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/CPP/source.cpp#1)]\n [!code-csharp[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/CS/source.cs#1)]\n [!code-vb[Classic FieldInfo.IsStatic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.IsStatic Example/VB/source.vb#1)]  \n  \n This code produces the following output:  \n  \n Reflection.FieldInfo  \n  \n Myfielda - A private field; IsStatic - False  \n  \n Myfieldb - B static field; IsStatic - True"
  syntax:
    content: public bool IsStatic { get; }
    return:
      type: System.Boolean
      description: '`true` if this field is static; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.IsStatic*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.MemberType
  commentId: P:System.Reflection.FieldInfo.MemberType
  id: MemberType
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: MemberType
  nameWithType: FieldInfo.MemberType
  fullName: FieldInfo.MemberType
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a <xref href="System.Reflection.MemberTypes"></xref> value indicating that this member is a field.
  remarks: This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects — for example, the array returned by <xref:System.Type.GetMembers%2A> — the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> only when a given member is a field.
  example:
  - "The following example determines whether the specified member is a field and displays the result.  \n  \n [!code-cpp[Classic FieldInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/CPP/source.cpp#1)]\n [!code-csharp[Classic FieldInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/CS/source.cs#1)]\n [!code-vb[Classic FieldInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FieldInfo.MemberType Example/VB/source.vb#1)]  \n  \n This code produces the following output:  \n  \n Reflection.FieldInfo  \n  \n Myfield.field - a private field; MemberType is a Field"
  syntax:
    content: public override System.Reflection.MemberTypes MemberType { get; }
    return:
      type: System.Reflection.MemberTypes
      description: A <xref href="System.Reflection.MemberTypes"></xref> value indicating that this member is a field.
  overload: System.Reflection.FieldInfo.MemberType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)
  commentId: M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)
  id: op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: op_Equality(FieldInfo, FieldInfo)
  nameWithType: FieldInfo.op_Equality(FieldInfo, FieldInfo)
  fullName: FieldInfo.op_Equality(FieldInfo, FieldInfo)
  type: Operator
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Indicates whether two <xref href="System.Reflection.FieldInfo"></xref> objects are equal.
  syntax:
    content: public static bool op_Equality (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
    parameters:
    - id: left
      type: System.Reflection.FieldInfo
      description: The first object to compare.
    - id: right
      type: System.Reflection.FieldInfo
      description: The second object to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.op_Equality*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)
  commentId: M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)
  id: op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: op_Inequality(FieldInfo, FieldInfo)
  nameWithType: FieldInfo.op_Inequality(FieldInfo, FieldInfo)
  fullName: FieldInfo.op_Inequality(FieldInfo, FieldInfo)
  type: Operator
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Indicates whether two <xref href="System.Reflection.FieldInfo"></xref> objects are not equal.
  syntax:
    content: public static bool op_Inequality (System.Reflection.FieldInfo left, System.Reflection.FieldInfo right);
    parameters:
    - id: left
      type: System.Reflection.FieldInfo
      description: The first object to compare.
    - id: right
      type: System.Reflection.FieldInfo
      description: The second object to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'
  overload: System.Reflection.FieldInfo.op_Inequality*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  commentId: M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: SetValue(Object, Object)
  nameWithType: FieldInfo.SetValue(Object, Object)
  fullName: FieldInfo.SetValue(Object, Object)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Sets the value of the field supported by the given object.
  remarks: "This method will assign `value` to the field reflected by this instance on object `obj`. If the field is static, `obj` will be ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. The new value is passed as an `Object`. For example, if the field's type is Boolean, an instance of `Object` with the appropriate Boolean value is passed. Before setting the value, `SetValue` checks to see if the user has access permission. This final method is a convenience method for calling the following `SetValue` method.  \n  \n> [!NOTE]\n>  Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example sets the value of a field, gets and displays the value, modifies the field, and displays the result.  \n  \n [!code-cpp[FieldInfo_SetValue#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_SetValue/CPP/fieldinfo_setvalue.cpp#1)]\n [!code-csharp[FieldInfo_SetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_SetValue/CS/fieldinfo_setvalue.cs#1)]\n [!code-vb[FieldInfo_SetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_SetValue/VB/fieldinfo_setvalue.vb#1)]"
  syntax:
    content: public void SetValue (object obj, object value);
    parameters:
    - id: obj
      type: System.Object
      description: The object whose field value will be set.
    - id: value
      type: System.Object
      description: The value to assign to the field.
  overload: System.Reflection.FieldInfo.SetValue*
  exceptions:
  - type: System.FieldAccessException
    commentId: T:System.FieldAccessException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MemberAccessException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The caller does not have permission to access this field."
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch <xref href=\"System.Exception\"></xref> instead.  \n  \n</p>\n    </block>  \n  \n The <code>obj</code> parameter is `null` and the field is an instance field."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The field does not exist on the object.  \n  \n -or-  \n  \n The <code>value</code> parameter cannot be converted and stored in the field."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)
  commentId: M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)
  id: SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: SetValue(Object, Object, BindingFlags, Binder, CultureInfo)
  nameWithType: FieldInfo.SetValue(Object, Object, BindingFlags, Binder, CultureInfo)
  fullName: FieldInfo.SetValue(Object, Object, BindingFlags, Binder, CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: When overridden in a derived class, sets the value of the field supported by the given object.
  remarks: "This method will assign `value` to the field reflected by this instance on `obj`. If the field is static, `obj` will be ignored. For non-static fields, `obj` should be an instance of a class that inherits or declares the field. The new value is passed as an `Object`. For example, if the field's type is `Boolean`, an instance of `Object` with the appropriate Boolean value is passed. Before setting the value, `SetValue` checks to see if the user has access permission.  \n  \n> [!NOTE]\n>  Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);
    parameters:
    - id: obj
      type: System.Object
      description: The object whose field value will be set.
    - id: value
      type: System.Object
      description: The value to assign to the field.
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: A field of `Binder` that specifies the type of binding that is desired (for example, `Binder.CreateInstance` or `Binder.ExactBinding`).
    - id: binder
      type: System.Reflection.Binder
      description: A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If <code>binder</code> is `null`, then `Binder.DefaultBinding` is used.
    - id: culture
      type: System.Globalization.CultureInfo
      description: The software preferences of a particular culture.
  overload: System.Reflection.FieldInfo.SetValue*
  exceptions:
  - type: System.FieldAccessException
    commentId: T:System.FieldAccessException
    description: The caller does not have permission to access this field.
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: The <code>obj</code> parameter is `null` and the field is an instance field.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The field does not exist on the object.  \n  \n -or-  \n  \n The <code>value</code> parameter cannot be converted and stored in the field."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)
  commentId: M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)
  id: SetValueDirect(System.TypedReference,System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: SetValueDirect(TypedReference, Object)
  nameWithType: FieldInfo.SetValueDirect(TypedReference, Object)
  fullName: FieldInfo.SetValueDirect(TypedReference, Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Sets the value of the field supported by the given object.
  remarks: "> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public virtual void SetValueDirect (TypedReference obj, object value);
    parameters:
    - id: obj
      type: System.TypedReference
      description: A <xref href="System.TypedReference"></xref> structure that encapsulates a managed pointer to a location and a runtime representation of the type that can be stored at that location.
    - id: value
      type: System.Object
      description: The value to assign to the field.
  overload: System.Reflection.FieldInfo.SetValueDirect*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The caller requires the Common Language Specification (CLS) alternative, but called this method instead.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: _FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: FieldInfo._FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: FieldInfo._FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _FieldInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array which receives the IDs corresponding to the names.
  overload: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType
  commentId: M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType
  id: System#Runtime#InteropServices#_FieldInfo#GetType
  isEii: true
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: _FieldInfo.GetType()
  nameWithType: FieldInfo._FieldInfo.GetType()
  fullName: FieldInfo._FieldInfo.GetType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets a <xref href="System.Type"></xref> object representing the <xref href="System.Reflection.FieldInfo"></xref> type.
  syntax:
    content: Type _FieldInfo.GetType ();
    parameters: []
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> object representing the <xref href="System.Reflection.FieldInfo"></xref> type.
  overload: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: _FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: FieldInfo._FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: FieldInfo._FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _FieldInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  overload: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)
  commentId: M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: _FieldInfo.GetTypeInfoCount(UInt32)
  nameWithType: FieldInfo._FieldInfo.GetTypeInfoCount(UInt32)
  fullName: FieldInfo._FieldInfo.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _FieldInfo.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  overload: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  commentId: M:System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  name: _FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: FieldInfo._FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: FieldInfo._FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _FieldInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  overload: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Reflection.TargetException
  parent: System.Reflection
  isExternal: false
  name: TargetException
  nameWithType: TargetException
  fullName: System.Reflection.TargetException
- uid: System.FieldAccessException
  parent: System
  isExternal: false
  name: FieldAccessException
  nameWithType: FieldAccessException
  fullName: System.FieldAccessException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.Reflection.FieldInfo.#ctor
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: FieldInfo()
  nameWithType: FieldInfo.FieldInfo()
  fullName: FieldInfo.FieldInfo()
- uid: System.Reflection.FieldInfo.Attributes
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: Attributes
  nameWithType: FieldInfo.Attributes
  fullName: FieldInfo.Attributes
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  nameWithType: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Reflection.FieldInfo.Equals(System.Object)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: FieldInfo.Equals(Object)
  fullName: FieldInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.FieldInfo.FieldHandle
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: FieldHandle
  nameWithType: FieldInfo.FieldHandle
  fullName: FieldInfo.FieldHandle
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.FieldInfo.FieldType
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: FieldType
  nameWithType: FieldInfo.FieldType
  fullName: FieldInfo.FieldType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetFieldFromHandle(RuntimeFieldHandle)
  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)
  fullName: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)
  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)
  fullName: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.FieldInfo.GetHashCode
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: FieldInfo.GetHashCode()
  fullName: FieldInfo.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.FieldInfo.GetOptionalCustomModifiers
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetOptionalCustomModifiers()
  nameWithType: FieldInfo.GetOptionalCustomModifiers()
  fullName: FieldInfo.GetOptionalCustomModifiers()
- uid: System.Type[]
  parent: System
  isExternal: false
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.FieldInfo.GetRawConstantValue
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetRawConstantValue()
  nameWithType: FieldInfo.GetRawConstantValue()
  fullName: FieldInfo.GetRawConstantValue()
- uid: System.Reflection.FieldInfo.GetRequiredCustomModifiers
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetRequiredCustomModifiers()
  nameWithType: FieldInfo.GetRequiredCustomModifiers()
  fullName: FieldInfo.GetRequiredCustomModifiers()
- uid: System.Reflection.FieldInfo.GetValue(System.Object)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetValue(Object)
  nameWithType: FieldInfo.GetValue(Object)
  fullName: FieldInfo.GetValue(Object)
- uid: System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetValueDirect(TypedReference)
  nameWithType: FieldInfo.GetValueDirect(TypedReference)
  fullName: FieldInfo.GetValueDirect(TypedReference)
- uid: System.TypedReference
  parent: System
  isExternal: false
  name: TypedReference
  nameWithType: TypedReference
  fullName: System.TypedReference
- uid: System.Reflection.FieldInfo.IsAssembly
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsAssembly
  nameWithType: FieldInfo.IsAssembly
  fullName: FieldInfo.IsAssembly
- uid: System.Reflection.FieldInfo.IsFamily
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsFamily
  nameWithType: FieldInfo.IsFamily
  fullName: FieldInfo.IsFamily
- uid: System.Reflection.FieldInfo.IsFamilyAndAssembly
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsFamilyAndAssembly
  nameWithType: FieldInfo.IsFamilyAndAssembly
  fullName: FieldInfo.IsFamilyAndAssembly
- uid: System.Reflection.FieldInfo.IsFamilyOrAssembly
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsFamilyOrAssembly
  nameWithType: FieldInfo.IsFamilyOrAssembly
  fullName: FieldInfo.IsFamilyOrAssembly
- uid: System.Reflection.FieldInfo.IsInitOnly
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsInitOnly
  nameWithType: FieldInfo.IsInitOnly
  fullName: FieldInfo.IsInitOnly
- uid: System.Reflection.FieldInfo.IsLiteral
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsLiteral
  nameWithType: FieldInfo.IsLiteral
  fullName: FieldInfo.IsLiteral
- uid: System.Reflection.FieldInfo.IsNotSerialized
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsNotSerialized
  nameWithType: FieldInfo.IsNotSerialized
  fullName: FieldInfo.IsNotSerialized
- uid: System.Reflection.FieldInfo.IsPinvokeImpl
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsPinvokeImpl
  nameWithType: FieldInfo.IsPinvokeImpl
  fullName: FieldInfo.IsPinvokeImpl
- uid: System.Reflection.FieldInfo.IsPrivate
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsPrivate
  nameWithType: FieldInfo.IsPrivate
  fullName: FieldInfo.IsPrivate
- uid: System.Reflection.FieldInfo.IsPublic
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsPublic
  nameWithType: FieldInfo.IsPublic
  fullName: FieldInfo.IsPublic
- uid: System.Reflection.FieldInfo.IsSecurityCritical
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsSecurityCritical
  nameWithType: FieldInfo.IsSecurityCritical
  fullName: FieldInfo.IsSecurityCritical
- uid: System.Reflection.FieldInfo.IsSecuritySafeCritical
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsSecuritySafeCritical
  nameWithType: FieldInfo.IsSecuritySafeCritical
  fullName: FieldInfo.IsSecuritySafeCritical
- uid: System.Reflection.FieldInfo.IsSecurityTransparent
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsSecurityTransparent
  nameWithType: FieldInfo.IsSecurityTransparent
  fullName: FieldInfo.IsSecurityTransparent
- uid: System.Reflection.FieldInfo.IsSpecialName
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsSpecialName
  nameWithType: FieldInfo.IsSpecialName
  fullName: FieldInfo.IsSpecialName
- uid: System.Reflection.FieldInfo.IsStatic
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsStatic
  nameWithType: FieldInfo.IsStatic
  fullName: FieldInfo.IsStatic
- uid: System.Reflection.FieldInfo.MemberType
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: MemberType
  nameWithType: FieldInfo.MemberType
  fullName: FieldInfo.MemberType
- uid: System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: op_Equality(FieldInfo, FieldInfo)
  nameWithType: FieldInfo.op_Equality(FieldInfo, FieldInfo)
  fullName: FieldInfo.op_Equality(FieldInfo, FieldInfo)
- uid: System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: op_Inequality(FieldInfo, FieldInfo)
  nameWithType: FieldInfo.op_Inequality(FieldInfo, FieldInfo)
  fullName: FieldInfo.op_Inequality(FieldInfo, FieldInfo)
- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: SetValue(Object, Object)
  nameWithType: FieldInfo.SetValue(Object, Object)
  fullName: FieldInfo.SetValue(Object, Object)
- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: SetValue(Object, Object, BindingFlags, Binder, CultureInfo)
  nameWithType: FieldInfo.SetValue(Object, Object, BindingFlags, Binder, CultureInfo)
  fullName: FieldInfo.SetValue(Object, Object, BindingFlags, Binder, CultureInfo)
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: SetValueDirect(TypedReference, Object)
  nameWithType: FieldInfo.SetValueDirect(TypedReference, Object)
  fullName: FieldInfo.SetValueDirect(TypedReference, Object)
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: _FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: FieldInfo._FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: FieldInfo._FieldInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: _FieldInfo.GetType()
  nameWithType: FieldInfo._FieldInfo.GetType()
  fullName: FieldInfo._FieldInfo.GetType()
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: _FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: FieldInfo._FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: FieldInfo._FieldInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: _FieldInfo.GetTypeInfoCount(UInt32)
  nameWithType: FieldInfo._FieldInfo.GetTypeInfoCount(UInt32)
  fullName: FieldInfo._FieldInfo.GetTypeInfoCount(UInt32)
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: _FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: FieldInfo._FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: FieldInfo._FieldInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Reflection.FieldInfo.#ctor*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo.FieldInfo
  fullName: FieldInfo.FieldInfo
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.Attributes*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: Attributes
  nameWithType: FieldInfo.Attributes
  fullName: FieldInfo.Attributes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.Equals*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: Equals
  nameWithType: FieldInfo.Equals
  fullName: FieldInfo.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.FieldHandle*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: FieldHandle
  nameWithType: FieldInfo.FieldHandle
  fullName: FieldInfo.FieldHandle
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.FieldType*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: FieldType
  nameWithType: FieldInfo.FieldType
  fullName: FieldInfo.FieldType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.GetFieldFromHandle*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetFieldFromHandle
  nameWithType: FieldInfo.GetFieldFromHandle
  fullName: FieldInfo.GetFieldFromHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.GetHashCode*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetHashCode
  nameWithType: FieldInfo.GetHashCode
  fullName: FieldInfo.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.GetOptionalCustomModifiers*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetOptionalCustomModifiers
  nameWithType: FieldInfo.GetOptionalCustomModifiers
  fullName: FieldInfo.GetOptionalCustomModifiers
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.GetRawConstantValue*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetRawConstantValue
  nameWithType: FieldInfo.GetRawConstantValue
  fullName: FieldInfo.GetRawConstantValue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.GetRequiredCustomModifiers*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetRequiredCustomModifiers
  nameWithType: FieldInfo.GetRequiredCustomModifiers
  fullName: FieldInfo.GetRequiredCustomModifiers
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.GetValue*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetValue
  nameWithType: FieldInfo.GetValue
  fullName: FieldInfo.GetValue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.GetValueDirect*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: GetValueDirect
  nameWithType: FieldInfo.GetValueDirect
  fullName: FieldInfo.GetValueDirect
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsAssembly*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsAssembly
  nameWithType: FieldInfo.IsAssembly
  fullName: FieldInfo.IsAssembly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsFamily*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsFamily
  nameWithType: FieldInfo.IsFamily
  fullName: FieldInfo.IsFamily
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsFamilyAndAssembly*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsFamilyAndAssembly
  nameWithType: FieldInfo.IsFamilyAndAssembly
  fullName: FieldInfo.IsFamilyAndAssembly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsFamilyOrAssembly*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsFamilyOrAssembly
  nameWithType: FieldInfo.IsFamilyOrAssembly
  fullName: FieldInfo.IsFamilyOrAssembly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsInitOnly*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsInitOnly
  nameWithType: FieldInfo.IsInitOnly
  fullName: FieldInfo.IsInitOnly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsLiteral*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsLiteral
  nameWithType: FieldInfo.IsLiteral
  fullName: FieldInfo.IsLiteral
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsNotSerialized*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsNotSerialized
  nameWithType: FieldInfo.IsNotSerialized
  fullName: FieldInfo.IsNotSerialized
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsPinvokeImpl*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsPinvokeImpl
  nameWithType: FieldInfo.IsPinvokeImpl
  fullName: FieldInfo.IsPinvokeImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsPrivate*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsPrivate
  nameWithType: FieldInfo.IsPrivate
  fullName: FieldInfo.IsPrivate
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsPublic*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsPublic
  nameWithType: FieldInfo.IsPublic
  fullName: FieldInfo.IsPublic
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsSecurityCritical*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsSecurityCritical
  nameWithType: FieldInfo.IsSecurityCritical
  fullName: FieldInfo.IsSecurityCritical
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsSecuritySafeCritical*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsSecuritySafeCritical
  nameWithType: FieldInfo.IsSecuritySafeCritical
  fullName: FieldInfo.IsSecuritySafeCritical
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsSecurityTransparent*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsSecurityTransparent
  nameWithType: FieldInfo.IsSecurityTransparent
  fullName: FieldInfo.IsSecurityTransparent
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsSpecialName*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsSpecialName
  nameWithType: FieldInfo.IsSpecialName
  fullName: FieldInfo.IsSpecialName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.IsStatic*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: IsStatic
  nameWithType: FieldInfo.IsStatic
  fullName: FieldInfo.IsStatic
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.MemberType*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: MemberType
  nameWithType: FieldInfo.MemberType
  fullName: FieldInfo.MemberType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.op_Equality*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: op_Equality
  nameWithType: FieldInfo.op_Equality
  fullName: FieldInfo.op_Equality
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.op_Inequality*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: op_Inequality
  nameWithType: FieldInfo.op_Inequality
  fullName: FieldInfo.op_Inequality
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.SetValue*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: SetValue
  nameWithType: FieldInfo.SetValue
  fullName: FieldInfo.SetValue
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.SetValueDirect*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: SetValueDirect
  nameWithType: FieldInfo.SetValueDirect
  fullName: FieldInfo.SetValueDirect
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetIDsOfNames*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: System.Runtime.InteropServices._FieldInfo.GetIDsOfNames
  nameWithType: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetIDsOfNames
  fullName: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetIDsOfNames
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetType*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: System.Runtime.InteropServices._FieldInfo.GetType
  nameWithType: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetType
  fullName: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfo*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: System.Runtime.InteropServices._FieldInfo.GetTypeInfo
  nameWithType: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetTypeInfo
  fullName: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetTypeInfo
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#GetTypeInfoCount*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount
  nameWithType: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount
  fullName: FieldInfo.System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Reflection.FieldInfo.System#Runtime#InteropServices#_FieldInfo#Invoke*
  parent: System.Reflection.FieldInfo
  isExternal: false
  name: System.Runtime.InteropServices._FieldInfo.Invoke
  nameWithType: FieldInfo.System.Runtime.InteropServices._FieldInfo.Invoke
  fullName: FieldInfo.System.Runtime.InteropServices._FieldInfo.Invoke
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/FieldInfo.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  nameWithType: MemberInfo.CustomAttributes
  fullName: MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  nameWithType: MemberInfo.DeclaringType
  fullName: MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: MemberInfo.GetCustomAttributes(Boolean)
  fullName: MemberInfo.GetCustomAttributes(Boolean)
- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: MemberInfo.GetCustomAttributes(Type, Boolean)
  fullName: MemberInfo.GetCustomAttributes(Type, Boolean)
- uid: System.Reflection.MemberInfo.GetCustomAttributesData
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetCustomAttributesData()
  nameWithType: MemberInfo.GetCustomAttributesData()
  fullName: MemberInfo.GetCustomAttributesData()
- uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: IsDefined(Type, Boolean)
  nameWithType: MemberInfo.IsDefined(Type, Boolean)
  fullName: MemberInfo.IsDefined(Type, Boolean)
- uid: System.Reflection.MemberInfo.MetadataToken
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MetadataToken
  nameWithType: MemberInfo.MetadataToken
  fullName: MemberInfo.MetadataToken
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  nameWithType: MemberInfo.Module
  fullName: MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  nameWithType: MemberInfo.Name
  fullName: MemberInfo.Name
- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: op_Equality(MemberInfo, MemberInfo)
  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)
  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)
- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: op_Inequality(MemberInfo, MemberInfo)
  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)
  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)
- uid: System.Reflection.MemberInfo.ReflectedType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: ReflectedType
  nameWithType: MemberInfo.ReflectedType
  fullName: MemberInfo.ReflectedType
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: ICustomAttributeProvider.IsDefined(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: _MemberInfo.GetType()
  nameWithType: MemberInfo._MemberInfo.GetType()
  fullName: MemberInfo._MemberInfo.GetType()
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: _MemberInfo.GetTypeInfoCount(UInt32)
  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)
  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute(MemberInfo, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)
  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute(MemberInfo, Type, Boolean)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)
  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute<T>(MemberInfo)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)
  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute<T>(MemberInfo, Boolean)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)
  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(MemberInfo)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)
  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(MemberInfo, Boolean)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)
  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(MemberInfo, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)
  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(MemberInfo, Type, Boolean)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)
  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes<T>(MemberInfo)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)
  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes<T>(MemberInfo, Boolean)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)
  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: IsDefined(MemberInfo, Type)
  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)
  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: IsDefined(MemberInfo, Type, Boolean)
  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)
  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)
- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfoExtensions
  isExternal: false
  name: GetMetadataToken(MemberInfo)
  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)
  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)
- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)
  parent: System.Reflection.MemberInfoExtensions
  isExternal: false
  name: HasMetadataToken(MemberInfo)
  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)
  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)
- uid: System.Runtime.InteropServices._FieldInfo
  parent: System.Runtime.InteropServices
  isExternal: false
  name: _FieldInfo
  nameWithType: _FieldInfo
  fullName: System.Runtime.InteropServices._FieldInfo
