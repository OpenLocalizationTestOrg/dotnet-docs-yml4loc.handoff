{"nodes":[{"content":"Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash function.","nodes":[{"pos":[0,136],"content":"Computes a Hash-based Message Authentication Code (HMAC) using the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SHA1\"&gt;&lt;/xref&gt;</ph> hash function.","source":"Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash function."}],"pos":[976,1113],"yaml":true},{"content":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits in length.  \n  \n An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.  \n  \n Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.  \n  \n The SHA-1 (Secure Hash Algorithm, also called SHS, Secure Hash Standard) is a cryptographic hash algorithm published by the United States Government. It produces a 160-bit hash value from an arbitrary length string.  \n  \n <xref:System.Security.Cryptography.HMACSHA1> accepts keys of any size, and produces a hash sequence that is 160 bits in length.","nodes":[{"pos":[0,429],"content":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits in length.","nodes":[{"content":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits in length.","pos":[0,429],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.","pos":[0,190],"source":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code."},{"content":"The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.","pos":[191,390]},{"content":"The output hash is 160 bits in length.","pos":[391,429]}]}]},{"pos":[436,853],"content":"An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","nodes":[{"content":"An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","pos":[0,417],"nodes":[{"content":"An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key.","pos":[0,162]},{"content":"The sender computes the hash value for the original data and sends both the original data and hash value as a single message.","pos":[163,288]},{"content":"The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.","pos":[289,417]}]}]},{"pos":[860,1120],"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","nodes":[{"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.","pos":[0,260],"nodes":[{"content":"Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value.","pos":[0,171]},{"content":"Therefore, if the original and computed hash values match, the message is authenticated.","pos":[172,260]}]}]},{"pos":[1127,1342],"content":"The SHA-1 (Secure Hash Algorithm, also called SHS, Secure Hash Standard) is a cryptographic hash algorithm published by the United States Government. It produces a 160-bit hash value from an arbitrary length string.","nodes":[{"content":"The SHA-1 (Secure Hash Algorithm, also called SHS, Secure Hash Standard) is a cryptographic hash algorithm published by the United States Government. It produces a 160-bit hash value from an arbitrary length string.","pos":[0,215],"nodes":[{"content":"The SHA-1 (Secure Hash Algorithm, also called SHS, Secure Hash Standard) is a cryptographic hash algorithm published by the United States Government.","pos":[0,149]},{"content":"It produces a 160-bit hash value from an arbitrary length string.","pos":[150,215]}]}]},{"pos":[1349,1476],"content":"<xref:System.Security.Cryptography.HMACSHA1> accepts keys of any size, and produces a hash sequence that is 160 bits in length.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> accepts keys of any size, and produces a hash sequence that is 160 bits in length.","pos":[0,127],"source":"<xref:System.Security.Cryptography.HMACSHA1> accepts keys of any size, and produces a hash sequence that is 160 bits in length."}]}],"pos":[1124,2611],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> class with a randomly generated key.","nodes":[{"pos":[0,129],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA1\"&gt;&lt;/xref&gt;</ph> class with a randomly generated key.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> class with a randomly generated key."}],"pos":[6482,6612],"yaml":true},{"content":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits (20 bytes) in length.  \n  \n This constructor uses a 64-byte, randomly generated key.","nodes":[{"pos":[0,440],"content":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits (20 bytes) in length.","nodes":[{"content":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits (20 bytes) in length.","pos":[0,440],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.","pos":[0,190],"source":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code."},{"content":"The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.","pos":[191,390]},{"content":"The output hash is 160 bits (20 bytes) in length.","pos":[391,440]}]}]},{"pos":[447,503],"content":"This constructor uses a 64-byte, randomly generated key.","nodes":[{"content":"This constructor uses a 64-byte, randomly generated key.","pos":[0,56]}]}],"pos":[6623,7131],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> class with the specified key data.","nodes":[{"pos":[0,127],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA1\"&gt;&lt;/xref&gt;</ph> class with the specified key data.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> class with the specified key data."}],"pos":[8684,8812],"yaml":true},{"content":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits (20 bytes) in length.  \n  \n> [!NOTE]\n>  This constructor creates an unmanaged instance of the algorithm by using the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> class.","nodes":[{"pos":[0,440],"content":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits (20 bytes) in length.","nodes":[{"content":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits (20 bytes) in length.","pos":[0,440],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.HMACSHA1&gt;</ph> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code.","pos":[0,190],"source":"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code."},{"content":"The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time.","pos":[191,390]},{"content":"The output hash is 160 bits (20 bytes) in length.","pos":[391,440]}]}]},{"pos":[448,604],"content":"[!NOTE]\n This constructor creates an unmanaged instance of the algorithm by using the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> class.","leadings":["","> "],"nodes":[{"content":"This constructor creates an unmanaged instance of the algorithm by using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SHA1CryptoServiceProvider&gt;</ph> class.","pos":[9,154],"source":" This constructor creates an unmanaged instance of the algorithm by using the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> class."}]}],"pos":[8823,9433],"yaml":true,"extradata":"MT"},{"content":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.","nodes":[{"pos":[0,268],"content":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.","nodes":[{"content":"The secret key for <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA1\"&gt;&lt;/xref&gt;</ph> encryption.","pos":[0,89],"source":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> encryption."},{"content":"The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key.","pos":[90,205]},{"content":"Therefore, the recommended size of the secret key is 64 bytes.","pos":[206,268]}]}],"pos":[9683,9952],"yaml":true},{"content":"The <code>key</code> parameter is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>key</code> parameter is `null`."}],"pos":[10125,10167],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> class with the specified key data and a value that specifies whether to use the managed version of the SHA1 algorithm.","nodes":[{"pos":[0,211],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA1\"&gt;&lt;/xref&gt;</ph> class with the specified key data and a value that specifies whether to use the managed version of the SHA1 algorithm.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> class with the specified key data and a value that specifies whether to use the managed version of the SHA1 algorithm."}],"pos":[11656,11868],"yaml":true},{"content":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long, it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.","nodes":[{"pos":[0,269],"content":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long, it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.","nodes":[{"content":"The secret key for <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.HMACSHA1\"&gt;&lt;/xref&gt;</ph> encryption.","pos":[0,89],"source":"The secret key for <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> encryption."},{"content":"The key can be any length, but if it is more than 64 bytes long, it is hashed (using SHA-1) to derive a 64-byte key.","pos":[90,206]},{"content":"Therefore, the recommended size of the secret key is 64 bytes.","pos":[207,269]}]}],"pos":[12017,12287],"yaml":true},{"content":"`true` to use the managed implementation of the SHA1 algorithm (the <xref href=\"System.Security.Cryptography.SHA1Managed\"></xref> class); `false` to use the unmanaged implementation (the <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref> class).","nodes":[{"pos":[0,270],"content":"<ph id=\"ph1\">`true`</ph> to use the managed implementation of the SHA1 algorithm (the <ph id=\"ph2\">&lt;xref href=\"System.Security.Cryptography.SHA1Managed\"&gt;&lt;/xref&gt;</ph> class); <ph id=\"ph3\">`false`</ph> to use the unmanaged implementation (the <ph id=\"ph4\">&lt;xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"&gt;&lt;/xref&gt;</ph> class).","source":"`true` to use the managed implementation of the SHA1 algorithm (the <xref href=\"System.Security.Cryptography.SHA1Managed\"></xref> class); `false` to use the unmanaged implementation (the <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref> class)."}],"pos":[12358,12631],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.HMACSHA1\n  commentId: T:System.Security.Cryptography.HMACSHA1\n  id: HMACSHA1\n  children:\n  - System.Security.Cryptography.HMACSHA1.#ctor\n  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])\n  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)\n  - System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)\n  - System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMACSHA1.HashFinal\n  - System.Security.Cryptography.HMACSHA1.HashSize\n  - System.Security.Cryptography.HMACSHA1.Initialize\n  - System.Security.Cryptography.HMACSHA1.Key\n  langs:\n  - csharp\n  name: HMACSHA1\n  nameWithType: HMACSHA1\n  fullName: System.Security.Cryptography.HMACSHA1\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\"System.Security.Cryptography.SHA1\"></xref> hash function.\n  remarks: \"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits in length.  \\n  \\n An HMAC can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.  \\n  \\n Any change to the data or the hash value results in a mismatch, because knowledge of the secret key is required to change the message and reproduce the correct hash value. Therefore, if the original and computed hash values match, the message is authenticated.  \\n  \\n The SHA-1 (Secure Hash Algorithm, also called SHS, Secure Hash Standard) is a cryptographic hash algorithm published by the United States Government. It produces a 160-bit hash value from an arbitrary length string.  \\n  \\n <xref:System.Security.Cryptography.HMACSHA1> accepts keys of any size, and produces a hash sequence that is 160 bits in length.\"\n  example:\n  - \"The following code example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACSHA1> object and then how to verify the file.  \\n  \\n [!code-cpp[HMACSHA1#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACSHA1/CPP/hmacsha1.cpp#1)]\\n [!code-csharp[HMACSHA1#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACSHA1/CS/hmacsha1.cs#1)]\\n [!code-vb[HMACSHA1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACSHA1/vb/hmacsha1.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class HMACSHA1 : System.Security.Cryptography.HMAC\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  - System.Security.Cryptography.KeyedHashAlgorithm\n  - System.Security.Cryptography.HMAC\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HMAC.BlockSizeValue\n  - System.Security.Cryptography.HMAC.Create\n  - System.Security.Cryptography.HMAC.Create(System.String)\n  - System.Security.Cryptography.HMAC.HashName\n  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMACSHA1.#ctor\n  commentId: M:System.Security.Cryptography.HMACSHA1.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.HMACSHA1\n  langs:\n  - csharp\n  name: HMACSHA1()\n  nameWithType: HMACSHA1.HMACSHA1()\n  fullName: HMACSHA1.HMACSHA1()\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> class with a randomly generated key.\n  remarks: \"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits (20 bytes) in length.  \\n  \\n This constructor uses a 64-byte, randomly generated key.\"\n  syntax:\n    content: public HMACSHA1 ();\n    parameters: []\n  overload: System.Security.Cryptography.HMACSHA1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])\n  commentId: M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Security.Cryptography.HMACSHA1\n  langs:\n  - csharp\n  name: HMACSHA1(Byte[])\n  nameWithType: HMACSHA1.HMACSHA1(Byte[])\n  fullName: HMACSHA1.HMACSHA1(Byte[])\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> class with the specified key data.\n  remarks: \"<xref:System.Security.Cryptography.HMACSHA1> is a type of keyed hash algorithm that is constructed from the SHA1 hash function and used as an HMAC, or hash-based message authentication code. The HMAC process mixes a secret key with the message data, hashes the result with the hash function, mixes that hash value with the secret key again, and then applies the hash function a second time. The output hash is 160 bits (20 bytes) in length.  \\n  \\n> [!NOTE]\\n>  This constructor creates an unmanaged instance of the algorithm by using the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> class.\"\n  example:\n  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA1> class.\n  syntax:\n    content: public HMACSHA1 (byte[] key);\n    parameters:\n    - id: key\n      type: System.Byte[]\n      description: The secret key for <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.\n  overload: System.Security.Cryptography.HMACSHA1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>key</code> parameter is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)\n  commentId: M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)\n  id: '#ctor(System.Byte[],System.Boolean)'\n  parent: System.Security.Cryptography.HMACSHA1\n  langs:\n  - csharp\n  name: HMACSHA1(Byte[], Boolean)\n  nameWithType: HMACSHA1.HMACSHA1(Byte[], Boolean)\n  fullName: HMACSHA1.HMACSHA1(Byte[], Boolean)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> class with the specified key data and a value that specifies whether to use the managed version of the SHA1 algorithm.\n  syntax:\n    content: public HMACSHA1 (byte[] key, bool useManagedSha1);\n    parameters:\n    - id: key\n      type: System.Byte[]\n      description: The secret key for <xref href=\"System.Security.Cryptography.HMACSHA1\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long, it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes.\n    - id: useManagedSha1\n      type: System.Boolean\n      description: '`true` to use the managed implementation of the SHA1 algorithm (the <xref href=\"System.Security.Cryptography.SHA1Managed\"></xref> class); `false` to use the unmanaged implementation (the <xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref> class).'\n  overload: System.Security.Cryptography.HMACSHA1.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMACSHA1\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HMACSHA1.Dispose(Boolean)\n  fullName: HMACSHA1.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Security.Cryptography.HMACSHA1.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)\n  id: HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMACSHA1\n  langs:\n  - csharp\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: HMACSHA1.HashCore(Byte[], Int32, Int32)\n  fullName: HMACSHA1.HashCore(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void HashCore (byte[] rgb, int ib, int cb);\n    parameters:\n    - id: rgb\n      type: System.Byte[]\n      description: ''\n    - id: ib\n      type: System.Int32\n      description: ''\n    - id: cb\n      type: System.Int32\n      description: ''\n  overload: System.Security.Cryptography.HMACSHA1.HashCore*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.HashFinal\n  commentId: M:System.Security.Cryptography.HMACSHA1.HashFinal\n  id: HashFinal\n  parent: System.Security.Cryptography.HMACSHA1\n  langs:\n  - csharp\n  name: HashFinal()\n  nameWithType: HMACSHA1.HashFinal()\n  fullName: HMACSHA1.HashFinal()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashFinal ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.HMACSHA1.HashFinal*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.HashSize\n  commentId: P:System.Security.Cryptography.HMACSHA1.HashSize\n  id: HashSize\n  parent: System.Security.Cryptography.HMACSHA1\n  langs:\n  - csharp\n  name: HashSize\n  nameWithType: HMACSHA1.HashSize\n  fullName: HMACSHA1.HashSize\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int HashSize { get; }\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Security.Cryptography.HMACSHA1.HashSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.Initialize\n  commentId: M:System.Security.Cryptography.HMACSHA1.Initialize\n  id: Initialize\n  parent: System.Security.Cryptography.HMACSHA1\n  langs:\n  - csharp\n  name: Initialize()\n  nameWithType: HMACSHA1.Initialize()\n  fullName: HMACSHA1.Initialize()\n  type: Method\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void Initialize ();\n    parameters: []\n  overload: System.Security.Cryptography.HMACSHA1.Initialize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.Key\n  commentId: P:System.Security.Cryptography.HMACSHA1.Key\n  id: Key\n  parent: System.Security.Cryptography.HMACSHA1\n  langs:\n  - csharp\n  name: Key\n  nameWithType: HMACSHA1.Key\n  fullName: HMACSHA1.Key\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] Key { get; set; }\n    return:\n      type: System.Byte[]\n      description: ''\n  overload: System.Security.Cryptography.HMACSHA1.Key*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\nreferences:\n- uid: System.Security.Cryptography.HMAC\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HMAC\n  nameWithType: HMAC\n  fullName: System.Security.Cryptography.HMAC\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Cryptography.HMACSHA1.#ctor\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: HMACSHA1()\n  nameWithType: HMACSHA1.HMACSHA1()\n  fullName: HMACSHA1.HMACSHA1()\n- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: HMACSHA1(Byte[])\n  nameWithType: HMACSHA1.HMACSHA1(Byte[])\n  fullName: HMACSHA1.HMACSHA1(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: HMACSHA1(Byte[], Boolean)\n  nameWithType: HMACSHA1.HMACSHA1(Byte[], Boolean)\n  fullName: HMACSHA1.HMACSHA1(Byte[], Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HMACSHA1.Dispose(Boolean)\n  fullName: HMACSHA1.Dispose(Boolean)\n- uid: System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: HashCore(Byte[], Int32, Int32)\n  nameWithType: HMACSHA1.HashCore(Byte[], Int32, Int32)\n  fullName: HMACSHA1.HashCore(Byte[], Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.HMACSHA1.HashFinal\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: HashFinal()\n  nameWithType: HMACSHA1.HashFinal()\n  fullName: HMACSHA1.HashFinal()\n- uid: System.Security.Cryptography.HMACSHA1.HashSize\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: HashSize\n  nameWithType: HMACSHA1.HashSize\n  fullName: HMACSHA1.HashSize\n- uid: System.Security.Cryptography.HMACSHA1.Initialize\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: Initialize()\n  nameWithType: HMACSHA1.Initialize()\n  fullName: HMACSHA1.Initialize()\n- uid: System.Security.Cryptography.HMACSHA1.Key\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: Key\n  nameWithType: HMACSHA1.Key\n  fullName: HMACSHA1.Key\n- uid: System.Security.Cryptography.HMACSHA1.#ctor*\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: HMACSHA1\n  nameWithType: HMACSHA1.HMACSHA1\n  fullName: HMACSHA1.HMACSHA1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.Dispose*\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: Dispose\n  nameWithType: HMACSHA1.Dispose\n  fullName: HMACSHA1.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.HashCore*\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: HashCore\n  nameWithType: HMACSHA1.HashCore\n  fullName: HMACSHA1.HashCore\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.HashFinal*\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: HashFinal\n  nameWithType: HMACSHA1.HashFinal\n  fullName: HMACSHA1.HashFinal\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.HashSize*\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: HashSize\n  nameWithType: HMACSHA1.HashSize\n  fullName: HMACSHA1.HashSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.Initialize*\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: Initialize\n  nameWithType: HMACSHA1.Initialize\n  fullName: HMACSHA1.Initialize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Security.Cryptography.HMACSHA1.Key*\n  parent: System.Security.Cryptography.HMACSHA1\n  isExternal: false\n  name: Key\n  nameWithType: HMACSHA1.Key\n  fullName: HMACSHA1.Key\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n  fullName: HashAlgorithm.CanReuseTransform\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n  fullName: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: HashAlgorithm.Clear()\n  fullName: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  fullName: HashAlgorithm.ComputeHash(Byte[])\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n  fullName: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: ComputeHash(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.HMAC.Create\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Create()\n  nameWithType: HMAC.Create()\n  fullName: HMAC.Create()\n- uid: System.Security.Cryptography.HMAC.Create(System.String)\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: Create(String)\n  nameWithType: HMAC.Create(String)\n  fullName: HMAC.Create(String)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: HashAlgorithm.Dispose()\n  fullName: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Hash\n  nameWithType: HashAlgorithm.Hash\n  fullName: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n  fullName: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashValue\n  nameWithType: HashAlgorithm.HashValue\n  fullName: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n  fullName: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n  fullName: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: State\n  nameWithType: HashAlgorithm.State\n  fullName: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue\n  parent: System.Security.Cryptography.KeyedHashAlgorithm\n  isExternal: false\n  name: KeyValue\n  nameWithType: KeyedHashAlgorithm.KeyValue\n  fullName: KeyedHashAlgorithm.KeyValue\n- uid: System.Security.Cryptography.HMAC.BlockSizeValue\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: HMAC.BlockSizeValue\n  fullName: HMAC.BlockSizeValue\n- uid: System.Security.Cryptography.HMAC.HashName\n  parent: System.Security.Cryptography.HMAC\n  isExternal: false\n  name: HashName\n  nameWithType: HMAC.HashName\n  fullName: HMAC.HashName\n"}