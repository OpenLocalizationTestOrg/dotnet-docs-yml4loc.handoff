### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DES
  commentId: T:System.Security.Cryptography.DES
  id: DES
  children:
  - System.Security.Cryptography.DES.#ctor
  - System.Security.Cryptography.DES.Create
  - System.Security.Cryptography.DES.Create(System.String)
  - System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  - System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  - System.Security.Cryptography.DES.Key
  langs:
  - csharp
  name: DES
  nameWithType: DES
  fullName: System.Security.Cryptography.DES
  type: Class
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Represents the base class for the Data Encryption Standard (DES) algorithm from which all <xref href="System.Security.Cryptography.DES"></xref> implementations must derive.
  remarks: "This algorithm supports a key length of 64 bits.  \n  \n> [!NOTE]\n>  A newer asymmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> class instead of the <xref:System.Security.Cryptography.DES> class. Use <xref:System.Security.Cryptography.DES> only for compatibility with legacy applications and data."
  example:
  - "The following code example uses <xref:System.Security.Cryptography.DESCryptoServiceProvider> (an implementation of <xref:System.Security.Cryptography.DES>) to encrypt a string to an in-memory buffer. It then decrypts and displays the round-tripped string.  \n  \n [!code-csharp[TripleDESCryptoServiceProvider#1](~/samples/snippets/csharp/VS_Snippets_CLR/tripledescryptoserviceprovider/cs/program.cs#1)]\n [!code-vb[TripleDESCryptoServiceProvider#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/tripledescryptoserviceprovider/vb/program.vb#1)]  \n  \n Decryption can be handled in the same way; use <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor%2A> instead of <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor%2A>. The same key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) used to encrypt the file must be used to decrypt it."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DES : System.Security.Cryptography.SymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.SymmetricAlgorithm
  derivedClasses:
  - System.Security.Cryptography.DESCryptoServiceProvider
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DES.#ctor
  commentId: M:System.Security.Cryptography.DES.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: DES()
  nameWithType: DES.DES()
  fullName: DES.DES()
  type: Constructor
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.DES"></xref> class.
  remarks: "You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \n  \n This method initializes the protected fields of the <xref:System.Security.Cryptography.SymmetricAlgorithm> class to the default values shown in the following table.  \n  \n|Field|Default Value|  \n|-----------|-------------------|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|64|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|64|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|"
  syntax:
    content: protected DES ();
    parameters: []
  overload: System.Security.Cryptography.DES.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DES.Create
  commentId: M:System.Security.Cryptography.DES.Create
  id: Create
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Create()
  nameWithType: DES.Create()
  fullName: DES.Create()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Creates an instance of a cryptographic object to perform the Data Encryption Standard (<xref href="System.Security.Cryptography.DES"></xref>) algorithm.
  remarks: Creates an instance of the <xref:System.Security.Cryptography.DES> object that can be used for encrypting and decrypting data.
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  \n  \n [!code-cpp[Cryptography.DES.Create.File#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Create.File/CPP/fileexample.cpp#1)]\n [!code-csharp[Cryptography.DES.Create.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Create.File/CS/fileexample.cs#1)]\n [!code-vb[Cryptography.DES.Create.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Create.File/VB/fileexample.vb#1)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  \n  \n [!code-cpp[Cryptography.DES.Create.Memory#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Create.Memory/CPP/memoryexample.cpp#1)]\n [!code-csharp[Cryptography.DES.Create.Memory#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Create.Memory/CS/memoryexample.cs#1)]\n [!code-vb[Cryptography.DES.Create.Memory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Create.Memory/VB/memoryexample.vb#1)]"
  syntax:
    content: public static System.Security.Cryptography.DES Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.DES
      description: A cryptographic object.
  overload: System.Security.Cryptography.DES.Create*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DES.Create(System.String)
  commentId: M:System.Security.Cryptography.DES.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Create(String)
  nameWithType: DES.Create(String)
  fullName: DES.Create(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Creates an instance of a cryptographic object to perform the specified implementation of the Data Encryption Standard (<xref href="System.Security.Cryptography.DES"></xref>) algorithm.
  remarks: ''
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  \n  \n [!code-cpp[Cryptography.DES.Createstring.File#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Createstring.File/CPP/fileexample.cpp#1)]\n [!code-csharp[Cryptography.DES.Createstring.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Createstring.File/CS/fileexample.cs#1)]\n [!code-vb[Cryptography.DES.Createstring.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Createstring.File/VB/fileexample.vb#1)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  \n  \n [!code-cpp[Cryptography.DES.Createstring.Memory#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.DES.Createstring.Memory/CPP/memoryexample.cpp#1)]\n [!code-csharp[Cryptography.DES.Createstring.Memory#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.DES.Createstring.Memory/CS/memoryexample.cs#1)]\n [!code-vb[Cryptography.DES.Createstring.Memory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.DES.Createstring.Memory/VB/memoryexample.vb#1)]"
  syntax:
    content: public static System.Security.Cryptography.DES Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: The name of the specific implementation of <xref href="System.Security.Cryptography.DES"></xref> to use.
    return:
      type: System.Security.Cryptography.DES
      description: A cryptographic object.
  overload: System.Security.Cryptography.DES.Create*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  commentId: M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  id: IsSemiWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: IsSemiWeakKey(Byte[])
  nameWithType: DES.IsSemiWeakKey(Byte[])
  fullName: DES.IsSemiWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Determines whether the specified key is semi-weak.
  remarks: "Semi-weak keys are pairs of keys that result in ciphers that are easy to break. If text is encrypted with a semi-weak key, encrypting the resulting cipher with the partner of that semi-weak key returns the original text. There are six known semi-weak key pairs for the Data Encryption Standard (<xref:System.Security.Cryptography.DES>) algorithm; this method checks for those semi-weak keys.  \n  \n Attempting to set a semi-weak key results in a <xref:System.Security.Cryptography.CryptographicException>. When <xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A> is called to create a random key, a semi-weak key will never be returned."
  syntax:
    content: public static bool IsSemiWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: The secret key to test for semi-weakness.
    return:
      type: System.Boolean
      description: '`true` if the key is semi-weak; otherwise, `false`.'
  overload: System.Security.Cryptography.DES.IsSemiWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The size of the <code>rgbKey</code> parameter is not valid.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  commentId: M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  id: IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: IsWeakKey(Byte[])
  nameWithType: DES.IsWeakKey(Byte[])
  fullName: DES.IsWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Determines whether the specified key is weak.
  remarks: "Weak keys are keys that result in ciphers that are easy to break. If text is encrypted with a weak key, encrypting the resulting cipher again with the same weak key returns the original text. There are four known weak keys for the Data Encryption Standard (<xref:System.Security.Cryptography.DES>) algorithm; this method checks for those weak keys.  \n  \n Attempting to set a weak key results in a <xref:System.Security.Cryptography.CryptographicException>. When <xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A> is called to create a random key, a weak key will never be returned."
  syntax:
    content: public static bool IsWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: The secret key to test for weakness.
    return:
      type: System.Boolean
      description: '`true` if the key is weak; otherwise, `false`.'
  overload: System.Security.Cryptography.DES.IsWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The size of the <code>rgbKey</code> parameter is not valid.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.DES.Key
  commentId: P:System.Security.Cryptography.DES.Key
  id: Key
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Key
  nameWithType: DES.Key
  fullName: DES.Key
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Gets or sets the secret key for the Data Encryption Standard (<xref href="System.Security.Cryptography.DES"></xref>) algorithm.
  remarks: "If this property is `null` when it is used, <xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A> is called to create a new random value.  \n  \n The length of the key must be equal to <xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>.  \n  \n This algorithm supports a key length of 64 bits."
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: The secret key for the <xref href="System.Security.Cryptography.DES"></xref> algorithm.
  overload: System.Security.Cryptography.DES.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An attempt was made to set the key to `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An attempt was made to set a key whose length is not equal to <xref href="System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue"></xref>.
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: An attempt was made to set a weak key (see <xref href="System.Security.Cryptography.DES.IsWeakKey(System.Byte[])"></xref>) or a semi-weak key (see <xref href="System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])"></xref>).
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: SymmetricAlgorithm
  nameWithType: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.Cryptography.DES.#ctor
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: DES()
  nameWithType: DES.DES()
  fullName: DES.DES()
- uid: System.Security.Cryptography.DES.Create
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create()
  nameWithType: DES.Create()
  fullName: DES.Create()
- uid: System.Security.Cryptography.DES
  parent: System.Security.Cryptography
  isExternal: false
  name: DES
  nameWithType: DES
  fullName: System.Security.Cryptography.DES
- uid: System.Security.Cryptography.DES.Create(System.String)
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create(String)
  nameWithType: DES.Create(String)
  fullName: DES.Create(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsSemiWeakKey(Byte[])
  nameWithType: DES.IsSemiWeakKey(Byte[])
  fullName: DES.IsSemiWeakKey(Byte[])
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsWeakKey(Byte[])
  nameWithType: DES.IsWeakKey(Byte[])
  fullName: DES.IsWeakKey(Byte[])
- uid: System.Security.Cryptography.DES.Key
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Key
  nameWithType: DES.Key
  fullName: DES.Key
- uid: System.Security.Cryptography.DES.#ctor*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: DES
  nameWithType: DES.DES
  fullName: DES.DES
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
- uid: System.Security.Cryptography.DES.Create*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create
  nameWithType: DES.Create
  fullName: DES.Create
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
- uid: System.Security.Cryptography.DES.IsSemiWeakKey*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsSemiWeakKey
  nameWithType: DES.IsSemiWeakKey
  fullName: DES.IsSemiWeakKey
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
- uid: System.Security.Cryptography.DES.IsWeakKey*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsWeakKey
  nameWithType: DES.IsWeakKey
  fullName: DES.IsWeakKey
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
- uid: System.Security.Cryptography.DES.Key*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Key
  nameWithType: DES.Key
  fullName: DES.Key
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/DES.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSize
  nameWithType: SymmetricAlgorithm.BlockSize
  fullName: SymmetricAlgorithm.BlockSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: BlockSizeValue
  nameWithType: SymmetricAlgorithm.BlockSizeValue
  fullName: SymmetricAlgorithm.BlockSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: SymmetricAlgorithm.Clear()
  fullName: SymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor()
  nameWithType: SymmetricAlgorithm.CreateDecryptor()
  fullName: SymmetricAlgorithm.CreateDecryptor()
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateDecryptor(Byte[], Byte[])
  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])
  fullName: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor()
  nameWithType: SymmetricAlgorithm.CreateEncryptor()
  fullName: SymmetricAlgorithm.CreateEncryptor()
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: CreateEncryptor(Byte[], Byte[])
  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])
  fullName: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: SymmetricAlgorithm.Dispose()
  fullName: SymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SymmetricAlgorithm.Dispose(Boolean)
  fullName: SymmetricAlgorithm.Dispose(Boolean)
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSize
  nameWithType: SymmetricAlgorithm.FeedbackSize
  fullName: SymmetricAlgorithm.FeedbackSize
- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: FeedbackSizeValue
  nameWithType: SymmetricAlgorithm.FeedbackSizeValue
  fullName: SymmetricAlgorithm.FeedbackSizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateIV()
  nameWithType: SymmetricAlgorithm.GenerateIV()
  fullName: SymmetricAlgorithm.GenerateIV()
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: GenerateKey()
  nameWithType: SymmetricAlgorithm.GenerateKey()
  fullName: SymmetricAlgorithm.GenerateKey()
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IV
  nameWithType: SymmetricAlgorithm.IV
  fullName: SymmetricAlgorithm.IV
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: IVValue
  nameWithType: SymmetricAlgorithm.IVValue
  fullName: SymmetricAlgorithm.IVValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: SymmetricAlgorithm.KeySize
  fullName: SymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: SymmetricAlgorithm.KeySizeValue
  fullName: SymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: KeyValue
  nameWithType: SymmetricAlgorithm.KeyValue
  fullName: SymmetricAlgorithm.KeyValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizes
  nameWithType: SymmetricAlgorithm.LegalBlockSizes
  fullName: SymmetricAlgorithm.LegalBlockSizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalBlockSizesValue
  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue
  fullName: SymmetricAlgorithm.LegalBlockSizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: SymmetricAlgorithm.LegalKeySizes
  fullName: SymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: SymmetricAlgorithm.LegalKeySizesValue
  fullName: SymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Mode
  nameWithType: SymmetricAlgorithm.Mode
  fullName: SymmetricAlgorithm.Mode
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ModeValue
  nameWithType: SymmetricAlgorithm.ModeValue
  fullName: SymmetricAlgorithm.ModeValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: Padding
  nameWithType: SymmetricAlgorithm.Padding
  fullName: SymmetricAlgorithm.Padding
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: PaddingValue
  nameWithType: SymmetricAlgorithm.PaddingValue
  fullName: SymmetricAlgorithm.PaddingValue
- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: ValidKeySize(Int32)
  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)
  fullName: SymmetricAlgorithm.ValidKeySize(Int32)
