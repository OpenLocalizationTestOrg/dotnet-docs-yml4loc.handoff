{"nodes":[{"content":"The exception that is thrown as a wrapper around the exception thrown by the class initializer. This class cannot be inherited.","nodes":[{"pos":[0,127],"content":"The exception that is thrown as a wrapper around the exception thrown by the class initializer. This class cannot be inherited.","nodes":[{"content":"The exception that is thrown as a wrapper around the exception thrown by the class initializer. This class cannot be inherited.","pos":[0,127],"nodes":[{"content":"The exception that is thrown as a wrapper around the exception thrown by the class initializer.","pos":[0,95]},{"content":"This class cannot be inherited.","pos":[96,127]}]}]}],"pos":[700,828],"yaml":true},{"content":"When a class initializer fails to initialize a type, a <xref:System.TypeInitializationException> is created and passed a reference to the exception thrown by the type's class initializer. The <xref:System.Exception.InnerException%2A> property of <xref:System.TypeInitializationException> holds the underlying exception.  \n  \n Typically, the <xref:System.TypeInitializationException> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.  Most commonly, the <xref:System.TypeInitializationException> is thrown in response to some change in the executing environment of the application. Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a `try`/`catch` block. Instead, the cause of the exception should be investigated and eliminated.  \n  \n <xref:System.TypeInitializationException> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.  \n  \n For a list of initial property values for an instance of <xref:System.TypeInitializationException>, see the <xref:System.TypeInitializationException.%23ctor%2A> constructors.  \n  \n The following sections describe some of the situations in which a <xref:System.TypeInitializationException> exception is thrown.  \n  \n [Static constructors and the TypeInitializationException exception](#Static)   \n [Regular expression match timeout values](#Timeout)   \n [Calendars and cultural data](#Calendars)  \n  \n<a name=\"Static\"></a>   \n## Static constructors and the TypeInitializationException exception  \n A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type. Static constructors can be explicitly defined by a developer. If a static  constructor is not explicitly defined, compilers automatically create one to initialize any `static` (in C#) or `Shared` (in Visual Basic) members of the type.  For more information on static constructors, see [Static Constructors](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).  \n  \n Most commonly, a <xref:System.TypeInitializationException> exception is thrown when a static constructor is unable to instantiate a type.  The <xref:System.Exception.InnerException%2A> property indicates why the static constructor was unable to instantiate the type. Some of the more common causes of a <xref:System.TypeInitializationException> exception are:  \n  \n An unhandled exception in a static constructor  \n If an exception is thrown in a static constructor, that exception is wrapped in a <xref:System.TypeInitializationException> exception, and the type cannot be instantiated.  \n  \n What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code. A static constructor exists in a type if:  \n  \n-   It has been explicitly defined as a member of a type.  \n  \n-   The type has  `static` (in C#) or `Shared` (in Visual Basic) variables that are declared and initialized in a single statement. In this case, the language compiler generates a static constructor for the type. You can inspect it by using a utility such as [IL Disassembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md). For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:  \n  \n    ```  \n  \n    .method private specialname rtspecialname static   \n            void  .cctor() cil managed  \n    {  \n      // Code size       12 (0xc)  \n      .maxstack  8  \n      IL_0000:  ldc.i4.3  \n      IL_0001:  newobj     instance void TestClass::.ctor(int32)  \n      IL_0006:  stsfld     class TestClass Example::test  \n      IL_000b:  ret  \n    } // end of method Example::.cctor  \n  \n    ```  \n  \n The following example shows a <xref:System.TypeInitializationException> exception thrown by a compiler-generated static constructor. The `Example` class includes a `static` (in C#) or `Shared` (in Visual Basic) field of type `TestClass` that is instantiated by passing a value of 3 to its class constructor.  That value, however, is illegal; only values of 0 or 1 are permitted. As a result, the `TestClass` class constructor throws an <xref:System.ArgumentOutOfRangeException>. Since this exception is not handled, it is wrapped in a <xref:System.TypeInitializationException> exception.  \n  \n [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]\n [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  \n  \n Note that the exception message displays information about the <xref:System.Exception.InnerException%2A> property.  \n  \n A missing assembly or data file  \n A common cause of a <xref:System.TypeInitializationException> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment. For example, you can compile the following example to an assembly named Missing1a.dll by using the this command-line syntax:  \n  \n```csharp  \ncsc /t:library Missing1a.cs  \n```  \n  \n```vb  \nvbc Missing1a.vb /t:library  \n```  \n  \n [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]\n [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  \n  \n You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:  \n  \n```csharp  \ncsc Missing1.cs /r:Missing1a.dll  \n```  \n  \n```vb  \nvbc Missing1.vb /r:Missing1a.dll  \n```  \n  \n However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <xref:System.TypeInitializationException> exception and displays the output shown in the example.  Note that the exception message includes information about the <xref:System.Exception.InnerException%2A> property. In this case,  the inner exception is a <xref:System.IO.FileNotFoundException> that is thrown because the runtime cannot find the dependent assembly.  \n  \n [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]\n [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  \n  \n> [!NOTE]\n>  In this example, a <xref:System.TypeInitializationException> exception was thrown because an assembly could not be loaded. The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.  \n  \n<a name=\"Timeout\"></a>   \n## Regular expression match timeout values  \n You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis. The timeout is defined by a specifying a <xref:System.TimeSpan> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property to the  <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method. The time interval must be a valid <xref:System.TimeSpan> object that is greater than zero and less than approximately 24 days. If these requirements are not met, the attempt to set the default timeout value throws an <xref:System.ArgumentOutOfRangeException>, which in turn is wrapped in a <xref:System.TypeInitializationException> exception.  \n  \n The following example shows the <xref:System.TypeInitializationException> that is thrown when the value assigned to the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property is invalid. To eliminate the exception, set the\"REGEX_DEFAULT_MATCH_TIMEOUT\" property to a  <xref:System.TimeSpan> value that is greater than zero and less than approximately 24 days.  \n  \n [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]\n [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  \n  \n<a name=\"Calendars\"></a>   \n## Calendars and cultural data  \n If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <xref:System.Globalization.CultureInfo> object that corresponds to that calendar, it throws a <xref:System.TypeInitializationException> exception. This exception can be thrown by the following calendar class constructors:  \n  \n-   The default constructor of the <xref:System.Globalization.JapaneseCalendar> class.  \n  \n-   The default constructor of the <xref:System.Globalization.KoreanCalendar> class.  \n  \n-   The default constructor of the <xref:System.Globalization.TaiwanCalendar> class.  \n  \n Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.","nodes":[{"pos":[0,319],"content":"When a class initializer fails to initialize a type, a <xref:System.TypeInitializationException> is created and passed a reference to the exception thrown by the type's class initializer. The <xref:System.Exception.InnerException%2A> property of <xref:System.TypeInitializationException> holds the underlying exception.","nodes":[{"content":"When a class initializer fails to initialize a type, a <xref:System.TypeInitializationException> is created and passed a reference to the exception thrown by the type's class initializer. The <xref:System.Exception.InnerException%2A> property of <xref:System.TypeInitializationException> holds the underlying exception.","pos":[0,319],"nodes":[{"content":"When a class initializer fails to initialize a type, a <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> is created and passed a reference to the exception thrown by the type's class initializer.","pos":[0,187],"source":"When a class initializer fails to initialize a type, a <xref:System.TypeInitializationException> is created and passed a reference to the exception thrown by the type's class initializer."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of <ph id=\"ph2\">&lt;xref:System.TypeInitializationException&gt;</ph> holds the underlying exception.","pos":[188,319],"source":" The <xref:System.Exception.InnerException%2A> property of <xref:System.TypeInitializationException> holds the underlying exception."}]}]},{"pos":[326,869],"content":"Typically, the <xref:System.TypeInitializationException> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.  Most commonly, the <xref:System.TypeInitializationException> is thrown in response to some change in the executing environment of the application. Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a `try`/`catch` block. Instead, the cause of the exception should be investigated and eliminated.","nodes":[{"content":"Typically, the <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.","pos":[0,192],"source":"Typically, the <xref:System.TypeInitializationException> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing."},{"content":"Most commonly, the <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> is thrown in response to some change in the executing environment of the application.","pos":[194,340],"source":"  Most commonly, the <xref:System.TypeInitializationException> is thrown in response to some change in the executing environment of the application."},{"content":"Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a <ph id=\"ph1\">`try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`catch`</ph> block.","pos":[341,468],"source":" Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a `try`/`catch` block."},{"content":"Instead, the cause of the exception should be investigated and eliminated.","pos":[469,543]}]},{"pos":[876,992],"content":"<xref:System.TypeInitializationException> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.","pos":[0,116],"source":"<xref:System.TypeInitializationException> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534."}]},{"pos":[999,1173],"content":"For a list of initial property values for an instance of <xref:System.TypeInitializationException>, see the <xref:System.TypeInitializationException.%23ctor%2A> constructors.","nodes":[{"content":"For a list of initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph>, see the <ph id=\"ph2\">&lt;xref:System.TypeInitializationException.%23ctor%2A&gt;</ph> constructors.","pos":[0,174],"source":"For a list of initial property values for an instance of <xref:System.TypeInitializationException>, see the <xref:System.TypeInitializationException.%23ctor%2A> constructors."}]},{"pos":[1180,1308],"content":"The following sections describe some of the situations in which a <xref:System.TypeInitializationException> exception is thrown.","nodes":[{"content":"The following sections describe some of the situations in which a <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> exception is thrown.","pos":[0,128],"source":"The following sections describe some of the situations in which a <xref:System.TypeInitializationException> exception is thrown."}]},{"pos":[1315,1493],"content":"[Static constructors and the TypeInitializationException exception](#Static)   \n [Regular expression match timeout values](#Timeout)   \n [Calendars and cultural data](#Calendars)","nodes":[{"content":"<bpt id=\"p1\">[</bpt>Static constructors and the TypeInitializationException exception<ept id=\"p1\">](#Static)</ept><ph id=\"ph1\"> </ph>","pos":[0,77],"source":"[Static constructors and the TypeInitializationException exception](#Static) "},{"content":"<bpt id=\"p1\"> [</bpt>Regular expression match timeout values<ept id=\"p1\">](#Timeout)</ept><ph id=\"ph1\"> </ph>","pos":[80,133],"source":" [Regular expression match timeout values](#Timeout) "},{"content":"<bpt id=\"p1\"> [</bpt>Calendars and cultural data<ept id=\"p1\">](#Calendars)</ept>","pos":[136,178],"source":" [Calendars and cultural data](#Calendars)"}]},{"pos":[1527,1592],"content":"Static constructors and the TypeInitializationException exception","linkify":"Static constructors and the TypeInitializationException exception","nodes":[{"content":"Static constructors and the TypeInitializationException exception","pos":[0,65]}]},{"pos":[1596,2097],"content":"A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type. Static constructors can be explicitly defined by a developer. If a static  constructor is not explicitly defined, compilers automatically create one to initialize any `static` (in C#) or `Shared` (in Visual Basic) members of the type.  For more information on static constructors, see [Static Constructors](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).","nodes":[{"content":"A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type.","pos":[0,117]},{"content":"Static constructors can be explicitly defined by a developer.","pos":[118,179]},{"content":"If a static  constructor is not explicitly defined, compilers automatically create one to initialize any <ph id=\"ph1\">`static`</ph> (in C#) or <ph id=\"ph2\">`Shared`</ph> (in Visual Basic) members of the type.","pos":[180,352],"source":" If a static  constructor is not explicitly defined, compilers automatically create one to initialize any `static` (in C#) or `Shared` (in Visual Basic) members of the type."},{"content":"For more information on static constructors, see <bpt id=\"p1\">[</bpt>Static Constructors<ept id=\"p1\">](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.","pos":[354,501],"source":"  For more information on static constructors, see [Static Constructors](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)."}]},{"pos":[2104,2463],"content":"Most commonly, a <xref:System.TypeInitializationException> exception is thrown when a static constructor is unable to instantiate a type.  The <xref:System.Exception.InnerException%2A> property indicates why the static constructor was unable to instantiate the type. Some of the more common causes of a <xref:System.TypeInitializationException> exception are:","nodes":[{"content":"Most commonly, a <xref:System.TypeInitializationException> exception is thrown when a static constructor is unable to instantiate a type.  The <xref:System.Exception.InnerException%2A> property indicates why the static constructor was unable to instantiate the type. Some of the more common causes of a <xref:System.TypeInitializationException> exception are:","pos":[0,359],"nodes":[{"content":"Most commonly, a <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> exception is thrown when a static constructor is unable to instantiate a type.","pos":[0,137],"source":"Most commonly, a <xref:System.TypeInitializationException> exception is thrown when a static constructor is unable to instantiate a type."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property indicates why the static constructor was unable to instantiate the type.","pos":[139,266],"source":"  The <xref:System.Exception.InnerException%2A> property indicates why the static constructor was unable to instantiate the type."},{"content":"Some of the more common causes of a <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> exception are:","pos":[267,359],"source":" Some of the more common causes of a <xref:System.TypeInitializationException> exception are:"}]}]},{"pos":[2470,2691],"content":"An unhandled exception in a static constructor  \n If an exception is thrown in a static constructor, that exception is wrapped in a <xref:System.TypeInitializationException> exception, and the type cannot be instantiated.","nodes":[{"content":"An unhandled exception in a static constructor","pos":[0,46]},{"content":"If an exception is thrown in a static constructor, that exception is wrapped in a <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> exception, and the type cannot be instantiated.","pos":[50,221],"source":"If an exception is thrown in a static constructor, that exception is wrapped in a <xref:System.TypeInitializationException> exception, and the type cannot be instantiated."}]},{"pos":[2698,2875],"content":"What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code. A static constructor exists in a type if:","nodes":[{"content":"What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code. A static constructor exists in a type if:","pos":[0,177],"nodes":[{"content":"What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code.","pos":[0,135]},{"content":"A static constructor exists in a type if:","pos":[136,177]}]}]},{"pos":[2885,2938],"content":"It has been explicitly defined as a member of a type.","nodes":[{"content":"It has been explicitly defined as a member of a type.","pos":[0,53]}]},{"pos":[2948,3420],"content":"The type has  `static` (in C#) or `Shared` (in Visual Basic) variables that are declared and initialized in a single statement. In this case, the language compiler generates a static constructor for the type. You can inspect it by using a utility such as [IL Disassembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md). For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:","nodes":[{"content":"The type has  <ph id=\"ph1\">`static`</ph> (in C#) or <ph id=\"ph2\">`Shared`</ph> (in Visual Basic) variables that are declared and initialized in a single statement.","pos":[0,127],"source":"The type has  `static` (in C#) or `Shared` (in Visual Basic) variables that are declared and initialized in a single statement."},{"content":"In this case, the language compiler generates a static constructor for the type.","pos":[128,208]},{"content":"You can inspect it by using a utility such as <bpt id=\"p1\">[</bpt>IL Disassembler<ept id=\"p1\">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.","pos":[209,327],"source":" You can inspect it by using a utility such as [IL Disassembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md)."},{"content":"For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:","pos":[328,472]}]},{"pos":[3834,4421],"content":"The following example shows a <xref:System.TypeInitializationException> exception thrown by a compiler-generated static constructor. The `Example` class includes a `static` (in C#) or `Shared` (in Visual Basic) field of type `TestClass` that is instantiated by passing a value of 3 to its class constructor.  That value, however, is illegal; only values of 0 or 1 are permitted. As a result, the `TestClass` class constructor throws an <xref:System.ArgumentOutOfRangeException>. Since this exception is not handled, it is wrapped in a <xref:System.TypeInitializationException> exception.","nodes":[{"content":"The following example shows a <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> exception thrown by a compiler-generated static constructor.","pos":[0,132],"source":"The following example shows a <xref:System.TypeInitializationException> exception thrown by a compiler-generated static constructor."},{"content":"The <ph id=\"ph1\">`Example`</ph> class includes a <ph id=\"ph2\">`static`</ph> (in C#) or <ph id=\"ph3\">`Shared`</ph> (in Visual Basic) field of type <ph id=\"ph4\">`TestClass`</ph> that is instantiated by passing a value of 3 to its class constructor.","pos":[133,307],"source":" The `Example` class includes a `static` (in C#) or `Shared` (in Visual Basic) field of type `TestClass` that is instantiated by passing a value of 3 to its class constructor."},{"content":"That value, however, is illegal; only values of 0 or 1 are permitted.","pos":[309,378]},{"content":"As a result, the <ph id=\"ph1\">`TestClass`</ph> class constructor throws an <ph id=\"ph2\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.","pos":[379,478],"source":" As a result, the `TestClass` class constructor throws an <xref:System.ArgumentOutOfRangeException>."},{"content":"Since this exception is not handled, it is wrapped in a <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> exception.","pos":[479,587],"source":" Since this exception is not handled, it is wrapped in a <xref:System.TypeInitializationException> exception."}]},{"pos":[4428,4751],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.TypeInitializationException#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.TypeInitializationException#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]\n[!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]"},{"pos":[4758,4872],"content":"Note that the exception message displays information about the <xref:System.Exception.InnerException%2A> property.","nodes":[{"content":"Note that the exception message displays information about the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.","pos":[0,114],"source":"Note that the exception message displays information about the <xref:System.Exception.InnerException%2A> property."}]},{"pos":[4879,5255],"content":"A missing assembly or data file  \nA common cause of a <xref:System.TypeInitializationException> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment. For example, you can compile the following example to an assembly named Missing1a.dll by using the this command-line syntax:","leadings":[""," "],"nodes":[{"content":"A missing assembly or data file","pos":[0,31]},{"content":"A common cause of a <xref:System.TypeInitializationException> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment. For example, you can compile the following example to an assembly named Missing1a.dll by using the this command-line syntax:","pos":[34,375],"nodes":[{"content":"A common cause of a <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment.","pos":[0,216],"source":"A common cause of a <xref:System.TypeInitializationException> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment."},{"content":"For example, you can compile the following example to an assembly named Missing1a.dll by using the this command-line syntax:","pos":[217,341]}]}]},{"pos":[5360,5673],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.TypeInitializationException#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.TypeInitializationException#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]\n [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]"},{"pos":[5680,5801],"content":"You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:","nodes":[{"content":"You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:","pos":[0,121]}]},{"pos":[5916,6366],"content":"However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <xref:System.TypeInitializationException> exception and displays the output shown in the example.  Note that the exception message includes information about the <xref:System.Exception.InnerException%2A> property. In this case,  the inner exception is a <xref:System.IO.FileNotFoundException> that is thrown because the runtime cannot find the dependent assembly.","nodes":[{"content":"However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <xref:System.TypeInitializationException> exception and displays the output shown in the example.  Note that the exception message includes information about the <xref:System.Exception.InnerException%2A> property. In this case,  the inner exception is a <xref:System.IO.FileNotFoundException> that is thrown because the runtime cannot find the dependent assembly.","pos":[0,450],"nodes":[{"content":"However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> exception and displays the output shown in the example.","pos":[0,184],"source":"However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <xref:System.TypeInitializationException> exception and displays the output shown in the example."},{"content":"Note that the exception message includes information about the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.","pos":[186,300],"source":"  Note that the exception message includes information about the <xref:System.Exception.InnerException%2A> property."},{"content":"In this case,  the inner exception is a <ph id=\"ph1\">&lt;xref:System.IO.FileNotFoundException&gt;</ph> that is thrown because the runtime cannot find the dependent assembly.","pos":[301,450],"source":" In this case,  the inner exception is a <xref:System.IO.FileNotFoundException> that is thrown because the runtime cannot find the dependent assembly."}]}]},{"pos":[6373,6684],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.TypeInitializationException#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.TypeInitializationException#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]\n [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]"},{"pos":[6692,7014],"content":"[!NOTE]\n In this example, a <xref:System.TypeInitializationException> exception was thrown because an assembly could not be loaded. The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.","leadings":["","> "],"nodes":[{"content":" In this example, a <xref:System.TypeInitializationException> exception was thrown because an assembly could not be loaded. The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.","pos":[8,320],"nodes":[{"content":"In this example, a <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> exception was thrown because an assembly could not be loaded.","pos":[1,123],"source":" In this example, a <xref:System.TypeInitializationException> exception was thrown because an assembly could not be loaded."},{"content":"The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.","pos":[124,312]}]}]},{"pos":[7049,7088],"content":"Regular expression match timeout values","linkify":"Regular expression match timeout values","nodes":[{"content":"Regular expression match timeout values","pos":[0,39]}]},{"pos":[7092,7752],"content":"You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis. The timeout is defined by a specifying a <xref:System.TimeSpan> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property to the  <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method. The time interval must be a valid <xref:System.TimeSpan> object that is greater than zero and less than approximately 24 days. If these requirements are not met, the attempt to set the default timeout value throws an <xref:System.ArgumentOutOfRangeException>, which in turn is wrapped in a <xref:System.TypeInitializationException> exception.","nodes":[{"content":"You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis. The timeout is defined by a specifying a <xref:System.TimeSpan> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property to the  <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method. The time interval must be a valid <xref:System.TimeSpan> object that is greater than zero and less than approximately 24 days. If these requirements are not met, the attempt to set the default timeout value throws an <xref:System.ArgumentOutOfRangeException>, which in turn is wrapped in a <xref:System.TypeInitializationException> exception.","pos":[0,660],"nodes":[{"content":"You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis.","pos":[0,124]},{"content":"The timeout is defined by a specifying a <ph id=\"ph1\">&lt;xref:System.TimeSpan&gt;</ph> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property to the  <ph id=\"ph2\">&lt;xref:System.AppDomain.SetData%2A?displayProperty=fullName&gt;</ph> method.","pos":[125,317],"source":" The timeout is defined by a specifying a <xref:System.TimeSpan> value for the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property to the  <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method."},{"content":"The time interval must be a valid <ph id=\"ph1\">&lt;xref:System.TimeSpan&gt;</ph> object that is greater than zero and less than approximately 24 days.","pos":[318,444],"source":" The time interval must be a valid <xref:System.TimeSpan> object that is greater than zero and less than approximately 24 days."},{"content":"If these requirements are not met, the attempt to set the default timeout value throws an <ph id=\"ph1\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, which in turn is wrapped in a <ph id=\"ph2\">&lt;xref:System.TypeInitializationException&gt;</ph> exception.","pos":[445,660],"source":" If these requirements are not met, the attempt to set the default timeout value throws an <xref:System.ArgumentOutOfRangeException>, which in turn is wrapped in a <xref:System.TypeInitializationException> exception."}]}]},{"pos":[7759,8101],"content":"The following example shows the <xref:System.TypeInitializationException> that is thrown when the value assigned to the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property is invalid. To eliminate the exception, set the\"REGEX_DEFAULT_MATCH_TIMEOUT\" property to a  <xref:System.TimeSpan> value that is greater than zero and less than approximately 24 days.","nodes":[{"content":"The following example shows the <xref:System.TypeInitializationException> that is thrown when the value assigned to the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property is invalid. To eliminate the exception, set the\"REGEX_DEFAULT_MATCH_TIMEOUT\" property to a  <xref:System.TimeSpan> value that is greater than zero and less than approximately 24 days.","pos":[0,342],"nodes":[{"content":"The following example shows the <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph> that is thrown when the value assigned to the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property is invalid.","pos":[0,170],"source":"The following example shows the <xref:System.TypeInitializationException> that is thrown when the value assigned to the \"REGEX_DEFAULT_MATCH_TIMEOUT\" property is invalid."},{"content":"To eliminate the exception, set the\"REGEX_DEFAULT_MATCH_TIMEOUT\" property to a  <ph id=\"ph1\">&lt;xref:System.TimeSpan&gt;</ph> value that is greater than zero and less than approximately 24 days.","pos":[171,342],"source":" To eliminate the exception, set the\"REGEX_DEFAULT_MATCH_TIMEOUT\" property to a  <xref:System.TimeSpan> value that is greater than zero and less than approximately 24 days."}]}]},{"pos":[8108,8415],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.TypeInitializationException#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.TypeInitializationException#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]\n [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]"},{"pos":[8452,8479],"content":"Calendars and cultural data","linkify":"Calendars and cultural data","nodes":[{"content":"Calendars and cultural data","pos":[0,27]}]},{"pos":[8483,8791],"content":"If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <xref:System.Globalization.CultureInfo> object that corresponds to that calendar, it throws a <xref:System.TypeInitializationException> exception. This exception can be thrown by the following calendar class constructors:","nodes":[{"content":"If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <xref:System.Globalization.CultureInfo> object that corresponds to that calendar, it throws a <xref:System.TypeInitializationException> exception. This exception can be thrown by the following calendar class constructors:","pos":[0,308],"nodes":[{"content":"If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that corresponds to that calendar, it throws a <ph id=\"ph2\">&lt;xref:System.TypeInitializationException&gt;</ph> exception.","pos":[0,233],"source":"If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <xref:System.Globalization.CultureInfo> object that corresponds to that calendar, it throws a <xref:System.TypeInitializationException> exception."},{"content":"This exception can be thrown by the following calendar class constructors:","pos":[234,308]}]}]},{"pos":[8801,8883],"content":"The default constructor of the <xref:System.Globalization.JapaneseCalendar> class.","nodes":[{"content":"The default constructor of the <ph id=\"ph1\">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> class.","pos":[0,82],"source":"The default constructor of the <xref:System.Globalization.JapaneseCalendar> class."}]},{"pos":[8893,8973],"content":"The default constructor of the <xref:System.Globalization.KoreanCalendar> class.","nodes":[{"content":"The default constructor of the <ph id=\"ph1\">&lt;xref:System.Globalization.KoreanCalendar&gt;</ph> class.","pos":[0,80],"source":"The default constructor of the <xref:System.Globalization.KoreanCalendar> class."}]},{"pos":[8983,9063],"content":"The default constructor of the <xref:System.Globalization.TaiwanCalendar> class.","nodes":[{"content":"The default constructor of the <ph id=\"ph1\">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> class.","pos":[0,80],"source":"The default constructor of the <xref:System.Globalization.TaiwanCalendar> class."}]},{"pos":[9070,9198],"content":"Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.","nodes":[{"content":"Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.","pos":[0,128]}]}],"pos":[839,10154],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.TypeInitializationException\"></xref> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.","nodes":[{"pos":[0,233],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.TypeInitializationException\"&gt;&lt;/xref&gt;</ph> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.","source":"Initializes a new instance of the <xref href=\"System.TypeInitializationException\"></xref> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception."}],"pos":[12777,13011],"yaml":true},{"content":"An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.TypeInitializationException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \n|<xref:System.Exception.Message%2A>|The localized error message string.|  \n|<xref:System.TypeInitializationException.TypeName%2A>|The name of the type.|","nodes":[{"pos":[0,462],"content":"An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.","nodes":[{"content":"An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.","pos":[0,179],"source":"An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic) if the <ph id=\"ph3\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.","pos":[180,462],"source":" The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor."}]},{"pos":[469,584],"content":"The following table shows the initial property values for an instance of <xref:System.TypeInitializationException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.TypeInitializationException&gt;</ph>.","pos":[0,115],"source":"The following table shows the initial property values for an instance of <xref:System.TypeInitializationException>."}]},{"pos":[591,599],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[600,605],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[641,682],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[683,713],"content":"The inner exception reference.","nodes":[{"content":"The inner exception reference.","pos":[0,30]}]},{"pos":[718,752],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[753,788],"content":"The localized error message string.","nodes":[{"content":"The localized error message string.","pos":[0,35]}]},{"pos":[793,846],"content":"<xref:System.TypeInitializationException.TypeName%2A>","nodes":[]},{"pos":[847,868],"content":"The name of the type.","nodes":[{"content":"The name of the type.","pos":[0,21]}]}],"pos":[13022,13902],"yaml":true,"extradata":"MT"},{"content":"The fully qualified name of the type that fails to initialize.","nodes":[{"pos":[0,62],"content":"The fully qualified name of the type that fails to initialize.","nodes":[{"content":"The fully qualified name of the type that fails to initialize.","pos":[0,62]}]}],"pos":[14093,14156],"yaml":true},{"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"pos":[0,240],"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"content":"The exception that is the cause of the current exception.","pos":[0,57]},{"content":"If the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">innerException</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic), the current exception is raised in a <ph id=\"ph3\">`catch`</ph> block that handles the inner exception.","pos":[58,240],"source":" If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception."}]}],"pos":[14229,14470],"yaml":true},{"content":"Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the type name and additional exception information.","nodes":[{"pos":[0,140],"content":"Sets the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object with the type name and additional exception information.","source":"Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the type name and additional exception information."}],"pos":[16456,16597],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> that holds the serialized object data about the exception being thrown.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown."}],"pos":[16925,17069],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination.","nodes":[{"pos":[0,140],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> that contains contextual information about the source or destination.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination."}],"pos":[17164,17305],"yaml":true},{"content":"Gets the fully qualified name of the type that fails to initialize.","nodes":[{"pos":[0,67],"content":"Gets the fully qualified name of the type that fails to initialize.","nodes":[{"content":"Gets the fully qualified name of the type that fails to initialize.","pos":[0,67]}]}],"pos":[18600,18668],"yaml":true},{"content":"The fully qualified name of the type that fails to initialize.","nodes":[{"pos":[0,62],"content":"The fully qualified name of the type that fails to initialize.","nodes":[{"content":"The fully qualified name of the type that fails to initialize.","pos":[0,62]}]}],"pos":[18780,18843],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.TypeInitializationException\n  commentId: T:System.TypeInitializationException\n  id: TypeInitializationException\n  children:\n  - System.TypeInitializationException.#ctor(System.String,System.Exception)\n  - System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.TypeInitializationException.TypeName\n  langs:\n  - csharp\n  name: TypeInitializationException\n  nameWithType: TypeInitializationException\n  fullName: System.TypeInitializationException\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: The exception that is thrown as a wrapper around the exception thrown by the class initializer. This class cannot be inherited.\n  remarks: \"When a class initializer fails to initialize a type, a <xref:System.TypeInitializationException> is created and passed a reference to the exception thrown by the type's class initializer. The <xref:System.Exception.InnerException%2A> property of <xref:System.TypeInitializationException> holds the underlying exception.  \\n  \\n Typically, the <xref:System.TypeInitializationException> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.  Most commonly, the <xref:System.TypeInitializationException> is thrown in response to some change in the executing environment of the application. Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a `try`/`catch` block. Instead, the cause of the exception should be investigated and eliminated.  \\n  \\n <xref:System.TypeInitializationException> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.  \\n  \\n For a list of initial property values for an instance of <xref:System.TypeInitializationException>, see the <xref:System.TypeInitializationException.%23ctor%2A> constructors.  \\n  \\n The following sections describe some of the situations in which a <xref:System.TypeInitializationException> exception is thrown.  \\n  \\n [Static constructors and the TypeInitializationException exception](#Static)   \\n [Regular expression match timeout values](#Timeout)   \\n [Calendars and cultural data](#Calendars)  \\n  \\n<a name=\\\"Static\\\"></a>   \\n## Static constructors and the TypeInitializationException exception  \\n A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type. Static constructors can be explicitly defined by a developer. If a static  constructor is not explicitly defined, compilers automatically create one to initialize any `static` (in C#) or `Shared` (in Visual Basic) members of the type.  For more information on static constructors, see [Static Constructors](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).  \\n  \\n Most commonly, a <xref:System.TypeInitializationException> exception is thrown when a static constructor is unable to instantiate a type.  The <xref:System.Exception.InnerException%2A> property indicates why the static constructor was unable to instantiate the type. Some of the more common causes of a <xref:System.TypeInitializationException> exception are:  \\n  \\n An unhandled exception in a static constructor  \\n If an exception is thrown in a static constructor, that exception is wrapped in a <xref:System.TypeInitializationException> exception, and the type cannot be instantiated.  \\n  \\n What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code. A static constructor exists in a type if:  \\n  \\n-   It has been explicitly defined as a member of a type.  \\n  \\n-   The type has  `static` (in C#) or `Shared` (in Visual Basic) variables that are declared and initialized in a single statement. In this case, the language compiler generates a static constructor for the type. You can inspect it by using a utility such as [IL Disassembler](~/docs/framework/tools/ildasm-exe-il-disassembler.md). For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:  \\n  \\n    ```  \\n  \\n    .method private specialname rtspecialname static   \\n            void  .cctor() cil managed  \\n    {  \\n      // Code size       12 (0xc)  \\n      .maxstack  8  \\n      IL_0000:  ldc.i4.3  \\n      IL_0001:  newobj     instance void TestClass::.ctor(int32)  \\n      IL_0006:  stsfld     class TestClass Example::test  \\n      IL_000b:  ret  \\n    } // end of method Example::.cctor  \\n  \\n    ```  \\n  \\n The following example shows a <xref:System.TypeInitializationException> exception thrown by a compiler-generated static constructor. The `Example` class includes a `static` (in C#) or `Shared` (in Visual Basic) field of type `TestClass` that is instantiated by passing a value of 3 to its class constructor.  That value, however, is illegal; only values of 0 or 1 are permitted. As a result, the `TestClass` class constructor throws an <xref:System.ArgumentOutOfRangeException>. Since this exception is not handled, it is wrapped in a <xref:System.TypeInitializationException> exception.  \\n  \\n [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]\\n [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  \\n  \\n Note that the exception message displays information about the <xref:System.Exception.InnerException%2A> property.  \\n  \\n A missing assembly or data file  \\n A common cause of a <xref:System.TypeInitializationException> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment. For example, you can compile the following example to an assembly named Missing1a.dll by using the this command-line syntax:  \\n  \\n```csharp  \\ncsc /t:library Missing1a.cs  \\n```  \\n  \\n```vb  \\nvbc Missing1a.vb /t:library  \\n```  \\n  \\n [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]\\n [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  \\n  \\n You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:  \\n  \\n```csharp  \\ncsc Missing1.cs /r:Missing1a.dll  \\n```  \\n  \\n```vb  \\nvbc Missing1.vb /r:Missing1a.dll  \\n```  \\n  \\n However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <xref:System.TypeInitializationException> exception and displays the output shown in the example.  Note that the exception message includes information about the <xref:System.Exception.InnerException%2A> property. In this case,  the inner exception is a <xref:System.IO.FileNotFoundException> that is thrown because the runtime cannot find the dependent assembly.  \\n  \\n [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]\\n [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  \\n  \\n> [!NOTE]\\n>  In this example, a <xref:System.TypeInitializationException> exception was thrown because an assembly could not be loaded. The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.  \\n  \\n<a name=\\\"Timeout\\\"></a>   \\n## Regular expression match timeout values  \\n You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis. The timeout is defined by a specifying a <xref:System.TimeSpan> value for the \\\"REGEX_DEFAULT_MATCH_TIMEOUT\\\" property to the  <xref:System.AppDomain.SetData%2A?displayProperty=fullName> method. The time interval must be a valid <xref:System.TimeSpan> object that is greater than zero and less than approximately 24 days. If these requirements are not met, the attempt to set the default timeout value throws an <xref:System.ArgumentOutOfRangeException>, which in turn is wrapped in a <xref:System.TypeInitializationException> exception.  \\n  \\n The following example shows the <xref:System.TypeInitializationException> that is thrown when the value assigned to the \\\"REGEX_DEFAULT_MATCH_TIMEOUT\\\" property is invalid. To eliminate the exception, set the\\\"REGEX_DEFAULT_MATCH_TIMEOUT\\\" property to a  <xref:System.TimeSpan> value that is greater than zero and less than approximately 24 days.  \\n  \\n [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]\\n [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  \\n  \\n<a name=\\\"Calendars\\\"></a>   \\n## Calendars and cultural data  \\n If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <xref:System.Globalization.CultureInfo> object that corresponds to that calendar, it throws a <xref:System.TypeInitializationException> exception. This exception can be thrown by the following calendar class constructors:  \\n  \\n-   The default constructor of the <xref:System.Globalization.JapaneseCalendar> class.  \\n  \\n-   The default constructor of the <xref:System.Globalization.KoreanCalendar> class.  \\n  \\n-   The default constructor of the <xref:System.Globalization.TaiwanCalendar> class.  \\n  \\n Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class TypeInitializationException : SystemException\n  inheritance:\n  - System.Object\n  - System.Exception\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeInitializationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TypeInitializationException.#ctor(System.String,System.Exception)\n  commentId: M:System.TypeInitializationException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.TypeInitializationException\n  langs:\n  - csharp\n  name: TypeInitializationException(String, Exception)\n  nameWithType: TypeInitializationException.TypeInitializationException(String, Exception)\n  fullName: TypeInitializationException.TypeInitializationException(String, Exception)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.TypeInitializationException\"></xref> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.\n  remarks: \"An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.TypeInitializationException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \\n|<xref:System.Exception.Message%2A>|The localized error message string.|  \\n|<xref:System.TypeInitializationException.TypeName%2A>|The name of the type.|\"\n  syntax:\n    content: public TypeInitializationException (string fullTypeName, Exception innerException);\n    parameters:\n    - id: fullTypeName\n      type: System.String\n      description: The fully qualified name of the type that fails to initialize.\n    - id: innerException\n      type: System.Exception\n      description: The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.\n  overload: System.TypeInitializationException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeInitializationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.TypeInitializationException\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: TypeInitializationException.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: TypeInitializationException.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the type name and additional exception information.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination.\n  overload: System.TypeInitializationException.GetObjectData*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeInitializationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.TypeInitializationException.TypeName\n  commentId: P:System.TypeInitializationException.TypeName\n  id: TypeName\n  parent: System.TypeInitializationException\n  langs:\n  - csharp\n  name: TypeName\n  nameWithType: TypeInitializationException.TypeName\n  fullName: TypeInitializationException.TypeName\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets the fully qualified name of the type that fails to initialize.\n  syntax:\n    content: public string TypeName { get; }\n    return:\n      type: System.String\n      description: The fully qualified name of the type that fails to initialize.\n  overload: System.TypeInitializationException.TypeName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeInitializationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.TypeInitializationException.#ctor(System.String,System.Exception)\n  parent: System.TypeInitializationException\n  isExternal: false\n  name: TypeInitializationException(String, Exception)\n  nameWithType: TypeInitializationException.TypeInitializationException(String, Exception)\n  fullName: TypeInitializationException.TypeInitializationException(String, Exception)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.TypeInitializationException\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: TypeInitializationException.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: TypeInitializationException.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.TypeInitializationException.TypeName\n  parent: System.TypeInitializationException\n  isExternal: false\n  name: TypeName\n  nameWithType: TypeInitializationException.TypeName\n  fullName: TypeInitializationException.TypeName\n- uid: System.TypeInitializationException.#ctor*\n  parent: System.TypeInitializationException\n  isExternal: false\n  name: TypeInitializationException\n  nameWithType: TypeInitializationException.TypeInitializationException\n  fullName: TypeInitializationException.TypeInitializationException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeInitializationException.xml\n- uid: System.TypeInitializationException.GetObjectData*\n  parent: System.TypeInitializationException\n  isExternal: false\n  name: GetObjectData\n  nameWithType: TypeInitializationException.GetObjectData\n  fullName: TypeInitializationException.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeInitializationException.xml\n- uid: System.TypeInitializationException.TypeName*\n  parent: System.TypeInitializationException\n  isExternal: false\n  name: TypeName\n  nameWithType: TypeInitializationException.TypeName\n  fullName: TypeInitializationException.TypeName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/TypeInitializationException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n"}