### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Debug
  commentId: T:System.Diagnostics.Debug
  id: Debug
  children:
  - System.Diagnostics.Debug.Assert(System.Boolean)
  - System.Diagnostics.Debug.Assert(System.Boolean,System.String)
  - System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)
  - System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])
  - System.Diagnostics.Debug.AutoFlush
  - System.Diagnostics.Debug.Close
  - System.Diagnostics.Debug.Fail(System.String)
  - System.Diagnostics.Debug.Fail(System.String,System.String)
  - System.Diagnostics.Debug.Flush
  - System.Diagnostics.Debug.Indent
  - System.Diagnostics.Debug.IndentLevel
  - System.Diagnostics.Debug.IndentSize
  - System.Diagnostics.Debug.Listeners
  - System.Diagnostics.Debug.Print(System.String)
  - System.Diagnostics.Debug.Print(System.String,System.Object[])
  - System.Diagnostics.Debug.Unindent
  - System.Diagnostics.Debug.Write(System.String,System.String)
  - System.Diagnostics.Debug.Write(System.Object,System.String)
  - System.Diagnostics.Debug.Write(System.Object)
  - System.Diagnostics.Debug.Write(System.String)
  - System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)
  - System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)
  - System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)
  - System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)
  - System.Diagnostics.Debug.WriteLine(System.Object)
  - System.Diagnostics.Debug.WriteLine(System.String)
  - System.Diagnostics.Debug.WriteLine(System.Object,System.String)
  - System.Diagnostics.Debug.WriteLine(System.String,System.Object[])
  - System.Diagnostics.Debug.WriteLine(System.String,System.String)
  - System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)
  - System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)
  - System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)
  - System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)
  langs:
  - csharp
  name: Debug
  nameWithType: Debug
  fullName: System.Diagnostics.Debug
  type: Class
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Provides a set of methods and properties that help debug your code.
  remarks: "If you use methods in the <xref:System.Diagnostics.Debug> class to print debugging information and check your logic with assertions, you can make your code more robust without impacting the performance and code size of your shipping product.  \n  \n This class provides methods to display an <xref:System.Diagnostics.Debug.Assert%2A> dialog box, and to emit an assertion that will always fail. This class provides write methods in the following variations: <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A> and <xref:System.Diagnostics.Debug.WriteLineIf%2A>.  \n  \n The <xref:System.Diagnostics.BooleanSwitch> and <xref:System.Diagnostics.TraceSwitch> classes provide means to dynamically control the tracing output. You can modify the values of these switches without recompiling your application. For information on using the configuration file to set a switch, see the <xref:System.Diagnostics.Switch> class and the [Trace Switches](~/docs/framework/debug-trace-profile/trace-switches.md) topic.  \n  \n You can customize the tracing output's target by adding <xref:System.Diagnostics.TraceListener> instances to or removing instances from the <xref:System.Diagnostics.Debug.Listeners%2A> collection. The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both. By default, the <xref:System.Diagnostics.DefaultTraceListener> class emits trace output.  \n  \n> [!NOTE]\n>  Adding a trace listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available. The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic. It may be useful to place calls to the <xref:System.Diagnostics.Debug> methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners.  \n  \n You can modify the level of indentation using the <xref:System.Diagnostics.Debug.Indent%2A> method or the <xref:System.Diagnostics.Debug.IndentLevel%2A> property. To modify the indent spacing, use the <xref:System.Diagnostics.Debug.IndentSize%2A> property. You can specify whether to automatically flush the output buffer after each write by setting the <xref:System.Diagnostics.Debug.AutoFlush%2A> property to `true`.  \n  \n To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can edit the configuration file corresponding to the name of your application. The configuration file should be formatted as shown in the following example.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"true\" indentsize=\"7\" />  \n  </system.diagnostics>  \n</configuration>  \n```  \n  \n The <xref:System.Diagnostics.ConditionalAttribute> attribute is applied to the methods of <xref:System.Diagnostics.Debug>. Compilers that support <xref:System.Diagnostics.ConditionalAttribute> ignore calls to these methods unless \"DEBUG\" is defined as a conditional compilation symbol. Refer to a compiler's documentation to determine whether <xref:System.Diagnostics.ConditionalAttribute> is supported and the syntax for defining a conditional compilation symbol.  \n  \n> [!NOTE]\n>  In Visual Studio C# and Visual Basic projects, by default, the \"DEBUG\" conditional compilation symbol is defined for debug builds, and the \"TRACE\" symbol is defined for both debug and release builds. For information about how to disable this behavior, see the Visual Studio documentation. For information about conditional debugging in Visual C++, see [Debug Class (C++/CLI)](http://msdn.microsoft.com/library/076bd528-1b6f-4e8a-a372-eb5849cf969a).  \n  \n To define the \"DEBUG\" conditional compilation symbol in C#, add the `/d:DEBUG` option to the compiler command line when you compile your code using a command line, or add `#define DEBUG` to the top of your file. In Visual Basic, add the `/d:DEBUG=True` option to the compiler command line or add `#Const DEBUG=True` to the file."
  example:
  - "The following example uses <xref:System.Diagnostics.Debug> to indicate the beginning and end of a program's execution. The example also uses <xref:System.Diagnostics.Debug.Indent%2A> and <xref:System.Diagnostics.Debug.Unindent%2A> to distinguish the tracing output.  \n  \n [!code-cpp[Classic Debug Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug Example/CS/source.cs#1)]\n [!code-vb[Classic Debug Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug Example/VB/source.vb#1)]"
  syntax:
    content: public static class Debug
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Assert(System.Boolean)
  commentId: M:System.Diagnostics.Debug.Assert(System.Boolean)
  id: Assert(System.Boolean)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Assert(Boolean)
  nameWithType: Debug.Assert(Boolean)
  fullName: Debug.Assert(Boolean)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Checks for a condition; if the condition is `false`, displays a message box that shows the call stack.
  remarks: "By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. For more information, see [Assertions in Managed Code](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1).  \n  \n> [!IMPORTANT]\n>  The `Assert` methods are not available for [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps.  \n  \n Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> method is used to identify logic errors during program development. <xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition. If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.  \n  \n When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] apps do not support modal dialog boxes, so they behave the same in user interface mode and non-user interface mode. The message is written to the active trace listeners in debugging mode, or no message is written in release mode.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [\\&lt;remove\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <assert assertuienabled=\"true\" logfilename=\"c:\\\\myFile.log\" />  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example creates an index for an array, performs some action to set the value of the index, and then calls <xref:System.Diagnostics.Debug.Assert%2A> to confirm that the index value is valid. If it is not valid, <xref:System.Diagnostics.Debug.Assert%2A> outputs the call stack.  \n  \n [!code-cpp[Classic Debug.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Assert (bool condition);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, a failure message is not sent and the message box is not displayed.
  overload: System.Diagnostics.Debug.Assert*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Assert(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)
  id: Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Assert(Boolean, String)
  nameWithType: Debug.Assert(Boolean, String)
  fullName: Debug.Assert(Boolean, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Checks for a condition; if the condition is `false`, outputs a specified message and displays a message box that shows the call stack.
  remarks: "By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. For more information, see [Assertions in Managed Code](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1).  \n  \n Typically, the <xref:System.Diagnostics.Debug.Assert%2A> method is used to identify logic errors during program development. <xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition. If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.  \n  \n When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [\\&lt;remove\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <assert assertuienabled=\"true\" logfilename=\"c:\\\\myFile.log\" />  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example checks whether the `type` parameter is valid. If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \n  \n [!code-cpp[Classic Debug.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Assert (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, the specified message is not sent and the message box is not displayed.
    - id: message
      type: System.String
      description: The message to send to the <xref href="System.Diagnostics.Trace.Listeners"></xref> collection.
  overload: System.Diagnostics.Debug.Assert*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)
  commentId: M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)
  id: Assert(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Assert(Boolean, String, String)
  nameWithType: Debug.Assert(Boolean, String, String)
  fullName: Debug.Assert(Boolean, String, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Checks for a condition; if the condition is `false`, outputs two specified messages and displays a message box that shows the call stack.
  remarks: "By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. For more information, see [Assertions in Managed Code](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1).  \n  \n Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> method is used to identify logic errors during program development. <xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition. If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.  \n  \n When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [\\&lt;remove\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <assert assertuienabled=\"true\" logfilename=\"c:\\\\myFile.log\" />  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example checks whether the `type` parameter is valid. If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs two messages.  \n  \n [!code-cpp[Classic Debug.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Assert (bool condition, string message, string detailMessage);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, the specified messages are not sent and the message box is not displayed.
    - id: message
      type: System.String
      description: The message to send to the <xref href="System.Diagnostics.Trace.Listeners"></xref> collection.
    - id: detailMessage
      type: System.String
      description: The detailed message to send to the <xref href="System.Diagnostics.Trace.Listeners"></xref> collection.
  overload: System.Diagnostics.Debug.Assert*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])
  commentId: M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])
  id: Assert(System.Boolean,System.String,System.String,System.Object[])
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Assert(Boolean, String, String, Object[])
  nameWithType: Debug.Assert(Boolean, String, String, Object[])
  fullName: Debug.Assert(Boolean, String, String, Object[])
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Checks for a condition; if the condition is `false`, outputs two messages (simple and formatted) and displays a message box that shows the call stack.
  remarks: "This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is sent to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. For more information, see [Assertions in Managed Code](http://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1).  \n  \n Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> method is used to identify logic errors during program development. <xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition. If the result is `false`, The <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method is called and the `detailMessageFormat` string and `args` array are passed in as parameters. <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> then sends the specified text message and the formatted text message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.  \n  \n When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [\\&lt;remove\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <assert assertuienabled=\"true\" logfilename=\"c:\\\\myFile.log\" />  \n  </system.diagnostics>  \n</configuration>  \n```"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Assert (bool condition, string message, string detailMessageFormat, object[] args);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, the specified messages are not sent and the message box is not displayed.
    - id: message
      type: System.String
      description: The message to send to the <xref href="System.Diagnostics.Trace.Listeners"></xref> collection.
    - id: detailMessageFormat
      type: System.String
      description: The composite format string to send to the <xref href="System.Diagnostics.Trace.Listeners"></xref> collection. This message contains text intermixed with zero or more format items, which correspond to objects in the <code>args</code> array.
    - id: args
      type: System.Object[]
      description: An object array that contains zero or more objects to format.
  overload: System.Diagnostics.Debug.Assert*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.AutoFlush
  commentId: P:System.Diagnostics.Debug.AutoFlush
  id: AutoFlush
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: AutoFlush
  nameWithType: Debug.AutoFlush
  fullName: Debug.AutoFlush
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: Gets or sets a value indicating whether <xref href="System.Diagnostics.Debug.Flush"></xref> should be called on the <xref href="System.Diagnostics.Debug.Listeners"></xref> after every write.
  remarks: "The default is `false`.  \n  \n Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>. Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.  \n  \n To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application. The configuration file should be formatted as shown in the following example.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"true\" indentsize=\"7\" />  \n  </system.diagnostics>  \n</configuration>  \n```"
  syntax:
    content: public static bool AutoFlush { get; set; }
    return:
      type: System.Boolean
      description: '`true` if <xref href="System.Diagnostics.Debug.Flush"></xref> is called on the <xref href="System.Diagnostics.Debug.Listeners"></xref> after every write; otherwise, `false`.'
  overload: System.Diagnostics.Debug.AutoFlush*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Close
  commentId: M:System.Diagnostics.Debug.Close
  id: Close
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Close()
  nameWithType: Debug.Close()
  fullName: Debug.Close()
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: Flushes the output buffer and then calls the `Close` method on each of the <xref href="System.Diagnostics.Debug.Listeners"></xref>.
  remarks: "Use this method when the output goes to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>.  \n  \n Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>. Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters."
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the output.  \n  \n [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Close ();
    parameters: []
  overload: System.Diagnostics.Debug.Close*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Fail(System.String)
  commentId: M:System.Diagnostics.Debug.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Fail(String)
  nameWithType: Debug.Fail(String)
  fullName: Debug.Fail(String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Emits the specified error message.
  remarks: "The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [\\&lt;remove\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection."
  example:
  - "The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.  \n  \n [!code-cpp[Classic Debug.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#1)]  \n  \n You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.  \n  \n [!code-cpp[Classic Debug.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#2)]\n [!code-csharp[Classic Debug.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#2)]\n [!code-vb[Classic Debug.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#2)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Fail (string message);
    parameters:
    - id: message
      type: System.String
      description: A message to emit.
  overload: System.Diagnostics.Debug.Fail*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Fail(System.String,System.String)
  commentId: M:System.Diagnostics.Debug.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Fail(String, String)
  nameWithType: Debug.Fail(String, String)
  fullName: Debug.Fail(String, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Emits an error message and a detailed error message.
  remarks: "The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [\\&lt;remove\\&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection."
  example:
  - "The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.  \n  \n [!code-cpp[Classic Debug.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#1)]  \n  \n You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.  \n  \n [!code-cpp[Classic Debug.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#2)]\n [!code-csharp[Classic Debug.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#2)]\n [!code-vb[Classic Debug.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#2)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: A message to emit.
    - id: detailMessage
      type: System.String
      description: A detailed message to emit.
  overload: System.Diagnostics.Debug.Fail*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Flush
  commentId: M:System.Diagnostics.Debug.Flush
  id: Flush
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Flush()
  nameWithType: Debug.Flush()
  fullName: Debug.Flush()
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: Flushes the output buffer and causes buffered data to write to the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>. Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.FileStream> called `myFileStream` to write to a file named `TestFile.txt`. The example creates the stream, opens the file if it exists or creates a new one, writes one line of text to the file, and then flushes and closes the output.  \n  \n [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Flush ();
    parameters: []
  overload: System.Diagnostics.Debug.Flush*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Indent
  commentId: M:System.Diagnostics.Debug.Indent
  id: Indent
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Indent()
  nameWithType: Debug.Indent()
  fullName: Debug.Indent()
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: Increases the current <xref href="System.Diagnostics.Debug.IndentLevel"></xref> by one.
  remarks: ''
  example:
  - "The following example sets the indent level and emits debugging messages.  \n  \n [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Indent ();
    parameters: []
  overload: System.Diagnostics.Debug.Indent*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.IndentLevel
  commentId: P:System.Diagnostics.Debug.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: IndentLevel
  nameWithType: Debug.IndentLevel
  fullName: Debug.IndentLevel
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: Gets or sets the indent level.
  remarks: The <xref:System.Diagnostics.Debug.IndentLevel%2A> property represents the number of times the indent of size <xref:System.Diagnostics.Debug.IndentSize%2A> is applied.
  example:
  - "The following example sets the indent level and emits debugging messages.  \n  \n [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: public static int IndentLevel { get; set; }
    return:
      type: System.Int32
      description: The indent level. The default is 0.
  overload: System.Diagnostics.Debug.IndentLevel*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.IndentSize
  commentId: P:System.Diagnostics.Debug.IndentSize
  id: IndentSize
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: IndentSize
  nameWithType: Debug.IndentSize
  fullName: Debug.IndentSize
  type: Property
  assemblies:
  - System
  - netstandard
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: Gets or sets the number of spaces in an indent.
  remarks: "A <xref:System.Diagnostics.TextWriterTraceListener> interprets this number as spaces. An <xref:System.Diagnostics.EventLogTraceListener> ignores this value.  \n  \n To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application. The configuration file should be formatted as shown in the following example.  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <trace autoflush=\"true\" indentsize=\"7\" />  \n  </system.diagnostics>  \n</configuration>  \n```"
  syntax:
    content: public static int IndentSize { get; set; }
    return:
      type: System.Int32
      description: The number of spaces in an indent. The default is four.
  overload: System.Diagnostics.Debug.IndentSize*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Listeners
  commentId: P:System.Diagnostics.Debug.Listeners
  id: Listeners
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Listeners
  nameWithType: Debug.Listeners
  fullName: Debug.Listeners
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: Gets the collection of listeners that is monitoring the debug output.
  remarks: "The listeners produce formatted output from the debug output. By default, the collection contains an instance of the <xref:System.Diagnostics.DefaultTraceListener> class. To remove the default listener, call the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method, and pass it the instance of the <xref:System.Diagnostics.DefaultTraceListener>. To redirect output to the console window, add an instance of the <xref:System.Diagnostics.ConsoleTraceListener>. To redirect output to a file or stream, add an instance of the <xref:System.Diagnostics.TextWriterTraceListener>.  \n  \n> [!NOTE]\n>  The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both."
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> that outputs to the console screen. The code then adds the new listener to the <xref:System.Diagnostics.Debug.Listeners%2A>.  \n  \n [!code-cpp[Classic Debug.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/VB/source.vb#1)]"
  syntax:
    content: public static System.Diagnostics.TraceListenerCollection Listeners { get; }
    return:
      type: System.Diagnostics.TraceListenerCollection
      description: A <xref href="System.Diagnostics.TraceListenerCollection"></xref> representing a collection of type <xref href="System.Diagnostics.TraceListener"></xref> that monitors the debug output.
  overload: System.Diagnostics.Debug.Listeners*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Print(System.String)
  commentId: M:System.Diagnostics.Debug.Print(System.String)
  id: Print(System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Print(String)
  nameWithType: Debug.Print(String)
  fullName: Debug.Print(String)
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: Writes a message followed by a line terminator to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: The default line terminator is a carriage return followed by a line feed. By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Print (string message);
    parameters:
    - id: message
      type: System.String
      description: The message to write.
  overload: System.Diagnostics.Debug.Print*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Print(System.String,System.Object[])
  commentId: M:System.Diagnostics.Debug.Print(System.String,System.Object[])
  id: Print(System.String,System.Object[])
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Print(String, Object[])
  nameWithType: Debug.Print(String, Object[])
  fullName: Debug.Print(String, Object[])
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: Writes a formatted string followed by a line terminator to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Print (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <code>args</code> array.
    - id: args
      type: System.Object[]
      description: An object array containing zero or more objects to format.
  overload: System.Diagnostics.Debug.Print*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>format</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "<code>format</code> is invalid.  \n  \n -or-  \n  \n The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format."
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Unindent
  commentId: M:System.Diagnostics.Debug.Unindent
  id: Unindent
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Unindent()
  nameWithType: Debug.Unindent()
  fullName: Debug.Unindent()
  type: Method
  assemblies:
  - System
  - netstandard
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: Decreases the current <xref href="System.Diagnostics.Debug.IndentLevel"></xref> by one.
  remarks: ''
  example:
  - "The following example sets the indent level and emits debugging messages.  \n  \n [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Unindent ();
    parameters: []
  overload: System.Diagnostics.Debug.Unindent*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Write(System.String,System.String)
  commentId: M:System.Diagnostics.Debug.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Write(String, String)
  nameWithType: Debug.Write(String, String)
  fullName: Debug.Write(String, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a category name and message to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n Use the `category` parameter to group output messages.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Write (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: A message to write.
    - id: category
      type: System.String
      description: A category name used to organize the output.
  overload: System.Diagnostics.Debug.Write*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Write(System.Object,System.String)
  commentId: M:System.Diagnostics.Debug.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Write(Object, String)
  nameWithType: Debug.Write(Object, String)
  fullName: Debug.Write(Object, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a category name and the value of the object's <xref href="System.Object.ToString"></xref> method to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n Use the `category` parameter to group output messages.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Write (object value, string category);
    parameters:
    - id: value
      type: System.Object
      description: An object whose name is sent to the <xref href="System.Diagnostics.Debug.Listeners"></xref>.
    - id: category
      type: System.String
      description: A category name used to organize the output.
  overload: System.Diagnostics.Debug.Write*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Write(System.Object)
  commentId: M:System.Diagnostics.Debug.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Write(Object)
  nameWithType: Debug.Write(Object)
  fullName: Debug.Write(Object)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes the value of the object's <xref href="System.Object.ToString"></xref> method to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Write (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object whose name is sent to the <xref href="System.Diagnostics.Debug.Listeners"></xref>.
  overload: System.Diagnostics.Debug.Write*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.Write(System.String)
  commentId: M:System.Diagnostics.Debug.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: Write(String)
  nameWithType: Debug.Write(String)
  fullName: Debug.Write(String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a message to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: A message to write.
  overload: System.Diagnostics.Debug.Write*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)
  commentId: M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)
  id: WriteIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteIf(Boolean, Object)
  nameWithType: Debug.WriteIf(Boolean, Object)
  fullName: Debug.WriteIf(Boolean, Object)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes the value of the object's <xref href="System.Object.ToString"></xref> method to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection if a condition is `true`.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteIf (bool condition, object value);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, the value is written to the trace listeners in the collection.
    - id: value
      type: System.Object
      description: An object whose name is sent to the <xref href="System.Diagnostics.Debug.Listeners"></xref>.
  overload: System.Diagnostics.Debug.WriteIf*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)
  id: WriteIf(System.Boolean,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteIf(Boolean, String)
  nameWithType: Debug.WriteIf(Boolean, String)
  fullName: Debug.WriteIf(Boolean, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a message to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection if a condition is `true`.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteIf (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, the message is written to the trace listeners in the collection.
    - id: message
      type: System.String
      description: A message to write.
  overload: System.Diagnostics.Debug.WriteIf*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)
  commentId: M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)
  id: WriteIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteIf(Boolean, Object, String)
  nameWithType: Debug.WriteIf(Boolean, Object, String)
  fullName: Debug.WriteIf(Boolean, Object, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a category name and the value of the object's <xref href="System.Object.ToString"></xref> method to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection if a condition is `true`.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n The `category` parameter can be used to group output messages.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteIf (bool condition, object value, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, the category name and value are written to the trace listeners in the collection.
    - id: value
      type: System.Object
      description: An object whose name is sent to the <xref href="System.Diagnostics.Debug.Listeners"></xref>.
    - id: category
      type: System.String
      description: A category name used to organize the output.
  overload: System.Diagnostics.Debug.WriteIf*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)
  commentId: M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)
  id: WriteIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteIf(Boolean, String, String)
  nameWithType: Debug.WriteIf(Boolean, String, String)
  fullName: Debug.WriteIf(Boolean, String, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a category name and message to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection if a condition is `true`.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n The `category` parameter can be used to group output messages.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=fullName> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteIf (bool condition, string message, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, the category name and message are written to the trace listeners in the collection.
    - id: message
      type: System.String
      description: A message to write.
    - id: category
      type: System.String
      description: A category name used to organize the output.
  overload: System.Diagnostics.Debug.WriteIf*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteLine(System.Object)
  commentId: M:System.Diagnostics.Debug.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: Debug.WriteLine(Object)
  fullName: Debug.WriteLine(Object)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes the value of the object's <xref href="System.Object.ToString"></xref> method to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteLine (object value);
    parameters:
    - id: value
      type: System.Object
      description: An object whose name is sent to the <xref href="System.Diagnostics.Debug.Listeners"></xref>.
  overload: System.Diagnostics.Debug.WriteLine*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteLine(System.String)
  commentId: M:System.Diagnostics.Debug.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: Debug.WriteLine(String)
  fullName: Debug.WriteLine(String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a message followed by a line terminator to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteLine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteLine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteLine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: A message to write.
  overload: System.Diagnostics.Debug.WriteLine*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteLine(System.Object,System.String)
  commentId: M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteLine(Object, String)
  nameWithType: Debug.WriteLine(Object, String)
  fullName: Debug.WriteLine(Object, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a category name and the value of the object's <xref href="System.Object.ToString"></xref> method to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n The `category` parameter can be used to group output messages.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteLine (object value, string category);
    parameters:
    - id: value
      type: System.Object
      description: An object whose name is sent to the <xref href="System.Diagnostics.Debug.Listeners"></xref>.
    - id: category
      type: System.String
      description: A category name used to organize the output.
  overload: System.Diagnostics.Debug.WriteLine*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteLine(System.String,System.Object[])
  commentId: M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])
  id: WriteLine(System.String,System.Object[])
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteLine(String, Object[])
  nameWithType: Debug.WriteLine(String, Object[])
  fullName: Debug.WriteLine(String, Object[])
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a formatted message followed by a line terminator to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: "This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.  \n  \n The  keyword in the syntax for this method implies that the object array can be a single value. The exception to this is the <xref:System.String> object. Explicit overloads take precedence, so an `arg` value of a single string will default to the <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=fullName> overload.  \n  \n By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=fullName> method of the trace listener."
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteLine (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <code>args</code> array.
    - id: args
      type: System.Object[]
      description: An object array that contains zero or more objects to format.
  overload: System.Diagnostics.Debug.WriteLine*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteLine(System.String,System.String)
  commentId: M:System.Diagnostics.Debug.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteLine(String, String)
  nameWithType: Debug.WriteLine(String, String)
  fullName: Debug.WriteLine(String, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a category name and message to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n The `category` parameter can be used to group output messages.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteLine (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: A message to write.
    - id: category
      type: System.String
      description: A category name used to organize the output.
  overload: System.Diagnostics.Debug.WriteLine*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)
  commentId: M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)
  id: WriteLineIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteLineIf(Boolean, Object, String)
  nameWithType: Debug.WriteLineIf(Boolean, Object, String)
  fullName: Debug.WriteLineIf(Boolean, Object, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a category name and the value of the object's <xref href="System.Object.ToString"></xref> method to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection if a condition is `true`.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n The `category` parameter can be used to group output messages.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteLineIf (bool condition, object value, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, the category name and value are written to the trace listeners in the collection.
    - id: value
      type: System.Object
      description: An object whose name is sent to the <xref href="System.Diagnostics.Debug.Listeners"></xref>.
    - id: category
      type: System.String
      description: A category name used to organize the output.
  overload: System.Diagnostics.Debug.WriteLineIf*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)
  commentId: M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)
  id: WriteLineIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteLineIf(Boolean, Object)
  nameWithType: Debug.WriteLineIf(Boolean, Object)
  fullName: Debug.WriteLineIf(Boolean, Object)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes the value of the object's <xref href="System.Object.ToString"></xref> method to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection if a condition is `true`.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteLineIf (bool condition, object value);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, the value is written to the trace listeners in the collection.
    - id: value
      type: System.Object
      description: An object whose name is sent to the <xref href="System.Diagnostics.Debug.Listeners"></xref>.
  overload: System.Diagnostics.Debug.WriteLineIf*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)
  id: WriteLineIf(System.Boolean,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteLineIf(Boolean, String)
  nameWithType: Debug.WriteLineIf(Boolean, String)
  fullName: Debug.WriteLineIf(Boolean, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a message to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection if a condition is `true`.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=fullName> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteLineIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteLineIf (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: The conditional expression to evaluate. If the condition is `true`, the message is written to the trace listeners in the collection.
    - id: message
      type: System.String
      description: A message to write.
  overload: System.Diagnostics.Debug.WriteLineIf*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)
  commentId: M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)
  id: WriteLineIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Debug
  langs:
  - csharp
  name: WriteLineIf(Boolean, String, String)
  nameWithType: Debug.WriteLineIf(Boolean, String, String)
  fullName: Debug.WriteLineIf(Boolean, String, String)
  type: Method
  assemblies:
  - System.Diagnostics.Debug
  - System
  - netstandard
  namespace: System.Diagnostics
  summary: Writes a category name and message to the trace listeners in the <xref href="System.Diagnostics.Debug.Listeners"></xref> collection if a condition is `true`.
  remarks: "By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.  \n  \n The `category` parameter can be used to group output messages.  \n  \n This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=fullName> method of the trace listener."
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside of the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CS/source.cs#1)]\n [!code-vb[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.Conditional("DEBUG")]

      public static void WriteLineIf (bool condition, string message, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: '`true` to cause a message to be written; otherwise, `false`.'
    - id: message
      type: System.String
      description: A message to write.
    - id: category
      type: System.String
      description: A category name used to organize the output.
  overload: System.Diagnostics.Debug.WriteLineIf*
  exceptions: []
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.Diagnostics.Debug.Assert(System.Boolean)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Assert(Boolean)
  nameWithType: Debug.Assert(Boolean)
  fullName: Debug.Assert(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Debug.Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Assert(Boolean, String)
  nameWithType: Debug.Assert(Boolean, String)
  fullName: Debug.Assert(Boolean, String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Assert(Boolean, String, String)
  nameWithType: Debug.Assert(Boolean, String, String)
  fullName: Debug.Assert(Boolean, String, String)
- uid: System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Assert(Boolean, String, String, Object[])
  nameWithType: Debug.Assert(Boolean, String, String, Object[])
  fullName: Debug.Assert(Boolean, String, String, Object[])
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.Debug.AutoFlush
  parent: System.Diagnostics.Debug
  isExternal: false
  name: AutoFlush
  nameWithType: Debug.AutoFlush
  fullName: Debug.AutoFlush
- uid: System.Diagnostics.Debug.Close
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Close()
  nameWithType: Debug.Close()
  fullName: Debug.Close()
- uid: System.Diagnostics.Debug.Fail(System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Fail(String)
  nameWithType: Debug.Fail(String)
  fullName: Debug.Fail(String)
- uid: System.Diagnostics.Debug.Fail(System.String,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Fail(String, String)
  nameWithType: Debug.Fail(String, String)
  fullName: Debug.Fail(String, String)
- uid: System.Diagnostics.Debug.Flush
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Flush()
  nameWithType: Debug.Flush()
  fullName: Debug.Flush()
- uid: System.Diagnostics.Debug.Indent
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Indent()
  nameWithType: Debug.Indent()
  fullName: Debug.Indent()
- uid: System.Diagnostics.Debug.IndentLevel
  parent: System.Diagnostics.Debug
  isExternal: false
  name: IndentLevel
  nameWithType: Debug.IndentLevel
  fullName: Debug.IndentLevel
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.Debug.IndentSize
  parent: System.Diagnostics.Debug
  isExternal: false
  name: IndentSize
  nameWithType: Debug.IndentSize
  fullName: Debug.IndentSize
- uid: System.Diagnostics.Debug.Listeners
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Listeners
  nameWithType: Debug.Listeners
  fullName: Debug.Listeners
- uid: System.Diagnostics.TraceListenerCollection
  parent: System.Diagnostics
  isExternal: false
  name: TraceListenerCollection
  nameWithType: TraceListenerCollection
  fullName: System.Diagnostics.TraceListenerCollection
- uid: System.Diagnostics.Debug.Print(System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Print(String)
  nameWithType: Debug.Print(String)
  fullName: Debug.Print(String)
- uid: System.Diagnostics.Debug.Print(System.String,System.Object[])
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Print(String, Object[])
  nameWithType: Debug.Print(String, Object[])
  fullName: Debug.Print(String, Object[])
- uid: System.Diagnostics.Debug.Unindent
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Unindent()
  nameWithType: Debug.Unindent()
  fullName: Debug.Unindent()
- uid: System.Diagnostics.Debug.Write(System.String,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Write(String, String)
  nameWithType: Debug.Write(String, String)
  fullName: Debug.Write(String, String)
- uid: System.Diagnostics.Debug.Write(System.Object,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Write(Object, String)
  nameWithType: Debug.Write(Object, String)
  fullName: Debug.Write(Object, String)
- uid: System.Diagnostics.Debug.Write(System.Object)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Write(Object)
  nameWithType: Debug.Write(Object)
  fullName: Debug.Write(Object)
- uid: System.Diagnostics.Debug.Write(System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Write(String)
  nameWithType: Debug.Write(String)
  fullName: Debug.Write(String)
- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteIf(Boolean, Object)
  nameWithType: Debug.WriteIf(Boolean, Object)
  fullName: Debug.WriteIf(Boolean, Object)
- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteIf(Boolean, String)
  nameWithType: Debug.WriteIf(Boolean, String)
  fullName: Debug.WriteIf(Boolean, String)
- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteIf(Boolean, Object, String)
  nameWithType: Debug.WriteIf(Boolean, Object, String)
  fullName: Debug.WriteIf(Boolean, Object, String)
- uid: System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteIf(Boolean, String, String)
  nameWithType: Debug.WriteIf(Boolean, String, String)
  fullName: Debug.WriteIf(Boolean, String, String)
- uid: System.Diagnostics.Debug.WriteLine(System.Object)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLine(Object)
  nameWithType: Debug.WriteLine(Object)
  fullName: Debug.WriteLine(Object)
- uid: System.Diagnostics.Debug.WriteLine(System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLine(String)
  nameWithType: Debug.WriteLine(String)
  fullName: Debug.WriteLine(String)
- uid: System.Diagnostics.Debug.WriteLine(System.Object,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLine(Object, String)
  nameWithType: Debug.WriteLine(Object, String)
  fullName: Debug.WriteLine(Object, String)
- uid: System.Diagnostics.Debug.WriteLine(System.String,System.Object[])
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLine(String, Object[])
  nameWithType: Debug.WriteLine(String, Object[])
  fullName: Debug.WriteLine(String, Object[])
- uid: System.Diagnostics.Debug.WriteLine(System.String,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLine(String, String)
  nameWithType: Debug.WriteLine(String, String)
  fullName: Debug.WriteLine(String, String)
- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLineIf(Boolean, Object, String)
  nameWithType: Debug.WriteLineIf(Boolean, Object, String)
  fullName: Debug.WriteLineIf(Boolean, Object, String)
- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLineIf(Boolean, Object)
  nameWithType: Debug.WriteLineIf(Boolean, Object)
  fullName: Debug.WriteLineIf(Boolean, Object)
- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLineIf(Boolean, String)
  nameWithType: Debug.WriteLineIf(Boolean, String)
  fullName: Debug.WriteLineIf(Boolean, String)
- uid: System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLineIf(Boolean, String, String)
  nameWithType: Debug.WriteLineIf(Boolean, String, String)
  fullName: Debug.WriteLineIf(Boolean, String, String)
- uid: System.Diagnostics.Debug.Assert*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Assert
  nameWithType: Debug.Assert
  fullName: Debug.Assert
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.AutoFlush*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: AutoFlush
  nameWithType: Debug.AutoFlush
  fullName: Debug.AutoFlush
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.Close*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Close
  nameWithType: Debug.Close
  fullName: Debug.Close
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.Fail*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Fail
  nameWithType: Debug.Fail
  fullName: Debug.Fail
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.Flush*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Flush
  nameWithType: Debug.Flush
  fullName: Debug.Flush
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.Indent*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Indent
  nameWithType: Debug.Indent
  fullName: Debug.Indent
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.IndentLevel*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: IndentLevel
  nameWithType: Debug.IndentLevel
  fullName: Debug.IndentLevel
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.IndentSize*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: IndentSize
  nameWithType: Debug.IndentSize
  fullName: Debug.IndentSize
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.Listeners*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Listeners
  nameWithType: Debug.Listeners
  fullName: Debug.Listeners
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.Print*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Print
  nameWithType: Debug.Print
  fullName: Debug.Print
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.Unindent*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Unindent
  nameWithType: Debug.Unindent
  fullName: Debug.Unindent
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.Write*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: Write
  nameWithType: Debug.Write
  fullName: Debug.Write
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.WriteIf*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteIf
  nameWithType: Debug.WriteIf
  fullName: Debug.WriteIf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.WriteLine*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLine
  nameWithType: Debug.WriteLine
  fullName: Debug.WriteLine
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Diagnostics.Debug.WriteLineIf*
  parent: System.Diagnostics.Debug
  isExternal: false
  name: WriteLineIf
  nameWithType: Debug.WriteLineIf
  fullName: Debug.WriteLineIf
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/Debug.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
