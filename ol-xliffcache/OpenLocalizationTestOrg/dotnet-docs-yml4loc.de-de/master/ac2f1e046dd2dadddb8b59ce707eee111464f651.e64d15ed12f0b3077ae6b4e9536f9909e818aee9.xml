{"nodes":[{"content":"Represents an object that is used to interact with an operation that has been posted to the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue.","nodes":[{"pos":[0,155],"content":"Represents an object that is used to interact with an operation that has been posted to the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> queue.","source":"Represents an object that is used to interact with an operation that has been posted to the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue."}],"pos":[1128,1284],"yaml":true},{"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object when it is called.  \n  \n The <xref:System.Windows.Threading.DispatcherOperation> object can be used to interact with the delegate on the <xref:System.Windows.Threading.Dispatcher> queue, such as changing the priority of the operation or aborting the operation.  \n  \n To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.  \n  \n The <xref:System.Windows.Threading.DispatcherOperation> is not an exception handling boundary. This means that exceptions are handled by the <xref:System.Windows.Threading.Dispatcher> and are not preserved by the operation.","nodes":[{"pos":[0,145],"content":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object when it is called.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object when it is called.","pos":[0,145],"source":"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object when it is called."}]},{"pos":[152,387],"content":"The <xref:System.Windows.Threading.DispatcherOperation> object can be used to interact with the delegate on the <xref:System.Windows.Threading.Dispatcher> queue, such as changing the priority of the operation or aborting the operation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> object can be used to interact with the delegate on the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> queue, such as changing the priority of the operation or aborting the operation.","pos":[0,235],"source":"The <xref:System.Windows.Threading.DispatcherOperation> object can be used to interact with the delegate on the <xref:System.Windows.Threading.Dispatcher> queue, such as changing the priority of the operation or aborting the operation."}]},{"pos":[394,525],"content":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.","nodes":[{"content":"To obtain the return value of the invoked delegate, use the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation.Result%2A&gt;</ph> property.","pos":[0,131],"source":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property."}]},{"pos":[532,755],"content":"The <xref:System.Windows.Threading.DispatcherOperation> is not an exception handling boundary. This means that exceptions are handled by the <xref:System.Windows.Threading.Dispatcher> and are not preserved by the operation.","nodes":[{"content":"The <xref:System.Windows.Threading.DispatcherOperation> is not an exception handling boundary. This means that exceptions are handled by the <xref:System.Windows.Threading.Dispatcher> and are not preserved by the operation.","pos":[0,223],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is not an exception handling boundary.","pos":[0,94],"source":"The <xref:System.Windows.Threading.DispatcherOperation> is not an exception handling boundary."},{"content":"This means that exceptions are handled by the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher&gt;</ph> and are not preserved by the operation.","pos":[95,223],"source":" This means that exceptions are handled by the <xref:System.Windows.Threading.Dispatcher> and are not preserved by the operation."}]}]}],"pos":[1295,2059],"yaml":true,"extradata":"MT"},{"content":"Aborts the operation.","nodes":[{"pos":[0,21],"content":"Aborts the operation.","nodes":[{"content":"Aborts the operation.","pos":[0,21]}]}],"pos":[3450,3472],"yaml":true},{"content":"If an operation is already in progress, this method will return `false`.  \n  \n When an operation is aborted, the <xref:System.Windows.Threading.DispatcherOperation.Status%2A> of the <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> and the <xref:System.Windows.Threading.DispatcherOperation.Aborted> event is raised.","nodes":[{"pos":[0,72],"content":"If an operation is already in progress, this method will return <ph id=\"ph1\">`false`</ph>.","source":"If an operation is already in progress, this method will return `false`."},{"pos":[79,394],"content":"When an operation is aborted, the <xref:System.Windows.Threading.DispatcherOperation.Status%2A> of the <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> and the <xref:System.Windows.Threading.DispatcherOperation.Aborted> event is raised.","nodes":[{"content":"When an operation is aborted, the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation.Status%2A&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> is set to <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph> and the <ph id=\"ph4\">&lt;xref:System.Windows.Threading.DispatcherOperation.Aborted&gt;</ph> event is raised.","pos":[0,315],"source":"When an operation is aborted, the <xref:System.Windows.Threading.DispatcherOperation.Status%2A> of the <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> and the <xref:System.Windows.Threading.DispatcherOperation.Aborted> event is raised."}]}],"pos":[3483,3882],"yaml":true,"extradata":"MT"},{"content":"`true` if the operation was aborted; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if the operation was aborted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the operation was aborted; otherwise, `false`."}],"pos":[4004,4063],"yaml":true},{"content":"Occurs when the operation is aborted.","nodes":[{"pos":[0,37],"content":"Occurs when the operation is aborted.","nodes":[{"content":"Occurs when the operation is aborted.","pos":[0,37]}]}],"pos":[5093,5131],"yaml":true},{"content":"Occurs when the operation has completed.","nodes":[{"pos":[0,40],"content":"Occurs when the operation has completed.","nodes":[{"content":"Occurs when the operation has completed.","pos":[0,40]}]}],"pos":[6233,6274],"yaml":true},{"content":"Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> that the operation was posted to.","nodes":[{"pos":[0,99],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> that the operation was posted to.","source":"Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> that the operation was posted to."}],"pos":[7387,7487],"yaml":true},{"content":"The dispatcher.","nodes":[{"pos":[0,15],"content":"The dispatcher.","nodes":[{"content":"The dispatcher.","pos":[0,15]}]}],"pos":[7652,7668],"yaml":true},{"content":"Returns an object that is notified when the asynchronous operation is finished.","nodes":[{"pos":[0,79],"content":"Returns an object that is notified when the asynchronous operation is finished.","nodes":[{"content":"Returns an object that is notified when the asynchronous operation is finished.","pos":[0,79]}]}],"pos":[8728,8808],"yaml":true},{"content":"An object that is notified when the asynchronous operation is finished.","nodes":[{"pos":[0,71],"content":"An object that is notified when the asynchronous operation is finished.","nodes":[{"content":"An object that is notified when the asynchronous operation is finished.","pos":[0,71]}]}],"pos":[9060,9132],"yaml":true},{"content":"Begins the operation that is associated with this <xref href=\"System.Windows.Threading.DispatcherOperation\"></xref>.","nodes":[{"pos":[0,116],"content":"Begins the operation that is associated with this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.DispatcherOperation\"&gt;&lt;/xref&gt;</ph>.","source":"Begins the operation that is associated with this <xref href=\"System.Windows.Threading.DispatcherOperation\"></xref>."}],"pos":[10305,10422],"yaml":true},{"content":"`null` in all cases.","nodes":[{"pos":[0,20],"content":"<ph id=\"ph1\">`null`</ph> in all cases.","source":"`null` in all cases."}],"pos":[10569,10592],"yaml":true},{"content":"Gets or sets the priority of the operation in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue.","nodes":[{"pos":[0,113],"content":"Gets or sets the priority of the operation in the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> queue.","source":"Gets or sets the priority of the operation in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue."}],"pos":[11644,11758],"yaml":true},{"content":"The priority of the delegate on the queue.","nodes":[{"pos":[0,42],"content":"The priority of the delegate on the queue.","nodes":[{"content":"The priority of the delegate on the queue.","pos":[0,42]}]}],"pos":[11942,11985],"yaml":true},{"content":"Gets the result of the operation after it has completed.","nodes":[{"pos":[0,56],"content":"Gets the result of the operation after it has completed.","nodes":[{"content":"Gets the result of the operation after it has completed.","pos":[0,56]}]}],"pos":[13015,13072],"yaml":true},{"content":"The result of the operation -or- `null` if the operation has not completed.","nodes":[{"pos":[0,75],"content":"The result of the operation -or- <ph id=\"ph1\">`null`</ph> if the operation has not completed.","source":"The result of the operation -or- `null` if the operation has not completed."}],"pos":[13182,13258],"yaml":true},{"content":"Gets the current status of the operation..","nodes":[{"pos":[0,42],"content":"Gets the current status of the operation..","nodes":[{"content":"Gets the current status of the operation..","pos":[0,42]}]}],"pos":[14286,14329],"yaml":true},{"content":"The stages of a <xref:System.Windows.Threading.DispatcherOperation> are <xref:System.Windows.Threading.DispatcherOperationStatus.Pending>, <xref:System.Windows.Threading.DispatcherOperationStatus.Executing>, and <xref:System.Windows.Threading.DispatcherOperationStatus.Completed>.  At any point before the operation has completed, the status can be set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"pos":[0,422],"content":"The stages of a <xref:System.Windows.Threading.DispatcherOperation> are <xref:System.Windows.Threading.DispatcherOperationStatus.Pending>, <xref:System.Windows.Threading.DispatcherOperationStatus.Executing>, and <xref:System.Windows.Threading.DispatcherOperationStatus.Completed>.  At any point before the operation has completed, the status can be set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","nodes":[{"content":"The stages of a <xref:System.Windows.Threading.DispatcherOperation> are <xref:System.Windows.Threading.DispatcherOperationStatus.Pending>, <xref:System.Windows.Threading.DispatcherOperationStatus.Executing>, and <xref:System.Windows.Threading.DispatcherOperationStatus.Completed>.  At any point before the operation has completed, the status can be set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.","pos":[0,422],"nodes":[{"content":"The stages of a <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation&gt;</ph> are <ph id=\"ph2\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Pending&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Executing&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Completed&gt;</ph>.","pos":[0,280],"source":"The stages of a <xref:System.Windows.Threading.DispatcherOperation> are <xref:System.Windows.Threading.DispatcherOperationStatus.Pending>, <xref:System.Windows.Threading.DispatcherOperationStatus.Executing>, and <xref:System.Windows.Threading.DispatcherOperationStatus.Completed>."},{"content":"At any point before the operation has completed, the status can be set to <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperationStatus.Aborted&gt;</ph>.","pos":[282,422],"source":"  At any point before the operation has completed, the status can be set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>."}]}]}],"pos":[14340,14763],"yaml":true,"extradata":"MT"},{"content":"The status of the operation.","nodes":[{"pos":[0,28],"content":"The status of the operation.","nodes":[{"content":"The status of the operation.","pos":[0,28]}]}],"pos":[14954,14983],"yaml":true},{"content":"Gets a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the current operation.","nodes":[{"pos":[0,96],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> that represents the current operation.","source":"Gets a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the current operation."}],"pos":[15977,16074],"yaml":true},{"content":"An object that represents the current operation.","nodes":[{"pos":[0,48],"content":"An object that represents the current operation.","nodes":[{"content":"An object that represents the current operation.","pos":[0,48]}]}],"pos":[16217,16266],"yaml":true},{"content":"Waits for the operation to complete","nodes":[{"pos":[0,35],"content":"Waits for the operation to complete","nodes":[{"content":"Waits for the operation to complete","pos":[0,35]}]}],"pos":[17262,17298],"yaml":true},{"content":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.","nodes":[{"pos":[0,131],"content":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.","nodes":[{"content":"To obtain the return value of the invoked delegate, use the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation.Result%2A&gt;</ph> property.","pos":[0,131],"source":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property."}]}],"pos":[17309,17441],"yaml":true,"extradata":"MT"},{"content":"The status of the operation.","nodes":[{"pos":[0,28],"content":"The status of the operation.","nodes":[{"content":"The status of the operation.","pos":[0,28]}]}],"pos":[17644,17673],"yaml":true},{"content":"<xref href=\"System.Windows.Threading.DispatcherOperation.Status\"></xref> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus.Executing\"></xref>.  This can occur when waiting for an operation that is already executing on the same thread.","nodes":[{"pos":[0,259],"content":"<xref href=\"System.Windows.Threading.DispatcherOperation.Status\"></xref> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus.Executing\"></xref>.  This can occur when waiting for an operation that is already executing on the same thread.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.DispatcherOperation.Status\"&gt;&lt;/xref&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherOperationStatus.Executing\"&gt;&lt;/xref&gt;</ph>.","pos":[0,167],"source":"<xref href=\"System.Windows.Threading.DispatcherOperation.Status\"></xref> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus.Executing\"></xref>."},{"content":"This can occur when waiting for an operation that is already executing on the same thread.","pos":[169,259]}]}],"pos":[17860,18120],"yaml":true},{"content":"Waits for the operation to complete in the specified period of time.","nodes":[{"pos":[0,68],"content":"Waits for the operation to complete in the specified period of time.","nodes":[{"content":"Waits for the operation to complete in the specified period of time.","pos":[0,68]}]}],"pos":[19133,19202],"yaml":true},{"content":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.","nodes":[{"pos":[0,131],"content":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.","nodes":[{"content":"To obtain the return value of the invoked delegate, use the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.DispatcherOperation.Result%2A&gt;</ph> property.","pos":[0,131],"source":"To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property."}]}],"pos":[19213,19345],"yaml":true,"extradata":"MT"},{"content":"The maximum period of time to wait.","nodes":[{"pos":[0,35],"content":"The maximum period of time to wait.","nodes":[{"content":"The maximum period of time to wait.","pos":[0,35]}]}],"pos":[19583,19619],"yaml":true},{"content":"The status of the operation.","nodes":[{"pos":[0,28],"content":"The status of the operation.","nodes":[{"content":"The status of the operation.","pos":[0,28]}]}],"pos":[19713,19742],"yaml":true},{"content":"<xref href=\"System.Windows.Threading.DispatcherOperation.Status\"></xref> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus.Executing\"></xref>.  This can occur when waiting for an operation that is already executing on the same thread.","nodes":[{"pos":[0,259],"content":"<xref href=\"System.Windows.Threading.DispatcherOperation.Status\"></xref> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus.Executing\"></xref>.  This can occur when waiting for an operation that is already executing on the same thread.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.DispatcherOperation.Status\"&gt;&lt;/xref&gt;</ph> is equal to <ph id=\"ph2\">&lt;xref href=\"System.Windows.Threading.DispatcherOperationStatus.Executing\"&gt;&lt;/xref&gt;</ph>.","pos":[0,167],"source":"<xref href=\"System.Windows.Threading.DispatcherOperation.Status\"></xref> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus.Executing\"></xref>."},{"content":"This can occur when waiting for an operation that is already executing on the same thread.","pos":[169,259]}]}],"pos":[19929,20189],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Threading.DispatcherOperation\n  commentId: T:System.Windows.Threading.DispatcherOperation\n  id: DispatcherOperation\n  children:\n  - System.Windows.Threading.DispatcherOperation.Abort\n  - System.Windows.Threading.DispatcherOperation.Aborted\n  - System.Windows.Threading.DispatcherOperation.Completed\n  - System.Windows.Threading.DispatcherOperation.Dispatcher\n  - System.Windows.Threading.DispatcherOperation.GetAwaiter\n  - System.Windows.Threading.DispatcherOperation.InvokeDelegateCore\n  - System.Windows.Threading.DispatcherOperation.Priority\n  - System.Windows.Threading.DispatcherOperation.Result\n  - System.Windows.Threading.DispatcherOperation.Status\n  - System.Windows.Threading.DispatcherOperation.Task\n  - System.Windows.Threading.DispatcherOperation.Wait\n  - System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)\n  langs:\n  - csharp\n  name: DispatcherOperation\n  nameWithType: DispatcherOperation\n  fullName: System.Windows.Threading.DispatcherOperation\n  type: Class\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Represents an object that is used to interact with an operation that has been posted to the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue.\n  remarks: \"<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object when it is called.  \\n  \\n The <xref:System.Windows.Threading.DispatcherOperation> object can be used to interact with the delegate on the <xref:System.Windows.Threading.Dispatcher> queue, such as changing the priority of the operation or aborting the operation.  \\n  \\n To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.  \\n  \\n The <xref:System.Windows.Threading.DispatcherOperation> is not an exception handling boundary. This means that exceptions are handled by the <xref:System.Windows.Threading.Dispatcher> and are not preserved by the operation.\"\n  syntax:\n    content: public class DispatcherOperation\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Windows.Threading.DispatcherOperation`1\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.DispatcherOperation.Abort\n  commentId: M:System.Windows.Threading.DispatcherOperation.Abort\n  id: Abort\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: DispatcherOperation.Abort()\n  fullName: DispatcherOperation.Abort()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Aborts the operation.\n  remarks: \"If an operation is already in progress, this method will return `false`.  \\n  \\n When an operation is aborted, the <xref:System.Windows.Threading.DispatcherOperation.Status%2A> of the <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted> and the <xref:System.Windows.Threading.DispatcherOperation.Aborted> event is raised.\"\n  syntax:\n    content: public bool Abort ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the operation was aborted; otherwise, `false`.'\n  overload: System.Windows.Threading.DispatcherOperation.Abort*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherOperation.Aborted\n  commentId: E:System.Windows.Threading.DispatcherOperation.Aborted\n  id: Aborted\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Aborted\n  nameWithType: DispatcherOperation.Aborted\n  fullName: DispatcherOperation.Aborted\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Occurs when the operation is aborted.\n  syntax:\n    content: public event EventHandler Aborted;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherOperation.Completed\n  commentId: E:System.Windows.Threading.DispatcherOperation.Completed\n  id: Completed\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Completed\n  nameWithType: DispatcherOperation.Completed\n  fullName: DispatcherOperation.Completed\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Occurs when the operation has completed.\n  syntax:\n    content: public event EventHandler Completed;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherOperation.Dispatcher\n  commentId: P:System.Windows.Threading.DispatcherOperation.Dispatcher\n  id: Dispatcher\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Dispatcher\n  nameWithType: DispatcherOperation.Dispatcher\n  fullName: DispatcherOperation.Dispatcher\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> that the operation was posted to.\n  syntax:\n    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }\n    return:\n      type: System.Windows.Threading.Dispatcher\n      description: The dispatcher.\n  overload: System.Windows.Threading.DispatcherOperation.Dispatcher*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherOperation.GetAwaiter\n  commentId: M:System.Windows.Threading.DispatcherOperation.GetAwaiter\n  id: GetAwaiter\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: GetAwaiter()\n  nameWithType: DispatcherOperation.GetAwaiter()\n  fullName: DispatcherOperation.GetAwaiter()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Returns an object that is notified when the asynchronous operation is finished.\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();\n    parameters: []\n    return:\n      type: System.Runtime.CompilerServices.TaskAwaiter\n      description: An object that is notified when the asynchronous operation is finished.\n  overload: System.Windows.Threading.DispatcherOperation.GetAwaiter*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore\n  commentId: M:System.Windows.Threading.DispatcherOperation.InvokeDelegateCore\n  id: InvokeDelegateCore\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: InvokeDelegateCore()\n  nameWithType: DispatcherOperation.InvokeDelegateCore()\n  fullName: DispatcherOperation.InvokeDelegateCore()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Begins the operation that is associated with this <xref href=\"System.Windows.Threading.DispatcherOperation\"></xref>.\n  syntax:\n    content: protected virtual object InvokeDelegateCore ();\n    parameters: []\n    return:\n      type: System.Object\n      description: '`null` in all cases.'\n  overload: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherOperation.Priority\n  commentId: P:System.Windows.Threading.DispatcherOperation.Priority\n  id: Priority\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Priority\n  nameWithType: DispatcherOperation.Priority\n  fullName: DispatcherOperation.Priority\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets or sets the priority of the operation in the <xref href=\"System.Windows.Threading.Dispatcher\"></xref> queue.\n  syntax:\n    content: public System.Windows.Threading.DispatcherPriority Priority { get; set; }\n    return:\n      type: System.Windows.Threading.DispatcherPriority\n      description: The priority of the delegate on the queue.\n  overload: System.Windows.Threading.DispatcherOperation.Priority*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherOperation.Result\n  commentId: P:System.Windows.Threading.DispatcherOperation.Result\n  id: Result\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Result\n  nameWithType: DispatcherOperation.Result\n  fullName: DispatcherOperation.Result\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the result of the operation after it has completed.\n  syntax:\n    content: public object Result { get; }\n    return:\n      type: System.Object\n      description: The result of the operation -or- `null` if the operation has not completed.\n  overload: System.Windows.Threading.DispatcherOperation.Result*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherOperation.Status\n  commentId: P:System.Windows.Threading.DispatcherOperation.Status\n  id: Status\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Status\n  nameWithType: DispatcherOperation.Status\n  fullName: DispatcherOperation.Status\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets the current status of the operation..\n  remarks: The stages of a <xref:System.Windows.Threading.DispatcherOperation> are <xref:System.Windows.Threading.DispatcherOperationStatus.Pending>, <xref:System.Windows.Threading.DispatcherOperationStatus.Executing>, and <xref:System.Windows.Threading.DispatcherOperationStatus.Completed>.  At any point before the operation has completed, the status can be set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperationStatus Status { get; }\n    return:\n      type: System.Windows.Threading.DispatcherOperationStatus\n      description: The status of the operation.\n  overload: System.Windows.Threading.DispatcherOperation.Status*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.DispatcherOperation.Task\n  commentId: P:System.Windows.Threading.DispatcherOperation.Task\n  id: Task\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Task\n  nameWithType: DispatcherOperation.Task\n  fullName: DispatcherOperation.Task\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Gets a <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the current operation.\n  syntax:\n    content: public System.Threading.Tasks.Task Task { get; }\n    return:\n      type: System.Threading.Tasks.Task\n      description: An object that represents the current operation.\n  overload: System.Windows.Threading.DispatcherOperation.Task*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Threading.DispatcherOperation.Wait\n  commentId: M:System.Windows.Threading.DispatcherOperation.Wait\n  id: Wait\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Wait()\n  nameWithType: DispatcherOperation.Wait()\n  fullName: DispatcherOperation.Wait()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Waits for the operation to complete\n  remarks: To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.\n  syntax:\n    content: public System.Windows.Threading.DispatcherOperationStatus Wait ();\n    parameters: []\n    return:\n      type: System.Windows.Threading.DispatcherOperationStatus\n      description: The status of the operation.\n  overload: System.Windows.Threading.DispatcherOperation.Wait*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Windows.Threading.DispatcherOperation.Status\"></xref> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus.Executing\"></xref>.  This can occur when waiting for an operation that is already executing on the same thread.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)\n  commentId: M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)\n  id: Wait(System.TimeSpan)\n  parent: System.Windows.Threading.DispatcherOperation\n  langs:\n  - csharp\n  name: Wait(TimeSpan)\n  nameWithType: DispatcherOperation.Wait(TimeSpan)\n  fullName: DispatcherOperation.Wait(TimeSpan)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Threading\n  summary: Waits for the operation to complete in the specified period of time.\n  remarks: To obtain the return value of the invoked delegate, use the <xref:System.Windows.Threading.DispatcherOperation.Result%2A> property.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public System.Windows.Threading.DispatcherOperationStatus Wait (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The maximum period of time to wait.\n    return:\n      type: System.Windows.Threading.DispatcherOperationStatus\n      description: The status of the operation.\n  overload: System.Windows.Threading.DispatcherOperation.Wait*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Windows.Threading.DispatcherOperation.Status\"></xref> is equal to <xref href=\"System.Windows.Threading.DispatcherOperationStatus.Executing\"></xref>.  This can occur when waiting for an operation that is already executing on the same thread.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Windows.Threading.DispatcherOperation.Abort\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Abort()\n  nameWithType: DispatcherOperation.Abort()\n  fullName: DispatcherOperation.Abort()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Threading.DispatcherOperation.Aborted\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Aborted\n  nameWithType: DispatcherOperation.Aborted\n  fullName: DispatcherOperation.Aborted\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Threading.DispatcherOperation.Completed\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Completed\n  nameWithType: DispatcherOperation.Completed\n  fullName: DispatcherOperation.Completed\n- uid: System.Windows.Threading.DispatcherOperation.Dispatcher\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherOperation.Dispatcher\n  fullName: DispatcherOperation.Dispatcher\n- uid: System.Windows.Threading.Dispatcher\n  parent: System.Windows.Threading\n  isExternal: false\n  name: Dispatcher\n  nameWithType: Dispatcher\n  fullName: System.Windows.Threading.Dispatcher\n- uid: System.Windows.Threading.DispatcherOperation.GetAwaiter\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: GetAwaiter()\n  nameWithType: DispatcherOperation.GetAwaiter()\n  fullName: DispatcherOperation.GetAwaiter()\n- uid: System.Runtime.CompilerServices.TaskAwaiter\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: TaskAwaiter\n  nameWithType: TaskAwaiter\n  fullName: System.Runtime.CompilerServices.TaskAwaiter\n- uid: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: InvokeDelegateCore()\n  nameWithType: DispatcherOperation.InvokeDelegateCore()\n  fullName: DispatcherOperation.InvokeDelegateCore()\n- uid: System.Windows.Threading.DispatcherOperation.Priority\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Priority\n  nameWithType: DispatcherOperation.Priority\n  fullName: DispatcherOperation.Priority\n- uid: System.Windows.Threading.DispatcherPriority\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherPriority\n  nameWithType: DispatcherPriority\n  fullName: System.Windows.Threading.DispatcherPriority\n- uid: System.Windows.Threading.DispatcherOperation.Result\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Result\n  nameWithType: DispatcherOperation.Result\n  fullName: DispatcherOperation.Result\n- uid: System.Windows.Threading.DispatcherOperation.Status\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Status\n  nameWithType: DispatcherOperation.Status\n  fullName: DispatcherOperation.Status\n- uid: System.Windows.Threading.DispatcherOperationStatus\n  parent: System.Windows.Threading\n  isExternal: false\n  name: DispatcherOperationStatus\n  nameWithType: DispatcherOperationStatus\n  fullName: System.Windows.Threading.DispatcherOperationStatus\n- uid: System.Windows.Threading.DispatcherOperation.Task\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Task\n  nameWithType: DispatcherOperation.Task\n  fullName: DispatcherOperation.Task\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Windows.Threading.DispatcherOperation.Wait\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Wait()\n  nameWithType: DispatcherOperation.Wait()\n  fullName: DispatcherOperation.Wait()\n- uid: System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Wait(TimeSpan)\n  nameWithType: DispatcherOperation.Wait(TimeSpan)\n  fullName: DispatcherOperation.Wait(TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Windows.Threading.DispatcherOperation.Abort*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Abort\n  nameWithType: DispatcherOperation.Abort\n  fullName: DispatcherOperation.Abort\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n- uid: System.Windows.Threading.DispatcherOperation.Dispatcher*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherOperation.Dispatcher\n  fullName: DispatcherOperation.Dispatcher\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n- uid: System.Windows.Threading.DispatcherOperation.GetAwaiter*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: GetAwaiter\n  nameWithType: DispatcherOperation.GetAwaiter\n  fullName: DispatcherOperation.GetAwaiter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n- uid: System.Windows.Threading.DispatcherOperation.InvokeDelegateCore*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: InvokeDelegateCore\n  nameWithType: DispatcherOperation.InvokeDelegateCore\n  fullName: DispatcherOperation.InvokeDelegateCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n- uid: System.Windows.Threading.DispatcherOperation.Priority*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Priority\n  nameWithType: DispatcherOperation.Priority\n  fullName: DispatcherOperation.Priority\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n- uid: System.Windows.Threading.DispatcherOperation.Result*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Result\n  nameWithType: DispatcherOperation.Result\n  fullName: DispatcherOperation.Result\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n- uid: System.Windows.Threading.DispatcherOperation.Status*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Status\n  nameWithType: DispatcherOperation.Status\n  fullName: DispatcherOperation.Status\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n- uid: System.Windows.Threading.DispatcherOperation.Task*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Task\n  nameWithType: DispatcherOperation.Task\n  fullName: DispatcherOperation.Task\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n- uid: System.Windows.Threading.DispatcherOperation.Wait*\n  parent: System.Windows.Threading.DispatcherOperation\n  isExternal: false\n  name: Wait\n  nameWithType: DispatcherOperation.Wait\n  fullName: DispatcherOperation.Wait\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Threading/DispatcherOperation.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}