<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a39117f48ddc8cf61189b1cd1943c47e5a388b1f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Net.PeerToPeer.PeerNameResolver.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0fa447fd01f3134183d84ef518351491397bf084</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c94d81c45209a8120c8a5a4d094bb02b94d63d06</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies the values that resolve a <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> to a <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.PeerNameRecord"&gt;&lt;/xref&gt;</ph> using the PNRP Namespace Provider API protocol.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> which contains all the information for the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> that was published in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> or cloud(s) that were queried during the resolve process.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Initializes a new default instance of the <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameResolver"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>After successfully resolving a <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>, the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> contains all the information for the specified <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A&gt;</ph> that was published in the cloud(s) that were queried during the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> operation.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Returns peer resolution data after the <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted"&gt;&lt;/xref&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an asynchronous callback used to process peer name resolution data after peer resolution has completed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived types can override this method to perform additional tasks when the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event is raised by the peer resolver object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.ResolveCompletedEventArgs"&gt;&lt;/xref&gt;</ph> object that contains the data returned by the <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Returns peer resolution progress data when the <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged"&gt;&lt;/xref&gt;</ph> event is raised.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is an asynchronous callback used to process peer resolution data after peer resolution progress has been requested.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Derived types can override this method to perform additional tasks when the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event occurs.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Net.PeerToPeer.ResolveProgressChangedEventArgs"&gt;&lt;/xref&gt;</ph> object that contains peer name resolution progress information returned by the <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Resolves the specified <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> in all clouds known to the calling peer.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method associates a peer name to clouds.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>All clouds are queried for the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the peer name cannot be resolved or is <ph id="ph1">`null`</ph>, an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method for each peer name record in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is not supplied, the method uses the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in cloud parameters.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> to resolve.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameRecordCollection"&gt;&lt;/xref&gt;</ph> that contains all peer name records (represented as <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.PeerNameRecord"&gt;&lt;/xref&gt;</ph> objects) associated with the specified peer name.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For unsecured peer names, the same <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> can be registered by different users in the same <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.Cloud"&gt;&lt;/xref&gt;</ph>, and associated with different endpoints.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">peerName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The peer name specified cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Resolves the specified peer name in all clouds known to the calling peer, returning no more than the specified number of <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameRecord"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method associates a peer name to clouds.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>All clouds are queried for the peer name.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For unsecured peer names, the same peer name can be registered by different users in the same <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph>, and associated with different endpoints.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> cannot be resolved (for example, the peer name is not published) an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> to resolve.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The maximum number of <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameRecord"&gt;&lt;/xref&gt;</ph> objects to obtain from all <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.Cloud"&gt;&lt;/xref&gt;</ph> objects for the supplied <bpt id="p1">&lt;code&gt;</bpt><ph id="ph3">peerName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameRecordCollection"&gt;&lt;/xref&gt;</ph> whose size is less than or equal to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">maxRecords</ph><ept id="p1">&lt;/code&gt;</ept> entries.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This collection contains peer name records associated with the <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> that was resolved.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">peerName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxRecords</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The supplied peer name cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Resolves the specified <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameRecord.PeerName"&gt;&lt;/xref&gt;</ph> in the specified <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.Cloud"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> cannot be resolved (i.e., the peer name is not published) an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> uses the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in the <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> to resolve.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.Cloud"&gt;&lt;/xref&gt;</ph> in which to resolve the peer name.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameRecordCollection"&gt;&lt;/xref&gt;</ph> that contains all peer name records (represented as <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.PeerNameRecord"&gt;&lt;/xref&gt;</ph> objects) associated with the specified peer name.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For unsecured peer names, the same <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> can be registered by different users in the same <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.Cloud"&gt;&lt;/xref&gt;</ph>, and associated with different endpoints.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">peerName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The supplied peer name cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Resolves the specified <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameRecord.PeerName"&gt;&lt;/xref&gt;</ph> in the specified <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.Cloud"&gt;&lt;/xref&gt;</ph>, returning no more than the specified number of <ph id="ph3">&lt;xref href="System.Net.PeerToPeer.PeerNameRecord"&gt;&lt;/xref&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the peer name cannot be resolved, an <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> uses the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut to fill in the <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> to resolve.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.Cloud"&gt;&lt;/xref&gt;</ph> in which to resolve the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">peerName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The maximum number of peer name record objects to obtain from the specified cloud for the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">peerName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameRecordCollection"&gt;&lt;/xref&gt;</ph> whose size is less than or equal to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">maxRecords</ph><ept id="p1">&lt;/code&gt;</ept> entries.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This collection contains peer name records associated with the <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> that was resolved.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">peerName</ph><ept id="p1">&lt;/code&gt;</ept> parameter is set to <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxRecords</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The supplied peer name cannot be resolved.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameRecord.PeerName"&gt;&lt;/xref&gt;</ph> in all clouds known to the calling peer.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method asynchronously associates a peer name to clouds.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>All clouds are queried for the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>It raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the peer name cannot be resolved, an <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver&gt;</ph> method is similar to calling the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method for each peer name record in the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.PeerNameRecordCollection&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that using the Resolve method on an individual peer name record does not invalidate resolving multiple peer names.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>All asynchronous references to the resolver object are coordinated with a unique identifier token.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> to resolve.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains state information about the peer name resolution operation.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>One or both of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">peerName</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">userState</ph><ept id="p2">&lt;/code&gt;</ept> parameters are set to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> in all clouds known to the calling peer, returning no more than <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">maxRecords</ph><ept id="p1">&lt;/code&gt;</ept> entries for the peer name.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method asynchronously associates a peer name to clouds.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>All clouds are queried for the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the peer name cannot be resolved or is <ph id="ph1">`null`</ph>, an <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerToPeerException&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>All asynchronous references to the resolver object are coordinated with a unique identifier token <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> to resolve.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The maximum number of records to obtain for the Peer Name.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the resolve operation.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>One or both of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">peerName</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">userState</ph><ept id="p2">&lt;/code&gt;</ept> parameters are set to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxRecords</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> in the specified <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.Cloud"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the name is resolved using the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut, which initializes default values for the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>All asynchronous references to the resolver object are coordinated with a unique identifier token.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> to resolve.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.Cloud"&gt;&lt;/xref&gt;</ph> in which to resolve the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">peerName</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A user-defined <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> that contains information about the peer name resolution operation.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>One or both of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">peerName</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">userState</ph><ept id="p2">&lt;/code&gt;</ept> parameters are set to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Begins an asynchronous peer name resolution operation for the specified <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph> in the specified <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.Cloud"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The resolution operation will resolve no more than <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxRecords</ph><ept id="p1">&lt;/code&gt;</ept> entries for the specified peer name.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT">
          <source>For unsecured peer names, the same name can be registered (and associated with different endpoints) by different peers within the same cloud.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveCompleted%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>Or, it raises the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event, which calls back to the <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.OnResolveProgressChanged%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.Cloud&gt;</ph> parameter is <ph id="ph2">`null`</ph>, the name is resolved using the <ph id="ph3">&lt;xref:System.Net.PeerToPeer.Cloud.Available&gt;</ph> shortcut, which initializes default values for the <ph id="ph4">&lt;xref:System.Net.PeerToPeer.Cloud.Name%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Net.PeerToPeer.Cloud.Scope%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Net.PeerToPeer.Cloud.ScopeId%2A&gt;</ph> properties.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>For every <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveAsync%2A&gt;</ph> method, there is an equivalent <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>Their parameter lists are identical, except that the ResolveAsync method includes a system token for asynchronous event handling, and the Resolve method is intended for synchronous processing.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>All asynchronous references to the peer resolver object are coordinated with a unique identifier token <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>This <ph id="ph1">`userState`</ph> token or message identifier allows an operating system to deliver a message to a single receiving process after the message has been placed on the message queue.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event will be raised if the resolve operation completes in error or is canceled.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">peerName</ph><ept id="p1">&lt;/code&gt;</ept> to resolve.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">cloud</ph><ept id="p1">&lt;/code&gt;</ept> in which to resolve <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">peerName</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The maximum number of records to obtain from <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">cloud</ph><ept id="p1">&lt;/code&gt;</ept> for <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">peerName</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>A user-defined object that contains information about the peer name resolution operation.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>One or both of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">peerName</ph><ept id="p1">&lt;/code&gt;</ept> and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">userState</ph><ept id="p2">&lt;/code&gt;</ept> parameters are set to <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>One or more supplied parameters are invalid.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Successful completion of this operation requires at least one event handler.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">maxRecords</ph><ept id="p1">&lt;/code&gt;</ept> parameter is less than or equal to zero.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Cancels the specified asynchronous peer name resolution request.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method guarantees the system will not attempt to obtain additional records for the specified <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this method is called when an asynchronous peer name resolution operation is not outstanding, it acts as a "no operation" (NO OP).</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`userState`</ph> object must be provided since it is used to track a specific asynchronous call when multiple calls are in progress.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>This caller-supplied object is unique for each peer name resolution request.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method will return immediately, but the operation may or may not immediately cancel.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The event arguments returned by the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted&gt;</ph> event contains a field which can be polled by clients to determine whether cancellation occurred.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method ensures the ResolveCompleted event will be signaled as soon as possible with the event argument <ph id="ph1">&lt;xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A&gt;</ph> set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The object provided to the <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*"&gt;&lt;/xref&gt;</ph> method instance which started the resolve operation.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">userState</ph><ept id="p1">&lt;/code&gt;</ept> parameters cannot be <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameResolver.ResolveCompleted"&gt;&lt;/xref&gt;</ph> event is signaled when a peer name resolution request for a specific <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.PeerNameRegistration.PeerName"&gt;&lt;/xref&gt;</ph> has completed.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.ResolveProgressChanged&gt;</ph> event will be raised once for each endpoint found, and this event will be raised only once when all endpoints have been found.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event will also be raised if the <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerNameResolver.Resolve%2A&gt;</ph> operation completes in error or is canceled.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>This event is signaled whenever a <ph id="ph1">&lt;xref href="System.Net.PeerToPeer.PeerNameRecord"&gt;&lt;/xref&gt;</ph> object is found in response to a <ph id="ph2">&lt;xref href="System.Net.PeerToPeer.PeerNameResolver.ResolveAsync*"&gt;&lt;/xref&gt;</ph> operation for a specific <ph id="ph3">&lt;xref href="System.Net.PeerToPeer.PeerName"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>If multiple <ph id="ph1">&lt;xref:System.Net.PeerToPeer.PeerName&gt;</ph> objects exist in the cloud(s) being queried, this event is signaled once for each <ph id="ph2">&lt;xref:System.Net.PeerToPeer.PeerNameRecord&gt;</ph> found.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>