### YamlMime:ManagedReference
items:
- uid: System.Security.IStackWalk
  commentId: T:System.Security.IStackWalk
  id: IStackWalk
  children:
  - System.Security.IStackWalk.Assert
  - System.Security.IStackWalk.Demand
  - System.Security.IStackWalk.Deny
  - System.Security.IStackWalk.PermitOnly
  langs:
  - csharp
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
  type: Interface
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.
  remarks: "Partially trusted code always presents a security risk. It can sometimes be manipulated to perform actions on behalf of malicious code that does not have permission to access a resource. In this way, malicious code can achieve higher security access than it should be allowed.  \n  \n The common language runtime helps protect managed code from these attacks by running a stack walk on all calls. The stack walk requires that all code in the call stack has permission to access a protected resource. Because the code attempting the attack will always be somewhere in the call stack, it will be unable to exceed its own security permissions."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IStackWalk
  derivedClasses:
  - System.Security.CodeAccessPermission
  - System.Security.PermissionSet
  implements: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IStackWalk.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.IStackWalk.Assert
  commentId: M:System.Security.IStackWalk.Assert
  id: Assert
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: IStackWalk.Assert()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.
  remarks: "Calling <xref:System.Security.IStackWalk.Assert%2A> stops the permission check on callers higher in the call stack. Therefore, even if these callers do not have the requisite permissions, they can still access resources. An assertion is effective only if the code that calls <xref:System.Security.IStackWalk.Assert%2A> passes the security check for the permission that it is asserting.  \n  \n A call to <xref:System.Security.IStackWalk.Assert%2A> is effective until the calling code returns to its caller or until a subsequent call to <xref:System.Security.IStackWalk.Assert%2A> renders the previous assertion ineffective. Also, <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> removes a pending <xref:System.Security.IStackWalk.Assert%2A>.  \n  \n <xref:System.Security.IStackWalk.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.Assert%2A>. This happens because the code that called <xref:System.Security.IStackWalk.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.IStackWalk.Assert%2A> it.  \n  \n> [!CAUTION]\n>  Because calling <xref:System.Security.IStackWalk.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately. Therefore, it should be used with great caution."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.IStackWalk.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The calling code does not have <xref href="System.Security.Permissions.SecurityPermissionFlag.Assertion"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IStackWalk.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.IStackWalk.Demand
  commentId: M:System.Security.IStackWalk.Demand
  id: Demand
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: IStackWalk.Demand()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.
  remarks: "This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <xref:System.Security.IStackWalk.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.  \n  \n The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. <xref:System.Security.IStackWalk.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised."
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IStackWalk.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "A caller higher in the call stack does not have the permission specified by the current permission object.  \n  \n -or-  \n  \n A caller in the call stack has called <xref href=\"System.Security.IStackWalk.Deny\"></xref> on the current permission object."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IStackWalk.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.IStackWalk.Deny
  commentId: M:System.Security.IStackWalk.Deny
  id: Deny
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: IStackWalk.Deny()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Causes every <xref href="System.Security.IStackWalk.Demand"></xref> for the current object that passes through the calling code to fail.
  remarks: "This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.  \n  \n <xref:System.Security.IStackWalk.Deny%2A> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <xref:System.Security.IStackWalk.Deny%2A> from being used to access the resource protected by the denied permission. If a method calls <xref:System.Security.IStackWalk.Deny%2A> on a permission, and if a <xref:System.Security.IStackWalk.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.IStackWalk.Deny%2A>.  \n  \n <xref:System.Security.IStackWalk.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.IStackWalk.Deny*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IStackWalk.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.IStackWalk.PermitOnly
  commentId: M:System.Security.IStackWalk.PermitOnly
  id: PermitOnly
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: IStackWalk.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  - System.Security.Permissions
  namespace: System.Security
  summary: Causes every <xref href="System.Security.IStackWalk.Demand"></xref> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.
  remarks: "<xref:System.Security.IStackWalk.PermitOnly%2A> is similar to <xref:System.Security.IStackWalk.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed. The difference is that <xref:System.Security.IStackWalk.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.IStackWalk.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail. Call this method to ensure that your code can be used to access only the specified resources.  \n  \n <xref:System.Security.IStackWalk.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack later calls <xref:System.Security.IStackWalk.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.IStackWalk.PermitOnly%2A>. This is because the code that called <xref:System.Security.IStackWalk.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.IStackWalk.PermitOnly%2A> for that permission. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.IStackWalk.PermitOnly*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IStackWalk.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.Security.IStackWalk.Assert
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: IStackWalk.Assert()
- uid: System.Security.IStackWalk.Demand
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: IStackWalk.Demand()
- uid: System.Security.IStackWalk.Deny
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: IStackWalk.Deny()
- uid: System.Security.IStackWalk.PermitOnly
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: IStackWalk.PermitOnly()
- uid: System.Security.IStackWalk.Assert*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert
  nameWithType: IStackWalk.Assert
  fullName: IStackWalk.Assert
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IStackWalk.xml
- uid: System.Security.IStackWalk.Demand*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand
  nameWithType: IStackWalk.Demand
  fullName: IStackWalk.Demand
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IStackWalk.xml
- uid: System.Security.IStackWalk.Deny*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny
  nameWithType: IStackWalk.Deny
  fullName: IStackWalk.Deny
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IStackWalk.xml
- uid: System.Security.IStackWalk.PermitOnly*
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly
  nameWithType: IStackWalk.PermitOnly
  fullName: IStackWalk.PermitOnly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/IStackWalk.xml
