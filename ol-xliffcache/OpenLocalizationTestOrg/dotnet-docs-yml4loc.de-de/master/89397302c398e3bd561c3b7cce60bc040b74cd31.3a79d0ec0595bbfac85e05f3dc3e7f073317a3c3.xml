{"nodes":[{"content":"Implemented by a class that needs to add custom state to the navigation history entry for content before the content is navigated away from.","nodes":[{"pos":[0,140],"content":"Implemented by a class that needs to add custom state to the navigation history entry for content before the content is navigated away from.","nodes":[{"content":"Implemented by a class that needs to add custom state to the navigation history entry for content before the content is navigated away from.","pos":[0,140]}]}],"pos":[553,694],"yaml":true},{"content":"<xref:System.Windows.Navigation.IProvideCustomContentState> allows you to associate a piece of custom state, implemented as a custom <xref:System.Windows.Navigation.CustomContentState> class, with the navigation history entry for content that has been navigated away from.  \n  \n Custom state can also be associated in this way by using the following:  \n  \n-   Calling **AddBackEntry**:  \n  \n    -   <xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A?displayProperty=fullName>  \n  \n    -   <xref:System.Windows.Navigation.NavigationWindow.AddBackEntry%2A?displayProperty=fullName>  \n  \n    -   <xref:System.Windows.Controls.Frame.AddBackEntry%2A?displayProperty=fullName>.  \n  \n-   Setting <xref:System.Windows.Navigation.NavigatingCancelEventArgs.Content%2A?displayProperty=fullName> when one of the following events are raised:  \n  \n    -   <xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=fullName>  \n  \n    -   <xref:System.Windows.Navigation.NavigationWindow.Navigating?displayProperty=fullName>  \n  \n    -   <xref:System.Windows.Controls.Frame.Navigating?displayProperty=fullName>  \n  \n    -   <xref:System.Windows.Navigation.NavigationWindow.Navigating?displayProperty=fullName>  \n  \n You must implement <xref:System.Windows.Navigation.IProvideCustomContentState> when you add custom state to navigation history by calling **AddBackEntry**, otherwise navigation history will not function correctly; consider the following steps:  \n  \n1.  **AddBackEntry** is called to associate a custom state with the current content.  \n  \n2.  The navigation history entry is navigated back to, and the <xref:System.Windows.Navigation.CustomContentState.Replay%2A> method of the custom state is called, and the state is applied to the content.  \n  \n3.  The previous content is navigated to in forward navigation history.  \n  \n4.  The navigation history entry is navigated back to, but the custom state has not been retained since the last time the navigation history entry it was associated with was navigated to.  \n  \n This is the default behavior because the state that is initially recorded in custom state may change after it was added to navigation history. If the custom state object is navigated back to and its state is applied, before some aspect about the state changes before the entry in navigation history is navigated to, the change in state cannot be reflected in the custom state object. Furthermore, <xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A> can't be explicitly called to add a new custom state object that reflects the state changes. Consequently, to ensure the current state for a particular navigation is always stored in navigation history, <xref:System.Windows.Navigation.IProvideCustomContentState.GetContentState%2A> is called.  \n  \n> [!IMPORTANT]\n>  When you store information in custom content state, you cannot store any references to the instance of the page for which you are remembering state. This prevents [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] from releasing the page instance, and defeats the purpose of the default navigation history behavior. If you must do this, you might consider using <xref:System.Windows.Controls.Page.KeepAlive%2A> instead.","nodes":[{"pos":[0,272],"content":"<xref:System.Windows.Navigation.IProvideCustomContentState> allows you to associate a piece of custom state, implemented as a custom <xref:System.Windows.Navigation.CustomContentState> class, with the navigation history entry for content that has been navigated away from.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Navigation.IProvideCustomContentState&gt;</ph> allows you to associate a piece of custom state, implemented as a custom <ph id=\"ph2\">&lt;xref:System.Windows.Navigation.CustomContentState&gt;</ph> class, with the navigation history entry for content that has been navigated away from.","pos":[0,272],"source":"<xref:System.Windows.Navigation.IProvideCustomContentState> allows you to associate a piece of custom state, implemented as a custom <xref:System.Windows.Navigation.CustomContentState> class, with the navigation history entry for content that has been navigated away from."}]},{"pos":[279,350],"content":"Custom state can also be associated in this way by using the following:","nodes":[{"content":"Custom state can also be associated in this way by using the following:","pos":[0,71]}]},{"pos":[360,385],"content":"Calling <bpt id=\"p1\">**</bpt>AddBackEntry<ept id=\"p1\">**</ept>:","source":"Calling **AddBackEntry**:"},{"pos":[399,490],"content":"<xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A?displayProperty=fullName>","nodes":[]},{"pos":[504,594],"content":"<xref:System.Windows.Navigation.NavigationWindow.AddBackEntry%2A?displayProperty=fullName>","nodes":[]},{"pos":[608,686],"content":"<xref:System.Windows.Controls.Frame.AddBackEntry%2A?displayProperty=fullName>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.Frame.AddBackEntry%2A?displayProperty=fullName&gt;</ph>.","pos":[0,78],"source":"<xref:System.Windows.Controls.Frame.AddBackEntry%2A?displayProperty=fullName>."}]},{"pos":[696,843],"content":"Setting <xref:System.Windows.Navigation.NavigatingCancelEventArgs.Content%2A?displayProperty=fullName> when one of the following events are raised:","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Windows.Navigation.NavigatingCancelEventArgs.Content%2A?displayProperty=fullName&gt;</ph> when one of the following events are raised:","pos":[0,147],"source":"Setting <xref:System.Windows.Navigation.NavigatingCancelEventArgs.Content%2A?displayProperty=fullName> when one of the following events are raised:"}]},{"pos":[857,943],"content":"<xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=fullName>","nodes":[]},{"pos":[957,1042],"content":"<xref:System.Windows.Navigation.NavigationWindow.Navigating?displayProperty=fullName>","nodes":[]},{"pos":[1056,1128],"content":"<xref:System.Windows.Controls.Frame.Navigating?displayProperty=fullName>","nodes":[]},{"pos":[1142,1227],"content":"<xref:System.Windows.Navigation.NavigationWindow.Navigating?displayProperty=fullName>","nodes":[]},{"pos":[1234,1477],"content":"You must implement <ph id=\"ph1\">&lt;xref:System.Windows.Navigation.IProvideCustomContentState&gt;</ph> when you add custom state to navigation history by calling <bpt id=\"p1\">**</bpt>AddBackEntry<ept id=\"p1\">**</ept>, otherwise navigation history will not function correctly; consider the following steps:","source":"You must implement <xref:System.Windows.Navigation.IProvideCustomContentState> when you add custom state to navigation history by calling **AddBackEntry**, otherwise navigation history will not function correctly; consider the following steps:"},{"pos":[1487,1567],"content":"<bpt id=\"p1\">**</bpt>AddBackEntry<ept id=\"p1\">**</ept> is called to associate a custom state with the current content.","source":"**AddBackEntry** is called to associate a custom state with the current content."},{"pos":[1577,1776],"content":"The navigation history entry is navigated back to, and the <xref:System.Windows.Navigation.CustomContentState.Replay%2A> method of the custom state is called, and the state is applied to the content.","nodes":[{"content":"The navigation history entry is navigated back to, and the <ph id=\"ph1\">&lt;xref:System.Windows.Navigation.CustomContentState.Replay%2A&gt;</ph> method of the custom state is called, and the state is applied to the content.","pos":[0,199],"source":"The navigation history entry is navigated back to, and the <xref:System.Windows.Navigation.CustomContentState.Replay%2A> method of the custom state is called, and the state is applied to the content."}]},{"pos":[1786,1853],"content":"The previous content is navigated to in forward navigation history.","nodes":[{"content":"The previous content is navigated to in forward navigation history.","pos":[0,67]}]},{"pos":[1863,2046],"content":"The navigation history entry is navigated back to, but the custom state has not been retained since the last time the navigation history entry it was associated with was navigated to.","nodes":[{"content":"The navigation history entry is navigated back to, but the custom state has not been retained since the last time the navigation history entry it was associated with was navigated to.","pos":[0,183]}]},{"pos":[2053,2809],"content":"This is the default behavior because the state that is initially recorded in custom state may change after it was added to navigation history. If the custom state object is navigated back to and its state is applied, before some aspect about the state changes before the entry in navigation history is navigated to, the change in state cannot be reflected in the custom state object. Furthermore, <xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A> can't be explicitly called to add a new custom state object that reflects the state changes. Consequently, to ensure the current state for a particular navigation is always stored in navigation history, <xref:System.Windows.Navigation.IProvideCustomContentState.GetContentState%2A> is called.","nodes":[{"content":"This is the default behavior because the state that is initially recorded in custom state may change after it was added to navigation history. If the custom state object is navigated back to and its state is applied, before some aspect about the state changes before the entry in navigation history is navigated to, the change in state cannot be reflected in the custom state object. Furthermore, <xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A> can't be explicitly called to add a new custom state object that reflects the state changes. Consequently, to ensure the current state for a particular navigation is always stored in navigation history, <xref:System.Windows.Navigation.IProvideCustomContentState.GetContentState%2A> is called.","pos":[0,756],"nodes":[{"content":"This is the default behavior because the state that is initially recorded in custom state may change after it was added to navigation history.","pos":[0,142]},{"content":"If the custom state object is navigated back to and its state is applied, before some aspect about the state changes before the entry in navigation history is navigated to, the change in state cannot be reflected in the custom state object.","pos":[143,383]},{"content":"Furthermore, <ph id=\"ph1\">&lt;xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A&gt;</ph> can't be explicitly called to add a new custom state object that reflects the state changes.","pos":[384,556],"source":" Furthermore, <xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A> can't be explicitly called to add a new custom state object that reflects the state changes."},{"content":"Consequently, to ensure the current state for a particular navigation is always stored in navigation history, <ph id=\"ph1\">&lt;xref:System.Windows.Navigation.IProvideCustomContentState.GetContentState%2A&gt;</ph> is called.","pos":[557,756],"source":" Consequently, to ensure the current state for a particular navigation is always stored in navigation history, <xref:System.Windows.Navigation.IProvideCustomContentState.GetContentState%2A> is called."}]}]},{"pos":[2817,3261],"content":"[!IMPORTANT]\n When you store information in custom content state, you cannot store any references to the instance of the page for which you are remembering state. This prevents [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] from releasing the page instance, and defeats the purpose of the default navigation history behavior. If you must do this, you might consider using <xref:System.Windows.Controls.Page.KeepAlive%2A> instead.","leadings":["","> "],"nodes":[{"content":" When you store information in custom content state, you cannot store any references to the instance of the page for which you are remembering state. This prevents [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] from releasing the page instance, and defeats the purpose of the default navigation history behavior. If you must do this, you might consider using <xref:System.Windows.Controls.Page.KeepAlive%2A> instead.","pos":[13,442],"nodes":[{"content":"When you store information in custom content state, you cannot store any references to the instance of the page for which you are remembering state.","pos":[1,149]},{"content":"This prevents <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> from releasing the page instance, and defeats the purpose of the default navigation history behavior.","pos":[150,325],"source":" This prevents [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] from releasing the page instance, and defeats the purpose of the default navigation history behavior."},{"content":"If you must do this, you might consider using <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Page.KeepAlive%2A&gt;</ph> instead.","pos":[326,429],"source":" If you must do this, you might consider using <xref:System.Windows.Controls.Page.KeepAlive%2A> instead."}]}]}],"pos":[705,4004],"yaml":true,"extradata":"MT"},{"content":"Returns an instance of a custom state class that is to be associated with content in navigation history.","nodes":[{"pos":[0,104],"content":"Returns an instance of a custom state class that is to be associated with content in navigation history.","nodes":[{"content":"Returns an instance of a custom state class that is to be associated with content in navigation history.","pos":[0,104]}]}],"pos":[5149,5254],"yaml":true},{"content":"An instance of a custom <xref href=\"System.Windows.Navigation.CustomContentState\"></xref> class that is to be associated with content in navigation history.","nodes":[{"pos":[0,156],"content":"An instance of a custom <ph id=\"ph1\">&lt;xref href=\"System.Windows.Navigation.CustomContentState\"&gt;&lt;/xref&gt;</ph> class that is to be associated with content in navigation history.","source":"An instance of a custom <xref href=\"System.Windows.Navigation.CustomContentState\"></xref> class that is to be associated with content in navigation history."}],"pos":[5456,5613],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Navigation.IProvideCustomContentState\n  commentId: T:System.Windows.Navigation.IProvideCustomContentState\n  id: IProvideCustomContentState\n  children:\n  - System.Windows.Navigation.IProvideCustomContentState.GetContentState\n  langs:\n  - csharp\n  name: IProvideCustomContentState\n  nameWithType: IProvideCustomContentState\n  fullName: System.Windows.Navigation.IProvideCustomContentState\n  type: Interface\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Navigation\n  summary: Implemented by a class that needs to add custom state to the navigation history entry for content before the content is navigated away from.\n  remarks: \"<xref:System.Windows.Navigation.IProvideCustomContentState> allows you to associate a piece of custom state, implemented as a custom <xref:System.Windows.Navigation.CustomContentState> class, with the navigation history entry for content that has been navigated away from.  \\n  \\n Custom state can also be associated in this way by using the following:  \\n  \\n-   Calling **AddBackEntry**:  \\n  \\n    -   <xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A?displayProperty=fullName>  \\n  \\n    -   <xref:System.Windows.Navigation.NavigationWindow.AddBackEntry%2A?displayProperty=fullName>  \\n  \\n    -   <xref:System.Windows.Controls.Frame.AddBackEntry%2A?displayProperty=fullName>.  \\n  \\n-   Setting <xref:System.Windows.Navigation.NavigatingCancelEventArgs.Content%2A?displayProperty=fullName> when one of the following events are raised:  \\n  \\n    -   <xref:System.Windows.Navigation.NavigationService.Navigating?displayProperty=fullName>  \\n  \\n    -   <xref:System.Windows.Navigation.NavigationWindow.Navigating?displayProperty=fullName>  \\n  \\n    -   <xref:System.Windows.Controls.Frame.Navigating?displayProperty=fullName>  \\n  \\n    -   <xref:System.Windows.Navigation.NavigationWindow.Navigating?displayProperty=fullName>  \\n  \\n You must implement <xref:System.Windows.Navigation.IProvideCustomContentState> when you add custom state to navigation history by calling **AddBackEntry**, otherwise navigation history will not function correctly; consider the following steps:  \\n  \\n1.  **AddBackEntry** is called to associate a custom state with the current content.  \\n  \\n2.  The navigation history entry is navigated back to, and the <xref:System.Windows.Navigation.CustomContentState.Replay%2A> method of the custom state is called, and the state is applied to the content.  \\n  \\n3.  The previous content is navigated to in forward navigation history.  \\n  \\n4.  The navigation history entry is navigated back to, but the custom state has not been retained since the last time the navigation history entry it was associated with was navigated to.  \\n  \\n This is the default behavior because the state that is initially recorded in custom state may change after it was added to navigation history. If the custom state object is navigated back to and its state is applied, before some aspect about the state changes before the entry in navigation history is navigated to, the change in state cannot be reflected in the custom state object. Furthermore, <xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A> can't be explicitly called to add a new custom state object that reflects the state changes. Consequently, to ensure the current state for a particular navigation is always stored in navigation history, <xref:System.Windows.Navigation.IProvideCustomContentState.GetContentState%2A> is called.  \\n  \\n> [!IMPORTANT]\\n>  When you store information in custom content state, you cannot store any references to the instance of the page for which you are remembering state. This prevents [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] from releasing the page instance, and defeats the purpose of the default navigation history behavior. If you must do this, you might consider using <xref:System.Windows.Controls.Page.KeepAlive%2A> instead.\"\n  syntax:\n    content: public interface IProvideCustomContentState\n  implements: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Navigation/IProvideCustomContentState.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Navigation.IProvideCustomContentState.GetContentState\n  commentId: M:System.Windows.Navigation.IProvideCustomContentState.GetContentState\n  id: GetContentState\n  parent: System.Windows.Navigation.IProvideCustomContentState\n  langs:\n  - csharp\n  name: GetContentState()\n  nameWithType: IProvideCustomContentState.GetContentState()\n  fullName: IProvideCustomContentState.GetContentState()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Navigation\n  summary: Returns an instance of a custom state class that is to be associated with content in navigation history.\n  syntax:\n    content: public System.Windows.Navigation.CustomContentState GetContentState ();\n    parameters: []\n    return:\n      type: System.Windows.Navigation.CustomContentState\n      description: An instance of a custom <xref href=\"System.Windows.Navigation.CustomContentState\"></xref> class that is to be associated with content in navigation history.\n  overload: System.Windows.Navigation.IProvideCustomContentState.GetContentState*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Navigation/IProvideCustomContentState.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Navigation.IProvideCustomContentState.GetContentState\n  parent: System.Windows.Navigation.IProvideCustomContentState\n  isExternal: false\n  name: GetContentState()\n  nameWithType: IProvideCustomContentState.GetContentState()\n  fullName: IProvideCustomContentState.GetContentState()\n- uid: System.Windows.Navigation.CustomContentState\n  parent: System.Windows.Navigation\n  isExternal: false\n  name: CustomContentState\n  nameWithType: CustomContentState\n  fullName: System.Windows.Navigation.CustomContentState\n- uid: System.Windows.Navigation.IProvideCustomContentState.GetContentState*\n  parent: System.Windows.Navigation.IProvideCustomContentState\n  isExternal: false\n  name: GetContentState\n  nameWithType: IProvideCustomContentState.GetContentState\n  fullName: IProvideCustomContentState.GetContentState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Navigation/IProvideCustomContentState.xml\n"}