### YamlMime:ManagedReference
items:
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  id: Encoding
  children:
  - System.Text.Encoding.#ctor
  - System.Text.Encoding.#ctor(System.Int32)
  - System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.ASCII
  - System.Text.Encoding.BigEndianUnicode
  - System.Text.Encoding.BodyName
  - System.Text.Encoding.Clone
  - System.Text.Encoding.CodePage
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  - System.Text.Encoding.DecoderFallback
  - System.Text.Encoding.Default
  - System.Text.Encoding.EncoderFallback
  - System.Text.Encoding.EncodingName
  - System.Text.Encoding.Equals(System.Object)
  - System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)
  - System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.Encoding.GetByteCount(System.Char[])
  - System.Text.Encoding.GetByteCount(System.String)
  - System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  - System.Text.Encoding.GetBytes(System.Char[])
  - System.Text.Encoding.GetBytes(System.String)
  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.Encoding.GetCharCount(System.Byte[])
  - System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  - System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.GetChars(System.Byte[])
  - System.Text.Encoding.GetDecoder
  - System.Text.Encoding.GetEncoder
  - System.Text.Encoding.GetEncoding(System.Int32)
  - System.Text.Encoding.GetEncoding(System.String)
  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncodings
  - System.Text.Encoding.GetHashCode
  - System.Text.Encoding.GetMaxByteCount(System.Int32)
  - System.Text.Encoding.GetMaxCharCount(System.Int32)
  - System.Text.Encoding.GetPreamble
  - System.Text.Encoding.GetString(System.Byte[])
  - System.Text.Encoding.GetString(System.Byte*,System.Int32)
  - System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.HeaderName
  - System.Text.Encoding.IsAlwaysNormalized
  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  - System.Text.Encoding.IsBrowserDisplay
  - System.Text.Encoding.IsBrowserSave
  - System.Text.Encoding.IsMailNewsDisplay
  - System.Text.Encoding.IsMailNewsSave
  - System.Text.Encoding.IsReadOnly
  - System.Text.Encoding.IsSingleByte
  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  - System.Text.Encoding.Unicode
  - System.Text.Encoding.UTF32
  - System.Text.Encoding.UTF7
  - System.Text.Encoding.UTF8
  - System.Text.Encoding.WebName
  - System.Text.Encoding.WindowsCodePage
  langs:
  - csharp
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
  type: Class
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Represents a character encoding.
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/text/encoding.cs#3b6090c501893c25). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. In contrast, decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters. For information about the Unicode Transformation Formats (UTFs) and other encodings supported by <xref:System.Text.Encoding>, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).  \n  \n Note that <xref:System.Text.Encoding> is intended to operate on Unicode characters instead of arbitrary binary data, such as byte arrays. If you must encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=fullName>.  \n  \n The .NET Framework provides the following implementations of the <xref:System.Text.Encoding> class to support current Unicode encodings and other encodings:  \n  \n-   <xref:System.Text.ASCIIEncoding> encodes Unicode characters as single 7-bit ASCII characters. This encoding only supports character values between U+0000 and U+007F. Code page 20127. Also available through the <xref:System.Text.Encoding.ASCII%2A> property.  \n  \n-   <xref:System.Text.UTF7Encoding> encodes Unicode characters using the UTF-7 encoding. This encoding supports all Unicode character values. Code page 65000. Also available through the <xref:System.Text.Encoding.UTF7%2A> property.  \n  \n-   <xref:System.Text.UTF8Encoding> encodes Unicode characters using the UTF-8 encoding. This encoding supports all Unicode character values. Code page 65001. Also available through the <xref:System.Text.Encoding.UTF8%2A> property.  \n  \n-   <xref:System.Text.UnicodeEncoding> encodes Unicode characters using the UTF-16 encoding. Both little endian and big endian byte orders are supported. Also available through the <xref:System.Text.Encoding.Unicode%2A> property and the <xref:System.Text.Encoding.BigEndianUnicode%2A> property.  \n  \n-   <xref:System.Text.UTF32Encoding> encodes Unicode characters using the UTF-32 encoding. Both little endian (code page 12000) and big endian (code page 12001) byte orders are supported. Also available through the <xref:System.Text.Encoding.UTF32%2A> property.  \n  \n The <xref:System.Text.Encoding> class is primarily intended to convert between different encodings and Unicode. Often one of the derived Unicode classes is the correct choice for your app.  \n  \n Use the <xref:System.Text.Encoding.GetEncoding%2A> method to obtain other encodings, and call the <xref:System.Text.Encoding.GetEncodings%2A> method to get a list of all encodings.  \n  \n The following table lists the encodings supported by the .NET Framework. It lists each encoding's code page number and the values of the encoding's <xref:System.Text.EncodingInfo.Name%2A?displayProperty=fullName> and <xref:System.Text.EncodingInfo.DisplayName%2A?displayProperty=fullName> properties. An asterisk in the last column indicates that the code page is natively supported by the .NET Framework, regardless of the underlying platform. Note that code pages whose <xref:System.Text.EncodingInfo.Name%2A?displayProperty=fullName> property corresponds to an international standard do not necessarily comply in full with that standard.  \n  \n|Code page|Name|Display name|.NET Framework support|  \n|---------------|----------|------------------|----------------------------|  \n|37|IBM037|IBM EBCDIC (US-Canada)||  \n|437|IBM437|OEM United States||  \n|500|IBM500|IBM EBCDIC (International)||  \n|708|ASMO-708|Arabic (ASMO 708)||  \n|720|DOS-720|Arabic (DOS)||  \n|737|ibm737|Greek (DOS)||  \n|775|ibm775|Baltic (DOS)||  \n|850|ibm850|Western European (DOS)||  \n|852|ibm852|Central European (DOS)||  \n|855|IBM855|OEM Cyrillic||  \n|857|ibm857|Turkish (DOS)||  \n|858|IBM00858|OEM Multilingual Latin I||  \n|860|IBM860|Portuguese (DOS)||  \n|861|ibm861|Icelandic (DOS)||  \n|862|DOS-862|Hebrew (DOS)||  \n|863|IBM863|French Canadian (DOS)||  \n|864|IBM864|Arabic (864)||  \n|865|IBM865|Nordic (DOS)||  \n|866|cp866|Cyrillic (DOS)||  \n|869|ibm869|Greek, Modern (DOS)||  \n|870|IBM870|IBM EBCDIC (Multilingual Latin-2)||  \n|874|windows-874|Thai (Windows)||  \n|875|cp875|IBM EBCDIC (Greek Modern)||  \n|932|shift_jis|Japanese (Shift-JIS)||  \n|936|gb2312|Chinese Simplified (GB2312)|✓|  \n|949|ks_c_5601-1987|Korean||  \n|950|big5|Chinese Traditional (Big5)||  \n|1026|IBM1026|IBM EBCDIC (Turkish Latin-5)||  \n|1047|IBM01047|IBM Latin-1||  \n|1140|IBM01140|IBM EBCDIC (US-Canada-Euro)||  \n|1141|IBM01141|IBM EBCDIC (Germany-Euro)||  \n|1142|IBM01142|IBM EBCDIC (Denmark-Norway-Euro)||  \n|1143|IBM01143|IBM EBCDIC (Finland-Sweden-Euro)||  \n|1144|IBM01144|IBM EBCDIC (Italy-Euro)||  \n|1145|IBM01145|IBM EBCDIC (Spain-Euro)||  \n|1146|IBM01146|IBM EBCDIC (UK-Euro)||  \n|1147|IBM01147|IBM EBCDIC (France-Euro)||  \n|1148|IBM01148|IBM EBCDIC (International-Euro)||  \n|1149|IBM01149|IBM EBCDIC (Icelandic-Euro)||  \n|1200|utf-16|Unicode|✓|  \n|1201|unicodeFFFE|Unicode (Big endian)|✓|  \n|1250|windows-1250|Central European (Windows)||  \n|1251|windows-1251|Cyrillic (Windows)||  \n|1252|Windows-1252|Western European (Windows)|✓|  \n|1253|windows-1253|Greek (Windows)||  \n|1254|windows-1254|Turkish (Windows)||  \n|1255|windows-1255|Hebrew (Windows)||  \n|1256|windows-1256|Arabic (Windows)||  \n|1257|windows-1257|Baltic (Windows)||  \n|1258|windows-1258|Vietnamese (Windows)||  \n|1361|Johab|Korean (Johab)||  \n|10000|macintosh|Western European (Mac)||  \n|10001|x-mac-japanese|Japanese (Mac)||  \n|10002|x-mac-chinesetrad|Chinese Traditional (Mac)||  \n|10003|x-mac-korean|Korean (Mac)|✓|  \n|10004|x-mac-arabic|Arabic (Mac)||  \n|10005|x-mac-hebrew|Hebrew (Mac)||  \n|10006|x-mac-greek|Greek (Mac)||  \n|10007|x-mac-cyrillic|Cyrillic (Mac)||  \n|10008|x-mac-chinesesimp|Chinese Simplified (Mac)|✓|  \n|10010|x-mac-romanian|Romanian (Mac)||  \n|10017|x-mac-ukrainian|Ukrainian (Mac)||  \n|10021|x-mac-thai|Thai (Mac)||  \n|10029|x-mac-ce|Central European (Mac)||  \n|10079|x-mac-icelandic|Icelandic (Mac)||  \n|10081|x-mac-turkish|Turkish (Mac)||  \n|10082|x-mac-croatian|Croatian (Mac)||  \n|12000|utf-32|Unicode (UTF-32)|✓|  \n|12001|utf-32BE|Unicode (UTF-32 Big endian)|✓|  \n|20000|x-Chinese-CNS|Chinese Traditional (CNS)||  \n|20001|x-cp20001|TCA Taiwan||  \n|20002|x-Chinese-Eten|Chinese Traditional (Eten)||  \n|20003|x-cp20003|IBM5550 Taiwan||  \n|20004|x-cp20004|TeleText Taiwan||  \n|20005|x-cp20005|Wang Taiwan||  \n|20105|x-IA5|Western European (IA5)||  \n|20106|x-IA5-German|German (IA5)||  \n|20107|x-IA5-Swedish|Swedish (IA5)||  \n|20108|x-IA5-Norwegian|Norwegian (IA5)||  \n|20127|us-ascii|US-ASCII|✓|  \n|20261|x-cp20261|T.61||  \n|20269|x-cp20269|ISO-6937||  \n|20273|IBM273|IBM EBCDIC (Germany)||  \n|20277|IBM277|IBM EBCDIC (Denmark-Norway)||  \n|20278|IBM278|IBM EBCDIC (Finland-Sweden)||  \n|20280|IBM280|IBM EBCDIC (Italy)||  \n|20284|IBM284|IBM EBCDIC (Spain)||  \n|20285|IBM285|IBM EBCDIC (UK)||  \n|20290|IBM290|IBM EBCDIC (Japanese katakana)||  \n|20297|IBM297|IBM EBCDIC (France)||  \n|20420|IBM420|IBM EBCDIC (Arabic)||  \n|20423|IBM423|IBM EBCDIC (Greek)||  \n|20424|IBM424|IBM EBCDIC (Hebrew)||  \n|20833|x-EBCDIC-KoreanExtended|IBM EBCDIC (Korean Extended)||  \n|20838|IBM-Thai|IBM EBCDIC (Thai)||  \n|20866|koi8-r|Cyrillic (KOI8-R)||  \n|20871|IBM871|IBM EBCDIC (Icelandic)||  \n|20880|IBM880|IBM EBCDIC (Cyrillic Russian)||  \n|20905|IBM905|IBM EBCDIC (Turkish)||  \n|20924|IBM00924|IBM Latin-1||  \n|20932|EUC-JP|Japanese (JIS 0208-1990 and 0212-1990)||  \n|20936|x-cp20936|Chinese Simplified (GB2312-80)|✓|  \n|20949|x-cp20949|Korean Wansung|✓|  \n|21025|cp1025|IBM EBCDIC (Cyrillic Serbian-Bulgarian)||  \n|21866|koi8-u|Cyrillic (KOI8-U)||  \n|28591|iso-8859-1|Western European (ISO)|✓|  \n|28592|iso-8859-2|Central European (ISO)||  \n|28593|iso-8859-3|Latin 3 (ISO)||  \n|28594|iso-8859-4|Baltic (ISO)||  \n|28595|iso-8859-5|Cyrillic (ISO)||  \n|28596|iso-8859-6|Arabic (ISO)||  \n|28597|iso-8859-7|Greek (ISO)||  \n|28598|iso-8859-8|Hebrew (ISO-Visual)|✓|  \n|28599|iso-8859-9|Turkish (ISO)||  \n|28603|iso-8859-13|Estonian (ISO)||  \n|28605|iso-8859-15|Latin 9 (ISO)||  \n|29001|x-Europa|Europa||  \n|38598|iso-8859-8-i|Hebrew (ISO-Logical)|✓|  \n|50220|iso-2022-jp|Japanese (JIS)|✓|  \n|50221|csISO2022JP|Japanese (JIS-Allow 1 byte Kana)|✓|  \n|50222|iso-2022-jp|Japanese (JIS-Allow 1 byte Kana - SO/SI)|✓|  \n|50225|iso-2022-kr|Korean (ISO)|✓|  \n|50227|x-cp50227|Chinese Simplified (ISO-2022)|✓|  \n|51932|euc-jp|Japanese (EUC)|✓|  \n|51936|EUC-CN|Chinese Simplified (EUC)|✓|  \n|51949|euc-kr|Korean (EUC)|✓|  \n|52936|hz-gb-2312|Chinese Simplified (HZ)|✓|  \n|54936|GB18030|Chinese Simplified (GB18030)|✓|  \n|57002|x-iscii-de|ISCII Devanagari|✓|  \n|57003|x-iscii-be|ISCII Bengali|✓|  \n|57004|x-iscii-ta|ISCII Tamil|✓|  \n|57005|x-iscii-te|ISCII Telugu|✓|  \n|57006|x-iscii-as|ISCII Assamese|✓|  \n|57007|x-iscii-or|ISCII Oriya|✓|  \n|57008|x-iscii-ka|ISCII Kannada|✓|  \n|57009|x-iscii-ma|ISCII Malayalam|✓|  \n|57010|x-iscii-gu|ISCII Gujarati|✓|  \n|57011|x-iscii-pa|ISCII Punjabi|✓|  \n|65000|utf-7|Unicode (UTF-7)|✓|  \n|65001|utf-8|Unicode (UTF-8)|✓|  \n  \n The following example calls the <xref:System.Text.Encoding.GetEncoding%28System.Int32%29> and <xref:System.Text.Encoding.GetEncoding%28System.String%29> methods to get the Greek (Windows) code page encoding. It compares the <xref:System.Text.Encoding> objects returned by the method calls to show that they are equal, and then maps displays the Unicode code point and the corresponding code page value for each character in the Greek alphabet.  \n  \n [!code-csharp[System.Text.Encoding#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding/cs/getencoding1.cs#1)]\n [!code-vb[System.Text.Encoding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding/vb/getencoding1.vb#1)]  \n  \n If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n The UTF-16 and the UTF-32 encoders can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first). For example, the Latin Capital Letter A (U+0041) is serialized as follows (in hexadecimal):  \n  \n-   UTF-16 big endian byte order: 00 41  \n  \n-   UTF-16 little endian byte order: 41 00  \n  \n-   UTF-32 big endian byte order: 00 00 00 41  \n  \n-   UTF-32 little endian byte order: 41 00 00 00  \n  \n It is generally more efficient to store Unicode characters using the native byte order. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers.  \n  \n The <xref:System.Text.Encoding.GetPreamble%2A> method retrieves an array of bytes that includes the byte order mark (BOM). If this byte array is prefixed to an encoded stream, it helps the decoder to identify the encoding format used.  \n  \n For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).  \n  \n Note that the encoding classes allow errors to:  \n  \n-   Silently change to a \"?\" character.  \n  \n-   Use a \"best fit\" character.  \n  \n-   Change to an application-specific behavior through use of the <xref:System.Text.EncoderFallback> and <xref:System.Text.DecoderFallback> classes with the U+FFFD Unicode replacement character.  \n  \n You should throw an exception on any data stream error. An app either uses a \"throwonerror\" flag when applicable or uses the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> classes. Best fit fallback is often not recommended because it can cause data loss or confusion and is slower than simple character replacements. For ANSI encodings, the best fit behavior is the default."
  example:
  - "The following example converts a string from one encoding to another.  \n  \n> [!NOTE]\n>  The byte[] array is the only type in this example that contains the encoded data. The .NET Char and String types are themselves Unicode, so the <xref:System.Text.Encoding.GetChars%2A> call decodes the data back to Unicode.  \n  \n [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]\n [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]\n [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Encoding : ICloneable
  inheritance:
  - System.Object
  derivedClasses:
  - System.Text.ASCIIEncoding
  - System.Text.UnicodeEncoding
  - System.Text.UTF32Encoding
  - System.Text.UTF7Encoding
  - System.Text.UTF8Encoding
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.#ctor
  commentId: M:System.Text.Encoding.#ctor
  id: '#ctor'
  parent: System.Text.Encoding
  langs:
  - csharp
  name: Encoding()
  nameWithType: Encoding.Encoding()
  fullName: Encoding.Encoding()
  type: Constructor
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.Encoding"></xref> class.
  remarks: Derived classes override this constructor.
  syntax:
    content: protected Encoding ();
    parameters: []
  overload: System.Text.Encoding.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.#ctor(System.Int32)
  commentId: M:System.Text.Encoding.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Text.Encoding
  langs:
  - csharp
  name: Encoding(Int32)
  nameWithType: Encoding.Encoding(Int32)
  fullName: Encoding.Encoding(Int32)
  type: Constructor
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.Encoding"></xref> class that corresponds to the specified code page.
  remarks: "Derived classes override this constructor.  \n  \n Calls to this constructor from a derived class create an <xref:System.Text.Encoding> object that uses best-fit fallback for both encoding and decoding operations. Both the <xref:System.Text.Encoding.DecoderFallback%2A> and <xref:System.Text.Encoding.EncoderFallback%2A> properties are read-only and cannot be modified. To control the fallback strategy for a class derived from <xref:System.Text.Encoding>, call the <xref:System.Text.Encoding.%23ctor%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> constructor."
  syntax:
    content: protected Encoding (int codePage);
    parameters:
    - id: codePage
      type: System.Int32
      description: "The code page identifier of the preferred encoding.  \n  \n -or-  \n  \n 0, to use the default encoding."
  overload: System.Text.Encoding.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>codePage</code> is less than zero.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  commentId: M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  id: '#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)'
  parent: System.Text.Encoding
  langs:
  - csharp
  name: Encoding(Int32, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.Encoding(Int32, EncoderFallback, DecoderFallback)
  fullName: Encoding.Encoding(Int32, EncoderFallback, DecoderFallback)
  type: Constructor
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.Encoding"></xref> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies.
  remarks: "This constructor is `protected`; derived classes override it.  \n  \n You call this constructor from a derived class to control the fallback encoding and decoding strategies. The <xref:System.Text.Encoding> class constructors create read-only encoding objects that don't allow encoder or decoder fallback to be set after the object is created.  \n  \n If either `encoderFallback` or `decoderFallback` is null, best-fit fallback is used as the corresponding fallback strategy."
  syntax:
    content: protected Encoding (int codePage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
    parameters:
    - id: codePage
      type: System.Int32
      description: The encoding code page identifier.
    - id: encoderFallback
      type: System.Text.EncoderFallback
      description: An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.
    - id: decoderFallback
      type: System.Text.DecoderFallback
      description: An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.
  overload: System.Text.Encoding.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>codePage</code> is less than zero.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.ASCII
  commentId: P:System.Text.Encoding.ASCII
  id: ASCII
  parent: System.Text.Encoding
  langs:
  - csharp
  name: ASCII
  nameWithType: Encoding.ASCII
  fullName: Encoding.ASCII
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets an encoding for the ASCII (7-bit) character set.
  remarks: "ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F.  \n  \n When selecting the ASCII encoding for your app, consider the following:  \n  \n-   The ASCII encoding is usually appropriate for protocols that require ASCII.  \n  \n-   If you requires 8-bit encoding (which is sometimes incorrectly referred to as \"ASCII\"), the UTF-8 encoding is recommended over the ASCII encoding. For the characters 0-7F, the results are identical, but use of UTF-8 avoids data loss by allowing representation of all Unicode characters that are representable. Note that the ASCII encoding has an 8th bit ambiguity that can allow malicious use, but the UTF-8 encoding removes ambiguity about the 8th bit.  \n  \n-   Prior to the .NET Framework version 2.0, the .NET Framework allowed spoofing by ignoring the 8th bit. Beginning with the .NET Framework 2.0, non-ASCII code points fall back during decoding.  \n  \n The <xref:System.Text.ASCIIEncoding> object that is returned by this property might not have the appropriate behavior for your app. It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark (\"?\") character. Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> method to instantiate an <xref:System.Text.ASCIIEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.  \n  \n [!code-csharp[System.Text.Encoding.ASCII#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.ascii/cs/encoding.ascii2.cs#1)]\n [!code-vb[System.Text.Encoding.ASCII#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.ascii/vb/encoding.ascii2.vb#1)]"
  example:
  - "The following example demonstrates the effect of the ASCII encoding on characters that are outside the ASCII range.  \n  \n [!code-cpp[System.Text.Encoding.ASCII Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/CPP/ascii.cpp#1)]\n [!code-csharp[System.Text.Encoding.ASCII Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/CS/ascii.cs#1)]\n [!code-vb[System.Text.Encoding.ASCII Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.ASCII Example/VB/ascii.vb#1)]"
  syntax:
    content: public static System.Text.Encoding ASCII { get; }
    return:
      type: System.Text.Encoding
      description: An  encoding for the ASCII (7-bit) character set.
  overload: System.Text.Encoding.ASCII*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.BigEndianUnicode
  commentId: P:System.Text.Encoding.BigEndianUnicode
  id: BigEndianUnicode
  parent: System.Text.Encoding
  langs:
  - csharp
  name: BigEndianUnicode
  nameWithType: Encoding.BigEndianUnicode
  fullName: Encoding.BigEndianUnicode
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets an encoding for the UTF-16 format that uses the big endian byte order.
  remarks: "The <xref:System.Text.UnicodeEncoding> object that is returned by this property may not have the appropriate behavior for your app. It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark (\"?\") character. Instead, you can call the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName> constructor to instantiate a big endian <xref:System.Text.UnicodeEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.  \n  \n [!code-csharp[System.Text.Encoding.BigEndianUnicode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CS/bigendianunicode1.cs#2)]\n [!code-vb[System.Text.Encoding.BigEndianUnicode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/VB/bigendianunicode1.vb#2)]  \n  \n The returned <xref:System.Text.UnicodeEncoding> object has <xref:System.Text.Encoding.BodyName%2A>, <xref:System.Text.Encoding.HeaderName%2A>, and <xref:System.Text.Encoding.WebName%2A> properties, which yield the name \"unicodeFFFE\". Although the UTF-16 big endian byte order mark is hexadecimal FEFF, the name \"unicodeFFFE\" was chosen because the byte order mark appears as hexadecimal FFFE on little endian Windows computers."
  example:
  - "The following example reads a text file with a UTF-16 encoding using the big endian byte order.  \n  \n [!code-cpp[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CPP/bigendianunicode.cpp#1)]\n [!code-csharp[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/CS/bigendianunicode.cs#1)]\n [!code-vb[System.Text.Encoding.BigEndianUnicode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.BigEndianUnicode/VB/bigendianunicode.vb#1)]  \n  \n The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]"
  syntax:
    content: public static System.Text.Encoding BigEndianUnicode { get; }
    return:
      type: System.Text.Encoding
      description: An encoding object for the UTF-16 format that uses the big endian byte order.
  overload: System.Text.Encoding.BigEndianUnicode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.BodyName
  commentId: P:System.Text.Encoding.BodyName
  id: BodyName
  parent: System.Text.Encoding
  langs:
  - csharp
  name: BodyName
  nameWithType: Encoding.BodyName
  fullName: Encoding.BodyName
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets a name for the current encoding that can be used with mail agent body tags.
  remarks: "If you need an encoding for a body name, you should call <xref:System.Text.Encoding.GetEncoding%2A> with the <xref:System.Text.Encoding.BodyName%2A> property. Often the method retrieves a different encoding from the test encoding furnished in the call. Generally only e-mail applications need to retrieve such an encoding; most other applications that need to describe an encoding should use its <xref:System.Text.Encoding.WebName%2A>.  \n  \n In some cases, the value of the <xref:System.Text.Encoding.BodyName%2A> property corresponds to the international standard that defines that encoding. This doesn't mean that the implementation complies in full with that standard."
  example:
  - "The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=fullName>. It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.  \n  \n [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]\n [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]\n [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]"
  syntax:
    content: public virtual string BodyName { get; }
    return:
      type: System.String
      description: "A name for the current <xref href=\"System.Text.Encoding\"></xref> that can be used with mail agent body tags.  \n  \n -or-  \n  \n An empty string (\"\"), if the current <xref href=\"System.Text.Encoding\"></xref> cannot be used."
  overload: System.Text.Encoding.BodyName*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.Clone
  commentId: M:System.Text.Encoding.Clone
  id: Clone
  parent: System.Text.Encoding
  langs:
  - csharp
  name: Clone()
  nameWithType: Encoding.Clone()
  fullName: Encoding.Clone()
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, creates a shallow copy of the current <xref href="System.Text.Encoding"></xref> object.
  remarks: "The clone is writable even if the original <xref:System.Text.Encoding> object is read-only. Therefore, the properties of the clone can be modified.  \n  \n A shallow copy of an object is a copy of the object only. If the object contains references to other objects, the shallow copy does not create copies of the referred objects. It refers to the original objects instead. In contrast, a deep copy of an object creates a copy of the object and a copy of everything directly or indirectly referenced by that object."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: A copy of the current <xref href="System.Text.Encoding"></xref> object.
  overload: System.Text.Encoding.Clone*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.CodePage
  commentId: P:System.Text.Encoding.CodePage
  id: CodePage
  parent: System.Text.Encoding
  langs:
  - csharp
  name: CodePage
  nameWithType: Encoding.CodePage
  fullName: Encoding.CodePage
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets the code page identifier of the current <xref href="System.Text.Encoding"></xref>.
  remarks: ''
  example:
  - "The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=fullName>. It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.  \n  \n [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]\n [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]\n [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]"
  syntax:
    content: public virtual int CodePage { get; }
    return:
      type: System.Int32
      description: The code page identifier of the current <xref href="System.Text.Encoding"></xref>.
  overload: System.Text.Encoding.CodePage*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  id: Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)
  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)
  fullName: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Converts a range of bytes in a byte array from one encoding to another.
  syntax:
    content: public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes, int index, int count);
    parameters:
    - id: srcEncoding
      type: System.Text.Encoding
      description: The encoding of the source array, <code>bytes</code>.
    - id: dstEncoding
      type: System.Text.Encoding
      description: The encoding of the output array.
    - id: bytes
      type: System.Byte[]
      description: The array of bytes to convert.
    - id: index
      type: System.Int32
      description: The index of the first element of <code>bytes</code> to convert.
    - id: count
      type: System.Int32
      description: The number of bytes to convert.
    return:
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> containing the result of converting a range of bytes in <code>bytes</code> from <code>srcEncoding</code> to <code>dstEncoding</code>.
  overload: System.Text.Encoding.Convert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>srcEncoding</code> is `null`.  \n  \n -or-  \n  \n <code>dstEncoding</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> and <code>count</code> do not specify a valid range in the byte array.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n **srcEncoding.** <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n **dstEncoding.** <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  id: Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  parent: System.Text.Encoding
  langs:
  - csharp
  name: Convert(Encoding, Encoding, Byte[])
  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])
  fullName: Encoding.Convert(Encoding, Encoding, Byte[])
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Converts an entire byte array from one encoding to another.
  remarks: ''
  example:
  - "The following example converts a Unicode-encoded string to an ASCII-encoded string. Because the ASCII encoding object returned by the <xref:System.Text.Encoding.ASCII%2A> property uses replacement fallback and the Pi character is not part of the ASCII character set, the Pi character is replaced with a question mark, as the output from the example shows.  \n  \n [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]\n [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]\n [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]"
  syntax:
    content: public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes);
    parameters:
    - id: srcEncoding
      type: System.Text.Encoding
      description: The encoding format of <code>bytes</code>.
    - id: dstEncoding
      type: System.Text.Encoding
      description: The target encoding format.
    - id: bytes
      type: System.Byte[]
      description: The bytes to convert.
    return:
      type: System.Byte[]
      description: An array of type <xref href="System.Byte"></xref> containing the results of converting <code>bytes</code> from <code>srcEncoding</code> to <code>dstEncoding</code>.
  overload: System.Text.Encoding.Convert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>srcEncoding</code> is `null`.  \n  \n -or-  \n  \n <code>dstEncoding</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n **srcEncoding.** <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n **dstEncoding.** <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.DecoderFallback
  commentId: P:System.Text.Encoding.DecoderFallback
  id: DecoderFallback
  parent: System.Text.Encoding
  langs:
  - csharp
  name: DecoderFallback
  nameWithType: Encoding.DecoderFallback
  fullName: Encoding.DecoderFallback
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets or sets the <xref href="System.Text.DecoderFallback"></xref> object for the current <xref href="System.Text.Encoding"></xref> object.
  remarks: "The <xref:System.Text.DecoderFallback> object represents an error handler that is invoked when an encoded byte sequence cannot be decoded into a character. Any one of the following handler types is supported:  \n  \n-   A best-fit fallback handler, which replaces bytes that cannot be decoded with some suitable replacement character.  \n  \n-   A replacement fallback handler, which replaces bytes that cannot be decoded with some arbitrary replacement character. The .NET Framework includes one replacement fallback handler, <xref:System.Text.DecoderFallback>, which by default replaces bytes that cannot be decoded with a question mark (\"?\") character.  \n  \n-   An exception fallback handler, which throws an exception when bytes cannot be decoded. The .NET Framework includes one exception fallback handler, <xref:System.Text.DecoderExceptionFallback>, which throws a <xref:System.Text.DecoderFallbackException> when bytes cannot be decoded."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Text.DecoderFallback DecoderFallback { get; set; }
    return:
      type: System.Text.DecoderFallback
      description: The decoder fallback object for the current <xref href="System.Text.Encoding"></xref> object.
  overload: System.Text.Encoding.DecoderFallback*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value in a set operation is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: A value cannot be assigned in a set operation because the current <xref href="System.Text.Encoding"></xref> object is read-only.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.Default
  commentId: P:System.Text.Encoding.Default
  id: Default
  parent: System.Text.Encoding
  langs:
  - csharp
  name: Default
  nameWithType: Encoding.Default
  fullName: Encoding.Default
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets an encoding for the operating system's current ANSI code page.
  remarks: "> [!WARNING]\n>  Different computers can use different encodings as the default, and the default encoding can even change on a single computer. Therefore, data streamed from one computer to another or even retrieved at different times on the same computer might be translated incorrectly. In addition, the encoding returned by the <xref:System.Text.Encoding.Default%2A> property uses best-fit fallback to map unsupported characters to characters supported by the code page. For these two reasons, using the default encoding is generally not recommended. To ensure that encoded bytes are decoded properly, you should use a Unicode encoding, such as <xref:System.Text.UTF8Encoding> or <xref:System.Text.UnicodeEncoding>, with a preamble. Another option is to use a higher-level protocol to ensure that the same format is used for encoding and decoding.  \n  \n The system ANSI code page defined by <xref:System.Text.Encoding.Default%2A> covers the ASCII set of characters, but the encoding is different from the encoding for ASCII. Because all <xref:System.Text.Encoding.Default%2A> encodings lose data, you might use <xref:System.Text.Encoding.UTF8%2A> instead. UTF-8 is often identical in the U+00 to U+7F range, but can encode other characters without loss."
  syntax:
    content: >-
      [get: System.Security.SecuritySafeCritical]

      public static System.Text.Encoding Default { get; }
    return:
      type: System.Text.Encoding
      description: An encoding for the operating system's current ANSI code page.
  overload: System.Text.Encoding.Default*
  exceptions: []
  attributes:
  - type: 'get: System.Security.SecuritySafeCritical'
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.EncoderFallback
  commentId: P:System.Text.Encoding.EncoderFallback
  id: EncoderFallback
  parent: System.Text.Encoding
  langs:
  - csharp
  name: EncoderFallback
  nameWithType: Encoding.EncoderFallback
  fullName: Encoding.EncoderFallback
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets or sets the <xref href="System.Text.EncoderFallback"></xref> object for the current <xref href="System.Text.Encoding"></xref> object.
  remarks: "The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence. Any one of the following handler types is supported:  \n  \n-   A best-fit fallback handler, which replaces characters that cannot be encoded with some suitable replacement character.  \n  \n-   A replacement fallback handler, which replaces characters that cannot be encoded with some arbitrary replacement character. The .NET Framework includes one replacement fallback handler, <xref:System.Text.EncoderFallback>, which by default replaces characters that cannot be encoded with a question mark (\"?\") character.  \n  \n-   An exception fallback handler, which throws an exception when characters cannot be encoded. The .NET Framework includes one exception fallback handler, <xref:System.Text.EncoderExceptionFallback>, which throws an <xref:System.Text.EncoderFallbackException> when characters cannot be decoded."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public System.Text.EncoderFallback EncoderFallback { get; set; }
    return:
      type: System.Text.EncoderFallback
      description: The encoder fallback object for the current <xref href="System.Text.Encoding"></xref> object.
  overload: System.Text.Encoding.EncoderFallback*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The value in a set operation is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: A value cannot be assigned in a set operation because the current <xref href="System.Text.Encoding"></xref> object is read-only.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.EncodingName
  commentId: P:System.Text.Encoding.EncodingName
  id: EncodingName
  parent: System.Text.Encoding
  langs:
  - csharp
  name: EncodingName
  nameWithType: Encoding.EncodingName
  fullName: Encoding.EncodingName
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets the human-readable description of the current encoding.
  remarks: The <xref:System.Text.Encoding.EncodingName%2A> property is intended for display. To find a name that can be passed to the <xref:System.Text.Encoding.GetEncoding%2A> method, use the <xref:System.Text.Encoding.WebName%2A> property.
  example:
  - "The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=fullName>. It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.  \n  \n [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]\n [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]\n [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]"
  syntax:
    content: public virtual string EncodingName { get; }
    return:
      type: System.String
      description: The human-readable description of the current <xref href="System.Text.Encoding"></xref>.
  overload: System.Text.Encoding.EncodingName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.Equals(System.Object)
  commentId: M:System.Text.Encoding.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Encoding.Equals(Object)
  fullName: Encoding.Equals(Object)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Determines whether the specified <xref href="System.Object"></xref> is equal to the current instance.
  remarks: Two instances of <xref:System.Text.Encoding> are considered equal if they correspond to the same code page and their `EncoderFallback` and `DecoderFallback` objects are equal. In particular, derived code pages all have a code page of 0 and their fallbacks are normally `null` (`Nothing` in Visual Basic .NET). Thus they are all considered equal to one another. One consequence is that when <xref:System.Text.Encoding.Equals%2A> is used to populate a hash table, all derived encodings compare equal and fall into the same hash table slot.
  example:
  - "The following example gets two instances of the same encoding (one by codepage and another by name), and checks their equality.  \n  \n [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]\n [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]\n [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]"
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to compare with the current instance.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is an instance of <xref href="System.Text.Encoding"></xref> and is equal to the current instance; otherwise, `false`.'
  overload: System.Text.Encoding.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)
  id: GetByteCount(System.String,System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetByteCount(String, Int32, Int32)
  nameWithType: Encoding.GetByteCount(String, Int32, Int32)
  fullName: Encoding.GetByteCount(String, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  namespace: System.Text
  syntax:
    content: public int GetByteCount (string s, int index, int count);
    parameters:
    - id: s
      type: System.String
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Text.Encoding.GetByteCount*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetByteCount(Char[], Int32, Int32)
  nameWithType: Encoding.GetByteCount(Char[], Int32, Int32)
  fullName: Encoding.GetByteCount(Char[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.
  remarks: "To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method. To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding. The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method, which handles multiple conversions on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.  \n  \n-   If your app handles string inputs, the string version of <xref:System.Text.Encoding.GetBytes%2A> is recommended.  \n  \n-   The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.  \n  \n-   Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetByteCount%2A>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice."
  example:
  - "The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]"
  syntax:
    content: public abstract int GetByteCount (char[] chars, int index, int count);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: index
      type: System.Int32
      description: The index of the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.Encoding.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetByteCount(System.Char[])
  commentId: M:System.Text.Encoding.GetByteCount(System.Char[])
  id: GetByteCount(System.Char[])
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetByteCount(Char[])
  nameWithType: Encoding.GetByteCount(Char[])
  fullName: Encoding.GetByteCount(Char[])
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.
  remarks: "To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method. To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding. The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method, which handles multiple conversions on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.  \n  \n-   If your app handles string inputs, you should use the string versions of the <xref:System.Text.Encoding.GetBytes%2A> method.  \n  \n-   The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, you should reuse the output buffer. In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.  \n  \n-   Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetByteCount%2A>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice."
  example:
  - "The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]"
  syntax:
    content: public virtual int GetByteCount (char[] chars);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding all the characters in the specified character array.
  overload: System.Text.Encoding.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null`.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetByteCount(System.String)
  commentId: M:System.Text.Encoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetByteCount(String)
  nameWithType: Encoding.GetByteCount(String)
  fullName: Encoding.GetByteCount(String)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.
  remarks: "To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method. To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding. The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method, which handles multiple conversions on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.  \n  \n-   If your app handles string inputs, the string version of <xref:System.Text.Encoding.GetBytes%2A> is recommended.  \n  \n-   The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.  \n  \n-   Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetByteCount%2A>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice."
  example:
  - "The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]"
  syntax:
    content: public virtual int GetByteCount (string s);
    parameters:
    - id: s
      type: System.String
      description: The string containing the set of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.Encoding.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is `null`.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  commentId: M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  id: GetByteCount(System.Char*,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetByteCount(Char*, Int32)
  nameWithType: Encoding.GetByteCount(Char*, Int32)
  fullName: Encoding.GetByteCount(Char*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.
  remarks: "To calculate the exact array size that <xref:System.Text.Encoding.GetBytes%2A> requires to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method. To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n The <xref:System.Text.Encoding.GetByteCount%28System.Char%2A%2CSystem.Int32%29> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> method performs the actual encoding. The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method, which handles multiple conversions on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported. The following are some considerations for using these methods:  \n  \n-   Your app may need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used.  \n  \n-   If your app handles string inputs, you should use the string version of the <xref:System.Text.Encoding.GetBytes%2A> method.  \n  \n-   The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%2A> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.  \n  \n-   Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetByteCount%2A>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public virtual int GetByteCount (char* chars, int count);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.Encoding.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>count</code> is less than zero.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetBytes(System.Char[])
  commentId: M:System.Text.Encoding.GetBytes(System.Char[])
  id: GetBytes(System.Char[])
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetBytes(Char[])
  nameWithType: Encoding.GetBytes(Char[])
  fullName: Encoding.GetBytes(Char[])
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.
  remarks: "If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding. The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method, which handles multiple conversions on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)  \n  \n-   If your app handles string inputs, you should call the string version of the <xref:System.Text.Encoding.GetBytes%2A> method.  \n  \n-   The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.  \n  \n-   Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetByteCount%2A>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice."
  example:
  - "The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]"
  syntax:
    content: public virtual byte[] GetBytes (char[] chars);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the characters to encode.
    return:
      type: System.Byte[]
      description: A byte array containing the results of encoding the specified set of characters.
  overload: System.Text.Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null`.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetBytes(System.String)
  commentId: M:System.Text.Encoding.GetBytes(System.String)
  id: GetBytes(System.String)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetBytes(String)
  nameWithType: Encoding.GetBytes(String)
  fullName: Encoding.GetBytes(String)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.
  remarks: "If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding. The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method, which handles multiple conversions on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)  \n  \n-   If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.  \n  \n-   The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.  \n  \n-   Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetByteCount%2A>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice."
  example:
  - "The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]"
  syntax:
    content: public virtual byte[] GetBytes (string s);
    parameters:
    - id: s
      type: System.String
      description: The string containing the characters to encode.
    return:
      type: System.Byte[]
      description: A byte array containing the results of encoding the specified set of characters.
  overload: System.Text.Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is `null`.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetBytes(Char[], Int32, Int32)
  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)
  fullName: Encoding.GetBytes(Char[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.
  remarks: "If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding. The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method, which handles multiple conversions on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)  \n  \n-   If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.  \n  \n-   The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.  \n  \n-   Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetByteCount%2A>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice."
  example:
  - "The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]"
  syntax:
    content: public virtual byte[] GetBytes (char[] chars, int index, int count);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: index
      type: System.Int32
      description: The index of the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Byte[]
      description: A byte array containing the results of encoding the specified set of characters.
  overload: System.Text.Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetBytes(String, Int32, Int32)
  nameWithType: Encoding.GetBytes(String, Int32, Int32)
  fullName: Encoding.GetBytes(String, Int32, Int32)
  type: Method
  assemblies:
  - System.Runtime
  namespace: System.Text
  syntax:
    content: public byte[] GetBytes (string s, int index, int count);
    parameters:
    - id: s
      type: System.String
      description: ''
    - id: index
      type: System.Int32
      description: ''
    - id: count
      type: System.Int32
      description: ''
    return:
      type: System.Byte[]
      description: ''
  overload: System.Text.Encoding.GetBytes*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  commentId: M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetBytes(Char*, Int32, Byte*, Int32)
  nameWithType: Encoding.GetBytes(Char*, Int32, Byte*, Int32)
  fullName: Encoding.GetBytes(Char*, Int32, Byte*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.
  remarks: "To calculate the exact array size that <xref:System.Text.Encoding.GetBytes%2A> requires to store the resulting bytes, call the <xref:System.Text.Encoding.GetByteCount%2A> method. To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.Encoding.GetDecoder%2A> or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding. The <xref:System.Text.Encoding.GetBytes%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method, which handles multiple conversions on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)  \n  \n-   If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.  \n  \n-   The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.  \n  \n-   Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetByteCount%2A>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte*
      description: A pointer to the location at which to start writing the resulting sequence of bytes.
    - id: byteCount
      type: System.Int32
      description: The maximum number of bytes to write.
    return:
      type: System.Int32
      description: The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.
  overload: System.Text.Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>chars</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>charCount</code> or <code>byteCount</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>byteCount</code> is less than the resulting number of bytes.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  nameWithType: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.
  remarks: "To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method. To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding. The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method, which handles multiple conversions on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)  \n  \n-   If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.  \n  \n-   The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.  \n  \n-   Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetByteCount%2A>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice."
  example:
  - "The following example determines the number of bytes required to encode three characters from a character array, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CPP/getbytes_chararric.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/CS/getbytes_chararric.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_CharArrIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArrIC/VB/getbytes_chararric.vb#1)]"
  syntax:
    content: public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into <code>bytes</code>.
  overload: System.Text.Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>chars</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  nameWithType: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.
  remarks: "To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should call the <xref:System.Text.Encoding.GetByteCount%2A> method. To calculate the maximum array size, call the <xref:System.Text.Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n The <xref:System.Text.Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoding.GetBytes%2A> method performs the actual encoding. The <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> method expects discrete conversions, in contrast to the <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method, which handles multiple conversions on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetByteCount%2A> and <xref:System.Text.Encoding.GetBytes%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to encode many input characters to a code page and process the characters using multiple calls. In this case, you probably need to maintain state between calls, taking into account the state that is persisted by the <xref:System.Text.Encoder> object being used. (For example, a character sequence that includes surrogate pairs might end with a high surrogate. The <xref:System.Text.Encoder> will remember that high surrogate so that it can be combined with a low surrogate at the beginning of a following call. <xref:System.Text.Encoding> won't be able to maintain the state, so the character will be sent to the <xref:System.Text.EncoderFallback>.)  \n  \n-   If your app handles string inputs, you should use the string version of <xref:System.Text.Encoding.GetBytes%2A>.  \n  \n-   The Unicode character buffer version of <xref:System.Text.Encoding.GetBytes%28System.Char%2A%2CSystem.Int32%2CSystem.Byte%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls using the <xref:System.Text.Encoder> object or inserting into existing buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the <xref:System.Text.Encoding.GetBytes%2A> version that supports byte arrays is the best choice.  \n  \n-   Consider using the <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetByteCount%2A>. The conversion method converts as much data as possible, and does throw an exception if the output buffer is too small. For continuous encoding of a stream, this method is often the best choice."
  example:
  - "The following example determines the number of bytes required to encode a string or a range in the string, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/CS/getbytes_string.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_String/VB/getbytes_string.vb#1)]"
  syntax:
    content: public virtual int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
    parameters:
    - id: s
      type: System.String
      description: The string containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into <code>bytes</code>.
  overload: System.Text.Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>s</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetCharCount(System.Byte[])
  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  id: GetCharCount(System.Byte[])
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetCharCount(Byte[])
  nameWithType: Encoding.GetCharCount(Byte[])
  fullName: Encoding.GetCharCount(Byte[])
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.
  remarks: "To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method. To calculate the maximum array size, you should use the <xref:System.Text.Encoding.GetMaxCharCount%28System.Int32%29> method. The <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n The <xref:System.Text.Encoding.GetCharCount%28System.Byte%5B%5D%29> method determines how many characters result in decoding a sequence of bytes, and the  <xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%29> method performs the actual decoding. The <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method, which handles multiple passes on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls.  \n  \n-   If your app handles string outputs, you should use the <xref:System.Text.Encoding.GetString%2A> method. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.  \n  \n-   The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.  \n  \n-   Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetCharCount%2A>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice."
  example:
  - "The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]\n [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]"
  syntax:
    content: public virtual int GetCharCount (byte[] bytes);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.Encoding.GetCharCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null`.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  commentId: M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  id: GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetCharCount(Byte*, Int32)
  nameWithType: Encoding.GetCharCount(Byte*, Int32)
  fullName: Encoding.GetCharCount(Byte*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.
  remarks: "To calculate the exact array size that <xref:System.Text.Encoding.GetChars%2A> requires to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method. To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method. The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding. The <xref:System.Text.Encoding.GetChars%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method, which handles multiple passes on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls.  \n  \n-   If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.  \n  \n-   The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.  \n  \n-   Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetCharCount%2A>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public virtual int GetCharCount (byte* bytes, int count);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.Encoding.GetCharCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>count</code> is less than zero.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetCharCount(Byte[], Int32, Int32)
  nameWithType: Encoding.GetCharCount(Byte[], Int32, Int32)
  fullName: Encoding.GetCharCount(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
  remarks: "To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method. To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method. The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding. The <xref:System.Text.Encoding.GetChars%2A> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method, which handles multiple passes on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls.  \n  \n-   If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.  \n  \n-   The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.  \n  \n-   Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetCharCount%2A>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice."
  example:
  - "The following example converts a string from one encoding to another.  \n  \n [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]\n [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]\n [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  \n  \n The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]\n [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]"
  syntax:
    content: public abstract int GetCharCount (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.Encoding.GetCharCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.
  remarks: "To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method. To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method. The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> gets characters from an input byte sequence. [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.  \n  \n If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n **Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays. If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=fullName>.  \n  \n The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding. The <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method, which handles multiple passes on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches. (For example, part of an ISO-2022 shift sequence may end one [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%2A> call. [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)  \n  \n-   If your app handles string outputs, the <xref:System.Text.Encoding.GetString%2A> method is recommended. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.  \n  \n-   The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.  \n  \n-   Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetCharCount%2A>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice."
  example:
  - "The following example converts a string from one encoding to another.  \n  \n [!code-cpp[System.Text.Encoding.Convert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CPP/convert.cpp#1)]\n [!code-csharp[System.Text.Encoding.Convert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/CS/convert.cs#1)]\n [!code-vb[System.Text.Encoding.Convert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Convert Example/VB/convert.vb#1)]  \n  \n The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]\n [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]"
  syntax:
    content: public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: byteIndex
      type: System.Int32
      description: The index of the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char[]
      description: The character array to contain the resulting set of characters.
    - id: charIndex
      type: System.Int32
      description: The index at which to start writing the resulting set of characters.
    return:
      type: System.Int32
      description: The actual number of characters written into <code>chars</code>.
  overload: System.Text.Encoding.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>bytes</code> is `null`.  \n  \n -or-  \n  \n <code>chars</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n <code>charIndex</code> is not a valid index in <code>chars</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetChars(Byte*, Int32, Char*, Int32)
  nameWithType: Encoding.GetChars(Byte*, Int32, Char*, Int32)
  fullName: Encoding.GetChars(Byte*, Int32, Char*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.
  remarks: "To calculate the exact array size that <xref:System.Text.Encoding.GetChars%2A> requires to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method. To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method. The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> gets characters from an input byte sequence. <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.  \n  \n If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> object provided by the <xref:System.Text.Encoding.GetDecoder%2A> or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n **Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays. If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=fullName>.  \n  \n The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding. The <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method, which handles multiple passes on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches. (For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call. <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)  \n  \n-   If your app handles string outputs, the <xref:System.Text.Encoding.GetString%2A> method is recommended. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.  \n  \n-   The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.  \n  \n-   Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetCharCount%2A>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char*
      description: A pointer to the location at which to start writing the resulting set of characters.
    - id: charCount
      type: System.Int32
      description: The maximum number of characters to write.
    return:
      type: System.Int32
      description: The actual number of characters written at the location indicated by the <code>chars</code> parameter.
  overload: System.Text.Encoding.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>bytes</code> is `null`.  \n  \n -or-  \n  \n <code>chars</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>byteCount</code> or <code>charCount</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>charCount</code> is less than the resulting number of characters.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetChars(Byte[], Int32, Int32)
  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)
  fullName: Encoding.GetChars(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.
  remarks: "<xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> gets characters from an input byte sequence. <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.  \n  \n If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n **Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays. If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=fullName>.  \n  \n The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding. The <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method, which handles multiple passes on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches. (For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call. <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)  \n  \n-   If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.  \n  \n-   The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.  \n  \n-   Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetCharCount%2A>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice."
  example:
  - "The following example encodes a string into an array of bytes, and then decodes a range of the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CPP/getcharsic.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/CS/getcharsic.cs#1)]\n [!code-vb[System.Text.Encoding.GetCharsIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetCharsIC/VB/getcharsic.vb#1)]"
  syntax:
    content: public virtual char[] GetChars (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Char[]
      description: A character array containing the results of decoding the specified sequence of bytes.
  overload: System.Text.Encoding.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetChars(System.Byte[])
  commentId: M:System.Text.Encoding.GetChars(System.Byte[])
  id: GetChars(System.Byte[])
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetChars(Byte[])
  nameWithType: Encoding.GetChars(Byte[])
  fullName: Encoding.GetChars(Byte[])
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.
  remarks: "<xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> gets characters from an input byte sequence. <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> is different than <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> because <xref:System.Text.Encoding> expects discrete conversions, while <xref:System.Text.Decoder> is designed for multiple passes on a single input stream.  \n  \n If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n **Note** This method is intended to operate on Unicode characters, not on arbitrary binary data, such as byte arrays. If you need to encode arbitrary binary data into text, you should use a protocol such as uuencode, which is implemented by methods such as <xref:System.Convert.ToBase64CharArray%2A?displayProperty=fullName>.  \n  \n The <xref:System.Text.Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Encoding.GetChars%2A> method performs the actual decoding. The <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> method expects discrete conversions, in contrast to the <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method, which handles multiple passes on a single input stream.  \n  \n Several versions of <xref:System.Text.Encoding.GetCharCount%2A> and <xref:System.Text.Encoding.GetChars%2A> are supported. The following are some programming considerations for use of these methods:  \n  \n-   Your app might need to decode multiple input bytes from a code page and process the bytes using multiple calls. In this case, you probably need to maintain state between calls, because byte sequences can be interrupted when processed in batches. (For example, part of an ISO-2022 shift sequence may end one <xref:System.Text.Encoding.GetChars%2A> call and continue at the beginning of the next <xref:System.Text.Encoding.GetChars%2A> call. <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> will call the fallback for those incomplete sequences, but <xref:System.Text.Decoder> will remember those sequences for the next call.)  \n  \n-   If your app handles string outputs, it is recommended to use the <xref:System.Text.Encoding.GetString%2A> method. Since this method must check string length and allocate a buffer, it is slightly slower, but the resulting <xref:System.String> type is to be preferred.  \n  \n-   The byte version of <xref:System.Text.Encoding.GetChars%28System.Byte%2A%2CSystem.Int32%2CSystem.Char%2A%2CSystem.Int32%29> allows some fast techniques, particularly with multiple calls to large buffers. Bear in mind, however, that this method version is sometimes unsafe, since pointers are required.  \n  \n-   If your app must convert a large amount of data, it should reuse the output buffer. In this case, the [\\], Int32, Int32, Char\\<xref:System.Text.Encoding.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29> version that supports output character buffers is the best choice.  \n  \n-   Consider using the <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> method instead of <xref:System.Text.Encoding.GetCharCount%2A>. The conversion method converts as much data as possible and throws an exception if the output buffer is too small. For continuous decoding of a stream, this method is often the best choice."
  example:
  - "The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]\n [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]"
  syntax:
    content: public virtual char[] GetChars (byte[] bytes);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    return:
      type: System.Char[]
      description: A character array containing the results of decoding the specified sequence of bytes.
  overload: System.Text.Encoding.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null`.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetDecoder
  commentId: M:System.Text.Encoding.GetDecoder
  id: GetDecoder
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetDecoder()
  nameWithType: Encoding.GetDecoder()
  fullName: Encoding.GetDecoder()
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.
  remarks: The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.Encoding.GetChars%2A> method of this class. However, a <xref:System.Text.Decoder> maintains state information between calls so it correctly decodes byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.
  syntax:
    content: public virtual System.Text.Decoder GetDecoder ();
    parameters: []
    return:
      type: System.Text.Decoder
      description: A <xref href="System.Text.Decoder"></xref> that converts an encoded sequence of bytes into a sequence of characters.
  overload: System.Text.Encoding.GetDecoder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetEncoder
  commentId: M:System.Text.Encoding.GetEncoder
  id: GetEncoder
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetEncoder()
  nameWithType: Encoding.GetEncoder()
  fullName: Encoding.GetEncoder()
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.
  remarks: The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.Encoding.GetBytes%2A> method of this class. However, a <xref:System.Text.Encoder> maintains state information between calls so it correctly encodes character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.
  syntax:
    content: public virtual System.Text.Encoder GetEncoder ();
    parameters: []
    return:
      type: System.Text.Encoder
      description: A <xref href="System.Text.Encoder"></xref> that converts a sequence of Unicode characters into an encoded sequence of bytes.
  overload: System.Text.Encoding.GetEncoder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetEncoding(System.Int32)
  commentId: M:System.Text.Encoding.GetEncoding(System.Int32)
  id: GetEncoding(System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetEncoding(Int32)
  nameWithType: Encoding.GetEncoding(Int32)
  fullName: Encoding.GetEncoding(Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Returns the encoding associated with the specified code page identifier.
  remarks: "The fallback handler depends on the encoding type of `codepage`. If `codepage` is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used. Otherwise, a replacement fallback handler is used. These fallback handlers may not be appropriate for your app. To specify the fallback handler used by the encoding specified by `codepage`, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> overload.  \n  \n The <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages. However, the .NET Framework natively supports some encodings. For a list of code pages, see the <xref:System.Text.Encoding> class topic. Alternatively, you can call the <xref:System.Text.Encoding.GetEncodings%2A> method to get an array of <xref:System.Text.EncodingInfo> objects that contains information about all encodings.  \n  \n In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%28System.Int32%29> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.  \n  \n To get the encoding associated with the default ANSI code page in the operating system's regional and language settings, you can either supply a value 0 for the `codepage` argument or, on the full .NET Framework on the Windows desktop, retrieve the value of the <xref:System.Text.Encoding.Default%2A> property. To determine the default code pages used on the system, use the Windows [GetSystemDefaultLangID](http://msdn.microsoft.com/library/windows/desktop/dd318120.aspx) function. To determine the current ANSI code page, call the Windows [GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx) function from the full .NET Framework on the Windows desktop.  \n  \n> [!NOTE]\n>  Some unsupported code pages cause the exception <xref:System.ArgumentException> to be thrown, whereas others cause <xref:System.NotSupportedException>. Therefore, your code must catch all exceptions indicated in the Exceptions section.  \n  \n> [!NOTE]\n>  The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption. For this reason, encoding and decoding data using the default code page returned by `Encoding.GetEncoding(0)` is not recommended. For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.  \n  \n <xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings. You should use the constructors of derived classes to get an instance with different settings. For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection."
  example:
  - "The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.  \n  \n [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]\n [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]\n [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]"
  syntax:
    content: public static System.Text.Encoding GetEncoding (int codepage);
    parameters:
    - id: codepage
      type: System.Int32
      description: "The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <xref href=\"System.Text.Encoding\"></xref> class topic.  \n  \n -or-  \n  \n 0 (zero), to use the default encoding."
    return:
      type: System.Text.Encoding
      description: The encoding that is associated with the specified code page.
  overload: System.Text.Encoding.GetEncoding*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>codepage</code> is less than zero or greater than 65535.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>codepage</code> is not supported by the underlying platform.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>codepage</code> is not supported by the underlying platform.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetEncoding(System.String)
  commentId: M:System.Text.Encoding.GetEncoding(System.String)
  id: GetEncoding(System.String)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetEncoding(String)
  nameWithType: Encoding.GetEncoding(String)
  fullName: Encoding.GetEncoding(String)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Returns the encoding associated with the specified code page name.
  remarks: "The fallback handler depends on the encoding type of `name`. If `name` is a code page or double-byte character set (DBCS) encoding, a best-fit fallback handler is used. Otherwise, a replacement fallback handler is used. These fallback handlers may not be appropriate for your app. To specify the fallback handler used by the encoding specified by `name`, you can call the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> overload.  \n  \n The `GetEncoding` method relies on the underlying platform to support most code pages. However, the .NET Framework natively supports some encodings.  \n  \n In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%28System.String%29> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.  \n  \n> [!NOTE]\n>  The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption. For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.  \n  \n For a list of code pages, see the <xref:System.Text.Encoding> class topic. You can call the <xref:System.Text.Encoding.GetEncodings%2A> method in the full .NET Framework on the Windows desktop to get a list of all encodings.  \n  \n <xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings. You should use the constructors of derived classes to get an instance with different settings. For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection."
  example:
  - "The following example gets two instances of the same encoding (one by code page and another by name), and checks their equality.  \n  \n [!code-cpp[System.Text.Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CPP/equals.cpp#1)]\n [!code-csharp[System.Text.Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Equals/CS/equals.cs#1)]\n [!code-vb[System.Text.Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Equals/VB/equals.vb#1)]"
  syntax:
    content: public static System.Text.Encoding GetEncoding (string name);
    parameters:
    - id: name
      type: System.String
      description: The code page name of the preferred encoding. Any value returned by the <xref href="System.Text.Encoding.WebName"></xref> property is valid. Possible values are listed in the Name column of the table that appears in the <xref href="System.Text.Encoding"></xref> class topic.
    return:
      type: System.Text.Encoding
      description: The encoding  associated with the specified code page.
  overload: System.Text.Encoding.GetEncoding*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code> is not a valid code page name.  \n  \n -or-  \n  \n The code page indicated by <code>name</code> is not supported by the underlying platform."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  commentId: M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  id: GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)
  fullName: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.
  remarks: "> [!NOTE]\n>  Some unsupported code pages cause the exception <xref:System.ArgumentException> to be thrown, whereas others cause <xref:System.NotSupportedException>. Therefore, your code must catch all exceptions indicated in the Exceptions section.  \n  \n The <xref:System.Text.Encoding.GetEncoding%2A> method relies on the underlying platform to support most code pages. However, the .NET Framework natively supports some encodings.  \n  \n In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.  \n  \n> [!NOTE]\n>  The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption. For this reason, encoding and decoding data using the default code page returned by `Encoding.GetEncoding(0)` is not recommended. For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.  \n  \n For a list of code pages, see the <xref:System.Text.Encoding> class topic. You can call the <xref:System.Text.Encoding.GetEncodings%2A> method in the full .NET Framework on the Windows desktop to get a list of all encodings.  \n  \n To get the encoding associated with the default ANSI code page in the operating system's regional and language settings, you can either supply a value of 0 for the `codepage` argument or, if your code is running on the full .NET Framework on the Windows desktop, retrieve the value of the <xref:System.Text.Encoding.Default%2A?displayProperty=fullName> property. To determine the default code pages used on the system, use the Windows [GetSystemDefaultLangID](http://msdn.microsoft.com/library/windows/desktop/dd318120.aspx) function. To determine the current ANSI code page, call the Windows [GetACP](http://msdn.microsoft.com/library/windows/desktop/dd318070.aspx) function from the full .NET Framework on the Windows desktop.  \n  \n <xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings. You should use the constructors of derived classes to get an instance with different settings. For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection."
  example:
  - "The following example demonstrates the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> method.  \n  \n [!code-cpp[sys.txt.fallbackEncRpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cpp/fallEncRpl.cpp#1)]\n [!code-csharp[sys.txt.fallbackEncRpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cs/fallEncRpl.cs#1)]\n [!code-vb[sys.txt.fallbackEncRpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncRpl/vb/fallEncRpl.vb#1)]"
  syntax:
    content: public static System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
    parameters:
    - id: codepage
      type: System.Int32
      description: "The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <xref href=\"System.Text.Encoding\"></xref> class topic.  \n  \n -or-  \n  \n 0 (zero), to use the default encoding."
    - id: encoderFallback
      type: System.Text.EncoderFallback
      description: An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.
    - id: decoderFallback
      type: System.Text.DecoderFallback
      description: An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.
    return:
      type: System.Text.Encoding
      description: The encoding that is associated with the specified code page.
  overload: System.Text.Encoding.GetEncoding*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>codepage</code> is less than zero or greater than 65535.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>codepage</code> is not supported by the underlying platform.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>codepage</code> is not supported by the underlying platform.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  commentId: M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  id: GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetEncoding(String, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)
  fullName: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Returns the encoding associated with the specified code page name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.
  remarks: "The `GetEncoding` method relies on the underlying platform to support most code pages. However, the .NET Framework natively supports some encodings.  \n  \n In addition to the encodings that are intrinsically supported on a specific platform version of the .NET Framework, the <xref:System.Text.Encoding.GetEncoding%28System.Int32%29> method returns any additional encodings that are made available by registering an <xref:System.Text.EncodingProvider> object.  \n  \n> [!NOTE]\n>  The ANSI code pages can be different on different computers, or can be changed for a single computer, leading to data corruption. For the most consistent results, you should use Unicode, such as UTF-8 (code page 65001) or UTF-16, instead of a specific code page.  \n  \n For a list of code pages, see the <xref:System.Text.Encoding> class topic. You can call the <xref:System.Text.Encoding.GetEncodings%2A> method on the full .NET Framework on the Windows desktop to get a list of all encodings.  \n  \n <xref:System.Text.Encoding.GetEncoding%2A> returns a cached instance with default settings. You should use the constructors of derived classes to get an instance with different settings. For example, the <xref:System.Text.UTF32Encoding> class provides a constructor that lets you enable error detection."
  example:
  - "The following example demonstrates the <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> method.  \n  \n [!code-cpp[sys.txt.fallbackEncRpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cpp/fallEncRpl.cpp#1)]\n [!code-csharp[sys.txt.fallbackEncRpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncRpl/cs/fallEncRpl.cs#1)]\n [!code-vb[sys.txt.fallbackEncRpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncRpl/vb/fallEncRpl.vb#1)]"
  syntax:
    content: public static System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);
    parameters:
    - id: name
      type: System.String
      description: The code page name of the preferred encoding. Any value returned by the <xref href="System.Text.Encoding.WebName"></xref> property is valid. Possible values are listed in the Name column of the table that appears in the <xref href="System.Text.Encoding"></xref> class topic.
    - id: encoderFallback
      type: System.Text.EncoderFallback
      description: An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.
    - id: decoderFallback
      type: System.Text.DecoderFallback
      description: An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.
    return:
      type: System.Text.Encoding
      description: The encoding that is associated with the specified code page.
  overload: System.Text.Encoding.GetEncoding*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code> is not a valid code page name.  \n  \n -or-  \n  \n The code page indicated by <code>name</code> is not supported by the underlying platform."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetEncodings
  commentId: M:System.Text.Encoding.GetEncodings
  id: GetEncodings
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetEncodings()
  nameWithType: Encoding.GetEncodings()
  fullName: Encoding.GetEncodings()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Returns an array that contains all encodings.
  remarks: "This method returns a list of supported encodings, uniquely distinguished by code page. For a table that lists the supported encodings, see the <xref:System.Text.Encoding> class topic.  \n  \n> [!NOTE]\n>  The list of supported encodings returned by the <xref:System.Text.Encoding.GetEncodings%2A> method does not include any additional encodings made available by any <xref:System.Text.EncodingProvider> implementations that were registered by calls to the <xref:System.Text.Encoding.RegisterProvider%2A> method.  \n  \n Encodings 50220 and 50222 are both associated with the name \"iso-2022-jp\", but they are not identical. Encoding 50220 converts half-width Katakana characters to full-width Katakana characters, whereas encoding 50222 uses a shift-in/shift-out sequence to encode half-width Katakana characters. The display name for encoding 50222 is \"Japanese (JIS-Allow 1 byte Kana - SO/SI)\" to distinguish it from encoding 50220, which has the display name \"Japanese (JIS)\".  \n  \n If you request the encoding name \"iso-2022-jp\", the .NET Framework returns encoding 50220. However, the encoding that is appropriate for your app depends on the preferred treatment of the half-width Katakana characters.  \n  \n To get a specific encoding, you should use the <xref:System.Text.Encoding.GetEncoding%2A> method.  \n  \n <xref:System.Text.Encoding.GetEncodings%2A> is sometimes used to present the user with a list of encodings in a File **Save as** dialog box. However, many non-Unicode encodings are either incomplete and translate many characters to \"?\", or have subtly different behavior on different platforms. Consider using UTF-8 or UTF-16 as the default."
  example:
  - "The following example checks the values of the Boolean properties of each encoding.  \n  \n [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]\n [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]\n [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]"
  syntax:
    content: public static System.Text.EncodingInfo[] GetEncodings ();
    parameters: []
    return:
      type: System.Text.EncodingInfo[]
      description: An array that contains all encodings.
  overload: System.Text.Encoding.GetEncodings*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetHashCode
  commentId: M:System.Text.Encoding.GetHashCode
  id: GetHashCode
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Encoding.GetHashCode()
  fullName: Encoding.GetHashCode()
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Returns the hash code for the current instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: The hash code for the current instance.
  overload: System.Text.Encoding.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)
  commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetMaxByteCount(Int32)
  nameWithType: Encoding.GetMaxByteCount(Int32)
  fullName: Encoding.GetMaxByteCount(Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.
  remarks: "The `charCount` parameter actually specifies the number of <xref:System.Char> objects that represent the Unicode characters to encode, because the .NET Framework internally uses UTF-16 to represent Unicode characters. Consequently, most Unicode characters can be represented by one <xref:System.Char> object, but a Unicode character represented by a surrogate pair, for example, requires two <xref:System.Char> objects.  \n  \n To calculate the exact array size required by <xref:System.Text.Encoding.GetBytes%2A> to store the resulting bytes, you should use the <xref:System.Text.Encoding.GetByteCount%2A> method. To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.Encoding.GetByteCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n <xref:System.Text.Encoding.GetMaxByteCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.Encoding.GetMaxByteCount%2A> retrieves large values, particularly in cases where the worst case for the encoding involves switching modes for every character. For example, this can happen for ISO-2022-JP. For more information, see the blog entry \"[What's with Encoding.GetMaxByteCount() and Encoding.GetMaxCharCount()?](http://go.microsoft.com/fwlink/?LinkId=153702)\" (http://blogs.msdn.com/shawnste/archive/2005/03/02/383903.aspx).  \n  \n In most cases, this method retrieves reasonable values for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case when a more reasonable buffer is too small. You might also want to consider a different approach using <xref:System.Text.Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>.  \n  \n When using <xref:System.Text.Encoding.GetMaxByteCount%2A>, you should allocate the output buffer based on the maximum size of the input buffer. If the output buffer is constrained in size, you might use the <xref:System.Text.Encoding.Convert%2A> method.  \n  \n Note that <xref:System.Text.Encoding.GetMaxByteCount%2A> considers potential leftover surrogates from a previous decoder operation. Because of the decoder, passing a value of 1 to the method retrieves 2 for a single-byte encoding, such as ASCII. You should use the <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> property if this information is necessary.  \n  \n> [!NOTE]\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`."
  example:
  - "The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]"
  syntax:
    content: public abstract int GetMaxByteCount (int charCount);
    parameters:
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The maximum number of bytes produced by encoding the specified number of characters.
  overload: System.Text.Encoding.GetMaxByteCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>charCount</code> is less than zero.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)
  commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetMaxCharCount(Int32)
  nameWithType: Encoding.GetMaxCharCount(Int32)
  fullName: Encoding.GetMaxCharCount(Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.
  remarks: "To calculate the exact array size required by <xref:System.Text.Encoding.GetChars%2A> to store the resulting characters, you should use the <xref:System.Text.Encoding.GetCharCount%2A> method. To calculate the maximum array size, use the <xref:System.Text.Encoding.GetMaxCharCount%2A> method. The <xref:System.Text.Encoding.GetCharCount%2A> method generally allows allocation of less memory, while the <xref:System.Text.Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n <xref:System.Text.Encoding.GetMaxCharCount%2A> retrieves a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.Encoding.GetMaxCharCount%2A> retrieves large values.  \n  \n In most cases, this method retrieves reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is too small. You might also want to consider a different approach using <xref:System.Text.Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName>.  \n  \n <xref:System.Text.Encoding.GetMaxCharCount%2A> has no relation to <xref:System.Text.Encoding.GetBytes%2A>. If you needs a similar function to use with <xref:System.Text.Encoding.GetBytes%2A>, you should use <xref:System.Text.Encoding.GetMaxByteCount%2A>.  \n  \n When using <xref:System.Text.Encoding.GetMaxCharCount%2A>, you should allocate the output buffer based on the maximum size of the input buffer. If the output buffer is constrained in size, you might use the <xref:System.Text.Decoder.Convert%2A?displayProperty=fullName> method.  \n  \n Note that <xref:System.Text.Encoding.GetMaxCharCount%2A> considers the worst case for leftover bytes from a previous encoder operation. For most code pages, passing a value of 0 to this method retrieves values greater than or equal to 1.  \n  \n> [!NOTE]\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`."
  example:
  - "The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CPP/getchars.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/CS/getchars.cs#1)]\n [!code-vb[System.Text.Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetChars/VB/getchars.vb#1)]"
  syntax:
    content: public abstract int GetMaxCharCount (int byteCount);
    parameters:
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The maximum number of characters produced by decoding the specified number of bytes.
  overload: System.Text.Encoding.GetMaxCharCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>byteCount</code> is less than zero.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetPreamble
  commentId: M:System.Text.Encoding.GetPreamble
  id: GetPreamble
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetPreamble()
  nameWithType: Encoding.GetPreamble()
  fullName: Encoding.GetPreamble()
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.
  remarks: "Optionally, the <xref:System.Text.Encoding> object provides a preamble that is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (in Unicode, code point U+FEFF), it helps the decoder determine the byte order and the transformation format or UTF.  \n  \n The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):  \n  \n-   UTF-8: EF BB BF  \n  \n-   UTF-16 big endian byte order: FE FF  \n  \n-   UTF-16 little endian byte order: FF FE  \n  \n-   UTF-32 big endian byte order: 00 00 FE FF  \n  \n-   UTF-32 little endian byte order: FF FE 00 00  \n  \n You should use the BOM, because it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <xref:System.Text.Encoding> object, for example, untagged or improperly tagged web data or random text files stored when a business did not have international concerns or other data. Often user problems might be avoided if data is consistently and properly tagged, preferably in UTF-8 or UTF-16.  \n  \n For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.  \n  \n There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.  \n  \n For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).  \n  \n> [!CAUTION]\n>  To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble. However, most encodings do not provide a preamble. To ensure that the encoded bytes are decoded properly, you should use a Unicode encoding, that is, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding>, with a preamble."
  example:
  - "The following example determines the byte order of the encoding based on the preamble.  \n  \n [!code-cpp[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/CPP/preamble.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/CS/preamble.cs#1)]\n [!code-vb[System.Text.Encoding.GetPreamble Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetPreamble Example/VB/preamble.vb#1)]"
  syntax:
    content: public virtual byte[] GetPreamble ();
    parameters: []
    return:
      type: System.Byte[]
      description: "A byte array containing a sequence of bytes that specifies the encoding used.  \n  \n -or-  \n  \n A byte array of length zero, if a preamble is not required."
  overload: System.Text.Encoding.GetPreamble*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetString(System.Byte[])
  commentId: M:System.Text.Encoding.GetString(System.Byte[])
  id: GetString(System.Byte[])
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetString(Byte[])
  nameWithType: Encoding.GetString(Byte[])
  fullName: Encoding.GetString(Byte[])
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, decodes all the bytes in the specified byte array into a string.
  remarks: "If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> object returned by the <xref:System.Text.Encoding.GetDecoder%2A> method of a derived class.  \n  \n See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> reference topic for a discussion of decoding techniques and considerations.  \n  \n Note that the precise behavior of the <xref:System.Text.Encoding.GetString%2A> method for a particular <xref:System.Text.Encoding> implementation depends on the fallback strategy defined for that <xref:System.Text.Encoding> object. For more information, see the \"Choosing a Fallback Strategy\" section of the [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) topic."
  example:
  - "The following example reads a UTF-8 encoded string from a binary file represented by a <xref:System.IO.FileStream> object. For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the <xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%29> method to perform the decoding. For larger files, it reads 2,048 bytes at a time into a byte array, calls the <xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method to determine how many characters are contained in the array, and then calls the <xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=fullName> method to perform the decoding.  \n  \n [!code-csharp[System.Text.Encoding.GetString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetString/CS/getstring1.cs#2)]\n [!code-vb[System.Text.Encoding.GetString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetString/VB/getstring1.vb#2)]  \n  \n The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.  \n  \n```  \n  \nThis is a UTF-8-encoded file that contains primarily Latin text, although it   \ndoes list the first twelve letters of the Russian (Cyrillic) alphabet:  \n  \nА б в г д е ё ж з и й к  \n  \nThe goal is to save this file, then open and decode it as a binary stream.  \n  \n```"
  syntax:
    content: public virtual string GetString (byte[] bytes);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    return:
      type: System.String
      description: A string that contains the results of decoding the specified sequence of bytes.
  overload: System.Text.Encoding.GetString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The byte array contains invalid Unicode code points.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null`.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
  commentId: M:System.Text.Encoding.GetString(System.Byte*,System.Int32)
  id: GetString(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetString(Byte*, Int32)
  nameWithType: Encoding.GetString(Byte*, Int32)
  fullName: Encoding.GetString(Byte*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string.
  remarks: "The <xref:System.Text.Encoding.GetString%2A> method is designed to optimize performance when you have a native pointer to a byte array. Instead of creating a managed byte array and then decoding it, you can instead call this method without having to create any intermediate objects.  \n  \n If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> object returned by the <xref:System.Text.Encoding.GetDecoder%2A> method of a derived class.  \n  \n See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> reference topic for a discussion of decoding techniques and considerations.  \n  \n Note that the precise behavior of the <xref:System.Text.Encoding.GetString%2A> method for a particular <xref:System.Text.Encoding> implementation depends on the fallback strategy defined for that <xref:System.Text.Encoding> object. For more information, see the \"Choosing a Fallback Strategy\" section of the [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) topic."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Security.SecurityCritical]

      public string GetString (byte* bytes, int byteCount);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to a byte array.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.String
      description: A string that contains the results of decoding the specified sequence of bytes.
  overload: System.Text.Encoding.GetString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is a null pointer.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>byteCount</code> is less than zero.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A   fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: GetString(Byte[], Int32, Int32)
  nameWithType: Encoding.GetString(Byte[], Int32, Int32)
  fullName: Encoding.GetString(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.
  remarks: "If the data to be converted is available only in sequential blocks (such as data read from a stream) or if the amount of data is so large that it needs to be divided into smaller blocks, you should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.Encoding.GetDecoder%2A> method or the <xref:System.Text.Encoding.GetEncoder%2A> method, respectively, of a derived class.  \n  \n See the Remarks section of the <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> reference topic for a discussion of decoding techniques and considerations."
  example:
  - "The following example reads a UTF-8 encoded string from a binary file that is represented by a <xref:System.IO.FileStream> object. For files that are smaller than 2,048 bytes, it reads the contents of the entire file into a byte array and calls the <xref:System.Text.Encoding.GetString%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to perform the decoding. For larger files, it reads 2,048 bytes at a time into a byte array, calls the <xref:System.Text.Decoder.GetCharCount%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method to determine how many characters are contained in the array, and then calls the <xref:System.Text.Decoder.GetChars%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Char%5B%5D%2CSystem.Int32%29?displayProperty=fullName> method to perform the decoding.  \n  \n [!code-csharp[System.Text.Encoding.GetString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetString/CS/getstring2.cs#3)]\n [!code-vb[System.Text.Encoding.GetString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetString/VB/getstring2.vb#3)]  \n  \n The example uses the following text, which should be saved to a UTF-8 encoded file named Utf8Example.txt.  \n  \n```  \n  \nThis is a UTF-8-encoded file that contains primarily Latin text, although it   \ndoes list the first twelve letters of the Russian (Cyrillic) alphabet:  \n  \nА б в г д е ё ж з и й к  \n  \nThe goal is to save this file, then open and decode it as a binary stream.  \n  \n```"
  syntax:
    content: public virtual string GetString (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.String
      description: A string that contains the results of decoding the specified sequence of bytes.
  overload: System.Text.Encoding.GetString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The byte array contains invalid Unicode code points.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.HeaderName
  commentId: P:System.Text.Encoding.HeaderName
  id: HeaderName
  parent: System.Text.Encoding
  langs:
  - csharp
  name: HeaderName
  nameWithType: Encoding.HeaderName
  fullName: Encoding.HeaderName
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets a name for the current encoding that can be used with mail agent header tags.
  remarks: "If you need an encoding for a header name, you should call the <xref:System.Text.Encoding.GetEncoding%2A> method with the <xref:System.Text.Encoding.HeaderName%2A> property. Often the method retrieves a different encoding from the test encoding furnished in the call. Generally only e-mail applications need to retrieve such an encoding.  \n  \n In some cases, the value of the <xref:System.Text.Encoding.BodyName%2A> property corresponds to the international standard that defines that encoding. This doesn't mean that the implementation complies in full with that standard.  \n  \n Note that <xref:System.Text.Encoding.WebName%2A> returns the name to use to describe an encoding. The <xref:System.Text.Encoding.HeaderName%2A> property defines a different encoding that might work better for an e-mail application, for example. However, use of the property to define the encoding is not recommended."
  example:
  - "The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=fullName>. It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.  \n  \n [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]\n [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]\n [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]"
  syntax:
    content: public virtual string HeaderName { get; }
    return:
      type: System.String
      description: "A name for the current <xref href=\"System.Text.Encoding\"></xref> to use with mail agent header tags.  \n  \n -or-  \n  \n An empty string (\"\"), if the current <xref href=\"System.Text.Encoding\"></xref> cannot be used."
  overload: System.Text.Encoding.HeaderName*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.IsAlwaysNormalized
  commentId: M:System.Text.Encoding.IsAlwaysNormalized
  id: IsAlwaysNormalized
  parent: System.Text.Encoding
  langs:
  - csharp
  name: IsAlwaysNormalized()
  nameWithType: Encoding.IsAlwaysNormalized()
  fullName: Encoding.IsAlwaysNormalized()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets a value indicating whether the current encoding is always normalized, using the default normalization form.
  remarks: The default normalization form is <xref:System.Text.NormalizationForm.FormC>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public bool IsAlwaysNormalized ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Text.Encoding"></xref> is always normalized; otherwise, `false`. The default is `false`.'
  overload: System.Text.Encoding.IsAlwaysNormalized*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  commentId: M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  id: IsAlwaysNormalized(System.Text.NormalizationForm)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: IsAlwaysNormalized(NormalizationForm)
  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)
  fullName: Encoding.IsAlwaysNormalized(NormalizationForm)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets a value indicating whether the current encoding is always normalized, using the specified normalization form.
  remarks: The default normalization form is <xref:System.Text.NormalizationForm.FormC>, which uses full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual bool IsAlwaysNormalized (System.Text.NormalizationForm form);
    parameters:
    - id: form
      type: System.Text.NormalizationForm
      description: One of the <xref href="System.Text.NormalizationForm"></xref> values.
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Text.Encoding"></xref> object is always normalized using the specified <xref href="System.Text.NormalizationForm"></xref> value; otherwise, `false`. The default is `false`.'
  overload: System.Text.Encoding.IsAlwaysNormalized*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.IsBrowserDisplay
  commentId: P:System.Text.Encoding.IsBrowserDisplay
  id: IsBrowserDisplay
  parent: System.Text.Encoding
  langs:
  - csharp
  name: IsBrowserDisplay
  nameWithType: Encoding.IsBrowserDisplay
  fullName: Encoding.IsBrowserDisplay
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for displaying content.
  remarks: ''
  example:
  - "The following example checks the values of the Boolean properties of each encoding.  \n  \n [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]\n [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]\n [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]"
  syntax:
    content: public virtual bool IsBrowserDisplay { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Text.Encoding"></xref> can be used by browser clients for displaying content; otherwise, `false`.'
  overload: System.Text.Encoding.IsBrowserDisplay*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.IsBrowserSave
  commentId: P:System.Text.Encoding.IsBrowserSave
  id: IsBrowserSave
  parent: System.Text.Encoding
  langs:
  - csharp
  name: IsBrowserSave
  nameWithType: Encoding.IsBrowserSave
  fullName: Encoding.IsBrowserSave
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets a value indicating whether the current encoding can be used by browser clients for saving content.
  remarks: ''
  example:
  - "The following example checks the values of the Boolean properties of each encoding.  \n  \n [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]\n [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]\n [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]"
  syntax:
    content: public virtual bool IsBrowserSave { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Text.Encoding"></xref> can be used by browser clients for saving content; otherwise, `false`.'
  overload: System.Text.Encoding.IsBrowserSave*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.IsMailNewsDisplay
  commentId: P:System.Text.Encoding.IsMailNewsDisplay
  id: IsMailNewsDisplay
  parent: System.Text.Encoding
  langs:
  - csharp
  name: IsMailNewsDisplay
  nameWithType: Encoding.IsMailNewsDisplay
  fullName: Encoding.IsMailNewsDisplay
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for displaying content.
  remarks: ''
  example:
  - "The following example checks the values of the Boolean properties of each encoding.  \n  \n [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]\n [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]\n [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]"
  syntax:
    content: public virtual bool IsMailNewsDisplay { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Text.Encoding"></xref> can be used by mail and news clients for displaying content; otherwise, `false`.'
  overload: System.Text.Encoding.IsMailNewsDisplay*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.IsMailNewsSave
  commentId: P:System.Text.Encoding.IsMailNewsSave
  id: IsMailNewsSave
  parent: System.Text.Encoding
  langs:
  - csharp
  name: IsMailNewsSave
  nameWithType: Encoding.IsMailNewsSave
  fullName: Encoding.IsMailNewsSave
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets a value indicating whether the current encoding can be used by mail and news clients for saving content.
  remarks: ''
  example:
  - "The following example checks the values of the Boolean properties of each encoding.  \n  \n [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]\n [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]\n [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]"
  syntax:
    content: public virtual bool IsMailNewsSave { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Text.Encoding"></xref> can be used by mail and news clients for saving content; otherwise, `false`.'
  overload: System.Text.Encoding.IsMailNewsSave*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.IsReadOnly
  commentId: P:System.Text.Encoding.IsReadOnly
  id: IsReadOnly
  parent: System.Text.Encoding
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: Encoding.IsReadOnly
  fullName: Encoding.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets a value indicating whether the current encoding is read-only.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Text.Encoding"></xref> is read-only; otherwise, `false`. The default is `true`.'
  overload: System.Text.Encoding.IsReadOnly*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.IsSingleByte
  commentId: P:System.Text.Encoding.IsSingleByte
  id: IsSingleByte
  parent: System.Text.Encoding
  langs:
  - csharp
  name: IsSingleByte
  nameWithType: Encoding.IsSingleByte
  fullName: Encoding.IsSingleByte
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.
  remarks: "For a single-byte encoding, for example, <xref:System.Text.ASCIIEncoding>, this property retrieves `true`.  \n  \n> [!CAUTION]\n>  You should be careful in what your application does with the value for <xref:System.Text.Encoding.IsSingleByte%2A>. An assumption of how an Encoding will proceed may still be wrong. For example, Windows-1252 has a value of `true` for <xref:System.Text.Encoding.IsSingleByte%2A?displayProperty=fullName>, but Encoding.GetMaxByteCount(1) returns 2. This is because the method considers potential leftover surrogates from a previous decoder operation."
  example:
  - "The following example checks the values of the Boolean properties of each encoding.  \n  \n [!code-cpp[System.Text.Encoding.IsProps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CPP/isprops.cpp#1)]\n [!code-csharp[System.Text.Encoding.IsProps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/CS/isprops.cs#1)]\n [!code-vb[System.Text.Encoding.IsProps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.IsProps/VB/isprops.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual bool IsSingleByte { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Text.Encoding"></xref> uses single-byte code points; otherwise, `false`.'
  overload: System.Text.Encoding.IsSingleByte*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  commentId: M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  id: RegisterProvider(System.Text.EncodingProvider)
  parent: System.Text.Encoding
  langs:
  - csharp
  name: RegisterProvider(EncodingProvider)
  nameWithType: Encoding.RegisterProvider(EncodingProvider)
  fullName: Encoding.RegisterProvider(EncodingProvider)
  type: Method
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Registers an encoding provider.
  remarks: "The <xref:System.Text.Encoding.RegisterProvider%2A> method allows you to register a class derived from <xref:System.Text.EncodingProvider> that makes character encodings available on a platform that does not otherwise support them. Once the encoding provider is registered, the encodings that it supports can be retrieved by calling any <xref:System.Text.Encoding.GetEncoding%2A?displayProperty=fullName> overload.  \n  \n [!INCLUDE[net_v46](~/includes/net-v46-md.md)] includes one encoding provider, <xref:System.Text.CodePagesEncodingProvider>, that makes the encodings available that are present in the full .NET Framework but are not available in [!INCLUDE[net_v46](~/includes/net-v46-md.md)]. By default, [!INCLUDE[net_v46](~/includes/net-v46-md.md)] only supports the Unicode encodings, ASCII, and code page 28591.  \n  \n If the same encoding provider is used in multiple calls to the <xref:System.Text.Encoding.RegisterProvider%2A> method, only the first method call registers the provider. Subsequent calls are ignored.  \n  \n If the <xref:System.Text.Encoding.RegisterProvider%2A> method is called to register multiple providers that handle the same encoding, the last registered provider is the used for all encoding and decoding operations. Any previously registered providers are ignored."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static void RegisterProvider (System.Text.EncodingProvider provider);
    parameters:
    - id: provider
      type: System.Text.EncodingProvider
      description: A subclass of <xref href="System.Text.EncodingProvider"></xref> that provides access to additional character encodings.
  overload: System.Text.Encoding.RegisterProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>provider</code> is `null`.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.Unicode
  commentId: P:System.Text.Encoding.Unicode
  id: Unicode
  parent: System.Text.Encoding
  langs:
  - csharp
  name: Unicode
  nameWithType: Encoding.Unicode
  fullName: Encoding.Unicode
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets an encoding for the UTF-16 format using the little endian byte order.
  remarks: "For information about the encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).  \n  \n The <xref:System.Text.UnicodeEncoding> object that is returned by this property may not have the appropriate behavior for your app. It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with a question mark (\"?\") character. Instead, you can call the <xref:System.Text.UnicodeEncoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName> constructor to instantiate a little endian <xref:System.Text.UnicodeEncoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.  \n  \n [!code-csharp[System.Text.Encoding.Unicode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.unicode/cs/unicode1.cs#2)]\n [!code-vb[System.Text.Encoding.Unicode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.unicode/vb/unicode1.vb#2)]"
  example:
  - "The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]"
  syntax:
    content: public static System.Text.Encoding Unicode { get; }
    return:
      type: System.Text.Encoding
      description: An encoding for the UTF-16 format using the little endian byte order.
  overload: System.Text.Encoding.Unicode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.UTF32
  commentId: P:System.Text.Encoding.UTF32
  id: UTF32
  parent: System.Text.Encoding
  langs:
  - csharp
  name: UTF32
  nameWithType: Encoding.UTF32
  fullName: Encoding.UTF32
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets an encoding for the UTF-32 format using the little endian byte order.
  remarks: "The <xref:System.Text.UTF32Encoding> object that is returned by this property may not have the appropriate behavior for your app. It uses replacement fallback to replace each string that it cannot encode and each byte that it cannot decode with the Unicode REPLACEMENT CHARACTER (U+FFFE). Instead, you can call the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName> constructor to instantiate a <xref:System.Text.UTF32Encoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.  \n  \n [!code-csharp[System.Text.Encoding.UTF32#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf32/cs/encoding.utf32.1.cs#1)]\n [!code-vb[System.Text.Encoding.UTF32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf32/vb/encoding.utf32.1.vb#1)]  \n  \n For a discussion of little endian byte order, see the <xref:System.Text.Encoding> class topic.  \n  \n For information about the encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md)."
  example:
  - "The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]"
  syntax:
    content: public static System.Text.Encoding UTF32 { get; }
    return:
      type: System.Text.Encoding
      description: An  encoding object for the UTF-32 format using the little endian byte order.
  overload: System.Text.Encoding.UTF32*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.UTF7
  commentId: P:System.Text.Encoding.UTF7
  id: UTF7
  parent: System.Text.Encoding
  langs:
  - csharp
  name: UTF7
  nameWithType: Encoding.UTF7
  fullName: Encoding.UTF7
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets an encoding for the UTF-7 format.
  remarks: UTF-7 encoding is used primarily in environments that historically have been restricted to 7 bits, such as NNTP and some email applications. Because of issues with robustness and security, you should not use UTF7 encoding in 8-bit environments where UTF-8 encoding can be used instead.
  example:
  - "The following example determines the number of bytes required to encode a character array, encodes the characters, and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]\n [!code-csharp[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]\n [!code-vb[System.Text.Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.GetBytes_CharArr/VB/getbytes_chararr.vb#1)]"
  syntax:
    content: public static System.Text.Encoding UTF7 { get; }
    return:
      type: System.Text.Encoding
      description: An encoding for the UTF-7 format.
  overload: System.Text.Encoding.UTF7*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.UTF8
  commentId: P:System.Text.Encoding.UTF8
  id: UTF8
  parent: System.Text.Encoding
  langs:
  - csharp
  name: UTF8
  nameWithType: Encoding.UTF8
  fullName: Encoding.UTF8
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: Gets an encoding for the UTF-8 format.
  remarks: "This property returns a <xref:System.Text.UTF8Encoding> object that encodes Unicode (UTF-16-encoded) characters into a sequence of one to four bytes per character, and that decodes a UTF-8-encoded byte array to Unicode (UTF-16-encoded) characters. For information about the character encodings supported by the .NET Framework and a discussion of which Unicode encoding to use, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).  \n  \n The <xref:System.Text.UTF8Encoding> object that is returned by this property might not have the appropriate behavior for your app.  \n  \n-   It returns a <xref:System.Text.UTF8Encoding> object that provides a Unicode byte order mark (BOM). To instantiate a UTF8 encoding that doesn't provide a BOM, call any overload of the <xref:System.Text.UTF8Encoding.%23ctor%2A> constructor.  \n  \n-   It returns a <xref:System.Text.UTF8Encoding> object that uses replacement fallback to replace each string that it can't encode and each byte that it can't decode with a question mark (\"?\") character. Instead, you can call the <xref:System.Text.UTF8Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=fullName> constructor to instantiate a <xref:System.Text.UTF8Encoding> object whose fallback is either an <xref:System.Text.EncoderFallbackException> or a <xref:System.Text.DecoderFallbackException>, as the following example illustrates.  \n  \n     [!code-csharp[System.Text.Encoding.UTF8#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf8/cs/encoding.utf8.1.cs#1)]\n     [!code-vb[System.Text.Encoding.UTF8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf8/vb/encoding.utf8.1.vb#1)]"
  example:
  - "The following example defines an array that consists of the following characters:  \n  \n-   LATIN SMALL LETTER Z (U+007A)  \n  \n-   LATIN SMALL LETTER A (U+0061)  \n  \n-   COMBINING BREVE (U+0306)  \n  \n-   LATIN SMALL LETTER AE WITH ACUTE (U+01FD)  \n  \n-   GREEK SMALL LETTER BETA (U+03B2)  \n  \n-   A surrogate pair (U+D800 U+DD54) that forms GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS (U+10154).  \n  \n It displays the UTF-16 code units of each character and determines the number of bytes required by a UTF-8 encoder to encode the character array. It then encodes the characters and displays the resulting UTF-8-encoded bytes.  \n  \n [!code-csharp[System.Text.Encoding.UTF8#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.encoding.utf8/cs/example1.cs#2)]\n [!code-vb[System.Text.Encoding.UTF8#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.encoding.utf8/vb/example1.vb#2)]"
  syntax:
    content: public static System.Text.Encoding UTF8 { get; }
    return:
      type: System.Text.Encoding
      description: An encoding for the UTF-8 format.
  overload: System.Text.Encoding.UTF8*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.WebName
  commentId: P:System.Text.Encoding.WebName
  id: WebName
  parent: System.Text.Encoding
  langs:
  - csharp
  name: WebName
  nameWithType: Encoding.WebName
  fullName: Encoding.WebName
  type: Property
  assemblies:
  - System.Text.Encoding
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.
  remarks: "The <xref:System.Text.Encoding.WebName%2A> property is the same as the <xref:System.Text.EncodingInfo.Name%2A> property.  \n  \n Note that <xref:System.Text.Encoding.WebName%2A> returns an IANA-registered name for the encoding. When its value is the name of a standard, the implementation of the encoding might not conform in full to that standard. The <xref:System.Text.Encoding.HeaderName%2A> property defines a different encoding that might work better for e-mail headers. However, most apps should use <xref:System.Text.Encoding.WebName%2A> instead.  \n  \n For more information on the IANA, go to [www.iana.org](http://www.iana.org/).  \n  \n The <xref:System.Text.Encoding.WebName%2A?displayProperty=fullName> is the same as the <xref:System.Text.EncodingInfo.Name%2A?displayProperty=fullName> returned by <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=fullName>. Some of the web names are duplicates; see the remarks for <xref:System.Text.Encoding.GetEncodings%2A?displayProperty=fullName> for more information."
  example:
  - "The following example includes the <xref:System.Text.Encoding.WebName%2A> in an HTML header.  \n  \n [!code-cpp[System.Text.Encoding.WebName#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.WebName/CPP/webname.cpp#1)]\n [!code-csharp[System.Text.Encoding.WebName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.WebName/CS/webname.cs#1)]\n [!code-vb[System.Text.Encoding.WebName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.WebName/VB/webname.vb#1)]  \n  \n The following example retrieves the different names for each encoding and displays the encodings with one or more names that are different from <xref:System.Text.EncodingInfo.Name%2A?displayProperty=fullName>. It displays <xref:System.Text.Encoding.EncodingName%2A> but does not compare against it.  \n  \n [!code-cpp[System.Text.Encoding.Names#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CPP/names.cpp#1)]\n [!code-csharp[System.Text.Encoding.Names#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.Names/CS/names.cs#1)]\n [!code-vb[System.Text.Encoding.Names#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.Names/VB/names.vb#1)]"
  syntax:
    content: public virtual string WebName { get; }
    return:
      type: System.String
      description: The IANA name for the current <xref href="System.Text.Encoding"></xref>.
  overload: System.Text.Encoding.WebName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.Encoding.WindowsCodePage
  commentId: P:System.Text.Encoding.WindowsCodePage
  id: WindowsCodePage
  parent: System.Text.Encoding
  langs:
  - csharp
  name: WindowsCodePage
  nameWithType: Encoding.WindowsCodePage
  fullName: Encoding.WindowsCodePage
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Text
  summary: When overridden in a derived class, gets the Windows operating system code page that most closely corresponds to the current encoding.
  remarks: This property is provided for compatibility with the Windows MultiLanguage (MLang) APIs, for example, in determining font families. For globalization, using one of the Unicode encodings is recommended instead. It is also recommended to use <xref:System.Text.Encoding.WebName%2A> instead of <xref:System.Text.Encoding.WindowsCodePage%2A> to identify the code page.
  example:
  - "The following example determines the Windows code page that most closely corresponds to each encoding.  \n  \n [!code-cpp[System.Text.Encoding.CodePage#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/CPP/codepage.cpp#1)]\n [!code-csharp[System.Text.Encoding.CodePage#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/CS/codepage.cs#1)]\n [!code-vb[System.Text.Encoding.CodePage#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoding.CodePage/VB/codepage.vb#1)]"
  syntax:
    content: public virtual int WindowsCodePage { get; }
    return:
      type: System.Int32
      description: The Windows operating system code page that most closely corresponds to the current <xref href="System.Text.Encoding"></xref>.
  overload: System.Text.Encoding.WindowsCodePage*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Text.DecoderFallbackException
  parent: System.Text
  isExternal: false
  name: DecoderFallbackException
  nameWithType: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
- uid: System.Text.EncoderFallbackException
  parent: System.Text
  isExternal: false
  name: EncoderFallbackException
  nameWithType: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Text.Encoding.#ctor
  parent: System.Text.Encoding
  isExternal: false
  name: Encoding()
  nameWithType: Encoding.Encoding()
  fullName: Encoding.Encoding()
- uid: System.Text.Encoding.#ctor(System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: Encoding(Int32)
  nameWithType: Encoding.Encoding(Int32)
  fullName: Encoding.Encoding(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: false
  name: Encoding(Int32, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.Encoding(Int32, EncoderFallback, DecoderFallback)
  fullName: Encoding.Encoding(Int32, EncoderFallback, DecoderFallback)
- uid: System.Text.EncoderFallback
  parent: System.Text
  isExternal: false
  name: EncoderFallback
  nameWithType: EncoderFallback
  fullName: System.Text.EncoderFallback
- uid: System.Text.DecoderFallback
  parent: System.Text
  isExternal: false
  name: DecoderFallback
  nameWithType: DecoderFallback
  fullName: System.Text.DecoderFallback
- uid: System.Text.Encoding.ASCII
  parent: System.Text.Encoding
  isExternal: false
  name: ASCII
  nameWithType: Encoding.ASCII
  fullName: Encoding.ASCII
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text.Encoding.BigEndianUnicode
  parent: System.Text.Encoding
  isExternal: false
  name: BigEndianUnicode
  nameWithType: Encoding.BigEndianUnicode
  fullName: Encoding.BigEndianUnicode
- uid: System.Text.Encoding.BodyName
  parent: System.Text.Encoding
  isExternal: false
  name: BodyName
  nameWithType: Encoding.BodyName
  fullName: Encoding.BodyName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.Encoding.Clone
  parent: System.Text.Encoding
  isExternal: false
  name: Clone()
  nameWithType: Encoding.Clone()
  fullName: Encoding.Clone()
- uid: System.Text.Encoding.CodePage
  parent: System.Text.Encoding
  isExternal: false
  name: CodePage
  nameWithType: Encoding.CodePage
  fullName: Encoding.CodePage
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)
  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)
  fullName: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: Convert(Encoding, Encoding, Byte[])
  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])
  fullName: Encoding.Convert(Encoding, Encoding, Byte[])
- uid: System.Text.Encoding.DecoderFallback
  parent: System.Text.Encoding
  isExternal: false
  name: DecoderFallback
  nameWithType: Encoding.DecoderFallback
  fullName: Encoding.DecoderFallback
- uid: System.Text.Encoding.Default
  parent: System.Text.Encoding
  isExternal: false
  name: Default
  nameWithType: Encoding.Default
  fullName: Encoding.Default
- uid: System.Text.Encoding.EncoderFallback
  parent: System.Text.Encoding
  isExternal: false
  name: EncoderFallback
  nameWithType: Encoding.EncoderFallback
  fullName: Encoding.EncoderFallback
- uid: System.Text.Encoding.EncodingName
  parent: System.Text.Encoding
  isExternal: false
  name: EncodingName
  nameWithType: Encoding.EncodingName
  fullName: Encoding.EncodingName
- uid: System.Text.Encoding.Equals(System.Object)
  parent: System.Text.Encoding
  isExternal: false
  name: Equals(Object)
  nameWithType: Encoding.Equals(Object)
  fullName: Encoding.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetByteCount(String, Int32, Int32)
  nameWithType: Encoding.GetByteCount(String, Int32, Int32)
  fullName: Encoding.GetByteCount(String, Int32, Int32)
- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetByteCount(Char[], Int32, Int32)
  nameWithType: Encoding.GetByteCount(Char[], Int32, Int32)
  fullName: Encoding.GetByteCount(Char[], Int32, Int32)
- uid: System.Char
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char[]
  parent: System
  isExternal: false
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Text.Encoding.GetByteCount(System.Char[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetByteCount(Char[])
  nameWithType: Encoding.GetByteCount(Char[])
  fullName: Encoding.GetByteCount(Char[])
- uid: System.Text.Encoding.GetByteCount(System.String)
  parent: System.Text.Encoding
  isExternal: false
  name: GetByteCount(String)
  nameWithType: Encoding.GetByteCount(String)
  fullName: Encoding.GetByteCount(String)
- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetByteCount(Char*, Int32)
  nameWithType: Encoding.GetByteCount(Char*, Int32)
  fullName: Encoding.GetByteCount(Char*, Int32)
- uid: System.Char*
  parent: System
  isExternal: false
  name: Char*
  nameWithType: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Text.Encoding.GetBytes(System.Char[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(Char[])
  nameWithType: Encoding.GetBytes(Char[])
  fullName: Encoding.GetBytes(Char[])
- uid: System.Text.Encoding.GetBytes(System.String)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(String)
  nameWithType: Encoding.GetBytes(String)
  fullName: Encoding.GetBytes(String)
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(Char[], Int32, Int32)
  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)
  fullName: Encoding.GetBytes(Char[], Int32, Int32)
- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(String, Int32, Int32)
  nameWithType: Encoding.GetBytes(String, Int32, Int32)
  fullName: Encoding.GetBytes(String, Int32, Int32)
- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(Char*, Int32, Byte*, Int32)
  nameWithType: Encoding.GetBytes(Char*, Int32, Byte*, Int32)
  fullName: Encoding.GetBytes(Char*, Int32, Byte*, Int32)
- uid: System.Byte*
  parent: System
  isExternal: false
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  nameWithType: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  nameWithType: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
- uid: System.Text.Encoding.GetCharCount(System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetCharCount(Byte[])
  nameWithType: Encoding.GetCharCount(Byte[])
  fullName: Encoding.GetCharCount(Byte[])
- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetCharCount(Byte*, Int32)
  nameWithType: Encoding.GetCharCount(Byte*, Int32)
  fullName: Encoding.GetCharCount(Byte*, Int32)
- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetCharCount(Byte[], Int32, Int32)
  nameWithType: Encoding.GetCharCount(Byte[], Int32, Int32)
  fullName: Encoding.GetCharCount(Byte[], Int32, Int32)
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetChars(Byte*, Int32, Char*, Int32)
  nameWithType: Encoding.GetChars(Byte*, Int32, Char*, Int32)
  fullName: Encoding.GetChars(Byte*, Int32, Char*, Int32)
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetChars(Byte[], Int32, Int32)
  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)
  fullName: Encoding.GetChars(Byte[], Int32, Int32)
- uid: System.Text.Encoding.GetChars(System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetChars(Byte[])
  nameWithType: Encoding.GetChars(Byte[])
  fullName: Encoding.GetChars(Byte[])
- uid: System.Text.Encoding.GetDecoder
  parent: System.Text.Encoding
  isExternal: false
  name: GetDecoder()
  nameWithType: Encoding.GetDecoder()
  fullName: Encoding.GetDecoder()
- uid: System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  nameWithType: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.Encoding.GetEncoder
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoder()
  nameWithType: Encoding.GetEncoder()
  fullName: Encoding.GetEncoder()
- uid: System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  nameWithType: Encoder
  fullName: System.Text.Encoder
- uid: System.Text.Encoding.GetEncoding(System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(Int32)
  nameWithType: Encoding.GetEncoding(Int32)
  fullName: Encoding.GetEncoding(Int32)
- uid: System.Text.Encoding.GetEncoding(System.String)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(String)
  nameWithType: Encoding.GetEncoding(String)
  fullName: Encoding.GetEncoding(String)
- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)
  fullName: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)
- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(String, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)
  fullName: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)
- uid: System.Text.Encoding.GetEncodings
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncodings()
  nameWithType: Encoding.GetEncodings()
  fullName: Encoding.GetEncodings()
- uid: System.Text.EncodingInfo
  name: EncodingInfo
  nameWithType: EncodingInfo
  fullName: System.Text.EncodingInfo
- uid: System.Text.EncodingInfo[]
  parent: System.Text
  isExternal: false
  name: EncodingInfo[]
  nameWithType: EncodingInfo[]
  fullName: System.Text.EncodingInfo[]
  spec.csharp:
  - uid: System.Text.EncodingInfo
    name: EncodingInfo
    nameWithType: EncodingInfo
    fullName: System.Text.EncodingInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Text.Encoding.GetHashCode
  parent: System.Text.Encoding
  isExternal: false
  name: GetHashCode()
  nameWithType: Encoding.GetHashCode()
  fullName: Encoding.GetHashCode()
- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetMaxByteCount(Int32)
  nameWithType: Encoding.GetMaxByteCount(Int32)
  fullName: Encoding.GetMaxByteCount(Int32)
- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetMaxCharCount(Int32)
  nameWithType: Encoding.GetMaxCharCount(Int32)
  fullName: Encoding.GetMaxCharCount(Int32)
- uid: System.Text.Encoding.GetPreamble
  parent: System.Text.Encoding
  isExternal: false
  name: GetPreamble()
  nameWithType: Encoding.GetPreamble()
  fullName: Encoding.GetPreamble()
- uid: System.Text.Encoding.GetString(System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetString(Byte[])
  nameWithType: Encoding.GetString(Byte[])
  fullName: Encoding.GetString(Byte[])
- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetString(Byte*, Int32)
  nameWithType: Encoding.GetString(Byte*, Int32)
  fullName: Encoding.GetString(Byte*, Int32)
- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetString(Byte[], Int32, Int32)
  nameWithType: Encoding.GetString(Byte[], Int32, Int32)
  fullName: Encoding.GetString(Byte[], Int32, Int32)
- uid: System.Text.Encoding.HeaderName
  parent: System.Text.Encoding
  isExternal: false
  name: HeaderName
  nameWithType: Encoding.HeaderName
  fullName: Encoding.HeaderName
- uid: System.Text.Encoding.IsAlwaysNormalized
  parent: System.Text.Encoding
  isExternal: false
  name: IsAlwaysNormalized()
  nameWithType: Encoding.IsAlwaysNormalized()
  fullName: Encoding.IsAlwaysNormalized()
- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  parent: System.Text.Encoding
  isExternal: false
  name: IsAlwaysNormalized(NormalizationForm)
  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)
  fullName: Encoding.IsAlwaysNormalized(NormalizationForm)
- uid: System.Text.NormalizationForm
  parent: System.Text
  isExternal: false
  name: NormalizationForm
  nameWithType: NormalizationForm
  fullName: System.Text.NormalizationForm
- uid: System.Text.Encoding.IsBrowserDisplay
  parent: System.Text.Encoding
  isExternal: false
  name: IsBrowserDisplay
  nameWithType: Encoding.IsBrowserDisplay
  fullName: Encoding.IsBrowserDisplay
- uid: System.Text.Encoding.IsBrowserSave
  parent: System.Text.Encoding
  isExternal: false
  name: IsBrowserSave
  nameWithType: Encoding.IsBrowserSave
  fullName: Encoding.IsBrowserSave
- uid: System.Text.Encoding.IsMailNewsDisplay
  parent: System.Text.Encoding
  isExternal: false
  name: IsMailNewsDisplay
  nameWithType: Encoding.IsMailNewsDisplay
  fullName: Encoding.IsMailNewsDisplay
- uid: System.Text.Encoding.IsMailNewsSave
  parent: System.Text.Encoding
  isExternal: false
  name: IsMailNewsSave
  nameWithType: Encoding.IsMailNewsSave
  fullName: Encoding.IsMailNewsSave
- uid: System.Text.Encoding.IsReadOnly
  parent: System.Text.Encoding
  isExternal: false
  name: IsReadOnly
  nameWithType: Encoding.IsReadOnly
  fullName: Encoding.IsReadOnly
- uid: System.Text.Encoding.IsSingleByte
  parent: System.Text.Encoding
  isExternal: false
  name: IsSingleByte
  nameWithType: Encoding.IsSingleByte
  fullName: Encoding.IsSingleByte
- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  parent: System.Text.Encoding
  isExternal: false
  name: RegisterProvider(EncodingProvider)
  nameWithType: Encoding.RegisterProvider(EncodingProvider)
  fullName: Encoding.RegisterProvider(EncodingProvider)
- uid: System.Text.EncodingProvider
  parent: System.Text
  isExternal: false
  name: EncodingProvider
  nameWithType: EncodingProvider
  fullName: System.Text.EncodingProvider
- uid: System.Text.Encoding.Unicode
  parent: System.Text.Encoding
  isExternal: false
  name: Unicode
  nameWithType: Encoding.Unicode
  fullName: Encoding.Unicode
- uid: System.Text.Encoding.UTF32
  parent: System.Text.Encoding
  isExternal: false
  name: UTF32
  nameWithType: Encoding.UTF32
  fullName: Encoding.UTF32
- uid: System.Text.Encoding.UTF7
  parent: System.Text.Encoding
  isExternal: false
  name: UTF7
  nameWithType: Encoding.UTF7
  fullName: Encoding.UTF7
- uid: System.Text.Encoding.UTF8
  parent: System.Text.Encoding
  isExternal: false
  name: UTF8
  nameWithType: Encoding.UTF8
  fullName: Encoding.UTF8
- uid: System.Text.Encoding.WebName
  parent: System.Text.Encoding
  isExternal: false
  name: WebName
  nameWithType: Encoding.WebName
  fullName: Encoding.WebName
- uid: System.Text.Encoding.WindowsCodePage
  parent: System.Text.Encoding
  isExternal: false
  name: WindowsCodePage
  nameWithType: Encoding.WindowsCodePage
  fullName: Encoding.WindowsCodePage
- uid: System.Text.Encoding.#ctor*
  parent: System.Text.Encoding
  isExternal: false
  name: Encoding
  nameWithType: Encoding.Encoding
  fullName: Encoding.Encoding
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.ASCII*
  parent: System.Text.Encoding
  isExternal: false
  name: ASCII
  nameWithType: Encoding.ASCII
  fullName: Encoding.ASCII
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.BigEndianUnicode*
  parent: System.Text.Encoding
  isExternal: false
  name: BigEndianUnicode
  nameWithType: Encoding.BigEndianUnicode
  fullName: Encoding.BigEndianUnicode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.BodyName*
  parent: System.Text.Encoding
  isExternal: false
  name: BodyName
  nameWithType: Encoding.BodyName
  fullName: Encoding.BodyName
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.Clone*
  parent: System.Text.Encoding
  isExternal: false
  name: Clone
  nameWithType: Encoding.Clone
  fullName: Encoding.Clone
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.CodePage*
  parent: System.Text.Encoding
  isExternal: false
  name: CodePage
  nameWithType: Encoding.CodePage
  fullName: Encoding.CodePage
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.Convert*
  parent: System.Text.Encoding
  isExternal: false
  name: Convert
  nameWithType: Encoding.Convert
  fullName: Encoding.Convert
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.DecoderFallback*
  parent: System.Text.Encoding
  isExternal: false
  name: DecoderFallback
  nameWithType: Encoding.DecoderFallback
  fullName: Encoding.DecoderFallback
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.Default*
  parent: System.Text.Encoding
  isExternal: false
  name: Default
  nameWithType: Encoding.Default
  fullName: Encoding.Default
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.EncoderFallback*
  parent: System.Text.Encoding
  isExternal: false
  name: EncoderFallback
  nameWithType: Encoding.EncoderFallback
  fullName: Encoding.EncoderFallback
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.EncodingName*
  parent: System.Text.Encoding
  isExternal: false
  name: EncodingName
  nameWithType: Encoding.EncodingName
  fullName: Encoding.EncodingName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.Equals*
  parent: System.Text.Encoding
  isExternal: false
  name: Equals
  nameWithType: Encoding.Equals
  fullName: Encoding.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetByteCount*
  parent: System.Text.Encoding
  isExternal: false
  name: GetByteCount
  nameWithType: Encoding.GetByteCount
  fullName: Encoding.GetByteCount
  monikers:
  - netcore-2.0
  - netcore-1.0
  - netcore-1.1
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetBytes*
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes
  nameWithType: Encoding.GetBytes
  fullName: Encoding.GetBytes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetCharCount*
  parent: System.Text.Encoding
  isExternal: false
  name: GetCharCount
  nameWithType: Encoding.GetCharCount
  fullName: Encoding.GetCharCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetChars*
  parent: System.Text.Encoding
  isExternal: false
  name: GetChars
  nameWithType: Encoding.GetChars
  fullName: Encoding.GetChars
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetDecoder*
  parent: System.Text.Encoding
  isExternal: false
  name: GetDecoder
  nameWithType: Encoding.GetDecoder
  fullName: Encoding.GetDecoder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetEncoder*
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoder
  nameWithType: Encoding.GetEncoder
  fullName: Encoding.GetEncoder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetEncoding*
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding
  nameWithType: Encoding.GetEncoding
  fullName: Encoding.GetEncoding
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetEncodings*
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncodings
  nameWithType: Encoding.GetEncodings
  fullName: Encoding.GetEncodings
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetHashCode*
  parent: System.Text.Encoding
  isExternal: false
  name: GetHashCode
  nameWithType: Encoding.GetHashCode
  fullName: Encoding.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetMaxByteCount*
  parent: System.Text.Encoding
  isExternal: false
  name: GetMaxByteCount
  nameWithType: Encoding.GetMaxByteCount
  fullName: Encoding.GetMaxByteCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetMaxCharCount*
  parent: System.Text.Encoding
  isExternal: false
  name: GetMaxCharCount
  nameWithType: Encoding.GetMaxCharCount
  fullName: Encoding.GetMaxCharCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetPreamble*
  parent: System.Text.Encoding
  isExternal: false
  name: GetPreamble
  nameWithType: Encoding.GetPreamble
  fullName: Encoding.GetPreamble
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.GetString*
  parent: System.Text.Encoding
  isExternal: false
  name: GetString
  nameWithType: Encoding.GetString
  fullName: Encoding.GetString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.HeaderName*
  parent: System.Text.Encoding
  isExternal: false
  name: HeaderName
  nameWithType: Encoding.HeaderName
  fullName: Encoding.HeaderName
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.IsAlwaysNormalized*
  parent: System.Text.Encoding
  isExternal: false
  name: IsAlwaysNormalized
  nameWithType: Encoding.IsAlwaysNormalized
  fullName: Encoding.IsAlwaysNormalized
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.IsBrowserDisplay*
  parent: System.Text.Encoding
  isExternal: false
  name: IsBrowserDisplay
  nameWithType: Encoding.IsBrowserDisplay
  fullName: Encoding.IsBrowserDisplay
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.IsBrowserSave*
  parent: System.Text.Encoding
  isExternal: false
  name: IsBrowserSave
  nameWithType: Encoding.IsBrowserSave
  fullName: Encoding.IsBrowserSave
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.IsMailNewsDisplay*
  parent: System.Text.Encoding
  isExternal: false
  name: IsMailNewsDisplay
  nameWithType: Encoding.IsMailNewsDisplay
  fullName: Encoding.IsMailNewsDisplay
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.IsMailNewsSave*
  parent: System.Text.Encoding
  isExternal: false
  name: IsMailNewsSave
  nameWithType: Encoding.IsMailNewsSave
  fullName: Encoding.IsMailNewsSave
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.IsReadOnly*
  parent: System.Text.Encoding
  isExternal: false
  name: IsReadOnly
  nameWithType: Encoding.IsReadOnly
  fullName: Encoding.IsReadOnly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.IsSingleByte*
  parent: System.Text.Encoding
  isExternal: false
  name: IsSingleByte
  nameWithType: Encoding.IsSingleByte
  fullName: Encoding.IsSingleByte
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.RegisterProvider*
  parent: System.Text.Encoding
  isExternal: false
  name: RegisterProvider
  nameWithType: Encoding.RegisterProvider
  fullName: Encoding.RegisterProvider
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.Unicode*
  parent: System.Text.Encoding
  isExternal: false
  name: Unicode
  nameWithType: Encoding.Unicode
  fullName: Encoding.Unicode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.UTF32*
  parent: System.Text.Encoding
  isExternal: false
  name: UTF32
  nameWithType: Encoding.UTF32
  fullName: Encoding.UTF32
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.UTF7*
  parent: System.Text.Encoding
  isExternal: false
  name: UTF7
  nameWithType: Encoding.UTF7
  fullName: Encoding.UTF7
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.UTF8*
  parent: System.Text.Encoding
  isExternal: false
  name: UTF8
  nameWithType: Encoding.UTF8
  fullName: Encoding.UTF8
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.WebName*
  parent: System.Text.Encoding
  isExternal: false
  name: WebName
  nameWithType: Encoding.WebName
  fullName: Encoding.WebName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Text.Encoding.WindowsCodePage*
  parent: System.Text.Encoding
  isExternal: false
  name: WindowsCodePage
  nameWithType: Encoding.WindowsCodePage
  fullName: Encoding.WindowsCodePage
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoding.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.ICloneable
  parent: System
  isExternal: false
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
