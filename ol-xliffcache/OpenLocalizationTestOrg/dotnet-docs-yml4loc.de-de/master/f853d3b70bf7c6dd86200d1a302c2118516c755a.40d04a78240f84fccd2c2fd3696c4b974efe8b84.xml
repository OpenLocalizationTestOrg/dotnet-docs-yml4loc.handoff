{"nodes":[{"content":"Represents the settings used by the service to validate the certificate presented by the clients. It also contains a certificate for the service to use for encrypting responses or callbacks for clients when `MutualCertificateDuplex` message security authentication mode is used.","nodes":[{"pos":[0,278],"content":"Represents the settings used by the service to validate the certificate presented by the clients. It also contains a certificate for the service to use for encrypting responses or callbacks for clients when `MutualCertificateDuplex` message security authentication mode is used.","nodes":[{"content":"Represents the settings used by the service to validate the certificate presented by the clients.","pos":[0,97]},{"content":"It also contains a certificate for the service to use for encrypting responses or callbacks for clients when <ph id=\"ph1\">`MutualCertificateDuplex`</ph> message security authentication mode is used.","pos":[98,278],"source":" It also contains a certificate for the service to use for encrypting responses or callbacks for clients when `MutualCertificateDuplex` message security authentication mode is used."}]}],"pos":[1254,1533],"yaml":true},{"content":"The certificate set in this class is used to encrypt messages to the client only for bindings that are configured with `MutualCertificateDuplex` message security authentication mode.","nodes":[{"pos":[0,182],"content":"The certificate set in this class is used to encrypt messages to the client only for bindings that are configured with <ph id=\"ph1\">`MutualCertificateDuplex`</ph> message security authentication mode.","source":"The certificate set in this class is used to encrypt messages to the client only for bindings that are configured with `MutualCertificateDuplex` message security authentication mode."}],"pos":[1544,1727],"yaml":true,"extradata":"MT"},{"content":"Gets the settings used to validate the certificate presented by the client during authentication.","nodes":[{"pos":[0,97],"content":"Gets the settings used to validate the certificate presented by the client during authentication.","nodes":[{"content":"Gets the settings used to validate the certificate presented by the client during authentication.","pos":[0,97]}]}],"pos":[3311,3409],"yaml":true},{"content":"The settings used to validate the certificate presented by the client during authentication.","nodes":[{"pos":[0,92],"content":"The settings used to validate the certificate presented by the client during authentication.","nodes":[{"content":"The settings used to validate the certificate presented by the client during authentication.","pos":[0,92]}]}],"pos":[3765,3858],"yaml":true},{"content":"Gets or sets the certificate to use in `MutualCertificateDuplex` message security authentication mode.","nodes":[{"pos":[0,102],"content":"Gets or sets the certificate to use in <ph id=\"ph1\">`MutualCertificateDuplex`</ph> message security authentication mode.","source":"Gets or sets the certificate to use in `MutualCertificateDuplex` message security authentication mode."}],"pos":[5111,5214],"yaml":true},{"content":"This property is used for bindings that are configured to message security mode when `MutualCertificateDuplex` message security authentication mode is used.","nodes":[{"pos":[0,156],"content":"This property is used for bindings that are configured to message security mode when <ph id=\"ph1\">`MutualCertificateDuplex`</ph> message security authentication mode is used.","source":"This property is used for bindings that are configured to message security mode when `MutualCertificateDuplex` message security authentication mode is used."}],"pos":[5225,5382],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> to use to encrypt messages sent to the client by the service in the uncorrelated duplex transport case if the `MutualCertificateDuplex` message security authentication mode is used.","nodes":[{"pos":[0,269],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"&gt;&lt;/xref&gt;</ph> to use to encrypt messages sent to the client by the service in the uncorrelated duplex transport case if the <ph id=\"ph2\">`MutualCertificateDuplex`</ph> message security authentication mode is used.","source":"The <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> to use to encrypt messages sent to the client by the service in the uncorrelated duplex transport case if the `MutualCertificateDuplex` message security authentication mode is used."}],"pos":[5696,5966],"yaml":true},{"content":"An attempt was made to set a read-only credential.","nodes":[{"pos":[0,50],"content":"An attempt was made to set a read-only credential.","nodes":[{"content":"An attempt was made to set a read-only credential.","pos":[0,50]}]}],"pos":[6186,6237],"yaml":true},{"content":"Enables you to specify the certificate to use for encrypting messages for the client by specifying the subject distinguished name. This setting is used only by bindings that are configured with the `MutualCertificateDuplex` message security authentication mode.","nodes":[{"pos":[0,261],"content":"Enables you to specify the certificate to use for encrypting messages for the client by specifying the subject distinguished name. This setting is used only by bindings that are configured with the `MutualCertificateDuplex` message security authentication mode.","nodes":[{"content":"Enables you to specify the certificate to use for encrypting messages for the client by specifying the subject distinguished name.","pos":[0,130]},{"content":"This setting is used only by bindings that are configured with the <ph id=\"ph1\">`MutualCertificateDuplex`</ph> message security authentication mode.","pos":[131,261],"source":" This setting is used only by bindings that are configured with the `MutualCertificateDuplex` message security authentication mode."}]}],"pos":[7885,8147],"yaml":true},{"content":"[!INCLUDE[crabout](~/includes/crabout-md.md)] the `subjectName` parameter, see <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName%2A>.  \n  \n Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine (default).  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user.  \n  \n If the client application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the client application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \n  \n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> the <ph id=\"ph2\">`subjectName`</ph> parameter, see <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName%2A&gt;</ph>.","source":"[!INCLUDE[crabout](~/includes/crabout-md.md)] the `subjectName` parameter, see <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName%2A>."},{"pos":[171,297],"content":"Values for <ph id=\"ph1\">`storeLocation`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation&gt;</ph> enumeration:","source":"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:"},{"pos":[307,450],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine (default).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>: the certificate store assigned to the local machine (default).","pos":[0,143],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine (default)."}]},{"pos":[460,587],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>: the certificate store used by the current user.","pos":[0,127],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user."}]},{"pos":[594,948],"content":"If the client application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the client application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","nodes":[{"content":"If the client application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the client application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","pos":[0,354],"nodes":[{"content":"If the client application is running under a system account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>.","pos":[0,178],"source":"If the client application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>."},{"content":"If the client application is running under a user account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>.","pos":[179,354],"source":" If the client application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>."}]}]},{"pos":[955,1073],"content":"Values for <ph id=\"ph1\">`storeName`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreName&gt;</ph> enumeration.","source":"Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration."}],"pos":[8158,9244],"yaml":true,"extradata":"MT"},{"content":"The subject distinguished name.","nodes":[{"pos":[0,31],"content":"The subject distinguished name.","nodes":[{"content":"The subject distinguished name.","pos":[0,31]}]}],"pos":[9628,9660],"yaml":true},{"content":"The location of the certificate store that the service uses to obtain the certificate.","nodes":[{"pos":[0,86],"content":"The location of the certificate store that the service uses to obtain the certificate.","nodes":[{"content":"The location of the certificate store that the service uses to obtain the certificate.","pos":[0,86]}]}],"pos":[9775,9862],"yaml":true},{"content":"The name of the X.509 certificate store to open.","nodes":[{"pos":[0,48],"content":"The name of the X.509 certificate store to open.","nodes":[{"content":"The name of the X.509 certificate store to open.","pos":[0,48]}]}],"pos":[9969,10018],"yaml":true},{"content":"Specifies the certificate to use for encrypting messages for the client. This setting is used only by bindings that are configured with the `MutualCertificateDuplex` message security authentication mode.","nodes":[{"pos":[0,203],"content":"Specifies the certificate to use for encrypting messages for the client. This setting is used only by bindings that are configured with the `MutualCertificateDuplex` message security authentication mode.","nodes":[{"content":"Specifies the certificate to use for encrypting messages for the client.","pos":[0,72]},{"content":"This setting is used only by bindings that are configured with the <ph id=\"ph1\">`MutualCertificateDuplex`</ph> message security authentication mode.","pos":[73,203],"source":" This setting is used only by bindings that are configured with the `MutualCertificateDuplex` message security authentication mode."}]}],"pos":[12001,12205],"yaml":true},{"content":"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine (default).  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user.  \n  \n If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \n  \n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.  \n  \n Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration.  \n  \n The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"pos":[0,126],"content":"Values for <ph id=\"ph1\">`storeLocation`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation&gt;</ph> enumeration:","source":"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:"},{"pos":[136,279],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine (default).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>: the certificate store assigned to the local machine (default).","pos":[0,143],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine (default)."}]},{"pos":[289,416],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>: the certificate store used by the current user.","pos":[0,127],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user."}]},{"pos":[423,763],"content":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","nodes":[{"content":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","pos":[0,340],"nodes":[{"content":"If the application is running under a system account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>.","pos":[0,171],"source":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>."},{"content":"If the application is running under a user account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>.","pos":[172,340],"source":" If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>."}]}]},{"pos":[770,888],"content":"Values for <ph id=\"ph1\">`storeName`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreName&gt;</ph> enumeration.","source":"Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration."},{"pos":[895,1015],"content":"Values for <ph id=\"ph1\">`findType`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType&gt;</ph> enumeration.","source":"Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration."},{"pos":[1022,1407],"content":"The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"content":"The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown.","pos":[0,385],"nodes":[{"content":"The most commonly used enumeration is <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName&gt;</ph>, which does a case-insensitive search on the subject name of certificates in the specified store.","pos":[0,219],"source":"The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store."},{"content":"This can be an imprecise search.","pos":[220,252]},{"content":"If no certificates or multiple certificates that match the criteria are found, an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.","pos":[253,385],"source":" If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown."}]}]}],"pos":[12216,13638],"yaml":true,"extradata":"MT"},{"content":"The location of the certificate store that the service uses to obtain the certificate.","nodes":[{"pos":[0,86],"content":"The location of the certificate store that the service uses to obtain the certificate.","nodes":[{"content":"The location of the certificate store that the service uses to obtain the certificate.","pos":[0,86]}]}],"pos":[14137,14224],"yaml":true},{"content":"The name of the X.509 certificate store to open.","nodes":[{"pos":[0,48],"content":"The name of the X.509 certificate store to open.","nodes":[{"content":"The name of the X.509 certificate store to open.","pos":[0,48]}]}],"pos":[14331,14380],"yaml":true},{"content":"The type of X.509 search to be executed.","nodes":[{"pos":[0,40],"content":"The type of X.509 search to be executed.","nodes":[{"content":"The type of X.509 search to be executed.","pos":[0,40]}]}],"pos":[14489,14530],"yaml":true},{"content":"The value to search for in the X.509 certificate store.","nodes":[{"pos":[0,55],"content":"The value to search for in the X.509 certificate store.","nodes":[{"content":"The value to search for in the X.509 certificate store.","pos":[0,55]}]}],"pos":[14595,14651],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  commentId: T:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  id: X509CertificateInitiatorServiceCredential\n  children:\n  - System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication\n  - System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate\n  - System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)\n  - System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)\n  langs:\n  - csharp\n  name: X509CertificateInitiatorServiceCredential\n  nameWithType: X509CertificateInitiatorServiceCredential\n  fullName: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Represents the settings used by the service to validate the certificate presented by the clients. It also contains a certificate for the service to use for encrypting responses or callbacks for clients when `MutualCertificateDuplex` message security authentication mode is used.\n  remarks: The certificate set in this class is used to encrypt messages to the client only for bindings that are configured with `MutualCertificateDuplex` message security authentication mode.\n  syntax:\n    content: public sealed class X509CertificateInitiatorServiceCredential\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateInitiatorServiceCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication\n  commentId: P:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication\n  id: Authentication\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  langs:\n  - csharp\n  name: Authentication\n  nameWithType: X509CertificateInitiatorServiceCredential.Authentication\n  fullName: X509CertificateInitiatorServiceCredential.Authentication\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets the settings used to validate the certificate presented by the client during authentication.\n  remarks: ''\n  example:\n  - The following code shows how to use this property to set the certificate authentication properties.\n  syntax:\n    content: public System.ServiceModel.Security.X509ClientCertificateAuthentication Authentication { get; }\n    return:\n      type: System.ServiceModel.Security.X509ClientCertificateAuthentication\n      description: The settings used to validate the certificate presented by the client during authentication.\n  overload: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateInitiatorServiceCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate\n  commentId: P:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate\n  id: Certificate\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  langs:\n  - csharp\n  name: Certificate\n  nameWithType: X509CertificateInitiatorServiceCredential.Certificate\n  fullName: X509CertificateInitiatorServiceCredential.Certificate\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets or sets the certificate to use in `MutualCertificateDuplex` message security authentication mode.\n  remarks: This property is used for bindings that are configured to message security mode when `MutualCertificateDuplex` message security authentication mode is used.\n  example:\n  - The following code shows how to use this property to get the certificate.\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get; set; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\"></xref> to use to encrypt messages sent to the client by the service in the uncorrelated duplex transport case if the `MutualCertificateDuplex` message security authentication mode is used.\n  overload: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An attempt was made to set a read-only credential.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateInitiatorServiceCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)\n  commentId: M:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)\n  id: SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  langs:\n  - csharp\n  name: SetCertificate(String, StoreLocation, StoreName)\n  nameWithType: X509CertificateInitiatorServiceCredential.SetCertificate(String, StoreLocation, StoreName)\n  fullName: X509CertificateInitiatorServiceCredential.SetCertificate(String, StoreLocation, StoreName)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Enables you to specify the certificate to use for encrypting messages for the client by specifying the subject distinguished name. This setting is used only by bindings that are configured with the `MutualCertificateDuplex` message security authentication mode.\n  remarks: \"[!INCLUDE[crabout](~/includes/crabout-md.md)] the `subjectName` parameter, see <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName%2A>.  \\n  \\n Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine (default).  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user.  \\n  \\n If the client application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the client application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \\n  \\n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.\"\n  example:\n  - The following code shows how to use this method to set the certificate.\n  syntax:\n    content: public void SetCertificate (string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName);\n    parameters:\n    - id: subjectName\n      type: System.String\n      description: The subject distinguished name.\n    - id: storeLocation\n      type: System.Security.Cryptography.X509Certificates.StoreLocation\n      description: The location of the certificate store that the service uses to obtain the certificate.\n    - id: storeName\n      type: System.Security.Cryptography.X509Certificates.StoreName\n      description: The name of the X.509 certificate store to open.\n  overload: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateInitiatorServiceCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)\n  commentId: M:System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)\n  id: SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  langs:\n  - csharp\n  name: SetCertificate(StoreLocation, StoreName, X509FindType, Object)\n  nameWithType: X509CertificateInitiatorServiceCredential.SetCertificate(StoreLocation, StoreName, X509FindType, Object)\n  fullName: X509CertificateInitiatorServiceCredential.SetCertificate(StoreLocation, StoreName, X509FindType, Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Specifies the certificate to use for encrypting messages for the client. This setting is used only by bindings that are configured with the `MutualCertificateDuplex` message security authentication mode.\n  remarks: \"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine (default).  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user.  \\n  \\n If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \\n  \\n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.  \\n  \\n Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration.  \\n  \\n The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown.\"\n  example:\n  - The following code shows how to use this method to set the certificate.\n  syntax:\n    content: public void SetCertificate (System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue);\n    parameters:\n    - id: storeLocation\n      type: System.Security.Cryptography.X509Certificates.StoreLocation\n      description: The location of the certificate store that the service uses to obtain the certificate.\n    - id: storeName\n      type: System.Security.Cryptography.X509Certificates.StoreName\n      description: The name of the X.509 certificate store to open.\n    - id: findType\n      type: System.Security.Cryptography.X509Certificates.X509FindType\n      description: The type of X.509 search to be executed.\n    - id: findValue\n      type: System.Object\n      description: The value to search for in the X.509 certificate store.\n  overload: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateInitiatorServiceCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  isExternal: false\n  name: Authentication\n  nameWithType: X509CertificateInitiatorServiceCredential.Authentication\n  fullName: X509CertificateInitiatorServiceCredential.Authentication\n- uid: System.ServiceModel.Security.X509ClientCertificateAuthentication\n  parent: System.ServiceModel.Security\n  isExternal: false\n  name: X509ClientCertificateAuthentication\n  nameWithType: X509ClientCertificateAuthentication\n  fullName: System.ServiceModel.Security.X509ClientCertificateAuthentication\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  isExternal: false\n  name: Certificate\n  nameWithType: X509CertificateInitiatorServiceCredential.Certificate\n  fullName: X509CertificateInitiatorServiceCredential.Certificate\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  isExternal: false\n  name: SetCertificate(String, StoreLocation, StoreName)\n  nameWithType: X509CertificateInitiatorServiceCredential.SetCertificate(String, StoreLocation, StoreName)\n  fullName: X509CertificateInitiatorServiceCredential.SetCertificate(String, StoreLocation, StoreName)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.X509Certificates.StoreLocation\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: StoreLocation\n  nameWithType: StoreLocation\n  fullName: System.Security.Cryptography.X509Certificates.StoreLocation\n- uid: System.Security.Cryptography.X509Certificates.StoreName\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: StoreName\n  nameWithType: StoreName\n  fullName: System.Security.Cryptography.X509Certificates.StoreName\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  isExternal: false\n  name: SetCertificate(StoreLocation, StoreName, X509FindType, Object)\n  nameWithType: X509CertificateInitiatorServiceCredential.SetCertificate(StoreLocation, StoreName, X509FindType, Object)\n  fullName: X509CertificateInitiatorServiceCredential.SetCertificate(StoreLocation, StoreName, X509FindType, Object)\n- uid: System.Security.Cryptography.X509Certificates.X509FindType\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509FindType\n  nameWithType: X509FindType\n  fullName: System.Security.Cryptography.X509Certificates.X509FindType\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Authentication*\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  isExternal: false\n  name: Authentication\n  nameWithType: X509CertificateInitiatorServiceCredential.Authentication\n  fullName: X509CertificateInitiatorServiceCredential.Authentication\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateInitiatorServiceCredential.xml\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.Certificate*\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  isExternal: false\n  name: Certificate\n  nameWithType: X509CertificateInitiatorServiceCredential.Certificate\n  fullName: X509CertificateInitiatorServiceCredential.Certificate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateInitiatorServiceCredential.xml\n- uid: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential.SetCertificate*\n  parent: System.ServiceModel.Security.X509CertificateInitiatorServiceCredential\n  isExternal: false\n  name: SetCertificate\n  nameWithType: X509CertificateInitiatorServiceCredential.SetCertificate\n  fullName: X509CertificateInitiatorServiceCredential.SetCertificate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateInitiatorServiceCredential.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}