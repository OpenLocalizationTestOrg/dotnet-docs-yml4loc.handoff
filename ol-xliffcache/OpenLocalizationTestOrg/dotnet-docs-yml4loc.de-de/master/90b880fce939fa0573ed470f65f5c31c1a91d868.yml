### YamlMime:ManagedReference
items:
- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1
  commentId: T:System.AddIn.Contract.Collections.IEnumeratorContract`1
  id: IEnumeratorContract`1
  children:
  - System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent
  - System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext
  - System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset
  langs:
  - csharp
  name: IEnumeratorContract<C>
  nameWithType: IEnumeratorContract<C>
  fullName: System.AddIn.Contract.Collections.IEnumeratorContract<C>
  type: Interface
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Collections
  summary: Enumerates the elements of a generic collection of <xref href="System.AddIn.Contract.IContract"></xref> objects.
  remarks: "Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. At this position, the return value of <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> is undefined. Therefore, you must call <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> to advance the enumerator to the first element of the collection before calling <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A>.  \n  \n <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> returns the same object until <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> is called. <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> sets the return value of <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> to the next element.  \n  \n If <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> also return `false`. If the last call to <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> returned `false`, the return value of <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> is undefined.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined."
  syntax:
    content: 'public interface IEnumeratorContract<C> : System.AddIn.Contract.IContract where C : IContract'
    typeParameters:
    - id: C
      description: The type of objects to enumerate. <code>C</code> must implement the <xref href="System.AddIn.Contract.IContract"></xref> interface.
  implements:
  - System.AddIn.Contract.IContract
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Contract.Collections/IEnumeratorContract`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent
  commentId: M:System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent
  id: GetCurrent
  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1
  langs:
  - csharp
  name: GetCurrent()
  nameWithType: IEnumeratorContract<C>.GetCurrent()
  fullName: IEnumeratorContract<C>.GetCurrent()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Collections
  summary: Returns the <xref href="System.AddIn.Contract.IContract"></xref> in the collection at the current position of the enumerator.
  remarks: "The return value of <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> is undefined under any of the following conditions:  \n  \n-   The enumerator is positioned before the first element in the collection, immediately after the enumerator is created or after <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> is called. <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before calling <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A>.  \n  \n-   The last call to <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> returned `false`, which indicates the end of the collection.  \n  \n-   The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.  \n  \n <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> returns the same object until <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> is called. <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> sets the return value of <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> to the next element."
  syntax:
    content: public C GetCurrent ();
    parameters: []
    return:
      type: C
      description: The <xref href="System.AddIn.Contract.IContract"></xref> in the collection at the current position of the enumerator.
  overload: System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Contract.Collections/IEnumeratorContract`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext
  commentId: M:System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext
  id: MoveNext
  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1
  langs:
  - csharp
  name: MoveNext()
  nameWithType: IEnumeratorContract<C>.MoveNext()
  fullName: IEnumeratorContract<C>.MoveNext()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Collections
  summary: Advances the enumerator to the next element of the collection.
  remarks: "After an enumerator is created or after the <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> method is called, an enumerator is positioned before the first element of the collection. The first call to the <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> method moves the enumerator to the first element of the collection.  \n  \n If <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> also return `false` until <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> is called.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> or <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> throws an <xref:System.InvalidOperationException>."
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the enumerator was successfully advanced to the next element; `false` if the enumerator has passed the end of the collection.'
  overload: System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The collection was modified after the enumerator was created.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Contract.Collections/IEnumeratorContract`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset
  commentId: M:System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset
  id: Reset
  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1
  langs:
  - csharp
  name: Reset()
  nameWithType: IEnumeratorContract<C>.Reset()
  fullName: IEnumeratorContract<C>.Reset()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Collections
  summary: Sets the enumerator to its initial position, which is before the first element in the collection.
  remarks: An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> or <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> throws an <xref:System.InvalidOperationException>.
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The collection was modified after the enumerator was created.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Contract.Collections/IEnumeratorContract`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent
  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1
  isExternal: false
  name: GetCurrent()
  nameWithType: IEnumeratorContract<C>.GetCurrent()
  fullName: IEnumeratorContract<C>.GetCurrent()
- uid: C
  isExternal: true
  name: C
  nameWithType: C
  fullName: C
- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext
  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1
  isExternal: false
  name: MoveNext()
  nameWithType: IEnumeratorContract<C>.MoveNext()
  fullName: IEnumeratorContract<C>.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset
  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1
  isExternal: false
  name: Reset()
  nameWithType: IEnumeratorContract<C>.Reset()
  fullName: IEnumeratorContract<C>.Reset()
- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent*
  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1
  isExternal: false
  name: GetCurrent
  nameWithType: IEnumeratorContract<C>.GetCurrent
  fullName: IEnumeratorContract<C>.GetCurrent
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Contract.Collections/IEnumeratorContract`1.xml
- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext*
  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1
  isExternal: false
  name: MoveNext
  nameWithType: IEnumeratorContract<C>.MoveNext
  fullName: IEnumeratorContract<C>.MoveNext
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Contract.Collections/IEnumeratorContract`1.xml
- uid: System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset*
  parent: System.AddIn.Contract.Collections.IEnumeratorContract`1
  isExternal: false
  name: Reset
  nameWithType: IEnumeratorContract<C>.Reset
  fullName: IEnumeratorContract<C>.Reset
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Contract.Collections/IEnumeratorContract`1.xml
- uid: System.AddIn.Contract.IContract
  parent: System.AddIn.Contract
  isExternal: false
  name: IContract
  nameWithType: IContract
  fullName: System.AddIn.Contract.IContract
