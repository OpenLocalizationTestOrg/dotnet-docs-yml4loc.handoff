### YamlMime:ManagedReference
items:
- uid: System.Management.MethodDataCollection
  commentId: T:System.Management.MethodDataCollection
  id: MethodDataCollection
  children:
  - System.Management.MethodDataCollection.Add(System.String)
  - System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  - System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)
  - System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)
  - System.Management.MethodDataCollection.Count
  - System.Management.MethodDataCollection.GetEnumerator
  - System.Management.MethodDataCollection.IsSynchronized
  - System.Management.MethodDataCollection.Item(System.String)
  - System.Management.MethodDataCollection.Remove(System.String)
  - System.Management.MethodDataCollection.SyncRoot
  - System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: MethodDataCollection
  nameWithType: MethodDataCollection
  fullName: System.Management.MethodDataCollection
  type: Class
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Represents the set of methods available in the collection.
  remarks: ''
  example:
  - "The following example lists information about the **Win32_Process.Create** method using the <xref:System.Management.MethodData> class. For more information on the **Win32_Process** class, see the Windows Management Instrumentation documentation in the MSDN Library at http://msdn.microsoft.com/library.  \n  \n [!code-csharp[wminet_MethodDataCollection#1](~/samples/snippets/csharp/VS_Snippets_WindowsServer/wminet_MethodDataCollection/cs/MethodDataCollection.cs#1)]\n [!code-vb[wminet_MethodDataCollection#1](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/wminet_MethodDataCollection/vb/MethodDataCollection.vb#1)]"
  syntax:
    content: 'public class MethodDataCollection : System.Collections.ICollection'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.Add(System.String)
  commentId: M:System.Management.MethodDataCollection.Add(System.String)
  id: Add(System.String)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Add(String)
  nameWithType: MethodDataCollection.Add(String)
  fullName: MethodDataCollection.Add(String)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Adds a <xref href="System.Management.MethodData"></xref> to the <xref href="System.Management.MethodDataCollection"></xref>. This overload will add a new method with no parameters to the collection.
  remarks: "Adding <xref:System.Management.MethodData> objects to the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances. Any other case will result in an exception.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."
  syntax:
    content: public virtual void Add (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: The name of the method to add.
  overload: System.Management.MethodDataCollection.Add*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  commentId: M:System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  id: Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Add(String, ManagementBaseObject, ManagementBaseObject)
  nameWithType: MethodDataCollection.Add(String, ManagementBaseObject, ManagementBaseObject)
  fullName: MethodDataCollection.Add(String, ManagementBaseObject, ManagementBaseObject)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Adds a <xref href="System.Management.MethodData"></xref> to the <xref href="System.Management.MethodDataCollection"></xref>. This overload will add a new method with the specified parameter objects to the collection.
  remarks: "Adding <xref:System.Management.MethodData> objects to the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances. Any other case will result in an exception.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."
  syntax:
    content: public virtual void Add (string methodName, System.Management.ManagementBaseObject inParameters, System.Management.ManagementBaseObject outParameters);
    parameters:
    - id: methodName
      type: System.String
      description: The name of the method to add.
    - id: inParameters
      type: System.Management.ManagementBaseObject
      description: The <xref href="System.Management.ManagementBaseObject"></xref> holding the input parameters to the method.
    - id: outParameters
      type: System.Management.ManagementBaseObject
      description: The <xref href="System.Management.ManagementBaseObject"></xref> holding the output parameters to the method.
  overload: System.Management.MethodDataCollection.Add*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: CopyTo(Array, Int32)
  nameWithType: MethodDataCollection.CopyTo(Array, Int32)
  fullName: MethodDataCollection.CopyTo(Array, Int32)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Copies the <xref href="System.Management.MethodDataCollection"></xref> into an array.
  remarks: "## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: The array to which to copy the collection.
    - id: index
      type: System.Int32
      description: The index from which to start.
  overload: System.Management.MethodDataCollection.CopyTo*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)
  commentId: M:System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)
  id: CopyTo(System.Management.MethodData[],System.Int32)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: CopyTo(MethodData[], Int32)
  nameWithType: MethodDataCollection.CopyTo(MethodData[], Int32)
  fullName: MethodDataCollection.CopyTo(MethodData[], Int32)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Copies the <xref href="System.Management.MethodDataCollection"></xref> to a specialized <xref href="System.Management.MethodData"></xref> array.
  remarks: "## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."
  syntax:
    content: public void CopyTo (System.Management.MethodData[] methodArray, int index);
    parameters:
    - id: methodArray
      type: System.Management.MethodData[]
      description: The destination array to which to copy the <xref href="System.Management.MethodData"></xref> objects.
    - id: index
      type: System.Int32
      description: The index in the destination array from which to start the copy.
  overload: System.Management.MethodDataCollection.CopyTo*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.Count
  commentId: P:System.Management.MethodDataCollection.Count
  id: Count
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Count
  nameWithType: MethodDataCollection.Count
  fullName: MethodDataCollection.Count
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Gets the number of objects in the <xref href="System.Management.MethodDataCollection"></xref> collection.
  remarks: "## Property Value  \n The number of objects in the <xref:System.Management.MethodDataCollection>.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: Returns an <xref href="System.Int32"></xref> value representing the number of objects in the collection.
  overload: System.Management.MethodDataCollection.Count*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.GetEnumerator
  commentId: M:System.Management.MethodDataCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: MethodDataCollection.GetEnumerator()
  fullName: MethodDataCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Returns an enumerator for the <xref href="System.Management.MethodDataCollection"></xref>.
  remarks: "Each call to this method returns a new enumerator on the collection. Multiple enumerators can be obtained for the same method collection. However, each enumerator takes a snapshot of the collection, so changes made to the collection after the enumerator was obtained are not reflected.  \n  \n You can only iterate (as in a Visual Basic .NET `For Each` statement or a C# `For` statement) through a forward-only enumerator one time. The memory containing the instances is released by WMI so that the enumerator cannot be rewound. Therefore, the <xref:System.Management.MethodDataCollection.Count%2A> method cannot be used since it requires rewinding the enumerator.  \n  \n Forward-only enumerators are generally much faster and use less memory than conventional enumerators, but they do not allow calls to <xref:System.Management.MethodDataCollection.MethodDataEnumerator.Reset%2A>.  \n  \n If an enumerator is rewindable, the objects in the collection will be kept available for multiple enumerations.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."
  syntax:
    content: public System.Management.MethodDataCollection.MethodDataEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Management.MethodDataCollection+MethodDataEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> to enumerate through the collection.
  overload: System.Management.MethodDataCollection.GetEnumerator*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.IsSynchronized
  commentId: P:System.Management.MethodDataCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: MethodDataCollection.IsSynchronized
  fullName: MethodDataCollection.IsSynchronized
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Gets a value that indicates whether the object is synchronized.
  remarks: "## Property Value  \n `true` if the object is synchronized; otherwise, `false`.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: Returns a <xref href="System.Boolean"></xref> value indicating whether the object is synchronized.
  overload: System.Management.MethodDataCollection.IsSynchronized*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.Item(System.String)
  commentId: P:System.Management.MethodDataCollection.Item(System.String)
  id: Item(System.String)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: MethodDataCollection.Item(String)
  fullName: MethodDataCollection.Item(String)
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Gets the specified <xref href="System.Management.MethodData"></xref> from the <xref href="System.Management.MethodDataCollection"></xref>.
  remarks: "## Property Value  \n A <xref:System.Management.MethodData> containing all information about the specified method.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."
  syntax:
    content: public virtual System.Management.MethodData this[string methodName] { get; }
    parameters:
    - id: methodName
      type: System.String
      description: The name of the method requested.
    return:
      type: System.Management.MethodData
      description: Returns a <xref href="System.Management.MethodData"></xref> containing the method data for a specified method from the collection.
  overload: System.Management.MethodDataCollection.Item*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.Remove(System.String)
  commentId: M:System.Management.MethodDataCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: MethodDataCollection.Remove(String)
  fullName: MethodDataCollection.Remove(String)
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Removes a <xref href="System.Management.MethodData"></xref> from the <xref href="System.Management.MethodDataCollection"></xref>.
  remarks: "Removing <xref:System.Management.MethodData> objects from the <xref:System.Management.MethodDataCollection> can only be done when the class has no instances. Any other case will result in an exception.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."
  syntax:
    content: public virtual void Remove (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: The name of the method to remove from the collection.
  overload: System.Management.MethodDataCollection.Remove*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.SyncRoot
  commentId: P:System.Management.MethodDataCollection.SyncRoot
  id: SyncRoot
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: SyncRoot
  nameWithType: MethodDataCollection.SyncRoot
  fullName: MethodDataCollection.SyncRoot
  type: Property
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Gets the object to be used for synchronization.
  remarks: "## Property Value  \n The object to be used for synchronization.  \n  \n## .NET Framework Security  \n Full trust for the immediate caller. This member cannot be used by partially trusted code. For more information, see [Using Libraries from Partially Trusted Code](~/docs/framework/misc/using-libraries-from-partially-trusted-code.md)."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: Returns an <xref href="System.Object"></xref> value representing the object to be used for synchronization.
  overload: System.Management.MethodDataCollection.SyncRoot*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Management.MethodDataCollection
  langs:
  - csharp
  name: IEnumerable.GetEnumerator()
  nameWithType: MethodDataCollection.IEnumerable.GetEnumerator()
  fullName: MethodDataCollection.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Management
  namespace: System.Management
  summary: Returns an <xref href="System.Collections.IEnumerator"></xref> that iterates through the <xref href="System.Management.MethodDataCollection"></xref>.
  remarks: "[Visual Basic, C#]  \n  \n The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.  Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  \n  \n Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  \n  \n Initially, the enumerator is positioned before the first element in the collection. <xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position. At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  \n  \n <xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  \n  \n If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  \n  \n An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>. If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.  \n  \n The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  \n  \n This method is an O(1) operation."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator"></xref> for the <xref href="System.Management.MethodDataCollection"></xref>.
  overload: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
  ms.technology:
  - dotnet-standard
  manager: jillfra
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Management.MethodDataCollection.Add(System.String)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Add(String)
  nameWithType: MethodDataCollection.Add(String)
  fullName: MethodDataCollection.Add(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Management.MethodDataCollection.Add(System.String,System.Management.ManagementBaseObject,System.Management.ManagementBaseObject)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Add(String, ManagementBaseObject, ManagementBaseObject)
  nameWithType: MethodDataCollection.Add(String, ManagementBaseObject, ManagementBaseObject)
  fullName: MethodDataCollection.Add(String, ManagementBaseObject, ManagementBaseObject)
- uid: System.Management.ManagementBaseObject
  parent: System.Management
  isExternal: false
  name: ManagementBaseObject
  nameWithType: ManagementBaseObject
  fullName: System.Management.ManagementBaseObject
- uid: System.Management.MethodDataCollection.CopyTo(System.Array,System.Int32)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: CopyTo(Array, Int32)
  nameWithType: MethodDataCollection.CopyTo(Array, Int32)
  fullName: MethodDataCollection.CopyTo(Array, Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Management.MethodDataCollection.CopyTo(System.Management.MethodData[],System.Int32)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: CopyTo(MethodData[], Int32)
  nameWithType: MethodDataCollection.CopyTo(MethodData[], Int32)
  fullName: MethodDataCollection.CopyTo(MethodData[], Int32)
- uid: System.Management.MethodData
  name: MethodData
  nameWithType: MethodData
  fullName: System.Management.MethodData
- uid: System.Management.MethodData[]
  parent: System.Management
  isExternal: false
  name: MethodData[]
  nameWithType: MethodData[]
  fullName: System.Management.MethodData[]
  spec.csharp:
  - uid: System.Management.MethodData
    name: MethodData
    nameWithType: MethodData
    fullName: System.Management.MethodData
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Management.MethodDataCollection.Count
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Count
  nameWithType: MethodDataCollection.Count
  fullName: MethodDataCollection.Count
- uid: System.Management.MethodDataCollection.GetEnumerator
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: MethodDataCollection.GetEnumerator()
  fullName: MethodDataCollection.GetEnumerator()
- uid: System.Management.MethodDataCollection
  parent: System.Management
  isExternal: false
  name: MethodDataCollection
  nameWithType: MethodDataCollection
  fullName: System.Management.MethodDataCollection+MethodDataEnumerator
- uid: System.Management.MethodDataCollection.IsSynchronized
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: MethodDataCollection.IsSynchronized
  fullName: MethodDataCollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Management.MethodDataCollection.Item(System.String)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Item(String)
  nameWithType: MethodDataCollection.Item(String)
  fullName: MethodDataCollection.Item(String)
- uid: System.Management.MethodDataCollection.Remove(System.String)
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Remove(String)
  nameWithType: MethodDataCollection.Remove(String)
  fullName: MethodDataCollection.Remove(String)
- uid: System.Management.MethodDataCollection.SyncRoot
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: SyncRoot
  nameWithType: MethodDataCollection.SyncRoot
  fullName: MethodDataCollection.SyncRoot
- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: IEnumerable.GetEnumerator()
  nameWithType: MethodDataCollection.IEnumerable.GetEnumerator()
  fullName: MethodDataCollection.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Management.MethodDataCollection.Add*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Add
  nameWithType: MethodDataCollection.Add
  fullName: MethodDataCollection.Add
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
- uid: System.Management.MethodDataCollection.CopyTo*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: CopyTo
  nameWithType: MethodDataCollection.CopyTo
  fullName: MethodDataCollection.CopyTo
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
- uid: System.Management.MethodDataCollection.Count*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Count
  nameWithType: MethodDataCollection.Count
  fullName: MethodDataCollection.Count
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
- uid: System.Management.MethodDataCollection.GetEnumerator*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: MethodDataCollection.GetEnumerator
  fullName: MethodDataCollection.GetEnumerator
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
- uid: System.Management.MethodDataCollection.IsSynchronized*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: IsSynchronized
  nameWithType: MethodDataCollection.IsSynchronized
  fullName: MethodDataCollection.IsSynchronized
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
- uid: System.Management.MethodDataCollection.Item*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Item
  nameWithType: MethodDataCollection.Item
  fullName: MethodDataCollection.Item
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
- uid: System.Management.MethodDataCollection.Remove*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: Remove
  nameWithType: MethodDataCollection.Remove
  fullName: MethodDataCollection.Remove
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
- uid: System.Management.MethodDataCollection.SyncRoot*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: SyncRoot
  nameWithType: MethodDataCollection.SyncRoot
  fullName: MethodDataCollection.SyncRoot
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
- uid: System.Management.MethodDataCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Management.MethodDataCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator
  fullName: MethodDataCollection.System.Collections.IEnumerable.GetEnumerator
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Management/MethodDataCollection.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: Enumerable.Cast<TResult>(IEnumerable)
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  isExternal: false
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: Enumerable.OfType<TResult>(IEnumerable)
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  isExternal: false
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  isExternal: false
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: Queryable.AsQueryable(IEnumerable)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
