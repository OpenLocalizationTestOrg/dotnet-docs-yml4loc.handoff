{"nodes":[{"content":"Represents the results from a single successful subexpression capture.","nodes":[{"pos":[0,70],"content":"Represents the results from a single successful subexpression capture.","nodes":[{"content":"Represents the results from a single successful subexpression capture.","pos":[0,70]}]}],"pos":[618,689],"yaml":true},{"content":"A <xref:System.Text.RegularExpressions.Capture> object is immutable and has no public constructor. Instances are returned through the <xref:System.Text.RegularExpressions.CaptureCollection> object, which is returned by the `Match.Captures` and <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> properties. However, the `Match.Captures` property provides information about the same match as the <xref:System.Text.RegularExpressions.Match> object.  \n  \n If you do not apply a  to a capturing group, the <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> property returns a <xref:System.Text.RegularExpressions.CaptureCollection> with a single <xref:System.Text.RegularExpressions.Capture> object that provides information about the same capture as the <xref:System.Text.RegularExpressions.Group> object. If you do apply a quantifier to a capturing group, the `Group.Index`, `Group.Length`, and `Group.Value` properties provide information only about the last captured group, whereas the <xref:System.Text.RegularExpressions.Capture> objects in the <xref:System.Text.RegularExpressions.CaptureCollection> provide information about all subexpression captures. The example provides an illustration.","nodes":[{"pos":[0,476],"content":"A <xref:System.Text.RegularExpressions.Capture> object is immutable and has no public constructor. Instances are returned through the <xref:System.Text.RegularExpressions.CaptureCollection> object, which is returned by the `Match.Captures` and <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> properties. However, the `Match.Captures` property provides information about the same match as the <xref:System.Text.RegularExpressions.Match> object.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Capture&gt;</ph> object is immutable and has no public constructor.","pos":[0,98],"source":"A <xref:System.Text.RegularExpressions.Capture> object is immutable and has no public constructor."},{"content":"Instances are returned through the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.CaptureCollection&gt;</ph> object, which is returned by the <ph id=\"ph2\">`Match.Captures`</ph> and <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName&gt;</ph> properties.","pos":[99,336],"source":" Instances are returned through the <xref:System.Text.RegularExpressions.CaptureCollection> object, which is returned by the `Match.Captures` and <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> properties."},{"content":"However, the <ph id=\"ph1\">`Match.Captures`</ph> property provides information about the same match as the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match&gt;</ph> object.","pos":[337,476],"source":" However, the `Match.Captures` property provides information about the same match as the <xref:System.Text.RegularExpressions.Match> object."}]},{"pos":[483,1254],"content":"If you do not apply a  to a capturing group, the <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> property returns a <xref:System.Text.RegularExpressions.CaptureCollection> with a single <xref:System.Text.RegularExpressions.Capture> object that provides information about the same capture as the <xref:System.Text.RegularExpressions.Group> object. If you do apply a quantifier to a capturing group, the `Group.Index`, `Group.Length`, and `Group.Value` properties provide information only about the last captured group, whereas the <xref:System.Text.RegularExpressions.Capture> objects in the <xref:System.Text.RegularExpressions.CaptureCollection> provide information about all subexpression captures. The example provides an illustration.","nodes":[{"content":"If you do not apply a  to a capturing group, the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName&gt;</ph> property returns a <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.CaptureCollection&gt;</ph> with a single <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Capture&gt;</ph> object that provides information about the same capture as the <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object.","pos":[0,379],"source":"If you do not apply a  to a capturing group, the <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> property returns a <xref:System.Text.RegularExpressions.CaptureCollection> with a single <xref:System.Text.RegularExpressions.Capture> object that provides information about the same capture as the <xref:System.Text.RegularExpressions.Group> object."},{"content":"If you do apply a quantifier to a capturing group, the <ph id=\"ph1\">`Group.Index`</ph>, <ph id=\"ph2\">`Group.Length`</ph>, and <ph id=\"ph3\">`Group.Value`</ph> properties provide information only about the last captured group, whereas the <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.Capture&gt;</ph> objects in the <ph id=\"ph5\">&lt;xref:System.Text.RegularExpressions.CaptureCollection&gt;</ph> provide information about all subexpression captures.","pos":[380,733],"source":" If you do apply a quantifier to a capturing group, the `Group.Index`, `Group.Length`, and `Group.Value` properties provide information only about the last captured group, whereas the <xref:System.Text.RegularExpressions.Capture> objects in the <xref:System.Text.RegularExpressions.CaptureCollection> provide information about all subexpression captures."},{"content":"The example provides an illustration.","pos":[734,771]}]}],"pos":[700,1959],"yaml":true,"extradata":"MT"},{"content":"The position in the original string where the first character of the captured substring is found.","nodes":[{"pos":[0,97],"content":"The position in the original string where the first character of the captured substring is found.","nodes":[{"content":"The position in the original string where the first character of the captured substring is found.","pos":[0,97]}]}],"pos":[6305,6403],"yaml":true},{"content":"The zero-based starting position in the original string where the captured substring is found.","nodes":[{"pos":[0,94],"content":"The zero-based starting position in the original string where the captured substring is found.","nodes":[{"content":"The zero-based starting position in the original string where the captured substring is found.","pos":[0,94]}]}],"pos":[6508,6603],"yaml":true},{"content":"Gets the length of the captured substring.","nodes":[{"pos":[0,42],"content":"Gets the length of the captured substring.","nodes":[{"content":"Gets the length of the captured substring.","pos":[0,42]}]}],"pos":[8134,8177],"yaml":true},{"content":"The length of the captured substring.","nodes":[{"pos":[0,37],"content":"The length of the captured substring.","nodes":[{"content":"The length of the captured substring.","pos":[0,37]}]}],"pos":[8283,8321],"yaml":true},{"content":"Retrieves the captured substring from the input string by calling the <xref href=\"System.Text.RegularExpressions.Capture.Value\"></xref> property.","nodes":[{"pos":[0,145],"content":"Retrieves the captured substring from the input string by calling the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Capture.Value\"&gt;&lt;/xref&gt;</ph> property.","source":"Retrieves the captured substring from the input string by calling the <xref href=\"System.Text.RegularExpressions.Capture.Value\"></xref> property."}],"pos":[9869,10015],"yaml":true},{"content":"`ToString` is actually an internal call to the <xref:System.Text.RegularExpressions.Capture.Value%2A> property.","nodes":[{"pos":[0,111],"content":"<ph id=\"ph1\">`ToString`</ph> is actually an internal call to the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Capture.Value%2A&gt;</ph> property.","source":"`ToString` is actually an internal call to the <xref:System.Text.RegularExpressions.Capture.Value%2A> property."}],"pos":[10026,10140],"yaml":true,"extradata":"MT"},{"content":"The substring that was captured by the match.","nodes":[{"pos":[0,45],"content":"The substring that was captured by the match.","nodes":[{"content":"The substring that was captured by the match.","pos":[0,45]}]}],"pos":[10275,10321],"yaml":true},{"content":"Gets the captured substring from the input string.","nodes":[{"pos":[0,50],"content":"Gets the captured substring from the input string.","nodes":[{"content":"Gets the captured substring from the input string.","pos":[0,50]}]}],"pos":[11849,11900],"yaml":true},{"content":"If a call to the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> or <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method fails to find a match, the value of the returned `Match.Value` property is <xref:System.String.Empty?displayProperty=fullName>. If the regular expression engine is unable to match a capturing group. the value of the returned `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>. See the second example for an illustration.","nodes":[{"pos":[0,534],"content":"If a call to the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> or <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method fails to find a match, the value of the returned `Match.Value` property is <xref:System.String.Empty?displayProperty=fullName>. If the regular expression engine is unable to match a capturing group. the value of the returned `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>. See the second example for an illustration.","nodes":[{"content":"If a call to the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName&gt;</ph> method fails to find a match, the value of the returned <ph id=\"ph3\">`Match.Value`</ph> property is <ph id=\"ph4\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[0,314],"source":"If a call to the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> or <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method fails to find a match, the value of the returned `Match.Value` property is <xref:System.String.Empty?displayProperty=fullName>."},{"content":"If the regular expression engine is unable to match a capturing group.","pos":[315,385]},{"content":"the value of the returned <ph id=\"ph1\">`Group.Value`</ph> property is <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[386,490],"source":" the value of the returned `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>."},{"content":"See the second example for an illustration.","pos":[491,534]}]}],"pos":[11911,12446],"yaml":true,"extradata":"MT"},{"content":"The substring that is captured by the match.","nodes":[{"pos":[0,44],"content":"The substring that is captured by the match.","nodes":[{"content":"The substring that is captured by the match.","pos":[0,44]}]}],"pos":[17582,17627],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.RegularExpressions.Capture\n  commentId: T:System.Text.RegularExpressions.Capture\n  id: Capture\n  children:\n  - System.Text.RegularExpressions.Capture.Index\n  - System.Text.RegularExpressions.Capture.Length\n  - System.Text.RegularExpressions.Capture.ToString\n  - System.Text.RegularExpressions.Capture.Value\n  langs:\n  - csharp\n  name: Capture\n  nameWithType: Capture\n  fullName: System.Text.RegularExpressions.Capture\n  type: Class\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Represents the results from a single successful subexpression capture.\n  remarks: \"A <xref:System.Text.RegularExpressions.Capture> object is immutable and has no public constructor. Instances are returned through the <xref:System.Text.RegularExpressions.CaptureCollection> object, which is returned by the `Match.Captures` and <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> properties. However, the `Match.Captures` property provides information about the same match as the <xref:System.Text.RegularExpressions.Match> object.  \\n  \\n If you do not apply a  to a capturing group, the <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> property returns a <xref:System.Text.RegularExpressions.CaptureCollection> with a single <xref:System.Text.RegularExpressions.Capture> object that provides information about the same capture as the <xref:System.Text.RegularExpressions.Group> object. If you do apply a quantifier to a capturing group, the `Group.Index`, `Group.Length`, and `Group.Value` properties provide information only about the last captured group, whereas the <xref:System.Text.RegularExpressions.Capture> objects in the <xref:System.Text.RegularExpressions.CaptureCollection> provide information about all subexpression captures. The example provides an illustration.\"\n  example:\n  - \"The following example defines a regular expression that matches sentences that contain no punctuation except for a period (\\\".\\\").  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  \\n  \\n The regular expression pattern `((\\\\w+)[\\\\s.])+` is defined as shown in the following table. Note that in this regular expression, a quantifier (+) is applied to the entire regular expression.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`(\\\\w+)`|Match one or more word characters. This is the second capturing group.|  \\n|`[\\\\s.])`|Match a white-space character or period (\\\".\\\").|  \\n|`((\\\\w+)[\\\\s.])`|Match one or more word characters followed by a white-space character or period (\\\".\\\"). This is the first capturing group.|  \\n|`((\\\\w+)[\\\\s.])+`|Match one or more occurrences of a word character or characters followed by a white-space character or period (\\\".\\\").|  \\n  \\n In this example, the input string consists of two sentences. As the output shows, the first sentence consists of only one word, so the <xref:System.Text.RegularExpressions.CaptureCollection> object has a single <xref:System.Text.RegularExpressions.Capture> object that represents the same capture as the <xref:System.Text.RegularExpressions.Group> object. The second sentence consists of multiple words, so the <xref:System.Text.RegularExpressions.Group> objects only contain information about the last matched subexpression. Group 1, which represents the first capture, contains the last word in the sentence that has a closing period. Group 2, which represents the second capture, contains the last word in the sentence. However, the <xref:System.Text.RegularExpressions.Capture> objects in the group's <xref:System.Text.RegularExpressions.CaptureCollection> object capture each subexpression match. The <xref:System.Text.RegularExpressions.Capture> objects in the first capturing group's collection of captures contain information about each captured word and white-space character or period. The <xref:System.Text.RegularExpressions.Capture> objects in the second capturing group's collection of captures contain information about each captured word.\"\n  syntax:\n    content: public class Capture\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Text.RegularExpressions.Group\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Capture.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Capture.Index\n  commentId: P:System.Text.RegularExpressions.Capture.Index\n  id: Index\n  parent: System.Text.RegularExpressions.Capture\n  langs:\n  - csharp\n  name: Index\n  nameWithType: Capture.Index\n  fullName: Capture.Index\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: The position in the original string where the first character of the captured substring is found.\n  syntax:\n    content: public int Index { get; }\n    return:\n      type: System.Int32\n      description: The zero-based starting position in the original string where the captured substring is found.\n  overload: System.Text.RegularExpressions.Capture.Index*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Capture.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Capture.Length\n  commentId: P:System.Text.RegularExpressions.Capture.Length\n  id: Length\n  parent: System.Text.RegularExpressions.Capture\n  langs:\n  - csharp\n  name: Length\n  nameWithType: Capture.Length\n  fullName: Capture.Length\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets the length of the captured substring.\n  syntax:\n    content: public int Length { get; }\n    return:\n      type: System.Int32\n      description: The length of the captured substring.\n  overload: System.Text.RegularExpressions.Capture.Length*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Capture.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Capture.ToString\n  commentId: M:System.Text.RegularExpressions.Capture.ToString\n  id: ToString\n  parent: System.Text.RegularExpressions.Capture\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Capture.ToString()\n  fullName: Capture.ToString()\n  type: Method\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Retrieves the captured substring from the input string by calling the <xref href=\"System.Text.RegularExpressions.Capture.Value\"></xref> property.\n  remarks: '`ToString` is actually an internal call to the <xref:System.Text.RegularExpressions.Capture.Value%2A> property.'\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The substring that was captured by the match.\n  overload: System.Text.RegularExpressions.Capture.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Capture.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Capture.Value\n  commentId: P:System.Text.RegularExpressions.Capture.Value\n  id: Value\n  parent: System.Text.RegularExpressions.Capture\n  langs:\n  - csharp\n  name: Value\n  nameWithType: Capture.Value\n  fullName: Capture.Value\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets the captured substring from the input string.\n  remarks: If a call to the <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=fullName> or <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=fullName> method fails to find a match, the value of the returned `Match.Value` property is <xref:System.String.Empty?displayProperty=fullName>. If the regular expression engine is unable to match a capturing group. the value of the returned `Group.Value` property is <xref:System.String.Empty?displayProperty=fullName>. See the second example for an illustration.\n  example:\n  - \"The following example defines a regular expression that matches sentences that contain no punctuation except for a period (\\\".\\\"). The `Match.Value` property displays the result string, which consists of a matched sentence, for each match. The `Group.Value` property displays the result string for each capturing group; it consists of the last string captured by that capturing group. The <xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=fullName> property displays the result string for each capture.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  \\n  \\n The regular expression pattern `((\\\\w+)[\\\\s.])+` is defined as shown in the following table. Note that in this regular expression, a quantifier (+) is applied to the entire regular expression.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`(\\\\w+)`|Match one or more word characters. This is the second capturing group.|  \\n|`[\\\\s.])`|Match a white-space character or period (\\\".\\\").|  \\n|`((\\\\w+)[\\\\s.])`|Match one or more word characters followed by a white-space character or period (\\\".\\\"). This is the first capturing group.|  \\n|`((\\\\w+)[\\\\s.])+`|Match one or more occurrences of a word character or characters followed by a white-space character or period (\\\".\\\").|  \\n  \\n In this example, the input string consists of two sentences. As the output shows, the first sentence consists of only one word, so the <xref:System.Text.RegularExpressions.CaptureCollection> object has a single <xref:System.Text.RegularExpressions.Capture> object that represents the same capture as the <xref:System.Text.RegularExpressions.Group> object. The second sentence consists of multiple words, so the <xref:System.Text.RegularExpressions.Group> objects only contain information about the last matched subexpression. Group 1, which represents the first capture, contains the last word in the sentence that has a closing period. Group 2, which represents the second capture, contains the last word in the sentence. However, the <xref:System.Text.RegularExpressions.Capture> objects in the group's <xref:System.Text.RegularExpressions.CaptureCollection> object capture each subexpression match. The <xref:System.Text.RegularExpressions.Capture> objects in the first capturing group's collection of captures contain information about each captured word and white-space character or period. The <xref:System.Text.RegularExpressions.Capture> objects in the second capturing group's collection of captures contain information about each captured word.  \\n  \\n The following example uses a regular expression pattern, `^([a-z]+)(\\\\d+)*\\\\.([a-z]+(\\\\d)*)$`, to match a product number that consists of two parts separated by a period. Both parts consist of alphabetic characters followed by optional numbers. Because the first input string does not match the pattern, the value of the returned <xref:System.Text.RegularExpressions.Match?displayProperty=fullName> object's `Value` property is <xref:System.String.Empty?displayProperty=fullName>. Similarly, when the regular expression pattern is unable to match a capturing group, the value of the corresponding <xref:System.Text.RegularExpressions.Group> object's `Value` property is <xref:System.String.Empty?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb#1)]  \\n  \\n The regular expression pattern is defined as shown in the following table:  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`^`|Begin the match at the beginning of the string.|  \\n|`([a-z]+)`|Match one or more occurrences of any character from a to z. Because the regular expression engine is passed the <xref:System.Text.RegularExpressions.RegexOptions?displayProperty=fullName> option, this comparison is case-insensitive. This is the first capturing group.|  \\n|`(\\\\d+)?`|Match zero or one occurrence of one or more decimal digits. This is the second capturing group.|  \\n|`\\\\.`|Match a literal period character.|  \\n|`([a-z]+`|Match one or more occurrences of any character from a to z. The comparison is case-insensitive.|  \\n|`(\\\\d)*`|Match zero or more decimal digits. A single matched digit is the fourth capturing group.|  \\n|`([a-z]+(\\\\d)*)`|Match one or more alphabetic characters from a to z followed by zero, one, or more decimal digits. This is the fourth capturing group.|  \\n|`$`|Conclude the match at the end of the string.|\"\n  syntax:\n    content: public string Value { get; }\n    return:\n      type: System.String\n      description: The substring that is captured by the match.\n  overload: System.Text.RegularExpressions.Capture.Value*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Capture.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Text.RegularExpressions.Capture.Index\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Index\n  nameWithType: Capture.Index\n  fullName: Capture.Index\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.RegularExpressions.Capture.Length\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Length\n  nameWithType: Capture.Length\n  fullName: Capture.Length\n- uid: System.Text.RegularExpressions.Capture.ToString\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: ToString()\n  nameWithType: Capture.ToString()\n  fullName: Capture.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Text.RegularExpressions.Capture.Value\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Value\n  nameWithType: Capture.Value\n  fullName: Capture.Value\n- uid: System.Text.RegularExpressions.Capture.Index*\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Index\n  nameWithType: Capture.Index\n  fullName: Capture.Index\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Capture.xml\n- uid: System.Text.RegularExpressions.Capture.Length*\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Length\n  nameWithType: Capture.Length\n  fullName: Capture.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Capture.xml\n- uid: System.Text.RegularExpressions.Capture.ToString*\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: ToString\n  nameWithType: Capture.ToString\n  fullName: Capture.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Capture.xml\n- uid: System.Text.RegularExpressions.Capture.Value*\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Value\n  nameWithType: Capture.Value\n  fullName: Capture.Value\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Capture.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n"}