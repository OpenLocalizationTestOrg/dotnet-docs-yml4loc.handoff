{"nodes":[{"content":"Supports the structural comparison of collection objects.","nodes":[{"pos":[0,57],"content":"Supports the structural comparison of collection objects.","nodes":[{"content":"Supports the structural comparison of collection objects.","pos":[0,57]}]}],"pos":[559,617],"yaml":true},{"content":"The <xref:System.Collections.IStructuralComparable> interface enables you to implement customized comparisons for collection members. That is, you can define precisely what it means for one collection object to precede, follow, or occur in the same position in the sort order as a second collection object. You can then specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralComparable> interface.  \n  \n The interface has a single member, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, which determines whether the current collection object is less than, equal to, or greater than a second object in the sort order. The actual comparison of the members or elements in the current instance with those in a second object is performed by an <xref:System.Collections.IComparer> interface implementation, which contains the definition of your custom comparison.  \n  \n> [!NOTE]\n>  The <xref:System.Collections.IStructuralComparable> interface supports only structural comparisons for sorting or ordering. The <xref:System.Collections.IStructuralEquatable> interface supports custom comparisons for structural equality.  \n  \n The .NET Framework provides two default comparers. One is returned by the <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=fullName> property; the other is returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property.  \n  \n The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralComparable> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralComparable> interface value and providing your <xref:System.Collections.IComparer> implementation as an argument to the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method, you can define a custom sort order for the array or collection. However, you do not call the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method directly in most cases. Instead, the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method is called by sorting methods such as <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>. In this case, you define your <xref:System.Collections.IComparer> implementation and pass it as an argument to a sorting method or collection object's class constructor. The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method with your custom comparer is then called automatically whenever the collection is sorted.","nodes":[{"pos":[0,455],"content":"The <xref:System.Collections.IStructuralComparable> interface enables you to implement customized comparisons for collection members. That is, you can define precisely what it means for one collection object to precede, follow, or occur in the same position in the sort order as a second collection object. You can then specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralComparable> interface.","nodes":[{"content":"The <xref:System.Collections.IStructuralComparable> interface enables you to implement customized comparisons for collection members. That is, you can define precisely what it means for one collection object to precede, follow, or occur in the same position in the sort order as a second collection object. You can then specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralComparable> interface.","pos":[0,455],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface enables you to implement customized comparisons for collection members.","pos":[0,133],"source":"The <xref:System.Collections.IStructuralComparable> interface enables you to implement customized comparisons for collection members."},{"content":"That is, you can define precisely what it means for one collection object to precede, follow, or occur in the same position in the sort order as a second collection object.","pos":[134,306]},{"content":"You can then specify that this definition be used with a collection type that accepts the <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.","pos":[307,455],"source":" You can then specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralComparable> interface."}]}]},{"pos":[462,929],"content":"The interface has a single member, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, which determines whether the current collection object is less than, equal to, or greater than a second object in the sort order. The actual comparison of the members or elements in the current instance with those in a second object is performed by an <xref:System.Collections.IComparer> interface implementation, which contains the definition of your custom comparison.","nodes":[{"content":"The interface has a single member, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, which determines whether the current collection object is less than, equal to, or greater than a second object in the sort order. The actual comparison of the members or elements in the current instance with those in a second object is performed by an <xref:System.Collections.IComparer> interface implementation, which contains the definition of your custom comparison.","pos":[0,467],"nodes":[{"content":"The interface has a single member, <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable.CompareTo%2A&gt;</ph>, which determines whether the current collection object is less than, equal to, or greater than a second object in the sort order.","pos":[0,226],"source":"The interface has a single member, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, which determines whether the current collection object is less than, equal to, or greater than a second object in the sort order."},{"content":"The actual comparison of the members or elements in the current instance with those in a second object is performed by an <ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph> interface implementation, which contains the definition of your custom comparison.","pos":[227,467],"source":" The actual comparison of the members or elements in the current instance with those in a second object is performed by an <xref:System.Collections.IComparer> interface implementation, which contains the definition of your custom comparison."}]}]},{"pos":[937,1185],"content":"[!NOTE]\n The <xref:System.Collections.IStructuralComparable> interface supports only structural comparisons for sorting or ordering. The <xref:System.Collections.IStructuralEquatable> interface supports custom comparisons for structural equality.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Collections.IStructuralComparable> interface supports only structural comparisons for sorting or ordering. The <xref:System.Collections.IStructuralEquatable> interface supports custom comparisons for structural equality.","pos":[8,246],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface supports only structural comparisons for sorting or ordering.","pos":[1,124],"source":" The <xref:System.Collections.IStructuralComparable> interface supports only structural comparisons for sorting or ordering."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface supports custom comparisons for structural equality.","pos":[125,238],"source":" The <xref:System.Collections.IStructuralEquatable> interface supports custom comparisons for structural equality."}]}]},{"pos":[1192,1492],"content":"The .NET Framework provides two default comparers. One is returned by the <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=fullName> property; the other is returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property.","nodes":[{"content":"The .NET Framework provides two default comparers. One is returned by the <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=fullName> property; the other is returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property.","pos":[0,300],"nodes":[{"content":"The .NET Framework provides two default comparers.","pos":[0,50]},{"content":"One is returned by the <ph id=\"ph1\">&lt;xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=fullName&gt;</ph> property; the other is returned by the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName&gt;</ph> property.","pos":[51,300],"source":" One is returned by the <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=fullName> property; the other is returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property."}]}]},{"pos":[1499,2778],"content":"The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralComparable> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralComparable> interface value and providing your <xref:System.Collections.IComparer> implementation as an argument to the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method, you can define a custom sort order for the array or collection. However, you do not call the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method directly in most cases. Instead, the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method is called by sorting methods such as <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>. In this case, you define your <xref:System.Collections.IComparer> implementation and pass it as an argument to a sorting method or collection object's class constructor. The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method with your custom comparer is then called automatically whenever the collection is sorted.","nodes":[{"content":"The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralComparable> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralComparable> interface value and providing your <xref:System.Collections.IComparer> implementation as an argument to the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method, you can define a custom sort order for the array or collection. However, you do not call the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method directly in most cases. Instead, the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method is called by sorting methods such as <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>. In this case, you define your <xref:System.Collections.IComparer> implementation and pass it as an argument to a sorting method or collection object's class constructor. The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method with your custom comparer is then called automatically whenever the collection is sorted.","pos":[0,1279],"nodes":[{"content":"The generic tuple classes (<ph id=\"ph1\">&lt;xref:System.Tuple%601&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Tuple%602&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Tuple%603&gt;</ph>, and so on) and the <ph id=\"ph4\">&lt;xref:System.Array&gt;</ph> class provide explicit implementations of the <ph id=\"ph5\">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.","pos":[0,245],"source":"The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralComparable> interface."},{"content":"By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface value and providing your <ph id=\"ph2\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation as an argument to the <ph id=\"ph3\">&lt;xref:System.Collections.IStructuralComparable.CompareTo%2A&gt;</ph> method, you can define a custom sort order for the array or collection.","pos":[246,633],"source":" By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralComparable> interface value and providing your <xref:System.Collections.IComparer> implementation as an argument to the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method, you can define a custom sort order for the array or collection."},{"content":"However, you do not call the <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable.CompareTo%2A&gt;</ph> method directly in most cases.","pos":[634,754],"source":" However, you do not call the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method directly in most cases."},{"content":"Instead, the <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable.CompareTo%2A&gt;</ph> method is called by sorting methods such as <ph id=\"ph2\">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29&gt;</ph>.","pos":[755,947],"source":" Instead, the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method is called by sorting methods such as <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>."},{"content":"In this case, you define your <ph id=\"ph1\">&lt;xref:System.Collections.IComparer&gt;</ph> implementation and pass it as an argument to a sorting method or collection object's class constructor.","pos":[948,1117],"source":" In this case, you define your <xref:System.Collections.IComparer> implementation and pass it as an argument to a sorting method or collection object's class constructor."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable.CompareTo%2A&gt;</ph> method with your custom comparer is then called automatically whenever the collection is sorted.","pos":[1118,1279],"source":" The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method with your custom comparer is then called automatically whenever the collection is sorted."}]}]}],"pos":[628,3418],"yaml":true,"extradata":"MT"},{"content":"Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.","nodes":[{"pos":[0,135],"content":"Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.","nodes":[{"content":"Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.","pos":[0,135]}]}],"pos":[7586,7722],"yaml":true},{"content":"The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method supports custom structural comparison and sorting of array and tuple objects. The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method calls the `comparer` object's <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> end and the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method returns a value when one of the following conditions becomes true:  \n  \n-   The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method returns -1.  \n  \n-   The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method returns 1.  \n  \n-   The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method is called for the last element or component in the collection object.","nodes":[{"pos":[0,677],"content":"The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method supports custom structural comparison and sorting of array and tuple objects. The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method calls the `comparer` object's <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> end and the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method returns a value when one of the following conditions becomes true:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable.CompareTo%2A&gt;</ph> method supports custom structural comparison and sorting of array and tuple objects.","pos":[0,149],"source":"The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method supports custom structural comparison and sorting of array and tuple objects."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable.CompareTo%2A&gt;</ph> method calls the <ph id=\"ph2\">`comparer`</ph> object's <ph id=\"ph3\">&lt;xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName&gt;</ph> method to compare individual array elements or tuple components, starting with the first element or component.","pos":[150,434],"source":" The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method calls the `comparer` object's <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method to compare individual array elements or tuple components, starting with the first element or component."},{"content":"The individual calls to <ph id=\"ph1\">&lt;xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName&gt;</ph> end and the <ph id=\"ph2\">&lt;xref:System.Collections.IStructuralComparable.CompareTo%2A&gt;</ph> method returns a value when one of the following conditions becomes true:","pos":[435,677],"source":" The individual calls to <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> end and the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method returns a value when one of the following conditions becomes true:"}]},{"pos":[687,781],"content":"The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method returns -1.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName&gt;</ph> method returns -1.","pos":[0,94],"source":"The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method returns -1."}]},{"pos":[791,884],"content":"The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method returns 1.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName&gt;</ph> method returns 1.","pos":[0,93],"source":"The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method returns 1."}]},{"pos":[894,1046],"content":"The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method is called for the last element or component in the collection object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName&gt;</ph> method is called for the last element or component in the collection object.","pos":[0,152],"source":"The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method is called for the last element or component in the collection object."}]}],"pos":[7733,8788],"yaml":true,"extradata":"MT"},{"content":"The object to compare with the current instance.","nodes":[{"pos":[0,48],"content":"The object to compare with the current instance.","nodes":[{"content":"The object to compare with the current instance.","pos":[0,48]}]}],"pos":[10554,10603],"yaml":true},{"content":"An object that compares members of the current collection object with the corresponding members of <code>other</code>.","nodes":[{"pos":[0,118],"content":"An object that compares members of the current collection object with the corresponding members of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An object that compares members of the current collection object with the corresponding members of <code>other</code>."}],"pos":[10682,10801],"yaml":true},{"content":"An integer that indicates the relationship of the current collection object to <code>other</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td> The current instance precedes <code>other</code>.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td> The current instance and <code>other</code> are equal.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td> The current instance follows <code>other</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,131],"content":"An integer that indicates the relationship of the current collection object to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"An integer that indicates the relationship of the current collection object to <code>other</code>, as shown in the following table."},{"pos":[138,534],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td> The current instance precedes <code>other</code>.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td> The current instance and <code>other</code> are equal.  \n  \n </td></tr><tr><td> 1  \n  \n </td><td> The current instance follows <code>other</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Description","pos":[52,68],"source":" Description  \n  \n "},{"content":"-1","pos":[104,111],"source":" -1  \n  \n "},{"content":" The current instance precedes <code>other</code>.  \n  \n ","pos":[122,179],"nodes":[{"content":"The current instance precedes <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,50],"source":" The current instance precedes <code>other</code>."}]},{"content":"0","pos":[198,204],"source":" 0  \n  \n "},{"content":" The current instance and <code>other</code> are equal.  \n  \n ","pos":[215,277],"nodes":[{"content":"The current instance and <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph> are equal.","pos":[1,55],"source":" The current instance and <code>other</code> are equal."}]},{"content":"1","pos":[296,302],"source":" 1  \n  \n "},{"content":" The current instance follows <code>other</code>.  \n  \n ","pos":[313,369],"nodes":[{"content":"The current instance follows <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,49],"source":" The current instance follows <code>other</code>."}]}]}],"pos":[10857,11411],"yaml":true},{"content":"This instance and <code>other</code> are not the same type.","nodes":[{"pos":[0,59],"content":"This instance and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> are not the same type.","source":"This instance and <code>other</code> are not the same type."}],"pos":[11583,11643],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.IStructuralComparable\n  commentId: T:System.Collections.IStructuralComparable\n  id: IStructuralComparable\n  children:\n  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  langs:\n  - csharp\n  name: IStructuralComparable\n  nameWithType: IStructuralComparable\n  fullName: System.Collections.IStructuralComparable\n  type: Interface\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  - FSharp.Core\n  namespace: System.Collections\n  summary: Supports the structural comparison of collection objects.\n  remarks: \"The <xref:System.Collections.IStructuralComparable> interface enables you to implement customized comparisons for collection members. That is, you can define precisely what it means for one collection object to precede, follow, or occur in the same position in the sort order as a second collection object. You can then specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralComparable> interface.  \\n  \\n The interface has a single member, <xref:System.Collections.IStructuralComparable.CompareTo%2A>, which determines whether the current collection object is less than, equal to, or greater than a second object in the sort order. The actual comparison of the members or elements in the current instance with those in a second object is performed by an <xref:System.Collections.IComparer> interface implementation, which contains the definition of your custom comparison.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Collections.IStructuralComparable> interface supports only structural comparisons for sorting or ordering. The <xref:System.Collections.IStructuralEquatable> interface supports custom comparisons for structural equality.  \\n  \\n The .NET Framework provides two default comparers. One is returned by the <xref:System.Collections.StructuralComparisons.StructuralComparer%2A?displayProperty=fullName> property; the other is returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=fullName> property.  \\n  \\n The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralComparable> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralComparable> interface value and providing your <xref:System.Collections.IComparer> implementation as an argument to the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method, you can define a custom sort order for the array or collection. However, you do not call the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method directly in most cases. Instead, the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method is called by sorting methods such as <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29>. In this case, you define your <xref:System.Collections.IComparer> implementation and pass it as an argument to a sorting method or collection object's class constructor. The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method with your custom comparer is then called automatically whenever the collection is sorted.\"\n  example:\n  - \"The following example creates an array of <xref:System.Tuple%606> objects that contains population data for three U.S. cities from 1960 to 2000. The sextuple's first component is the city name. The remaining five components represent the population at ten-year intervals from 1960 to 2000.  \\n  \\n The `PopulationComparer` class provides an <xref:System.Collections.IComparer> implementation that allows the array of sextuples to be sorted by any one of its components. Two values are provided to the `PopulationComparer` class in its constructor: the position of the component that defines the sort order, and a Boolean value that indicates whether the tuple objects should be sorted in ascending or descending order.  \\n  \\n The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1970) and displays them, and then sorts them by the sixth component (the population in 2000) and displays them. Note that the example does not directly call the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method. The method is called implicitly by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> method for each tuple object in the array.  \\n  \\n [!code-csharp[System.Tuple\\\\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]\\n [!code-vb[System.Tuple\\\\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]\"\n  syntax:\n    content: public interface IStructuralComparable\n  derivedClasses:\n  - Microsoft.FSharp.Collections.FSharpList`1\n  - Microsoft.FSharp.Core.FSharpChoice`2\n  - Microsoft.FSharp.Core.FSharpChoice`3\n  - Microsoft.FSharp.Core.FSharpChoice`4\n  - Microsoft.FSharp.Core.FSharpChoice`5\n  - Microsoft.FSharp.Core.FSharpChoice`6\n  - Microsoft.FSharp.Core.FSharpChoice`7\n  - Microsoft.FSharp.Core.FSharpOption`1\n  - Microsoft.FSharp.Core.FSharpRef`1\n  - System.Array\n  - System.Tuple`1\n  - System.Tuple`2\n  - System.Tuple`3\n  - System.Tuple`4\n  - System.Tuple`5\n  - System.Tuple`6\n  - System.Tuple`7\n  - System.Tuple`8\n  - System.ValueTuple\n  - System.ValueTuple`1\n  - System.ValueTuple`2\n  - System.ValueTuple`3\n  - System.ValueTuple`4\n  - System.ValueTuple`5\n  - System.ValueTuple`6\n  - System.ValueTuple`7\n  - System.ValueTuple`8\n  - System.Collections.Immutable.ImmutableArray`1\n  implements: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralComparable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  commentId: M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  id: CompareTo(System.Object,System.Collections.IComparer)\n  parent: System.Collections.IStructuralComparable\n  langs:\n  - csharp\n  name: CompareTo(Object, IComparer)\n  nameWithType: IStructuralComparable.CompareTo(Object, IComparer)\n  fullName: IStructuralComparable.CompareTo(Object, IComparer)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  - FSharp.Core\n  namespace: System.Collections\n  summary: Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.\n  remarks: \"The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method supports custom structural comparison and sorting of array and tuple objects. The <xref:System.Collections.IStructuralComparable.CompareTo%2A> method calls the `comparer` object's <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> end and the <xref:System.Collections.IStructuralComparable.CompareTo%2A> method returns a value when one of the following conditions becomes true:  \\n  \\n-   The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method returns -1.  \\n  \\n-   The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method returns 1.  \\n  \\n-   The <xref:System.Collections.IComparer.Compare%2A?displayProperty=fullName> method is called for the last element or component in the collection object.\"\n  example:\n  - \"The following example creates an array of <xref:System.Tuple%606> objects that contains population data for three U.S. cities from 1960 to 2000. The sextuple's first component is the city name. The remaining five components represent the population at ten-year intervals from 1960 to 2000.  \\n  \\n The `PopulationComparer` class provides an <xref:System.Collections.IComparer> implementation that allows the array of sextuples to be sorted by any one of its components. Two values are provided to the `PopulationComparer` class in its constructor: the position of the component that defines the sort order, and a <xref:System.Boolean> value that indicates whether the tuple objects should be sorted in ascending or descending order.  \\n  \\n The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1970) and displays them, and then sorts them by the sixth component (the population in 2000) and displays them. Note that the example does not directly call the <xref:System.Collections.IStructuralComparable.CompareTo%2A?displayProperty=fullName> implementation. The method is called implicitly by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29> method for each tuple object in the array.  \\n  \\n [!code-csharp[System.Tuple\\\\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]\\n [!code-vb[System.Tuple\\\\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]\"\n  syntax:\n    content: public int CompareTo (object other, System.Collections.IComparer comparer);\n    parameters:\n    - id: other\n      type: System.Object\n      description: The object to compare with the current instance.\n    - id: comparer\n      type: System.Collections.IComparer\n      description: An object that compares members of the current collection object with the corresponding members of <code>other</code>.\n    return:\n      type: System.Int32\n      description: \"An integer that indicates the relationship of the current collection object to <code>other</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Description  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td> The current instance precedes <code>other</code>.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td> The current instance and <code>other</code> are equal.  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td> The current instance follows <code>other</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Collections.IStructuralComparable.CompareTo*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: This instance and <code>other</code> are not the same type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralComparable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\n  parent: System.Collections.IStructuralComparable\n  isExternal: false\n  name: CompareTo(Object, IComparer)\n  nameWithType: IStructuralComparable.CompareTo(Object, IComparer)\n  fullName: IStructuralComparable.CompareTo(Object, IComparer)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  nameWithType: IComparer\n  fullName: System.Collections.IComparer\n- uid: System.Collections.IStructuralComparable.CompareTo*\n  parent: System.Collections.IStructuralComparable\n  isExternal: false\n  name: CompareTo\n  nameWithType: IStructuralComparable.CompareTo\n  fullName: IStructuralComparable.CompareTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralComparable.xml\n"}