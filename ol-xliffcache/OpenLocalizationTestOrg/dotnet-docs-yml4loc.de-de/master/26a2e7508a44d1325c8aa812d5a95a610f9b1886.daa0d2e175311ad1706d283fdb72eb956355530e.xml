{"nodes":[{"content":"Provides support for parallel loops and regions.","nodes":[{"pos":[0,48],"content":"Provides support for parallel loops and regions.","nodes":[{"content":"Provides support for parallel loops and regions.","pos":[0,48]}]}],"pos":[6208,6257],"yaml":true},{"content":"The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.","nodes":[{"pos":[0,193],"content":"The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel&gt;</ph> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.","pos":[0,193],"source":"The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements."}]}],"pos":[6268,6462],"yaml":true,"extradata":"MT"},{"content":"Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,145],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.","source":"Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated."}],"pos":[8905,9051],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with two arguments:  \n  \n-   An <xref:System.Int32> value that represents the iteration count.  \n  \n-   A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely. The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.  \n  \n Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute. However, all iterations before the current one will still have to be executed if they haven't already.  \n  \n Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.  \n  \n If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.  \n  \n If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.","nodes":[{"pos":[0,142],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with two arguments:","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with two arguments:","pos":[108,142]}]},{"pos":[152,217],"content":"An <xref:System.Int32> value that represents the iteration count.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph> value that represents the iteration count.","pos":[0,65],"source":"An <xref:System.Int32> value that represents the iteration count."}]},{"pos":[227,467],"content":"A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely. The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.","nodes":[{"content":"A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely. The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.","pos":[0,240],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that can be used to break out of the loop prematurely.","pos":[0,113],"source":"A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> object is created by the compiler; it cannot be instantiated in user code.","pos":[114,240],"source":" The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code."}]}]},{"pos":[474,741],"content":"Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute. However, all iterations before the current one will still have to be executed if they haven't already.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method informs the <ph id=\"ph2\">`for`</ph> operation that iterations after the current one don't have to execute.","pos":[0,164],"source":"Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute."},{"content":"However, all iterations before the current one will still have to be executed if they haven't already.","pos":[165,267]}]},{"pos":[748,1055],"content":"Therefore, calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> is similar to using a break operation within a conventional <ph id=\"ph2\">`for`</ph> loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.","source":"Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute."},{"pos":[1062,1688],"content":"If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.","nodes":[{"content":"If executing all iterations before the current one is not necessary, use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method instead of using <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>.","pos":[0,214],"source":"If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> informs the <ph id=\"ph2\">`for`</ph> loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.","pos":[215,476],"source":" Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed."},{"content":"However, as with <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>, there are no guarantees regarding which other iterations will not execute.","pos":[477,626],"source":" However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute."}]},{"pos":[1695,1869],"content":"If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.","nodes":[{"content":"If a loop is ended prematurely, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopResult&gt;</ph> structure that is returned will contain relevant information about the loop's completion.","pos":[0,174],"source":"If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion."}]},{"pos":[1876,2003],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations."}],"pos":[9062,11082],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[13061,13089],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[13155,13181],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[13296,13345],"yaml":true},{"content":"A  structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,81],"content":"A  structure that contains information about which portion of the loop completed.","nodes":[{"content":"A  structure that contains information about which portion of the loop completed.","pos":[0,81]}]}],"pos":[13430,13512],"yaml":true},{"content":"The <code>body</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[13677,13719],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[13815,13896],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel.","nodes":[{"pos":[0,86],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic) loop in which iterations may run in parallel.","source":"Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel."}],"pos":[15313,15400],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int32>) as a parameter.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.","nodes":[{"pos":[0,185],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int32>) as a parameter.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the iteration count (<ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph>) as a parameter.","pos":[108,185],"source":" It is provided with the iteration count (<xref:System.Int32>) as a parameter."}]},{"pos":[192,319],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations."}],"pos":[15411,15735],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[16468,16496],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[16562,16588],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[16662,16711],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[16796,16877],"yaml":true},{"content":"The <code>body</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[17042,17084],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[17180,17261],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,165],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.","source":"Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated."}],"pos":[18855,19021],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \n  \n Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don’t have to be executed, but all iterations before the current one do.  \n  \n Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.  \n  \n If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.  \n  \n If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.","nodes":[{"pos":[0,314],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the following parameters: the iteration count (<ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph>), and a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely.","pos":[108,314],"source":" It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely."}]},{"pos":[321,535],"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> method informs the <ph id=\"ph2\">`for`</ph> operation that iterations after the current one don’t have to be executed, but all iterations before the current one do.","source":"Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don’t have to be executed, but all iterations before the current one do."},{"pos":[542,798],"content":"Therefore, calling Break is similar to using a break operation within a conventional <ph id=\"ph1\">`for`</ph> loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.","source":"Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute."},{"pos":[805,1431],"content":"If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.","nodes":[{"content":"If executing all iterations before the current one is not necessary, use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> method instead of using <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>.","pos":[0,214],"source":"If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>."},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> informs the <ph id=\"ph2\">`for`</ph> loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.","pos":[215,476],"source":" Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed."},{"content":"However, as with <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph>, there are no guarantees regarding which other iterations will not execute.","pos":[477,626],"source":" However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute."}]},{"pos":[1438,1612],"content":"If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.","nodes":[{"content":"If a loop is ended prematurely, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopResult&gt;</ph> structure that is returned will contain relevant information about the loop's completion.","pos":[0,174],"source":"If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion."}]},{"pos":[1619,1751],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, then the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."}],"pos":[19032,20796],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[21063,21091],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[21157,21183],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[21298,21347],"yaml":true},{"content":"A <xref href=\"System.Threading.Tasks.ParallelLoopResult\"></xref> structure that contains information on what portion of the loop completed.","nodes":[{"pos":[0,139],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopResult\"&gt;&lt;/xref&gt;</ph> structure that contains information on what portion of the loop completed.","source":"A <xref href=\"System.Threading.Tasks.ParallelLoopResult\"></xref> structure that contains information on what portion of the loop completed."}],"pos":[21432,21572],"yaml":true},{"content":"The <code>body</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[21737,21779],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[21875,21956],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.","nodes":[{"pos":[0,106],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.","source":"Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel."}],"pos":[23373,23480],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int64>) as a parameter.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.","nodes":[{"pos":[0,185],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int64>) as a parameter.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the iteration count (<ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph>) as a parameter.","pos":[108,185],"source":" It is provided with the iteration count (<xref:System.Int64>) as a parameter."}]},{"pos":[192,319],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations."}],"pos":[23491,23815],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[24041,24069],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[24135,24161],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[24235,24284],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[24369,24450],"yaml":true},{"content":"The <code>body</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[24615,24657],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[24753,24834],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,178],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[26596,26775],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.","nodes":[{"pos":[0,314],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the following parameters: the iteration count (<ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph>), and a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely.","pos":[108,314],"source":" It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely."}]},{"pos":[321,448],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations."}],"pos":[26786,27239],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[27559,27587],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[27653,27679],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[27775,27833],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[27948,27997],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[28082,28163],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[28338,28456],"yaml":true},{"content":"The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,111],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."}],"pos":[28558,28676],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[28772,28853],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[28959,29156],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.","nodes":[{"pos":[0,121],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.","source":"Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel and loop options can be configured."}],"pos":[30741,30863],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int32>) as a parameter.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.","nodes":[{"pos":[0,185],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int32>) as a parameter.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the iteration count (<ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph>) as a parameter.","pos":[108,185],"source":" It is provided with the iteration count (<xref:System.Int32>) as a parameter."}]},{"pos":[192,324],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, then the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."}],"pos":[30874,31203],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[31889,31917],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[31983,32009],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[32105,32163],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[32237,32286],"yaml":true},{"content":"A  structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,81],"content":"A  structure that contains information about which portion of the loop completed.","nodes":[{"content":"A  structure that contains information about which portion of the loop completed.","pos":[0,81]}]}],"pos":[32371,32453],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[32628,32746],"yaml":true},{"content":"The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,111],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."}],"pos":[32848,32966],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[33062,33143],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[33249,33446],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,199],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `for` (`For` in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[35208,35408],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.","nodes":[{"pos":[0,314],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the following parameters: the iteration count (<ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph>), and a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely.","pos":[108,314],"source":" It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely."}]},{"pos":[321,448],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations."}],"pos":[35419,35872],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[36713,36741],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[36807,36833],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[36929,36987],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[37102,37151],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[37236,37317],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[37492,37610],"yaml":true},{"content":"The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,111],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."}],"pos":[37712,37830],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[37926,38007],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[38113,38310],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.","nodes":[{"pos":[0,141],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.","source":"Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured."}],"pos":[39895,40037],"yaml":true},{"content":"Supports 64-bit indexes. The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int64>) as a parameter.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.","nodes":[{"pos":[0,210],"content":"Supports 64-bit indexes. The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int64>) as a parameter.","nodes":[{"content":"Supports 64-bit indexes.","pos":[0,24]},{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[25,132],"source":" The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the iteration count (<ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph>) as a parameter.","pos":[133,210],"source":" It is provided with the iteration count (<xref:System.Int64>) as a parameter."}]},{"pos":[217,349],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, then the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."}],"pos":[40048,40402],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[41167,41195],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[41261,41287],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[41383,41441],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[41515,41564],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[41649,41730],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[41905,42023],"yaml":true},{"content":"The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,111],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."}],"pos":[42125,42243],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[42339,42420],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[42526,42723],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,220],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[44770,44991],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads. These initial states are passed to the first `body` invocations on each thread. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.","nodes":[{"pos":[0,402],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the following parameters: the iteration count (<ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph>), a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.","pos":[108,402],"source":" It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread."}]},{"pos":[409,1131],"content":"The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads. These initial states are passed to the first `body` invocations on each thread. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads.","pos":[0,161],"source":"The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each thread.","pos":[162,241],"source":" These initial states are passed to the first `body` invocations on each thread."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[242,364]},{"content":"Finally, the last body invocation on each thread returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[365,482],"source":" Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per thread to perform a final action on each thread's local state.","pos":[483,593],"source":" The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state."},{"content":"This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.","pos":[594,722]}]},{"pos":[1138,1490],"content":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,352],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,207],"source":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[208,352],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]},{"pos":[1497,1629],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, then the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."}],"pos":[45002,46640],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[47036,47064],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[47130,47156],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[47252,47310],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each thread.","nodes":[{"pos":[0,87],"content":"The function delegate that returns the initial state of the local data for each thread.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each thread.","pos":[0,87]}]}],"pos":[47381,47469],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[47596,47645],"yaml":true},{"content":"The delegate that performs a final action on the local state of each thread.","nodes":[{"pos":[0,76],"content":"The delegate that performs a final action on the local state of each thread.","nodes":[{"content":"The delegate that performs a final action on the local state of each thread.","pos":[0,76]}]}],"pos":[47721,47798],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[47854,47889],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[47974,48055],"yaml":true},{"content":"The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,242],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."}],"pos":[48223,48480],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[48592,48710],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[48816,49013],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[49109,49190],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,202],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `for` (`For` in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[51237,51440],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.","nodes":[{"pos":[0,400],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the following parameters: the iteration count (<ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph>), a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.","pos":[108,400],"source":" It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task."}]},{"pos":[407,1117],"content":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,157],"source":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[158,235],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[236,358]},{"content":"Finally, the last body invocation on each task returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[359,474],"source":" Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per task to perform a final action on each task's local state.","pos":[475,581],"source":" The `localFinally` delegate is invoked once per task to perform a final action on each task's local state."},{"content":"This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.","pos":[582,710]}]},{"pos":[1124,1476],"content":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,352],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,207],"source":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[208,352],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]},{"pos":[1483,1615],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, then the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."}],"pos":[51451,53075],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[53999,54027],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[54093,54119],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[54215,54273],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[54344,54430],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[54557,54606],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[54682,54757],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[54813,54848],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[54933,55014],"yaml":true},{"content":"The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,242],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."}],"pos":[55182,55439],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[55551,55669],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[55775,55972],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[56068,56149],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,169],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","source":"Executes a `for` (`For` in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated."}],"pos":[58028,58198],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.  \n  \n For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).","nodes":[{"pos":[0,402],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the following parameters: the iteration count (<ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph>), a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.","pos":[108,402],"source":" It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread."}]},{"pos":[409,1117],"content":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,157],"source":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[158,235],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[236,358]},{"content":"Finally, the last body invocation on each task returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[359,474],"source":" Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per task to perform a final action on each task's local state.","pos":[475,581],"source":" The `localFinally` delegate is invoked once per task to perform a final action on each task's local state."},{"content":"This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","pos":[582,708]}]},{"pos":[1124,1476],"content":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,352],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,207],"source":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[208,352],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]},{"pos":[1483,1615],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, then the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."},{"pos":[1622,1830],"content":"For an example that uses this method, see <bpt id=\"p1\">[</bpt>How to: Write a Parallel.For Loop with Thread-Local Variables<ept id=\"p1\">](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)</ept>.","source":"For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)."}],"pos":[58209,60050],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[60387,60415],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[60481,60507],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[60578,60664],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[60791,60840],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[60916,60991],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[61047,61082],"yaml":true},{"content":"A  structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,81],"content":"A  structure that contains information about which portion of the loop completed.","nodes":[{"content":"A  structure that contains information about which portion of the loop completed.","pos":[0,81]}]}],"pos":[61167,61249],"yaml":true},{"content":"The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."}],"pos":[61417,61600],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[61696,61777],"yaml":true},{"content":"Executes a `for` (`For` in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,189],"content":"Executes a <ph id=\"ph1\">`for`</ph> (<ph id=\"ph2\">`For`</ph> in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","source":"Executes a `for` (`For` in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated."}],"pos":[63656,63846],"yaml":true},{"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \n  \n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.  \n  \n For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).","nodes":[{"pos":[0,400],"content":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each value in the iteration range (<ph id=\"ph2\">`fromInclusive`</ph>, <ph id=\"ph3\">`toExclusive`</ph>).","pos":[0,107],"source":"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`)."},{"content":"It is provided with the following parameters: the iteration count (<ph id=\"ph1\">&lt;xref:System.Int64&gt;</ph>), a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.","pos":[108,400],"source":" It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task."}]},{"pos":[407,1115],"content":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,157],"source":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[158,235],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[236,358]},{"content":"Finally, the last body invocation on each task returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[359,474],"source":" Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per task to perform a final action on each task's local state.","pos":[475,581],"source":" The `localFinally` delegate is invoked once per task to perform a final action on each task's local state."},{"content":"This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","pos":[582,708]}]},{"pos":[1122,1474],"content":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,352],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,207],"source":"The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[208,352],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]},{"pos":[1481,1613],"content":"If <ph id=\"ph1\">`fromInclusive`</ph> is greater than or equal to <ph id=\"ph2\">`toExclusive`</ph>, then the method returns immediately without performing any iterations.","source":"If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations."},{"pos":[1620,1828],"content":"For an example that uses this method, see <bpt id=\"p1\">[</bpt>How to: Write a Parallel.For Loop with Thread-Local Variables<ept id=\"p1\">](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)</ept>.","source":"For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)."}],"pos":[63857,65696],"yaml":true,"extradata":"MT"},{"content":"The start index, inclusive.","nodes":[{"pos":[0,27],"content":"The start index, inclusive.","nodes":[{"content":"The start index, inclusive.","pos":[0,27]}]}],"pos":[66036,66064],"yaml":true},{"content":"The end index, exclusive.","nodes":[{"pos":[0,25],"content":"The end index, exclusive.","nodes":[{"content":"The end index, exclusive.","pos":[0,25]}]}],"pos":[66130,66156],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[66227,66313],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[66440,66489],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[66565,66640],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[66696,66731],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[66816,66897],"yaml":true},{"content":"The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,105],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."}],"pos":[67065,67248],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[67344,67425],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..","nodes":[{"pos":[0,274],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation with thread-local data on an <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..","source":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.."}],"pos":[69577,69852],"yaml":true},{"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"pos":[0,353],"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each element in the <ph id=\"ph2\">`source`</ph> enumerable.","pos":[0,80],"source":"The `body` delegate is invoked once for each element in the `source` enumerable."},{"content":"It is provided with the following parameters: the current element, a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.","pos":[81,353],"source":" It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread."}]},{"pos":[360,1070],"content":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,157],"source":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[158,235],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[236,358]},{"content":"Finally, the last body invocation on each task returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[359,474],"source":" Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per thread to perform a final action on each task’s local state.","pos":[475,583],"source":" The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state."},{"content":"This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","pos":[584,710]}]},{"pos":[1077,1433],"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,356],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,211],"source":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[212,356],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]}],"pos":[69863,71303],"yaml":true,"extradata":"MT"},{"content":"An enumerable data source.","nodes":[{"pos":[0,26],"content":"An enumerable data source.","nodes":[{"content":"An enumerable data source.","pos":[0,26]}]}],"pos":[71760,71787],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[71883,71941],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[72012,72098],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[72220,72269],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[72345,72420],"yaml":true},{"content":"The type of the data in the source.","nodes":[{"pos":[0,35],"content":"The type of the data in the source.","nodes":[{"content":"The type of the data in the source.","pos":[0,35]}]}],"pos":[72477,72513],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[72549,72584],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[72669,72750],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,236],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[243,247],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[254,303],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."}],"pos":[72922,73244],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[73356,73474],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[73580,73777],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[73873,73954],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data and 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,292],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation with thread-local data and 64-bit indexes on an <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data and 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[76163,76456],"yaml":true},{"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"pos":[0,404],"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each element in the <ph id=\"ph2\">`source`</ph> enumerable.","pos":[0,80],"source":"The `body` delegate is invoked once for each element in the `source` enumerable."},{"content":"It is provided with the following parameters: the current element, a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely, the current element's index (<ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph>), and some local state that may be shared amongst iterations that execute on the same thread.","pos":[81,404],"source":" It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread."}]},{"pos":[411,1121],"content":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,157],"source":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[158,235],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[236,358]},{"content":"Finally, the last body invocation on each task returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[359,474],"source":" Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per thread to perform a final action on each task’s local state.","pos":[475,583],"source":" The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state."},{"content":"This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","pos":[584,710]}]},{"pos":[1128,1484],"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,356],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,211],"source":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[212,356],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]}],"pos":[76467,77958],"yaml":true,"extradata":"MT"},{"content":"An enumerable data source.","nodes":[{"pos":[0,26],"content":"An enumerable data source.","nodes":[{"content":"An enumerable data source.","pos":[0,26]}]}],"pos":[78420,78447],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[78543,78601],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[78672,78758],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[78893,78942],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[79018,79093],"yaml":true},{"content":"The type of the data in the source.","nodes":[{"pos":[0,35],"content":"The type of the data in the source.","nodes":[{"content":"The type of the data in the source.","pos":[0,35]}]}],"pos":[79150,79186],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[79222,79257],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[79342,79423],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,236],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[243,247],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[254,303],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."}],"pos":[79595,79917],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[80029,80147],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[80253,80450],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[80546,80627],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation  with thread-local data on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,284],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation  with thread-local data on a <ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.Partitioner\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation  with thread-local data on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[82788,83073],"yaml":true},{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning. Partitioners must support dynamic partitions.  For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"pos":[0,722],"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning. Partitioners must support dynamic partitions.  For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme.","pos":[0,99]},{"content":"For example, small loop bodies might benefit from partitioning the range.","pos":[100,173]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> method expects custom partitioners to support dynamic partitioning.","pos":[174,295],"source":" The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning."},{"content":"This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning.","pos":[296,409]},{"content":"Partitioners must support dynamic partitions.","pos":[410,455]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[457,722],"source":"  For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."}]},{"pos":[729,1437],"content":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,157],"source":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[158,235],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[236,358]},{"content":"Finally, the last body invocation on each task returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[359,474],"source":" Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per task to perform a final action on each task's local state.","pos":[475,581],"source":" The `localFinally` delegate is invoked once per task to perform a final action on each task's local state."},{"content":"This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","pos":[582,708]}]},{"pos":[1444,1800],"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,356],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,211],"source":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[212,356],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]}],"pos":[83084,84891],"yaml":true,"extradata":"MT"},{"content":"The partitioner that contains the original data source.","nodes":[{"pos":[0,55],"content":"The partitioner that contains the original data source.","nodes":[{"content":"The partitioner that contains the original data source.","pos":[0,55]}]}],"pos":[85347,85403],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[85499,85557],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[85628,85714],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[85836,85885],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[85961,86036],"yaml":true},{"content":"The type of the elements in <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements in <code>source</code>."}],"pos":[86093,86142],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[86178,86213],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[86298,86379],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,236],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[243,247],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[254,303],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."}],"pos":[86551,86873],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions.","nodes":[{"pos":[0,254],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.Partitioner\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph4\">`false`</ph> or the partitioner returns <ph id=\"ph5\">`null`</ph> partitions.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions."}],"pos":[86983,87238],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[87334,87415],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[87527,87645],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[87751,87948],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,320],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[90220,90541],"yaml":true},{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"pos":[0,561],"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme.","pos":[0,99]},{"content":"For example, small loop bodies might benefit from partitioning the range.","pos":[100,173]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> method expects custom partitioners to support dynamic partitioning.","pos":[174,295],"source":" The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[296,561],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."}]},{"pos":[568,1278],"content":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,157],"source":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[158,235],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[236,358]},{"content":"Finally, the last body invocation on each thread returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[359,476],"source":" Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per task to perform a final action on each task’s local state.","pos":[477,583],"source":" The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state."},{"content":"This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","pos":[584,710]}]},{"pos":[1285,1641],"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,356],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,211],"source":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[212,356],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]}],"pos":[90552,92200],"yaml":true,"extradata":"MT"},{"content":"The orderable partitioner that contains the original data source.","nodes":[{"pos":[0,65],"content":"The orderable partitioner that contains the original data source.","nodes":[{"content":"The orderable partitioner that contains the original data source.","pos":[0,65]}]}],"pos":[92679,92745],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[92841,92899],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[92970,93056],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[93191,93240],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[93316,93391],"yaml":true},{"content":"The type of the elements in <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements in <code>source</code>."}],"pos":[93448,93497],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[93533,93568],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[93653,93734],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> or <code>localFinally</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[179,183],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[190,265],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">localFinally</ph><ept id=\"p2\">&lt;/code&gt;</ept> argument is <ph id=\"ph3\">`null`</ph>.","source":"The <code>localInit</code> or <code>localFinally</code> argument is `null`."}],"pos":[93906,94186],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions.","nodes":[{"pos":[0,254],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.Partitioner\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph4\">`false`</ph> or the partitioner returns <ph id=\"ph5\">`null`</ph> partitions.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions."}],"pos":[94296,94551],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[94647,94728],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[94840,94958],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[95064,95261],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,241],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation with thread-local data on an <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated."}],"pos":[97245,97487],"yaml":true},{"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"pos":[0,353],"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each element in the <ph id=\"ph2\">`source`</ph> enumerable.","pos":[0,80],"source":"The `body` delegate is invoked once for each element in the `source` enumerable."},{"content":"It is provided with the following parameters: the current element, a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.","pos":[81,353],"source":" It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread."}]},{"pos":[360,1070],"content":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,157],"source":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[158,235],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[236,358]},{"content":"Finally, the last body invocation on each task returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[359,474],"source":" Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per thread to perform a final action on each task’s local state.","pos":[475,583],"source":" The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state."},{"content":"This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","pos":[584,710]}]},{"pos":[1077,1433],"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,356],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,211],"source":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[212,356],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]}],"pos":[97498,98938],"yaml":true,"extradata":"MT"},{"content":"An enumerable data source.","nodes":[{"pos":[0,26],"content":"An enumerable data source.","nodes":[{"content":"An enumerable data source.","pos":[0,26]}]}],"pos":[99799,99826],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[99897,99983],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[100105,100154],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[100230,100305],"yaml":true},{"content":"The type of the data in the source.","nodes":[{"pos":[0,35],"content":"The type of the data in the source.","nodes":[{"content":"The type of the data in the source.","pos":[0,35]}]}],"pos":[100362,100398],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[100434,100469],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[100554,100635],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[109,113],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[120,166],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[173,177],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[184,233],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."}],"pos":[100807,101055],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[101151,101232],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,240],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation with thread-local data on an <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated."}],"pos":[103273,103514],"yaml":true},{"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"pos":[0,404],"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each element in the <ph id=\"ph2\">`source`</ph> enumerable.","pos":[0,80],"source":"The `body` delegate is invoked once for each element in the `source` enumerable."},{"content":"It is provided with the following parameters: the current element, a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely, the current element's index (<ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph>), and some local state that may be shared amongst iterations that execute on the same thread.","pos":[81,404],"source":" It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread."}]},{"pos":[411,1119],"content":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,157],"source":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[158,235],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[236,358]},{"content":"Finally, the last body invocation on each task returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[359,474],"source":" Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per task to perform a final action on each task’s local state.","pos":[475,581],"source":" The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state."},{"content":"This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","pos":[582,708]}]},{"pos":[1126,1482],"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,356],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,211],"source":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[212,356],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]}],"pos":[103525,105014],"yaml":true,"extradata":"MT"},{"content":"An enumerable data source.","nodes":[{"pos":[0,26],"content":"An enumerable data source.","nodes":[{"content":"An enumerable data source.","pos":[0,26]}]}],"pos":[105420,105447],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[105518,105604],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[105739,105788],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[105864,105939],"yaml":true},{"content":"The type of the data in the source.","nodes":[{"pos":[0,35],"content":"The type of the data in the source.","nodes":[{"content":"The type of the data in the source.","pos":[0,35]}]}],"pos":[105996,106032],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[106068,106103],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[106188,106269],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[109,113],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[120,166],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[173,177],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[184,233],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."}],"pos":[106441,106689],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[106785,106866],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,250],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation with thread-local data on a <ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.Partitioner\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated."}],"pos":[108859,109110],"yaml":true},{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  \n  \n The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"pos":[0,561],"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme.","pos":[0,99]},{"content":"For example, small loop bodies might benefit from partitioning the range.","pos":[100,173]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> method expects custom partitioners to support dynamic partitioning.","pos":[174,295],"source":" The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[296,561],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."}]},{"pos":[568,1278],"content":"The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,159],"source":"The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[160,237],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[238,360]},{"content":"Finally, the last body invocation on each task returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[361,476],"source":" Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per task to perform a final action on each task's local state.","pos":[477,583],"source":" The `localFinally` delegate is invoked once per task to perform a final action on each task's local state."},{"content":"This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","pos":[584,710]}]},{"pos":[1285,1641],"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,356],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,211],"source":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[212,356],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]}],"pos":[109121,110769],"yaml":true,"extradata":"MT"},{"content":"The partitioner that contains the original data source.","nodes":[{"pos":[0,55],"content":"The partitioner that contains the original data source.","nodes":[{"content":"The partitioner that contains the original data source.","pos":[0,55]}]}],"pos":[111169,111225],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[111296,111382],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[111504,111553],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[111629,111704],"yaml":true},{"content":"The type of the elements in <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements in <code>source</code>."}],"pos":[111761,111810],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[111846,111881],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[111966,112047],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[109,113],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[120,166],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[173,177],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[184,233],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."}],"pos":[112219,112467],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions.","nodes":[{"pos":[0,254],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.Partitioner\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph4\">`false`</ph> or the partitioner returns <ph id=\"ph5\">`null`</ph> partitions.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions."}],"pos":[112577,112832],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[112928,113009],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,294],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation with thread-local data on a <ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[115113,115408],"yaml":true},{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  \n  \n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \n  \n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"pos":[0,561],"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme.","pos":[0,99]},{"content":"For example, small loop bodies might benefit from partitioning the range.","pos":[100,173]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A&gt;</ph> method expects custom partitioners to support dynamic partitioning.","pos":[174,295],"source":" The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[296,561],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."}]},{"pos":[568,1276],"content":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","nodes":[{"content":"The <ph id=\"ph1\">`localInit`</ph> delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.","pos":[0,157],"source":"The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks."},{"content":"These initial states are passed to the first <ph id=\"ph1\">`body`</ph> invocations on each task.","pos":[158,235],"source":" These initial states are passed to the first `body` invocations on each task."},{"content":"Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.","pos":[236,358]},{"content":"Finally, the last body invocation on each task returns a state value that is passed to the <ph id=\"ph1\">`localFinally`</ph> delegate.","pos":[359,474],"source":" Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate."},{"content":"The <ph id=\"ph1\">`localFinally`</ph> delegate is invoked once per task to perform a final action on each task's local state.","pos":[475,581],"source":" The `localFinally` delegate is invoked once per task to perform a final action on each task's local state."},{"content":"This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.","pos":[582,708]}]},{"pos":[1283,1639],"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","nodes":[{"content":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.","pos":[0,356],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.","pos":[0,211],"source":"The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks."},{"content":"This gives the underlying <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskScheduler&gt;</ph> object the chance to add, change, or remove threads that service the loop.","pos":[212,356],"source":" This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop."}]}]}],"pos":[115419,117065],"yaml":true,"extradata":"MT"},{"content":"The orderable partitioner that contains the original data source.","nodes":[{"pos":[0,65],"content":"The orderable partitioner that contains the original data source.","nodes":[{"content":"The orderable partitioner that contains the original data source.","pos":[0,65]}]}],"pos":[117488,117554],"yaml":true},{"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"pos":[0,85],"content":"The function delegate that returns the initial state of the local data for each task.","nodes":[{"content":"The function delegate that returns the initial state of the local data for each task.","pos":[0,85]}]}],"pos":[117625,117711],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[117846,117895],"yaml":true},{"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"pos":[0,74],"content":"The delegate that performs a final action on the local state of each task.","nodes":[{"content":"The delegate that performs a final action on the local state of each task.","pos":[0,74]}]}],"pos":[117971,118046],"yaml":true},{"content":"The type of the elements in <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements in <code>source</code>."}],"pos":[118103,118152],"yaml":true},{"content":"The type of the thread-local data.","nodes":[{"pos":[0,34],"content":"The type of the thread-local data.","nodes":[{"content":"The type of the thread-local data.","pos":[0,34]}]}],"pos":[118188,118223],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[118308,118389],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localInit</code> argument is `null`.  \n  \n -or-  \n  \n The <code>localFinally</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."},{"pos":[109,113],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[120,166],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localInit</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localInit</code> argument is `null`."},{"pos":[173,177],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[184,233],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">localFinally</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>localFinally</code> argument is `null`."}],"pos":[118561,118809],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions.","nodes":[{"pos":[0,254],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.Partitioner\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph4\">`false`</ph> or the partitioner returns <ph id=\"ph5\">`null`</ph> partitions.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions."}],"pos":[118919,119174],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[119270,119351],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel and loop options can be configured.","nodes":[{"pos":[0,193],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation on an <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel and loop options can be configured.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel and loop options can be configured."}],"pos":[121053,121247],"yaml":true},{"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the current element as a parameter.","nodes":[{"pos":[0,136],"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the current element as a parameter.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each element in the <ph id=\"ph2\">`source`</ph> enumerable.","pos":[0,80],"source":"The `body` delegate is invoked once for each element in the `source` enumerable."},{"content":"It is provided with the current element as a parameter.","pos":[81,136]}]}],"pos":[121258,121395],"yaml":true,"extradata":"MT"},{"content":"An enumerable data source.","nodes":[{"pos":[0,26],"content":"An enumerable data source.","nodes":[{"content":"An enumerable data source.","pos":[0,26]}]}],"pos":[121739,121766],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[121862,121920],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[121989,122038],"yaml":true},{"content":"The type of the data in the source.","nodes":[{"pos":[0,35],"content":"The type of the data in the source.","nodes":[{"content":"The type of the data in the source.","pos":[0,35]}]}],"pos":[122095,122131],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[122216,122297],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled"}],"pos":[122479,122596],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[122698,122881],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[122977,123058],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[123164,123361],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,250],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation on an <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[125240,125491],"yaml":true},{"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.","nodes":[{"pos":[0,265],"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each element in the <ph id=\"ph2\">`source`</ph> enumerable.","pos":[0,80],"source":"The `body` delegate is invoked once for each element in the `source` enumerable."},{"content":"It is provided with the following parameters: the current element, and a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely.","pos":[81,265],"source":" It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely."}]}],"pos":[125502,125770],"yaml":true,"extradata":"MT"},{"content":"An enumerable data source.","nodes":[{"pos":[0,26],"content":"An enumerable data source.","nodes":[{"content":"An enumerable data source.","pos":[0,26]}]}],"pos":[126155,126182],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[126278,126336],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[126446,126495],"yaml":true},{"content":"The type of the data in the source.","nodes":[{"pos":[0,35],"content":"The type of the data in the source.","nodes":[{"content":"The type of the data in the source.","pos":[0,35]}]}],"pos":[126552,126588],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[126673,126754],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled"}],"pos":[126936,127053],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[127155,127338],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[127434,127515],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[127621,127818],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,218],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation on an <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated."}],"pos":[129529,129748],"yaml":true},{"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.","nodes":[{"pos":[0,265],"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each element in the <ph id=\"ph2\">`source`</ph> enumerable.","pos":[0,80],"source":"The `body` delegate is invoked once for each element in the `source` enumerable."},{"content":"It is provided with the following parameters: the current element, and a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely.","pos":[81,265],"source":" It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely."}]}],"pos":[129759,130027],"yaml":true,"extradata":"MT"},{"content":"An enumerable data source.","nodes":[{"pos":[0,26],"content":"An enumerable data source.","nodes":[{"content":"An enumerable data source.","pos":[0,26]}]}],"pos":[130356,130383],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[130493,130542],"yaml":true},{"content":"The type of the data in the source.","nodes":[{"pos":[0,35],"content":"The type of the data in the source.","nodes":[{"content":"The type of the data in the source.","pos":[0,35]}]}],"pos":[130599,130635],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[130720,130801],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[130973,131082],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[131178,131259],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel and loop options can be configured.","nodes":[{"pos":[0,203],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation on a <ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.Partitioner\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel and loop options can be configured.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel and loop options can be configured."}],"pos":[132970,133174],"yaml":true},{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"pos":[0,586],"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme.","pos":[0,99]},{"content":"For example, small loop bodies might benefit from partitioning the range.","pos":[100,173]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method expects custom partitioners to support dynamic partitioning.","pos":[174,320],"source":" The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[321,586],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."}]}],"pos":[133185,133774],"yaml":true,"extradata":"MT"},{"content":"The partitioner that contains the original data source.","nodes":[{"pos":[0,55],"content":"The partitioner that contains the original data source.","nodes":[{"content":"The partitioner that contains the original data source.","pos":[0,55]}]}],"pos":[134117,134173],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[134269,134327],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[134396,134445],"yaml":true},{"content":"The type of the elements in <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements in <code>source</code>."}],"pos":[134502,134551],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[134636,134717],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[134899,135017],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[135123,135320],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[135422,135605],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> partitioner returns `false`.  \n  \n -or-  \n  \n The exception that is thrown when any methods in the <code>source</code> partitioner return `null`.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> partitioner returns <ph id=\"ph3\">`false`</ph>.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> partitioner returns `false`."},{"pos":[166,170],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[177,276],"content":"The exception that is thrown when any methods in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> partitioner return <ph id=\"ph2\">`null`</ph>.","source":"The exception that is thrown when any methods in the <code>source</code> partitioner return `null`."}],"pos":[135715,136000],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,260],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation on a <ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.Partitioner\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[137888,138149],"yaml":true},{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"pos":[0,586],"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme.","pos":[0,99]},{"content":"For example, small loop bodies might benefit from partitioning the range.","pos":[100,173]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method expects custom partitioners to support dynamic partitioning.","pos":[174,320],"source":" The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[321,586],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."}]}],"pos":[138160,138749],"yaml":true,"extradata":"MT"},{"content":"The partitioner that contains the original data source.","nodes":[{"pos":[0,55],"content":"The partitioner that contains the original data source.","nodes":[{"content":"The partitioner that contains the original data source.","pos":[0,55]}]}],"pos":[139133,139189],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[139285,139343],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[139453,139502],"yaml":true},{"content":"The type of the elements in <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements in <code>source</code>."}],"pos":[139559,139608],"yaml":true},{"content":"A  structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,81],"content":"A  structure that contains information about which portion of the loop completed.","nodes":[{"content":"A  structure that contains information about which portion of the loop completed.","pos":[0,81]}]}],"pos":[139693,139775],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.","nodes":[{"pos":[0,117],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled."}],"pos":[139957,140075],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[140181,140378],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[140480,140663],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> partitioner returns `false`.  \n  \n -or-  \n  \n The exception that is thrown when any methods in the <code>source</code> partitioner return `null`.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> partitioner returns <ph id=\"ph3\">`false`</ph>.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> partitioner returns `false`."},{"pos":[166,170],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[177,276],"content":"The exception that is thrown when any methods in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> partitioner return <ph id=\"ph2\">`null`</ph>.","source":"The exception that is thrown when any methods in the <code>source</code> partitioner return `null`."}],"pos":[140773,141058],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,271],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation on a <ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[143057,143329],"yaml":true},{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName>method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"pos":[0,585],"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName>method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme.","pos":[0,99]},{"content":"For example, small loop bodies might benefit from partitioning the range.","pos":[100,173]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph>method expects custom partitioners to support dynamic partitioning.","pos":[174,319],"source":" The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName>method expects custom partitioners to support dynamic partitioning."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[320,585],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."}]}],"pos":[143340,143928],"yaml":true,"extradata":"MT"},{"content":"The orderable partitioner that contains the original data source.","nodes":[{"pos":[0,65],"content":"The orderable partitioner that contains the original data source.","nodes":[{"content":"The orderable partitioner that contains the original data source.","pos":[0,65]}]}],"pos":[144335,144401],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[144497,144555],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[144678,144727],"yaml":true},{"content":"The type of the elements in <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements in <code>source</code>."}],"pos":[144784,144833],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[144918,144999],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled"}],"pos":[145181,145298],"yaml":true},{"content":"The <code>source</code> argument is  `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is  <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is  `null`."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."},{"pos":[121,125],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[132,173],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[145400,145584],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[145690,145887],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> orderable partitioner returns `false`.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\"></xref> property in the <code>source</code> orderable partitioner returns `false`.  \n  \n -or-  \n  \n The exception that is thrown when any methods in the <code>source</code> orderable partitioner return `null`.","nodes":[{"pos":[0,169],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> orderable partitioner returns <ph id=\"ph3\">`false`</ph>.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> orderable partitioner returns `false`."},{"pos":[176,180],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[187,354],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> orderable partitioner returns <ph id=\"ph3\">`false`</ph>.","source":"The <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\"></xref> property in the <code>source</code> orderable partitioner returns `false`."},{"pos":[361,365],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[372,481],"content":"The exception that is thrown when any methods in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> orderable partitioner return <ph id=\"ph2\">`null`</ph>.","source":"The exception that is thrown when any methods in the <code>source</code> orderable partitioner return `null`."}],"pos":[145997,146493],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel.","nodes":[{"pos":[0,158],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation on an <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel."}],"pos":[148027,148186],"yaml":true},{"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the current element as a parameter.","nodes":[{"pos":[0,136],"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the current element as a parameter.","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each element in the <ph id=\"ph2\">`source`</ph> enumerable.","pos":[0,80],"source":"The `body` delegate is invoked once for each element in the `source` enumerable."},{"content":"It is provided with the current element as a parameter.","pos":[81,136]}]}],"pos":[148197,148334],"yaml":true,"extradata":"MT"},{"content":"An enumerable data source.","nodes":[{"pos":[0,26],"content":"An enumerable data source.","nodes":[{"content":"An enumerable data source.","pos":[0,26]}]}],"pos":[149674,149701],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[149770,149819],"yaml":true},{"content":"The type of the data in the source.","nodes":[{"pos":[0,35],"content":"The type of the data in the source.","nodes":[{"content":"The type of the data in the source.","pos":[0,35]}]}],"pos":[149876,149912],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[149997,150078],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[150250,150359],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[150455,150536],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,238],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation with 64-bit indexes on an <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated."}],"pos":[152304,152543],"yaml":true},{"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).","nodes":[{"pos":[0,316],"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each element in the <ph id=\"ph2\">`source`</ph> enumerable.","pos":[0,80],"source":"The `body` delegate is invoked once for each element in the `source` enumerable."},{"content":"It is provided with the following parameters: the current element, a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely, and the current element's index (<ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph>).","pos":[81,316],"source":" It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>)."}]}],"pos":[152554,152873],"yaml":true,"extradata":"MT"},{"content":"An enumerable data source.","nodes":[{"pos":[0,26],"content":"An enumerable data source.","nodes":[{"content":"An enumerable data source.","pos":[0,26]}]}],"pos":[153207,153234],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[153357,153406],"yaml":true},{"content":"The type of the data in the source.","nodes":[{"pos":[0,35],"content":"The type of the data in the source.","nodes":[{"content":"The type of the data in the source.","pos":[0,35]}]}],"pos":[153463,153499],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[153584,153665],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[153837,153946],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[154042,154123],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel.","nodes":[{"pos":[0,168],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation on a <ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.Partitioner\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel."}],"pos":[155666,155835],"yaml":true},{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"pos":[0,586],"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme.","pos":[0,99]},{"content":"For example, small loop bodies might benefit from partitioning the range.","pos":[100,173]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method expects custom partitioners to support dynamic partitioning.","pos":[174,320],"source":" The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[321,586],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."}]}],"pos":[155846,156435],"yaml":true,"extradata":"MT"},{"content":"The partitioner that contains the original data source.","nodes":[{"pos":[0,55],"content":"The partitioner that contains the original data source.","nodes":[{"content":"The partitioner that contains the original data source.","pos":[0,55]}]}],"pos":[157287,157343],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[157412,157461],"yaml":true},{"content":"The type of the elements in <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements in <code>source</code>."}],"pos":[157518,157567],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[157652,157733],"yaml":true},{"content":"The <code>source</code> argument is  `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is  <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is  `null`."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,103],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[157905,158015],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> partitioner returns `false`.  \n  \n -or-  \n  \n The exception that is thrown when any methods in the <code>source</code> partitioner return `null`.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\"></xref> method in the <code>source</code> partitioner does not return the correct number of partitions.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> partitioner returns <ph id=\"ph3\">`false`</ph>.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> partitioner returns `false`."},{"pos":[166,170],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[177,276],"content":"The exception that is thrown when any methods in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> partitioner return <ph id=\"ph2\">`null`</ph>.","source":"The exception that is thrown when any methods in the <code>source</code> partitioner return `null`."},{"pos":[283,287],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[294,486],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\"&gt;&lt;/xref&gt;</ph> method in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> partitioner does not return the correct number of partitions.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\"></xref> method in the <code>source</code> partitioner does not return the correct number of partitions."}],"pos":[158125,158626],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,228],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation on a <ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.Partitioner\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated."}],"pos":[160346,160575],"yaml":true},{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"pos":[0,586],"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme.","pos":[0,99]},{"content":"For example, small loop bodies might benefit from partitioning the range.","pos":[100,173]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method expects custom partitioners to support dynamic partitioning.","pos":[174,320],"source":" The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[321,586],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."}]}],"pos":[160586,161175],"yaml":true,"extradata":"MT"},{"content":"The partitioner that contains the original data source.","nodes":[{"pos":[0,55],"content":"The partitioner that contains the original data source.","nodes":[{"content":"The partitioner that contains the original data source.","pos":[0,55]}]}],"pos":[161503,161559],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[161669,161718],"yaml":true},{"content":"The type of the elements in <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements in <code>source</code>."}],"pos":[161775,161824],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[161909,161990],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[162162,162271],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> partitioner returns `false`.  \n  \n -or-  \n  \n A method in the <code>source</code> partitioner returns `null`.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\"></xref> method in the <code>source</code> partitioner does not return the correct number of partitions.","nodes":[{"pos":[0,159],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> partitioner returns <ph id=\"ph3\">`false`</ph>.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> partitioner returns `false`."},{"pos":[166,170],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[177,240],"content":"A method in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> partitioner returns <ph id=\"ph2\">`null`</ph>.","source":"A method in the <code>source</code> partitioner returns `null`."},{"pos":[247,251],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[258,450],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\"&gt;&lt;/xref&gt;</ph> method in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> partitioner does not return the correct number of partitions.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\"></xref> method in the <code>source</code> partitioner does not return the correct number of partitions."}],"pos":[162381,162846],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,238],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation on a <ph id=\"ph3\">&lt;xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated."}],"pos":[164677,164916],"yaml":true},{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"pos":[0,586],"content":"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).","nodes":[{"content":"This overload is provided for scenarios where you want to override the default partitioning scheme.","pos":[0,99]},{"content":"For example, small loop bodies might benefit from partitioning the range.","pos":[100,173]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName&gt;</ph> method expects custom partitioners to support dynamic partitioning.","pos":[174,320],"source":" The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Custom Partitioners for PLINQ and TPL<ept id=\"p1\">](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md)</ept> and <bpt id=\"p2\">[</bpt>How to: Implement Dynamic Partitions<ept id=\"p2\">](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)</ept>.","pos":[321,586],"source":" For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)."}]}],"pos":[164927,165516],"yaml":true,"extradata":"MT"},{"content":"The orderable partitioner that contains the original data source.","nodes":[{"pos":[0,65],"content":"The orderable partitioner that contains the original data source.","nodes":[{"content":"The orderable partitioner that contains the original data source.","pos":[0,65]}]}],"pos":[165867,165933],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[166056,166105],"yaml":true},{"content":"The type of the elements in <code>source</code>.","nodes":[{"pos":[0,48],"content":"The type of the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type of the elements in <code>source</code>."}],"pos":[166162,166211],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[166296,166377],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[166549,166658],"yaml":true},{"content":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> orderable partitioner returns `false`.  \n  \n -or-  \n  \n The <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\"></xref> property in the source orderable partitioner returns `false`.  \n  \n -or-  \n  \n Any methods in the source orderable partitioner return `null`.","nodes":[{"pos":[0,169],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"&gt;&lt;/xref&gt;</ph> property in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> orderable partitioner returns <ph id=\"ph3\">`false`</ph>.","source":"The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code> orderable partitioner returns `false`."},{"pos":[176,180],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[187,341],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\"&gt;&lt;/xref&gt;</ph> property in the source orderable partitioner returns <ph id=\"ph2\">`false`</ph>.","source":"The <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\"></xref> property in the source orderable partitioner returns `false`."},{"pos":[348,352],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[359,421],"content":"Any methods in the source orderable partitioner return <ph id=\"ph1\">`null`</ph>.","source":"Any methods in the source orderable partitioner return `null`."}],"pos":[166768,167204],"yaml":true},{"content":"Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","nodes":[{"pos":[0,270],"content":"Executes a <ph id=\"ph1\">`foreach`</ph> (<ph id=\"ph2\">`For Each`</ph> in Visual Basic) operation with 64-bit indexes on an <ph id=\"ph3\">&lt;xref href=\"System.Collections.IEnumerable\"&gt;&lt;/xref&gt;</ph> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.","source":"Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated."}],"pos":[169140,169411],"yaml":true},{"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).","nodes":[{"pos":[0,316],"content":"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).","nodes":[{"content":"The <ph id=\"ph1\">`body`</ph> delegate is invoked once for each element in the <ph id=\"ph2\">`source`</ph> enumerable.","pos":[0,80],"source":"The `body` delegate is invoked once for each element in the `source` enumerable."},{"content":"It is provided with the following parameters: the current element, a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState&gt;</ph> instance that may be used to break out of the loop prematurely, and the current element's index (<ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph>).","pos":[81,316],"source":" It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>)."}]}],"pos":[169422,169741],"yaml":true,"extradata":"MT"},{"content":"An enumerable data source.","nodes":[{"pos":[0,26],"content":"An enumerable data source.","nodes":[{"content":"An enumerable data source.","pos":[0,26]}]}],"pos":[170131,170158],"yaml":true},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[170254,170312],"yaml":true},{"content":"The delegate that is invoked once per iteration.","nodes":[{"pos":[0,48],"content":"The delegate that is invoked once per iteration.","nodes":[{"content":"The delegate that is invoked once per iteration.","pos":[0,48]}]}],"pos":[170435,170484],"yaml":true},{"content":"The type of the data in the source.","nodes":[{"pos":[0,35],"content":"The type of the data in the source.","nodes":[{"content":"The type of the data in the source.","pos":[0,35]}]}],"pos":[170541,170577],"yaml":true},{"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"pos":[0,80],"content":"A structure that contains information about which portion of the loop completed.","nodes":[{"content":"A structure that contains information about which portion of the loop completed.","pos":[0,80]}]}],"pos":[170662,170743],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is canceled","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled"}],"pos":[170925,171042],"yaml":true},{"content":"The <code>source</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>body</code> argument is `null`.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>source</code> argument is `null`."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,172],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">body</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>body</code> argument is `null`."}],"pos":[171144,171327],"yaml":true},{"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"pos":[0,80],"content":"The exception that contains all the individual exceptions thrown on all threads.","nodes":[{"content":"The exception that contains all the individual exceptions thrown on all threads.","pos":[0,80]}]}],"pos":[171423,171504],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[171610,171807],"yaml":true},{"content":"Executes each of the provided actions, possibly in parallel.","nodes":[{"pos":[0,60],"content":"Executes each of the provided actions, possibly in parallel.","nodes":[{"content":"Executes each of the provided actions, possibly in parallel.","pos":[0,60]}]}],"pos":[173071,173132],"yaml":true},{"content":"This method can be used to execute a set of operations, potentially in parallel.  \n  \n No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.  \n  \n For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).","nodes":[{"pos":[0,80],"content":"This method can be used to execute a set of operations, potentially in parallel.","nodes":[{"content":"This method can be used to execute a set of operations, potentially in parallel.","pos":[0,80]}]},{"pos":[87,357],"content":"No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.","nodes":[{"content":"No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.","pos":[0,270],"nodes":[{"content":"No guarantees are made about the order in which the operations execute or whether they execute in parallel.","pos":[0,107]},{"content":"This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.","pos":[108,270]}]}]},{"pos":[364,550],"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Use Parallel.Invoke to Execute Parallel Operations<ept id=\"p1\">](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)</ept>.","source":"For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)."}],"pos":[173143,173700],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Action\"></xref> to execute.","nodes":[{"pos":[0,58],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Action\"&gt;&lt;/xref&gt;</ph> to execute.","source":"An array of <xref href=\"System.Action\"></xref> to execute."}],"pos":[174353,174412],"yaml":true},{"content":"The <code>actions</code> argument is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">actions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>actions</code> argument is `null`."}],"pos":[174580,174625],"yaml":true},{"content":"The exception that is thrown when any action in the <code>actions</code> array throws an exception.","nodes":[{"pos":[0,99],"content":"The exception that is thrown when any action in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">actions</ph><ept id=\"p1\">&lt;/code&gt;</ept> array throws an exception.","source":"The exception that is thrown when any action in the <code>actions</code> array throws an exception."}],"pos":[174721,174821],"yaml":true},{"content":"The <code>actions</code> array contains a `null` element.","nodes":[{"pos":[0,57],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">actions</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a <ph id=\"ph2\">`null`</ph> element.","source":"The <code>actions</code> array contains a `null` element."}],"pos":[174915,174973],"yaml":true},{"content":"Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.","nodes":[{"pos":[0,107],"content":"Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.","nodes":[{"content":"Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.","pos":[0,107]}]}],"pos":[176405,176513],"yaml":true},{"content":"This method can be used to execute a set of operations, potentially in parallel. The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation. For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).  \n  \n No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.  \n  \n For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).","nodes":[{"pos":[0,352],"content":"This method can be used to execute a set of operations, potentially in parallel. The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation. For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).","nodes":[{"content":"This method can be used to execute a set of operations, potentially in parallel.","pos":[0,80]},{"content":"The cancellation token passed in with the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelOptions&gt;</ph> structure enables the caller to cancel the entire operation.","pos":[81,229],"source":" The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Cancellation in Managed Threads<ept id=\"p1\">](~/docs/standard/threading/cancellation-in-managed-threads.md)</ept>.","pos":[230,352],"source":" For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md)."}]},{"pos":[359,629],"content":"No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.","nodes":[{"content":"No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.","pos":[0,270],"nodes":[{"content":"No guarantees are made about the order in which the operations execute or whether they execute in parallel.","pos":[0,107]},{"content":"This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.","pos":[108,270]}]}]},{"pos":[636,822],"content":"For more information, see <bpt id=\"p1\">[</bpt>How to: Use Parallel.Invoke to Execute Parallel Operations<ept id=\"p1\">](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)</ept>.","source":"For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)."}],"pos":[176524,177353],"yaml":true,"extradata":"MT"},{"content":"An object that configures the behavior of this operation.","nodes":[{"pos":[0,57],"content":"An object that configures the behavior of this operation.","nodes":[{"content":"An object that configures the behavior of this operation.","pos":[0,57]}]}],"pos":[177590,177648],"yaml":true},{"content":"An array of actions to execute.","nodes":[{"pos":[0,31],"content":"An array of actions to execute.","nodes":[{"content":"An array of actions to execute.","pos":[0,31]}]}],"pos":[177713,177745],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> is set.","nodes":[{"pos":[0,103],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> is set.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> is set."}],"pos":[177923,178027],"yaml":true},{"content":"The <code>actions</code> argument is `null`.  \n  \n -or-  \n  \n The <code>parallelOptions</code> argument is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">actions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>actions</code> argument is `null`."},{"pos":[51,55],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[62,114],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>parallelOptions</code> argument is `null`."}],"pos":[178129,178250],"yaml":true},{"content":"The exception that is thrown when any action in the <code>actions</code> array throws an exception.","nodes":[{"pos":[0,99],"content":"The exception that is thrown when any action in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">actions</ph><ept id=\"p1\">&lt;/code&gt;</ept> array throws an exception.","source":"The exception that is thrown when any action in the <code>actions</code> array throws an exception."}],"pos":[178346,178446],"yaml":true},{"content":"The <code>actions</code> array contains a `null` element.","nodes":[{"pos":[0,57],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">actions</ph><ept id=\"p1\">&lt;/code&gt;</ept> array contains a <ph id=\"ph2\">`null`</ph> element.","source":"The <code>actions</code> array contains a `null` element."}],"pos":[178540,178598],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.","nodes":[{"pos":[0,196],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> associated with the <ph id=\"ph2\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">parallelOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed."}],"pos":[178704,178901],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Tasks.Parallel\n  commentId: T:System.Threading.Tasks.Parallel\n  id: Parallel\n  children:\n  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})\n  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})\n  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})\n  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})\n  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  - System.Threading.Tasks.Parallel.Invoke(System.Action[])\n  - System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])\n  langs:\n  - csharp\n  name: Parallel\n  nameWithType: Parallel\n  fullName: System.Threading.Tasks.Parallel\n  type: Class\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Provides support for parallel loops and regions.\n  remarks: The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.\n  example:\n  - \"This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.  \\n  \\n [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]\\n [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]\"\n  syntax:\n    content: public static class Parallel\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  id: For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For(Int32, Int32, Action<Int32,ParallelLoopState>)\n  nameWithType: Parallel.For(Int32, Int32, Action<Int32,ParallelLoopState>)\n  fullName: Parallel.For(Int32, Int32, Action<Int32,ParallelLoopState>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with two arguments:  \\n  \\n-   An <xref:System.Int32> value that represents the iteration count.  \\n  \\n-   A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely. The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.  \\n  \\n Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute. However, all iterations before the current one will still have to be executed if they haven't already.  \\n  \\n Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.  \\n  \\n If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.  \\n  \\n If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.\"\n  example:\n  - \"The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method is called. As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=fullName> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]\\n [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  \\n  \\n Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=fullName> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=fullName> method. If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=fullName> property and, if it is greater than the current iteration's index value, returns immediately.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action<int,System.Threading.Tasks.ParallelLoopState> body);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int32\n      description: The end index, exclusive.\n    - id: body\n      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}\n      description: The delegate that is invoked once per iteration.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A  structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>body</code> argument is `null`.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})\n  id: For(System.Int32,System.Int32,System.Action{System.Int32})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For(Int32, Int32, Action<Int32>)\n  nameWithType: Parallel.For(Int32, Int32, Action<Int32>)\n  fullName: Parallel.For(Int32, Int32, Action<Int32>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int32>) as a parameter.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.\"\n  example:\n  - \"The following example uses the <xref:System.Threading.Tasks.Parallel.For%2A> method for 100 invocations of a delegate that generates random byte values and computes their sum.  \\n  \\n [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action<int> body);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int32\n      description: The end index, exclusive.\n    - id: body\n      type: System.Action{System.Int32}\n      description: The delegate that is invoked once per iteration.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>body</code> argument is `null`.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  id: For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For(Int64, Int64, Action<Int64,ParallelLoopState>)\n  nameWithType: Parallel.For(Int64, Int64, Action<Int64,ParallelLoopState>)\n  fullName: Parallel.For(Int64, Int64, Action<Int64,ParallelLoopState>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \\n  \\n Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don’t have to be executed, but all iterations before the current one do.  \\n  \\n Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.  \\n  \\n If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed. However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.  \\n  \\n If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action<long,System.Threading.Tasks.ParallelLoopState> body);\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int64\n      description: The end index, exclusive.\n    - id: body\n      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}\n      description: The delegate that is invoked once per iteration.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A <xref href=\"System.Threading.Tasks.ParallelLoopResult\"></xref> structure that contains information on what portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>body</code> argument is `null`.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})\n  id: For(System.Int64,System.Int64,System.Action{System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For(Int64, Int64, Action<Int64>)\n  nameWithType: Parallel.For(Int64, Int64, Action<Int64>)\n  fullName: Parallel.For(Int64, Int64, Action<Int64>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int64>) as a parameter.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action<long> body);\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int64\n      description: The end index, exclusive.\n    - id: body\n      type: System.Action{System.Int64}\n      description: The delegate that is invoked once per iteration.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>body</code> argument is `null`.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For(Int32, Int32, ParallelOptions, Action<Int32,ParallelLoopState>)\n  nameWithType: Parallel.For(Int32, Int32, ParallelOptions, Action<Int32,ParallelLoopState>)\n  fullName: Parallel.For(Int32, Int32, ParallelOptions, Action<Int32,ParallelLoopState>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<int,System.Threading.Tasks.ParallelLoopState> body);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int32\n      description: The end index, exclusive.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: body\n      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}\n      description: The delegate that is invoked once per iteration.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})\n  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For(Int32, Int32, ParallelOptions, Action<Int32>)\n  nameWithType: Parallel.For(Int32, Int32, ParallelOptions, Action<Int32>)\n  fullName: Parallel.For(Int32, Int32, ParallelOptions, Action<Int32>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int32>) as a parameter.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.\"\n  example:\n  - \"The following example shows how to cancel a parallel loop:  \\n  \\n [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]\\n [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<int> body);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int32\n      description: The end index, exclusive.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: body\n      type: System.Action{System.Int32}\n      description: The delegate that is invoked once per iteration.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A  structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For(Int64, Int64, ParallelOptions, Action<Int64,ParallelLoopState>)\n  nameWithType: Parallel.For(Int64, Int64, ParallelOptions, Action<Int64,ParallelLoopState>)\n  fullName: Parallel.For(Int64, Int64, ParallelOptions, Action<Int64,ParallelLoopState>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.\"\n  example:\n  - \"The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method with a <xref:System.Threading.Tasks.ParallelOptions> object:  \\n  \\n [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]\\n [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<long,System.Threading.Tasks.ParallelLoopState> body);\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int64\n      description: The end index, exclusive.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: body\n      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}\n      description: The delegate that is invoked once per iteration.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})\n  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For(Int64, Int64, ParallelOptions, Action<Int64>)\n  nameWithType: Parallel.For(Int64, Int64, ParallelOptions, Action<Int64>)\n  fullName: Parallel.For(Int64, Int64, ParallelOptions, Action<Int64>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.\n  remarks: \"Supports 64-bit indexes. The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the iteration count (<xref:System.Int64>) as a parameter.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.\"\n  example:\n  - \"The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:  \\n  \\n [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]\\n [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action<long> body);\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int64\n      description: The end index, exclusive.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: body\n      type: System.Action{System.Int64}\n      description: The delegate that is invoked once per iteration.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  id: For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \\n  \\n The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads. These initial states are passed to the first `body` invocations on each thread. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int64\n      description: The end index, exclusive.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each thread.\n    - id: body\n      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each thread.\n    typeParameters:\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  id: For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.  \\n  \\n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.\"\n  example:\n  - \"The following example uses thread-local variables to compute the sum of the results of many lengthy operations. This example limits the degree of parallelism to four.  \\n  \\n [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]\\n [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int32\n      description: The end index, exclusive.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  id: For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \\n  \\n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.  \\n  \\n For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (int fromInclusive, int toExclusive, Func<TLocal> localInit, Func<int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int32\n      description: The end index, exclusive.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A  structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  id: For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `for` (`For` in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`). It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.  \\n  \\n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.  \\n  \\n If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.  \\n  \\n For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult For<TLocal> (long fromInclusive, long toExclusive, Func<TLocal> localInit, Func<long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: fromInclusive\n      type: System.Int64\n      description: The start index, inclusive.\n    - id: toExclusive\n      type: System.Int64\n      description: The end index, exclusive.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.For``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..\n  remarks: \"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \\n  \\n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An enumerable data source.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TSource\n      description: The type of the data in the source.\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data and 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.  \\n  \\n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An enumerable data source.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TSource\n      description: The type of the data in the source.\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource,TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation  with thread-local data on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: \"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning. Partitioners must support dynamic partitions.  For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  \\n  \\n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner`1\n      description: The partitioner that contains the original data source.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements in <code>source</code>.\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: \"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  \\n  \\n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: The orderable partitioner that contains the original data source.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements in <code>source</code>.\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> or <code>localFinally</code> argument is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.  \\n  \\n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per thread to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.\"\n  example:\n  - \"The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:  \\n  \\n [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]\\n [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An enumerable data source.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TSource\n      description: The type of the data in the source.\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.  \\n  \\n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task’s local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Generic.IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An enumerable data source.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TSource\n      description: The type of the data in the source.\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource,TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.\n  remarks: \"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  \\n  \\n The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.Partitioner<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner`1\n      description: The partitioner that contains the original data source.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements in <code>source</code>.\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with thread-local data on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: \"This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).  \\n  \\n The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks. These initial states are passed to the first `body` invocations on each task. Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation. Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate. The `localFinally` delegate is invoked once per task to perform a final action on each task's local state. This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.  \\n  \\n The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks. This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource,TLocal> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, Func<TLocal> localInit, Func<TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal> body, Action<TLocal> localFinally);\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: The orderable partitioner that contains the original data source.\n    - id: localInit\n      type: System.Func{TLocal}\n      description: The function delegate that returns the initial state of the local data for each task.\n    - id: body\n      type: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}\n      description: The delegate that is invoked once per iteration.\n    - id: localFinally\n      type: System.Action{TLocal}\n      description: The delegate that performs a final action on the local state of each task.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements in <code>source</code>.\n    - id: TLocal\n      description: The type of the thread-local data.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``2*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localInit</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>localFinally</code> argument is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\"></xref> property in the <code>source</code><xref href=\"System.Collections.Concurrent.Partitioner\"></xref> returns `false` or the partitioner returns `null` partitions.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel and loop options can be configured.\n  remarks: The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the current element as a parameter.\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource> body);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An enumerable data source.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: body\n      type: System.Action{TSource}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the data in the source.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: 'The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.'\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An enumerable data source.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: body\n      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the data in the source.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.\n  remarks: 'The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.'\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An enumerable data source.\n    - id: body\n      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the data in the source.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)\n  fullName: Parallel.ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel and loop options can be configured.\n  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).'\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource> body);\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner`1\n      description: The partitioner that contains the original data source.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: body\n      type: System.Action{TSource}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements in <code>source</code>.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\"></xref> property in the <code>source</code> partitioner returns `false`.  \\n  \\n -or-  \\n  \\n The exception that is thrown when any methods in the <code>source</code> partitioner return `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n  fullName: Parallel.ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).'\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner`1\n      description: The partitioner that contains the original data source.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: body\n      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements in <code>source</code>.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A  structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\"></xref> property in the <code>source</code> partitioner returns `false`.  \\n  \\n -or-  \\n  \\n The exception that is thrown when any methods in the <code>source</code> partitioner return `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n  nameWithType: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n  fullName: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName>method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).'\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: The orderable partitioner that contains the original data source.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: body\n      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements in <code>source</code>.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is  `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\"></xref> property in the <code>source</code> orderable partitioner returns `false`.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\\\"></xref> property in the <code>source</code> orderable partitioner returns `false`.  \\n  \\n -or-  \\n  \\n The exception that is thrown when any methods in the <code>source</code> orderable partitioner return `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel.\n  remarks: The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the current element as a parameter.\n  example:\n  - \"The following example uses the <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> method to count the number of vowels and non-whitespace characters in a text file. In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored. Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously. For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).  \\n  \\n [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, Action<TSource> body);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An enumerable data source.\n    - id: body\n      type: System.Action{TSource}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the data in the source.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState,Int64>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState,Int64>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState,Int64>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An enumerable data source.\n    - id: body\n      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the data in the source.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\n  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource>)\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, Action<TSource>)\n  fullName: Parallel.ForEach<TSource>(Partitioner<TSource>, Action<TSource>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel.\n  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).'\n  example:\n  - \"The following example shows how to implement a range partitioner for use with <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName>:  \\n  \\n [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]\\n [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, Action<TSource> body);\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner`1\n      description: The partitioner that contains the original data source.\n    - id: body\n      type: System.Action{TSource}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements in <code>source</code>.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is  `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\"></xref> property in the <code>source</code> partitioner returns `false`.  \\n  \\n -or-  \\n  \\n The exception that is thrown when any methods in the <code>source</code> partitioner return `null`.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\\\"></xref> method in the <code>source</code> partitioner does not return the correct number of partitions.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource,ParallelLoopState>)\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, Action<TSource,ParallelLoopState>)\n  fullName: Parallel.ForEach<TSource>(Partitioner<TSource>, Action<TSource,ParallelLoopState>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.Partitioner\"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.\n  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).'\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.Partitioner<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState> body);\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.Partitioner`1\n      description: The partitioner that contains the original data source.\n    - id: body\n      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements in <code>source</code>.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\"></xref> property in the <code>source</code> partitioner returns `false`.  \\n  \\n -or-  \\n  \\n A method in the <code>source</code> partitioner returns `null`.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)\\\"></xref> method in the <code>source</code> partitioner does not return the correct number of partitions.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource,ParallelLoopState,Int64>)\n  nameWithType: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource,ParallelLoopState,Int64>)\n  fullName: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource,ParallelLoopState,Int64>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation on a <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.\n  remarks: 'This overload is provided for scenarios where you want to override the default partitioning scheme. For example, small loop bodies might benefit from partitioning the range. The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=fullName> method expects custom partitioners to support dynamic partitioning. For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).'\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Concurrent.OrderablePartitioner<TSource> source, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);\n    parameters:\n    - id: source\n      type: System.Collections.Concurrent.OrderablePartitioner`1\n      description: The orderable partitioner that contains the original data source.\n    - id: body\n      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the elements in <code>source</code>.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\\\"></xref> property in the <code>source</code> orderable partitioner returns `false`.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\\\"></xref> property in the source orderable partitioner returns `false`.  \\n  \\n -or-  \\n  \\n Any methods in the source orderable partitioner return `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes a `foreach` (`For Each` in Visual Basic) operation with 64-bit indexes on an <xref href=\"System.Collections.IEnumerable\"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.\n  remarks: \"The `body` delegate is invoked once for each element in the `source` enumerable. It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).\"\n  syntax:\n    content: public static System.Threading.Tasks.ParallelLoopResult ForEach<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Threading.Tasks.ParallelOptions parallelOptions, Action<TSource,System.Threading.Tasks.ParallelLoopState,long> body);\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{TSource}\n      description: An enumerable data source.\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: body\n      type: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}\n      description: The delegate that is invoked once per iteration.\n    typeParameters:\n    - id: TSource\n      description: The type of the data in the source.\n    return:\n      type: System.Threading.Tasks.ParallelLoopResult\n      description: A structure that contains information about which portion of the loop completed.\n  overload: System.Threading.Tasks.Parallel.ForEach``1*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> argument is canceled\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>source</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>body</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that contains all the individual exceptions thrown on all threads.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])\n  commentId: M:System.Threading.Tasks.Parallel.Invoke(System.Action[])\n  id: Invoke(System.Action[])\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: Invoke(Action[])\n  nameWithType: Parallel.Invoke(Action[])\n  fullName: Parallel.Invoke(Action[])\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes each of the provided actions, possibly in parallel.\n  remarks: \"This method can be used to execute a set of operations, potentially in parallel.  \\n  \\n No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.  \\n  \\n For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).\"\n  example:\n  - \"This example demonstrates how to use the <xref:System.Threading.Tasks.Parallel.Invoke%2A>method with other methods, anonymous delegates, and lambda expressions.  \\n  \\n [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]\\n [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]\"\n  syntax:\n    content: public static void Invoke (Action[] actions);\n    parameters:\n    - id: actions\n      type: System.Action[]\n      description: An array of <xref href=\"System.Action\"></xref> to execute.\n  overload: System.Threading.Tasks.Parallel.Invoke*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>actions</code> argument is `null`.\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that is thrown when any action in the <code>actions</code> array throws an exception.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>actions</code> array contains a `null` element.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])\n  commentId: M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])\n  id: Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])\n  parent: System.Threading.Tasks.Parallel\n  langs:\n  - csharp\n  name: Invoke(ParallelOptions, Action[])\n  nameWithType: Parallel.Invoke(ParallelOptions, Action[])\n  fullName: Parallel.Invoke(ParallelOptions, Action[])\n  type: Method\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.\n  remarks: \"This method can be used to execute a set of operations, potentially in parallel. The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation. For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).  \\n  \\n No guarantees are made about the order in which the operations execute or whether they execute in parallel. This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.  \\n  \\n For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).\"\n  syntax:\n    content: public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, Action[] actions);\n    parameters:\n    - id: parallelOptions\n      type: System.Threading.Tasks.ParallelOptions\n      description: An object that configures the behavior of this operation.\n    - id: actions\n      type: System.Action[]\n      description: An array of actions to execute.\n  overload: System.Threading.Tasks.Parallel.Invoke*\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: The <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> is set.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>actions</code> argument is `null`.  \\n  \\n -or-  \\n  \\n The <code>parallelOptions</code> argument is `null`.\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: The exception that is thrown when any action in the <code>actions</code> array throws an exception.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>actions</code> array contains a `null` element.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> associated with the <xref href=\"System.Threading.CancellationToken\"></xref> in the <code>parallelOptions</code> has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.AggregateException\n  parent: System\n  isExternal: false\n  name: AggregateException\n  nameWithType: AggregateException\n  fullName: System.AggregateException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  nameWithType: OperationCanceledException\n  fullName: System.OperationCanceledException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For(Int32, Int32, Action<Int32,ParallelLoopState>)\n  nameWithType: Parallel.For(Int32, Int32, Action<Int32,ParallelLoopState>)\n  fullName: Parallel.For(Int32, Int32, Action<Int32,ParallelLoopState>)\n- uid: System.Threading.Tasks.ParallelLoopResult\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: ParallelLoopResult\n  nameWithType: ParallelLoopResult\n  fullName: System.Threading.Tasks.ParallelLoopResult\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Action`2\n  name: Action<T1,T2>\n  nameWithType: Action<T1,T2>\n  fullName: System.Action<T1,T2>\n- uid: System.Threading.Tasks.ParallelLoopState\n  name: ParallelLoopState\n  nameWithType: ParallelLoopState\n  fullName: System.Threading.Tasks.ParallelLoopState\n- uid: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}\n  parent: System\n  isExternal: false\n  name: Action<Int32,ParallelLoopState>\n  nameWithType: Action<Int32,ParallelLoopState>\n  fullName: System.Action<System.Int32,System.Threading.Tasks.ParallelLoopState>\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    nameWithType: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For(Int32, Int32, Action<Int32>)\n  nameWithType: Parallel.For(Int32, Int32, Action<Int32>)\n  fullName: Parallel.For(Int32, Int32, Action<Int32>)\n- uid: System.Action`1\n  name: Action<T>\n  nameWithType: Action<T>\n  fullName: System.Action<T>\n- uid: System.Action{System.Int32}\n  parent: System\n  isExternal: false\n  name: Action<Int32>\n  nameWithType: Action<Int32>\n  fullName: System.Action<System.Int32>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For(Int64, Int64, Action<Int64,ParallelLoopState>)\n  nameWithType: Parallel.For(Int64, Int64, Action<Int64,ParallelLoopState>)\n  fullName: Parallel.For(Int64, Int64, Action<Int64,ParallelLoopState>)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}\n  parent: System\n  isExternal: false\n  name: Action<Int64,ParallelLoopState>\n  nameWithType: Action<Int64,ParallelLoopState>\n  fullName: System.Action<System.Int64,System.Threading.Tasks.ParallelLoopState>\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    nameWithType: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For(Int64, Int64, Action<Int64>)\n  nameWithType: Parallel.For(Int64, Int64, Action<Int64>)\n  fullName: Parallel.For(Int64, Int64, Action<Int64>)\n- uid: System.Action{System.Int64}\n  parent: System\n  isExternal: false\n  name: Action<Int64>\n  nameWithType: Action<Int64>\n  fullName: System.Action<System.Int64>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For(Int32, Int32, ParallelOptions, Action<Int32,ParallelLoopState>)\n  nameWithType: Parallel.For(Int32, Int32, ParallelOptions, Action<Int32,ParallelLoopState>)\n  fullName: Parallel.For(Int32, Int32, ParallelOptions, Action<Int32,ParallelLoopState>)\n- uid: System.Threading.Tasks.ParallelOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: ParallelOptions\n  nameWithType: ParallelOptions\n  fullName: System.Threading.Tasks.ParallelOptions\n- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For(Int32, Int32, ParallelOptions, Action<Int32>)\n  nameWithType: Parallel.For(Int32, Int32, ParallelOptions, Action<Int32>)\n  fullName: Parallel.For(Int32, Int32, ParallelOptions, Action<Int32>)\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For(Int64, Int64, ParallelOptions, Action<Int64,ParallelLoopState>)\n  nameWithType: Parallel.For(Int64, Int64, ParallelOptions, Action<Int64,ParallelLoopState>)\n  fullName: Parallel.For(Int64, Int64, ParallelOptions, Action<Int64,ParallelLoopState>)\n- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For(Int64, Int64, ParallelOptions, Action<Int64>)\n  nameWithType: Parallel.For(Int64, Int64, ParallelOptions, Action<Int64>)\n  fullName: Parallel.For(Int64, Int64, ParallelOptions, Action<Int64>)\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Func`1\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: TLocal\n  name: TLocal\n  nameWithType: TLocal\n  fullName: TLocal\n- uid: System.Func{TLocal}\n  parent: System\n  isExternal: false\n  name: Func<TLocal>\n  nameWithType: Func<TLocal>\n  fullName: System.Func<TLocal>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TLocal\n    name: TLocal\n    nameWithType: TLocal\n    fullName: TLocal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func`4\n  name: Func<T1,T2,T3,TResult>\n  nameWithType: Func<T1,T2,T3,TResult>\n  fullName: System.Func<T1,T2,T3,TResult>\n- uid: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n  parent: System\n  isExternal: false\n  name: Func<Int64,ParallelLoopState,TLocal,TLocal>\n  nameWithType: Func<Int64,ParallelLoopState,TLocal,TLocal>\n  fullName: System.Func<System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    nameWithType: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TLocal\n    name: TLocal\n    nameWithType: TLocal\n    fullName: TLocal\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TLocal\n    name: TLocal\n    nameWithType: TLocal\n    fullName: TLocal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Action{TLocal}\n  parent: System\n  isExternal: false\n  name: Action<TLocal>\n  nameWithType: Action<TLocal>\n  fullName: System.Action<TLocal>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TLocal\n    name: TLocal\n    nameWithType: TLocal\n    fullName: TLocal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n  parent: System\n  isExternal: false\n  name: Func<Int32,ParallelLoopState,TLocal,TLocal>\n  nameWithType: Func<Int32,ParallelLoopState,TLocal,TLocal>\n  fullName: System.Func<System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    nameWithType: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TLocal\n    name: TLocal\n    nameWithType: TLocal\n    fullName: TLocal\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TLocal\n    name: TLocal\n    nameWithType: TLocal\n    fullName: TLocal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: TSource\n  name: TSource\n  nameWithType: TSource\n  fullName: TSource\n- uid: System.Collections.Generic.IEnumerable{TSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TSource>\n  nameWithType: IEnumerable<TSource>\n  fullName: System.Collections.Generic.IEnumerable<TSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal}\n  parent: System\n  isExternal: false\n  name: Func<TSource,ParallelLoopState,TLocal,TLocal>\n  nameWithType: Func<TSource,ParallelLoopState,TLocal,TLocal>\n  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal>\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    nameWithType: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TLocal\n    name: TLocal\n    nameWithType: TLocal\n    fullName: TLocal\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TLocal\n    name: TLocal\n    nameWithType: TLocal\n    fullName: TLocal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Func`5\n  name: Func<T1,T2,T3,T4,TResult>\n  nameWithType: Func<T1,T2,T3,T4,TResult>\n  fullName: System.Func<T1,T2,T3,T4,TResult>\n- uid: System.Func{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal}\n  parent: System\n  isExternal: false\n  name: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>\n  nameWithType: Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>\n  fullName: System.Func<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal>\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    nameWithType: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TLocal\n    name: TLocal\n    nameWithType: TLocal\n    fullName: TLocal\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TLocal\n    name: TLocal\n    nameWithType: TLocal\n    fullName: TLocal\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource,TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Collections.Concurrent.Partitioner`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: Partitioner<TSource>\n  nameWithType: Partitioner<TSource>\n  fullName: System.Collections.Concurrent.Partitioner<TSource>\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Collections.Concurrent.OrderablePartitioner`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<TSource>\n  nameWithType: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource,TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  nameWithType: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n  fullName: Parallel.ForEach<TSource,TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource,ParallelLoopState,Int64,TLocal,TLocal>, Action<TLocal>)\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)\n- uid: System.Action{TSource}\n  parent: System\n  isExternal: false\n  name: Action<TSource>\n  nameWithType: Action<TSource>\n  fullName: System.Action<TSource>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState}\n  parent: System\n  isExternal: false\n  name: Action<TSource,ParallelLoopState>\n  nameWithType: Action<TSource,ParallelLoopState>\n  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState>\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    nameWithType: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState>)\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)\n  fullName: Parallel.ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n  fullName: Parallel.ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState>)\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n  nameWithType: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n  fullName: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n- uid: System.Action`3\n  name: Action<T1,T2,T3>\n  nameWithType: Action<T1,T2,T3>\n  fullName: System.Action<T1,T2,T3>\n- uid: System.Action{TSource,System.Threading.Tasks.ParallelLoopState,System.Int64}\n  parent: System\n  isExternal: false\n  name: Action<TSource,ParallelLoopState,Int64>\n  nameWithType: Action<TSource,ParallelLoopState,Int64>\n  fullName: System.Action<TSource,System.Threading.Tasks.ParallelLoopState,System.Int64>\n  spec.csharp:\n  - uid: System.Action`3\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TSource\n    name: TSource\n    nameWithType: TSource\n    fullName: TSource\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Threading.Tasks.ParallelLoopState\n    name: ParallelLoopState\n    nameWithType: ParallelLoopState\n    fullName: System.Threading.Tasks.ParallelLoopState\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState,Int64>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState,Int64>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, Action<TSource,ParallelLoopState,Int64>)\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource>)\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, Action<TSource>)\n  fullName: Parallel.ForEach<TSource>(Partitioner<TSource>, Action<TSource>)\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource,ParallelLoopState>)\n  nameWithType: Parallel.ForEach<TSource>(Partitioner<TSource>, Action<TSource,ParallelLoopState>)\n  fullName: Parallel.ForEach<TSource>(Partitioner<TSource>, Action<TSource,ParallelLoopState>)\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource,ParallelLoopState,Int64>)\n  nameWithType: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource,ParallelLoopState,Int64>)\n  fullName: Parallel.ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource,ParallelLoopState,Int64>)\n- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n  nameWithType: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n  fullName: Parallel.ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource,ParallelLoopState,Int64>)\n- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: Invoke(Action[])\n  nameWithType: Parallel.Invoke(Action[])\n  fullName: Parallel.Invoke(Action[])\n- uid: System.Action\n  name: Action\n  nameWithType: Action\n  fullName: System.Action\n- uid: System.Action[]\n  parent: System\n  isExternal: false\n  name: Action[]\n  nameWithType: Action[]\n  fullName: System.Action[]\n  spec.csharp:\n  - uid: System.Action\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: Invoke(ParallelOptions, Action[])\n  nameWithType: Parallel.Invoke(ParallelOptions, Action[])\n  fullName: Parallel.Invoke(ParallelOptions, Action[])\n- uid: System.Threading.Tasks.Parallel.For*\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For\n  nameWithType: Parallel.For\n  fullName: Parallel.For\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n- uid: System.Threading.Tasks.Parallel.For``1*\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: For<TLocal>\n  nameWithType: Parallel.For<TLocal>\n  fullName: Parallel.For<TLocal>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n- uid: System.Threading.Tasks.Parallel.ForEach``2*\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource,TLocal>\n  nameWithType: Parallel.ForEach<TSource,TLocal>\n  fullName: Parallel.ForEach<TSource,TLocal>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n- uid: System.Threading.Tasks.Parallel.ForEach``1*\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: ForEach<TSource>\n  nameWithType: Parallel.ForEach<TSource>\n  fullName: Parallel.ForEach<TSource>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n- uid: System.Threading.Tasks.Parallel.Invoke*\n  parent: System.Threading.Tasks.Parallel\n  isExternal: false\n  name: Invoke\n  nameWithType: Parallel.Invoke\n  fullName: Parallel.Invoke\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Parallel.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}