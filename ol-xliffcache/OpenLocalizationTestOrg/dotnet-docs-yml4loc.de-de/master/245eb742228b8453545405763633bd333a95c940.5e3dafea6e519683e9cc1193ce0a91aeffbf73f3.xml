{"nodes":[{"content":"The `Conversion` module contains the procedures used to perform various conversion operations.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">`Conversion`</ph> module contains the procedures used to perform various conversion operations.","source":"The `Conversion` module contains the procedures used to perform various conversion operations."}],"pos":[2623,2718],"yaml":true},{"content":"This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.","nodes":[{"pos":[0,199],"content":"This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.","nodes":[{"content":"This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.","pos":[0,199]}]}],"pos":[2729,2929],"yaml":true,"extradata":"MT"},{"content":"Converts an object to the specified type.","nodes":[{"pos":[0,41],"content":"Converts an object to the specified type.","nodes":[{"content":"Converts an object to the specified type.","pos":[0,41]}]}],"pos":[4719,4761],"yaml":true},{"content":"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter. If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.  \n  \n The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.","nodes":[{"pos":[0,235],"content":"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter. If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.","nodes":[{"content":"The <ph id=\"ph1\">`CTypeDynamic`</ph> method converts the object passed as the <ph id=\"ph2\">`Expression`</ph> parameter to the type specified by the <ph id=\"ph3\">`TargetType`</ph> parameter.","pos":[0,135],"source":"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter."},{"content":"If the object is a dynamic object, the <ph id=\"ph1\">`CTypeDynamic`</ph> method applies available dynamic conversions.","pos":[136,235],"source":" If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions."}]},{"pos":[242,874],"content":"The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.","nodes":[{"content":"The <ph id=\"ph1\">`CTypeDynamic`</ph> method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.","pos":[0,127],"source":"The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself."},{"content":"If a dynamic object inherits from <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>, the <ph id=\"ph2\">`CTypeDynamic`</ph> method first attempts to perform the conversion by using a user-defined, static conversion.","pos":[128,309],"source":" If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion."},{"content":"If the user-defined, static conversion fails, the <ph id=\"ph1\">`CTypeDynamic`</ph> method attempts to perform the conversion by using dynamic conversions.","pos":[310,446],"source":" If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions."},{"content":"If a dynamic object implements <ph id=\"ph1\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, the <ph id=\"ph2\">`CTypeDynamic`</ph> method gives precedence to dynamic conversions over user-defined, static conversions.","pos":[447,632],"source":" If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions."}]}],"pos":[4772,5651],"yaml":true,"extradata":"MT"},{"content":"The object to convert.","nodes":[{"pos":[0,22],"content":"The object to convert.","nodes":[{"content":"The object to convert.","pos":[0,22]}]}],"pos":[6693,6716],"yaml":true},{"content":"The type to which to convert the object.","nodes":[{"pos":[0,40],"content":"The type to which to convert the object.","nodes":[{"content":"The type to which to convert the object.","pos":[0,40]}]}],"pos":[6780,6821],"yaml":true},{"content":"An object whose type at run time is the requested target type.","nodes":[{"pos":[0,62],"content":"An object whose type at run time is the requested target type.","nodes":[{"content":"An object whose type at run time is the requested target type.","pos":[0,62]}]}],"pos":[6878,6941],"yaml":true},{"content":"Converts an object to the specified generic type.","nodes":[{"pos":[0,49],"content":"Converts an object to the specified generic type.","nodes":[{"content":"Converts an object to the specified generic type.","pos":[0,49]}]}],"pos":[8020,8070],"yaml":true},{"content":"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter. If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.  \n  \n The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.","nodes":[{"pos":[0,242],"content":"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter. If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.","nodes":[{"content":"The <ph id=\"ph1\">`CTypeDynamic`</ph> method converts the object passed as the <ph id=\"ph2\">`Expression`</ph> parameter to the type specified by the type of the generic parameter.","pos":[0,142],"source":"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter."},{"content":"If the object is a dynamic object, the <ph id=\"ph1\">`CTypeDynamic`</ph> method applies available dynamic conversions.","pos":[143,242],"source":" If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions."}]},{"pos":[249,881],"content":"The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.","nodes":[{"content":"The <ph id=\"ph1\">`CTypeDynamic`</ph> method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.","pos":[0,127],"source":"The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself."},{"content":"If a dynamic object inherits from <ph id=\"ph1\">&lt;xref:System.Dynamic.DynamicObject&gt;</ph>, the <ph id=\"ph2\">`CTypeDynamic`</ph> method first attempts to perform the conversion by using a user-defined, static conversion.","pos":[128,309],"source":" If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion."},{"content":"If the user-defined, static conversion fails, the <ph id=\"ph1\">`CTypeDynamic`</ph> method attempts to perform the conversion by using dynamic conversions.","pos":[310,446],"source":" If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions."},{"content":"If a dynamic object implements <ph id=\"ph1\">&lt;xref:System.Dynamic.IDynamicMetaObjectProvider&gt;</ph>, the <ph id=\"ph2\">`CTypeDynamic`</ph> method gives precedence to dynamic conversions over user-defined, static conversions.","pos":[447,632],"source":" If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions."}]}],"pos":[8081,8967],"yaml":true,"extradata":"MT"},{"content":"The object to convert.","nodes":[{"pos":[0,22],"content":"The object to convert.","nodes":[{"content":"The object to convert.","pos":[0,22]}]}],"pos":[9984,10007],"yaml":true},{"content":"The type to which to convert the object.","nodes":[{"pos":[0,40],"content":"The type to which to convert the object.","nodes":[{"content":"The type to which to convert the object.","pos":[0,40]}]}],"pos":[10067,10108],"yaml":true},{"content":"An object statically typed as the requested generic type.","nodes":[{"pos":[0,57],"content":"An object statically typed as the requested generic type.","nodes":[{"content":"An object statically typed as the requested generic type.","pos":[0,57]}]}],"pos":[10162,10220],"yaml":true},{"content":"Returns the error message that corresponds to a given error number.","nodes":[{"pos":[0,67],"content":"Returns the error message that corresponds to a given error number.","nodes":[{"content":"Returns the error message that corresponds to a given error number.","pos":[0,67]}]}],"pos":[11200,11268],"yaml":true},{"content":"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If no run-time error has occurred, `ErrorToString` returns a zero-length string (\"\").  \n  \n In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.","nodes":[{"pos":[0,321],"content":"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If no run-time error has occurred, `ErrorToString` returns a zero-length string (\"\").","nodes":[{"content":"The <ph id=\"ph1\">`ErrorToString`</ph> function examines the property settings of the <ph id=\"ph2\">`Err`</ph> object to identify the most recent run-time error.","pos":[0,123],"source":"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error."},{"content":"The return value of the <ph id=\"ph1\">`ErrorToString`</ph> function corresponds to the <ph id=\"ph2\">`Description`</ph> property of the <ph id=\"ph3\">`Err`</ph> object.","pos":[124,235],"source":" The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object."},{"content":"If no run-time error has occurred, <ph id=\"ph1\">`ErrorToString`</ph> returns a zero-length string (\"\").","pos":[236,321],"source":" If no run-time error has occurred, `ErrorToString` returns a zero-length string (\"\")."}]},{"pos":[328,425],"content":"In Visual Basic version 6.0 and earlier, this functionality was provided by the <ph id=\"ph1\">`Error`</ph> function.","source":"In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function."}],"pos":[11279,11711],"yaml":true,"extradata":"MT"},{"content":"The error message that corresponds to the most recent run-time error.","nodes":[{"pos":[0,69],"content":"The error message that corresponds to the most recent run-time error.","nodes":[{"content":"The error message that corresponds to the most recent run-time error.","pos":[0,69]}]}],"pos":[12111,12181],"yaml":true},{"content":"<code>ErrorNumber</code> is out of range.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;ErrorNumber&lt;/code&gt;</ph> is out of range.","source":"<code>ErrorNumber</code> is out of range."}],"pos":[12349,12391],"yaml":true},{"content":"Returns the error message that corresponds to a given error number.","nodes":[{"pos":[0,67],"content":"Returns the error message that corresponds to a given error number.","nodes":[{"content":"Returns the error message that corresponds to a given error number.","pos":[0,67]}]}],"pos":[13349,13417],"yaml":true},{"content":"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `\"Application-defined or object-defined error.\"` If `ErrorNumber` is not valid, an error occurs. If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned. If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string (\"\").  \n  \n In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.","nodes":[{"pos":[0,638],"content":"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `\"Application-defined or object-defined error.\"` If `ErrorNumber` is not valid, an error occurs. If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned. If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string (\"\").","nodes":[{"content":"The <ph id=\"ph1\">`ErrorToString`</ph> function examines the property settings of the <ph id=\"ph2\">`Err`</ph> object to identify the most recent run-time error.","pos":[0,123],"source":"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error."},{"content":"The return value of the <ph id=\"ph1\">`ErrorToString`</ph> function corresponds to the <ph id=\"ph2\">`Description`</ph> property of the <ph id=\"ph3\">`Err`</ph> object.","pos":[124,235],"source":" The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object."},{"content":"If <ph id=\"ph1\">`ErrorNumber`</ph> is a valid error number but is not defined, <ph id=\"ph2\">`ErrorToString`</ph> returns the string <ph id=\"ph3\">`\"Application-defined or object-defined error.\"`</ph> If <ph id=\"ph4\">`ErrorNumber`</ph> is not valid, an error occurs.","pos":[236,428],"source":" If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `\"Application-defined or object-defined error.\"` If `ErrorNumber` is not valid, an error occurs."},{"content":"If <ph id=\"ph1\">`ErrorNumber`</ph> is omitted, the message corresponding to the most recent run-time error is returned.","pos":[429,530],"source":" If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned."},{"content":"If no run-time error has occurred or <ph id=\"ph1\">`ErrorNumber`</ph> is 0, <ph id=\"ph2\">`ErrorToString`</ph> returns a zero-length string (\"\").","pos":[531,638],"source":" If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string (\"\")."}]},{"pos":[645,742],"content":"In Visual Basic version 6.0 and earlier, this functionality was provided by the <ph id=\"ph1\">`Error`</ph> function.","source":"In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function."}],"pos":[13428,14179],"yaml":true,"extradata":"MT"},{"content":"Optional. Any valid error number.","nodes":[{"pos":[0,33],"content":"Optional. Any valid error number.","nodes":[{"content":"Optional. Any valid error number.","pos":[0,33],"nodes":[{"content":"Optional.","pos":[0,9]},{"content":"Any valid error number.","pos":[10,33]}]}]}],"pos":[14600,14634],"yaml":true},{"content":"The error message that corresponds to a given error number.","nodes":[{"pos":[0,59],"content":"The error message that corresponds to a given error number.","nodes":[{"content":"The error message that corresponds to a given error number.","pos":[0,59]}]}],"pos":[14691,14751],"yaml":true},{"content":"<code>ErrorNumber</code> is out of range.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;ErrorNumber&lt;/code&gt;</ph> is out of range.","source":"<code>ErrorNumber</code> is out of range."}],"pos":[14919,14961],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[15871,15911],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[15922,16430],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[17969,18104],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[18162,18202],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[18368,18393],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[18487,18517],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[19421,19461],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[19472,19980],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[21516,21651],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[21708,21748],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[21914,21939],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[22033,22063],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[22961,23001],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[23012,23520],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[25053,25188],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[25244,25284],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[25450,25475],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[25569,25599],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[26497,26537],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[26548,27056],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[28585,28720],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[28776,28816],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[28982,29007],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[29101,29131],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[30029,30069],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[30080,30588],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[32119,32254],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[32310,32350],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[32516,32541],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[32635,32665],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[33569,33609],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[33620,34128],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[35664,35799],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[35856,35896],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[36062,36087],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[36181,36211],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[37115,37155],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[37166,37674],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[39208,39343],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[39400,39440],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[39606,39631],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[39725,39755],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[40659,40724],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If `Number` is|Hex returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,129],"content":"If <ph id=\"ph1\">`Number`</ph> is","source":"If `Number` is"},{"pos":[130,141],"content":"Hex returns","nodes":[{"content":"Hex returns","pos":[0,11]}]},{"pos":[154,159],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[160,168],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[173,190],"content":"Any numeric value","nodes":[{"content":"Any numeric value","pos":[0,17]}]},{"pos":[191,227],"content":"Up to sixteen hexadecimal characters","nodes":[{"content":"Up to sixteen hexadecimal characters","pos":[0,36]}]},{"pos":[235,400],"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;H`</ph>.","pos":[0,98],"source":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[99,165],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]}],"pos":[40735,41145],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[41552,41615],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[41672,41737],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[41903,41941],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[42035,42078],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[43102,43167],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If `Number` is|Hex returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,129],"content":"If <ph id=\"ph1\">`Number`</ph> is","source":"If `Number` is"},{"pos":[130,141],"content":"Hex returns","nodes":[{"content":"Hex returns","pos":[0,11]}]},{"pos":[154,159],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[160,168],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[173,190],"content":"Any numeric value","nodes":[{"content":"Any numeric value","pos":[0,17]}]},{"pos":[191,227],"content":"Up to sixteen hexadecimal characters","nodes":[{"content":"Up to sixteen hexadecimal characters","pos":[0,36]}]},{"pos":[235,400],"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;H`</ph>.","pos":[0,98],"source":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[99,165],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]}],"pos":[43178,43588],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[43997,44060],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[44117,44182],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[44348,44386],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[44480,44523],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[45541,45606],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If `Number` is|Hex returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,129],"content":"If <ph id=\"ph1\">`Number`</ph> is","source":"If `Number` is"},{"pos":[130,141],"content":"Hex returns","nodes":[{"content":"Hex returns","pos":[0,11]}]},{"pos":[154,159],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[160,168],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[173,190],"content":"Any numeric value","nodes":[{"content":"Any numeric value","pos":[0,17]}]},{"pos":[191,227],"content":"Up to sixteen hexadecimal characters","nodes":[{"content":"Up to sixteen hexadecimal characters","pos":[0,36]}]},{"pos":[235,400],"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;H`</ph>.","pos":[0,98],"source":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[99,165],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]}],"pos":[45617,46027],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[46434,46497],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[46554,46619],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[46785,46823],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[46917,46960],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[47983,48048],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If `Number` is|Hex returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,129],"content":"If <ph id=\"ph1\">`Number`</ph> is","source":"If `Number` is"},{"pos":[130,141],"content":"Hex returns","nodes":[{"content":"Hex returns","pos":[0,11]}]},{"pos":[154,159],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[160,168],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[173,190],"content":"Any numeric value","nodes":[{"content":"Any numeric value","pos":[0,17]}]},{"pos":[191,227],"content":"Up to sixteen hexadecimal characters","nodes":[{"content":"Up to sixteen hexadecimal characters","pos":[0,36]}]},{"pos":[235,400],"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;H`</ph>.","pos":[0,98],"source":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[99,165],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]}],"pos":[48059,48469],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[48833,48896],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[48953,49018],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[49184,49222],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[49316,49359],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[50263,50328],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If `Number` is|Hex returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,129],"content":"If <ph id=\"ph1\">`Number`</ph> is","source":"If `Number` is"},{"pos":[130,141],"content":"Hex returns","nodes":[{"content":"Hex returns","pos":[0,11]}]},{"pos":[154,159],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[160,168],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[173,190],"content":"Any numeric value","nodes":[{"content":"Any numeric value","pos":[0,17]}]},{"pos":[191,227],"content":"Up to sixteen hexadecimal characters","nodes":[{"content":"Up to sixteen hexadecimal characters","pos":[0,36]}]},{"pos":[235,400],"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;H`</ph>.","pos":[0,98],"source":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[99,165],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]}],"pos":[50339,50749],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[51157,51220],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[51277,51342],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[51508,51546],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[51640,51683],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[52701,52766],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If `Number` is|Hex returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,129],"content":"If <ph id=\"ph1\">`Number`</ph> is","source":"If `Number` is"},{"pos":[130,141],"content":"Hex returns","nodes":[{"content":"Hex returns","pos":[0,11]}]},{"pos":[154,159],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[160,168],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[173,190],"content":"Any numeric value","nodes":[{"content":"Any numeric value","pos":[0,17]}]},{"pos":[191,227],"content":"Up to sixteen hexadecimal characters","nodes":[{"content":"Up to sixteen hexadecimal characters","pos":[0,36]}]},{"pos":[235,400],"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;H`</ph>.","pos":[0,98],"source":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[99,165],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]}],"pos":[52777,53187],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[53547,53610],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[53667,53732],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[53898,53936],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[54030,54073],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[54971,55036],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If `Number` is|Hex returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,129],"content":"If <ph id=\"ph1\">`Number`</ph> is","source":"If `Number` is"},{"pos":[130,141],"content":"Hex returns","nodes":[{"content":"Hex returns","pos":[0,11]}]},{"pos":[154,159],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[160,168],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[173,190],"content":"Any numeric value","nodes":[{"content":"Any numeric value","pos":[0,17]}]},{"pos":[191,227],"content":"Up to sixteen hexadecimal characters","nodes":[{"content":"Up to sixteen hexadecimal characters","pos":[0,36]}]},{"pos":[235,400],"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;H`</ph>.","pos":[0,98],"source":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[99,165],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]}],"pos":[55047,55457],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[55819,55882],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[55939,56004],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[56170,56208],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[56302,56345],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[57237,57302],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If `Number` is|Hex returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,129],"content":"If <ph id=\"ph1\">`Number`</ph> is","source":"If `Number` is"},{"pos":[130,141],"content":"Hex returns","nodes":[{"content":"Hex returns","pos":[0,11]}]},{"pos":[154,159],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[160,168],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[173,190],"content":"Any numeric value","nodes":[{"content":"Any numeric value","pos":[0,17]}]},{"pos":[191,227],"content":"Up to sixteen hexadecimal characters","nodes":[{"content":"Up to sixteen hexadecimal characters","pos":[0,36]}]},{"pos":[235,400],"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;H`</ph>.","pos":[0,98],"source":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[99,165],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]}],"pos":[57313,57723],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[58083,58146],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[58203,58268],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[58434,58472],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[58566,58609],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[59507,59572],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If `Number` is|Hex returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any numeric value|Up to sixteen hexadecimal characters|  \n  \n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,129],"content":"If <ph id=\"ph1\">`Number`</ph> is","source":"If `Number` is"},{"pos":[130,141],"content":"Hex returns","nodes":[{"content":"Hex returns","pos":[0,11]}]},{"pos":[154,159],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[160,168],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[173,190],"content":"Any numeric value","nodes":[{"content":"Any numeric value","pos":[0,17]}]},{"pos":[191,227],"content":"Up to sixteen hexadecimal characters","nodes":[{"content":"Up to sixteen hexadecimal characters","pos":[0,36]}]},{"pos":[235,400],"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.","nodes":[{"content":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;H`</ph>.","pos":[0,98],"source":"You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`."},{"content":"For example, <ph id=\"ph1\">`&amp;H10`</ph> represents decimal 16 in hexadecimal notation.","pos":[99,165],"source":" For example, `&H10` represents decimal 16 in hexadecimal notation."}]}],"pos":[59583,59993],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[60354,60417],"yaml":true},{"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"pos":[0,64],"content":"Returns a string representing the hexadecimal value of a number.","nodes":[{"content":"Returns a string representing the hexadecimal value of a number.","pos":[0,64]}]}],"pos":[60474,60539],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[60705,60743],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[60837,60880],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[61790,61830],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[61841,62349],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[63888,64023],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[64081,64121],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[64287,64312],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[64406,64436],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[65340,65380],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[65391,65899],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[67435,67570],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[67627,67667],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[67833,67858],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[67952,67982],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[68880,68920],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[68931,69439],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[70972,71107],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[71163,71203],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[71369,71394],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[71488,71518],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[72416,72456],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[72467,72975],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[74504,74639],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[74695,74735],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[74901,74926],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[75020,75050],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[75948,75988],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[75999,76507],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[78038,78173],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[78229,78269],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[78435,78460],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[78554,78584],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[79488,79528],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[79539,80047],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[81583,81718],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[81775,81815],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[81981,82006],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[82100,82130],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[83034,83074],"yaml":true},{"content":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \n  \n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \n  \n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`","nodes":[{"pos":[0,113],"content":"Both the <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions remove the fractional part of <ph id=\"ph3\">`Number`</ph> and return the resulting integer value.","source":"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value."},{"pos":[120,429],"content":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.","nodes":[{"content":"The difference between <ph id=\"ph1\">`Int`</ph> and <ph id=\"ph2\">`Fix`</ph> functions is that if <ph id=\"ph3\">`Number`</ph> is negative, <ph id=\"ph4\">`Int`</ph> returns the first negative integer less than or equal to <ph id=\"ph5\">`Number`</ph>, whereas <ph id=\"ph6\">`Fix`</ph> returns the first negative integer greater than or equal to <ph id=\"ph7\">`Number`</ph>.","pos":[0,238],"source":"The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`."},{"content":"For example, <ph id=\"ph1\">`Int`</ph> converts -8.4 to -9, and <ph id=\"ph2\">`Fix`</ph> converts -8.4 to -8.","pos":[239,309],"source":" For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8."}]},{"pos":[436,501],"content":"<ph id=\"ph1\">`Fix(number)`</ph> is equivalent to <ph id=\"ph2\">`Sign(number) * Int(Abs(number)).`</ph>","source":"`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`"}],"pos":[83085,83593],"yaml":true,"extradata":"MT"},{"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"pos":[0,134],"content":"Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"A number of type <ph id=\"ph1\">`Double`</ph> or any valid numeric expression.","pos":[10,68],"source":" A number of type `Double` or any valid numeric expression."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Number</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains <ph id=\"ph2\">`Nothing`</ph>, <ph id=\"ph3\">`Nothing`</ph> is returned.","pos":[69,134],"source":" If <code>Number</code> contains `Nothing`, `Nothing` is returned."}]}],"pos":[85127,85262],"yaml":true},{"content":"Return the integer portion of a number.","nodes":[{"pos":[0,39],"content":"Return the integer portion of a number.","nodes":[{"content":"Return the integer portion of a number.","pos":[0,39]}]}],"pos":[85319,85359],"yaml":true},{"content":"Number is not specified.","nodes":[{"pos":[0,24],"content":"Number is not specified.","nodes":[{"content":"Number is not specified.","pos":[0,24]}]}],"pos":[85525,85550],"yaml":true},{"content":"Number is not a numeric type.","nodes":[{"pos":[0,29],"content":"Number is not a numeric type.","nodes":[{"content":"Number is not a numeric type.","pos":[0,29]}]}],"pos":[85644,85674],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[86578,86637],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If Number is|Oct returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,127],"content":"If Number is","nodes":[{"content":"If Number is","pos":[0,12]}]},{"pos":[128,139],"content":"Oct returns","nodes":[{"content":"Oct returns","pos":[0,11]}]},{"pos":[152,157],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[158,166],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[171,187],"content":"Any other number","nodes":[{"content":"Any other number","pos":[0,16]}]},{"pos":[188,213],"content":"Up to 22 octal characters","nodes":[{"content":"Up to 22 octal characters","pos":[0,25]}]},{"pos":[221,370],"content":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"content":"You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[0,92],"source":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[93,149],"source":" For example, `&O10` is the octal notation for decimal 8."}]}],"pos":[86648,87028],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[87430,87493],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[87550,87609],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[87775,87813],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[87907,87950],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[88974,89033],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If Number is|Oct returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,127],"content":"If Number is","nodes":[{"content":"If Number is","pos":[0,12]}]},{"pos":[128,139],"content":"Oct returns","nodes":[{"content":"Oct returns","pos":[0,11]}]},{"pos":[152,157],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[158,166],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[171,187],"content":"Any other number","nodes":[{"content":"Any other number","pos":[0,16]}]},{"pos":[188,213],"content":"Up to 22 octal characters","nodes":[{"content":"Up to 22 octal characters","pos":[0,25]}]},{"pos":[221,370],"content":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"content":"You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[0,92],"source":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[93,149],"source":" For example, `&O10` is the octal notation for decimal 8."}]}],"pos":[89044,89424],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[89825,89888],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[89945,90004],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[90170,90208],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[90302,90345],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[91369,91428],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If Number is|Oct returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,127],"content":"If Number is","nodes":[{"content":"If Number is","pos":[0,12]}]},{"pos":[128,139],"content":"Oct returns","nodes":[{"content":"Oct returns","pos":[0,11]}]},{"pos":[152,157],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[158,166],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[171,187],"content":"Any other number","nodes":[{"content":"Any other number","pos":[0,16]}]},{"pos":[188,213],"content":"Up to 22 octal characters","nodes":[{"content":"Up to 22 octal characters","pos":[0,25]}]},{"pos":[221,370],"content":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"content":"You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[0,92],"source":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[93,149],"source":" For example, `&O10` is the octal notation for decimal 8."}]}],"pos":[91439,91819],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[92222,92285],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[92342,92401],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[92567,92605],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[92699,92742],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[93760,93819],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If Number is|Oct returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,127],"content":"If Number is","nodes":[{"content":"If Number is","pos":[0,12]}]},{"pos":[128,139],"content":"Oct returns","nodes":[{"content":"Oct returns","pos":[0,11]}]},{"pos":[152,157],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[158,166],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[171,187],"content":"Any other number","nodes":[{"content":"Any other number","pos":[0,16]}]},{"pos":[188,213],"content":"Up to 22 octal characters","nodes":[{"content":"Up to 22 octal characters","pos":[0,25]}]},{"pos":[221,370],"content":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"content":"You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[0,92],"source":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[93,149],"source":" For example, `&O10` is the octal notation for decimal 8."}]}],"pos":[93830,94210],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[94611,94674],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[94731,94790],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[94956,94994],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[95088,95131],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[96142,96201],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If Number is|Oct returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,127],"content":"If Number is","nodes":[{"content":"If Number is","pos":[0,12]}]},{"pos":[128,139],"content":"Oct returns","nodes":[{"content":"Oct returns","pos":[0,11]}]},{"pos":[152,157],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[158,166],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[171,187],"content":"Any other number","nodes":[{"content":"Any other number","pos":[0,16]}]},{"pos":[188,213],"content":"Up to 22 octal characters","nodes":[{"content":"Up to 22 octal characters","pos":[0,25]}]},{"pos":[221,370],"content":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"content":"You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[0,92],"source":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[93,149],"source":" For example, `&O10` is the octal notation for decimal 8."}]}],"pos":[96212,96592],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[96946,97009],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[97066,97125],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[97291,97329],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[97423,97466],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[98364,98423],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If Number is|Oct returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,127],"content":"If Number is","nodes":[{"content":"If Number is","pos":[0,12]}]},{"pos":[128,139],"content":"Oct returns","nodes":[{"content":"Oct returns","pos":[0,11]}]},{"pos":[152,157],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[158,166],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[171,187],"content":"Any other number","nodes":[{"content":"Any other number","pos":[0,16]}]},{"pos":[188,213],"content":"Up to 22 octal characters","nodes":[{"content":"Up to 22 octal characters","pos":[0,25]}]},{"pos":[221,370],"content":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"content":"You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[0,92],"source":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[93,149],"source":" For example, `&O10` is the octal notation for decimal 8."}]}],"pos":[98434,98814],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[99169,99232],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[99289,99348],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[99514,99552],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[99646,99689],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[100587,100646],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If Number is|Oct returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,127],"content":"If Number is","nodes":[{"content":"If Number is","pos":[0,12]}]},{"pos":[128,139],"content":"Oct returns","nodes":[{"content":"Oct returns","pos":[0,11]}]},{"pos":[152,157],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[158,166],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[171,187],"content":"Any other number","nodes":[{"content":"Any other number","pos":[0,16]}]},{"pos":[188,213],"content":"Up to 22 octal characters","nodes":[{"content":"Up to 22 octal characters","pos":[0,25]}]},{"pos":[221,370],"content":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"content":"You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[0,92],"source":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[93,149],"source":" For example, `&O10` is the octal notation for decimal 8."}]}],"pos":[100657,101037],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[101391,101454],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[101511,101570],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[101736,101774],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[101868,101911],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[102809,102868],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If Number is|Oct returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,127],"content":"If Number is","nodes":[{"content":"If Number is","pos":[0,12]}]},{"pos":[128,139],"content":"Oct returns","nodes":[{"content":"Oct returns","pos":[0,11]}]},{"pos":[152,157],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[158,166],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[171,187],"content":"Any other number","nodes":[{"content":"Any other number","pos":[0,16]}]},{"pos":[188,213],"content":"Up to 22 octal characters","nodes":[{"content":"Up to 22 octal characters","pos":[0,25]}]},{"pos":[221,370],"content":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"content":"You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[0,92],"source":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[93,149],"source":" For example, `&O10` is the octal notation for decimal 8."}]}],"pos":[102879,103259],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[103615,103678],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[103735,103794],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[103960,103998],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[104092,104135],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[105039,105098],"yaml":true},{"content":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \n  \n|If Number is|Oct returns|  \n|-|-|  \n|Empty|Zero (0)|  \n|Any other number|Up to 22 octal characters|  \n  \n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"pos":[0,108],"content":"If <ph id=\"ph1\">`Number`</ph> is not already a whole number, it is rounded to the nearest whole number before being evaluated.","source":"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated."},{"pos":[115,127],"content":"If Number is","nodes":[{"content":"If Number is","pos":[0,12]}]},{"pos":[128,139],"content":"Oct returns","nodes":[{"content":"Oct returns","pos":[0,11]}]},{"pos":[152,157],"content":"Empty","nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[158,166],"content":"Zero (0)","nodes":[{"content":"Zero (0)","pos":[0,8]}]},{"pos":[171,187],"content":"Any other number","nodes":[{"content":"Any other number","pos":[0,16]}]},{"pos":[188,213],"content":"Up to 22 octal characters","nodes":[{"content":"Up to 22 octal characters","pos":[0,25]}]},{"pos":[221,370],"content":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.","nodes":[{"content":"You can represent octal numbers directly by preceding numbers in the proper range with <ph id=\"ph1\">`&amp;O`</ph>.","pos":[0,92],"source":"You can represent octal numbers directly by preceding numbers in the proper range with `&O`."},{"content":"For example, <ph id=\"ph1\">`&amp;O10`</ph> is the octal notation for decimal 8.","pos":[93,149],"source":" For example, `&O10` is the octal notation for decimal 8."}]}],"pos":[105109,105489],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"pos":[0,62],"content":"Required. Any valid numeric expression or `String` expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid numeric expression or <ph id=\"ph1\">`String`</ph> expression.","pos":[10,62],"source":" Any valid numeric expression or `String` expression."}]}],"pos":[105847,105910],"yaml":true},{"content":"Returns a string representing the octal value of a number.","nodes":[{"pos":[0,58],"content":"Returns a string representing the octal value of a number.","nodes":[{"content":"Returns a string representing the octal value of a number.","pos":[0,58]}]}],"pos":[105967,106026],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[106192,106230],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[106324,106367],"yaml":true},{"content":"Returns a `String` representation of a number.","nodes":[{"pos":[0,46],"content":"Returns a <ph id=\"ph1\">`String`</ph> representation of a number.","source":"Returns a `String` representation of a number."}],"pos":[107271,107318],"yaml":true},{"content":"When numbers are converted to strings, a leading space is always reserved for the sign of `Number`. If `Number` is positive, the returned string contains a leading space, and the plus sign is implied. A negative number will include the minus sign (-) and no leading space.  \n  \n Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats. Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.  \n  \n> [!NOTE]\n>  The `Str` function recognizes only the period (`.`) as a valid decimal separator. If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string. To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method. For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.","nodes":[{"pos":[0,272],"content":"When numbers are converted to strings, a leading space is always reserved for the sign of `Number`. If `Number` is positive, the returned string contains a leading space, and the plus sign is implied. A negative number will include the minus sign (-) and no leading space.","nodes":[{"content":"When numbers are converted to strings, a leading space is always reserved for the sign of <ph id=\"ph1\">`Number`</ph>.","pos":[0,99],"source":"When numbers are converted to strings, a leading space is always reserved for the sign of `Number`."},{"content":"If <ph id=\"ph1\">`Number`</ph> is positive, the returned string contains a leading space, and the plus sign is implied.","pos":[100,200],"source":" If `Number` is positive, the returned string contains a leading space, and the plus sign is implied."},{"content":"A negative number will include the minus sign (-) and no leading space.","pos":[201,272]}]},{"pos":[279,520],"content":"Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats. Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.","nodes":[{"content":"Use the <ph id=\"ph1\">`Format`</ph> function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.","pos":[0,133],"source":"Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats."},{"content":"Unlike the <ph id=\"ph1\">`Str`</ph> function, the <ph id=\"ph2\">`Format`</ph> function does not include a leading space for the sign of <ph id=\"ph3\">`Number`</ph>.","pos":[134,241],"source":" Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`."}]},{"pos":[528,1004],"content":"[!NOTE]\n The `Str` function recognizes only the period (`.`) as a valid decimal separator. If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string. To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method. For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.","leadings":["","> "],"nodes":[{"content":" The `Str` function recognizes only the period (`.`) as a valid decimal separator. If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string. To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method. For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.","pos":[8,474],"nodes":[{"content":"The <ph id=\"ph1\">`Str`</ph> function recognizes only the period (<ph id=\"ph2\">`.`</ph>) as a valid decimal separator.","pos":[1,82],"source":" The `Str` function recognizes only the period (`.`) as a valid decimal separator."},{"content":"If different decimal separators are used (for example, in international applications), use the <ph id=\"ph1\">`CStr`</ph> or <ph id=\"ph2\">`Format`</ph> functions to convert a number to a string.","pos":[83,239],"source":" If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string."},{"content":"To get the string representation of a number in a particular culture, use the number's <ph id=\"ph1\">`ToString(IFormatProvider)`</ph> method.","pos":[240,362],"source":" To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method."},{"content":"For example, use <ph id=\"ph1\">&lt;xref:System.Double.ToString%2A&gt;</ph> when converting a value of type <ph id=\"ph2\">`Double`</ph> to a string.","pos":[363,466],"source":" For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string."}]}]}],"pos":[107329,108341],"yaml":true,"extradata":"MT"},{"content":"Required. An `Object` containing any valid numeric expression.","nodes":[{"pos":[0,62],"content":"Required. An `Object` containing any valid numeric expression.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"An <ph id=\"ph1\">`Object`</ph> containing any valid numeric expression.","pos":[10,62],"source":" An `Object` containing any valid numeric expression."}]}],"pos":[108805,108868],"yaml":true},{"content":"Returns a `String` representation of a number.","nodes":[{"pos":[0,46],"content":"Returns a <ph id=\"ph1\">`String`</ph> representation of a number.","source":"Returns a `String` representation of a number."}],"pos":[108925,108972],"yaml":true},{"content":"<code>Number</code> is not specified.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not specified.","source":"<code>Number</code> is not specified."}],"pos":[109138,109176],"yaml":true},{"content":"<code>Number</code> is not a numeric type.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;Number&lt;/code&gt;</ph> is not a numeric type.","source":"<code>Number</code> is not a numeric type."}],"pos":[109276,109319],"yaml":true},{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"pos":[0,81],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]}],"pos":[110223,110305],"yaml":true},{"content":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.  \n  \n The following call returns the value 1234123.  \n  \n```  \n  \nVal(\" 1234 123th Street N.E.\")   \n```  \n  \n The following call returns the decimal value -1.  \n  \n```  \n  \nVal(\"&HFFFF\")   \n```  \n  \n> [!NOTE]\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \n>   \n>  `' These examples cause run-time errors.`  \n>   \n>  `'Console.WriteLine(Val(\"1.34%\"))`  \n>   \n>  `'Console.WriteLine(Val(\"1.34&\"))`  \n>   \n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.  \n>   \n>  `' These examples cause compiler errors.`  \n>   \n>  `'Dim m = 1.34%`  \n>   \n>  `'Dim n = 1.34&`","nodes":[{"pos":[0,400],"content":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.","nodes":[{"content":"The <ph id=\"ph1\">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.","pos":[0,107],"source":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number."},{"content":"Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.","pos":[108,234]},{"content":"However, the function recognizes the radix prefixes <ph id=\"ph1\">`&amp;O`</ph> (for octal) and <ph id=\"ph2\">`&amp;H`</ph> (for hexadecimal).","pos":[235,331],"source":" However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal)."},{"content":"Blanks, tabs, and linefeed characters are removed from the argument.","pos":[332,400]}]},{"pos":[407,452],"content":"The following call returns the value 1234123.","nodes":[{"content":"The following call returns the value 1234123.","pos":[0,45]}]},{"pos":[511,559],"content":"The following call returns the decimal value -1.","nodes":[{"content":"The following call returns the decimal value -1.","pos":[0,48]}]},{"pos":[602,1099],"content":"[!NOTE]\n The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.","leadings":["","> "],"nodes":[{"content":" The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.","pos":[8,495],"nodes":[{"content":"The <ph id=\"ph1\">`Val`</ph> function recognizes only the period (<ph id=\"ph2\">`.`</ph>) as a valid decimal separator.","pos":[1,82],"source":" The `Val` function recognizes only the period (`.`) as a valid decimal separator."},{"content":"When other decimal separators are used, as in international applications, use <ph id=\"ph1\">`CDbl`</ph> or <ph id=\"ph2\">`CInt`</ph> instead to convert a string to a number.","pos":[83,218],"source":" When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number."},{"content":"To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id=\"ph1\">`Parse(String, IFormatProvider)`</ph> method.","pos":[219,375],"source":" To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method."},{"content":"For example, use <ph id=\"ph1\">&lt;xref:System.Double.Parse%2A?displayProperty=fullName&gt;</ph> when converting a string to a <ph id=\"ph2\">`Double`</ph>.","pos":[376,487],"source":" For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`."}]}]},{"pos":[1107,1284],"content":"[!NOTE]\n An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.","leadings":["","> "],"nodes":[{"content":" An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.","pos":[8,175],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph> exception might be raised in response to certain uncommon number formats.","pos":[1,112],"source":" An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats."},{"content":"For example, the following code raises this exception.","pos":[113,167]}]}]},{"pos":[1437,1616],"content":"The conflict between the number formatted as a <ph id=\"ph1\">`Double`</ph> and the <ph id=\"ph2\">`Integer`</ph> and <ph id=\"ph3\">`Long`</ph> type characters would be caught by the compiler if the conflict were not contained in strings.","source":"The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings."}],"pos":[110316,112083],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid `String` expression, `Object` variable, or `Char` value. If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs.","nodes":[{"pos":[0,232],"content":"Required. Any valid `String` expression, `Object` variable, or `Char` value. If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <ph id=\"ph1\">`String`</ph> expression, <ph id=\"ph2\">`Object`</ph> variable, or <ph id=\"ph3\">`Char`</ph> value.","pos":[10,76],"source":" Any valid `String` expression, `Object` variable, or `Char` value."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Expression</ph><ept id=\"p1\">&lt;/code&gt;</ept> is of type <ph id=\"ph2\">`Object`</ph>, its value must be convertible to <ph id=\"ph3\">`String`</ph> or an <ph id=\"ph4\">&lt;xref href=\"System.ArgumentException\"&gt;&lt;/xref&gt;</ph> error occurs.","pos":[77,232],"source":" If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs."}]}],"pos":[112619,112852],"yaml":true},{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"pos":[0,81],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]}],"pos":[112909,112991],"yaml":true},{"content":"<code>InputStr</code> is too large.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;InputStr&lt;/code&gt;</ph> is too large.","source":"<code>InputStr</code> is too large."}],"pos":[113149,113185],"yaml":true},{"content":"<code>Expression</code> is an `Object` type expression that is not convertible to `String`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;Expression&lt;/code&gt;</ph> is an <ph id=\"ph2\">`Object`</ph> type expression that is not convertible to <ph id=\"ph3\">`String`</ph>.","source":"<code>Expression</code> is an `Object` type expression that is not convertible to `String`."}],"pos":[113279,113371],"yaml":true},{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"pos":[0,81],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]}],"pos":[114263,114345],"yaml":true},{"content":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are stripped from the argument.  \n  \n The following call returns the value 1615198.  \n  \n```  \n  \nVal(\" 1615 198th Street N.E.\")   \n```  \n  \n The following call returns the decimal value -1.  \n  \n```  \n  \nVal(\"&HFFFF\")   \n```  \n  \n> [!NOTE]\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \n>   \n>  `' These examples cause run-time errors.`  \n>   \n>  `'Console.WriteLine(Val(\"1.34%\"))`  \n>   \n>  `'Console.WriteLine(Val(\"1.34&\"))`  \n>   \n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.  \n>   \n>  `' These examples cause compiler errors.`  \n>   \n>  `'Dim m = 1.34%`  \n>   \n>  `'Dim n = 1.34&`","nodes":[{"pos":[0,401],"content":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are stripped from the argument.","nodes":[{"content":"The <ph id=\"ph1\">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.","pos":[0,107],"source":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number."},{"content":"Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.","pos":[108,234]},{"content":"However, the function recognizes the radix prefixes <ph id=\"ph1\">`&amp;O`</ph> (for octal) and <ph id=\"ph2\">`&amp;H`</ph> (for hexadecimal).","pos":[235,331],"source":" However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal)."},{"content":"Blanks, tabs, and linefeed characters are stripped from the argument.","pos":[332,401]}]},{"pos":[408,453],"content":"The following call returns the value 1615198.","nodes":[{"content":"The following call returns the value 1615198.","pos":[0,45]}]},{"pos":[512,560],"content":"The following call returns the decimal value -1.","nodes":[{"content":"The following call returns the decimal value -1.","pos":[0,48]}]},{"pos":[603,1104],"content":"[!NOTE]\n The `Val` function recognizes only the period (`.`) as a valid decimal separator. When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.","leadings":["","> "],"nodes":[{"content":" The `Val` function recognizes only the period (`.`) as a valid decimal separator. When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.","pos":[8,499],"nodes":[{"content":"The <ph id=\"ph1\">`Val`</ph> function recognizes only the period (<ph id=\"ph2\">`.`</ph>) as a valid decimal separator.","pos":[1,82],"source":" The `Val` function recognizes only the period (`.`) as a valid decimal separator."},{"content":"When different decimal separators are used, as in international applications, use <ph id=\"ph1\">`CDbl`</ph> or <ph id=\"ph2\">`CInt`</ph> instead to convert a string to a number.","pos":[83,222],"source":" When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number."},{"content":"To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id=\"ph1\">`Parse(String, IFormatProvider)`</ph> method.","pos":[223,379],"source":" To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method."},{"content":"For example, use <ph id=\"ph1\">&lt;xref:System.Double.Parse%2A?displayProperty=fullName&gt;</ph> when converting a string to a <ph id=\"ph2\">`Double`</ph>.","pos":[380,491],"source":" For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`."}]}]},{"pos":[1112,1289],"content":"[!NOTE]\n An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.","leadings":["","> "],"nodes":[{"content":" An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.","pos":[8,175],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph> exception might be raised in response to certain uncommon number formats.","pos":[1,112],"source":" An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats."},{"content":"For example, the following code raises this exception.","pos":[113,167]}]}]},{"pos":[1442,1612],"content":"The conflict between the number formatted as a <ph id=\"ph1\">`Double`</ph> and the <ph id=\"ph2\">`Integer`</ph> and <ph id=\"ph3\">`Long`</ph> type characters would be caught by the compiler if it were not contained in a string.","source":"The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string."}],"pos":[114356,116119],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid `String` expression, `Object` variable, or `Char` value. If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs.","nodes":[{"pos":[0,232],"content":"Required. Any valid `String` expression, `Object` variable, or `Char` value. If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <ph id=\"ph1\">`String`</ph> expression, <ph id=\"ph2\">`Object`</ph> variable, or <ph id=\"ph3\">`Char`</ph> value.","pos":[10,76],"source":" Any valid `String` expression, `Object` variable, or `Char` value."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Expression</ph><ept id=\"p1\">&lt;/code&gt;</ept> is of type <ph id=\"ph2\">`Object`</ph>, its value must be convertible to <ph id=\"ph3\">`String`</ph> or an <ph id=\"ph4\">&lt;xref href=\"System.ArgumentException\"&gt;&lt;/xref&gt;</ph> error occurs.","pos":[77,232],"source":" If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs."}]}],"pos":[116648,116881],"yaml":true},{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"pos":[0,81],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]}],"pos":[116937,117019],"yaml":true},{"content":"<code>InputStr</code> is too large.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;InputStr&lt;/code&gt;</ph> is too large.","source":"<code>InputStr</code> is too large."}],"pos":[117177,117213],"yaml":true},{"content":"<code>Expression</code> is an `Object` type expression that is not convertible to `String`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;Expression&lt;/code&gt;</ph> is an <ph id=\"ph2\">`Object`</ph> type expression that is not convertible to <ph id=\"ph3\">`String`</ph>.","source":"<code>Expression</code> is an `Object` type expression that is not convertible to `String`."}],"pos":[117307,117399],"yaml":true},{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"pos":[0,81],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]}],"pos":[118303,118385],"yaml":true},{"content":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.  \n  \n The following call returns the value 1234123.  \n  \n```  \n  \nVal(\" 1234 123th Street N.E.\")   \n```  \n  \n The following call returns the decimal value -1.  \n  \n```  \n  \nVal(\"&HFFFF\")   \n```  \n  \n> [!NOTE]\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \n  \n> [!NOTE]\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \n>   \n>  `' These examples cause run-time errors.`  \n>   \n>  `'Console.WriteLine(Val(\"1.34%\"))`  \n>   \n>  `'Console.WriteLine(Val(\"1.34&\"))`  \n>   \n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.  \n>   \n>  `' These examples cause compiler errors.`  \n>   \n>  `'Dim m = 1.34%`  \n>   \n>  `'Dim n = 1.34&`","nodes":[{"pos":[0,400],"content":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.","nodes":[{"content":"The <ph id=\"ph1\">`Val`</ph> function stops reading the string at the first character it cannot recognize as part of a number.","pos":[0,107],"source":"The `Val` function stops reading the string at the first character it cannot recognize as part of a number."},{"content":"Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.","pos":[108,234]},{"content":"However, the function recognizes the radix prefixes <ph id=\"ph1\">`&amp;O`</ph> (for octal) and <ph id=\"ph2\">`&amp;H`</ph> (for hexadecimal).","pos":[235,331],"source":" However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal)."},{"content":"Blanks, tabs, and linefeed characters are removed from the argument.","pos":[332,400]}]},{"pos":[407,452],"content":"The following call returns the value 1234123.","nodes":[{"content":"The following call returns the value 1234123.","pos":[0,45]}]},{"pos":[511,559],"content":"The following call returns the decimal value -1.","nodes":[{"content":"The following call returns the decimal value -1.","pos":[0,48]}]},{"pos":[602,1099],"content":"[!NOTE]\n The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.","leadings":["","> "],"nodes":[{"content":" The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.","pos":[8,495],"nodes":[{"content":"The <ph id=\"ph1\">`Val`</ph> function recognizes only the period (<ph id=\"ph2\">`.`</ph>) as a valid decimal separator.","pos":[1,82],"source":" The `Val` function recognizes only the period (`.`) as a valid decimal separator."},{"content":"When other decimal separators are used, as in international applications, use <ph id=\"ph1\">`CDbl`</ph> or <ph id=\"ph2\">`CInt`</ph> instead to convert a string to a number.","pos":[83,218],"source":" When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number."},{"content":"To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's <ph id=\"ph1\">`Parse(String, IFormatProvider)`</ph> method.","pos":[219,375],"source":" To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method."},{"content":"For example, use <ph id=\"ph1\">&lt;xref:System.Double.Parse%2A?displayProperty=fullName&gt;</ph> when converting a string to a <ph id=\"ph2\">`Double`</ph>.","pos":[376,487],"source":" For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`."}]}]},{"pos":[1107,1284],"content":"[!NOTE]\n An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.","leadings":["","> "],"nodes":[{"content":" An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.","pos":[8,175],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidCastException&gt;</ph> exception might be raised in response to certain uncommon number formats.","pos":[1,112],"source":" An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats."},{"content":"For example, the following code raises this exception.","pos":[113,167]}]}]},{"pos":[1437,1616],"content":"The conflict between the number formatted as a <ph id=\"ph1\">`Double`</ph> and the <ph id=\"ph2\">`Integer`</ph> and <ph id=\"ph3\">`Long`</ph> type characters would be caught by the compiler if the conflict were not contained in strings.","source":"The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings."}],"pos":[118396,120163],"yaml":true,"extradata":"MT"},{"content":"Required. Any valid `String` expression, `Object` variable, or `Char` value. If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs.","nodes":[{"pos":[0,232],"content":"Required. Any valid `String` expression, `Object` variable, or `Char` value. If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"Any valid <ph id=\"ph1\">`String`</ph> expression, <ph id=\"ph2\">`Object`</ph> variable, or <ph id=\"ph3\">`Char`</ph> value.","pos":[10,76],"source":" Any valid `String` expression, `Object` variable, or `Char` value."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Expression</ph><ept id=\"p1\">&lt;/code&gt;</ept> is of type <ph id=\"ph2\">`Object`</ph>, its value must be convertible to <ph id=\"ph3\">`String`</ph> or an <ph id=\"ph4\">&lt;xref href=\"System.ArgumentException\"&gt;&lt;/xref&gt;</ph> error occurs.","pos":[77,232],"source":" If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs."}]}],"pos":[120695,120928],"yaml":true},{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"pos":[0,81],"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","nodes":[{"content":"Returns the numbers contained in a string as a numeric value of appropriate type.","pos":[0,81]}]}],"pos":[120985,121067],"yaml":true},{"content":"<code>InputStr</code> is too large.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;InputStr&lt;/code&gt;</ph> is too large.","source":"<code>InputStr</code> is too large."}],"pos":[121225,121261],"yaml":true},{"content":"<code>Expression</code> is an `Object` type expression that is not convertible to `String`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;Expression&lt;/code&gt;</ph> is an <ph id=\"ph2\">`Object`</ph> type expression that is not convertible to <ph id=\"ph3\">`String`</ph>.","source":"<code>Expression</code> is an `Object` type expression that is not convertible to `String`."}],"pos":[121355,121447],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Conversion\n  commentId: T:Microsoft.VisualBasic.Conversion\n  id: Conversion\n  children:\n  - Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)\n  - Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)\n  - Microsoft.VisualBasic.Conversion.ErrorToString\n  - Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Decimal)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Double)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Int16)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Int32)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Int64)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Object)\n  - Microsoft.VisualBasic.Conversion.Fix(System.Single)\n  - Microsoft.VisualBasic.Conversion.Hex(System.UInt32)\n  - Microsoft.VisualBasic.Conversion.Hex(System.UInt16)\n  - Microsoft.VisualBasic.Conversion.Hex(System.SByte)\n  - Microsoft.VisualBasic.Conversion.Hex(System.Object)\n  - Microsoft.VisualBasic.Conversion.Hex(System.UInt64)\n  - Microsoft.VisualBasic.Conversion.Hex(System.Int32)\n  - Microsoft.VisualBasic.Conversion.Hex(System.Int16)\n  - Microsoft.VisualBasic.Conversion.Hex(System.Byte)\n  - Microsoft.VisualBasic.Conversion.Hex(System.Int64)\n  - Microsoft.VisualBasic.Conversion.Int(System.Decimal)\n  - Microsoft.VisualBasic.Conversion.Int(System.Double)\n  - Microsoft.VisualBasic.Conversion.Int(System.Int16)\n  - Microsoft.VisualBasic.Conversion.Int(System.Int32)\n  - Microsoft.VisualBasic.Conversion.Int(System.Int64)\n  - Microsoft.VisualBasic.Conversion.Int(System.Object)\n  - Microsoft.VisualBasic.Conversion.Int(System.Single)\n  - Microsoft.VisualBasic.Conversion.Oct(System.UInt64)\n  - Microsoft.VisualBasic.Conversion.Oct(System.UInt32)\n  - Microsoft.VisualBasic.Conversion.Oct(System.UInt16)\n  - Microsoft.VisualBasic.Conversion.Oct(System.SByte)\n  - Microsoft.VisualBasic.Conversion.Oct(System.Byte)\n  - Microsoft.VisualBasic.Conversion.Oct(System.Int64)\n  - Microsoft.VisualBasic.Conversion.Oct(System.Int32)\n  - Microsoft.VisualBasic.Conversion.Oct(System.Int16)\n  - Microsoft.VisualBasic.Conversion.Oct(System.Object)\n  - Microsoft.VisualBasic.Conversion.Str(System.Object)\n  - Microsoft.VisualBasic.Conversion.Val(System.Object)\n  - Microsoft.VisualBasic.Conversion.Val(System.Char)\n  - Microsoft.VisualBasic.Conversion.Val(System.String)\n  langs:\n  - csharp\n  name: Conversion\n  nameWithType: Conversion\n  fullName: Microsoft.VisualBasic.Conversion\n  type: Class\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: The `Conversion` module contains the procedures used to perform various conversion operations.\n  remarks: This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]\"\n  syntax:\n    content: >-\n      [Microsoft.VisualBasic.CompilerServices.StandardModule]\n\n      public sealed class Conversion\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)\n  commentId: M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)\n  id: CTypeDynamic(System.Object,System.Type)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: CTypeDynamic(Object, Type)\n  nameWithType: Conversion.CTypeDynamic(Object, Type)\n  fullName: Conversion.CTypeDynamic(Object, Type)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Converts an object to the specified type.\n  remarks: \"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter. If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.  \\n  \\n The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.\"\n  example:\n  - \"The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.  \\n  \\n```vb  \\nImports System.Dynamic  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim dyn As Object = New SampleDynamicObject  \\n        Dim sampleString = CTypeDynamic(dyn, GetType(String))  \\n        Console.WriteLine(sampleString)  \\n    End Sub  \\nEnd Module  \\n  \\nClass SampleDynamicObject  \\n    Inherits DynamicObject  \\n  \\n    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  \\n                                         ByRef result As Object) As Boolean  \\n  \\n        If binder.Type = GetType(String) Then  \\n            result = \\\"Sample String\\\"  \\n            Return True  \\n        End If  \\n  \\n        Return False  \\n    End Function  \\nEnd Class  \\n```\"\n  syntax:\n    content: public static object CTypeDynamic (object Expression, Type TargetType);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: The object to convert.\n    - id: TargetType\n      type: System.Type\n      description: The type to which to convert the object.\n    return:\n      type: System.Object\n      description: An object whose type at run time is the requested target type.\n  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)\n  commentId: M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)\n  id: CTypeDynamic``1(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: CTypeDynamic<TargetType>(Object)\n  nameWithType: Conversion.CTypeDynamic<TargetType>(Object)\n  fullName: Conversion.CTypeDynamic<TargetType>(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Converts an object to the specified generic type.\n  remarks: \"The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter. If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.  \\n  \\n The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself. If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion. If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions. If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.\"\n  example:\n  - \"The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.  \\n  \\n```vb  \\nImports System.Dynamic  \\n  \\nModule Module1  \\n    Sub Main()  \\n        Dim dyn As Object = New SampleDynamicObject  \\n        Dim str = CTypeDynamic(Of String)(dyn)  \\n        Console.WriteLine(str)  \\n    End Sub  \\nEnd Module  \\n  \\nClass SampleDynamicObject  \\n    Inherits DynamicObject  \\n  \\n    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  \\n                                         ByRef result As Object) As Boolean  \\n  \\n        If binder.Type = GetType(String) Then  \\n            result = \\\"Sample String\\\"  \\n            Return True  \\n        End If  \\n  \\n        Return False  \\n    End Function  \\nEnd Class  \\n```\"\n  syntax:\n    content: public static TargetType CTypeDynamic<TargetType> (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: The object to convert.\n    typeParameters:\n    - id: TargetType\n      description: The type to which to convert the object.\n    return:\n      type: TargetType\n      description: An object statically typed as the requested generic type.\n  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic``1*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.ErrorToString\n  commentId: M:Microsoft.VisualBasic.Conversion.ErrorToString\n  id: ErrorToString\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: ErrorToString()\n  nameWithType: Conversion.ErrorToString()\n  fullName: Conversion.ErrorToString()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the error message that corresponds to a given error number.\n  remarks: \"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If no run-time error has occurred, `ErrorToString` returns a zero-length string (\\\"\\\").  \\n  \\n In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.\"\n  example:\n  - \"The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \\n  \\n [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]\"\n  syntax:\n    content: public static string ErrorToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The error message that corresponds to the most recent run-time error.\n  overload: Microsoft.VisualBasic.Conversion.ErrorToString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ErrorNumber</code> is out of range.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)\n  commentId: M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)\n  id: ErrorToString(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: ErrorToString(Int32)\n  nameWithType: Conversion.ErrorToString(Int32)\n  fullName: Conversion.ErrorToString(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the error message that corresponds to a given error number.\n  remarks: \"The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error. The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object. If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `\\\"Application-defined or object-defined error.\\\"` If `ErrorNumber` is not valid, an error occurs. If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned. If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string (\\\"\\\").  \\n  \\n In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.\"\n  example:\n  - \"The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \\n  \\n [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]\"\n  syntax:\n    content: public static string ErrorToString (int ErrorNumber);\n    parameters:\n    - id: ErrorNumber\n      type: System.Int32\n      description: Optional. Any valid error number.\n    return:\n      type: System.String\n      description: The error message that corresponds to a given error number.\n  overload: Microsoft.VisualBasic.Conversion.ErrorToString*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>ErrorNumber</code> is out of range.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)\n  commentId: M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)\n  id: Fix(System.Decimal)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Decimal)\n  nameWithType: Conversion.Fix(Decimal)\n  fullName: Conversion.Fix(Decimal)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static decimal Fix (decimal Number);\n    parameters:\n    - id: Number\n      type: System.Decimal\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Decimal\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)\n  commentId: M:Microsoft.VisualBasic.Conversion.Fix(System.Double)\n  id: Fix(System.Double)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Double)\n  nameWithType: Conversion.Fix(Double)\n  fullName: Conversion.Fix(Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static double Fix (double Number);\n    parameters:\n    - id: Number\n      type: System.Double\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Double\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)\n  commentId: M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)\n  id: Fix(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Int16)\n  nameWithType: Conversion.Fix(Int16)\n  fullName: Conversion.Fix(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static short Fix (short Number);\n    parameters:\n    - id: Number\n      type: System.Int16\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Int16\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)\n  commentId: M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)\n  id: Fix(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Int32)\n  nameWithType: Conversion.Fix(Int32)\n  fullName: Conversion.Fix(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static int Fix (int Number);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Int32\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)\n  commentId: M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)\n  id: Fix(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Int64)\n  nameWithType: Conversion.Fix(Int64)\n  fullName: Conversion.Fix(Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static long Fix (long Number);\n    parameters:\n    - id: Number\n      type: System.Int64\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Int64\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)\n  commentId: M:Microsoft.VisualBasic.Conversion.Fix(System.Object)\n  id: Fix(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Object)\n  nameWithType: Conversion.Fix(Object)\n  fullName: Conversion.Fix(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static object Fix (object Number);\n    parameters:\n    - id: Number\n      type: System.Object\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Object\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)\n  commentId: M:Microsoft.VisualBasic.Conversion.Fix(System.Single)\n  id: Fix(System.Single)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Fix(Single)\n  nameWithType: Conversion.Fix(Single)\n  fullName: Conversion.Fix(Single)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static float Fix (float Number);\n    parameters:\n    - id: Number\n      type: System.Single\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Single\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Fix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)\n  commentId: M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)\n  id: Hex(System.UInt32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(UInt32)\n  nameWithType: Conversion.Hex(UInt32)\n  fullName: Conversion.Hex(UInt32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If `Number` is|Hex returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string Hex (uint Number);\n    parameters:\n    - id: Number\n      type: System.UInt32\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  altCompliant: Microsoft.VisualBasic.Conversion.Hex(System.Int32)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)\n  commentId: M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)\n  id: Hex(System.UInt16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(UInt16)\n  nameWithType: Conversion.Hex(UInt16)\n  fullName: Conversion.Hex(UInt16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If `Number` is|Hex returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string Hex (ushort Number);\n    parameters:\n    - id: Number\n      type: System.UInt16\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  altCompliant: Microsoft.VisualBasic.Conversion.Hex(System.Int16)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)\n  commentId: M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)\n  id: Hex(System.SByte)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(SByte)\n  nameWithType: Conversion.Hex(SByte)\n  fullName: Conversion.Hex(SByte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If `Number` is|Hex returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string Hex (sbyte Number);\n    parameters:\n    - id: Number\n      type: System.SByte\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  altCompliant: Microsoft.VisualBasic.Conversion.Hex(System.Byte)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)\n  commentId: M:Microsoft.VisualBasic.Conversion.Hex(System.Object)\n  id: Hex(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(Object)\n  nameWithType: Conversion.Hex(Object)\n  fullName: Conversion.Hex(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If `Number` is|Hex returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]\"\n  syntax:\n    content: public static string Hex (object Number);\n    parameters:\n    - id: Number\n      type: System.Object\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)\n  commentId: M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)\n  id: Hex(System.UInt64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(UInt64)\n  nameWithType: Conversion.Hex(UInt64)\n  fullName: Conversion.Hex(UInt64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If `Number` is|Hex returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string Hex (ulong Number);\n    parameters:\n    - id: Number\n      type: System.UInt64\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  altCompliant: Microsoft.VisualBasic.Conversion.Hex(System.Int64)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)\n  commentId: M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)\n  id: Hex(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(Int32)\n  nameWithType: Conversion.Hex(Int32)\n  fullName: Conversion.Hex(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If `Number` is|Hex returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]\"\n  syntax:\n    content: public static string Hex (int Number);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)\n  commentId: M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)\n  id: Hex(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(Int16)\n  nameWithType: Conversion.Hex(Int16)\n  fullName: Conversion.Hex(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If `Number` is|Hex returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]\"\n  syntax:\n    content: public static string Hex (short Number);\n    parameters:\n    - id: Number\n      type: System.Int16\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)\n  commentId: M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)\n  id: Hex(System.Byte)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(Byte)\n  nameWithType: Conversion.Hex(Byte)\n  fullName: Conversion.Hex(Byte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If `Number` is|Hex returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]\"\n  syntax:\n    content: public static string Hex (byte Number);\n    parameters:\n    - id: Number\n      type: System.Byte\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)\n  commentId: M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)\n  id: Hex(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Hex(Int64)\n  nameWithType: Conversion.Hex(Int64)\n  fullName: Conversion.Hex(Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the hexadecimal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If `Number` is|Hex returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any numeric value|Up to sixteen hexadecimal characters|  \\n  \\n You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`. For example, `&H10` represents decimal 16 in hexadecimal notation.\"\n  example:\n  - \"This example uses the `Hex` function to return the hexadecimal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]\"\n  syntax:\n    content: public static string Hex (long Number);\n    parameters:\n    - id: Number\n      type: System.Int64\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the hexadecimal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Hex*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)\n  commentId: M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)\n  id: Int(System.Decimal)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Decimal)\n  nameWithType: Conversion.Int(Decimal)\n  fullName: Conversion.Int(Decimal)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static decimal Int (decimal Number);\n    parameters:\n    - id: Number\n      type: System.Decimal\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Decimal\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)\n  commentId: M:Microsoft.VisualBasic.Conversion.Int(System.Double)\n  id: Int(System.Double)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Double)\n  nameWithType: Conversion.Int(Double)\n  fullName: Conversion.Int(Double)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static double Int (double Number);\n    parameters:\n    - id: Number\n      type: System.Double\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Double\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)\n  commentId: M:Microsoft.VisualBasic.Conversion.Int(System.Int16)\n  id: Int(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Int16)\n  nameWithType: Conversion.Int(Int16)\n  fullName: Conversion.Int(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static short Int (short Number);\n    parameters:\n    - id: Number\n      type: System.Int16\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Int16\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)\n  commentId: M:Microsoft.VisualBasic.Conversion.Int(System.Int32)\n  id: Int(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Int32)\n  nameWithType: Conversion.Int(Int32)\n  fullName: Conversion.Int(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static int Int (int Number);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Int32\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)\n  commentId: M:Microsoft.VisualBasic.Conversion.Int(System.Int64)\n  id: Int(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Int64)\n  nameWithType: Conversion.Int(Int64)\n  fullName: Conversion.Int(Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static long Int (long Number);\n    parameters:\n    - id: Number\n      type: System.Int64\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Int64\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)\n  commentId: M:Microsoft.VisualBasic.Conversion.Int(System.Object)\n  id: Int(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Object)\n  nameWithType: Conversion.Int(Object)\n  fullName: Conversion.Int(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static object Int (object Number);\n    parameters:\n    - id: Number\n      type: System.Object\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Object\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)\n  commentId: M:Microsoft.VisualBasic.Conversion.Int(System.Single)\n  id: Int(System.Single)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Int(Single)\n  nameWithType: Conversion.Int(Single)\n  fullName: Conversion.Int(Single)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Return the integer portion of a number.\n  remarks: \"Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.  \\n  \\n The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`. For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.  \\n  \\n `Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`\"\n  example:\n  - \"This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \\n  \\n [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  \\n  \\n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \\n  \\n [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  \\n  \\n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \\n  \\n [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  \\n  \\n For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).\"\n  syntax:\n    content: public static float Int (float Number);\n    parameters:\n    - id: Number\n      type: System.Single\n      description: Required. A number of type `Double` or any valid numeric expression. If <code>Number</code> contains `Nothing`, `Nothing` is returned.\n    return:\n      type: System.Single\n      description: Return the integer portion of a number.\n  overload: Microsoft.VisualBasic.Conversion.Int*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: Number is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Number is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)\n  commentId: M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)\n  id: Oct(System.UInt64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(UInt64)\n  nameWithType: Conversion.Oct(UInt64)\n  fullName: Conversion.Oct(UInt64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If Number is|Oct returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string Oct (ulong Number);\n    parameters:\n    - id: Number\n      type: System.UInt64\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  altCompliant: Microsoft.VisualBasic.Conversion.Oct(System.Int64)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)\n  commentId: M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)\n  id: Oct(System.UInt32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(UInt32)\n  nameWithType: Conversion.Oct(UInt32)\n  fullName: Conversion.Oct(UInt32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If Number is|Oct returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string Oct (uint Number);\n    parameters:\n    - id: Number\n      type: System.UInt32\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  altCompliant: Microsoft.VisualBasic.Conversion.Oct(System.Int32)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)\n  commentId: M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)\n  id: Oct(System.UInt16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(UInt16)\n  nameWithType: Conversion.Oct(UInt16)\n  fullName: Conversion.Oct(UInt16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If Number is|Oct returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string Oct (ushort Number);\n    parameters:\n    - id: Number\n      type: System.UInt16\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  altCompliant: Microsoft.VisualBasic.Conversion.Oct(System.Int16)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)\n  commentId: M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)\n  id: Oct(System.SByte)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(SByte)\n  nameWithType: Conversion.Oct(SByte)\n  fullName: Conversion.Oct(SByte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If Number is|Oct returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static string Oct (sbyte Number);\n    parameters:\n    - id: Number\n      type: System.SByte\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  altCompliant: Microsoft.VisualBasic.Conversion.Oct(System.Byte)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)\n  commentId: M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)\n  id: Oct(System.Byte)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(Byte)\n  nameWithType: Conversion.Oct(Byte)\n  fullName: Conversion.Oct(Byte)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If Number is|Oct returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]\"\n  syntax:\n    content: public static string Oct (byte Number);\n    parameters:\n    - id: Number\n      type: System.Byte\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)\n  commentId: M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)\n  id: Oct(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(Int64)\n  nameWithType: Conversion.Oct(Int64)\n  fullName: Conversion.Oct(Int64)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If Number is|Oct returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]\"\n  syntax:\n    content: public static string Oct (long Number);\n    parameters:\n    - id: Number\n      type: System.Int64\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)\n  commentId: M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)\n  id: Oct(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(Int32)\n  nameWithType: Conversion.Oct(Int32)\n  fullName: Conversion.Oct(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If Number is|Oct returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]\"\n  syntax:\n    content: public static string Oct (int Number);\n    parameters:\n    - id: Number\n      type: System.Int32\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)\n  commentId: M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)\n  id: Oct(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(Int16)\n  nameWithType: Conversion.Oct(Int16)\n  fullName: Conversion.Oct(Int16)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If Number is|Oct returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]\"\n  syntax:\n    content: public static string Oct (short Number);\n    parameters:\n    - id: Number\n      type: System.Int16\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)\n  commentId: M:Microsoft.VisualBasic.Conversion.Oct(System.Object)\n  id: Oct(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Oct(Object)\n  nameWithType: Conversion.Oct(Object)\n  fullName: Conversion.Oct(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a string representing the octal value of a number.\n  remarks: \"If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.  \\n  \\n|If Number is|Oct returns|  \\n|-|-|  \\n|Empty|Zero (0)|  \\n|Any other number|Up to 22 octal characters|  \\n  \\n You can represent octal numbers directly by preceding numbers in the proper range with `&O`. For example, `&O10` is the octal notation for decimal 8.\"\n  example:\n  - \"This example uses the `Oct` function to return the octal value of a number.  \\n  \\n [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]\"\n  syntax:\n    content: public static string Oct (object Number);\n    parameters:\n    - id: Number\n      type: System.Object\n      description: Required. Any valid numeric expression or `String` expression.\n    return:\n      type: System.String\n      description: Returns a string representing the octal value of a number.\n  overload: Microsoft.VisualBasic.Conversion.Oct*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)\n  commentId: M:Microsoft.VisualBasic.Conversion.Str(System.Object)\n  id: Str(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Str(Object)\n  nameWithType: Conversion.Str(Object)\n  fullName: Conversion.Str(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns a `String` representation of a number.\n  remarks: \"When numbers are converted to strings, a leading space is always reserved for the sign of `Number`. If `Number` is positive, the returned string contains a leading space, and the plus sign is implied. A negative number will include the minus sign (-) and no leading space.  \\n  \\n Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats. Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.  \\n  \\n> [!NOTE]\\n>  The `Str` function recognizes only the period (`.`) as a valid decimal separator. If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string. To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method. For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.\"\n  example:\n  - \"This example uses the `Str` function to return a `String` representation of a number. When a positive number is converted to a string, a leading space is always reserved for its sign.  \\n  \\n [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]\"\n  syntax:\n    content: public static string Str (object Number);\n    parameters:\n    - id: Number\n      type: System.Object\n      description: Required. An `Object` containing any valid numeric expression.\n    return:\n      type: System.String\n      description: Returns a `String` representation of a number.\n  overload: Microsoft.VisualBasic.Conversion.Str*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>Number</code> is not specified.\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: <code>Number</code> is not a numeric type.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)\n  commentId: M:Microsoft.VisualBasic.Conversion.Val(System.Object)\n  id: Val(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Val(Object)\n  nameWithType: Conversion.Val(Object)\n  fullName: Conversion.Val(Object)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the numbers contained in a string as a numeric value of appropriate type.\n  remarks: \"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.  \\n  \\n The following call returns the value 1234123.  \\n  \\n```  \\n  \\nVal(\\\" 1234 123th Street N.E.\\\")   \\n```  \\n  \\n The following call returns the decimal value -1.  \\n  \\n```  \\n  \\nVal(\\\"&HFFFF\\\")   \\n```  \\n  \\n> [!NOTE]\\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \\n>   \\n>  `' These examples cause run-time errors.`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34%\\\"))`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34&\\\"))`  \\n>   \\n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.  \\n>   \\n>  `' These examples cause compiler errors.`  \\n>   \\n>  `'Dim m = 1.34%`  \\n>   \\n>  `'Dim n = 1.34&`\"\n  example:\n  - \"The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \\n  \\n [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]\"\n  syntax:\n    content: public static double Val (object Expression);\n    parameters:\n    - id: Expression\n      type: System.Object\n      description: Required. Any valid `String` expression, `Object` variable, or `Char` value. If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs.\n    return:\n      type: System.Double\n      description: Returns the numbers contained in a string as a numeric value of appropriate type.\n  overload: Microsoft.VisualBasic.Conversion.Val*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>InputStr</code> is too large.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Expression</code> is an `Object` type expression that is not convertible to `String`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)\n  commentId: M:Microsoft.VisualBasic.Conversion.Val(System.Char)\n  id: Val(System.Char)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Val(Char)\n  nameWithType: Conversion.Val(Char)\n  fullName: Conversion.Val(Char)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the numbers contained in a string as a numeric value of appropriate type.\n  remarks: \"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are stripped from the argument.  \\n  \\n The following call returns the value 1615198.  \\n  \\n```  \\n  \\nVal(\\\" 1615 198th Street N.E.\\\")   \\n```  \\n  \\n The following call returns the decimal value -1.  \\n  \\n```  \\n  \\nVal(\\\"&HFFFF\\\")   \\n```  \\n  \\n> [!NOTE]\\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \\n>   \\n>  `' These examples cause run-time errors.`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34%\\\"))`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34&\\\"))`  \\n>   \\n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.  \\n>   \\n>  `' These examples cause compiler errors.`  \\n>   \\n>  `'Dim m = 1.34%`  \\n>   \\n>  `'Dim n = 1.34&`\"\n  example:\n  - \"The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \\n  \\n [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]\"\n  syntax:\n    content: public static int Val (char Expression);\n    parameters:\n    - id: Expression\n      type: System.Char\n      description: Required. Any valid `String` expression, `Object` variable, or `Char` value. If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs.\n    return:\n      type: System.Int32\n      description: Returns the numbers contained in a string as a numeric value of appropriate type.\n  overload: Microsoft.VisualBasic.Conversion.Val*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>InputStr</code> is too large.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Expression</code> is an `Object` type expression that is not convertible to `String`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Conversion.Val(System.String)\n  commentId: M:Microsoft.VisualBasic.Conversion.Val(System.String)\n  id: Val(System.String)\n  parent: Microsoft.VisualBasic.Conversion\n  langs:\n  - csharp\n  name: Val(String)\n  nameWithType: Conversion.Val(String)\n  fullName: Conversion.Val(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic\n  summary: Returns the numbers contained in a string as a numeric value of appropriate type.\n  remarks: \"The `Val` function stops reading the string at the first character it cannot recognize as part of a number. Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized. However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal). Blanks, tabs, and linefeed characters are removed from the argument.  \\n  \\n The following call returns the value 1234123.  \\n  \\n```  \\n  \\nVal(\\\" 1234 123th Street N.E.\\\")   \\n```  \\n  \\n The following call returns the decimal value -1.  \\n  \\n```  \\n  \\nVal(\\\"&HFFFF\\\")   \\n```  \\n  \\n> [!NOTE]\\n>  The `Val` function recognizes only the period (`.`) as a valid decimal separator. When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number. To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method. For example, use <xref:System.Double.Parse%2A?displayProperty=fullName> when converting a string to a `Double`.  \\n  \\n> [!NOTE]\\n>  An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats. For example, the following code raises this exception.  \\n>   \\n>  `' These examples cause run-time errors.`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34%\\\"))`  \\n>   \\n>  `'Console.WriteLine(Val(\\\"1.34&\\\"))`  \\n>   \\n>  The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.  \\n>   \\n>  `' These examples cause compiler errors.`  \\n>   \\n>  `'Dim m = 1.34%`  \\n>   \\n>  `'Dim n = 1.34&`\"\n  example:\n  - \"The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \\n  \\n [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]\"\n  syntax:\n    content: public static double Val (string InputStr);\n    parameters:\n    - id: InputStr\n      type: System.String\n      description: Required. Any valid `String` expression, `Object` variable, or `Char` value. If <code>Expression</code> is of type `Object`, its value must be convertible to `String` or an <xref href=\"System.ArgumentException\"></xref> error occurs.\n    return:\n      type: System.Double\n      description: Returns the numbers contained in a string as a numeric value of appropriate type.\n  overload: Microsoft.VisualBasic.Conversion.Val*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: <code>InputStr</code> is too large.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>Expression</code> is an `Object` type expression that is not convertible to `String`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.InvalidCastException\n  parent: System\n  isExternal: false\n  name: InvalidCastException\n  nameWithType: InvalidCastException\n  fullName: System.InvalidCastException\n- uid: System.OverflowException\n  parent: System\n  isExternal: false\n  name: OverflowException\n  nameWithType: OverflowException\n  fullName: System.OverflowException\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: CTypeDynamic(Object, Type)\n  nameWithType: Conversion.CTypeDynamic(Object, Type)\n  fullName: Conversion.CTypeDynamic(Object, Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: CTypeDynamic<TargetType>(Object)\n  nameWithType: Conversion.CTypeDynamic<TargetType>(Object)\n  fullName: Conversion.CTypeDynamic<TargetType>(Object)\n- uid: TargetType\n  isExternal: true\n  name: TargetType\n  nameWithType: TargetType\n  fullName: TargetType\n- uid: Microsoft.VisualBasic.Conversion.ErrorToString\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: ErrorToString()\n  nameWithType: Conversion.ErrorToString()\n  fullName: Conversion.ErrorToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: ErrorToString(Int32)\n  nameWithType: Conversion.ErrorToString(Int32)\n  fullName: Conversion.ErrorToString(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Decimal)\n  nameWithType: Conversion.Fix(Decimal)\n  fullName: Conversion.Fix(Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Double)\n  nameWithType: Conversion.Fix(Double)\n  fullName: Conversion.Fix(Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Int16)\n  nameWithType: Conversion.Fix(Int16)\n  fullName: Conversion.Fix(Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Int32)\n  nameWithType: Conversion.Fix(Int32)\n  fullName: Conversion.Fix(Int32)\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Int64)\n  nameWithType: Conversion.Fix(Int64)\n  fullName: Conversion.Fix(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Object)\n  nameWithType: Conversion.Fix(Object)\n  fullName: Conversion.Fix(Object)\n- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix(Single)\n  nameWithType: Conversion.Fix(Single)\n  fullName: Conversion.Fix(Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(UInt32)\n  nameWithType: Conversion.Hex(UInt32)\n  fullName: Conversion.Hex(UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(UInt16)\n  nameWithType: Conversion.Hex(UInt16)\n  fullName: Conversion.Hex(UInt16)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(SByte)\n  nameWithType: Conversion.Hex(SByte)\n  fullName: Conversion.Hex(SByte)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(Object)\n  nameWithType: Conversion.Hex(Object)\n  fullName: Conversion.Hex(Object)\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(UInt64)\n  nameWithType: Conversion.Hex(UInt64)\n  fullName: Conversion.Hex(UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(Int32)\n  nameWithType: Conversion.Hex(Int32)\n  fullName: Conversion.Hex(Int32)\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(Int16)\n  nameWithType: Conversion.Hex(Int16)\n  fullName: Conversion.Hex(Int16)\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(Byte)\n  nameWithType: Conversion.Hex(Byte)\n  fullName: Conversion.Hex(Byte)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex(Int64)\n  nameWithType: Conversion.Hex(Int64)\n  fullName: Conversion.Hex(Int64)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Decimal)\n  nameWithType: Conversion.Int(Decimal)\n  fullName: Conversion.Int(Decimal)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Double)\n  nameWithType: Conversion.Int(Double)\n  fullName: Conversion.Int(Double)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Int16)\n  nameWithType: Conversion.Int(Int16)\n  fullName: Conversion.Int(Int16)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Int32)\n  nameWithType: Conversion.Int(Int32)\n  fullName: Conversion.Int(Int32)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Int64)\n  nameWithType: Conversion.Int(Int64)\n  fullName: Conversion.Int(Int64)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Object)\n  nameWithType: Conversion.Int(Object)\n  fullName: Conversion.Int(Object)\n- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int(Single)\n  nameWithType: Conversion.Int(Single)\n  fullName: Conversion.Int(Single)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(UInt64)\n  nameWithType: Conversion.Oct(UInt64)\n  fullName: Conversion.Oct(UInt64)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(UInt32)\n  nameWithType: Conversion.Oct(UInt32)\n  fullName: Conversion.Oct(UInt32)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(UInt16)\n  nameWithType: Conversion.Oct(UInt16)\n  fullName: Conversion.Oct(UInt16)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(SByte)\n  nameWithType: Conversion.Oct(SByte)\n  fullName: Conversion.Oct(SByte)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(Byte)\n  nameWithType: Conversion.Oct(Byte)\n  fullName: Conversion.Oct(Byte)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(Int64)\n  nameWithType: Conversion.Oct(Int64)\n  fullName: Conversion.Oct(Int64)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(Int32)\n  nameWithType: Conversion.Oct(Int32)\n  fullName: Conversion.Oct(Int32)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(Int16)\n  nameWithType: Conversion.Oct(Int16)\n  fullName: Conversion.Oct(Int16)\n- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct(Object)\n  nameWithType: Conversion.Oct(Object)\n  fullName: Conversion.Oct(Object)\n- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Str(Object)\n  nameWithType: Conversion.Str(Object)\n  fullName: Conversion.Str(Object)\n- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Val(Object)\n  nameWithType: Conversion.Val(Object)\n  fullName: Conversion.Val(Object)\n- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Val(Char)\n  nameWithType: Conversion.Val(Char)\n  fullName: Conversion.Val(Char)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: Microsoft.VisualBasic.Conversion.Val(System.String)\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Val(String)\n  nameWithType: Conversion.Val(String)\n  fullName: Conversion.Val(String)\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: CTypeDynamic\n  nameWithType: Conversion.CTypeDynamic\n  fullName: Conversion.CTypeDynamic\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: CTypeDynamic<TargetType>\n  nameWithType: Conversion.CTypeDynamic<TargetType>\n  fullName: Conversion.CTypeDynamic<TargetType>\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n- uid: Microsoft.VisualBasic.Conversion.ErrorToString*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: ErrorToString\n  nameWithType: Conversion.ErrorToString\n  fullName: Conversion.ErrorToString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n- uid: Microsoft.VisualBasic.Conversion.Fix*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Fix\n  nameWithType: Conversion.Fix\n  fullName: Conversion.Fix\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n- uid: Microsoft.VisualBasic.Conversion.Hex*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Hex\n  nameWithType: Conversion.Hex\n  fullName: Conversion.Hex\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n- uid: Microsoft.VisualBasic.Conversion.Int*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Int\n  nameWithType: Conversion.Int\n  fullName: Conversion.Int\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n- uid: Microsoft.VisualBasic.Conversion.Oct*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Oct\n  nameWithType: Conversion.Oct\n  fullName: Conversion.Oct\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n- uid: Microsoft.VisualBasic.Conversion.Str*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Str\n  nameWithType: Conversion.Str\n  fullName: Conversion.Str\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n- uid: Microsoft.VisualBasic.Conversion.Val*\n  parent: Microsoft.VisualBasic.Conversion\n  isExternal: false\n  name: Val\n  nameWithType: Conversion.Val\n  fullName: Conversion.Val\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic/Conversion.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}