{"nodes":[{"content":"Provides a durable reference to an object that is an instance of an entity type.","nodes":[{"pos":[0,80],"content":"Provides a durable reference to an object that is an instance of an entity type.","nodes":[{"content":"Provides a durable reference to an object that is an instance of an entity type.","pos":[0,80]}]}],"pos":[1514,1595],"yaml":true},{"content":"The <xref:System.Data.EntityKey> objects are immutable; that is, after they are constructed they cannot be modified.  \n  \n For more information, see [Working with Entity Keys](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f).","nodes":[{"pos":[0,116],"content":"The <xref:System.Data.EntityKey> objects are immutable; that is, after they are constructed they cannot be modified.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> objects are immutable; that is, after they are constructed they cannot be modified.","pos":[0,116],"source":"The <xref:System.Data.EntityKey> objects are immutable; that is, after they are constructed they cannot be modified."}]},{"pos":[123,246],"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with Entity Keys<ept id=\"p1\">](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)</ept>.","source":"For more information, see [Working with Entity Keys](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)."}],"pos":[1606,1857],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class.","nodes":[{"pos":[0,83],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class."}],"pos":[4227,4311],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and a generic <xref href=\"System.Collections.Generic.KeyValuePair\"></xref> collection.","nodes":[{"pos":[0,193],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> class with an entity set name and a generic <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.KeyValuePair\"&gt;&lt;/xref&gt;</ph> collection.","source":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and a generic <xref href=\"System.Collections.Generic.KeyValuePair\"></xref> collection."}],"pos":[5800,5994],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that is the entity set name qualified by the entity container name.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that is the entity set name qualified by the entity container name.","source":"A <xref href=\"System.String\"></xref> that is the entity set name qualified by the entity container name."}],"pos":[6847,6952],"yaml":true},{"content":"A generic <xref href=\"System.Collections.Generic.KeyValuePair\"></xref> collection.  \n  \n Each key/value pair has a property name as the key and the value of that property as the value. There should be one pair for each property that is part of the <xref href=\"System.Data.EntityKey\"></xref>. The order of the key/value pairs is not important, but each key property should be included. The property names are simple names that are not qualified with an entity type name or the schema name.","nodes":[{"pos":[0,82],"content":"A generic <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.KeyValuePair\"&gt;&lt;/xref&gt;</ph> collection.","source":"A generic <xref href=\"System.Collections.Generic.KeyValuePair\"></xref> collection."},{"pos":[89,488],"content":"Each key/value pair has a property name as the key and the value of that property as the value. There should be one pair for each property that is part of the <xref href=\"System.Data.EntityKey\"></xref>. The order of the key/value pairs is not important, but each key property should be included. The property names are simple names that are not qualified with an entity type name or the schema name.","nodes":[{"content":"Each key/value pair has a property name as the key and the value of that property as the value.","pos":[0,95]},{"content":"There should be one pair for each property that is part of the <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph>.","pos":[96,202],"source":" There should be one pair for each property that is part of the <xref href=\"System.Data.EntityKey\"></xref>."},{"content":"The order of the key/value pairs is not important, but each key property should be included.","pos":[203,295]},{"content":"The property names are simple names that are not qualified with an entity type name or the schema name.","pos":[296,399]}]}],"pos":[7118,7615],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of <xref href=\"System.Data.EntityKeyMember\"></xref> objects.","nodes":[{"pos":[0,247],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> class with an entity set name and an <ph id=\"ph2\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> collection of <ph id=\"ph3\">&lt;xref href=\"System.Data.EntityKeyMember\"&gt;&lt;/xref&gt;</ph> objects.","source":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of <xref href=\"System.Data.EntityKeyMember\"></xref> objects."}],"pos":[8882,9130],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that is the entity set name qualified by the entity container name.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that is the entity set name qualified by the entity container name.","source":"A <xref href=\"System.String\"></xref> that is the entity set name qualified by the entity container name."}],"pos":[9382,9487],"yaml":true},{"content":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of <xref href=\"System.Data.EntityKeyMember\"></xref> objects with which to initialize the key.","nodes":[{"pos":[0,169],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IEnumerable`1\"&gt;&lt;/xref&gt;</ph> collection of <ph id=\"ph2\">&lt;xref href=\"System.Data.EntityKeyMember\"&gt;&lt;/xref&gt;</ph> objects with which to initialize the key.","source":"An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of <xref href=\"System.Data.EntityKeyMember\"></xref> objects with which to initialize the key."}],"pos":[9612,9782],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and specific entity key pair.","nodes":[{"pos":[0,136],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> class with an entity set name and specific entity key pair.","source":"Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and specific entity key pair."}],"pos":[10887,11024],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that is the entity set name qualified by the entity container name.","nodes":[{"pos":[0,104],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that is the entity set name qualified by the entity container name.","source":"A <xref href=\"System.String\"></xref> that is the entity set name qualified by the entity container name."}],"pos":[11798,11903],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> that is the name of the key.","nodes":[{"pos":[0,65],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that is the name of the key.","source":"A <xref href=\"System.String\"></xref> that is the name of the key."}],"pos":[11966,12032],"yaml":true},{"content":"An <xref href=\"System.Object\"></xref> that is the key value.","nodes":[{"pos":[0,60],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that is the key value.","source":"An <xref href=\"System.Object\"></xref> that is the key value."}],"pos":[12096,12157],"yaml":true},{"content":"Gets or sets the name of the entity container.","nodes":[{"pos":[0,46],"content":"Gets or sets the name of the entity container.","nodes":[{"content":"Gets or sets the name of the entity container.","pos":[0,46]}]}],"pos":[13128,13175],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> value that is the name of the entity container for the entity to which the <xref href=\"System.Data.EntityKey\"></xref> belongs.","nodes":[{"pos":[0,163],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> value that is the name of the entity container for the entity to which the <ph id=\"ph2\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> belongs.","source":"A <xref href=\"System.String\"></xref> value that is the name of the entity container for the entity to which the <xref href=\"System.Data.EntityKey\"></xref> belongs."}],"pos":[13361,13525],"yaml":true},{"content":"Gets or sets the key values associated with this <xref href=\"System.Data.EntityKey\"></xref>.","nodes":[{"pos":[0,92],"content":"Gets or sets the key values associated with this <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the key values associated with this <xref href=\"System.Data.EntityKey\"></xref>."}],"pos":[14559,14652],"yaml":true},{"content":"The <xref:System.Data.EntityKey> class contains a copy of the values that make up the logical key that is specified for this type of entity.  \n  \n The members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> each have a property name and a value in a <xref:System.Collections.Generic.KeyValuePair%602>, where the key is the property name and the value is the actual value of that property on the object.","nodes":[{"pos":[0,140],"content":"The <xref:System.Data.EntityKey> class contains a copy of the values that make up the logical key that is specified for this type of entity.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> class contains a copy of the values that make up the logical key that is specified for this type of entity.","pos":[0,140],"source":"The <xref:System.Data.EntityKey> class contains a copy of the values that make up the logical key that is specified for this type of entity."}]},{"pos":[147,422],"content":"The members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> each have a property name and a value in a <xref:System.Collections.Generic.KeyValuePair%602>, where the key is the property name and the value is the actual value of that property on the object.","nodes":[{"content":"The members of the <ph id=\"ph1\">&lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;</ph> each have a property name and a value in a <ph id=\"ph2\">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>, where the key is the property name and the value is the actual value of that property on the object.","pos":[0,275],"source":"The members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> each have a property name and a value in a <xref:System.Collections.Generic.KeyValuePair%602>, where the key is the property name and the value is the actual value of that property on the object."}]}],"pos":[14663,15090],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of key values for this <xref href=\"System.Data.EntityKey\"></xref>.","nodes":[{"pos":[0,141],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> of key values for this <ph id=\"ph2\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of key values for this <xref href=\"System.Data.EntityKey\"></xref>."}],"pos":[15311,15453],"yaml":true},{"content":"A simple <xref href=\"System.Data.EntityKey\"></xref> identifying an entity that resulted from a failed [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operation.","nodes":[{"pos":[0,192],"content":"A simple <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> identifying an entity that resulted from a failed <bpt id=\"p1\">[</bpt>TREAT<ept id=\"p1\">](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md)</ept> operation.","source":"A simple <xref href=\"System.Data.EntityKey\"></xref> identifying an entity that resulted from a failed [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operation."}],"pos":[16492,16685],"yaml":true},{"content":"There are various ways to get an invalid entity. The most common scenario is when an [!INCLUDE[esql](~/includes/esql-md.md)] query uses the [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match. ([TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) is similar to the C# `as` operator). In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to <xref:System.Data.EntityKey.EntityNotValidKey>.","nodes":[{"pos":[0,622],"content":"There are various ways to get an invalid entity. The most common scenario is when an [!INCLUDE[esql](~/includes/esql-md.md)] query uses the [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match. ([TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) is similar to the C# `as` operator). In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to <xref:System.Data.EntityKey.EntityNotValidKey>.","nodes":[{"content":"There are various ways to get an invalid entity.","pos":[0,48]},{"content":"The most common scenario is when an <ph id=\"ph1\">[!INCLUDE[esql](~/includes/esql-md.md)]</ph> query uses the <bpt id=\"p1\">[</bpt>TREAT<ept id=\"p1\">](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md)</ept> operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match.","pos":[49,342],"source":" The most common scenario is when an [!INCLUDE[esql](~/includes/esql-md.md)] query uses the [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match."},{"content":"(<bpt id=\"p1\">[</bpt>TREAT<ept id=\"p1\">](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md)</ept> is similar to the C# <ph id=\"ph1\">`as`</ph> operator).","pos":[343,460],"source":" ([TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) is similar to the C# `as` operator)."},{"content":"In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to <ph id=\"ph1\">&lt;xref:System.Data.EntityKey.EntityNotValidKey&gt;</ph>.","pos":[461,622],"source":" In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to <xref:System.Data.EntityKey.EntityNotValidKey>."}]}],"pos":[16696,17319],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the name of the entity set.","nodes":[{"pos":[0,40],"content":"Gets or sets the name of the entity set.","nodes":[{"content":"Gets or sets the name of the entity set.","pos":[0,40]}]}],"pos":[18368,18409],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> value that is the name of the entity set for the entity to which the <xref href=\"System.Data.EntityKey\"></xref> belongs.","nodes":[{"pos":[0,157],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> value that is the name of the entity set for the entity to which the <ph id=\"ph2\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> belongs.","source":"A <xref href=\"System.String\"></xref> value that is the name of the entity set for the entity to which the <xref href=\"System.Data.EntityKey\"></xref> belongs."}],"pos":[18589,18747],"yaml":true},{"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"pos":[0,84],"content":"Returns a value that indicates whether this instance is equal to a specified object.","nodes":[{"content":"Returns a value that indicates whether this instance is equal to a specified object.","pos":[0,84]}]}],"pos":[19788,19873],"yaml":true},{"content":"Temporary keys have different comparison semantics than permanent keys:  \n  \n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \n  \n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal.  \n  \n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","nodes":[{"pos":[0,71],"content":"Temporary keys have different comparison semantics than permanent keys:","nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:","pos":[0,71]}]},{"pos":[81,282],"content":"Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.","nodes":[{"content":"Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.","pos":[0,201],"nodes":[{"content":"Temporary keys use reference equality.","pos":[0,38]},{"content":"That is, two references to the exact same temporary <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> instance are equal but no other <ph id=\"ph2\">&lt;xref:System.Data.EntityKey&gt;</ph> instances are equal.","pos":[39,201],"source":" That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal."}]}]},{"pos":[292,621],"content":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal.","nodes":[{"content":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal.","pos":[0,329],"nodes":[{"content":"Permanent keys determine equality based on the values of the contained key properties and the <ph id=\"ph1\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph>.","pos":[0,136],"source":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>."},{"content":"That is, you can have two separate <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> instances that are equal if their <ph id=\"ph2\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph> objects are the same and their key values are equal.","pos":[137,329],"source":" That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal."}]}]},{"pos":[628,743],"content":"In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","nodes":[{"content":"In addition, temporary keys have no <ph id=\"ph1\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph> or key values, but permanent keys do.","pos":[0,115],"source":"In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do."}]}],"pos":[19884,20636],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Object\"></xref> to compare with this instance.","nodes":[{"pos":[0,68],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> to compare with this instance.","source":"An <xref href=\"System.Object\"></xref> to compare with this instance."}],"pos":[20776,20845],"yaml":true},{"content":"`true` if this instance and <code>obj</code> have equal values; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if this instance and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> have equal values; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if this instance and <code>obj</code> have equal values; otherwise, `false`."}],"pos":[20903,20989],"yaml":true},{"content":"Returns a value that indicates whether this instance is equal to a specified <xref href=\"System.Data.EntityKey\"></xref>.","nodes":[{"pos":[0,120],"content":"Returns a value that indicates whether this instance is equal to a specified <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a value that indicates whether this instance is equal to a specified <xref href=\"System.Data.EntityKey\"></xref>."}],"pos":[21983,22104],"yaml":true},{"content":"Temporary keys have different comparison semantics than permanent keys:  \n  \n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \n  \n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \n  \n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","nodes":[{"pos":[0,71],"content":"Temporary keys have different comparison semantics than permanent keys:","nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:","pos":[0,71]}]},{"pos":[81,282],"content":"Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.","nodes":[{"content":"Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.","pos":[0,201],"nodes":[{"content":"Temporary keys use reference equality.","pos":[0,38]},{"content":"That is, two references to the exact same temporary <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> instance are equal but no other <ph id=\"ph2\">&lt;xref:System.Data.EntityKey&gt;</ph> instances are equal.","pos":[39,201],"source":" That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal."}]}]},{"pos":[292,583],"content":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.","nodes":[{"content":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.","pos":[0,291],"nodes":[{"content":"Permanent keys determine equality based on the values of the contained key properties and the <ph id=\"ph1\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph>.","pos":[0,136],"source":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>."},{"content":"That is, you can have two separate <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> instances that are equal if their entity sets are the same and their key values are equal.","pos":[137,291],"source":" That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal."}]}]},{"pos":[590,705],"content":"In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","nodes":[{"content":"In addition, temporary keys have no <ph id=\"ph1\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph> or key values, but permanent keys do.","pos":[0,115],"source":"In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do."}]}],"pos":[22115,22829],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Data.EntityKey\"></xref> object to compare with this instance.","nodes":[{"pos":[0,83],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> object to compare with this instance.","source":"An <xref href=\"System.Data.EntityKey\"></xref> object to compare with this instance."}],"pos":[22987,23071],"yaml":true},{"content":"`true` if this instance and <code>other</code> have equal values; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if this instance and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> have equal values; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if this instance and <code>other</code> have equal values; otherwise, `false`."}],"pos":[23129,23217],"yaml":true},{"content":"Gets the entity set for this entity key from the given metadata workspace.","nodes":[{"pos":[0,74],"content":"Gets the entity set for this entity key from the given metadata workspace.","nodes":[{"content":"Gets the entity set for this entity key from the given metadata workspace.","pos":[0,74]}]}],"pos":[24334,24409],"yaml":true},{"content":"The entity set is accessed based on the entity container name and entity set name of the key.","nodes":[{"pos":[0,93],"content":"The entity set is accessed based on the entity container name and entity set name of the key.","nodes":[{"content":"The entity set is accessed based on the entity container name and entity set name of the key.","pos":[0,93]}]}],"pos":[24420,24514],"yaml":true,"extradata":"MT"},{"content":"The metadata workspace that contains the entity.","nodes":[{"pos":[0,48],"content":"The metadata workspace that contains the entity.","nodes":[{"content":"The metadata workspace that contains the entity.","pos":[0,48]}]}],"pos":[24774,24823],"yaml":true},{"content":"The <xref href=\"System.Data.Metadata.Edm.EntitySet\"></xref> for the entity key.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Data.Metadata.Edm.EntitySet\"&gt;&lt;/xref&gt;</ph> for the entity key.","source":"The <xref href=\"System.Data.Metadata.Edm.EntitySet\"></xref> for the entity key."}],"pos":[24901,24981],"yaml":true},{"content":"The entity set could not be located in the specified metadata workspace.","nodes":[{"pos":[0,72],"content":"The entity set could not be located in the specified metadata workspace.","nodes":[{"content":"The entity set could not be located in the specified metadata workspace.","pos":[0,72]}]}],"pos":[25137,25210],"yaml":true},{"content":"Serves as a hash function for the current <xref href=\"System.Data.EntityKey\"></xref> object. <xref href=\"System.Data.EntityKey.GetHashCode\"></xref> is suitable for hashing algorithms and data structures such as a hash table.","nodes":[{"pos":[0,224],"content":"Serves as a hash function for the current <xref href=\"System.Data.EntityKey\"></xref> object. <xref href=\"System.Data.EntityKey.GetHashCode\"></xref> is suitable for hashing algorithms and data structures such as a hash table.","nodes":[{"content":"Serves as a hash function for the current <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,92],"source":"Serves as a hash function for the current <xref href=\"System.Data.EntityKey\"></xref> object."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey.GetHashCode\"&gt;&lt;/xref&gt;</ph> is suitable for hashing algorithms and data structures such as a hash table.","pos":[93,224],"source":"<xref href=\"System.Data.EntityKey.GetHashCode\"></xref> is suitable for hashing algorithms and data structures such as a hash table."}]}],"pos":[26079,26304],"yaml":true},{"content":"A hash code for the current <xref href=\"System.Data.EntityKey\"></xref>.","nodes":[{"pos":[0,71],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph>.","source":"A hash code for the current <xref href=\"System.Data.EntityKey\"></xref>."}],"pos":[26438,26510],"yaml":true},{"content":"Gets a value that indicates whether the <xref href=\"System.Data.EntityKey\"></xref> is temporary.","nodes":[{"pos":[0,96],"content":"Gets a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> is temporary.","source":"Gets a value that indicates whether the <xref href=\"System.Data.EntityKey\"></xref> is temporary."}],"pos":[27439,27536],"yaml":true},{"content":"When a new entity is created, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] defines temporary key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `true`. When you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] assigns a permanent key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `false`.  \n  \n> [!NOTE]\n>  Temporary keys are constructed automatically by the framework; they cannot be constructed directly by a user.  \n  \n Temporary keys have different comparison semantics than permanent keys:  \n  \n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \n  \n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \n  \n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.  \n  \n When the <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A> method is called on an entity's <xref:System.Data.Objects.ObjectStateEntry> and the entity transitions from the <xref:System.Data.EntityState.Added> state to <xref:System.Data.EntityState.Unchanged> state, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] automatically computes a new permanent key for the entity and synchronizes all temporary key references.","nodes":[{"pos":[0,420],"content":"When a new entity is created, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] defines temporary key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `true`. When you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] assigns a permanent key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `false`.","nodes":[{"content":"When a new entity is created, the <ph id=\"ph1\">[!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]</ph> defines temporary key and sets the <ph id=\"ph2\">&lt;xref:System.Data.EntityKey.IsTemporary%2A&gt;</ph> property to <ph id=\"ph3\">`true`</ph>.","pos":[0,182],"source":"When a new entity is created, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] defines temporary key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `true`."},{"content":"When you call the <ph id=\"ph1\">&lt;xref:System.Data.Objects.ObjectContext.SaveChanges%2A&gt;</ph> method, the <ph id=\"ph2\">[!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]</ph> assigns a permanent key and sets the <ph id=\"ph3\">&lt;xref:System.Data.EntityKey.IsTemporary%2A&gt;</ph> property to <ph id=\"ph4\">`false`</ph>.","pos":[183,420],"source":" When you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] assigns a permanent key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `false`."}]},{"pos":[428,548],"content":"[!NOTE]\n Temporary keys are constructed automatically by the framework; they cannot be constructed directly by a user.","leadings":["","> "],"nodes":[{"content":"Temporary keys are constructed automatically by the framework; they cannot be constructed directly by a user.","pos":[9,118]}]},{"pos":[555,626],"content":"Temporary keys have different comparison semantics than permanent keys:","nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:","pos":[0,71]}]},{"pos":[636,837],"content":"Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.","nodes":[{"content":"Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.","pos":[0,201],"nodes":[{"content":"Temporary keys use reference equality.","pos":[0,38]},{"content":"That is, two references to the exact same temporary <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> instance are equal but no other <ph id=\"ph2\">&lt;xref:System.Data.EntityKey&gt;</ph> instances are equal.","pos":[39,201],"source":" That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal."}]}]},{"pos":[847,1138],"content":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.","nodes":[{"content":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.","pos":[0,291],"nodes":[{"content":"Permanent keys determine equality based on the values of the contained key properties and the <ph id=\"ph1\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph>.","pos":[0,136],"source":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>."},{"content":"That is, you can have two separate <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> instances that are equal if their entity sets are the same and their key values are equal.","pos":[137,291],"source":" That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal."}]}]},{"pos":[1145,1260],"content":"In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","nodes":[{"content":"In addition, temporary keys have no <ph id=\"ph1\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph> or key values, but permanent keys do.","pos":[0,115],"source":"In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do."}]},{"pos":[1267,1701],"content":"When the <ph id=\"ph1\">&lt;xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A&gt;</ph> method is called on an entity's <ph id=\"ph2\">&lt;xref:System.Data.Objects.ObjectStateEntry&gt;</ph> and the entity transitions from the <ph id=\"ph3\">&lt;xref:System.Data.EntityState.Added&gt;</ph> state to <ph id=\"ph4\">&lt;xref:System.Data.EntityState.Unchanged&gt;</ph> state, the <ph id=\"ph5\">[!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)]</ph> automatically computes a new permanent key for the entity and synchronizes all temporary key references.","source":"When the <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A> method is called on an entity's <xref:System.Data.Objects.ObjectStateEntry> and the entity transitions from the <xref:System.Data.EntityState.Added> state to <xref:System.Data.EntityState.Unchanged> state, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] automatically computes a new permanent key for the entity and synchronizes all temporary key references."}],"pos":[27547,29264],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Data.EntityKey\"></xref> is temporary; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> is temporary; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Data.EntityKey\"></xref> is temporary; otherwise, `false`."}],"pos":[29378,29471],"yaml":true},{"content":"A singleton <xref href=\"System.Data.EntityKey\"></xref> by which a read-only entity is identified.","nodes":[{"pos":[0,97],"content":"A singleton <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> by which a read-only entity is identified.","source":"A singleton <xref href=\"System.Data.EntityKey\"></xref> by which a read-only entity is identified."}],"pos":[30415,30513],"yaml":true},{"content":"A read-only entity identifies an entity that is valid in every way, except that it is not associated with an actual entity set. This can occur as part of the result of an [!INCLUDE[esql](~/includes/esql-md.md)] query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table). An entity that does not have an entity set cannot be persisted to the database until it is associated with some entity set. Therefore, the object materializer will treat this kind of entity as if the <xref:System.Data.Objects.MergeOption.NoTracking> merge option was specified, regardless of the actual merge option that was specified. An entity object will be created, but its identity will not be resolved and it will not be added to the state manager as part of the materialization process.","nodes":[{"pos":[0,864],"content":"A read-only entity identifies an entity that is valid in every way, except that it is not associated with an actual entity set. This can occur as part of the result of an [!INCLUDE[esql](~/includes/esql-md.md)] query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table). An entity that does not have an entity set cannot be persisted to the database until it is associated with some entity set. Therefore, the object materializer will treat this kind of entity as if the <xref:System.Data.Objects.MergeOption.NoTracking> merge option was specified, regardless of the actual merge option that was specified. An entity object will be created, but its identity will not be resolved and it will not be added to the state manager as part of the materialization process.","nodes":[{"content":"A read-only entity identifies an entity that is valid in every way, except that it is not associated with an actual entity set.","pos":[0,127]},{"content":"This can occur as part of the result of an <ph id=\"ph1\">[!INCLUDE[esql](~/includes/esql-md.md)]</ph> query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table).","pos":[128,370],"source":" This can occur as part of the result of an [!INCLUDE[esql](~/includes/esql-md.md)] query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table)."},{"content":"An entity that does not have an entity set cannot be persisted to the database until it is associated with some entity set.","pos":[371,494]},{"content":"Therefore, the object materializer will treat this kind of entity as if the <ph id=\"ph1\">&lt;xref:System.Data.Objects.MergeOption.NoTracking&gt;</ph> merge option was specified, regardless of the actual merge option that was specified.","pos":[495,706],"source":" Therefore, the object materializer will treat this kind of entity as if the <xref:System.Data.Objects.MergeOption.NoTracking> merge option was specified, regardless of the actual merge option that was specified."},{"content":"An entity object will be created, but its identity will not be resolved and it will not be added to the state manager as part of the materialization process.","pos":[707,864]}]}],"pos":[30524,31389],"yaml":true,"extradata":"MT"},{"content":"Helper method that is used to deserialize an <xref href=\"System.Data.EntityKey\"></xref>.","nodes":[{"pos":[0,88],"content":"Helper method that is used to deserialize an <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph>.","source":"Helper method that is used to deserialize an <xref href=\"System.Data.EntityKey\"></xref>."}],"pos":[32634,32723],"yaml":true},{"content":"<xref:System.Data.EntityKey.OnDeserialized%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>. For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).","nodes":[{"pos":[0,244],"content":"<xref:System.Data.EntityKey.OnDeserialized%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>. For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Data.EntityKey.OnDeserialized%2A&gt;</ph> is used by Object Services when deserializing an <ph id=\"ph2\">&lt;xref:System.Data.EntityKey&gt;</ph>.","pos":[0,125],"source":"<xref:System.Data.EntityKey.OnDeserialized%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Serializing Objects<ept id=\"p1\">](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)</ept>.","pos":[126,244],"source":" For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."}]}],"pos":[32734,32979],"yaml":true,"extradata":"MT"},{"content":"Describes the source and destination of a given serialized stream and provides an additional caller-defined context.","nodes":[{"pos":[0,116],"content":"Describes the source and destination of a given serialized stream and provides an additional caller-defined context.","nodes":[{"content":"Describes the source and destination of a given serialized stream and provides an additional caller-defined context.","pos":[0,116]}]}],"pos":[33307,33424],"yaml":true},{"content":"Helper method that is used to deserialize an <xref href=\"System.Data.EntityKey\"></xref>.","nodes":[{"pos":[0,88],"content":"Helper method that is used to deserialize an <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph>.","source":"Helper method that is used to deserialize an <xref href=\"System.Data.EntityKey\"></xref>."}],"pos":[34701,34790],"yaml":true},{"content":"<xref:System.Data.EntityKey.OnDeserializing%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>. For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).","nodes":[{"pos":[0,245],"content":"<xref:System.Data.EntityKey.OnDeserializing%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>. For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Data.EntityKey.OnDeserializing%2A&gt;</ph> is used by Object Services when deserializing an <ph id=\"ph2\">&lt;xref:System.Data.EntityKey&gt;</ph>.","pos":[0,126],"source":"<xref:System.Data.EntityKey.OnDeserializing%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Serializing Objects<ept id=\"p1\">](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)</ept>.","pos":[127,245],"source":" For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."}]}],"pos":[34801,35047],"yaml":true,"extradata":"MT"},{"content":"Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.","nodes":[{"pos":[0,117],"content":"Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.","nodes":[{"content":"Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.","pos":[0,117]}]}],"pos":[35377,35495],"yaml":true},{"content":"Compares two <xref href=\"System.Data.EntityKey\"></xref> objects.","nodes":[{"pos":[0,64],"content":"Compares two <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> objects.","source":"Compares two <xref href=\"System.Data.EntityKey\"></xref> objects."}],"pos":[36758,36823],"yaml":true},{"content":"Temporary keys have different comparison semantics than permanent keys:  \n  \n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \n  \n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \n  \n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.  \n  \n The equivalent method for this operator is <xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%2CSystem.Data.EntityKey%29?displayProperty=fullName>","nodes":[{"pos":[0,71],"content":"Temporary keys have different comparison semantics than permanent keys:","nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:","pos":[0,71]}]},{"pos":[81,282],"content":"Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.","nodes":[{"content":"Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.","pos":[0,201],"nodes":[{"content":"Temporary keys use reference equality.","pos":[0,38]},{"content":"That is, two references to the exact same temporary <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> instance are equal but no other <ph id=\"ph2\">&lt;xref:System.Data.EntityKey&gt;</ph> instances are equal.","pos":[39,201],"source":" That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal."}]}]},{"pos":[292,583],"content":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.","nodes":[{"content":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.","pos":[0,291],"nodes":[{"content":"Permanent keys determine equality based on the values of the contained key properties and the <ph id=\"ph1\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph>.","pos":[0,136],"source":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>."},{"content":"That is, you can have two separate <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> instances that are equal if their entity sets are the same and their key values are equal.","pos":[137,291],"source":" That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal."}]}]},{"pos":[590,705],"content":"In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.","nodes":[{"content":"In addition, temporary keys have no <ph id=\"ph1\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph> or key values, but permanent keys do.","pos":[0,115],"source":"In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do."}]},{"pos":[712,866],"content":"The equivalent method for this operator is <xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%2CSystem.Data.EntityKey%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%2CSystem.Data.EntityKey%29?displayProperty=fullName&gt;</ph>","pos":[0,154],"source":"The equivalent method for this operator is <xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%2CSystem.Data.EntityKey%29?displayProperty=fullName>"}]}],"pos":[36834,37711],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Data.EntityKey\"></xref> to compare.","nodes":[{"pos":[0,56],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> to compare.","source":"A <xref href=\"System.Data.EntityKey\"></xref> to compare."}],"pos":[37907,37964],"yaml":true},{"content":"A <xref href=\"System.Data.EntityKey\"></xref> to compare.","nodes":[{"pos":[0,56],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> to compare.","source":"A <xref href=\"System.Data.EntityKey\"></xref> to compare."}],"pos":[38032,38089],"yaml":true},{"content":"`true` if the <code>key1</code> and <code>key2</code> values are equal; otherwise, `false`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">key1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">key2</ph><ept id=\"p2\">&lt;/code&gt;</ept> values are equal; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>key1</code> and <code>key2</code> values are equal; otherwise, `false`."}],"pos":[38147,38241],"yaml":true},{"content":"Compares two <xref href=\"System.Data.EntityKey\"></xref> objects.","nodes":[{"pos":[0,64],"content":"Compares two <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> objects.","source":"Compares two <xref href=\"System.Data.EntityKey\"></xref> objects."}],"pos":[39383,39448],"yaml":true},{"content":"Temporary keys have different comparison semantics than permanent keys:  \n  \n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \n  \n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \n  \n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do.  \n  \n The equivalent method for this operator is <xref:System.Data.EntityKey.Compare%28System.Data.EntityKey%2CSystem.Data.EntityKey%29?displayProperty=fullName>","nodes":[{"pos":[0,71],"content":"Temporary keys have different comparison semantics than permanent keys:","nodes":[{"content":"Temporary keys have different comparison semantics than permanent keys:","pos":[0,71]}]},{"pos":[81,282],"content":"Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.","nodes":[{"content":"Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.","pos":[0,201],"nodes":[{"content":"Temporary keys use reference equality.","pos":[0,38]},{"content":"That is, two references to the exact same temporary <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> instance are equal but no other <ph id=\"ph2\">&lt;xref:System.Data.EntityKey&gt;</ph> instances are equal.","pos":[39,201],"source":" That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal."}]}]},{"pos":[292,583],"content":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.","nodes":[{"content":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.","pos":[0,291],"nodes":[{"content":"Permanent keys determine equality based on the values of the contained key properties and the <ph id=\"ph1\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph>.","pos":[0,136],"source":"Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>."},{"content":"That is, you can have two separate <ph id=\"ph1\">&lt;xref:System.Data.EntityKey&gt;</ph> instances that are equal if their entity sets are the same and their key values are equal.","pos":[137,291],"source":" That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal."}]}]},{"pos":[590,703],"content":"In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do.","nodes":[{"content":"In addition, temporary keys have no <ph id=\"ph1\">&lt;xref:System.Data.Metadata.Edm.EntitySet&gt;</ph> or key values, but regular keys do.","pos":[0,113],"source":"In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do."}]},{"pos":[710,865],"content":"The equivalent method for this operator is <xref:System.Data.EntityKey.Compare%28System.Data.EntityKey%2CSystem.Data.EntityKey%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Data.EntityKey.Compare%28System.Data.EntityKey%2CSystem.Data.EntityKey%29?displayProperty=fullName&gt;</ph>","pos":[0,155],"source":"The equivalent method for this operator is <xref:System.Data.EntityKey.Compare%28System.Data.EntityKey%2CSystem.Data.EntityKey%29?displayProperty=fullName>"}]}],"pos":[39459,40335],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Data.EntityKey\"></xref> to compare.","nodes":[{"pos":[0,56],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> to compare.","source":"A <xref href=\"System.Data.EntityKey\"></xref> to compare."}],"pos":[40533,40590],"yaml":true},{"content":"A <xref href=\"System.Data.EntityKey\"></xref> to compare.","nodes":[{"pos":[0,56],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Data.EntityKey\"&gt;&lt;/xref&gt;</ph> to compare.","source":"A <xref href=\"System.Data.EntityKey\"></xref> to compare."}],"pos":[40658,40715],"yaml":true},{"content":"`true` if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, `false`.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">key1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">key2</ph><ept id=\"p2\">&lt;/code&gt;</ept> values are not equal; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, `false`."}],"pos":[40773,40871],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.EntityKey\n  commentId: T:System.Data.EntityKey\n  id: EntityKey\n  children:\n  - System.Data.EntityKey.#ctor\n  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})\n  - System.Data.EntityKey.#ctor(System.String,System.String,System.Object)\n  - System.Data.EntityKey.EntityContainerName\n  - System.Data.EntityKey.EntityKeyValues\n  - System.Data.EntityKey.EntityNotValidKey\n  - System.Data.EntityKey.EntitySetName\n  - System.Data.EntityKey.Equals(System.Object)\n  - System.Data.EntityKey.Equals(System.Data.EntityKey)\n  - System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)\n  - System.Data.EntityKey.GetHashCode\n  - System.Data.EntityKey.IsTemporary\n  - System.Data.EntityKey.NoEntitySetKey\n  - System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)\n  - System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)\n  - System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)\n  - System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)\n  langs:\n  - csharp\n  name: EntityKey\n  nameWithType: EntityKey\n  fullName: System.Data.EntityKey\n  type: Class\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Provides a durable reference to an object that is an instance of an entity type.\n  remarks: \"The <xref:System.Data.EntityKey> objects are immutable; that is, after they are constructed they cannot be modified.  \\n  \\n For more information, see [Working with Entity Keys](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f).\"\n  example:\n  - \"These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The examples show you how to create and use an <xref:System.Data.EntityKey>.  \\n  \\n [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_trygetobjectbykey)]\\n [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_trygetobjectbykey)]  \\n  \\n [!code-csharp[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobjectusingkey)]\\n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobjectusingkey)]\"\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.DataContract(IsReference=true)]\n\n      public sealed class EntityKey : IEquatable<System.Data.EntityKey>\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.Data.EntityKey}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.Serialization.DataContractAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.#ctor\n  commentId: M:System.Data.EntityKey.#ctor\n  id: '#ctor'\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityKey()\n  nameWithType: EntityKey.EntityKey()\n  fullName: EntityKey.EntityKey()\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class.\n  syntax:\n    content: public EntityKey ();\n    parameters: []\n  overload: System.Data.EntityKey.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  commentId: M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})'\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityKey(String, IEnumerable<KeyValuePair<String,Object>>)\n  nameWithType: EntityKey.EntityKey(String, IEnumerable<KeyValuePair<String,Object>>)\n  fullName: EntityKey.EntityKey(String, IEnumerable<KeyValuePair<String,Object>>)\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and a generic <xref href=\"System.Collections.Generic.KeyValuePair\"></xref> collection.\n  remarks: ''\n  example:\n  - \"This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \\n  \\n [!code-csharp[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobjectusingkey)]\\n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobjectusingkey)]\"\n  syntax:\n    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>> entityKeyValues);\n    parameters:\n    - id: qualifiedEntitySetName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that is the entity set name qualified by the entity container name.\n    - id: entityKeyValues\n      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n      description: \"A generic <xref href=\\\"System.Collections.Generic.KeyValuePair\\\"></xref> collection.  \\n  \\n Each key/value pair has a property name as the key and the value of that property as the value. There should be one pair for each property that is part of the <xref href=\\\"System.Data.EntityKey\\\"></xref>. The order of the key/value pairs is not important, but each key property should be included. The property names are simple names that are not qualified with an entity type name or the schema name.\"\n  overload: System.Data.EntityKey.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})\n  commentId: M:System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})\n  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})'\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityKey(String, IEnumerable<EntityKeyMember>)\n  nameWithType: EntityKey.EntityKey(String, IEnumerable<EntityKeyMember>)\n  fullName: EntityKey.EntityKey(String, IEnumerable<EntityKeyMember>)\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and an <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of <xref href=\"System.Data.EntityKeyMember\"></xref> objects.\n  syntax:\n    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember> entityKeyValues);\n    parameters:\n    - id: qualifiedEntitySetName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that is the entity set name qualified by the entity container name.\n    - id: entityKeyValues\n      type: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}\n      description: An <xref href=\"System.Collections.Generic.IEnumerable`1\"></xref> collection of <xref href=\"System.Data.EntityKeyMember\"></xref> objects with which to initialize the key.\n  overload: System.Data.EntityKey.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)\n  commentId: M:System.Data.EntityKey.#ctor(System.String,System.String,System.Object)\n  id: '#ctor(System.String,System.String,System.Object)'\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityKey(String, String, Object)\n  nameWithType: EntityKey.EntityKey(String, String, Object)\n  fullName: EntityKey.EntityKey(String, String, Object)\n  type: Constructor\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Initializes a new instance of the <xref href=\"System.Data.EntityKey\"></xref> class with an entity set name and specific entity key pair.\n  remarks: ''\n  example:\n  - \"This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \\n  \\n [!code-csharp[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobjectusingkey)]\\n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobjectusingkey)]\"\n  syntax:\n    content: public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);\n    parameters:\n    - id: qualifiedEntitySetName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that is the entity set name qualified by the entity container name.\n    - id: keyName\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that is the name of the key.\n    - id: keyValue\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that is the key value.\n  overload: System.Data.EntityKey.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.EntityContainerName\n  commentId: P:System.Data.EntityKey.EntityContainerName\n  id: EntityContainerName\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityContainerName\n  nameWithType: EntityKey.EntityContainerName\n  fullName: EntityKey.EntityContainerName\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Gets or sets the name of the entity container.\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.DataMember]\n\n      public string EntityContainerName { get; set; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> value that is the name of the entity container for the entity to which the <xref href=\"System.Data.EntityKey\"></xref> belongs.\n  overload: System.Data.EntityKey.EntityContainerName*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.Serialization.DataMemberAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.EntityKeyValues\n  commentId: P:System.Data.EntityKey.EntityKeyValues\n  id: EntityKeyValues\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityKeyValues\n  nameWithType: EntityKey.EntityKeyValues\n  fullName: EntityKey.EntityKeyValues\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Gets or sets the key values associated with this <xref href=\"System.Data.EntityKey\"></xref>.\n  remarks: \"The <xref:System.Data.EntityKey> class contains a copy of the values that make up the logical key that is specified for this type of entity.  \\n  \\n The members of the <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> each have a property name and a value in a <xref:System.Collections.Generic.KeyValuePair%602>, where the key is the property name and the value is the actual value of that property on the object.\"\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.DataMember]\n\n      public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }\n    return:\n      type: System.Data.EntityKeyMember[]\n      description: A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of key values for this <xref href=\"System.Data.EntityKey\"></xref>.\n  overload: System.Data.EntityKey.EntityKeyValues*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.Serialization.DataMemberAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.EntityNotValidKey\n  commentId: F:System.Data.EntityKey.EntityNotValidKey\n  id: EntityNotValidKey\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntityNotValidKey\n  nameWithType: EntityKey.EntityNotValidKey\n  fullName: EntityKey.EntityNotValidKey\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: A simple <xref href=\"System.Data.EntityKey\"></xref> identifying an entity that resulted from a failed [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operation.\n  remarks: There are various ways to get an invalid entity. The most common scenario is when an [!INCLUDE[esql](~/includes/esql-md.md)] query uses the [TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) operator to interpret an instance of a polymorphic type as a particular type, and the instance in question does not match. ([TREAT](~/docs/framework/data/adonet/ef/language-reference/treat-entity-sql.md) is similar to the C# `as` operator). In this case, the query returns an entity that is not valid, and the entity key of the resulting entity is set to <xref:System.Data.EntityKey.EntityNotValidKey>.\n  syntax:\n    content: public static readonly System.Data.EntityKey EntityNotValidKey;\n    return:\n      type: System.Data.EntityKey\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.EntitySetName\n  commentId: P:System.Data.EntityKey.EntitySetName\n  id: EntitySetName\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: EntitySetName\n  nameWithType: EntityKey.EntitySetName\n  fullName: EntityKey.EntitySetName\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Gets or sets the name of the entity set.\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.DataMember]\n\n      public string EntitySetName { get; set; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> value that is the name of the entity set for the entity to which the <xref href=\"System.Data.EntityKey\"></xref> belongs.\n  overload: System.Data.EntityKey.EntitySetName*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.Serialization.DataMemberAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.Equals(System.Object)\n  commentId: M:System.Data.EntityKey.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: EntityKey.Equals(Object)\n  fullName: EntityKey.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Returns a value that indicates whether this instance is equal to a specified object.\n  remarks: \"Temporary keys have different comparison semantics than permanent keys:  \\n  \\n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \\n  \\n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their <xref:System.Data.Metadata.Edm.EntitySet> objects are the same and their key values are equal.  \\n  \\n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.\"\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> to compare with this instance.\n    return:\n      type: System.Boolean\n      description: '`true` if this instance and <code>obj</code> have equal values; otherwise, `false`.'\n  overload: System.Data.EntityKey.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)\n  commentId: M:System.Data.EntityKey.Equals(System.Data.EntityKey)\n  id: Equals(System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: Equals(EntityKey)\n  nameWithType: EntityKey.Equals(EntityKey)\n  fullName: EntityKey.Equals(EntityKey)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Returns a value that indicates whether this instance is equal to a specified <xref href=\"System.Data.EntityKey\"></xref>.\n  remarks: \"Temporary keys have different comparison semantics than permanent keys:  \\n  \\n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \\n  \\n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \\n  \\n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.\"\n  syntax:\n    content: public bool Equals (System.Data.EntityKey other);\n    parameters:\n    - id: other\n      type: System.Data.EntityKey\n      description: An <xref href=\"System.Data.EntityKey\"></xref> object to compare with this instance.\n    return:\n      type: System.Boolean\n      description: '`true` if this instance and <code>other</code> have equal values; otherwise, `false`.'\n  overload: System.Data.EntityKey.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)\n  commentId: M:System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)\n  id: GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: GetEntitySet(MetadataWorkspace)\n  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)\n  fullName: EntityKey.GetEntitySet(MetadataWorkspace)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Gets the entity set for this entity key from the given metadata workspace.\n  remarks: The entity set is accessed based on the entity container name and entity set name of the key.\n  syntax:\n    content: public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);\n    parameters:\n    - id: metadataWorkspace\n      type: System.Data.Metadata.Edm.MetadataWorkspace\n      description: The metadata workspace that contains the entity.\n    return:\n      type: System.Data.Metadata.Edm.EntitySet\n      description: The <xref href=\"System.Data.Metadata.Edm.EntitySet\"></xref> for the entity key.\n  overload: System.Data.EntityKey.GetEntitySet*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The entity set could not be located in the specified metadata workspace.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.GetHashCode\n  commentId: M:System.Data.EntityKey.GetHashCode\n  id: GetHashCode\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: EntityKey.GetHashCode()\n  fullName: EntityKey.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Serves as a hash function for the current <xref href=\"System.Data.EntityKey\"></xref> object. <xref href=\"System.Data.EntityKey.GetHashCode\"></xref> is suitable for hashing algorithms and data structures such as a hash table.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Data.EntityKey\"></xref>.\n  overload: System.Data.EntityKey.GetHashCode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.IsTemporary\n  commentId: P:System.Data.EntityKey.IsTemporary\n  id: IsTemporary\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: IsTemporary\n  nameWithType: EntityKey.IsTemporary\n  fullName: EntityKey.IsTemporary\n  type: Property\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Gets a value that indicates whether the <xref href=\"System.Data.EntityKey\"></xref> is temporary.\n  remarks: \"When a new entity is created, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] defines temporary key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `true`. When you call the <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> method, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] assigns a permanent key and sets the <xref:System.Data.EntityKey.IsTemporary%2A> property to `false`.  \\n  \\n> [!NOTE]\\n>  Temporary keys are constructed automatically by the framework; they cannot be constructed directly by a user.  \\n  \\n Temporary keys have different comparison semantics than permanent keys:  \\n  \\n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \\n  \\n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \\n  \\n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.  \\n  \\n When the <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A> method is called on an entity's <xref:System.Data.Objects.ObjectStateEntry> and the entity transitions from the <xref:System.Data.EntityState.Added> state to <xref:System.Data.EntityState.Unchanged> state, the [!INCLUDE[adonet_ef](~/includes/adonet-ef-md.md)] automatically computes a new permanent key for the entity and synchronizes all temporary key references.\"\n  syntax:\n    content: public bool IsTemporary { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Data.EntityKey\"></xref> is temporary; otherwise, `false`.'\n  overload: System.Data.EntityKey.IsTemporary*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.NoEntitySetKey\n  commentId: F:System.Data.EntityKey.NoEntitySetKey\n  id: NoEntitySetKey\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: NoEntitySetKey\n  nameWithType: EntityKey.NoEntitySetKey\n  fullName: EntityKey.NoEntitySetKey\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: A singleton <xref href=\"System.Data.EntityKey\"></xref> by which a read-only entity is identified.\n  remarks: A read-only entity identifies an entity that is valid in every way, except that it is not associated with an actual entity set. This can occur as part of the result of an [!INCLUDE[esql](~/includes/esql-md.md)] query that constructs and returns an entity instance specified within the text of the query (as opposed to an entity that was retrieved from a database table). An entity that does not have an entity set cannot be persisted to the database until it is associated with some entity set. Therefore, the object materializer will treat this kind of entity as if the <xref:System.Data.Objects.MergeOption.NoTracking> merge option was specified, regardless of the actual merge option that was specified. An entity object will be created, but its identity will not be resolved and it will not be added to the state manager as part of the materialization process.\n  syntax:\n    content: public static readonly System.Data.EntityKey NoEntitySetKey;\n    return:\n      type: System.Data.EntityKey\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)\n  id: OnDeserialized(System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: OnDeserialized(StreamingContext)\n  nameWithType: EntityKey.OnDeserialized(StreamingContext)\n  fullName: EntityKey.OnDeserialized(StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Helper method that is used to deserialize an <xref href=\"System.Data.EntityKey\"></xref>.\n  remarks: <xref:System.Data.EntityKey.OnDeserialized%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>. For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Runtime.Serialization.OnDeserialized]\n\n      public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Describes the source and destination of a given serialized stream and provides an additional caller-defined context.\n  overload: System.Data.EntityKey.OnDeserialized*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Runtime.Serialization.OnDeserializedAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)\n  id: OnDeserializing(System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: OnDeserializing(StreamingContext)\n  nameWithType: EntityKey.OnDeserializing(StreamingContext)\n  fullName: EntityKey.OnDeserializing(StreamingContext)\n  type: Method\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Helper method that is used to deserialize an <xref href=\"System.Data.EntityKey\"></xref>.\n  remarks: <xref:System.Data.EntityKey.OnDeserializing%2A> is used by Object Services when deserializing an <xref:System.Data.EntityKey>. For more information, see [Serializing Objects](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99).\n  syntax:\n    content: >-\n      [System.ComponentModel.Browsable(false)]\n\n      [System.Runtime.Serialization.OnDeserializing]\n\n      public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.\n  overload: System.Data.EntityKey.OnDeserializing*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.BrowsableAttribute\n  - type: System.Runtime.Serialization.OnDeserializingAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)\n  commentId: M:System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)\n  id: op_Equality(System.Data.EntityKey,System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: op_Equality(EntityKey, EntityKey)\n  nameWithType: EntityKey.op_Equality(EntityKey, EntityKey)\n  fullName: EntityKey.op_Equality(EntityKey, EntityKey)\n  type: Operator\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Compares two <xref href=\"System.Data.EntityKey\"></xref> objects.\n  remarks: \"Temporary keys have different comparison semantics than permanent keys:  \\n  \\n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \\n  \\n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \\n  \\n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but permanent keys do.  \\n  \\n The equivalent method for this operator is <xref:System.Data.EntityKey.Equals%28System.Data.EntityKey%2CSystem.Data.EntityKey%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_Equality (System.Data.EntityKey key1, System.Data.EntityKey key2);\n    parameters:\n    - id: key1\n      type: System.Data.EntityKey\n      description: A <xref href=\"System.Data.EntityKey\"></xref> to compare.\n    - id: key2\n      type: System.Data.EntityKey\n      description: A <xref href=\"System.Data.EntityKey\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>key1</code> and <code>key2</code> values are equal; otherwise, `false`.'\n  overload: System.Data.EntityKey.op_Equality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)\n  commentId: M:System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)\n  id: op_Inequality(System.Data.EntityKey,System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  langs:\n  - csharp\n  name: op_Inequality(EntityKey, EntityKey)\n  nameWithType: EntityKey.op_Inequality(EntityKey, EntityKey)\n  fullName: EntityKey.op_Inequality(EntityKey, EntityKey)\n  type: Operator\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data\n  summary: Compares two <xref href=\"System.Data.EntityKey\"></xref> objects.\n  remarks: \"Temporary keys have different comparison semantics than permanent keys:  \\n  \\n-   Temporary keys use reference equality. That is, two references to the exact same temporary <xref:System.Data.EntityKey> instance are equal but no other <xref:System.Data.EntityKey> instances are equal.  \\n  \\n-   Permanent keys determine equality based on the values of the contained key properties and the <xref:System.Data.Metadata.Edm.EntitySet>. That is, you can have two separate <xref:System.Data.EntityKey> instances that are equal if their entity sets are the same and their key values are equal.  \\n  \\n In addition, temporary keys have no <xref:System.Data.Metadata.Edm.EntitySet> or key values, but regular keys do.  \\n  \\n The equivalent method for this operator is <xref:System.Data.EntityKey.Compare%28System.Data.EntityKey%2CSystem.Data.EntityKey%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);\n    parameters:\n    - id: key1\n      type: System.Data.EntityKey\n      description: A <xref href=\"System.Data.EntityKey\"></xref> to compare.\n    - id: key2\n      type: System.Data.EntityKey\n      description: A <xref href=\"System.Data.EntityKey\"></xref> to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, `false`.'\n  overload: System.Data.EntityKey.op_Inequality*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Data.EntityKey.#ctor\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKey()\n  nameWithType: EntityKey.EntityKey()\n  fullName: EntityKey.EntityKey()\n- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKey(String, IEnumerable<KeyValuePair<String,Object>>)\n  nameWithType: EntityKey.EntityKey(String, IEnumerable<KeyValuePair<String,Object>>)\n  fullName: EntityKey.EntityKey(String, IEnumerable<KeyValuePair<String,Object>>)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.KeyValuePair`2\n  name: KeyValuePair<TKey,TValue>\n  nameWithType: KeyValuePair<TKey,TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>\n- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<KeyValuePair<String,Object>>\n  nameWithType: IEnumerable<KeyValuePair<String,Object>>\n  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKey(String, IEnumerable<EntityKeyMember>)\n  nameWithType: EntityKey.EntityKey(String, IEnumerable<EntityKeyMember>)\n  fullName: EntityKey.EntityKey(String, IEnumerable<EntityKeyMember>)\n- uid: System.Data.EntityKeyMember\n  name: EntityKeyMember\n  nameWithType: EntityKeyMember\n  fullName: System.Data.EntityKeyMember\n- uid: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<EntityKeyMember>\n  nameWithType: IEnumerable<EntityKeyMember>\n  fullName: System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.EntityKeyMember\n    name: EntityKeyMember\n    nameWithType: EntityKeyMember\n    fullName: System.Data.EntityKeyMember\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKey(String, String, Object)\n  nameWithType: EntityKey.EntityKey(String, String, Object)\n  fullName: EntityKey.EntityKey(String, String, Object)\n- uid: System.Data.EntityKey.EntityContainerName\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityContainerName\n  nameWithType: EntityKey.EntityContainerName\n  fullName: EntityKey.EntityContainerName\n- uid: System.Data.EntityKey.EntityKeyValues\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKeyValues\n  nameWithType: EntityKey.EntityKeyValues\n  fullName: EntityKey.EntityKeyValues\n- uid: System.Data.EntityKeyMember[]\n  parent: System.Data\n  isExternal: false\n  name: EntityKeyMember[]\n  nameWithType: EntityKeyMember[]\n  fullName: System.Data.EntityKeyMember[]\n  spec.csharp:\n  - uid: System.Data.EntityKeyMember\n    name: EntityKeyMember\n    nameWithType: EntityKeyMember\n    fullName: System.Data.EntityKeyMember\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Data.EntityKey.EntityNotValidKey\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityNotValidKey\n  nameWithType: EntityKey.EntityNotValidKey\n  fullName: EntityKey.EntityNotValidKey\n- uid: System.Data.EntityKey\n  parent: System.Data\n  isExternal: false\n  name: EntityKey\n  nameWithType: EntityKey\n  fullName: System.Data.EntityKey\n- uid: System.Data.EntityKey.EntitySetName\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntitySetName\n  nameWithType: EntityKey.EntitySetName\n  fullName: EntityKey.EntitySetName\n- uid: System.Data.EntityKey.Equals(System.Object)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: EntityKey.Equals(Object)\n  fullName: EntityKey.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: Equals(EntityKey)\n  nameWithType: EntityKey.Equals(EntityKey)\n  fullName: EntityKey.Equals(EntityKey)\n- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: GetEntitySet(MetadataWorkspace)\n  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)\n  fullName: EntityKey.GetEntitySet(MetadataWorkspace)\n- uid: System.Data.Metadata.Edm.EntitySet\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: EntitySet\n  nameWithType: EntitySet\n  fullName: System.Data.Metadata.Edm.EntitySet\n- uid: System.Data.Metadata.Edm.MetadataWorkspace\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: MetadataWorkspace\n  nameWithType: MetadataWorkspace\n  fullName: System.Data.Metadata.Edm.MetadataWorkspace\n- uid: System.Data.EntityKey.GetHashCode\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: EntityKey.GetHashCode()\n  fullName: EntityKey.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Data.EntityKey.IsTemporary\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: IsTemporary\n  nameWithType: EntityKey.IsTemporary\n  fullName: EntityKey.IsTemporary\n- uid: System.Data.EntityKey.NoEntitySetKey\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: NoEntitySetKey\n  nameWithType: EntityKey.NoEntitySetKey\n  fullName: EntityKey.NoEntitySetKey\n- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: OnDeserialized(StreamingContext)\n  nameWithType: EntityKey.OnDeserialized(StreamingContext)\n  fullName: EntityKey.OnDeserialized(StreamingContext)\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: OnDeserializing(StreamingContext)\n  nameWithType: EntityKey.OnDeserializing(StreamingContext)\n  fullName: EntityKey.OnDeserializing(StreamingContext)\n- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: op_Equality(EntityKey, EntityKey)\n  nameWithType: EntityKey.op_Equality(EntityKey, EntityKey)\n  fullName: EntityKey.op_Equality(EntityKey, EntityKey)\n- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: op_Inequality(EntityKey, EntityKey)\n  nameWithType: EntityKey.op_Inequality(EntityKey, EntityKey)\n  fullName: EntityKey.op_Inequality(EntityKey, EntityKey)\n- uid: System.Data.EntityKey.#ctor*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKey\n  nameWithType: EntityKey.EntityKey\n  fullName: EntityKey.EntityKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.EntityContainerName*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityContainerName\n  nameWithType: EntityKey.EntityContainerName\n  fullName: EntityKey.EntityContainerName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.EntityKeyValues*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntityKeyValues\n  nameWithType: EntityKey.EntityKeyValues\n  fullName: EntityKey.EntityKeyValues\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.EntitySetName*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: EntitySetName\n  nameWithType: EntityKey.EntitySetName\n  fullName: EntityKey.EntitySetName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.Equals*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: Equals\n  nameWithType: EntityKey.Equals\n  fullName: EntityKey.Equals\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.GetEntitySet*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: GetEntitySet\n  nameWithType: EntityKey.GetEntitySet\n  fullName: EntityKey.GetEntitySet\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.GetHashCode*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: GetHashCode\n  nameWithType: EntityKey.GetHashCode\n  fullName: EntityKey.GetHashCode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.IsTemporary*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: IsTemporary\n  nameWithType: EntityKey.IsTemporary\n  fullName: EntityKey.IsTemporary\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.OnDeserialized*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: OnDeserialized\n  nameWithType: EntityKey.OnDeserialized\n  fullName: EntityKey.OnDeserialized\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.OnDeserializing*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: OnDeserializing\n  nameWithType: EntityKey.OnDeserializing\n  fullName: EntityKey.OnDeserializing\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.op_Equality*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: op_Equality\n  nameWithType: EntityKey.op_Equality\n  fullName: EntityKey.op_Equality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Data.EntityKey.op_Inequality*\n  parent: System.Data.EntityKey\n  isExternal: false\n  name: op_Inequality\n  nameWithType: EntityKey.op_Inequality\n  fullName: EntityKey.op_Inequality\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data/EntityKey.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IEquatable`1\n  name: IEquatable<T>\n  nameWithType: IEquatable<T>\n  fullName: System.IEquatable<T>\n- uid: System.IEquatable{System.Data.EntityKey}\n  parent: System\n  isExternal: false\n  name: IEquatable<EntityKey>\n  nameWithType: IEquatable<EntityKey>\n  fullName: System.IEquatable<System.Data.EntityKey>\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Data.EntityKey\n    name: EntityKey\n    nameWithType: EntityKey\n    fullName: System.Data.EntityKey\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n"}