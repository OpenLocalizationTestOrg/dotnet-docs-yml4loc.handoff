<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">34d3a090b17bec723cf8e6b38a7f82bdce067ce0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ArgumentOutOfRangeException.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8b506cbdcca4183ab22d49818949df85723c00e0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9f558a8f2ae3c1e80221b4310f148307678a17a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>An              <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception is thrown when a method is invoked and at least one of the arguments passed to the method is not <ph id="ph2">`null`</ph> and contains an invalid value that is not a member of the set of values expected for the argument.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property identifies the invalid argument, and the <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property, if a value is present, identifies the invalid value.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> results from developer error.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead of handling the exception in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block, you should eliminate the cause of the exception or, if the argument is returned by a method call or input by the user before being passed to the method that throws the exception, you should validate arguments before passing them to the method.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> is used extensively by:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Classes in the <ph id="ph1">&lt;xref:System.Collections&gt;</ph> and <ph id="ph2">&lt;xref:System.IO&gt;</ph> namespaces.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Array&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>String manipulation methods in the <ph id="ph1">&lt;xref:System.String&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>The conditions in which an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception             is thrown include the following:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You are retrieving the member of a collection by its index number, and the index number is invalid.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is the most common cause of an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the index number is invalid for one of three reasons:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The collection has no members, and your code assumes that it does.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example attempts to retrieve the first element of a collection that has no elements:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements.cs#4)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent the exception, check whether the collection's <ph id="ph1">`Count`</ph> property is greater than zero before attempting to retrieve any members, as the following code fragment does.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#5<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements.cs#5)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#5<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements.vb#5)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, this may occur because you are attempting to add a member to a collection by using an index that does not exist, rather than by calling the method, such as <ph id="ph1">`Add`</ph>, that exists for this purpose.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example attempts to add an element to a collection by using a non-existent index rather than calling the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#13<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements2.cs#13)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#13<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements2.vb#13)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code fragment corrects this error:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#14<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoElements2.cs#14)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#14<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoElements2.vb#14)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>You're attempting to retrieve an item whose index is negative.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>This usually occurs because you've searched a collection for the index of a particular element and have erroneously assumed that the search is successful.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the following example, the call to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29?displayProperty=fullName&gt;</ph> method fails  to find a string equal to "Z" and so returns -1.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this is an invalid index value.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#6<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/BadSearch.cs#6)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#6<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/BadSearch.vb#6)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent the exception, check that the search is successful by making sure that the returned index is greater than or equal to zero before attempting to retrieve the item from the collection, as the following code fragment does.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#7<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/BadSearch.cs#7)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#7<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/BadSearch.vb#7)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>You're attempting to retrieve an element whose index is equal to the value of the collection's <ph id="ph1">`Count`</ph> property, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#8<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR2.cs#8)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#8<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR2.vb#8)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because collections in the .NET Framework use zero-based indexing, the first element of the collection is at index 0, and the last element is at index <ph id="ph1">`Count`</ph> - 1.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can eliminate the error by ensuring that you access the last element at index  <ph id="ph1">`Count`</ph> - 1, as the following code does.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#9<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR2.cs#9)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#9<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR2.vb#9)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>You are attempting to perform a string operation by calling a string manipulation method, and the starting index does not exist in the string.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Overloads of methods such as such as <ph id="ph1">&lt;xref:System.String.Compare%2A?displayProperty=fullName&gt;</ph>, <ph id="ph2">&lt;xref:System.String.CompareOrdinal%2A?displayProperty=fullName&gt;</ph>, <ph id="ph3">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph>, <ph id="ph4">&lt;xref:System.String.IndexOfAny%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.String.Insert%2A?displayProperty=fullName&gt;</ph>, <ph id="ph6">&lt;xref:System.String.LastIndexOf%2A?displayProperty=fullName&gt;</ph>, <ph id="ph7">&lt;xref:System.String.LastIndexOfAny%2A?displayProperty=fullName&gt;</ph>, <ph id="ph8">&lt;xref:System.String.Remove%2A&gt;</ph>,  or <ph id="ph9">&lt;xref:System.String.Substring%2A?displayProperty=fullName&gt;</ph> that allow you to specify the starting index of the operation require that the index be a valid position within the string.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>Valid indexes range from 0 to <ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=fullName&gt;</ph> - 1.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are four common causes of this <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>You are working with an empty string., or <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because its <ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=fullName&gt;</ph> property returns 0, any attempt to manipulate it by index throws an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example, defines a <ph id="ph1">`GetFirstCharacter`</ph> method that returns the first character of a string.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the string is empty, as the final string passed to the method is, the method throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#15<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/EmptyString1.cs#15)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#15<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/EmptyString1.vb#15)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can eliminate the exception by testing whether the string's <ph id="ph1">&lt;xref:System.String.Length%2A?displayProperty=fullName&gt;</ph> is greater than zero or by calling the <ph id="ph2">&lt;xref:System.String.IsNullOrEmpty%2A&gt;</ph> method to ensure that the string is not <ph id="ph3">`null`</ph> or empty.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code fragment does the latter.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, if the string is <ph id="ph1">`null`</ph> or empty, the <ph id="ph2">`GetFirstCharacter`</ph> method returns U+0000.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#16<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/EmptyString1.cs#16)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#16<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/EmptyString1.vb#16)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>You're manipulating a string based on the position of a substring within that string, and you've failed to determine whether the substring was actually found.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example extracts the second word of a two-word phrase.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>It throws  an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception if the phrase consists of only one word, and therefore does not contain an embedded space character.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>This occurs because the call to the <ph id="ph1">&lt;xref:System.String.IndexOf%28System.String%29?displayProperty=fullName&gt;</ph> method returns -1 to indicate that the search failed, and this invalid value is then passed to the  <ph id="ph2">&lt;xref:System.String.Substring%28System.Int32%29?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#17<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoFind1.cs#17)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#17<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoFind1.vb#17)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>To eliminate the exception, validate the value returned by the string search method before calling the string manipulation method.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#18<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/NoFind2.cs#18)</ept><ept id="p1">]</ept>  <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#18<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/NoFind2.vb#18)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>You've attempted to extract a substring that is outside the range of the current string.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The methods that extract substrings all require that you specify the starting position of the substring and, for substrings that do not continue to the end of the string, the number of characters in the substring.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Note that this is not the <bpt id="p1">*</bpt>index<ept id="p1">*</ept> of the last character in the substring.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception is typically thrown in this case because you've incorrectly calculated the number of characters in the substring.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you are using a search method like <ph id="ph1">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph> to identify the starting and ending positions of a substring:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the character in the ending position returned by <ph id="ph1">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph> is to be included in the substring, the ending position of the substring is given by the formula</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the character in the ending position returned by <ph id="ph1">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph> is to be excluded from the substring, the ending position of the substring is given by the formula</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example defines a <ph id="ph1">`FindWords`</ph> method that uses the <ph id="ph2">&lt;xref:System.String.IndexOfAny%28System.Char%5B%5D%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> method to identify space characters and punctuation marks in a string and returns an array that contains the words found in the string.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#19<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/FindWords1.cs#19)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#19<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/FindWords1.vb#19)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>You have passed a negative number to a method with an argument that requires only positive numbers and zero, or you have passed either a negative number or zero to a method with an argument that requires only positive numbers.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the <ph id="ph1">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName&gt;</ph> method requires that you specify the number of elements in each dimension of a two-dimensional array; valid values for each dimension can range from 0 to <ph id="ph2">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>But because the dimension argument in the following example has a negative value, the method throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#1<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#1)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#1<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#1)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>To correct the error, ensure that the value of the invalid argument is non-negative.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can do this by providing a valid value, as the following code fragment does.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also validate the input and, if it is invalid, take some action.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following code fragment displays an error message instead of calling the method.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/OOR1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/OOR1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>A race condition exists in an app that is multithreaded or has tasks that  execute asynchronously and that updates an array or collection.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example uses a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object to populate a collection of <ph id="ph2">`Continent`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>It throws an  <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception if the example attempts to display the seven items in the collection before the collection is fully populated.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#11<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/Race1.cs#11)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#11<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/Race1.vb#11)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, two resources are accessed from multiple threads:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`continents`</ph> collection.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>Its <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.Add%2A?displayProperty=fullName&gt;</ph> method is called from multiple threads.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, the main or primary thread assumes the collection is fully populated with seven elements when it iterates its members.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`msg`</ph> string, which is concatenated from multiple threads.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>To correct the error, ensure that shared state is accessed in a thread-safe way, as follows.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>if your app uses an array or collection object, consider using a thread-safe collection class, such as the types in the <ph id="ph1">&lt;xref:System.Collections.Concurrent&gt;</ph> namespace or the <bpt id="p1">[</bpt>System.Collections.Immutable<ept id="p1">](../Topic/System.Collections.Immutable.md)</ept> out-of-band release.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ensure that shared state (that is, resources that can be accessed by multiple threads) is accessed in a thread-safe way, so that only one thread at a time has exclusive access to the resources.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>A large number of classes, such as <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.Interlocked&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.Monitor&gt;</ph>, and <ph id="ph4">&lt;xref:System.Threading.Mutex&gt;</ph>, are available to synchronize access to resources.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Threading<ept id="p1">](http://msdn.microsoft.com/library/7b46a7d9-c6f1-46d1-a947-ae97471bba87)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, language support is available through the <bpt id="p1">[</bpt>lock<ept id="p1">](~/docs/csharp/language-reference/keywords/lock-statement.md)</ept> statement in C# and the <bpt id="p2">[</bpt>SyncLock<ept id="p2">](~/docs/visual-basic/language-reference/statements/synclock-statement.md)</ept> construct in Visual Basic.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following example addresses the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> exception and the other issues from the previous example.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>It replaces the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object with a   <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentBag%601&gt;</ph> object to ensure that access to the collection is thread-safe, uses a <ph id="ph3">&lt;xref:System.Threading.CountdownEvent&gt;</ph> object to ensure that the application thread continues only after other threads have executed, and uses a lock to ensure that only one thread can  access the <ph id="ph4">`msg`</ph> variable at a time.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.ArgumentOutOfRangeException#12<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/cs/Race2.cs#12)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.ArgumentOutOfRangeException#12<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ArgumentOutOfRangeException/vb/Race2.vb#12)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> uses the HRESULT COR_E_ARGUMENTOUTOFRANGE, which has the value 0x80131502.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> constructors.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ArgumentOutOfRangeException"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentException.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "Nonnegative number required."</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>This message takes into account the current system culture.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The localized error message string.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ArgumentOutOfRangeException"&gt;&lt;/xref&gt;</ph> class with the name of the parameter that causes this exception.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentException.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "Nonnegative number required."</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>This message takes into account the current system culture.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property of the new instance using the <ph id="ph2">`paramName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of <ph id="ph1">`paramName`</ph> is intended to be understood by humans.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>The empty string ("").</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parameter name string.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The name of the parameter that causes this exception.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ArgumentOutOfRangeException"&gt;&lt;/xref&gt;</ph> class with serialized data.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/framework/serialization/xml-and-soap-serialization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The object that holds the serialized object data.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>An object that describes the source or destination of the serialized data.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ArgumentOutOfRangeException"&gt;&lt;/xref&gt;</ph> class with a specified error message and the exception that is the cause of this exception.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The error message that explains the reason for this exception.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The exception that is the cause of the current exception, or a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic) if no inner exception is specified.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ArgumentOutOfRangeException"&gt;&lt;/xref&gt;</ph> class with the name of the parameter that causes this exception and a specified error message.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.Message%2A&gt;</ph> property of the new instance using the value of the <ph id="ph2">`message`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the <ph id="ph1">`message`</ph> parameter is intended to be understood by humans.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property of the new instance using the <ph id="ph2">`paramName`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of <ph id="ph1">`paramName`</ph> is intended to be understood by humans.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>The error message string.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parameter name string.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The name of the parameter that caused the exception.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The message that describes the error.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ArgumentOutOfRangeException"&gt;&lt;/xref&gt;</ph> class with the parameter name, the value of the argument, and a specified error message.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.ArgumentException.ParamName%2A&gt;</ph> property of the new instance using the <ph id="ph2">`paramName`</ph> parameter, the <ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property using the <ph id="ph4">`actualValue`</ph> parameter, and the <ph id="ph5">&lt;xref:System.ArgumentException.Message%2A&gt;</ph> property using the <ph id="ph6">`message`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The content of the <ph id="ph1">`paramName`</ph> and <ph id="ph2">`message`</ph> parameters is intended to be understood by humans.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller of this constructor is required to ensure that these strings have been localized for the current system culture.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`actualValue`</ph> parameter is not used within the .NET Framework class library.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property is provided so that applications can use the available argument value.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`actualValue`</ph> parameter contains an invalid value that is passed to the method and causes this exception to be thrown.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>This value is stored in the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property and its string representation is appended to the message string held in the <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException.Message%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Property</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The argument value.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>The error message string.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parameter name string.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The name of the parameter that caused the exception.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The value of the argument that causes this exception.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The message that describes the error.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Gets the argument value that causes this exception.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property to retrieve the invalid argument.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`ActualValue`</ph> property returns the same value that was passed to the constructor, or <ph id="ph2">`null`</ph> if no value was supplied.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property is assigned a value at the time of object construction.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property value is not <ph id="ph2">`null`</ph>, a string representation of the value is appended to the message string held by the <ph id="ph3">&lt;xref:System.ArgumentOutOfRangeException.Message%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property is not used within the .NET Framework class library.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>It carries a null value in all the <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> objects thrown by the .NET Framework class library.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.ActualValue%2A&gt;</ph> property is provided so that applications can use the available argument value.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is read-only and should be overridden only to customize the content or format of the value.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`Object`</ph> that contains the value of the parameter that caused the current <ph id="ph2">&lt;xref href="System.Exception"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">&lt;xref href="System.Runtime.Serialization.SerializationInfo"&gt;&lt;/xref&gt;</ph> object with the invalid argument value and additional exception information.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException.GetObjectData%2A&gt;</ph> sets a <ph id="ph2">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> object with all the exception object data targeted for serialization.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>During deserialization, the exception object is reconstituted from the <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> transmitted over the stream.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The object that holds the serialized object data.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>An object that describes the source or destination of the serialized data.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">info</ph><ept id="p1">&lt;/code&gt;</ept> object is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Gets the error message and the string representation of the invalid argument value, or only the error message if the argument value is null.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property overrides <ph id="ph1">&lt;xref:System.ArgumentException.Message%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>The error message should describe the expected values of the parameter that causes this exception.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>The error message should be localized.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>The text message for this exception.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The value of this property takes one of two forms, as follows.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;code&gt;actualValue&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;code&gt;message&lt;/code&gt;</ph> string passed to the constructor.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;code&gt;actualValue&lt;/code&gt;</ph> is not <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;code&gt;message&lt;/code&gt;</ph> string appended with the string representation of the invalid argument value.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>