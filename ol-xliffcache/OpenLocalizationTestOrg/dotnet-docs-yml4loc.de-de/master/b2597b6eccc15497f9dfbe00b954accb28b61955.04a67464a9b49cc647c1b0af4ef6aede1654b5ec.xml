{"nodes":[{"content":"Creates a stream whose backing store is memory.","nodes":[{"pos":[0,47],"content":"Creates a stream whose backing store is memory.","nodes":[{"content":"Creates a stream whose backing store is memory.","pos":[0,47]}]}],"pos":[2491,2539],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/memorystream.cs#1a4dcb744a23ba6f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The current position of a stream is the position at which the next read or write operation could take place. The current position can be retrieved or set through the <xref:System.IO.MemoryStream.Seek%2A> method. When a new instance of <xref:System.IO.MemoryStream> is created, the current position is set to zero.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n Memory streams created with an unsigned byte array provide a non-resizable stream of the data. When using a byte array, you can neither append to nor shrink the stream, although you might be able to modify the existing contents depending on the parameters passed into the constructor. Empty memory streams are resizable, and can be written to and read from.  \n  \n If a <xref:System.IO.MemoryStream> object is added to a ResX file or a .resources file, call the <xref:System.Resources.ResourceManager.GetStream%2A> method at runtime to retrieve it.  \n  \n If a <xref:System.IO.MemoryStream> object is serialized to a resource file it will actually be serialized as an <xref:System.IO.UnmanagedMemoryStream>. This behavior provides better performance, as well as the ability to get a pointer to the data directly, without having to go through <xref:System.IO.Stream> methods.","nodes":[{"pos":[2,414],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/memorystream.cs#1a4dcb744a23ba6f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/memorystream.cs#1a4dcb744a23ba6f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,410],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/io/memorystream.cs#1a4dcb744a23ba6f)</ept>.","pos":[1,173],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/memorystream.cs#1a4dcb744a23ba6f)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[174,402],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[421,734],"content":"The current position of a stream is the position at which the next read or write operation could take place. The current position can be retrieved or set through the <xref:System.IO.MemoryStream.Seek%2A> method. When a new instance of <xref:System.IO.MemoryStream> is created, the current position is set to zero.","nodes":[{"content":"The current position of a stream is the position at which the next read or write operation could take place. The current position can be retrieved or set through the <xref:System.IO.MemoryStream.Seek%2A> method. When a new instance of <xref:System.IO.MemoryStream> is created, the current position is set to zero.","pos":[0,313],"nodes":[{"content":"The current position of a stream is the position at which the next read or write operation could take place.","pos":[0,108]},{"content":"The current position can be retrieved or set through the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> method.","pos":[109,211],"source":" The current position can be retrieved or set through the <xref:System.IO.MemoryStream.Seek%2A> method."},{"content":"When a new instance of <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> is created, the current position is set to zero.","pos":[212,313],"source":" When a new instance of <xref:System.IO.MemoryStream> is created, the current position is set to zero."}]}]},{"pos":[742,1268],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[1275,1632],"content":"Memory streams created with an unsigned byte array provide a non-resizable stream of the data. When using a byte array, you can neither append to nor shrink the stream, although you might be able to modify the existing contents depending on the parameters passed into the constructor. Empty memory streams are resizable, and can be written to and read from.","nodes":[{"content":"Memory streams created with an unsigned byte array provide a non-resizable stream of the data. When using a byte array, you can neither append to nor shrink the stream, although you might be able to modify the existing contents depending on the parameters passed into the constructor. Empty memory streams are resizable, and can be written to and read from.","pos":[0,357],"nodes":[{"content":"Memory streams created with an unsigned byte array provide a non-resizable stream of the data.","pos":[0,94]},{"content":"When using a byte array, you can neither append to nor shrink the stream, although you might be able to modify the existing contents depending on the parameters passed into the constructor.","pos":[95,284]},{"content":"Empty memory streams are resizable, and can be written to and read from.","pos":[285,357]}]}]},{"pos":[1639,1822],"content":"If a <xref:System.IO.MemoryStream> object is added to a ResX file or a .resources file, call the <xref:System.Resources.ResourceManager.GetStream%2A> method at runtime to retrieve it.","nodes":[{"content":"If a <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> object is added to a ResX file or a .resources file, call the <ph id=\"ph2\">&lt;xref:System.Resources.ResourceManager.GetStream%2A&gt;</ph> method at runtime to retrieve it.","pos":[0,183],"source":"If a <xref:System.IO.MemoryStream> object is added to a ResX file or a .resources file, call the <xref:System.Resources.ResourceManager.GetStream%2A> method at runtime to retrieve it."}]},{"pos":[1829,2147],"content":"If a <xref:System.IO.MemoryStream> object is serialized to a resource file it will actually be serialized as an <xref:System.IO.UnmanagedMemoryStream>. This behavior provides better performance, as well as the ability to get a pointer to the data directly, without having to go through <xref:System.IO.Stream> methods.","nodes":[{"content":"If a <xref:System.IO.MemoryStream> object is serialized to a resource file it will actually be serialized as an <xref:System.IO.UnmanagedMemoryStream>. This behavior provides better performance, as well as the ability to get a pointer to the data directly, without having to go through <xref:System.IO.Stream> methods.","pos":[0,318],"nodes":[{"content":"If a <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> object is serialized to a resource file it will actually be serialized as an <ph id=\"ph2\">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph>.","pos":[0,151],"source":"If a <xref:System.IO.MemoryStream> object is serialized to a resource file it will actually be serialized as an <xref:System.IO.UnmanagedMemoryStream>."},{"content":"This behavior provides better performance, as well as the ability to get a pointer to the data directly, without having to go through <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> methods.","pos":[152,318],"source":" This behavior provides better performance, as well as the ability to get a pointer to the data directly, without having to go through <xref:System.IO.Stream> methods."}]}]}],"pos":[2550,4714],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.MemoryStream\"></xref> class with an expandable capacity initialized to zero.","nodes":[{"pos":[0,132],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream\"&gt;&lt;/xref&gt;</ph> class with an expandable capacity initialized to zero.","source":"Initializes a new instance of the <xref href=\"System.IO.MemoryStream\"></xref> class with an expandable capacity initialized to zero."}],"pos":[7904,8037],"yaml":true},{"content":"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`.  \n  \n The capacity of the current stream automatically increases when you use the <xref:System.IO.MemoryStream.SetLength%2A> method to set the length to a value larger than the capacity of the current stream.  \n  \n This constructor exposes the underlying stream, which <xref:System.IO.MemoryStream.GetBuffer%2A> returns.","nodes":[{"pos":[0,167],"content":"The <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> properties are all set to <ph id=\"ph4\">`true`</ph>.","source":"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`."},{"pos":[174,376],"content":"The capacity of the current stream automatically increases when you use the <xref:System.IO.MemoryStream.SetLength%2A> method to set the length to a value larger than the capacity of the current stream.","nodes":[{"content":"The capacity of the current stream automatically increases when you use the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph> method to set the length to a value larger than the capacity of the current stream.","pos":[0,202],"source":"The capacity of the current stream automatically increases when you use the <xref:System.IO.MemoryStream.SetLength%2A> method to set the length to a value larger than the capacity of the current stream."}]},{"pos":[383,488],"content":"This constructor exposes the underlying stream, which <xref:System.IO.MemoryStream.GetBuffer%2A> returns.","nodes":[{"content":"This constructor exposes the underlying stream, which <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> returns.","pos":[0,105],"source":"This constructor exposes the underlying stream, which <xref:System.IO.MemoryStream.GetBuffer%2A> returns."}]}],"pos":[8048,8543],"yaml":true,"extradata":"MT"},{"content":"Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified byte array.","nodes":[{"pos":[0,132],"content":"Initializes a new non-resizable instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream\"&gt;&lt;/xref&gt;</ph> class based on the specified byte array.","source":"Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified byte array."}],"pos":[10186,10319],"yaml":true},{"content":"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to the length of the specified byte array. The new stream can be written to, but is not resizable.  \n  \n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \n  \n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>.","nodes":[{"pos":[0,315],"content":"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to the length of the specified byte array. The new stream can be written to, but is not resizable.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> properties are all set to <ph id=\"ph4\">`true`</ph>.","pos":[0,167],"source":"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> is set to the length of the specified byte array.","pos":[168,259],"source":" <xref:System.IO.MemoryStream.Capacity%2A> is set to the length of the specified byte array."},{"content":"The new stream can be written to, but is not resizable.","pos":[260,315]}]},{"pos":[322,519],"content":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).","nodes":[{"content":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).","pos":[0,197],"source":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>)."}]},{"pos":[526,674],"content":"This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>.","nodes":[{"content":"This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>.","pos":[0,148],"nodes":[{"content":"This constructor does not expose the underlying stream.","pos":[0,55]},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> throws <ph id=\"ph2\">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.","pos":[56,148],"source":" <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>."}]}]}],"pos":[10330,11011],"yaml":true,"extradata":"MT"},{"content":"The array of unsigned bytes from which to create the current stream.","nodes":[{"pos":[0,68],"content":"The array of unsigned bytes from which to create the current stream.","nodes":[{"content":"The array of unsigned bytes from which to create the current stream.","pos":[0,68]}]}],"pos":[11149,11218],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[11376,11407],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.MemoryStream\"></xref> class with an expandable capacity initialized as specified.","nodes":[{"pos":[0,137],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream\"&gt;&lt;/xref&gt;</ph> class with an expandable capacity initialized as specified.","source":"Initializes a new instance of the <xref href=\"System.IO.MemoryStream\"></xref> class with an expandable capacity initialized as specified."}],"pos":[12919,13057],"yaml":true},{"content":"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`.  \n  \n The capacity automatically increases when you use the <xref:System.IO.MemoryStream.SetLength%2A> method to set the length to a value larger than the capacity of the current stream. Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`.  \n  \n This constructor exposes the underlying stream that <xref:System.IO.MemoryStream.GetBuffer%2A> returns.","nodes":[{"pos":[0,167],"content":"The <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> properties are all set to <ph id=\"ph4\">`true`</ph>.","source":"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`."},{"pos":[174,494],"content":"The capacity automatically increases when you use the <xref:System.IO.MemoryStream.SetLength%2A> method to set the length to a value larger than the capacity of the current stream. Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`.","nodes":[{"content":"The capacity automatically increases when you use the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph> method to set the length to a value larger than the capacity of the current stream.","pos":[0,180],"source":"The capacity automatically increases when you use the <xref:System.IO.MemoryStream.SetLength%2A> method to set the length to a value larger than the capacity of the current stream."},{"content":"Except for a <ph id=\"ph1\">`MemoryStream`</ph> constructed with a byte[] parameter, write operations at the end of a <ph id=\"ph2\">`MemoryStream`</ph> expand the <ph id=\"ph3\">`MemoryStream`</ph>.","pos":[181,320],"source":" Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`."}]},{"pos":[501,604],"content":"This constructor exposes the underlying stream that <xref:System.IO.MemoryStream.GetBuffer%2A> returns.","nodes":[{"content":"This constructor exposes the underlying stream that <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> returns.","pos":[0,103],"source":"This constructor exposes the underlying stream that <xref:System.IO.MemoryStream.GetBuffer%2A> returns."}]}],"pos":[13068,13679],"yaml":true,"extradata":"MT"},{"content":"The initial size of the internal array in bytes.","nodes":[{"pos":[0,48],"content":"The initial size of the internal array in bytes.","nodes":[{"content":"The initial size of the internal array in bytes.","pos":[0,48]}]}],"pos":[14339,14388],"yaml":true},{"content":"<code>capacity</code> is negative.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is negative.","source":"<code>capacity</code> is negative."}],"pos":[14558,14593],"yaml":true},{"content":"Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified byte array with the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property set as specified.","nodes":[{"pos":[0,220],"content":"Initializes a new non-resizable instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream\"&gt;&lt;/xref&gt;</ph> class based on the specified byte array with the <ph id=\"ph2\">&lt;xref href=\"System.IO.MemoryStream.CanWrite\"&gt;&lt;/xref&gt;</ph> property set as specified.","source":"Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified byte array with the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property set as specified."}],"pos":[16183,16404],"yaml":true},{"content":"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to the length of the specified byte array.  \n  \n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \n  \n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>.","nodes":[{"pos":[0,216],"content":"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to the length of the specified byte array.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph> properties are both set to <ph id=\"ph3\">`true`</ph>.","pos":[0,124],"source":"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> is set to the length of the specified byte array.","pos":[125,216],"source":" <xref:System.IO.MemoryStream.Capacity%2A> is set to the length of the specified byte array."}]},{"pos":[223,420],"content":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).","nodes":[{"content":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).","pos":[0,197],"source":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>)."}]},{"pos":[427,575],"content":"This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>.","nodes":[{"content":"This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>.","pos":[0,148],"nodes":[{"content":"This constructor does not expose the underlying stream.","pos":[0,55]},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> throws <ph id=\"ph2\">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.","pos":[56,148],"source":" <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>."}]}]}],"pos":[16415,16997],"yaml":true,"extradata":"MT"},{"content":"The array of unsigned bytes from which to create this stream.","nodes":[{"pos":[0,61],"content":"The array of unsigned bytes from which to create this stream.","nodes":[{"content":"The array of unsigned bytes from which to create this stream.","pos":[0,61]}]}],"pos":[17150,17212],"yaml":true},{"content":"The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property, which determines whether the stream supports writing.","nodes":[{"pos":[0,135],"content":"The setting of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream.CanWrite\"&gt;&lt;/xref&gt;</ph> property, which determines whether the stream supports writing.","source":"The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property, which determines whether the stream supports writing."}],"pos":[17277,17413],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[17571,17602],"yaml":true},{"content":"Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified region (index) of a byte array.","nodes":[{"pos":[0,152],"content":"Initializes a new non-resizable instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream\"&gt;&lt;/xref&gt;</ph> class based on the specified region (index) of a byte array.","source":"Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified region (index) of a byte array."}],"pos":[19240,19393],"yaml":true},{"content":"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`, but the capacity cannot be changed. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.  \n  \n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \n  \n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>. However, you can write to the stream.","nodes":[{"pos":[0,264],"content":"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`, but the capacity cannot be changed. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> properties are all set to <ph id=\"ph4\">`true`</ph>, but the capacity cannot be changed.","pos":[0,203],"source":"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`, but the capacity cannot be changed."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> is set to <ph id=\"ph2\">`count`</ph>.","pos":[204,264],"source":" <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`."}]},{"pos":[271,468],"content":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).","nodes":[{"content":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).","pos":[0,197],"source":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>)."}]},{"pos":[475,661],"content":"This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>. However, you can write to the stream.","nodes":[{"content":"This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>. However, you can write to the stream.","pos":[0,186],"nodes":[{"content":"This constructor does not expose the underlying stream.","pos":[0,55]},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> throws <ph id=\"ph2\">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.","pos":[56,148],"source":" <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>."},{"content":"However, you can write to the stream.","pos":[149,186]}]}]}],"pos":[19404,20072],"yaml":true,"extradata":"MT"},{"content":"The array of unsigned bytes from which to create this stream.","nodes":[{"pos":[0,61],"content":"The array of unsigned bytes from which to create this stream.","nodes":[{"content":"The array of unsigned bytes from which to create this stream.","pos":[0,61]}]}],"pos":[20232,20294],"yaml":true},{"content":"The index into <code>buffer</code> at which the stream begins.","nodes":[{"pos":[0,62],"content":"The index into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which the stream begins.","source":"The index into <code>buffer</code> at which the stream begins."}],"pos":[20354,20417],"yaml":true},{"content":"The length of the stream in bytes.","nodes":[{"pos":[0,34],"content":"The length of the stream in bytes.","nodes":[{"content":"The length of the stream in bytes.","pos":[0,34]}]}],"pos":[20477,20512],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[20670,20701],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."}],"pos":[20815,20875],"yaml":true},{"content":"The buffer length minus <code>index</code> is less than <code>count</code>.","nodes":[{"pos":[0,75],"content":"The buffer length minus <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The buffer length minus <code>index</code> is less than <code>count</code>."}],"pos":[20969,21045],"yaml":true},{"content":"Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified region of a byte array, with the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property set as specified.","nodes":[{"pos":[0,233],"content":"Initializes a new non-resizable instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream\"&gt;&lt;/xref&gt;</ph> class based on the specified region of a byte array, with the <ph id=\"ph2\">&lt;xref href=\"System.IO.MemoryStream.CanWrite\"&gt;&lt;/xref&gt;</ph> property set as specified.","source":"Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified region of a byte array, with the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property set as specified."}],"pos":[22755,22989],"yaml":true},{"content":"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.  \n  \n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \n  \n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>. However, you can write to the stream if `writable` is `true`.","nodes":[{"pos":[0,185],"content":"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph> properties are both set to <ph id=\"ph3\">`true`</ph>.","pos":[0,124],"source":"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> is set to <ph id=\"ph2\">`count`</ph>.","pos":[125,185],"source":" <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`."}]},{"pos":[192,389],"content":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).","nodes":[{"content":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).","pos":[0,197],"source":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>)."}]},{"pos":[396,606],"content":"This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>. However, you can write to the stream if `writable` is `true`.","nodes":[{"content":"This constructor does not expose the underlying stream.","pos":[0,55]},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> throws <ph id=\"ph2\">&lt;xref:System.UnauthorizedAccessException&gt;</ph>.","pos":[56,148],"source":" <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>."},{"content":"However, you can write to the stream if <ph id=\"ph1\">`writable`</ph> is <ph id=\"ph2\">`true`</ph>.","pos":[149,210],"source":" However, you can write to the stream if `writable` is `true`."}]}],"pos":[23000,23613],"yaml":true,"extradata":"MT"},{"content":"The array of unsigned bytes from which to create this stream.","nodes":[{"pos":[0,61],"content":"The array of unsigned bytes from which to create this stream.","nodes":[{"content":"The array of unsigned bytes from which to create this stream.","pos":[0,61]}]}],"pos":[23788,23850],"yaml":true},{"content":"The index in <code>buffer</code> at which the stream begins.","nodes":[{"pos":[0,60],"content":"The index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which the stream begins.","source":"The index in <code>buffer</code> at which the stream begins."}],"pos":[23910,23971],"yaml":true},{"content":"The length of the stream in bytes.","nodes":[{"pos":[0,34],"content":"The length of the stream in bytes.","nodes":[{"content":"The length of the stream in bytes.","pos":[0,34]}]}],"pos":[24031,24066],"yaml":true},{"content":"The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property, which determines whether the stream supports writing.","nodes":[{"pos":[0,135],"content":"The setting of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream.CanWrite\"&gt;&lt;/xref&gt;</ph> property, which determines whether the stream supports writing.","source":"The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property, which determines whether the stream supports writing."}],"pos":[24131,24267],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[24425,24456],"yaml":true},{"content":"<code>index</code> or <code>count</code> are negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> are negative.","source":"<code>index</code> or <code>count</code> are negative."}],"pos":[24570,24625],"yaml":true},{"content":"The buffer length minus <code>index</code> is less than <code>count</code>.","nodes":[{"pos":[0,75],"content":"The buffer length minus <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The buffer length minus <code>index</code> is less than <code>count</code>."}],"pos":[24719,24795],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified region of a byte array, with the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property set as specified, and the ability to call <xref href=\"System.IO.MemoryStream.GetBuffer\"></xref> set as specified.","nodes":[{"pos":[0,315],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream\"&gt;&lt;/xref&gt;</ph> class based on the specified region of a byte array, with the <ph id=\"ph2\">&lt;xref href=\"System.IO.MemoryStream.CanWrite\"&gt;&lt;/xref&gt;</ph> property set as specified, and the ability to call <ph id=\"ph3\">&lt;xref href=\"System.IO.MemoryStream.GetBuffer\"&gt;&lt;/xref&gt;</ph> set as specified.","source":"Initializes a new instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified region of a byte array, with the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property set as specified, and the ability to call <xref href=\"System.IO.MemoryStream.GetBuffer\"></xref> set as specified."}],"pos":[26577,26893],"yaml":true},{"content":"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.  \n  \n The new stream instance can be written to, but the <xref:System.IO.MemoryStream.Capacity%2A> of the underlying byte array cannot be changed. The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).","nodes":[{"pos":[0,185],"content":"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.CanRead%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.CanSeek%2A&gt;</ph> properties are both set to <ph id=\"ph3\">`true`</ph>.","pos":[0,124],"source":"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> is set to <ph id=\"ph2\">`count`</ph>.","pos":[125,185],"source":" <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`."}]},{"pos":[192,530],"content":"The new stream instance can be written to, but the <xref:System.IO.MemoryStream.Capacity%2A> of the underlying byte array cannot be changed. The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).","nodes":[{"content":"The new stream instance can be written to, but the <xref:System.IO.MemoryStream.Capacity%2A> of the underlying byte array cannot be changed. The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).","pos":[0,338],"nodes":[{"content":"The new stream instance can be written to, but the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph> of the underlying byte array cannot be changed.","pos":[0,140],"source":"The new stream instance can be written to, but the <xref:System.IO.MemoryStream.Capacity%2A> of the underlying byte array cannot be changed."},{"content":"The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>).","pos":[141,338],"source":" The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>)."}]}]}],"pos":[26904,27439],"yaml":true,"extradata":"MT"},{"content":"The array of unsigned bytes from which to create this stream.","nodes":[{"pos":[0,61],"content":"The array of unsigned bytes from which to create this stream.","nodes":[{"content":"The array of unsigned bytes from which to create this stream.","pos":[0,61]}]}],"pos":[27636,27698],"yaml":true},{"content":"The index into <code>buffer</code> at which the stream begins.","nodes":[{"pos":[0,62],"content":"The index into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which the stream begins.","source":"The index into <code>buffer</code> at which the stream begins."}],"pos":[27758,27821],"yaml":true},{"content":"The length of the stream in bytes.","nodes":[{"pos":[0,34],"content":"The length of the stream in bytes.","nodes":[{"content":"The length of the stream in bytes.","pos":[0,34]}]}],"pos":[27881,27916],"yaml":true},{"content":"The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property, which determines whether the stream supports writing.","nodes":[{"pos":[0,135],"content":"The setting of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream.CanWrite\"&gt;&lt;/xref&gt;</ph> property, which determines whether the stream supports writing.","source":"The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property, which determines whether the stream supports writing."}],"pos":[27981,28117],"yaml":true},{"content":"`true` to enable <xref href=\"System.IO.MemoryStream.GetBuffer\"></xref>, which returns the unsigned byte array from which the stream was created; otherwise, `false`.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">`true`</ph> to enable <ph id=\"ph2\">&lt;xref href=\"System.IO.MemoryStream.GetBuffer\"&gt;&lt;/xref&gt;</ph>, which returns the unsigned byte array from which the stream was created; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` to enable <xref href=\"System.IO.MemoryStream.GetBuffer\"></xref>, which returns the unsigned byte array from which the stream was created; otherwise, `false`."}],"pos":[28189,28356],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[28514,28545],"yaml":true},{"content":"<code>index</code> or <code>count</code> is negative.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>index</code> or <code>count</code> is negative."}],"pos":[28659,28713],"yaml":true},{"content":"The buffer length minus <code>index</code> is less than <code>count</code>.","nodes":[{"pos":[0,75],"content":"The buffer length minus <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The buffer length minus <code>index</code> is less than <code>count</code>."}],"pos":[28807,28883],"yaml":true},{"content":"Gets a value indicating whether the current stream supports reading.","nodes":[{"pos":[0,68],"content":"Gets a value indicating whether the current stream supports reading.","nodes":[{"content":"Gets a value indicating whether the current stream supports reading.","pos":[0,68]}]}],"pos":[33120,33189],"yaml":true},{"content":"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.MemoryStream.Read%2A> and <xref:System.IO.MemoryStream.ReadByte%2A> methods throw a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`.","nodes":[{"pos":[0,223],"content":"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.MemoryStream.Read%2A> and <xref:System.IO.MemoryStream.ReadByte%2A> methods throw a <xref:System.NotSupportedException>.","nodes":[{"content":"If a class derived from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.Read%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream.ReadByte%2A&gt;</ph> methods throw a <ph id=\"ph4\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,223],"source":"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.MemoryStream.Read%2A> and <xref:System.IO.MemoryStream.ReadByte%2A> methods throw a <xref:System.NotSupportedException>."}]},{"pos":[230,285],"content":"If the stream is closed, this property returns <ph id=\"ph1\">`false`</ph>.","source":"If the stream is closed, this property returns `false`."}],"pos":[33200,33490],"yaml":true,"extradata":"MT"},{"content":"`true` if the stream is open.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">`true`</ph> if the stream is open.","source":"`true` if the stream is open."}],"pos":[33609,33641],"yaml":true},{"content":"Gets a value indicating whether the current stream supports seeking.","nodes":[{"pos":[0,68],"content":"Gets a value indicating whether the current stream supports seeking.","nodes":[{"content":"Gets a value indicating whether the current stream supports seeking.","pos":[0,68]}]}],"pos":[35137,35206],"yaml":true},{"content":"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.MemoryStream.Length%2A>, <xref:System.IO.MemoryStream.SetLength%2A>, <xref:System.IO.MemoryStream.Position%2A>, and <xref:System.IO.MemoryStream.Seek%2A> throw a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`.","nodes":[{"pos":[0,297],"content":"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.MemoryStream.Length%2A>, <xref:System.IO.MemoryStream.SetLength%2A>, <xref:System.IO.MemoryStream.Position%2A>, and <xref:System.IO.MemoryStream.Seek%2A> throw a <xref:System.NotSupportedException>.","nodes":[{"content":"If a class derived from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.Length%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream.SetLength%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IO.MemoryStream.Position%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> throw a <ph id=\"ph6\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,297],"source":"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.MemoryStream.Length%2A>, <xref:System.IO.MemoryStream.SetLength%2A>, <xref:System.IO.MemoryStream.Position%2A>, and <xref:System.IO.MemoryStream.Seek%2A> throw a <xref:System.NotSupportedException>."}]},{"pos":[304,359],"content":"If the stream is closed, this property returns <ph id=\"ph1\">`false`</ph>.","source":"If the stream is closed, this property returns `false`."}],"pos":[35217,35581],"yaml":true,"extradata":"MT"},{"content":"`true` if the stream is open.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">`true`</ph> if the stream is open.","source":"`true` if the stream is open."}],"pos":[35700,35732],"yaml":true},{"content":"Gets a value indicating whether the current stream supports writing.","nodes":[{"pos":[0,68],"content":"Gets a value indicating whether the current stream supports writing.","nodes":[{"content":"Gets a value indicating whether the current stream supports writing.","pos":[0,68]}]}],"pos":[37234,37303],"yaml":true},{"content":"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Write%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>.  \n  \n If the stream is closed, this property returns `false`.","nodes":[{"pos":[0,241],"content":"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Write%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>.","nodes":[{"content":"If a class derived from <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id=\"ph2\">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph> throws a <ph id=\"ph5\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[0,241],"source":"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Write%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>."}]},{"pos":[248,303],"content":"If the stream is closed, this property returns <ph id=\"ph1\">`false`</ph>.","source":"If the stream is closed, this property returns `false`."}],"pos":[37314,37622],"yaml":true,"extradata":"MT"},{"content":"`true` if the stream supports writing; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the stream supports writing; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the stream supports writing; otherwise, `false`."}],"pos":[37742,37803],"yaml":true},{"content":"Gets or sets the number of bytes allocated for this stream.","nodes":[{"pos":[0,59],"content":"Gets or sets the number of bytes allocated for this stream.","nodes":[{"content":"Gets or sets the number of bytes allocated for this stream.","pos":[0,59]}]}],"pos":[39306,39366],"yaml":true},{"content":"`Capacity` is the buffer length for system-provided byte arrays. `Capacity` cannot be set to a value less than the current length of the stream.","nodes":[{"pos":[0,144],"content":"`Capacity` is the buffer length for system-provided byte arrays. `Capacity` cannot be set to a value less than the current length of the stream.","nodes":[{"content":"<ph id=\"ph1\">`Capacity`</ph> is the buffer length for system-provided byte arrays.","pos":[0,64],"source":"`Capacity` is the buffer length for system-provided byte arrays."},{"content":"<ph id=\"ph1\">`Capacity`</ph> cannot be set to a value less than the current length of the stream.","pos":[65,144],"source":"`Capacity` cannot be set to a value less than the current length of the stream."}]}],"pos":[39377,39524],"yaml":true,"extradata":"MT"},{"content":"The length of the usable portion of the buffer for the stream.","nodes":[{"pos":[0,62],"content":"The length of the usable portion of the buffer for the stream.","nodes":[{"content":"The length of the usable portion of the buffer for the stream.","pos":[0,62]}]}],"pos":[40167,40230],"yaml":true},{"content":"A capacity is set that is negative or less than the current length of the stream.","nodes":[{"pos":[0,81],"content":"A capacity is set that is negative or less than the current length of the stream.","nodes":[{"content":"A capacity is set that is negative or less than the current length of the stream.","pos":[0,81]}]}],"pos":[40403,40485],"yaml":true},{"content":"The current stream is closed.","nodes":[{"pos":[0,29],"content":"The current stream is closed.","nodes":[{"content":"The current stream is closed.","pos":[0,29]}]}],"pos":[40591,40621],"yaml":true},{"content":"`set` is invoked on a stream whose capacity cannot be modified.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`set`</ph> is invoked on a stream whose capacity cannot be modified.","source":"`set` is invoked on a stream whose capacity cannot be modified."}],"pos":[40723,40789],"yaml":true},{"content":"Asynchronously reads all the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.","nodes":[{"pos":[0,147],"content":"Asynchronously reads all the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.","nodes":[{"content":"Asynchronously reads all the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.","pos":[0,147]}]}],"pos":[43461,43609],"yaml":true},{"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"pos":[0,70],"content":"The stream to which the contents of the current stream will be copied.","nodes":[{"content":"The stream to which the contents of the current stream will be copied.","pos":[0,70]}]}],"pos":[43876,43947],"yaml":true},{"content":"The size, in bytes, of the buffer. This value must be greater than zero.","nodes":[{"pos":[0,72],"content":"The size, in bytes, of the buffer. This value must be greater than zero.","nodes":[{"content":"The size, in bytes, of the buffer. This value must be greater than zero.","pos":[0,72],"nodes":[{"content":"The size, in bytes, of the buffer.","pos":[0,34]},{"content":"This value must be greater than zero.","pos":[35,72]}]}]}],"pos":[44012,44085],"yaml":true},{"content":"The token to monitor for cancellation requests.","nodes":[{"pos":[0,47],"content":"The token to monitor for cancellation requests.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]}]}],"pos":[44179,44227],"yaml":true},{"content":"A task that represents the asynchronous copy operation.","nodes":[{"pos":[0,55],"content":"A task that represents the asynchronous copy operation.","nodes":[{"content":"A task that represents the asynchronous copy operation.","pos":[0,55]}]}],"pos":[44298,44354],"yaml":true},{"content":"<code>destination</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;destination&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>destination</code> is `null`."}],"pos":[44518,44554],"yaml":true},{"content":"<code>buffersize</code> is negative or zero.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;buffersize&lt;/code&gt;</ph> is negative or zero.","source":"<code>buffersize</code> is negative or zero."}],"pos":[44668,44713],"yaml":true},{"content":"Either the current stream or the destination stream is disposed.","nodes":[{"pos":[0,64],"content":"Either the current stream or the destination stream is disposed.","nodes":[{"content":"Either the current stream or the destination stream is disposed.","pos":[0,64]}]}],"pos":[44819,44884],"yaml":true},{"content":"The current stream does not support reading, or the destination stream does not support writing.","nodes":[{"pos":[0,96],"content":"The current stream does not support reading, or the destination stream does not support writing.","nodes":[{"content":"The current stream does not support reading, or the destination stream does not support writing.","pos":[0,96]}]}],"pos":[44986,45083],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.IO.MemoryStream\"></xref> class and optionally releases the managed resources.","nodes":[{"pos":[0,141],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream\"&gt;&lt;/xref&gt;</ph> class and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.IO.MemoryStream\"></xref> class and optionally releases the managed resources."}],"pos":[46471,46613],"yaml":true},{"content":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.MemoryStream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.MemoryStream.Dispose%2A> with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.MemoryStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.","nodes":[{"pos":[0,422],"content":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.MemoryStream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.MemoryStream.Dispose%2A> with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,141],"source":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.Dispose%2A&gt;</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[142,307],"source":" <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.MemoryStream.Dispose%2A> method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.Dispose%2A&gt;</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[308,422],"source":" <xref:System.Object.Finalize%2A> invokes <xref:System.IO.MemoryStream.Dispose%2A> with `disposing` set to `false`."}]},{"pos":[429,693],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.MemoryStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream&gt;</ph> references.","pos":[0,156],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.MemoryStream> references."},{"content":"This method invokes the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.","pos":[157,264],"source":" This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object."}]}],"pos":[46624,47322],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[47477,47580],"yaml":true},{"content":"Overrides the <xref href=\"System.IO.Stream.Flush\"></xref> method so that no action is performed.","nodes":[{"pos":[0,96],"content":"Overrides the <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.Flush\"&gt;&lt;/xref&gt;</ph> method so that no action is performed.","source":"Overrides the <xref href=\"System.IO.Stream.Flush\"></xref> method so that no action is performed."}],"pos":[50744,50841],"yaml":true},{"content":"This method overrides the <xref:System.IO.Stream.Flush%2A?displayProperty=fullName> method.  \n  \n Because any data written to a <xref:System.IO.MemoryStream> object is written into RAM, this method is redundant.","nodes":[{"pos":[0,91],"content":"This method overrides the <xref:System.IO.Stream.Flush%2A?displayProperty=fullName> method.","nodes":[{"content":"This method overrides the <ph id=\"ph1\">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,91],"source":"This method overrides the <xref:System.IO.Stream.Flush%2A?displayProperty=fullName> method."}]},{"pos":[98,211],"content":"Because any data written to a <xref:System.IO.MemoryStream> object is written into RAM, this method is redundant.","nodes":[{"content":"Because any data written to a <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> object is written into RAM, this method is redundant.","pos":[0,113],"source":"Because any data written to a <xref:System.IO.MemoryStream> object is written into RAM, this method is redundant."}]}],"pos":[50852,51068],"yaml":true,"extradata":"MT"},{"content":"Asynchronously clears all buffers for this stream, and monitors cancellation requests.","nodes":[{"pos":[0,86],"content":"Asynchronously clears all buffers for this stream, and monitors cancellation requests.","nodes":[{"content":"Asynchronously clears all buffers for this stream, and monitors cancellation requests.","pos":[0,86]}]}],"pos":[52816,52903],"yaml":true},{"content":"Because any data written to a <xref:System.IO.MemoryStream> object is written into RAM, this method is redundant.  \n  \n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter.","nodes":[{"pos":[0,113],"content":"Because any data written to a <xref:System.IO.MemoryStream> object is written into RAM, this method is redundant.","nodes":[{"content":"Because any data written to a <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> object is written into RAM, this method is redundant.","pos":[0,113],"source":"Because any data written to a <xref:System.IO.MemoryStream> object is written into RAM, this method is redundant."}]},{"pos":[120,319],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."}]},{"pos":[326,566],"content":"You can create a cancellation token by creating an instance of the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> class and passing the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property as the <ph id=\"ph3\">`cancellationToken`</ph> parameter.","source":"You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter."}],"pos":[52914,53487],"yaml":true,"extradata":"MT"},{"content":"The token to monitor for cancellation requests.","nodes":[{"pos":[0,47],"content":"The token to monitor for cancellation requests.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]}]}],"pos":[53798,53846],"yaml":true},{"content":"A task that represents the asynchronous flush operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous flush operation.","nodes":[{"content":"A task that represents the asynchronous flush operation.","pos":[0,56]}]}],"pos":[53917,53974],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[54141,54171],"yaml":true},{"content":"Returns the array of unsigned bytes from which this stream was created.","nodes":[{"pos":[0,71],"content":"Returns the array of unsigned bytes from which this stream was created.","nodes":[{"content":"Returns the array of unsigned bytes from which this stream was created.","pos":[0,71]}]}],"pos":[55683,55755],"yaml":true},{"content":"Note that the buffer contains allocated bytes which might be unused. For example, if the string \"test\" is written into the <xref:System.IO.MemoryStream> object, the length of the buffer returned from <xref:System.IO.MemoryStream.GetBuffer%2A> is 256, not 4, with 252 bytes unused. To obtain only the data in the buffer, use the <xref:System.IO.MemoryStream.ToArray%2A> method; however, <xref:System.IO.MemoryStream.ToArray%2A> creates a copy of the data in memory.  \n  \n The buffer can also be `null`.  \n  \n To create a `MemoryStream` instance with a publicly visible buffer, use <xref:System.IO.MemoryStream.%23ctor%2A>, <xref:System.IO.MemoryStream.%23ctor%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Boolean%29>, or <xref:System.IO.MemoryStream.%23ctor%28System.Int32%29>. If the current stream is resizable, two calls to this method do not return the same array if the underlying byte array is resized between calls. For additional information, see <xref:System.IO.MemoryStream.Capacity%2A>.  \n  \n> [!NOTE]\n>  This method works when the memory stream is closed.","nodes":[{"pos":[0,464],"content":"Note that the buffer contains allocated bytes which might be unused. For example, if the string \"test\" is written into the <xref:System.IO.MemoryStream> object, the length of the buffer returned from <xref:System.IO.MemoryStream.GetBuffer%2A> is 256, not 4, with 252 bytes unused. To obtain only the data in the buffer, use the <xref:System.IO.MemoryStream.ToArray%2A> method; however, <xref:System.IO.MemoryStream.ToArray%2A> creates a copy of the data in memory.","nodes":[{"content":"Note that the buffer contains allocated bytes which might be unused. For example, if the string \"test\" is written into the <xref:System.IO.MemoryStream> object, the length of the buffer returned from <xref:System.IO.MemoryStream.GetBuffer%2A> is 256, not 4, with 252 bytes unused. To obtain only the data in the buffer, use the <xref:System.IO.MemoryStream.ToArray%2A> method; however, <xref:System.IO.MemoryStream.ToArray%2A> creates a copy of the data in memory.","pos":[0,464],"nodes":[{"content":"Note that the buffer contains allocated bytes which might be unused.","pos":[0,68]},{"content":"For example, if the string \"test\" is written into the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> object, the length of the buffer returned from <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> is 256, not 4, with 252 bytes unused.","pos":[69,280],"source":" For example, if the string \"test\" is written into the <xref:System.IO.MemoryStream> object, the length of the buffer returned from <xref:System.IO.MemoryStream.GetBuffer%2A> is 256, not 4, with 252 bytes unused."},{"content":"To obtain only the data in the buffer, use the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.ToArray%2A&gt;</ph> method; however, <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.ToArray%2A&gt;</ph> creates a copy of the data in memory.","pos":[281,464],"source":" To obtain only the data in the buffer, use the <xref:System.IO.MemoryStream.ToArray%2A> method; however, <xref:System.IO.MemoryStream.ToArray%2A> creates a copy of the data in memory."}]}]},{"pos":[471,501],"content":"The buffer can also be <ph id=\"ph1\">`null`</ph>.","source":"The buffer can also be `null`."},{"pos":[508,1027],"content":"To create a `MemoryStream` instance with a publicly visible buffer, use <xref:System.IO.MemoryStream.%23ctor%2A>, <xref:System.IO.MemoryStream.%23ctor%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Boolean%29>, or <xref:System.IO.MemoryStream.%23ctor%28System.Int32%29>. If the current stream is resizable, two calls to this method do not return the same array if the underlying byte array is resized between calls. For additional information, see <xref:System.IO.MemoryStream.Capacity%2A>.","nodes":[{"content":"To create a <ph id=\"ph1\">`MemoryStream`</ph> instance with a publicly visible buffer, use <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.%23ctor%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream.%23ctor%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Boolean%29&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.IO.MemoryStream.%23ctor%28System.Int32%29&gt;</ph>.","pos":[0,299],"source":"To create a `MemoryStream` instance with a publicly visible buffer, use <xref:System.IO.MemoryStream.%23ctor%2A>, <xref:System.IO.MemoryStream.%23ctor%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Boolean%29>, or <xref:System.IO.MemoryStream.%23ctor%28System.Int32%29>."},{"content":"If the current stream is resizable, two calls to this method do not return the same array if the underlying byte array is resized between calls.","pos":[300,444]},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Capacity%2A&gt;</ph>.","pos":[445,519],"source":" For additional information, see <xref:System.IO.MemoryStream.Capacity%2A>."}]},{"pos":[1035,1097],"content":"[!NOTE]\n This method works when the memory stream is closed.","leadings":["","> "],"nodes":[{"content":"This method works when the memory stream is closed.","pos":[9,60]}]}],"pos":[55766,56875],"yaml":true,"extradata":"MT"},{"content":"The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <xref href=\"System.IO.MemoryStream\"></xref> constructor during construction of the current instance.","nodes":[{"pos":[0,215],"content":"The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream\"&gt;&lt;/xref&gt;</ph> constructor during construction of the current instance.","source":"The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <xref href=\"System.IO.MemoryStream\"></xref> constructor during construction of the current instance."}],"pos":[57010,57226],"yaml":true},{"content":"The `MemoryStream` instance was not created with a publicly visible buffer.","nodes":[{"pos":[0,75],"content":"The <ph id=\"ph1\">`MemoryStream`</ph> instance was not created with a publicly visible buffer.","source":"The `MemoryStream` instance was not created with a publicly visible buffer."}],"pos":[57400,57476],"yaml":true},{"content":"Gets the length of the stream in bytes.","nodes":[{"pos":[0,39],"content":"Gets the length of the stream in bytes.","nodes":[{"content":"Gets the length of the stream in bytes.","pos":[0,39]}]}],"pos":[58561,58601],"yaml":true},{"content":"The length of the stream in bytes.","nodes":[{"pos":[0,34],"content":"The length of the stream in bytes.","nodes":[{"content":"The length of the stream in bytes.","pos":[0,34]}]}],"pos":[59253,59288],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[59451,59473],"yaml":true},{"content":"Gets or sets the current position within the stream.","nodes":[{"pos":[0,52],"content":"Gets or sets the current position within the stream.","nodes":[{"content":"Gets or sets the current position within the stream.","pos":[0,52]}]}],"pos":[60914,60967],"yaml":true},{"content":"The current position within the stream.","nodes":[{"pos":[0,39],"content":"The current position within the stream.","nodes":[{"content":"The current position within the stream.","pos":[0,39]}]}],"pos":[61626,61666],"yaml":true},{"content":"The position is set to a negative value or a value greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,107],"content":"The position is set to a negative value or a value greater than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"The position is set to a negative value or a value greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[61839,61947],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[62053,62075],"yaml":true},{"content":"Reads a block of bytes from the current stream and writes the data to a buffer.","nodes":[{"pos":[0,79],"content":"Reads a block of bytes from the current stream and writes the data to a buffer.","nodes":[{"content":"Reads a block of bytes from the current stream and writes the data to a buffer.","pos":[0,79]}]}],"pos":[63679,63759],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.Read%2A>.  \n  \n The `offset` parameter gives the offset of the first byte in `buffer` to which data from the current stream is written. The `count` parameter gives the maximum number of bytes to read from the current stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached.  \n  \n If the read operation is successful, the current position within the stream advances by the number of bytes read. If an exception occurs, the current position within the stream remains unchanged.  \n  \n The `Read` method will return zero only if the end of the stream is reached. In all other cases, `Read` always reads at least one byte from the stream before returning. By definition, if no data is available from the stream upon a call to `Read`, the `Read` method returns zero (the end of the stream is reached automatically). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.  \n  \n Use <xref:System.IO.BinaryReader> for reading primitive data types.  \n  \n> [!CAUTION]\n>  If the byte array specified in the `buffer` parameter is the underlying buffer returned by the <xref:System.IO.MemoryStream.GetBuffer%2A> method, the array contents are overwritten, and no exception is thrown.","nodes":[{"pos":[0,54],"content":"This method overrides <xref:System.IO.Stream.Read%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.Read%2A&gt;</ph>.","pos":[0,54],"source":"This method overrides <xref:System.IO.Stream.Read%2A>."}]},{"pos":[61,369],"content":"The `offset` parameter gives the offset of the first byte in `buffer` to which data from the current stream is written. The `count` parameter gives the maximum number of bytes to read from the current stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached.","nodes":[{"content":"The <ph id=\"ph1\">`offset`</ph> parameter gives the offset of the first byte in <ph id=\"ph2\">`buffer`</ph> to which data from the current stream is written.","pos":[0,119],"source":"The `offset` parameter gives the offset of the first byte in `buffer` to which data from the current stream is written."},{"content":"The <ph id=\"ph1\">`count`</ph> parameter gives the maximum number of bytes to read from the current stream.","pos":[120,208],"source":" The `count` parameter gives the maximum number of bytes to read from the current stream."},{"content":"The returned value is the actual number of bytes read, or zero if the end of the stream is reached.","pos":[209,308]}]},{"pos":[376,571],"content":"If the read operation is successful, the current position within the stream advances by the number of bytes read. If an exception occurs, the current position within the stream remains unchanged.","nodes":[{"content":"If the read operation is successful, the current position within the stream advances by the number of bytes read. If an exception occurs, the current position within the stream remains unchanged.","pos":[0,195],"nodes":[{"content":"If the read operation is successful, the current position within the stream advances by the number of bytes read.","pos":[0,113]},{"content":"If an exception occurs, the current position within the stream remains unchanged.","pos":[114,195]}]}]},{"pos":[578,1020],"content":"The `Read` method will return zero only if the end of the stream is reached. In all other cases, `Read` always reads at least one byte from the stream before returning. By definition, if no data is available from the stream upon a call to `Read`, the `Read` method returns zero (the end of the stream is reached automatically). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","nodes":[{"content":"The <ph id=\"ph1\">`Read`</ph> method will return zero only if the end of the stream is reached.","pos":[0,76],"source":"The `Read` method will return zero only if the end of the stream is reached."},{"content":"In all other cases, <ph id=\"ph1\">`Read`</ph> always reads at least one byte from the stream before returning.","pos":[77,168],"source":" In all other cases, `Read` always reads at least one byte from the stream before returning."},{"content":"By definition, if no data is available from the stream upon a call to <ph id=\"ph1\">`Read`</ph>, the <ph id=\"ph2\">`Read`</ph> method returns zero (the end of the stream is reached automatically).","pos":[169,327],"source":" By definition, if no data is available from the stream upon a call to `Read`, the `Read` method returns zero (the end of the stream is reached automatically)."},{"content":"An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","pos":[328,442]}]},{"pos":[1027,1094],"content":"Use <xref:System.IO.BinaryReader> for reading primitive data types.","nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.","pos":[0,67],"source":"Use <xref:System.IO.BinaryReader> for reading primitive data types."}]},{"pos":[1102,1325],"content":"[!CAUTION]\n If the byte array specified in the `buffer` parameter is the underlying buffer returned by the <xref:System.IO.MemoryStream.GetBuffer%2A> method, the array contents are overwritten, and no exception is thrown.","leadings":["","> "],"nodes":[{"content":"If the byte array specified in the <ph id=\"ph1\">`buffer`</ph> parameter is the underlying buffer returned by the <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> method, the array contents are overwritten, and no exception is thrown.","pos":[12,221],"source":" If the byte array specified in the `buffer` parameter is the underlying buffer returned by the <xref:System.IO.MemoryStream.GetBuffer%2A> method, the array contents are overwritten, and no exception is thrown."}]}],"pos":[63770,65109],"yaml":true,"extradata":"MT"},{"content":"When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the characters read from the current stream.","nodes":[{"pos":[0,211],"content":"When this method returns, contains the specified byte array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1) replaced by the characters read from the current stream.","source":"When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the characters read from the current stream."}],"pos":[65797,66009],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> at which to begin storing data from the current stream.","nodes":[{"pos":[0,105],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin storing data from the current stream.","source":"The zero-based byte offset in <code>buffer</code> at which to begin storing data from the current stream."}],"pos":[66070,66176],"yaml":true},{"content":"The maximum number of bytes to read.","nodes":[{"pos":[0,36],"content":"The maximum number of bytes to read.","nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]}],"pos":[66236,66273],"yaml":true},{"content":"The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.","nodes":[{"pos":[0,226],"content":"The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.","nodes":[{"content":"The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.","pos":[0,226],"nodes":[{"content":"The total number of bytes written into the buffer.","pos":[0,50]},{"content":"This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.","pos":[51,226]}]}]}],"pos":[66329,66556],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[66713,66744],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[66858,66913],"yaml":true},{"content":"<code>offset</code> subtracted from the buffer length is less than <code>count</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> subtracted from the buffer length is less than <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph>.","source":"<code>offset</code> subtracted from the buffer length is less than <code>count</code>."}],"pos":[67007,67094],"yaml":true},{"content":"The current stream instance is closed.","nodes":[{"pos":[0,38],"content":"The current stream instance is closed.","nodes":[{"content":"The current stream instance is closed.","pos":[0,38]}]}],"pos":[67200,67239],"yaml":true},{"content":"Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","nodes":[{"pos":[0,170],"content":"Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","nodes":[{"content":"Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.","pos":[0,170]}]}],"pos":[69035,69206],"yaml":true},{"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter.","nodes":[{"pos":[0,199],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."}]},{"pos":[206,446],"content":"You can create a cancellation token by creating an instance of the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> class and passing the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property as the <ph id=\"ph3\">`cancellationToken`</ph> parameter.","source":"You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter."}],"pos":[69217,69668],"yaml":true,"extradata":"MT"},{"content":"The buffer to write the data into.","nodes":[{"pos":[0,34],"content":"The buffer to write the data into.","nodes":[{"content":"The buffer to write the data into.","pos":[0,34]}]}],"pos":[69989,70024],"yaml":true},{"content":"The byte offset in <code>buffer</code> at which to begin writing data from the stream.","nodes":[{"pos":[0,86],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing data from the stream.","source":"The byte offset in <code>buffer</code> at which to begin writing data from the stream."}],"pos":[70085,70172],"yaml":true},{"content":"The maximum number of bytes to read.","nodes":[{"pos":[0,36],"content":"The maximum number of bytes to read.","nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]}],"pos":[70232,70269],"yaml":true},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[70363,70494],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"pos":[0,367],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.","pos":[56,160],"source":" The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","pos":[161,367]}]}],"pos":[70579,70947],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[71109,71140],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[71254,71309],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[71403,71491],"yaml":true},{"content":"The stream does not support reading.","nodes":[{"pos":[0,36],"content":"The stream does not support reading.","nodes":[{"content":"The stream does not support reading.","pos":[0,36]}]}],"pos":[71593,71630],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[71736,71766],"yaml":true},{"content":"The stream is currently in use by a previous read operation.","nodes":[{"pos":[0,60],"content":"The stream is currently in use by a previous read operation.","nodes":[{"content":"The stream is currently in use by a previous read operation.","pos":[0,60]}]}],"pos":[71876,71937],"yaml":true},{"content":"Reads a byte from the current stream.","nodes":[{"pos":[0,37],"content":"Reads a byte from the current stream.","nodes":[{"content":"Reads a byte from the current stream.","pos":[0,37]}]}],"pos":[73457,73495],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.ReadByte%2A>.  \n  \n If the read operation is successful, the current position within the stream is advanced by one byte. If an exception occurs, the current position within the stream is unchanged.","nodes":[{"pos":[0,58],"content":"This method overrides <xref:System.IO.Stream.ReadByte%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.ReadByte%2A&gt;</ph>.","pos":[0,58],"source":"This method overrides <xref:System.IO.Stream.ReadByte%2A>."}]},{"pos":[65,242],"content":"If the read operation is successful, the current position within the stream is advanced by one byte. If an exception occurs, the current position within the stream is unchanged.","nodes":[{"content":"If the read operation is successful, the current position within the stream is advanced by one byte. If an exception occurs, the current position within the stream is unchanged.","pos":[0,177],"nodes":[{"content":"If the read operation is successful, the current position within the stream is advanced by one byte.","pos":[0,100]},{"content":"If an exception occurs, the current position within the stream is unchanged.","pos":[101,177]}]}]}],"pos":[73506,73753],"yaml":true,"extradata":"MT"},{"content":"The byte cast to a <xref href=\"System.Int32\"></xref>, or -1 if the end of the stream has been reached.","nodes":[{"pos":[0,102],"content":"The byte cast to a <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph>, or -1 if the end of the stream has been reached.","source":"The byte cast to a <xref href=\"System.Int32\"></xref>, or -1 if the end of the stream has been reached."}],"pos":[74406,74509],"yaml":true},{"content":"The current stream instance is closed.","nodes":[{"pos":[0,38],"content":"The current stream instance is closed.","nodes":[{"content":"The current stream instance is closed.","pos":[0,38]}]}],"pos":[74674,74713],"yaml":true},{"content":"Sets the position within the current stream to the specified value.","nodes":[{"pos":[0,67],"content":"Sets the position within the current stream to the specified value.","nodes":[{"content":"Sets the position within the current stream to the specified value.","pos":[0,67]}]}],"pos":[76290,76358],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=fullName>.  \n  \n Seeking to any location beyond the length of the stream is supported.  \n  \n Do not use the <xref:System.IO.MemoryStream.Seek%2A> method to determine the new position in the stream if the <xref:System.IO.MemoryStream> was initialized with a non-zero offset. If you do, <xref:System.IO.MemoryStream.Seek%2A> will return an inaccurate value. Instead, use the <xref:System.IO.MemoryStream.Position%2A> property to get the new position of the stream.","nodes":[{"pos":[0,79],"content":"This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.Seek%2A?displayProperty=fullName&gt;</ph>.","pos":[0,79],"source":"This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=fullName>."}]},{"pos":[86,155],"content":"Seeking to any location beyond the length of the stream is supported.","nodes":[{"content":"Seeking to any location beyond the length of the stream is supported.","pos":[0,69]}]},{"pos":[162,531],"content":"Do not use the <xref:System.IO.MemoryStream.Seek%2A> method to determine the new position in the stream if the <xref:System.IO.MemoryStream> was initialized with a non-zero offset. If you do, <xref:System.IO.MemoryStream.Seek%2A> will return an inaccurate value. Instead, use the <xref:System.IO.MemoryStream.Position%2A> property to get the new position of the stream.","nodes":[{"content":"Do not use the <xref:System.IO.MemoryStream.Seek%2A> method to determine the new position in the stream if the <xref:System.IO.MemoryStream> was initialized with a non-zero offset. If you do, <xref:System.IO.MemoryStream.Seek%2A> will return an inaccurate value. Instead, use the <xref:System.IO.MemoryStream.Position%2A> property to get the new position of the stream.","pos":[0,369],"nodes":[{"content":"Do not use the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> method to determine the new position in the stream if the <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream&gt;</ph> was initialized with a non-zero offset.","pos":[0,180],"source":"Do not use the <xref:System.IO.MemoryStream.Seek%2A> method to determine the new position in the stream if the <xref:System.IO.MemoryStream> was initialized with a non-zero offset."},{"content":"If you do, <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Seek%2A&gt;</ph> will return an inaccurate value.","pos":[181,262],"source":" If you do, <xref:System.IO.MemoryStream.Seek%2A> will return an inaccurate value."},{"content":"Instead, use the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.Position%2A&gt;</ph> property to get the new position of the stream.","pos":[263,369],"source":" Instead, use the <xref:System.IO.MemoryStream.Position%2A> property to get the new position of the stream."}]}]}],"pos":[76369,76907],"yaml":true,"extradata":"MT"},{"content":"The new position within the stream. This is relative to the <code>loc</code> parameter, and can be positive or negative.","nodes":[{"pos":[0,120],"content":"The new position within the stream. This is relative to the <code>loc</code> parameter, and can be positive or negative.","nodes":[{"content":"The new position within the stream.","pos":[0,35]},{"content":"This is relative to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">loc</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter, and can be positive or negative.","pos":[36,120],"source":" This is relative to the <code>loc</code> parameter, and can be positive or negative."}]}],"pos":[77596,77717],"yaml":true},{"content":"A value of type <xref href=\"System.IO.SeekOrigin\"></xref>, which acts as the seek reference point.","nodes":[{"pos":[0,98],"content":"A value of type <ph id=\"ph1\">&lt;xref href=\"System.IO.SeekOrigin\"&gt;&lt;/xref&gt;</ph>, which acts as the seek reference point.","source":"A value of type <xref href=\"System.IO.SeekOrigin\"></xref>, which acts as the seek reference point."}],"pos":[77783,77882],"yaml":true},{"content":"The new position within the stream, calculated by combining the initial reference point and the offset.","nodes":[{"pos":[0,103],"content":"The new position within the stream, calculated by combining the initial reference point and the offset.","nodes":[{"content":"The new position within the stream, calculated by combining the initial reference point and the offset.","pos":[0,103]}]}],"pos":[77938,78042],"yaml":true},{"content":"Seeking is attempted before the beginning of the stream.","nodes":[{"pos":[0,56],"content":"Seeking is attempted before the beginning of the stream.","nodes":[{"content":"Seeking is attempted before the beginning of the stream.","pos":[0,56]}]}],"pos":[78185,78242],"yaml":true},{"content":"<code>offset</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>offset</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[78356,78436],"yaml":true},{"content":"There is an invalid <xref href=\"System.IO.SeekOrigin\"></xref>.  \n  \n -or-  \n  \n <code>offset</code> caused an arithmetic overflow.","nodes":[{"pos":[0,62],"content":"There is an invalid <ph id=\"ph1\">&lt;xref href=\"System.IO.SeekOrigin\"&gt;&lt;/xref&gt;</ph>.","source":"There is an invalid <xref href=\"System.IO.SeekOrigin\"></xref>."},{"pos":[69,73],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[80,130],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> caused an arithmetic overflow.","source":"<code>offset</code> caused an arithmetic overflow."}],"pos":[78530,78669],"yaml":true},{"content":"The current stream instance is closed.","nodes":[{"pos":[0,38],"content":"The current stream instance is closed.","nodes":[{"content":"The current stream instance is closed.","pos":[0,38]}]}],"pos":[78775,78814],"yaml":true},{"content":"Sets the length of the current stream to the specified value.","nodes":[{"pos":[0,61],"content":"Sets the length of the current stream to the specified value.","nodes":[{"content":"Sets the length of the current stream to the specified value.","pos":[0,61]}]}],"pos":[80322,80384],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.SetLength%2A>.  \n  \n If the specified value is less than the current length of the stream, the stream is truncated. If after the truncation the current position within the stream is past the end of the stream, the <xref:System.IO.MemoryStream.ReadByte%2A> method returns -1, the <xref:System.IO.MemoryStream.Read%2A> method reads zero bytes into the provided byte array, and <xref:System.IO.MemoryStream.Write%2A> and <xref:System.IO.MemoryStream.WriteByte%2A> methods append specified bytes at the end of the stream, increasing its length. If the specified value is larger than the current capacity and the stream is resizable, the capacity is increased, and the current position within the stream is unchanged. If the length is increased, the contents of the stream between the old and the new length are initialized to zeros.  \n  \n> [!NOTE]\n>  A <xref:System.IO.MemoryStream> instance must support writing for this method to work. Use the <xref:System.IO.MemoryStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.","nodes":[{"pos":[0,59],"content":"This method overrides <xref:System.IO.Stream.SetLength%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.SetLength%2A&gt;</ph>.","pos":[0,59],"source":"This method overrides <xref:System.IO.Stream.SetLength%2A>."}]},{"pos":[66,873],"content":"If the specified value is less than the current length of the stream, the stream is truncated. If after the truncation the current position within the stream is past the end of the stream, the <xref:System.IO.MemoryStream.ReadByte%2A> method returns -1, the <xref:System.IO.MemoryStream.Read%2A> method reads zero bytes into the provided byte array, and <xref:System.IO.MemoryStream.Write%2A> and <xref:System.IO.MemoryStream.WriteByte%2A> methods append specified bytes at the end of the stream, increasing its length. If the specified value is larger than the current capacity and the stream is resizable, the capacity is increased, and the current position within the stream is unchanged. If the length is increased, the contents of the stream between the old and the new length are initialized to zeros.","nodes":[{"content":"If the specified value is less than the current length of the stream, the stream is truncated. If after the truncation the current position within the stream is past the end of the stream, the <xref:System.IO.MemoryStream.ReadByte%2A> method returns -1, the <xref:System.IO.MemoryStream.Read%2A> method reads zero bytes into the provided byte array, and <xref:System.IO.MemoryStream.Write%2A> and <xref:System.IO.MemoryStream.WriteByte%2A> methods append specified bytes at the end of the stream, increasing its length. If the specified value is larger than the current capacity and the stream is resizable, the capacity is increased, and the current position within the stream is unchanged. If the length is increased, the contents of the stream between the old and the new length are initialized to zeros.","pos":[0,807],"nodes":[{"content":"If the specified value is less than the current length of the stream, the stream is truncated.","pos":[0,94]},{"content":"If after the truncation the current position within the stream is past the end of the stream, the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.ReadByte%2A&gt;</ph> method returns -1, the <ph id=\"ph2\">&lt;xref:System.IO.MemoryStream.Read%2A&gt;</ph> method reads zero bytes into the provided byte array, and <ph id=\"ph3\">&lt;xref:System.IO.MemoryStream.Write%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.IO.MemoryStream.WriteByte%2A&gt;</ph> methods append specified bytes at the end of the stream, increasing its length.","pos":[95,519],"source":" If after the truncation the current position within the stream is past the end of the stream, the <xref:System.IO.MemoryStream.ReadByte%2A> method returns -1, the <xref:System.IO.MemoryStream.Read%2A> method reads zero bytes into the provided byte array, and <xref:System.IO.MemoryStream.Write%2A> and <xref:System.IO.MemoryStream.WriteByte%2A> methods append specified bytes at the end of the stream, increasing its length."},{"content":"If the specified value is larger than the current capacity and the stream is resizable, the capacity is increased, and the current position within the stream is unchanged.","pos":[520,691]},{"content":"If the length is increased, the contents of the stream between the old and the new length are initialized to zeros.","pos":[692,807]}]}]},{"pos":[881,1166],"content":"[!NOTE]\n A <xref:System.IO.MemoryStream> instance must support writing for this method to work. Use the <xref:System.IO.MemoryStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.","leadings":["","> "],"nodes":[{"content":" A <xref:System.IO.MemoryStream> instance must support writing for this method to work. Use the <xref:System.IO.MemoryStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.","pos":[8,283],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> instance must support writing for this method to work.","pos":[1,87],"source":" A <xref:System.IO.MemoryStream> instance must support writing for this method to work."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.CanWrite%2A&gt;</ph> property to determine whether the current instance supports writing.","pos":[88,206],"source":" Use the <xref:System.IO.MemoryStream.CanWrite%2A> property to determine whether the current instance supports writing."},{"content":"For additional information, see <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanWrite%2A&gt;</ph>.","pos":[207,275],"source":" For additional information, see <xref:System.IO.Stream.CanWrite%2A>."}]}]}],"pos":[80395,81569],"yaml":true,"extradata":"MT"},{"content":"The value at which to set the length.","nodes":[{"pos":[0,37],"content":"The value at which to set the length.","nodes":[{"content":"The value at which to set the length.","pos":[0,37]}]}],"pos":[81713,81751],"yaml":true},{"content":"The current stream is not resizable and <code>value</code> is larger than the current capacity.  \n  \n -or-  \n  \n The current stream does not support writing.","nodes":[{"pos":[0,95],"content":"The current stream is not resizable and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is larger than the current capacity.","source":"The current stream is not resizable and <code>value</code> is larger than the current capacity."},{"pos":[102,106],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[113,157],"content":"The current stream does not support writing.","nodes":[{"content":"The current stream does not support writing.","pos":[0,44]}]}],"pos":[81913,82077],"yaml":true},{"content":"<code>value</code> is negative or is greater than the maximum length of the <xref href=\"System.IO.MemoryStream\"></xref>, where the maximum length is(<xref href=\"System.Int32.MaxValue\"></xref> - origin), and origin is the index into the underlying buffer at which the stream starts.","nodes":[{"pos":[0,281],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is negative or is greater than the maximum length of the <ph id=\"ph2\">&lt;xref href=\"System.IO.MemoryStream\"&gt;&lt;/xref&gt;</ph>, where the maximum length is(<ph id=\"ph3\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph><ph id=\"ph4\"> -</ph> origin), and origin is the index into the underlying buffer at which the stream starts.","source":"<code>value</code> is negative or is greater than the maximum length of the <xref href=\"System.IO.MemoryStream\"></xref>, where the maximum length is(<xref href=\"System.Int32.MaxValue\"></xref> - origin), and origin is the index into the underlying buffer at which the stream starts."}],"pos":[82191,82473],"yaml":true},{"content":"Writes the stream contents to a byte array, regardless of the <xref href=\"System.IO.MemoryStream.Position\"></xref> property.","nodes":[{"pos":[0,124],"content":"Writes the stream contents to a byte array, regardless of the <ph id=\"ph1\">&lt;xref href=\"System.IO.MemoryStream.Position\"&gt;&lt;/xref&gt;</ph> property.","source":"Writes the stream contents to a byte array, regardless of the <xref href=\"System.IO.MemoryStream.Position\"></xref> property."}],"pos":[83912,84037],"yaml":true},{"content":"This method omits unused bytes in <xref:System.IO.MemoryStream> from the array. To get the entire buffer, use the <xref:System.IO.MemoryStream.GetBuffer%2A> method.  \n  \n This method returns a copy of the contents of the <xref:System.IO.MemoryStream> as a byte array. If the current instance was constructed on a provided byte array, a copy of the section of the array to which this instance has access is returned. See the <xref:System.IO.MemoryStream.%23ctor%2A> constructor for details.  \n  \n> [!NOTE]\n>  This method works when the <xref:System.IO.MemoryStream> is closed.","nodes":[{"pos":[0,164],"content":"This method omits unused bytes in <xref:System.IO.MemoryStream> from the array. To get the entire buffer, use the <xref:System.IO.MemoryStream.GetBuffer%2A> method.","nodes":[{"content":"This method omits unused bytes in <xref:System.IO.MemoryStream> from the array. To get the entire buffer, use the <xref:System.IO.MemoryStream.GetBuffer%2A> method.","pos":[0,164],"nodes":[{"content":"This method omits unused bytes in <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> from the array.","pos":[0,79],"source":"This method omits unused bytes in <xref:System.IO.MemoryStream> from the array."},{"content":"To get the entire buffer, use the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.GetBuffer%2A&gt;</ph> method.","pos":[80,164],"source":" To get the entire buffer, use the <xref:System.IO.MemoryStream.GetBuffer%2A> method."}]}]},{"pos":[171,489],"content":"This method returns a copy of the contents of the <xref:System.IO.MemoryStream> as a byte array. If the current instance was constructed on a provided byte array, a copy of the section of the array to which this instance has access is returned. See the <xref:System.IO.MemoryStream.%23ctor%2A> constructor for details.","nodes":[{"content":"This method returns a copy of the contents of the <xref:System.IO.MemoryStream> as a byte array. If the current instance was constructed on a provided byte array, a copy of the section of the array to which this instance has access is returned. See the <xref:System.IO.MemoryStream.%23ctor%2A> constructor for details.","pos":[0,318],"nodes":[{"content":"This method returns a copy of the contents of the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> as a byte array.","pos":[0,96],"source":"This method returns a copy of the contents of the <xref:System.IO.MemoryStream> as a byte array."},{"content":"If the current instance was constructed on a provided byte array, a copy of the section of the array to which this instance has access is returned.","pos":[97,244]},{"content":"See the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream.%23ctor%2A&gt;</ph> constructor for details.","pos":[245,318],"source":" See the <xref:System.IO.MemoryStream.%23ctor%2A> constructor for details."}]}]},{"pos":[497,575],"content":"[!NOTE]\n This method works when the <xref:System.IO.MemoryStream> is closed.","leadings":["","> "],"nodes":[{"content":"This method works when the <ph id=\"ph1\">&lt;xref:System.IO.MemoryStream&gt;</ph> is closed.","pos":[9,76],"source":" This method works when the <xref:System.IO.MemoryStream> is closed."}]}],"pos":[84048,84631],"yaml":true,"extradata":"MT"},{"content":"A new byte array.","nodes":[{"pos":[0,17],"content":"A new byte array.","nodes":[{"content":"A new byte array.","pos":[0,17]}]}],"pos":[84764,84782],"yaml":true},{"content":"Returns the array of unsigned bytes from which this stream was created. The return value indicates whether the conversion succeeded.","nodes":[{"pos":[0,132],"content":"Returns the array of unsigned bytes from which this stream was created. The return value indicates whether the conversion succeeded.","nodes":[{"content":"Returns the array of unsigned bytes from which this stream was created. The return value indicates whether the conversion succeeded.","pos":[0,132],"nodes":[{"content":"Returns the array of unsigned bytes from which this stream was created.","pos":[0,71]},{"content":"The return value indicates whether the conversion succeeded.","pos":[72,132]}]}]}],"pos":[86471,86604],"yaml":true},{"content":"The byte array segment from which this stream was created.","nodes":[{"pos":[0,58],"content":"The byte array segment from which this stream was created.","nodes":[{"content":"The byte array segment from which this stream was created.","pos":[0,58]}]}],"pos":[86790,86849],"yaml":true},{"content":"`true` if the conversion was successful; otherwise, `false`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">`true`</ph> if the conversion was successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the conversion was successful; otherwise, `false`."}],"pos":[86907,86970],"yaml":true},{"content":"Writes a block of bytes to the current stream using data read from a buffer.","nodes":[{"pos":[0,76],"content":"Writes a block of bytes to the current stream using data read from a buffer.","nodes":[{"content":"Writes a block of bytes to the current stream using data read from a buffer.","pos":[0,76]}]}],"pos":[88392,88469],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.Write%2A>.  \n  \n The `offset` parameter gives the offset of the first byte in `buffer` to write from, and the `count` parameter gives the number of bytes to write. If the write operation is successful, the current position within the stream is advanced by the number of bytes written. If an exception occurs, the current position within the stream is unchanged.  \n  \n Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`.","nodes":[{"pos":[0,55],"content":"This method overrides <xref:System.IO.Stream.Write%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.Write%2A&gt;</ph>.","pos":[0,55],"source":"This method overrides <xref:System.IO.Stream.Write%2A>."}]},{"pos":[62,406],"content":"The `offset` parameter gives the offset of the first byte in `buffer` to write from, and the `count` parameter gives the number of bytes to write. If the write operation is successful, the current position within the stream is advanced by the number of bytes written. If an exception occurs, the current position within the stream is unchanged.","nodes":[{"content":"The <ph id=\"ph1\">`offset`</ph> parameter gives the offset of the first byte in <ph id=\"ph2\">`buffer`</ph> to write from, and the <ph id=\"ph3\">`count`</ph> parameter gives the number of bytes to write.","pos":[0,146],"source":"The `offset` parameter gives the offset of the first byte in `buffer` to write from, and the `count` parameter gives the number of bytes to write."},{"content":"If the write operation is successful, the current position within the stream is advanced by the number of bytes written.","pos":[147,267]},{"content":"If an exception occurs, the current position within the stream is unchanged.","pos":[268,344]}]},{"pos":[413,552],"content":"Except for a <ph id=\"ph1\">`MemoryStream`</ph> constructed with a byte[] parameter, write operations at the end of a <ph id=\"ph2\">`MemoryStream`</ph> expand the <ph id=\"ph3\">`MemoryStream`</ph>.","source":"Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`."}],"pos":[88480,89039],"yaml":true,"extradata":"MT"},{"content":"The buffer to write data from.","nodes":[{"pos":[0,30],"content":"The buffer to write data from.","nodes":[{"content":"The buffer to write data from.","pos":[0,30]}]}],"pos":[89729,89760],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> at which to begin copying bytes to the current stream.","nodes":[{"pos":[0,104],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin copying bytes to the current stream.","source":"The zero-based byte offset in <code>buffer</code> at which to begin copying bytes to the current stream."}],"pos":[89821,89926],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[89986,90024],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[90182,90213],"yaml":true},{"content":"The stream does not support writing. For additional information see <xref href=\"System.IO.Stream.CanWrite\"></xref>.  \n  \n -or-  \n  \n The current position is closer than <code>count</code> bytes to the end of the stream, and the capacity cannot be modified.","nodes":[{"pos":[0,115],"content":"The stream does not support writing. For additional information see <xref href=\"System.IO.Stream.CanWrite\"></xref>.","nodes":[{"content":"The stream does not support writing.","pos":[0,36]},{"content":"For additional information see <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.CanWrite\"&gt;&lt;/xref&gt;</ph>.","pos":[37,115],"source":" For additional information see <xref href=\"System.IO.Stream.CanWrite\"></xref>."}]},{"pos":[122,126],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[133,256],"content":"The current position is closer than <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> bytes to the end of the stream, and the capacity cannot be modified.","source":"The current position is closer than <code>count</code> bytes to the end of the stream, and the capacity cannot be modified."}],"pos":[90315,90580],"yaml":true},{"content":"<code>offset</code> subtracted from the buffer length is less than <code>count</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> subtracted from the buffer length is less than <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph>.","source":"<code>offset</code> subtracted from the buffer length is less than <code>count</code>."}],"pos":[90674,90761],"yaml":true},{"content":"<code>offset</code> or <code>count</code> are negative.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> are negative.","source":"<code>offset</code> or <code>count</code> are negative."}],"pos":[90875,90931],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[91019,91040],"yaml":true},{"content":"The current stream instance is closed.","nodes":[{"pos":[0,38],"content":"The current stream instance is closed.","nodes":[{"content":"The current stream instance is closed.","pos":[0,38]}]}],"pos":[91146,91185],"yaml":true},{"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","nodes":[{"pos":[0,181],"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","nodes":[{"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","pos":[0,181]}]}],"pos":[92987,93169],"yaml":true},{"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \n  \n You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter.","nodes":[{"pos":[0,199],"content":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.","nodes":[{"content":"If the operation is canceled before it completes, the returned task contains the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskStatus.Canceled&gt;</ph> value for the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property.","pos":[0,199],"source":"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property."}]},{"pos":[206,446],"content":"You can create a cancellation token by creating an instance of the <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> class and passing the <ph id=\"ph2\">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property as the <ph id=\"ph3\">`cancellationToken`</ph> parameter.","source":"You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter."}],"pos":[93180,93631],"yaml":true,"extradata":"MT"},{"content":"The buffer to write data from.","nodes":[{"pos":[0,30],"content":"The buffer to write data from.","nodes":[{"content":"The buffer to write data from.","pos":[0,30]}]}],"pos":[93948,93979],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.","nodes":[{"pos":[0,98],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> from which to begin copying bytes to the stream.","source":"The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream."}],"pos":[94040,94139],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[94199,94237],"yaml":true},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[94331,94462],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[94533,94590],"yaml":true},{"content":"<code>buffer</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;buffer&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>buffer</code> is `null`."}],"pos":[94753,94784],"yaml":true},{"content":"<code>offset</code> or <code>count</code> is negative.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is negative.","source":"<code>offset</code> or <code>count</code> is negative."}],"pos":[94898,94953],"yaml":true},{"content":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.","nodes":[{"pos":[0,87],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> is larger than the buffer length.","source":"The sum of <code>offset</code> and <code>count</code> is larger than the buffer length."}],"pos":[95047,95135],"yaml":true},{"content":"The stream does not support writing.","nodes":[{"pos":[0,36],"content":"The stream does not support writing.","nodes":[{"content":"The stream does not support writing.","pos":[0,36]}]}],"pos":[95237,95274],"yaml":true},{"content":"The stream has been disposed.","nodes":[{"pos":[0,29],"content":"The stream has been disposed.","nodes":[{"content":"The stream has been disposed.","pos":[0,29]}]}],"pos":[95380,95410],"yaml":true},{"content":"The stream is currently in use by a previous write operation.","nodes":[{"pos":[0,61],"content":"The stream is currently in use by a previous write operation.","nodes":[{"content":"The stream is currently in use by a previous write operation.","pos":[0,61]}]}],"pos":[95520,95582],"yaml":true},{"content":"Writes a byte to the current stream at the current position.","nodes":[{"pos":[0,60],"content":"Writes a byte to the current stream at the current position.","nodes":[{"content":"Writes a byte to the current stream at the current position.","pos":[0,60]}]}],"pos":[97159,97220],"yaml":true},{"content":"This method overrides <xref:System.IO.Stream.WriteByte%2A>.  \n  \n Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`.","nodes":[{"pos":[0,59],"content":"This method overrides <xref:System.IO.Stream.WriteByte%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.IO.Stream.WriteByte%2A&gt;</ph>.","pos":[0,59],"source":"This method overrides <xref:System.IO.Stream.WriteByte%2A>."}]},{"pos":[66,205],"content":"Except for a <ph id=\"ph1\">`MemoryStream`</ph> constructed with a byte[] parameter, write operations at the end of a <ph id=\"ph2\">`MemoryStream`</ph> expand the <ph id=\"ph3\">`MemoryStream`</ph>.","source":"Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`."}],"pos":[97231,97441],"yaml":true,"extradata":"MT"},{"content":"The byte to write.","nodes":[{"pos":[0,18],"content":"The byte to write.","nodes":[{"content":"The byte to write.","pos":[0,18]}]}],"pos":[98106,98125],"yaml":true},{"content":"The stream does not support writing. For additional information see <xref href=\"System.IO.Stream.CanWrite\"></xref>.  \n  \n -or-  \n  \n The current position is at the end of the stream, and the capacity cannot be modified.","nodes":[{"pos":[0,115],"content":"The stream does not support writing. For additional information see <xref href=\"System.IO.Stream.CanWrite\"></xref>.","nodes":[{"content":"The stream does not support writing.","pos":[0,36]},{"content":"For additional information see <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.CanWrite\"&gt;&lt;/xref&gt;</ph>.","pos":[37,115],"source":" For additional information see <xref href=\"System.IO.Stream.CanWrite\"></xref>."}]},{"pos":[122,126],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[133,219],"content":"The current position is at the end of the stream, and the capacity cannot be modified.","nodes":[{"content":"The current position is at the end of the stream, and the capacity cannot be modified.","pos":[0,86]}]}],"pos":[98287,98515],"yaml":true},{"content":"The current stream is closed.","nodes":[{"pos":[0,29],"content":"The current stream is closed.","nodes":[{"content":"The current stream is closed.","pos":[0,29]}]}],"pos":[98621,98651],"yaml":true},{"content":"Writes the entire contents of this memory stream to another stream.","nodes":[{"pos":[0,67],"content":"Writes the entire contents of this memory stream to another stream.","nodes":[{"content":"Writes the entire contents of this memory stream to another stream.","pos":[0,67]}]}],"pos":[100162,100230],"yaml":true},{"content":"When the current stream is open, this method is equivalent to calling <xref:System.IO.Stream.Write%2A?displayProperty=fullName> on the underlying buffer of this stream.","nodes":[{"pos":[0,168],"content":"When the current stream is open, this method is equivalent to calling <xref:System.IO.Stream.Write%2A?displayProperty=fullName> on the underlying buffer of this stream.","nodes":[{"content":"When the current stream is open, this method is equivalent to calling <ph id=\"ph1\">&lt;xref:System.IO.Stream.Write%2A?displayProperty=fullName&gt;</ph> on the underlying buffer of this stream.","pos":[0,168],"source":"When the current stream is open, this method is equivalent to calling <xref:System.IO.Stream.Write%2A?displayProperty=fullName> on the underlying buffer of this stream."}]}],"pos":[100241,100410],"yaml":true,"extradata":"MT"},{"content":"The stream to write this memory stream to.","nodes":[{"pos":[0,42],"content":"The stream to write this memory stream to.","nodes":[{"content":"The stream to write this memory stream to.","pos":[0,42]}]}],"pos":[100569,100612],"yaml":true},{"content":"<code>stream</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;stream&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>stream</code> is `null`."}],"pos":[100772,100803],"yaml":true},{"content":"The current or target stream is closed.","nodes":[{"pos":[0,39],"content":"The current or target stream is closed.","nodes":[{"content":"The current or target stream is closed.","pos":[0,39]}]}],"pos":[100909,100949],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.MemoryStream\n  commentId: T:System.IO.MemoryStream\n  id: MemoryStream\n  children:\n  - System.IO.MemoryStream.#ctor\n  - System.IO.MemoryStream.#ctor(System.Byte[])\n  - System.IO.MemoryStream.#ctor(System.Int32)\n  - System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)\n  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)\n  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  - System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)\n  - System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.MemoryStream.CanRead\n  - System.IO.MemoryStream.CanSeek\n  - System.IO.MemoryStream.CanWrite\n  - System.IO.MemoryStream.Capacity\n  - System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.MemoryStream.Dispose(System.Boolean)\n  - System.IO.MemoryStream.EndRead(System.IAsyncResult)\n  - System.IO.MemoryStream.EndWrite(System.IAsyncResult)\n  - System.IO.MemoryStream.Flush\n  - System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)\n  - System.IO.MemoryStream.GetBuffer\n  - System.IO.MemoryStream.Length\n  - System.IO.MemoryStream.Position\n  - System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.MemoryStream.ReadByte\n  - System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.IO.MemoryStream.SetLength(System.Int64)\n  - System.IO.MemoryStream.ToArray\n  - System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)\n  - System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.MemoryStream.WriteByte(System.Byte)\n  - System.IO.MemoryStream.WriteTo(System.IO.Stream)\n  langs:\n  - csharp\n  name: MemoryStream\n  nameWithType: MemoryStream\n  fullName: System.IO.MemoryStream\n  type: Class\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Creates a stream whose backing store is memory.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/memorystream.cs#1a4dcb744a23ba6f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n The current position of a stream is the position at which the next read or write operation could take place. The current position can be retrieved or set through the <xref:System.IO.MemoryStream.Seek%2A> method. When a new instance of <xref:System.IO.MemoryStream> is created, the current position is set to zero.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n Memory streams created with an unsigned byte array provide a non-resizable stream of the data. When using a byte array, you can neither append to nor shrink the stream, although you might be able to modify the existing contents depending on the parameters passed into the constructor. Empty memory streams are resizable, and can be written to and read from.  \\n  \\n If a <xref:System.IO.MemoryStream> object is added to a ResX file or a .resources file, call the <xref:System.Resources.ResourceManager.GetStream%2A> method at runtime to retrieve it.  \\n  \\n If a <xref:System.IO.MemoryStream> object is serialized to a resource file it will actually be serialized as an <xref:System.IO.UnmanagedMemoryStream>. This behavior provides better performance, as well as the ability to get a pointer to the data directly, without having to go through <xref:System.IO.Stream> methods.\"\n  example:\n  - \"The following code example shows how to read and write data using memory as a backing store.  \\n  \\n [!code-cpp[System.IO.MemoryStream#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#1)]\\n [!code-csharp[System.IO.MemoryStream#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#1)]\\n [!code-vb[System.IO.MemoryStream#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class MemoryStream : System.IO.Stream\n  inheritance:\n  - System.Object\n  - System.IO.Stream\n  implements: []\n  inheritedMembers:\n  - System.IO.Stream.CanTimeout\n  - System.IO.Stream.Close\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CreateWaitHandle\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.Null\n  - System.IO.Stream.ObjectInvariant\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadTimeout\n  - System.IO.Stream.Synchronized(System.IO.Stream)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteTimeout\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.#ctor\n  commentId: M:System.IO.MemoryStream.#ctor\n  id: '#ctor'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: MemoryStream()\n  nameWithType: MemoryStream.MemoryStream()\n  fullName: MemoryStream.MemoryStream()\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.MemoryStream\"></xref> class with an expandable capacity initialized to zero.\n  remarks: \"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`.  \\n  \\n The capacity of the current stream automatically increases when you use the <xref:System.IO.MemoryStream.SetLength%2A> method to set the length to a value larger than the capacity of the current stream.  \\n  \\n This constructor exposes the underlying stream, which <xref:System.IO.MemoryStream.GetBuffer%2A> returns.\"\n  syntax:\n    content: public MemoryStream ();\n    parameters: []\n  overload: System.IO.MemoryStream.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.#ctor(System.Byte[])\n  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: MemoryStream(Byte[])\n  nameWithType: MemoryStream.MemoryStream(Byte[])\n  fullName: MemoryStream.MemoryStream(Byte[])\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified byte array.\n  remarks: \"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to the length of the specified byte array. The new stream can be written to, but is not resizable.  \\n  \\n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \\n  \\n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>.\"\n  syntax:\n    content: public MemoryStream (byte[] buffer);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The array of unsigned bytes from which to create the current stream.\n  overload: System.IO.MemoryStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.#ctor(System.Int32)\n  commentId: M:System.IO.MemoryStream.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: MemoryStream(Int32)\n  nameWithType: MemoryStream.MemoryStream(Int32)\n  fullName: MemoryStream.MemoryStream(Int32)\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.MemoryStream\"></xref> class with an expandable capacity initialized as specified.\n  remarks: \"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`.  \\n  \\n The capacity automatically increases when you use the <xref:System.IO.MemoryStream.SetLength%2A> method to set the length to a value larger than the capacity of the current stream. Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`.  \\n  \\n This constructor exposes the underlying stream that <xref:System.IO.MemoryStream.GetBuffer%2A> returns.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \\n  \\n [!code-cpp[System.IO.MemoryStream#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#2)]\\n [!code-csharp[System.IO.MemoryStream#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#2)]\\n [!code-vb[System.IO.MemoryStream#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#2)]\"\n  syntax:\n    content: public MemoryStream (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The initial size of the internal array in bytes.\n  overload: System.IO.MemoryStream.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is negative.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)\n  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)\n  id: '#ctor(System.Byte[],System.Boolean)'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: MemoryStream(Byte[], Boolean)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Boolean)\n  fullName: MemoryStream.MemoryStream(Byte[], Boolean)\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified byte array with the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property set as specified.\n  remarks: \"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to the length of the specified byte array.  \\n  \\n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \\n  \\n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>.\"\n  syntax:\n    content: public MemoryStream (byte[] buffer, bool writable);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The array of unsigned bytes from which to create this stream.\n    - id: writable\n      type: System.Boolean\n      description: The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property, which determines whether the stream supports writing.\n  overload: System.IO.MemoryStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)\n  id: '#ctor(System.Byte[],System.Int32,System.Int32)'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: MemoryStream(Byte[], Int32, Int32)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32)\n  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified region (index) of a byte array.\n  remarks: \"The <xref:System.IO.MemoryStream.CanRead%2A>, <xref:System.IO.MemoryStream.CanSeek%2A>, and <xref:System.IO.MemoryStream.CanWrite%2A> properties are all set to `true`, but the capacity cannot be changed. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.  \\n  \\n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \\n  \\n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>. However, you can write to the stream.\"\n  syntax:\n    content: public MemoryStream (byte[] buffer, int index, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The array of unsigned bytes from which to create this stream.\n    - id: index\n      type: System.Int32\n      description: The index into <code>buffer</code> at which the stream begins.\n    - id: count\n      type: System.Int32\n      description: The length of the stream in bytes.\n  overload: System.IO.MemoryStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The buffer length minus <code>index</code> is less than <code>count</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: MemoryStream(Byte[], Int32, Int32, Boolean)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean)\n  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean)\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new non-resizable instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified region of a byte array, with the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property set as specified.\n  remarks: \"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.  \\n  \\n The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).  \\n  \\n This constructor does not expose the underlying stream. <xref:System.IO.MemoryStream.GetBuffer%2A> throws <xref:System.UnauthorizedAccessException>. However, you can write to the stream if `writable` is `true`.\"\n  syntax:\n    content: public MemoryStream (byte[] buffer, int index, int count, bool writable);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The array of unsigned bytes from which to create this stream.\n    - id: index\n      type: System.Int32\n      description: The index in <code>buffer</code> at which the stream begins.\n    - id: count\n      type: System.Int32\n      description: The length of the stream in bytes.\n    - id: writable\n      type: System.Boolean\n      description: The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property, which determines whether the stream supports writing.\n  overload: System.IO.MemoryStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> are negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The buffer length minus <code>index</code> is less than <code>count</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)\n  commentId: M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)\n  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)'\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)\n  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)\n  type: Constructor\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.MemoryStream\"></xref> class based on the specified region of a byte array, with the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property set as specified, and the ability to call <xref href=\"System.IO.MemoryStream.GetBuffer\"></xref> set as specified.\n  remarks: \"The <xref:System.IO.MemoryStream.CanRead%2A> and <xref:System.IO.MemoryStream.CanSeek%2A> properties are both set to `true`. <xref:System.IO.MemoryStream.Capacity%2A> is set to `count`.  \\n  \\n The new stream instance can be written to, but the <xref:System.IO.MemoryStream.Capacity%2A> of the underlying byte array cannot be changed. The length of the stream cannot be set to a value greater than the initial length of the specified byte array; however, the stream can be truncated (see <xref:System.IO.MemoryStream.SetLength%2A>).\"\n  syntax:\n    content: public MemoryStream (byte[] buffer, int index, int count, bool writable, bool publiclyVisible);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The array of unsigned bytes from which to create this stream.\n    - id: index\n      type: System.Int32\n      description: The index into <code>buffer</code> at which the stream begins.\n    - id: count\n      type: System.Int32\n      description: The length of the stream in bytes.\n    - id: writable\n      type: System.Boolean\n      description: The setting of the <xref href=\"System.IO.MemoryStream.CanWrite\"></xref> property, which determines whether the stream supports writing.\n    - id: publiclyVisible\n      type: System.Boolean\n      description: '`true` to enable <xref href=\"System.IO.MemoryStream.GetBuffer\"></xref>, which returns the unsigned byte array from which the stream was created; otherwise, `false`.'\n  overload: System.IO.MemoryStream.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The buffer length minus <code>index</code> is less than <code>count</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: MemoryStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: MemoryStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  syntax:\n    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: ''\n    - id: offset\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: callback\n      type: System.AsyncCallback\n      description: ''\n    - id: state\n      type: System.Object\n      description: ''\n    return:\n      type: System.IAsyncResult\n      description: ''\n  overload: System.IO.MemoryStream.BeginRead*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: MemoryStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: MemoryStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  syntax:\n    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: ''\n    - id: offset\n      type: System.Int32\n      description: ''\n    - id: count\n      type: System.Int32\n      description: ''\n    - id: callback\n      type: System.AsyncCallback\n      description: ''\n    - id: state\n      type: System.Object\n      description: ''\n    return:\n      type: System.IAsyncResult\n      description: ''\n  overload: System.IO.MemoryStream.BeginWrite*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.CanRead\n  commentId: P:System.IO.MemoryStream.CanRead\n  id: CanRead\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: MemoryStream.CanRead\n  fullName: MemoryStream.CanRead\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Gets a value indicating whether the current stream supports reading.\n  remarks: \"If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.MemoryStream.Read%2A> and <xref:System.IO.MemoryStream.ReadByte%2A> methods throw a <xref:System.NotSupportedException>.  \\n  \\n If the stream is closed, this property returns `false`.\"\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stream is open.'\n  overload: System.IO.MemoryStream.CanRead*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.CanSeek\n  commentId: P:System.IO.MemoryStream.CanSeek\n  id: CanSeek\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: MemoryStream.CanSeek\n  fullName: MemoryStream.CanSeek\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Gets a value indicating whether the current stream supports seeking.\n  remarks: \"If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.MemoryStream.Length%2A>, <xref:System.IO.MemoryStream.SetLength%2A>, <xref:System.IO.MemoryStream.Position%2A>, and <xref:System.IO.MemoryStream.Seek%2A> throw a <xref:System.NotSupportedException>.  \\n  \\n If the stream is closed, this property returns `false`.\"\n  syntax:\n    content: public override bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stream is open.'\n  overload: System.IO.MemoryStream.CanSeek*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.CanWrite\n  commentId: P:System.IO.MemoryStream.CanWrite\n  id: CanWrite\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: MemoryStream.CanWrite\n  fullName: MemoryStream.CanWrite\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Gets a value indicating whether the current stream supports writing.\n  remarks: \"If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Write%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>.  \\n  \\n If the stream is closed, this property returns `false`.\"\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stream supports writing; otherwise, `false`.'\n  overload: System.IO.MemoryStream.CanWrite*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.Capacity\n  commentId: P:System.IO.MemoryStream.Capacity\n  id: Capacity\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: MemoryStream.Capacity\n  fullName: MemoryStream.Capacity\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Gets or sets the number of bytes allocated for this stream.\n  remarks: '`Capacity` is the buffer length for system-provided byte arrays. `Capacity` cannot be set to a value less than the current length of the stream.'\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \\n  \\n [!code-cpp[System.IO.MemoryStream#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#5)]\\n [!code-csharp[System.IO.MemoryStream#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#5)]\\n [!code-vb[System.IO.MemoryStream#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#5)]\"\n  syntax:\n    content: public virtual int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: The length of the usable portion of the buffer for the stream.\n  overload: System.IO.MemoryStream.Capacity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: A capacity is set that is negative or less than the current length of the stream.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current stream is closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: '`set` is invoked on a stream whose capacity cannot be modified.'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)\n  commentId: M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)\n  id: CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: CopyTo(Stream, Int32)\n  nameWithType: MemoryStream.CopyTo(Stream, Int32)\n  fullName: MemoryStream.CopyTo(Stream, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  syntax:\n    content: public override void CopyTo (System.IO.Stream destination, int bufferSize);\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: ''\n    - id: bufferSize\n      type: System.Int32\n      description: ''\n  overload: System.IO.MemoryStream.CopyTo*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  id: CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  nameWithType: MemoryStream.CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: MemoryStream.CopyToAsync(Stream, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Asynchronously reads all the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.\n  syntax:\n    content: public override System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: destination\n      type: System.IO.Stream\n      description: The stream to which the contents of the current stream will be copied.\n    - id: bufferSize\n      type: System.Int32\n      description: The size, in bytes, of the buffer. This value must be greater than zero.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous copy operation.\n  overload: System.IO.MemoryStream.CopyToAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>destination</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>buffersize</code> is negative or zero.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: Either the current stream or the destination stream is disposed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current stream does not support reading, or the destination stream does not support writing.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.Dispose(System.Boolean)\n  commentId: M:System.IO.MemoryStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: MemoryStream.Dispose(Boolean)\n  fullName: MemoryStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Releases the unmanaged resources used by the <xref href=\"System.IO.MemoryStream\"></xref> class and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.MemoryStream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.MemoryStream.Dispose%2A> with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.MemoryStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.IO.MemoryStream.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.EndRead(System.IAsyncResult)\n  commentId: M:System.IO.MemoryStream.EndRead(System.IAsyncResult)\n  id: EndRead(System.IAsyncResult)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: EndRead(IAsyncResult)\n  nameWithType: MemoryStream.EndRead(IAsyncResult)\n  fullName: MemoryStream.EndRead(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  syntax:\n    content: public override int EndRead (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.IO.MemoryStream.EndRead*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.EndWrite(System.IAsyncResult)\n  commentId: M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)\n  id: EndWrite(System.IAsyncResult)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: EndWrite(IAsyncResult)\n  nameWithType: MemoryStream.EndWrite(IAsyncResult)\n  fullName: MemoryStream.EndWrite(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  syntax:\n    content: public override void EndWrite (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: ''\n  overload: System.IO.MemoryStream.EndWrite*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.Flush\n  commentId: M:System.IO.MemoryStream.Flush\n  id: Flush\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: MemoryStream.Flush()\n  fullName: MemoryStream.Flush()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Overrides the <xref href=\"System.IO.Stream.Flush\"></xref> method so that no action is performed.\n  remarks: \"This method overrides the <xref:System.IO.Stream.Flush%2A?displayProperty=fullName> method.  \\n  \\n Because any data written to a <xref:System.IO.MemoryStream> object is written into RAM, this method is redundant.\"\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.IO.MemoryStream.Flush*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)\n  commentId: M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)\n  id: FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: FlushAsync(CancellationToken)\n  nameWithType: MemoryStream.FlushAsync(CancellationToken)\n  fullName: MemoryStream.FlushAsync(CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Asynchronously clears all buffers for this stream, and monitors cancellation requests.\n  remarks: \"Because any data written to a <xref:System.IO.MemoryStream> object is written into RAM, this method is redundant.  \\n  \\n If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \\n  \\n You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous flush operation.\n  overload: System.IO.MemoryStream.FlushAsync*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.GetBuffer\n  commentId: M:System.IO.MemoryStream.GetBuffer\n  id: GetBuffer\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: GetBuffer()\n  nameWithType: MemoryStream.GetBuffer()\n  fullName: MemoryStream.GetBuffer()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Returns the array of unsigned bytes from which this stream was created.\n  remarks: \"Note that the buffer contains allocated bytes which might be unused. For example, if the string \\\"test\\\" is written into the <xref:System.IO.MemoryStream> object, the length of the buffer returned from <xref:System.IO.MemoryStream.GetBuffer%2A> is 256, not 4, with 252 bytes unused. To obtain only the data in the buffer, use the <xref:System.IO.MemoryStream.ToArray%2A> method; however, <xref:System.IO.MemoryStream.ToArray%2A> creates a copy of the data in memory.  \\n  \\n The buffer can also be `null`.  \\n  \\n To create a `MemoryStream` instance with a publicly visible buffer, use <xref:System.IO.MemoryStream.%23ctor%2A>, <xref:System.IO.MemoryStream.%23ctor%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%2CSystem.Boolean%2CSystem.Boolean%29>, or <xref:System.IO.MemoryStream.%23ctor%28System.Int32%29>. If the current stream is resizable, two calls to this method do not return the same array if the underlying byte array is resized between calls. For additional information, see <xref:System.IO.MemoryStream.Capacity%2A>.  \\n  \\n> [!NOTE]\\n>  This method works when the memory stream is closed.\"\n  syntax:\n    content: public virtual byte[] GetBuffer ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: The byte array from which this stream was created, or the underlying array if a byte array was not provided to the <xref href=\"System.IO.MemoryStream\"></xref> constructor during construction of the current instance.\n  overload: System.IO.MemoryStream.GetBuffer*\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: The `MemoryStream` instance was not created with a publicly visible buffer.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.Length\n  commentId: P:System.IO.MemoryStream.Length\n  id: Length\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: Length\n  nameWithType: MemoryStream.Length\n  fullName: MemoryStream.Length\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Gets the length of the stream in bytes.\n  remarks: ''\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \\n  \\n [!code-cpp[System.IO.MemoryStream#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#5)]\\n [!code-csharp[System.IO.MemoryStream#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#5)]\\n [!code-vb[System.IO.MemoryStream#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#5)]\"\n  syntax:\n    content: public override long Length { get; }\n    return:\n      type: System.Int64\n      description: The length of the stream in bytes.\n  overload: System.IO.MemoryStream.Length*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.Position\n  commentId: P:System.IO.MemoryStream.Position\n  id: Position\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: Position\n  nameWithType: MemoryStream.Position\n  fullName: MemoryStream.Position\n  type: Property\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Gets or sets the current position within the stream.\n  remarks: ''\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \\n  \\n [!code-cpp[System.IO.MemoryStream#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#5)]\\n [!code-csharp[System.IO.MemoryStream#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#5)]\\n [!code-vb[System.IO.MemoryStream#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#5)]\"\n  syntax:\n    content: public override long Position { get; set; }\n    return:\n      type: System.Int64\n      description: The current position within the stream.\n  overload: System.IO.MemoryStream.Position*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The position is set to a negative value or a value greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: MemoryStream.Read(Byte[], Int32, Int32)\n  fullName: MemoryStream.Read(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a block of bytes from the current stream and writes the data to a buffer.\n  remarks: \"This method overrides <xref:System.IO.Stream.Read%2A>.  \\n  \\n The `offset` parameter gives the offset of the first byte in `buffer` to which data from the current stream is written. The `count` parameter gives the maximum number of bytes to read from the current stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached.  \\n  \\n If the read operation is successful, the current position within the stream advances by the number of bytes read. If an exception occurs, the current position within the stream remains unchanged.  \\n  \\n The `Read` method will return zero only if the end of the stream is reached. In all other cases, `Read` always reads at least one byte from the stream before returning. By definition, if no data is available from the stream upon a call to `Read`, the `Read` method returns zero (the end of the stream is reached automatically). An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.  \\n  \\n Use <xref:System.IO.BinaryReader> for reading primitive data types.  \\n  \\n> [!CAUTION]\\n>  If the byte array specified in the `buffer` parameter is the underlying buffer returned by the <xref:System.IO.MemoryStream.GetBuffer%2A> method, the array contents are overwritten, and no exception is thrown.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \\n  \\n [!code-cpp[System.IO.MemoryStream#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#7)]\\n [!code-csharp[System.IO.MemoryStream#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#7)]\\n [!code-vb[System.IO.MemoryStream#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#7)]\"\n  syntax:\n    content: public override int Read (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the characters read from the current stream.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> at which to begin storing data from the current stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    return:\n      type: System.Int32\n      description: The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.\n  overload: System.IO.MemoryStream.Read*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>offset</code> subtracted from the buffer length is less than <code>count</code>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current stream instance is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: MemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: MemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.\n  remarks: \"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \\n  \\n You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write the data into.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>buffer</code> at which to begin writing data from the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.\n  overload: System.IO.MemoryStream.ReadAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support reading.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The stream is currently in use by a previous read operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.ReadByte\n  commentId: M:System.IO.MemoryStream.ReadByte\n  id: ReadByte\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: ReadByte()\n  nameWithType: MemoryStream.ReadByte()\n  fullName: MemoryStream.ReadByte()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Reads a byte from the current stream.\n  remarks: \"This method overrides <xref:System.IO.Stream.ReadByte%2A>.  \\n  \\n If the read operation is successful, the current position within the stream is advanced by one byte. If an exception occurs, the current position within the stream is unchanged.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \\n  \\n [!code-cpp[System.IO.MemoryStream#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#8)]\\n [!code-csharp[System.IO.MemoryStream#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#8)]\\n [!code-vb[System.IO.MemoryStream#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#8)]\"\n  syntax:\n    content: public override int ReadByte ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The byte cast to a <xref href=\"System.Int32\"></xref>, or -1 if the end of the stream has been reached.\n  overload: System.IO.MemoryStream.ReadByte*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current stream instance is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  commentId: M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: MemoryStream.Seek(Int64, SeekOrigin)\n  fullName: MemoryStream.Seek(Int64, SeekOrigin)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Sets the position within the current stream to the specified value.\n  remarks: \"This method overrides <xref:System.IO.Stream.Seek%2A?displayProperty=fullName>.  \\n  \\n Seeking to any location beyond the length of the stream is supported.  \\n  \\n Do not use the <xref:System.IO.MemoryStream.Seek%2A> method to determine the new position in the stream if the <xref:System.IO.MemoryStream> was initialized with a non-zero offset. If you do, <xref:System.IO.MemoryStream.Seek%2A> will return an inaccurate value. Instead, use the <xref:System.IO.MemoryStream.Position%2A> property to get the new position of the stream.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \\n  \\n [!code-cpp[System.IO.MemoryStream#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#6)]\\n [!code-csharp[System.IO.MemoryStream#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#6)]\\n [!code-vb[System.IO.MemoryStream#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#6)]\"\n  syntax:\n    content: public override long Seek (long offset, System.IO.SeekOrigin loc);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: The new position within the stream. This is relative to the <code>loc</code> parameter, and can be positive or negative.\n    - id: loc\n      type: System.IO.SeekOrigin\n      description: A value of type <xref href=\"System.IO.SeekOrigin\"></xref>, which acts as the seek reference point.\n    return:\n      type: System.Int64\n      description: The new position within the stream, calculated by combining the initial reference point and the offset.\n  overload: System.IO.MemoryStream.Seek*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: Seeking is attempted before the beginning of the stream.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"There is an invalid <xref href=\\\"System.IO.SeekOrigin\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>offset</code> caused an arithmetic overflow.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current stream instance is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.SetLength(System.Int64)\n  commentId: M:System.IO.MemoryStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: MemoryStream.SetLength(Int64)\n  fullName: MemoryStream.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Sets the length of the current stream to the specified value.\n  remarks: \"This method overrides <xref:System.IO.Stream.SetLength%2A>.  \\n  \\n If the specified value is less than the current length of the stream, the stream is truncated. If after the truncation the current position within the stream is past the end of the stream, the <xref:System.IO.MemoryStream.ReadByte%2A> method returns -1, the <xref:System.IO.MemoryStream.Read%2A> method reads zero bytes into the provided byte array, and <xref:System.IO.MemoryStream.Write%2A> and <xref:System.IO.MemoryStream.WriteByte%2A> methods append specified bytes at the end of the stream, increasing its length. If the specified value is larger than the current capacity and the stream is resizable, the capacity is increased, and the current position within the stream is unchanged. If the length is increased, the contents of the stream between the old and the new length are initialized to zeros.  \\n  \\n> [!NOTE]\\n>  A <xref:System.IO.MemoryStream> instance must support writing for this method to work. Use the <xref:System.IO.MemoryStream.CanWrite%2A> property to determine whether the current instance supports writing. For additional information, see <xref:System.IO.Stream.CanWrite%2A>.\"\n  syntax:\n    content: public override void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The value at which to set the length.\n  overload: System.IO.MemoryStream.SetLength*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The current stream is not resizable and <code>value</code> is larger than the current capacity.  \\n  \\n -or-  \\n  \\n The current stream does not support writing.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>value</code> is negative or is greater than the maximum length of the <xref href=\"System.IO.MemoryStream\"></xref>, where the maximum length is(<xref href=\"System.Int32.MaxValue\"></xref> - origin), and origin is the index into the underlying buffer at which the stream starts.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.ToArray\n  commentId: M:System.IO.MemoryStream.ToArray\n  id: ToArray\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: ToArray()\n  nameWithType: MemoryStream.ToArray()\n  fullName: MemoryStream.ToArray()\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the stream contents to a byte array, regardless of the <xref href=\"System.IO.MemoryStream.Position\"></xref> property.\n  remarks: \"This method omits unused bytes in <xref:System.IO.MemoryStream> from the array. To get the entire buffer, use the <xref:System.IO.MemoryStream.GetBuffer%2A> method.  \\n  \\n This method returns a copy of the contents of the <xref:System.IO.MemoryStream> as a byte array. If the current instance was constructed on a provided byte array, a copy of the section of the array to which this instance has access is returned. See the <xref:System.IO.MemoryStream.%23ctor%2A> constructor for details.  \\n  \\n> [!NOTE]\\n>  This method works when the <xref:System.IO.MemoryStream> is closed.\"\n  syntax:\n    content: public virtual byte[] ToArray ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: A new byte array.\n  overload: System.IO.MemoryStream.ToArray*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)\n  commentId: M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)\n  id: TryGetBuffer(System.ArraySegment{System.Byte}@)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: TryGetBuffer(ArraySegment<Byte>)\n  nameWithType: MemoryStream.TryGetBuffer(ArraySegment<Byte>)\n  fullName: MemoryStream.TryGetBuffer(ArraySegment<Byte>)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Returns the array of unsigned bytes from which this stream was created. The return value indicates whether the conversion succeeded.\n  syntax:\n    content: public virtual bool TryGetBuffer (out ArraySegment<byte> buffer);\n    parameters:\n    - id: buffer\n      type: System.ArraySegment{System.Byte}\n      description: The byte array segment from which this stream was created.\n    return:\n      type: System.Boolean\n      description: '`true` if the conversion was successful; otherwise, `false`.'\n  overload: System.IO.MemoryStream.TryGetBuffer*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: MemoryStream.Write(Byte[], Int32, Int32)\n  fullName: MemoryStream.Write(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a block of bytes to the current stream using data read from a buffer.\n  remarks: \"This method overrides <xref:System.IO.Stream.Write%2A>.  \\n  \\n The `offset` parameter gives the offset of the first byte in `buffer` to write from, and the `count` parameter gives the number of bytes to write. If the write operation is successful, the current position within the stream is advanced by the number of bytes written. If an exception occurs, the current position within the stream is unchanged.  \\n  \\n Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \\n  \\n [!code-cpp[System.IO.MemoryStream#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#3)]\\n [!code-csharp[System.IO.MemoryStream#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#3)]\\n [!code-vb[System.IO.MemoryStream#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#3)]\"\n  syntax:\n    content: public override void Write (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write data from.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> at which to begin copying bytes to the current stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to write.\n  overload: System.IO.MemoryStream.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The stream does not support writing. For additional information see <xref href=\\\"System.IO.Stream.CanWrite\\\"></xref>.  \\n  \\n -or-  \\n  \\n The current position is closer than <code>count</code> bytes to the end of the stream, and the capacity cannot be modified.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>offset</code> subtracted from the buffer length is less than <code>count</code>.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> are negative.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current stream instance is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: MemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: MemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.\n  remarks: \"If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.  \\n  \\n You can create a cancellation token by creating an instance of the <xref:System.Threading.CancellationTokenSource> class and passing the <xref:System.Threading.CancellationTokenSource.Token%2A> property as the `cancellationToken` parameter.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write data from.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.MemoryStream.WriteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>buffer</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> or <code>count</code> is negative.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The sum of <code>offset</code> and <code>count</code> is larger than the buffer length.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream does not support writing.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream has been disposed.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The stream is currently in use by a previous write operation.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.WriteByte(System.Byte)\n  commentId: M:System.IO.MemoryStream.WriteByte(System.Byte)\n  id: WriteByte(System.Byte)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: WriteByte(Byte)\n  nameWithType: MemoryStream.WriteByte(Byte)\n  fullName: MemoryStream.WriteByte(Byte)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes a byte to the current stream at the current position.\n  remarks: \"This method overrides <xref:System.IO.Stream.WriteByte%2A>.  \\n  \\n Except for a `MemoryStream` constructed with a byte[] parameter, write operations at the end of a `MemoryStream` expand the `MemoryStream`.\"\n  example:\n  - \"This code example is part of a larger example provided for the <xref:System.IO.MemoryStream> class.  \\n  \\n [!code-cpp[System.IO.MemoryStream#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.MemoryStream/CPP/memstream.cpp#4)]\\n [!code-csharp[System.IO.MemoryStream#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.MemoryStream/CS/memstream.cs#4)]\\n [!code-vb[System.IO.MemoryStream#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.MemoryStream/VB/memstream.vb#4)]\"\n  syntax:\n    content: public override void WriteByte (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The byte to write.\n  overload: System.IO.MemoryStream.WriteByte*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The stream does not support writing. For additional information see <xref href=\\\"System.IO.Stream.CanWrite\\\"></xref>.  \\n  \\n -or-  \\n  \\n The current position is at the end of the stream, and the capacity cannot be modified.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current stream is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.MemoryStream.WriteTo(System.IO.Stream)\n  commentId: M:System.IO.MemoryStream.WriteTo(System.IO.Stream)\n  id: WriteTo(System.IO.Stream)\n  parent: System.IO.MemoryStream\n  langs:\n  - csharp\n  name: WriteTo(Stream)\n  nameWithType: MemoryStream.WriteTo(Stream)\n  fullName: MemoryStream.WriteTo(Stream)\n  type: Method\n  assemblies:\n  - System.IO\n  - mscorlib\n  - netstandard\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: Writes the entire contents of this memory stream to another stream.\n  remarks: When the current stream is open, this method is equivalent to calling <xref:System.IO.Stream.Write%2A?displayProperty=fullName> on the underlying buffer of this stream.\n  syntax:\n    content: public virtual void WriteTo (System.IO.Stream stream);\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: The stream to write this memory stream to.\n  overload: System.IO.MemoryStream.WriteTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>stream</code> is `null`.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current or target stream is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.IO.MemoryStream.#ctor\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: MemoryStream()\n  nameWithType: MemoryStream.MemoryStream()\n  fullName: MemoryStream.MemoryStream()\n- uid: System.IO.MemoryStream.#ctor(System.Byte[])\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: MemoryStream(Byte[])\n  nameWithType: MemoryStream.MemoryStream(Byte[])\n  fullName: MemoryStream.MemoryStream(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.MemoryStream.#ctor(System.Int32)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: MemoryStream(Int32)\n  nameWithType: MemoryStream.MemoryStream(Int32)\n  fullName: MemoryStream.MemoryStream(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: MemoryStream(Byte[], Boolean)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Boolean)\n  fullName: MemoryStream.MemoryStream(Byte[], Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: MemoryStream(Byte[], Int32, Int32)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32)\n  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32)\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: MemoryStream(Byte[], Int32, Int32, Boolean)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean)\n  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean)\n- uid: System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)\n  nameWithType: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)\n  fullName: MemoryStream.MemoryStream(Byte[], Int32, Int32, Boolean, Boolean)\n- uid: System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: MemoryStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: MemoryStream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: MemoryStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: MemoryStream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.MemoryStream.CanRead\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: CanRead\n  nameWithType: MemoryStream.CanRead\n  fullName: MemoryStream.CanRead\n- uid: System.IO.MemoryStream.CanSeek\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: MemoryStream.CanSeek\n  fullName: MemoryStream.CanSeek\n- uid: System.IO.MemoryStream.CanWrite\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: MemoryStream.CanWrite\n  fullName: MemoryStream.CanWrite\n- uid: System.IO.MemoryStream.Capacity\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Capacity\n  nameWithType: MemoryStream.Capacity\n  fullName: MemoryStream.Capacity\n- uid: System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: CopyTo(Stream, Int32)\n  nameWithType: MemoryStream.CopyTo(Stream, Int32)\n  fullName: MemoryStream.CopyTo(Stream, Int32)\n- uid: System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  nameWithType: MemoryStream.CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: MemoryStream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.IO.MemoryStream.Dispose(System.Boolean)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: MemoryStream.Dispose(Boolean)\n  fullName: MemoryStream.Dispose(Boolean)\n- uid: System.IO.MemoryStream.EndRead(System.IAsyncResult)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: MemoryStream.EndRead(IAsyncResult)\n  fullName: MemoryStream.EndRead(IAsyncResult)\n- uid: System.IO.MemoryStream.EndWrite(System.IAsyncResult)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: MemoryStream.EndWrite(IAsyncResult)\n  fullName: MemoryStream.EndWrite(IAsyncResult)\n- uid: System.IO.MemoryStream.Flush\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Flush()\n  nameWithType: MemoryStream.Flush()\n  fullName: MemoryStream.Flush()\n- uid: System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: FlushAsync(CancellationToken)\n  nameWithType: MemoryStream.FlushAsync(CancellationToken)\n  fullName: MemoryStream.FlushAsync(CancellationToken)\n- uid: System.IO.MemoryStream.GetBuffer\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: GetBuffer()\n  nameWithType: MemoryStream.GetBuffer()\n  fullName: MemoryStream.GetBuffer()\n- uid: System.IO.MemoryStream.Length\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Length\n  nameWithType: MemoryStream.Length\n  fullName: MemoryStream.Length\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.IO.MemoryStream.Position\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Position\n  nameWithType: MemoryStream.Position\n  fullName: MemoryStream.Position\n- uid: System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: MemoryStream.Read(Byte[], Int32, Int32)\n  fullName: MemoryStream.Read(Byte[], Int32, Int32)\n- uid: System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: MemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: MemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Int32>\n  nameWithType: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.MemoryStream.ReadByte\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: ReadByte()\n  nameWithType: MemoryStream.ReadByte()\n  fullName: MemoryStream.ReadByte()\n- uid: System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: MemoryStream.Seek(Int64, SeekOrigin)\n  fullName: MemoryStream.Seek(Int64, SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: false\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.IO.MemoryStream.SetLength(System.Int64)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: MemoryStream.SetLength(Int64)\n  fullName: MemoryStream.SetLength(Int64)\n- uid: System.IO.MemoryStream.ToArray\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: ToArray()\n  nameWithType: MemoryStream.ToArray()\n  fullName: MemoryStream.ToArray()\n- uid: System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: TryGetBuffer(ArraySegment<Byte>)\n  nameWithType: MemoryStream.TryGetBuffer(ArraySegment<Byte>)\n  fullName: MemoryStream.TryGetBuffer(ArraySegment<Byte>)\n- uid: System.ArraySegment`1\n  name: ArraySegment<T>\n  nameWithType: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n- uid: System.ArraySegment{System.Byte}\n  parent: System\n  isExternal: false\n  name: ArraySegment<Byte>\n  nameWithType: ArraySegment<Byte>\n  fullName: System.ArraySegment<System.Byte>\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: MemoryStream.Write(Byte[], Int32, Int32)\n  fullName: MemoryStream.Write(Byte[], Int32, Int32)\n- uid: System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: MemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: MemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.MemoryStream.WriteByte(System.Byte)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: WriteByte(Byte)\n  nameWithType: MemoryStream.WriteByte(Byte)\n  fullName: MemoryStream.WriteByte(Byte)\n- uid: System.IO.MemoryStream.WriteTo(System.IO.Stream)\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: WriteTo(Stream)\n  nameWithType: MemoryStream.WriteTo(Stream)\n  fullName: MemoryStream.WriteTo(Stream)\n- uid: System.IO.MemoryStream.#ctor*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: MemoryStream\n  nameWithType: MemoryStream.MemoryStream\n  fullName: MemoryStream.MemoryStream\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.BeginRead*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: BeginRead\n  nameWithType: MemoryStream.BeginRead\n  fullName: MemoryStream.BeginRead\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.BeginWrite*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: BeginWrite\n  nameWithType: MemoryStream.BeginWrite\n  fullName: MemoryStream.BeginWrite\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.CanRead*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: CanRead\n  nameWithType: MemoryStream.CanRead\n  fullName: MemoryStream.CanRead\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.CanSeek*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: MemoryStream.CanSeek\n  fullName: MemoryStream.CanSeek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.CanWrite*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: MemoryStream.CanWrite\n  fullName: MemoryStream.CanWrite\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.Capacity*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Capacity\n  nameWithType: MemoryStream.Capacity\n  fullName: MemoryStream.Capacity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.CopyTo*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: CopyTo\n  nameWithType: MemoryStream.CopyTo\n  fullName: MemoryStream.CopyTo\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.CopyToAsync*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: CopyToAsync\n  nameWithType: MemoryStream.CopyToAsync\n  fullName: MemoryStream.CopyToAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.Dispose*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Dispose\n  nameWithType: MemoryStream.Dispose\n  fullName: MemoryStream.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.EndRead*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: EndRead\n  nameWithType: MemoryStream.EndRead\n  fullName: MemoryStream.EndRead\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.EndWrite*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: EndWrite\n  nameWithType: MemoryStream.EndWrite\n  fullName: MemoryStream.EndWrite\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.Flush*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Flush\n  nameWithType: MemoryStream.Flush\n  fullName: MemoryStream.Flush\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.FlushAsync*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: FlushAsync\n  nameWithType: MemoryStream.FlushAsync\n  fullName: MemoryStream.FlushAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.GetBuffer*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: GetBuffer\n  nameWithType: MemoryStream.GetBuffer\n  fullName: MemoryStream.GetBuffer\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.Length*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Length\n  nameWithType: MemoryStream.Length\n  fullName: MemoryStream.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.Position*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Position\n  nameWithType: MemoryStream.Position\n  fullName: MemoryStream.Position\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.Read*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Read\n  nameWithType: MemoryStream.Read\n  fullName: MemoryStream.Read\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.ReadAsync*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: ReadAsync\n  nameWithType: MemoryStream.ReadAsync\n  fullName: MemoryStream.ReadAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.ReadByte*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: ReadByte\n  nameWithType: MemoryStream.ReadByte\n  fullName: MemoryStream.ReadByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.Seek*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Seek\n  nameWithType: MemoryStream.Seek\n  fullName: MemoryStream.Seek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.SetLength*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: SetLength\n  nameWithType: MemoryStream.SetLength\n  fullName: MemoryStream.SetLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.ToArray*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: ToArray\n  nameWithType: MemoryStream.ToArray\n  fullName: MemoryStream.ToArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.TryGetBuffer*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: TryGetBuffer\n  nameWithType: MemoryStream.TryGetBuffer\n  fullName: MemoryStream.TryGetBuffer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.Write*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: Write\n  nameWithType: MemoryStream.Write\n  fullName: MemoryStream.Write\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.WriteAsync*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: WriteAsync\n  nameWithType: MemoryStream.WriteAsync\n  fullName: MemoryStream.WriteAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.WriteByte*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: WriteByte\n  nameWithType: MemoryStream.WriteByte\n  fullName: MemoryStream.WriteByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.IO.MemoryStream.WriteTo*\n  parent: System.IO.MemoryStream\n  isExternal: false\n  name: WriteTo\n  nameWithType: MemoryStream.WriteTo\n  fullName: MemoryStream.WriteTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/MemoryStream.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IO.Stream.CanTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: Stream.CanTimeout\n  fullName: Stream.CanTimeout\n- uid: System.IO.Stream.Close\n  parent: System.IO.Stream\n  isExternal: false\n  name: Close()\n  nameWithType: Stream.Close()\n  fullName: Stream.Close()\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream)\n  nameWithType: Stream.CopyTo(Stream)\n  fullName: Stream.CopyTo(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream)\n  nameWithType: Stream.CopyToAsync(Stream)\n  fullName: Stream.CopyToAsync(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32)\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n  fullName: Stream.CopyToAsync(Stream, Int32)\n- uid: System.IO.Stream.CreateWaitHandle\n  parent: System.IO.Stream\n  isExternal: false\n  name: CreateWaitHandle()\n  nameWithType: Stream.CreateWaitHandle()\n  fullName: Stream.CreateWaitHandle()\n- uid: System.IO.Stream.Dispose\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose()\n  nameWithType: Stream.Dispose()\n  fullName: Stream.Dispose()\n- uid: System.IO.Stream.FlushAsync\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync()\n  nameWithType: Stream.FlushAsync()\n  fullName: Stream.FlushAsync()\n- uid: System.IO.Stream.Null\n  parent: System.IO.Stream\n  isExternal: false\n  name: \"Null\"\n  nameWithType: Stream.Null\n  fullName: Stream.Null\n- uid: System.IO.Stream.ObjectInvariant\n  parent: System.IO.Stream\n  isExternal: false\n  name: ObjectInvariant()\n  nameWithType: Stream.ObjectInvariant()\n  fullName: Stream.ObjectInvariant()\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.ReadTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: Stream.ReadTimeout\n  fullName: Stream.ReadTimeout\n- uid: System.IO.Stream.Synchronized(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Synchronized(Stream)\n  nameWithType: Stream.Synchronized(Stream)\n  fullName: Stream.Synchronized(Stream)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.WriteTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: Stream.WriteTimeout\n  fullName: Stream.WriteTimeout\n"}