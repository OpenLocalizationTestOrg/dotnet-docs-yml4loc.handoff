### YamlMime:ManagedReference
items:
- uid: System.Threading.ExecutionContext
  commentId: T:System.Threading.ExecutionContext
  id: ExecutionContext
  children:
  - System.Threading.ExecutionContext.Capture
  - System.Threading.ExecutionContext.CreateCopy
  - System.Threading.ExecutionContext.Dispose
  - System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Threading.ExecutionContext.IsFlowSuppressed
  - System.Threading.ExecutionContext.RestoreFlow
  - System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)
  - System.Threading.ExecutionContext.SuppressFlow
  langs:
  - csharp
  name: ExecutionContext
  nameWithType: ExecutionContext
  fullName: System.Threading.ExecutionContext
  type: Class
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Manages the execution context for the current thread. This class cannot be inherited.
  remarks: "The <xref:System.Threading.ExecutionContext> class provides a single container for all information relevant to a logical thread of execution. This includes security context, call context, and synchronization context.  \n  \n The <xref:System.Threading.ExecutionContext> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points. The common language runtime ensures that the <xref:System.Threading.ExecutionContext> is consistently transferred across runtime-defined asynchronous points within the managed process.  \n  \n An execution context is the managed equivalent of a COM apartment. Within an application domain, the entire execution context must be transferred whenever a thread is transferred. This situation occurs during transfers made by the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump. It does not occur in unsafe thread pool operations (such as the <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> method), which do not transfer the compressed stack. Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow. The <xref:System.Threading.ExecutionContext> class provides the <xref:System.Threading.ExecutionContext.Capture%2A> and <xref:System.Threading.ExecutionContext.CreateCopy%2A> methods to get the execution context and the <xref:System.Threading.ExecutionContext.Run%2A> method to set the execution context for the current thread.  \n  \n An <xref:System.Threading.ExecutionContext> that is associated with a thread cannot be set on another thread. Attempting to do so will result in an exception being thrown. To propagate the <xref:System.Threading.ExecutionContext> from one thread to another, make a copy of the <xref:System.Threading.ExecutionContext>.  \n  \n Internally, the <xref:System.Threading.ExecutionContext> stores all data that is associated with the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>. This allows the <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> data to be propagated when the <xref:System.Threading.ExecutionContext> is copied and transferred."
  syntax:
    content: 'public sealed class ExecutionContext : IDisposable, System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.ExecutionContext.Capture
  commentId: M:System.Threading.ExecutionContext.Capture
  id: Capture
  parent: System.Threading.ExecutionContext
  langs:
  - csharp
  name: Capture()
  nameWithType: ExecutionContext.Capture()
  fullName: ExecutionContext.Capture()
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Captures the execution context from the current thread.
  remarks: The captured execution context can be used as the `executionContext` parameter for the <xref:System.Threading.ExecutionContext.Run%2A> method.
  syntax:
    content: public static System.Threading.ExecutionContext Capture ();
    parameters: []
    return:
      type: System.Threading.ExecutionContext
      description: An <xref href="System.Threading.ExecutionContext"></xref> object representing the execution context for the current thread.
  overload: System.Threading.ExecutionContext.Capture*
  exceptions: []
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.ExecutionContext.CreateCopy
  commentId: M:System.Threading.ExecutionContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.ExecutionContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: ExecutionContext.CreateCopy()
  fullName: ExecutionContext.CreateCopy()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Creates a copy of the current execution context.
  remarks: This method is useful for propagating an execution context from one thread to another.
  syntax:
    content: public System.Threading.ExecutionContext CreateCopy ();
    parameters: []
    return:
      type: System.Threading.ExecutionContext
      description: An <xref href="System.Threading.ExecutionContext"></xref> object representing the current execution context.
  overload: System.Threading.ExecutionContext.CreateCopy*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: This context cannot be copied because it is used. Only newly captured contexts can be copied.
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.ExecutionContext.Dispose
  commentId: M:System.Threading.ExecutionContext.Dispose
  id: Dispose
  parent: System.Threading.ExecutionContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: ExecutionContext.Dispose()
  fullName: ExecutionContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Releases all resources used by the current instance of the <xref href="System.Threading.ExecutionContext"></xref> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.Threading.ExecutionContext>. The `Dispose` method leaves the <xref:System.Threading.ExecutionContext> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.ExecutionContext> so the garbage collector can reclaim the memory that the <xref:System.Threading.ExecutionContext> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.ExecutionContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.ExecutionContext> object's `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.ExecutionContext.Dispose*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Threading.ExecutionContext
  langs:
  - csharp
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ExecutionContext.GetObjectData(SerializationInfo, StreamingContext)
  fullName: ExecutionContext.GetObjectData(SerializationInfo, StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Sets the specified <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object with the logical context information needed to recreate an instance of the current execution context.
  remarks: "<xref:System.Threading.ExecutionContext.GetObjectData%2A> sets a <xref:System.Runtime.Serialization.SerializationInfo> with the logical call context information. During deserialization, the execution context object is reconstituted from the <xref:System.Runtime.Serialization.SerializationInfo> transmitted over the stream.  \n  \n For more information, see <xref:System.Runtime.Serialization.SerializationInfo>."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The <xref href="System.Runtime.Serialization.SerializationInfo"></xref> object to be populated with serialization information.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The <xref href="System.Runtime.Serialization.StreamingContext"></xref> structure representing the destination context of the serialization.
  overload: System.Threading.ExecutionContext.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>info</code> is `null`.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.ExecutionContext.IsFlowSuppressed
  commentId: M:System.Threading.ExecutionContext.IsFlowSuppressed
  id: IsFlowSuppressed
  parent: System.Threading.ExecutionContext
  langs:
  - csharp
  name: IsFlowSuppressed()
  nameWithType: ExecutionContext.IsFlowSuppressed()
  fullName: ExecutionContext.IsFlowSuppressed()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Indicates whether the flow of the execution context is currently suppressed.
  remarks: The <xref:System.Threading.ExecutionContext.IsFlowSuppressed%2A> method is used by infrastructure components to determine whether to transfer the <xref:System.Threading.ExecutionContext> during asynchronous operations.
  syntax:
    content: public static bool IsFlowSuppressed ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the flow is suppressed; otherwise, `false`.'
  overload: System.Threading.ExecutionContext.IsFlowSuppressed*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.ExecutionContext.RestoreFlow
  commentId: M:System.Threading.ExecutionContext.RestoreFlow
  id: RestoreFlow
  parent: System.Threading.ExecutionContext
  langs:
  - csharp
  name: RestoreFlow()
  nameWithType: ExecutionContext.RestoreFlow()
  fullName: ExecutionContext.RestoreFlow()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Restores the flow of the execution context across asynchronous threads.
  remarks: "<xref:System.Threading.ExecutionContext.RestoreFlow%2A> reverses the effect of a prior <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method call.  \n  \n This method is called by the <xref:System.Threading.AsyncFlowControl.Undo%2A> method of the <xref:System.Threading.AsyncFlowControl> structure returned by the <xref:System.Threading.ExecutionContext.SuppressFlow%2A> method.  You should use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method to restore the flow of the execution context, not the <xref:System.Threading.ExecutionContext.RestoreFlow%2A> method."
  syntax:
    content: public static void RestoreFlow ();
    parameters: []
  overload: System.Threading.ExecutionContext.RestoreFlow*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The context flow cannot be restored because it is not being suppressed.
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)
  commentId: M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)
  id: Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)
  parent: System.Threading.ExecutionContext
  langs:
  - csharp
  name: Run(ExecutionContext, ContextCallback, Object)
  nameWithType: ExecutionContext.Run(ExecutionContext, ContextCallback, Object)
  fullName: ExecutionContext.Run(ExecutionContext, ContextCallback, Object)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Runs a method in a specified execution context on the current thread.
  remarks: The execution context is returned to its previous state when the method completes.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static void Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);
    parameters:
    - id: executionContext
      type: System.Threading.ExecutionContext
      description: The <xref href="System.Threading.ExecutionContext"></xref> to set.
    - id: callback
      type: System.Threading.ContextCallback
      description: A <xref href="System.Threading.ContextCallback"></xref> delegate that represents the method to be run in the provided execution context.
    - id: state
      type: System.Object
      description: The object to pass to the callback method.
  overload: System.Threading.ExecutionContext.Run*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>executionContext</code> is `null`.  \n  \n -or-  \n  \n <code>executionContext</code> was not acquired through a capture operation.  \n  \n -or-  \n  \n <code>executionContext</code> has already been used as the argument to a <xref href=\"System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\"></xref> call."
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.ExecutionContext.SuppressFlow
  commentId: M:System.Threading.ExecutionContext.SuppressFlow
  id: SuppressFlow
  parent: System.Threading.ExecutionContext
  langs:
  - csharp
  name: SuppressFlow()
  nameWithType: ExecutionContext.SuppressFlow()
  fullName: ExecutionContext.SuppressFlow()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Suppresses the flow of the execution context across asynchronous threads.
  remarks: "Use this method to suppress the flow of the <xref:System.Threading.ExecutionContext> on the current thread.  \n  \n You must use the <xref:System.Threading.AsyncFlowControl.Undo%2A> method on the returned <xref:System.Threading.AsyncFlowControl> structure to restore the flow of the <xref:System.Threading.ExecutionContext>.  \n  \n This method is protected with a <xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> for <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> permission. A fully trusted component can call this method to suppress the flow of the <xref:System.Threading.ExecutionContext> during asynchronous calls. While the flow is suppressed, the <xref:System.Security.SecurityContext.Capture%2A> method returns `null`."
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static System.Threading.AsyncFlowControl SuppressFlow ();
    parameters: []
    return:
      type: System.Threading.AsyncFlowControl
      description: An <xref href="System.Threading.AsyncFlowControl"></xref> structure for restoring the flow.
  overload: System.Threading.ExecutionContext.SuppressFlow*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The context flow is already suppressed.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Threading.ExecutionContext.Capture
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: Capture()
  nameWithType: ExecutionContext.Capture()
  fullName: ExecutionContext.Capture()
- uid: System.Threading.ExecutionContext
  parent: System.Threading
  isExternal: false
  name: ExecutionContext
  nameWithType: ExecutionContext
  fullName: System.Threading.ExecutionContext
- uid: System.Threading.ExecutionContext.CreateCopy
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: CreateCopy()
  nameWithType: ExecutionContext.CreateCopy()
  fullName: ExecutionContext.CreateCopy()
- uid: System.Threading.ExecutionContext.Dispose
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: Dispose()
  nameWithType: ExecutionContext.Dispose()
  fullName: ExecutionContext.Dispose()
- uid: System.Threading.ExecutionContext.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ExecutionContext.GetObjectData(SerializationInfo, StreamingContext)
  fullName: ExecutionContext.GetObjectData(SerializationInfo, StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Threading.ExecutionContext.IsFlowSuppressed
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: IsFlowSuppressed()
  nameWithType: ExecutionContext.IsFlowSuppressed()
  fullName: ExecutionContext.IsFlowSuppressed()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.ExecutionContext.RestoreFlow
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: RestoreFlow()
  nameWithType: ExecutionContext.RestoreFlow()
  fullName: ExecutionContext.RestoreFlow()
- uid: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: Run(ExecutionContext, ContextCallback, Object)
  nameWithType: ExecutionContext.Run(ExecutionContext, ContextCallback, Object)
  fullName: ExecutionContext.Run(ExecutionContext, ContextCallback, Object)
- uid: System.Threading.ContextCallback
  parent: System.Threading
  isExternal: false
  name: ContextCallback
  nameWithType: ContextCallback
  fullName: System.Threading.ContextCallback
- uid: System.Threading.ExecutionContext.SuppressFlow
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: SuppressFlow()
  nameWithType: ExecutionContext.SuppressFlow()
  fullName: ExecutionContext.SuppressFlow()
- uid: System.Threading.AsyncFlowControl
  parent: System.Threading
  isExternal: false
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
- uid: System.Threading.ExecutionContext.Capture*
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: Capture
  nameWithType: ExecutionContext.Capture
  fullName: ExecutionContext.Capture
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
- uid: System.Threading.ExecutionContext.CreateCopy*
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: CreateCopy
  nameWithType: ExecutionContext.CreateCopy
  fullName: ExecutionContext.CreateCopy
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
- uid: System.Threading.ExecutionContext.Dispose*
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: Dispose
  nameWithType: ExecutionContext.Dispose
  fullName: ExecutionContext.Dispose
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
- uid: System.Threading.ExecutionContext.GetObjectData*
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: GetObjectData
  nameWithType: ExecutionContext.GetObjectData
  fullName: ExecutionContext.GetObjectData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
- uid: System.Threading.ExecutionContext.IsFlowSuppressed*
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: IsFlowSuppressed
  nameWithType: ExecutionContext.IsFlowSuppressed
  fullName: ExecutionContext.IsFlowSuppressed
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
- uid: System.Threading.ExecutionContext.RestoreFlow*
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: RestoreFlow
  nameWithType: ExecutionContext.RestoreFlow
  fullName: ExecutionContext.RestoreFlow
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
- uid: System.Threading.ExecutionContext.Run*
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: Run
  nameWithType: ExecutionContext.Run
  fullName: ExecutionContext.Run
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
- uid: System.Threading.ExecutionContext.SuppressFlow*
  parent: System.Threading.ExecutionContext
  isExternal: false
  name: SuppressFlow
  nameWithType: ExecutionContext.SuppressFlow
  fullName: ExecutionContext.SuppressFlow
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ExecutionContext.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
