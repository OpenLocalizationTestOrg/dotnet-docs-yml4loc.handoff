{"nodes":[{"content":"Adds transactional capability when adding a new item to a collection.","nodes":[{"pos":[0,69],"content":"Adds transactional capability when adding a new item to a collection.","nodes":[{"content":"Adds transactional capability when adding a new item to a collection.","pos":[0,69]}]}],"pos":[552,622],"yaml":true},{"content":"The <xref:System.ComponentModel.ICancelAddNew> interface enables a collection to add a new item in an extensible way. The new item subsequently can be committed or rolled back. The <xref:System.ComponentModel.IBindingList.AddNew%2A> method of the collection is used to tentatively add the item, which is subsequently transacted through the following operations:  \n  \n-   The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> method will explicitly commit the pending addition.  \n  \n-   Performing another collection operation, such as an insertion, removal, or move will implicitly commit the pending addition.  \n  \n-   The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method will roll back the pending addition if it has not already been committed.  \n  \n> [!NOTE]\n>  In some scenarios, such as Windows Forms complex data binding, the collection may receive <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> or <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> calls for items other than the newly added item. (Each item is typically a row in a data view.) Ignore these calls; cancel or commit the new item only when that item's index is specified.  \n  \n There are two models that allow transactional addition of an item to a data-bound collection:  \n  \n-   The older model relies directly on a collection that implements the <xref:System.ComponentModel.IBindingList> interface and is data-bound directly using the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class. The <xref:System.Windows.Forms.CurrencyManager.AddNew%2A>, <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> methods of the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class are responsible for transactional support for adding new items. However, this functionality depends upon the items supporting transactional behavior through the <xref:System.ComponentModel.IEditableObject> interface. If the items do not support this interface, the item will always be added to the list, regardless of subsequent calls to <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>.  \n  \n-   The newer model supports a more robust data-binding scenario through the generic <xref:System.ComponentModel.BindingList%601> class, which implements the <xref:System.ComponentModel.IBindingList> and <xref:System.ComponentModel.ICancelAddNew> interfaces. In this case, the transactional support is managed by the <xref:System.ComponentModel.BindingList%601> collection directly.","nodes":[{"pos":[0,361],"content":"The <xref:System.ComponentModel.ICancelAddNew> interface enables a collection to add a new item in an extensible way. The new item subsequently can be committed or rolled back. The <xref:System.ComponentModel.IBindingList.AddNew%2A> method of the collection is used to tentatively add the item, which is subsequently transacted through the following operations:","nodes":[{"content":"The <xref:System.ComponentModel.ICancelAddNew> interface enables a collection to add a new item in an extensible way. The new item subsequently can be committed or rolled back. The <xref:System.ComponentModel.IBindingList.AddNew%2A> method of the collection is used to tentatively add the item, which is subsequently transacted through the following operations:","pos":[0,361],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.ICancelAddNew&gt;</ph> interface enables a collection to add a new item in an extensible way.","pos":[0,117],"source":"The <xref:System.ComponentModel.ICancelAddNew> interface enables a collection to add a new item in an extensible way."},{"content":"The new item subsequently can be committed or rolled back.","pos":[118,176]},{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.IBindingList.AddNew%2A&gt;</ph> method of the collection is used to tentatively add the item, which is subsequently transacted through the following operations:","pos":[177,361],"source":" The <xref:System.ComponentModel.IBindingList.AddNew%2A> method of the collection is used to tentatively add the item, which is subsequently transacted through the following operations:"}]}]},{"pos":[371,479],"content":"The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> method will explicitly commit the pending addition.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.ICancelAddNew.EndNew%2A&gt;</ph> method will explicitly commit the pending addition.","pos":[0,108],"source":"The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> method will explicitly commit the pending addition."}]},{"pos":[489,613],"content":"Performing another collection operation, such as an insertion, removal, or move will implicitly commit the pending addition.","nodes":[{"content":"Performing another collection operation, such as an insertion, removal, or move will implicitly commit the pending addition.","pos":[0,124]}]},{"pos":[623,763],"content":"The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method will roll back the pending addition if it has not already been committed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.ICancelAddNew.CancelNew%2A&gt;</ph> method will roll back the pending addition if it has not already been committed.","pos":[0,140],"source":"The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method will roll back the pending addition if it has not already been committed."}]},{"pos":[771,1171],"content":"[!NOTE]\n In some scenarios, such as Windows Forms complex data binding, the collection may receive <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> or <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> calls for items other than the newly added item. (Each item is typically a row in a data view.) Ignore these calls; cancel or commit the new item only when that item's index is specified.","leadings":["","> "],"nodes":[{"content":" In some scenarios, such as Windows Forms complex data binding, the collection may receive <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> or <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> calls for items other than the newly added item. (Each item is typically a row in a data view.) Ignore these calls; cancel or commit the new item only when that item's index is specified.","pos":[8,398],"nodes":[{"content":"In some scenarios, such as Windows Forms complex data binding, the collection may receive <ph id=\"ph1\">&lt;xref:System.ComponentModel.ICancelAddNew.CancelNew%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.ComponentModel.ICancelAddNew.EndNew%2A&gt;</ph> calls for items other than the newly added item.","pos":[1,251],"source":" In some scenarios, such as Windows Forms complex data binding, the collection may receive <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> or <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> calls for items other than the newly added item."},{"content":"(Each item is typically a row in a data view.) Ignore these calls; cancel or commit the new item only when that item's index is specified.","pos":[252,390]}]}]},{"pos":[1178,1271],"content":"There are two models that allow transactional addition of an item to a data-bound collection:","nodes":[{"content":"There are two models that allow transactional addition of an item to a data-bound collection:","pos":[0,93]}]},{"pos":[1281,2198],"content":"The older model relies directly on a collection that implements the <xref:System.ComponentModel.IBindingList> interface and is data-bound directly using the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class. The <xref:System.Windows.Forms.CurrencyManager.AddNew%2A>, <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> methods of the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class are responsible for transactional support for adding new items. However, this functionality depends upon the items supporting transactional behavior through the <xref:System.ComponentModel.IEditableObject> interface. If the items do not support this interface, the item will always be added to the list, regardless of subsequent calls to <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>.","nodes":[{"content":"The older model relies directly on a collection that implements the <xref:System.ComponentModel.IBindingList> interface and is data-bound directly using the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class. The <xref:System.Windows.Forms.CurrencyManager.AddNew%2A>, <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> methods of the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class are responsible for transactional support for adding new items. However, this functionality depends upon the items supporting transactional behavior through the <xref:System.ComponentModel.IEditableObject> interface. If the items do not support this interface, the item will always be added to the list, regardless of subsequent calls to <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>.","pos":[0,917],"nodes":[{"content":"The older model relies directly on a collection that implements the <ph id=\"ph1\">&lt;xref:System.ComponentModel.IBindingList&gt;</ph> interface and is data-bound directly using the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName&gt;</ph> class.","pos":[0,232],"source":"The older model relies directly on a collection that implements the <xref:System.ComponentModel.IBindingList> interface and is data-bound directly using the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.CurrencyManager.AddNew%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A&gt;</ph> methods of the <ph id=\"ph4\">&lt;xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName&gt;</ph> class are responsible for transactional support for adding new items.","pos":[233,577],"source":" The <xref:System.Windows.Forms.CurrencyManager.AddNew%2A>, <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> methods of the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class are responsible for transactional support for adding new items."},{"content":"However, this functionality depends upon the items supporting transactional behavior through the <ph id=\"ph1\">&lt;xref:System.ComponentModel.IEditableObject&gt;</ph> interface.","pos":[578,730],"source":" However, this functionality depends upon the items supporting transactional behavior through the <xref:System.ComponentModel.IEditableObject> interface."},{"content":"If the items do not support this interface, the item will always be added to the list, regardless of subsequent calls to <ph id=\"ph1\">&lt;xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A&gt;</ph>.","pos":[731,917],"source":" If the items do not support this interface, the item will always be added to the list, regardless of subsequent calls to <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>."}]}]},{"pos":[2208,2586],"content":"The newer model supports a more robust data-binding scenario through the generic <xref:System.ComponentModel.BindingList%601> class, which implements the <xref:System.ComponentModel.IBindingList> and <xref:System.ComponentModel.ICancelAddNew> interfaces. In this case, the transactional support is managed by the <xref:System.ComponentModel.BindingList%601> collection directly.","nodes":[{"content":"The newer model supports a more robust data-binding scenario through the generic <xref:System.ComponentModel.BindingList%601> class, which implements the <xref:System.ComponentModel.IBindingList> and <xref:System.ComponentModel.ICancelAddNew> interfaces. In this case, the transactional support is managed by the <xref:System.ComponentModel.BindingList%601> collection directly.","pos":[0,378],"nodes":[{"content":"The newer model supports a more robust data-binding scenario through the generic <ph id=\"ph1\">&lt;xref:System.ComponentModel.BindingList%601&gt;</ph> class, which implements the <ph id=\"ph2\">&lt;xref:System.ComponentModel.IBindingList&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.ComponentModel.ICancelAddNew&gt;</ph> interfaces.","pos":[0,254],"source":"The newer model supports a more robust data-binding scenario through the generic <xref:System.ComponentModel.BindingList%601> class, which implements the <xref:System.ComponentModel.IBindingList> and <xref:System.ComponentModel.ICancelAddNew> interfaces."},{"content":"In this case, the transactional support is managed by the <ph id=\"ph1\">&lt;xref:System.ComponentModel.BindingList%601&gt;</ph> collection directly.","pos":[255,378],"source":" In this case, the transactional support is managed by the <xref:System.ComponentModel.BindingList%601> collection directly."}]}]}],"pos":[633,3237],"yaml":true,"extradata":"MT"},{"content":"Discards a pending new item from the collection.","nodes":[{"pos":[0,48],"content":"Discards a pending new item from the collection.","nodes":[{"content":"Discards a pending new item from the collection.","pos":[0,48]}]}],"pos":[4631,4680],"yaml":true},{"content":"The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method rolls back a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`. The index parameter is necessary because several new items can be simultaneously pending.","nodes":[{"pos":[0,311],"content":"The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method rolls back a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`. The index parameter is necessary because several new items can be simultaneously pending.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.ICancelAddNew.CancelNew%2A&gt;</ph> method rolls back a pending addition (<ph id=\"ph2\">&lt;xref:System.ComponentModel.IBindingList.AddNew%2A&gt;</ph>) of an item previously added to the collection at position <ph id=\"ph3\">`itemIndex`</ph>.","pos":[0,221],"source":"The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method rolls back a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`."},{"content":"The index parameter is necessary because several new items can be simultaneously pending.","pos":[222,311]}]}],"pos":[4691,5003],"yaml":true,"extradata":"MT"},{"content":"The index of the item that was previously added to the collection.","nodes":[{"pos":[0,66],"content":"The index of the item that was previously added to the collection.","nodes":[{"content":"The index of the item that was previously added to the collection.","pos":[0,66]}]}],"pos":[5145,5212],"yaml":true},{"content":"Commits a pending new item to the collection.","nodes":[{"pos":[0,45],"content":"Commits a pending new item to the collection.","nodes":[{"content":"Commits a pending new item to the collection.","pos":[0,45]}]}],"pos":[6496,6542],"yaml":true},{"content":"The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> commits a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`. The index parameter is necessary because several new items can be simultaneously pending.","nodes":[{"pos":[0,298],"content":"The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> commits a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`. The index parameter is necessary because several new items can be simultaneously pending.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.ICancelAddNew.EndNew%2A&gt;</ph> commits a pending addition (<ph id=\"ph2\">&lt;xref:System.ComponentModel.IBindingList.AddNew%2A&gt;</ph>) of an item previously added to the collection at position <ph id=\"ph3\">`itemIndex`</ph>.","pos":[0,208],"source":"The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> commits a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`."},{"content":"The index parameter is necessary because several new items can be simultaneously pending.","pos":[209,298]}]}],"pos":[6553,6852],"yaml":true,"extradata":"MT"},{"content":"The index of the item that was previously added to the collection.","nodes":[{"pos":[0,66],"content":"The index of the item that was previously added to the collection.","nodes":[{"content":"The index of the item that was previously added to the collection.","pos":[0,66]}]}],"pos":[6991,7058],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.ICancelAddNew\n  commentId: T:System.ComponentModel.ICancelAddNew\n  id: ICancelAddNew\n  children:\n  - System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)\n  - System.ComponentModel.ICancelAddNew.EndNew(System.Int32)\n  langs:\n  - csharp\n  name: ICancelAddNew\n  nameWithType: ICancelAddNew\n  fullName: System.ComponentModel.ICancelAddNew\n  type: Interface\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Adds transactional capability when adding a new item to a collection.\n  remarks: \"The <xref:System.ComponentModel.ICancelAddNew> interface enables a collection to add a new item in an extensible way. The new item subsequently can be committed or rolled back. The <xref:System.ComponentModel.IBindingList.AddNew%2A> method of the collection is used to tentatively add the item, which is subsequently transacted through the following operations:  \\n  \\n-   The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> method will explicitly commit the pending addition.  \\n  \\n-   Performing another collection operation, such as an insertion, removal, or move will implicitly commit the pending addition.  \\n  \\n-   The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method will roll back the pending addition if it has not already been committed.  \\n  \\n> [!NOTE]\\n>  In some scenarios, such as Windows Forms complex data binding, the collection may receive <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> or <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> calls for items other than the newly added item. (Each item is typically a row in a data view.) Ignore these calls; cancel or commit the new item only when that item's index is specified.  \\n  \\n There are two models that allow transactional addition of an item to a data-bound collection:  \\n  \\n-   The older model relies directly on a collection that implements the <xref:System.ComponentModel.IBindingList> interface and is data-bound directly using the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class. The <xref:System.Windows.Forms.CurrencyManager.AddNew%2A>, <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, and <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> methods of the <xref:System.Windows.Forms.CurrencyManager?displayProperty=fullName> class are responsible for transactional support for adding new items. However, this functionality depends upon the items supporting transactional behavior through the <xref:System.ComponentModel.IEditableObject> interface. If the items do not support this interface, the item will always be added to the list, regardless of subsequent calls to <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>.  \\n  \\n-   The newer model supports a more robust data-binding scenario through the generic <xref:System.ComponentModel.BindingList%601> class, which implements the <xref:System.ComponentModel.IBindingList> and <xref:System.ComponentModel.ICancelAddNew> interfaces. In this case, the transactional support is managed by the <xref:System.ComponentModel.BindingList%601> collection directly.\"\n  syntax:\n    content: public interface ICancelAddNew\n  derivedClasses:\n  - System.ComponentModel.BindingList`1\n  - System.Windows.Forms.BindingSource\n  implements: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ICancelAddNew.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)\n  commentId: M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)\n  id: CancelNew(System.Int32)\n  parent: System.ComponentModel.ICancelAddNew\n  langs:\n  - csharp\n  name: CancelNew(Int32)\n  nameWithType: ICancelAddNew.CancelNew(Int32)\n  fullName: ICancelAddNew.CancelNew(Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Discards a pending new item from the collection.\n  remarks: The <xref:System.ComponentModel.ICancelAddNew.CancelNew%2A> method rolls back a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`. The index parameter is necessary because several new items can be simultaneously pending.\n  syntax:\n    content: public void CancelNew (int itemIndex);\n    parameters:\n    - id: itemIndex\n      type: System.Int32\n      description: The index of the item that was previously added to the collection.\n  overload: System.ComponentModel.ICancelAddNew.CancelNew*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ICancelAddNew.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ICancelAddNew.EndNew(System.Int32)\n  commentId: M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)\n  id: EndNew(System.Int32)\n  parent: System.ComponentModel.ICancelAddNew\n  langs:\n  - csharp\n  name: EndNew(Int32)\n  nameWithType: ICancelAddNew.EndNew(Int32)\n  fullName: ICancelAddNew.EndNew(Int32)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: Commits a pending new item to the collection.\n  remarks: The <xref:System.ComponentModel.ICancelAddNew.EndNew%2A> commits a pending addition (<xref:System.ComponentModel.IBindingList.AddNew%2A>) of an item previously added to the collection at position `itemIndex`. The index parameter is necessary because several new items can be simultaneously pending.\n  syntax:\n    content: public void EndNew (int itemIndex);\n    parameters:\n    - id: itemIndex\n      type: System.Int32\n      description: The index of the item that was previously added to the collection.\n  overload: System.ComponentModel.ICancelAddNew.EndNew*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ICancelAddNew.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)\n  parent: System.ComponentModel.ICancelAddNew\n  isExternal: false\n  name: CancelNew(Int32)\n  nameWithType: ICancelAddNew.CancelNew(Int32)\n  fullName: ICancelAddNew.CancelNew(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ComponentModel.ICancelAddNew.EndNew(System.Int32)\n  parent: System.ComponentModel.ICancelAddNew\n  isExternal: false\n  name: EndNew(Int32)\n  nameWithType: ICancelAddNew.EndNew(Int32)\n  fullName: ICancelAddNew.EndNew(Int32)\n- uid: System.ComponentModel.ICancelAddNew.CancelNew*\n  parent: System.ComponentModel.ICancelAddNew\n  isExternal: false\n  name: CancelNew\n  nameWithType: ICancelAddNew.CancelNew\n  fullName: ICancelAddNew.CancelNew\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ICancelAddNew.xml\n- uid: System.ComponentModel.ICancelAddNew.EndNew*\n  parent: System.ComponentModel.ICancelAddNew\n  isExternal: false\n  name: EndNew\n  nameWithType: ICancelAddNew.EndNew\n  fullName: ICancelAddNew.EndNew\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ICancelAddNew.xml\n"}