{"nodes":[{"content":"Represents a class that is used as an argument to set the state of a <xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"></xref>.","nodes":[{"pos":[0,146],"content":"Represents a class that is used as an argument to set the state of a <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"&gt;&lt;/xref&gt;</ph>.","source":"Represents a class that is used as an argument to set the state of a <xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"></xref>."}],"pos":[566,713],"yaml":true},{"content":"> [!NOTE]\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \n  \n The <xref:System.Workflow.Activities.StateMachineWorkflowActivity> allows for setting the state from the host application. This enables the host application to override the current state of a state machine. This can be accomplished by enqueuing an instance of the <xref:System.Workflow.Activities.SetStateEventArgs> class to the WorkflowQueue named by the constant <xref:System.Workflow.Activities.StateMachineWorkflowActivity?displayProperty=fullName>.  \n  \n A simpler way to accomplish this is to use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method in the <xref:System.Workflow.Activities.StateMachineWorkflowInstance> class.  \n  \n You can use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method to perform a SetState operation from the host, or you can do it yourself by enqueuing an event to the state machine workflow as shown in the following example.  \n  \n```  \npublic void SetState(string targetStateName)  \n{  \n      if (targetStateName == null)  \n      {  \n            throw new ArgumentNullException(\"targetStateName\");  \n      }  \n      SetStateEventArgs args1 = new SetStateEventArgs(targetStateName);  \n      this.WorkflowInstance.EnqueueItemOnIdle(\"SetStateQueue\", args1, null, null);  \n}  \n```  \n  \n The state machine workflow uses a special queue called `SetStateQueue` to listen to these special events.","nodes":[{"pos":[2,78],"content":"[!NOTE]\n [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]","leadings":["","> "],"nodes":[]},{"pos":[85,538],"content":"The <xref:System.Workflow.Activities.StateMachineWorkflowActivity> allows for setting the state from the host application. This enables the host application to override the current state of a state machine. This can be accomplished by enqueuing an instance of the <xref:System.Workflow.Activities.SetStateEventArgs> class to the WorkflowQueue named by the constant <xref:System.Workflow.Activities.StateMachineWorkflowActivity?displayProperty=fullName>.","nodes":[{"content":"The <xref:System.Workflow.Activities.StateMachineWorkflowActivity> allows for setting the state from the host application. This enables the host application to override the current state of a state machine. This can be accomplished by enqueuing an instance of the <xref:System.Workflow.Activities.SetStateEventArgs> class to the WorkflowQueue named by the constant <xref:System.Workflow.Activities.StateMachineWorkflowActivity?displayProperty=fullName>.","pos":[0,453],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.StateMachineWorkflowActivity&gt;</ph> allows for setting the state from the host application.","pos":[0,122],"source":"The <xref:System.Workflow.Activities.StateMachineWorkflowActivity> allows for setting the state from the host application."},{"content":"This enables the host application to override the current state of a state machine.","pos":[123,206]},{"content":"This can be accomplished by enqueuing an instance of the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.SetStateEventArgs&gt;</ph> class to the WorkflowQueue named by the constant <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.StateMachineWorkflowActivity?displayProperty=fullName&gt;</ph>.","pos":[207,453],"source":" This can be accomplished by enqueuing an instance of the <xref:System.Workflow.Activities.SetStateEventArgs> class to the WorkflowQueue named by the constant <xref:System.Workflow.Activities.StateMachineWorkflowActivity?displayProperty=fullName>."}]}]},{"pos":[545,750],"content":"A simpler way to accomplish this is to use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method in the <xref:System.Workflow.Activities.StateMachineWorkflowInstance> class.","nodes":[{"content":"A simpler way to accomplish this is to use the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A&gt;</ph> method in the <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.StateMachineWorkflowInstance&gt;</ph> class.","pos":[0,205],"source":"A simpler way to accomplish this is to use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method in the <xref:System.Workflow.Activities.StateMachineWorkflowInstance> class."}]},{"pos":[757,1014],"content":"You can use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method to perform a SetState operation from the host, or you can do it yourself by enqueuing an event to the state machine workflow as shown in the following example.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A&gt;</ph> method to perform a SetState operation from the host, or you can do it yourself by enqueuing an event to the state machine workflow as shown in the following example.","pos":[0,257],"source":"You can use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method to perform a SetState operation from the host, or you can do it yourself by enqueuing an event to the state machine workflow as shown in the following example."}]},{"pos":[1373,1478],"content":"The state machine workflow uses a special queue called <ph id=\"ph1\">`SetStateQueue`</ph> to listen to these special events.","source":"The state machine workflow uses a special queue called `SetStateQueue` to listen to these special events."}],"pos":[724,2230],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.SetStateEventArgs\"></xref> class.","nodes":[{"pos":[0,106],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.SetStateEventArgs\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Workflow.Activities.SetStateEventArgs\"></xref> class."}],"pos":[4024,4131],"yaml":true},{"content":"The state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to.","nodes":[{"pos":[0,86],"content":"The state to set the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;&lt;/xref&gt;</ph> to.","source":"The state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to."}],"pos":[4292,4379],"yaml":true},{"content":"Gets the state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to.","nodes":[{"pos":[0,91],"content":"Gets the state to set the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;&lt;/xref&gt;</ph> to.","source":"Gets the state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to."}],"pos":[5437,5529],"yaml":true},{"content":"The state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to.","nodes":[{"pos":[0,86],"content":"The state to set the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Activities.StateActivity\"&gt;&lt;/xref&gt;</ph> to.","source":"The state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to."}],"pos":[5648,5735],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Activities.SetStateEventArgs\n  commentId: T:System.Workflow.Activities.SetStateEventArgs\n  id: SetStateEventArgs\n  children:\n  - System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)\n  - System.Workflow.Activities.SetStateEventArgs.TargetStateName\n  langs:\n  - csharp\n  name: SetStateEventArgs\n  nameWithType: SetStateEventArgs\n  fullName: System.Workflow.Activities.SetStateEventArgs\n  type: Class\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Represents a class that is used as an argument to set the state of a <xref href=\"System.Workflow.Activities.StateMachineWorkflowActivity\"></xref>.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \\n  \\n The <xref:System.Workflow.Activities.StateMachineWorkflowActivity> allows for setting the state from the host application. This enables the host application to override the current state of a state machine. This can be accomplished by enqueuing an instance of the <xref:System.Workflow.Activities.SetStateEventArgs> class to the WorkflowQueue named by the constant <xref:System.Workflow.Activities.StateMachineWorkflowActivity?displayProperty=fullName>.  \\n  \\n A simpler way to accomplish this is to use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method in the <xref:System.Workflow.Activities.StateMachineWorkflowInstance> class.  \\n  \\n You can use the <xref:System.Workflow.Activities.StateMachineWorkflowInstance.SetState%2A> method to perform a SetState operation from the host, or you can do it yourself by enqueuing an event to the state machine workflow as shown in the following example.  \\n  \\n```  \\npublic void SetState(string targetStateName)  \\n{  \\n      if (targetStateName == null)  \\n      {  \\n            throw new ArgumentNullException(\\\"targetStateName\\\");  \\n      }  \\n      SetStateEventArgs args1 = new SetStateEventArgs(targetStateName);  \\n      this.WorkflowInstance.EnqueueItemOnIdle(\\\"SetStateQueue\\\", args1, null, null);  \\n}  \\n```  \\n  \\n The state machine workflow uses a special queue called `SetStateQueue` to listen to these special events.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public class SetStateEventArgs : EventArgs\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.ObsoleteAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SetStateEventArgs.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)\n  commentId: M:System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Workflow.Activities.SetStateEventArgs\n  langs:\n  - csharp\n  name: SetStateEventArgs(String)\n  nameWithType: SetStateEventArgs.SetStateEventArgs(String)\n  fullName: SetStateEventArgs.SetStateEventArgs(String)\n  type: Constructor\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Workflow.Activities.SetStateEventArgs\"></xref> class.\n  syntax:\n    content: public SetStateEventArgs (string targetStateName);\n    parameters:\n    - id: targetStateName\n      type: System.String\n      description: The state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to.\n  overload: System.Workflow.Activities.SetStateEventArgs.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SetStateEventArgs.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Activities.SetStateEventArgs.TargetStateName\n  commentId: P:System.Workflow.Activities.SetStateEventArgs.TargetStateName\n  id: TargetStateName\n  parent: System.Workflow.Activities.SetStateEventArgs\n  langs:\n  - csharp\n  name: TargetStateName\n  nameWithType: SetStateEventArgs.TargetStateName\n  fullName: SetStateEventArgs.TargetStateName\n  type: Property\n  assemblies:\n  - System.Workflow.Activities\n  namespace: System.Workflow.Activities\n  summary: Gets the state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to.\n  syntax:\n    content: public string TargetStateName { get; }\n    return:\n      type: System.String\n      description: The state to set the <xref href=\"System.Workflow.Activities.StateActivity\"></xref> to.\n  overload: System.Workflow.Activities.SetStateEventArgs.TargetStateName*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SetStateEventArgs.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Workflow.Activities.SetStateEventArgs.#ctor(System.String)\n  parent: System.Workflow.Activities.SetStateEventArgs\n  isExternal: false\n  name: SetStateEventArgs(String)\n  nameWithType: SetStateEventArgs.SetStateEventArgs(String)\n  fullName: SetStateEventArgs.SetStateEventArgs(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.Activities.SetStateEventArgs.TargetStateName\n  parent: System.Workflow.Activities.SetStateEventArgs\n  isExternal: false\n  name: TargetStateName\n  nameWithType: SetStateEventArgs.TargetStateName\n  fullName: SetStateEventArgs.TargetStateName\n- uid: System.Workflow.Activities.SetStateEventArgs.#ctor*\n  parent: System.Workflow.Activities.SetStateEventArgs\n  isExternal: false\n  name: SetStateEventArgs\n  nameWithType: SetStateEventArgs.SetStateEventArgs\n  fullName: SetStateEventArgs.SetStateEventArgs\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SetStateEventArgs.xml\n- uid: System.Workflow.Activities.SetStateEventArgs.TargetStateName*\n  parent: System.Workflow.Activities.SetStateEventArgs\n  isExternal: false\n  name: TargetStateName\n  nameWithType: SetStateEventArgs.TargetStateName\n  fullName: SetStateEventArgs.TargetStateName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Activities/SetStateEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n"}