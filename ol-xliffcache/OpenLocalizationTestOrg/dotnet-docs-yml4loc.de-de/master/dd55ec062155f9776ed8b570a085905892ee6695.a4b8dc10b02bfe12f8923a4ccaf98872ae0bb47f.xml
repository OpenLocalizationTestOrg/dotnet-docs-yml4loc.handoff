{"nodes":[{"content":"Provides a base class for Win32 critical handle implementations in which the value of either 0 or -1 indicates an invalid handle.","nodes":[{"pos":[0,129],"content":"Provides a base class for Win32 critical handle implementations in which the value of either 0 or -1 indicates an invalid handle.","nodes":[{"content":"Provides a base class for Win32 critical handle implementations in which the value of either 0 or -1 indicates an invalid handle.","pos":[0,129]}]}],"pos":[728,858],"yaml":true},{"content":"This class derives from the <xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further.  \n  \n Use the <xref:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid> class when you need to wrap an unmanaged resource that does not have an existing managed wrapper.  \n  \n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n> [!NOTE]\n>  See the <xref:System.Runtime.InteropServices.CriticalHandle> class for important information on critical handle security and thread safety.","nodes":[{"pos":[0,342],"content":"This class derives from the <xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further.","nodes":[{"content":"This class derives from the <xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further.","pos":[0,342],"nodes":[{"content":"This class derives from the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName&gt;</ph> class.","pos":[0,112],"source":"This class derives from the <xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName> class."},{"content":"It describes the format of an invalid handle.","pos":[113,158]},{"content":"For example, some handles use -1 as an invalid handle value, while others use 0.","pos":[159,239]},{"content":"Further derivations of this class (for example, file or registry handles) can specialize this further.","pos":[240,342]}]}]},{"pos":[349,527],"content":"Use the <xref:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid> class when you need to wrap an unmanaged resource that does not have an existing managed wrapper.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid&gt;</ph> class when you need to wrap an unmanaged resource that does not have an existing managed wrapper.","pos":[0,178],"source":"Use the <xref:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid> class when you need to wrap an unmanaged resource that does not have an existing managed wrapper."}]},{"pos":[534,1044],"content":"This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[0,61],"source":"This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[62,156]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[157,268],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[269,376],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[377,510],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]},{"pos":[1052,1202],"content":"[!NOTE]\n See the <xref:System.Runtime.InteropServices.CriticalHandle> class for important information on critical handle security and thread safety.","leadings":["","> "],"nodes":[{"content":"See the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CriticalHandle&gt;</ph> class for important information on critical handle security and thread safety.","pos":[9,148],"source":" See the <xref:System.Runtime.InteropServices.CriticalHandle> class for important information on critical handle security and thread safety."}]}],"pos":[869,2083],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\"></xref> class.","nodes":[{"pos":[0,127],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\"></xref> class."}],"pos":[4638,4766],"yaml":true},{"content":"Gets a value that indicates whether the handle is invalid.","nodes":[{"pos":[0,58],"content":"Gets a value that indicates whether the handle is invalid.","nodes":[{"content":"Gets a value that indicates whether the handle is invalid.","pos":[0,58]}]}],"pos":[6297,6356],"yaml":true},{"content":"The common language runtime uses this property to determine whether critical finalization is required.","nodes":[{"pos":[0,102],"content":"The common language runtime uses this property to determine whether critical finalization is required.","nodes":[{"content":"The common language runtime uses this property to determine whether critical finalization is required.","pos":[0,102]}]}],"pos":[6367,6470],"yaml":true,"extradata":"MT"},{"content":"`true` if the handle is not valid; otherwise, `false`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">`true`</ph> if the handle is not valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the handle is not valid; otherwise, `false`."}],"pos":[6647,6704],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\n  commentId: T:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\n  id: CriticalHandleZeroOrMinusOneIsInvalid\n  children:\n  - Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.#ctor\n  - Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid\n  langs:\n  - csharp\n  name: CriticalHandleZeroOrMinusOneIsInvalid\n  nameWithType: CriticalHandleZeroOrMinusOneIsInvalid\n  fullName: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Provides a base class for Win32 critical handle implementations in which the value of either 0 or -1 indicates an invalid handle.\n  remarks: \"This class derives from the <xref:System.Runtime.InteropServices.CriticalHandle?displayProperty=fullName> class. It describes the format of an invalid handle. For example, some handles use -1 as an invalid handle value, while others use 0. Further derivations of this class (for example, file or registry handles) can specialize this further.  \\n  \\n Use the <xref:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid> class when you need to wrap an unmanaged resource that does not have an existing managed wrapper.  \\n  \\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n> [!NOTE]\\n>  See the <xref:System.Runtime.InteropServices.CriticalHandle> class for important information on critical handle security and thread safety.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public abstract class CriticalHandleZeroOrMinusOneIsInvalid : System.Runtime.InteropServices.CriticalHandle\n  inheritance:\n  - System.Object\n  - System.Runtime.InteropServices.CriticalHandle\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Runtime.InteropServices.CriticalHandle.Close\n  - System.Runtime.InteropServices.CriticalHandle.Dispose\n  - System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.CriticalHandle.handle\n  - System.Runtime.InteropServices.CriticalHandle.IsClosed\n  - System.Runtime.InteropServices.CriticalHandle.ReleaseHandle\n  - System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/CriticalHandleZeroOrMinusOneIsInvalid.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.#ctor\n  commentId: M:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.#ctor\n  id: '#ctor'\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\n  langs:\n  - csharp\n  name: CriticalHandleZeroOrMinusOneIsInvalid()\n  nameWithType: CriticalHandleZeroOrMinusOneIsInvalid.CriticalHandleZeroOrMinusOneIsInvalid()\n  fullName: CriticalHandleZeroOrMinusOneIsInvalid.CriticalHandleZeroOrMinusOneIsInvalid()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\"></xref> class.\n  syntax:\n    content: protected CriticalHandleZeroOrMinusOneIsInvalid ();\n    parameters: []\n  overload: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/CriticalHandleZeroOrMinusOneIsInvalid.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid\n  commentId: P:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid\n  id: IsInvalid\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\n  langs:\n  - csharp\n  name: IsInvalid\n  nameWithType: CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid\n  fullName: CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: Microsoft.Win32.SafeHandles\n  summary: Gets a value that indicates whether the handle is invalid.\n  remarks: The common language runtime uses this property to determine whether critical finalization is required.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public override bool IsInvalid { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the handle is not valid; otherwise, `false`.'\n  overload: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/CriticalHandleZeroOrMinusOneIsInvalid.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Runtime.InteropServices.CriticalHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: CriticalHandle\n  nameWithType: CriticalHandle\n  fullName: System.Runtime.InteropServices.CriticalHandle\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.#ctor\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: CriticalHandleZeroOrMinusOneIsInvalid()\n  nameWithType: CriticalHandleZeroOrMinusOneIsInvalid.CriticalHandleZeroOrMinusOneIsInvalid()\n  fullName: CriticalHandleZeroOrMinusOneIsInvalid.CriticalHandleZeroOrMinusOneIsInvalid()\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: IsInvalid\n  nameWithType: CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid\n  fullName: CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.#ctor*\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: CriticalHandleZeroOrMinusOneIsInvalid\n  nameWithType: CriticalHandleZeroOrMinusOneIsInvalid.CriticalHandleZeroOrMinusOneIsInvalid\n  fullName: CriticalHandleZeroOrMinusOneIsInvalid.CriticalHandleZeroOrMinusOneIsInvalid\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/CriticalHandleZeroOrMinusOneIsInvalid.xml\n- uid: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid*\n  parent: Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid\n  isExternal: false\n  name: IsInvalid\n  nameWithType: CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid\n  fullName: CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/CriticalHandleZeroOrMinusOneIsInvalid.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Runtime.InteropServices.CriticalHandle.Close\n  parent: System.Runtime.InteropServices.CriticalHandle\n  isExternal: false\n  name: Close()\n  nameWithType: CriticalHandle.Close()\n  fullName: CriticalHandle.Close()\n- uid: System.Runtime.InteropServices.CriticalHandle.Dispose\n  parent: System.Runtime.InteropServices.CriticalHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: CriticalHandle.Dispose()\n  fullName: CriticalHandle.Dispose()\n- uid: System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.CriticalHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: CriticalHandle.Dispose(Boolean)\n  fullName: CriticalHandle.Dispose(Boolean)\n- uid: System.Runtime.InteropServices.CriticalHandle.handle\n  parent: System.Runtime.InteropServices.CriticalHandle\n  isExternal: false\n  name: handle\n  nameWithType: CriticalHandle.handle\n  fullName: CriticalHandle.handle\n- uid: System.Runtime.InteropServices.CriticalHandle.IsClosed\n  parent: System.Runtime.InteropServices.CriticalHandle\n  isExternal: false\n  name: IsClosed\n  nameWithType: CriticalHandle.IsClosed\n  fullName: CriticalHandle.IsClosed\n- uid: System.Runtime.InteropServices.CriticalHandle.ReleaseHandle\n  parent: System.Runtime.InteropServices.CriticalHandle\n  isExternal: false\n  name: ReleaseHandle()\n  nameWithType: CriticalHandle.ReleaseHandle()\n  fullName: CriticalHandle.ReleaseHandle()\n- uid: System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.CriticalHandle\n  isExternal: false\n  name: SetHandle(IntPtr)\n  nameWithType: CriticalHandle.SetHandle(IntPtr)\n  fullName: CriticalHandle.SetHandle(IntPtr)\n- uid: System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.CriticalHandle\n  isExternal: false\n  name: SetHandleAsInvalid()\n  nameWithType: CriticalHandle.SetHandleAsInvalid()\n  fullName: CriticalHandle.SetHandleAsInvalid()\n"}