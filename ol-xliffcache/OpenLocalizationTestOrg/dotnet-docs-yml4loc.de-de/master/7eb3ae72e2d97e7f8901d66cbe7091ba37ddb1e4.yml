### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.SignatureHelper
  commentId: T:System.Reflection.Emit.SignatureHelper
  id: SignatureHelper
  children:
  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)
  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)
  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])
  - System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.SignatureHelper.AddSentinel
  - System.Reflection.Emit.SignatureHelper.Equals(System.Object)
  - System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)
  - System.Reflection.Emit.SignatureHelper.GetHashCode
  - System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper
  - System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)
  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])
  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)
  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)
  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)
  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)
  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])
  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.SignatureHelper.GetSignature
  - System.Reflection.Emit.SignatureHelper.ToString
  - System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: SignatureHelper
  nameWithType: SignatureHelper
  fullName: System.Reflection.Emit.SignatureHelper
  type: Class
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Provides methods for building signatures.
  remarks: "Use the <xref:System.Reflection.Emit.SignatureHelper> class to create a signature blob that can be passed to the <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> method of the <xref:System.Reflection.Emit.DynamicILInfo> class. A <xref:System.Reflection.Emit.SignatureHelper> object can also be passed to the <xref:System.Reflection.Emit.ILGenerator.Emit%28System.Reflection.Emit.OpCode%2CSystem.Reflection.Emit.SignatureHelper%29?displayProperty=fullName> method overload to insert an instruction and a signature token into a Microsoft intermediate language (MSIL) stream. For information on signature blobs and signature metadata, see the ECMA Partition II Metadata documentation.  \n  \n> [!NOTE]\n>  The ECMA Partition II documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SignatureHelper : System.Runtime.InteropServices._SignatureHelper
  inheritance:
  - System.Object
  implements:
  - System.Runtime.InteropServices._SignatureHelper
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.InteropServices.ClassInterfaceAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)
  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)
  id: AddArgument(System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: AddArgument(Type)
  nameWithType: SignatureHelper.AddArgument(Type)
  fullName: SignatureHelper.AddArgument(Type)
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Adds an argument to the signature.
  remarks: To add an argument with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload.
  syntax:
    content: public void AddArgument (Type clsArgument);
    parameters:
    - id: clsArgument
      type: System.Type
      description: The type of the argument.
  overload: System.Reflection.Emit.SignatureHelper.AddArgument*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The signature has already been finished.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>clsArgument</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)
  id: AddArgument(System.Type,System.Boolean)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: AddArgument(Type, Boolean)
  nameWithType: SignatureHelper.AddArgument(Type, Boolean)
  fullName: SignatureHelper.AddArgument(Type, Boolean)
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Adds an argument of the specified type to the signature, specifying whether the argument is pinned.
  remarks: To add an argument with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> method overload.
  syntax:
    content: public void AddArgument (Type argument, bool pinned);
    parameters:
    - id: argument
      type: System.Type
      description: The argument type.
    - id: pinned
      type: System.Boolean
      description: '`true` if the argument is pinned; otherwise, `false`.'
  overload: System.Reflection.Emit.SignatureHelper.AddArgument*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>argument</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])
  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])
  id: AddArgument(System.Type,System.Type[],System.Type[])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: AddArgument(Type, Type[], Type[])
  nameWithType: SignatureHelper.AddArgument(Type, Type[], Type[])
  fullName: SignatureHelper.AddArgument(Type, Type[], Type[])
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Adds an argument to the signature, with the specified custom modifiers.
  remarks: See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.
  syntax:
    content: public void AddArgument (Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);
    parameters:
    - id: argument
      type: System.Type
      description: The argument type.
    - id: requiredCustomModifiers
      type: System.Type[]
      description: An array of types representing the required custom modifiers for the argument, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref> or <xref href="System.Runtime.CompilerServices.IsBoxed"></xref>. If the argument has no required custom modifiers, specify `null`.
    - id: optionalCustomModifiers
      type: System.Type[]
      description: An array of types representing the optional custom modifiers for the argument, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref> or <xref href="System.Runtime.CompilerServices.IsBoxed"></xref>. If the argument has no optional custom modifiers, specify `null`.
  overload: System.Reflection.Emit.SignatureHelper.AddArgument*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>argument</code> is `null`.  \n  \n -or-  \n  \n An element of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The signature has already been finished.  \n  \n -or-  \n  \n One of the specified custom modifiers is an array type.  \n  \n -or-  \n  \n One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])
  id: AddArguments(System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: AddArguments(Type[], Type[][], Type[][])
  nameWithType: SignatureHelper.AddArguments(Type[], Type[][], Type[][])
  fullName: SignatureHelper.AddArguments(Type[], Type[][], Type[][])
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Adds a set of arguments to the signature, with the specified custom modifiers.
  remarks: "The arguments are added to the end of the signature, in order of the elements of `arguments`.  \n  \n See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers."
  syntax:
    content: public void AddArguments (Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);
    parameters:
    - id: arguments
      type: System.Type[]
      description: The types of the arguments to be added.
    - id: requiredCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref> or <xref href="System.Runtime.CompilerServices.IsBoxed"></xref>. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.
    - id: optionalCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref> or <xref href="System.Runtime.CompilerServices.IsBoxed"></xref>. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.
  overload: System.Reflection.Emit.SignatureHelper.AddArguments*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "An element of <code>arguments</code> is `null`.  \n  \n -or-  \n  \n One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The signature has already been finished.  \n  \n -or-  \n  \n One of the specified custom modifiers is an array type.  \n  \n -or-  \n  \n One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.  \n  \n -or-  \n  \n The size of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> does not equal the size of <code>arguments</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.AddSentinel
  commentId: M:System.Reflection.Emit.SignatureHelper.AddSentinel
  id: AddSentinel
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: AddSentinel()
  nameWithType: SignatureHelper.AddSentinel()
  fullName: SignatureHelper.AddSentinel()
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.
  syntax:
    content: public void AddSentinel ();
    parameters: []
  overload: System.Reflection.Emit.SignatureHelper.AddSentinel*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.Equals(System.Object)
  commentId: M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SignatureHelper.Equals(Object)
  fullName: SignatureHelper.Equals(Object)
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Checks if this instance is equal to the given object.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object with which this instance should be compared.
    return:
      type: System.Boolean
      description: '`true` if the given object is a `SignatureHelper` and represents the same signature; otherwise, `false`.'
  overload: System.Reflection.Emit.SignatureHelper.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)
  commentId: M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)
  id: GetFieldSigHelper(System.Reflection.Module)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetFieldSigHelper(Module)
  nameWithType: SignatureHelper.GetFieldSigHelper(Module)
  fullName: SignatureHelper.GetFieldSigHelper(Module)
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a field.
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetFieldSigHelper (System.Reflection.Module mod);
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: The dynamic module that contains the field for which the `SignatureHelper` is requested.
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: The `SignatureHelper` object for a field.
  overload: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetHashCode
  commentId: M:System.Reflection.Emit.SignatureHelper.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SignatureHelper.GetHashCode()
  fullName: SignatureHelper.GetHashCode()
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Creates and returns a hash code for this instance.
  remarks: The hash code is created from the name of this instance, so the return value is the same as if the `GetHashCode` method were called on the value of the `Name` property.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: Returns the hash code based on the name.
  overload: System.Reflection.Emit.SignatureHelper.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper
  commentId: M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper
  id: GetLocalVarSigHelper
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetLocalVarSigHelper()
  nameWithType: SignatureHelper.GetLocalVarSigHelper()
  fullName: SignatureHelper.GetLocalVarSigHelper()
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a local variable.
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper ();
    parameters: []
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: A <xref href="System.Reflection.Emit.SignatureHelper"></xref> for a local variable.
  overload: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)
  commentId: M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)
  id: GetLocalVarSigHelper(System.Reflection.Module)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetLocalVarSigHelper(Module)
  nameWithType: SignatureHelper.GetLocalVarSigHelper(Module)
  fullName: SignatureHelper.GetLocalVarSigHelper(Module)
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a local variable.
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper (System.Reflection.Module mod);
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: The dynamic module that contains the local variable for which the `SignatureHelper` is requested.
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: The `SignatureHelper` object for a local variable.
  overload: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])
  id: GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetMethodSigHelper(Module, Type, Type[])
  nameWithType: SignatureHelper.GetMethodSigHelper(Module, Type, Type[])
  fullName: SignatureHelper.GetMethodSigHelper(Module, Type, Type[])
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.
  remarks: "This overload creates a signature with a standard calling convention.  \n  \n To create a method signature with custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper%28System.Reflection.Module%2CSystem.Reflection.CallingConventions%2CSystem.Type%29> method overload and then use the <xref:System.Reflection.Emit.SignatureHelper.AddArgument%28System.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%29> or <xref:System.Reflection.Emit.SignatureHelper.AddArguments%28System.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overloads to add arguments with custom modifiers."
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, Type returnType, Type[] parameterTypes);
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: The <xref href="System.Reflection.Emit.ModuleBuilder"></xref> that contains the method for which the `SignatureHelper` is requested.
    - id: returnType
      type: System.Type
      description: The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).
    - id: parameterTypes
      type: System.Type[]
      description: The types of the arguments of the method, or `null` if the method has no arguments.
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: The `SignatureHelper` object for a method.
  overload: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mod</code> is `null`.  \n  \n -or-  \n  \n An element of <code>parameterTypes</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>mod</code> is not a <xref href="System.Reflection.Emit.ModuleBuilder"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)
  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)
  id: GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetMethodSigHelper(Module, CallingConvention, Type)
  nameWithType: SignatureHelper.GetMethodSigHelper(Module, CallingConvention, Type)
  fullName: SignatureHelper.GetMethodSigHelper(Module, CallingConvention, Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a method given the method's module, unmanaged calling convention, and return type.
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, Type returnType);
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: The <xref href="System.Reflection.Emit.ModuleBuilder"></xref> that contains the method for which the `SignatureHelper` is requested.
    - id: unmanagedCallConv
      type: System.Runtime.InteropServices.CallingConvention
      description: The unmanaged calling convention of the method.
    - id: returnType
      type: System.Type
      description: The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: The `SignatureHelper` object for a method.
  overload: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>mod</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.  \n  \n -or-  \n  \n <code>unmanagedCallConv</code> is an unknown unmanaged calling convention."
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)
  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)
  id: GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetMethodSigHelper(CallingConvention, Type)
  nameWithType: SignatureHelper.GetMethodSigHelper(CallingConvention, Type)
  fullName: SignatureHelper.GetMethodSigHelper(CallingConvention, Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a method given the method's unmanaged calling convention and return type.
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Runtime.InteropServices.CallingConvention unmanagedCallingConvention, Type returnType);
    parameters:
    - id: unmanagedCallingConvention
      type: System.Runtime.InteropServices.CallingConvention
      description: The unmanaged calling convention of the method.
    - id: returnType
      type: System.Type
      description: The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: The `SignatureHelper` object for a method.
  overload: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>unmanagedCallConv</code> is an unknown unmanaged calling convention.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)
  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)
  id: GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetMethodSigHelper(CallingConventions, Type)
  nameWithType: SignatureHelper.GetMethodSigHelper(CallingConventions, Type)
  fullName: SignatureHelper.GetMethodSigHelper(CallingConventions, Type)
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a method given the method's calling convention and return type.
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.CallingConventions callingConvention, Type returnType);
    parameters:
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention of the method.
    - id: returnType
      type: System.Type
      description: The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: The `SignatureHelper` object for a method.
  overload: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)
  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)
  id: GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetMethodSigHelper(Module, CallingConventions, Type)
  nameWithType: SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)
  fullName: SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a method given the method's module, calling convention, and return type.
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, System.Reflection.CallingConventions callingConvention, Type returnType);
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: The <xref href="System.Reflection.Emit.ModuleBuilder"></xref> that contains the method for which the `SignatureHelper` is requested.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention of the method.
    - id: returnType
      type: System.Type
      description: The return type of the method, or `null` for a void return type (`Sub` procedure in Visual Basic).
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: The `SignatureHelper` object for a method.
  overload: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>mod</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>mod</code> is not a <xref href="System.Reflection.Emit.ModuleBuilder"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])
  id: GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetPropertySigHelper(Module, Type, Type[])
  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[])
  fullName: SignatureHelper.GetPropertySigHelper(Module, Type, Type[])
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.
  remarks: To create a signature helper for a property with optional or required custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%2CSystem.Type%5B%5D%5B%5D%2CSystem.Type%5B%5D%5B%5D%29> method overload.
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, Type returnType, Type[] parameterTypes);
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: The <xref href="System.Reflection.Emit.ModuleBuilder"></xref> that contains the property for which the <xref href="System.Reflection.Emit.SignatureHelper"></xref> is requested.
    - id: returnType
      type: System.Type
      description: The property type.
    - id: parameterTypes
      type: System.Type[]
      description: The argument types, or `null` if the property has no arguments.
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: A <xref href="System.Reflection.Emit.SignatureHelper"></xref> object for a property.
  overload: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mod</code> is `null`.  \n  \n -or-  \n  \n An element of <code>parameterTypes</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>mod</code> is not a <xref href="System.Reflection.Emit.ModuleBuilder"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])
  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: SignatureHelper.GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.
  remarks: "See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.  \n  \n If a property has no custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> method overload."
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: The <xref href="System.Reflection.Emit.ModuleBuilder"></xref> that contains the property for which the <xref href="System.Reflection.Emit.SignatureHelper"></xref> is requested.
    - id: returnType
      type: System.Type
      description: The property type.
    - id: requiredReturnTypeCustomModifiers
      type: System.Type[]
      description: An array of types representing the required custom modifiers for the return type, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref> or <xref href="System.Runtime.CompilerServices.IsBoxed"></xref>. If the return type has no required custom modifiers, specify `null`.
    - id: optionalReturnTypeCustomModifiers
      type: System.Type[]
      description: An array of types representing the optional custom modifiers for the return type, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref> or <xref href="System.Runtime.CompilerServices.IsBoxed"></xref>. If the return type has no optional custom modifiers, specify `null`.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the property's arguments, or `null` if the property has no arguments.
    - id: requiredParameterTypeCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.
    - id: optionalParameterTypeCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: A <xref href="System.Reflection.Emit.SignatureHelper"></xref> object for a property.
  overload: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mod</code> is `null`.  \n  \n -or-  \n  \n An element of <code>parameterTypes</code> is `null`.  \n  \n -or-  \n  \n One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The signature has already been finished.  \n  \n -or-  \n  \n <code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.  \n  \n -or-  \n  \n One of the specified custom modifiers is an array type.  \n  \n -or-  \n  \n One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.  \n  \n -or-  \n  \n The size of <code>requiredParameterTypeCustomModifiers</code> or <code>optionalParameterTypeCustomModifiers</code> does not equal the size of <code>parameterTypes</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  nameWithType: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.
  remarks: "See the <xref:System.Runtime.CompilerServices> namespace for classes that represent custom modifiers.  \n  \n If a property has no custom modifiers, use the <xref:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper%28System.Reflection.Module%2CSystem.Type%2CSystem.Type%5B%5D%29> method overload.  \n  \n> [!NOTE]\n>  This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: The <xref href="System.Reflection.Emit.ModuleBuilder"></xref> that contains the property for which the <xref href="System.Reflection.Emit.SignatureHelper"></xref> is requested.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention of the property accessors.
    - id: returnType
      type: System.Type
      description: The property type.
    - id: requiredReturnTypeCustomModifiers
      type: System.Type[]
      description: An array of types representing the required custom modifiers for the return type, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref> or <xref href="System.Runtime.CompilerServices.IsBoxed"></xref>. If the return type has no required custom modifiers, specify `null`.
    - id: optionalReturnTypeCustomModifiers
      type: System.Type[]
      description: An array of types representing the optional custom modifiers for the return type, such as <xref href="System.Runtime.CompilerServices.IsConst"></xref> or <xref href="System.Runtime.CompilerServices.IsBoxed"></xref>. If the return type has no optional custom modifiers, specify `null`.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the property's arguments, or `null` if the property has no arguments.
    - id: requiredParameterTypeCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify `null` instead of an array of arrays.
    - id: optionalParameterTypeCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify `null` instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify `null` instead of an array of arrays.
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: A <xref href="System.Reflection.Emit.SignatureHelper"></xref> object for a property.
  overload: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>mod</code> is `null`.  \n  \n -or-  \n  \n An element of <code>parameterTypes</code> is `null`.  \n  \n -or-  \n  \n One of the specified custom modifiers is `null`. (However, `null` can be specified for the array of custom modifiers for any argument.)"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The signature has already been finished.  \n  \n -or-  \n  \n <code>mod</code> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\"></xref>.  \n  \n -or-  \n  \n One of the specified custom modifiers is an array type.  \n  \n -or-  \n  \n One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\"></xref> property is `true` for the custom modifier.  \n  \n -or-  \n  \n The size of <code>requiredParameterTypeCustomModifiers</code> or <code>optionalParameterTypeCustomModifiers</code> does not equal the size of <code>parameterTypes</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.GetSignature
  commentId: M:System.Reflection.Emit.SignatureHelper.GetSignature
  id: GetSignature
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: GetSignature()
  nameWithType: SignatureHelper.GetSignature()
  fullName: SignatureHelper.GetSignature()
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.
  syntax:
    content: public byte[] GetSignature ();
    parameters: []
    return:
      type: System.Byte[]
      description: Returns a byte array made up of the full signature.
  overload: System.Reflection.Emit.SignatureHelper.GetSignature*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.ToString
  commentId: M:System.Reflection.Emit.SignatureHelper.ToString
  id: ToString
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: ToString()
  nameWithType: SignatureHelper.ToString()
  fullName: SignatureHelper.ToString()
  type: Method
  assemblies:
  - System.Reflection.Emit.ILGeneration
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Returns a string representing the signature arguments.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: Returns a string representing the arguments of this signature.
  overload: System.Reflection.Emit.SignatureHelper.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: _SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: SignatureHelper._SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: SignatureHelper._SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _SignatureHelper.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array which receives the IDs corresponding to the names.
  overload: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: _SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: SignatureHelper._SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: SignatureHelper._SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _SignatureHelper.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: Receives a pointer to the requested type information object.
  overload: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)
  commentId: M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: _SignatureHelper.GetTypeInfoCount(UInt32)
  nameWithType: SignatureHelper._SignatureHelper.GetTypeInfoCount(UInt32)
  fullName: SignatureHelper._SignatureHelper.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _SignatureHelper.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  overload: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  commentId: M:System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  name: _SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: SignatureHelper._SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: SignatureHelper._SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _SignatureHelper.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  overload: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: AddArgument(Type)
  nameWithType: SignatureHelper.AddArgument(Type)
  fullName: SignatureHelper.AddArgument(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: AddArgument(Type, Boolean)
  nameWithType: SignatureHelper.AddArgument(Type, Boolean)
  fullName: SignatureHelper.AddArgument(Type, Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: AddArgument(Type, Type[], Type[])
  nameWithType: SignatureHelper.AddArgument(Type, Type[], Type[])
  fullName: SignatureHelper.AddArgument(Type, Type[], Type[])
- uid: System.Type[]
  parent: System
  isExternal: false
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: AddArguments(Type[], Type[][], Type[][])
  nameWithType: SignatureHelper.AddArguments(Type[], Type[][], Type[][])
  fullName: SignatureHelper.AddArguments(Type[], Type[][], Type[][])
- uid: System.Type[][]
  parent: System
  isExternal: false
  name: Type[][]
  nameWithType: Type[][]
  fullName: System.Type[][]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.SignatureHelper.AddSentinel
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: AddSentinel()
  nameWithType: SignatureHelper.AddSentinel()
  fullName: SignatureHelper.AddSentinel()
- uid: System.Reflection.Emit.SignatureHelper.Equals(System.Object)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: Equals(Object)
  nameWithType: SignatureHelper.Equals(Object)
  fullName: SignatureHelper.Equals(Object)
- uid: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetFieldSigHelper(Module)
  nameWithType: SignatureHelper.GetFieldSigHelper(Module)
  fullName: SignatureHelper.GetFieldSigHelper(Module)
- uid: System.Reflection.Emit.SignatureHelper
  parent: System.Reflection.Emit
  isExternal: false
  name: SignatureHelper
  nameWithType: SignatureHelper
  fullName: System.Reflection.Emit.SignatureHelper
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Emit.SignatureHelper.GetHashCode
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetHashCode()
  nameWithType: SignatureHelper.GetHashCode()
  fullName: SignatureHelper.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetLocalVarSigHelper()
  nameWithType: SignatureHelper.GetLocalVarSigHelper()
  fullName: SignatureHelper.GetLocalVarSigHelper()
- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetLocalVarSigHelper(Module)
  nameWithType: SignatureHelper.GetLocalVarSigHelper(Module)
  fullName: SignatureHelper.GetLocalVarSigHelper(Module)
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetMethodSigHelper(Module, Type, Type[])
  nameWithType: SignatureHelper.GetMethodSigHelper(Module, Type, Type[])
  fullName: SignatureHelper.GetMethodSigHelper(Module, Type, Type[])
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Runtime.InteropServices.CallingConvention,System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetMethodSigHelper(Module, CallingConvention, Type)
  nameWithType: SignatureHelper.GetMethodSigHelper(Module, CallingConvention, Type)
  fullName: SignatureHelper.GetMethodSigHelper(Module, CallingConvention, Type)
- uid: System.Runtime.InteropServices.CallingConvention
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CallingConvention
  nameWithType: CallingConvention
  fullName: System.Runtime.InteropServices.CallingConvention
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention,System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetMethodSigHelper(CallingConvention, Type)
  nameWithType: SignatureHelper.GetMethodSigHelper(CallingConvention, Type)
  fullName: SignatureHelper.GetMethodSigHelper(CallingConvention, Type)
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetMethodSigHelper(CallingConventions, Type)
  nameWithType: SignatureHelper.GetMethodSigHelper(CallingConventions, Type)
  fullName: SignatureHelper.GetMethodSigHelper(CallingConventions, Type)
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetMethodSigHelper(Module, CallingConventions, Type)
  nameWithType: SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)
  fullName: SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)
- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetPropertySigHelper(Module, Type, Type[])
  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[])
  fullName: SignatureHelper.GetPropertySigHelper(Module, Type, Type[])
- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])
  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: SignatureHelper.GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])
- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  nameWithType: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
- uid: System.Reflection.Emit.SignatureHelper.GetSignature
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetSignature()
  nameWithType: SignatureHelper.GetSignature()
  fullName: SignatureHelper.GetSignature()
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.SignatureHelper.ToString
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: ToString()
  nameWithType: SignatureHelper.ToString()
  fullName: SignatureHelper.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: _SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: SignatureHelper._SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: SignatureHelper._SignatureHelper.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: _SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: SignatureHelper._SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: SignatureHelper._SignatureHelper.GetTypeInfo(UInt32, UInt32, IntPtr)
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: _SignatureHelper.GetTypeInfoCount(UInt32)
  nameWithType: SignatureHelper._SignatureHelper.GetTypeInfoCount(UInt32)
  fullName: SignatureHelper._SignatureHelper.GetTypeInfoCount(UInt32)
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: _SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: SignatureHelper._SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: SignatureHelper._SignatureHelper.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Reflection.Emit.SignatureHelper.AddArgument*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: AddArgument
  nameWithType: SignatureHelper.AddArgument
  fullName: SignatureHelper.AddArgument
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.AddArguments*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: AddArguments
  nameWithType: SignatureHelper.AddArguments
  fullName: SignatureHelper.AddArguments
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.AddSentinel*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: AddSentinel
  nameWithType: SignatureHelper.AddSentinel
  fullName: SignatureHelper.AddSentinel
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.Equals*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: Equals
  nameWithType: SignatureHelper.Equals
  fullName: SignatureHelper.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetFieldSigHelper
  nameWithType: SignatureHelper.GetFieldSigHelper
  fullName: SignatureHelper.GetFieldSigHelper
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.GetHashCode*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetHashCode
  nameWithType: SignatureHelper.GetHashCode
  fullName: SignatureHelper.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetLocalVarSigHelper
  nameWithType: SignatureHelper.GetLocalVarSigHelper
  fullName: SignatureHelper.GetLocalVarSigHelper
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetMethodSigHelper
  nameWithType: SignatureHelper.GetMethodSigHelper
  fullName: SignatureHelper.GetMethodSigHelper
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetPropertySigHelper
  nameWithType: SignatureHelper.GetPropertySigHelper
  fullName: SignatureHelper.GetPropertySigHelper
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.GetSignature*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: GetSignature
  nameWithType: SignatureHelper.GetSignature
  fullName: SignatureHelper.GetSignature
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.ToString*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: ToString
  nameWithType: SignatureHelper.ToString
  fullName: SignatureHelper.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetIDsOfNames*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames
  nameWithType: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames
  fullName: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfo*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: System.Runtime.InteropServices._SignatureHelper.GetTypeInfo
  nameWithType: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetTypeInfo
  fullName: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetTypeInfo
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#GetTypeInfoCount*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount
  nameWithType: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount
  fullName: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Reflection.Emit.SignatureHelper.System#Runtime#InteropServices#_SignatureHelper#Invoke*
  parent: System.Reflection.Emit.SignatureHelper
  isExternal: false
  name: System.Runtime.InteropServices._SignatureHelper.Invoke
  nameWithType: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.Invoke
  fullName: SignatureHelper.System.Runtime.InteropServices._SignatureHelper.Invoke
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/SignatureHelper.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Runtime.InteropServices._SignatureHelper
  parent: System.Runtime.InteropServices
  isExternal: false
  name: _SignatureHelper
  nameWithType: _SignatureHelper
  fullName: System.Runtime.InteropServices._SignatureHelper
