{"nodes":[{"content":"Provides completion status on the execution of a <xref href=\"System.Threading.Tasks.Parallel\"></xref> loop.","nodes":[{"pos":[0,107],"content":"Provides completion status on the execution of a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Parallel\"&gt;&lt;/xref&gt;</ph> loop.","source":"Provides completion status on the execution of a <xref href=\"System.Threading.Tasks.Parallel\"></xref> loop."}],"pos":[581,689],"yaml":true},{"content":"If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns true, then the loop ran to completion, such that all iterations of the loop were executed. If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns null, a call to <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> was used to end the loop prematurely. If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns a non-null integral value, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was used to end the loop prematurely.","nodes":[{"pos":[0,729],"content":"If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns true, then the loop ran to completion, such that all iterations of the loop were executed. If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns null, a call to <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> was used to end the loop prematurely. If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns a non-null integral value, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was used to end the loop prematurely.","nodes":[{"content":"If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns true, then the loop ran to completion, such that all iterations of the loop were executed. If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns null, a call to <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> was used to end the loop prematurely. If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns a non-null integral value, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was used to end the loop prematurely.","pos":[0,729],"nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A&gt;</ph> returns true, then the loop ran to completion, such that all iterations of the loop were executed.","pos":[0,165],"source":"If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns true, then the loop ran to completion, such that all iterations of the loop were executed."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A&gt;</ph> returns false and <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A&gt;</ph> returns null, a call to <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Stop%2A&gt;</ph> was used to end the loop prematurely.","pos":[166,441],"source":" If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns null, a call to <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> was used to end the loop prematurely."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A&gt;</ph> returns false and <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A&gt;</ph> returns a non-null integral value, <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> was used to end the loop prematurely.","pos":[442,729],"source":" If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns a non-null integral value, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was used to end the loop prematurely."}]}]}],"pos":[700,1430],"yaml":true,"extradata":"MT"},{"content":"Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.","nodes":[{"pos":[0,149],"content":"Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.","nodes":[{"content":"Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.","pos":[0,149]}]}],"pos":[2832,2982],"yaml":true},{"content":"true if the loop ran to completion; otherwise false;","nodes":[{"pos":[0,52],"content":"true if the loop ran to completion; otherwise false;","nodes":[{"content":"true if the loop ran to completion; otherwise false;","pos":[0,52]}]}],"pos":[3096,3149],"yaml":true},{"content":"Gets the index of the lowest iteration from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> was called.","nodes":[{"pos":[0,129],"content":"Gets the index of the lowest iteration from which <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"&gt;&lt;/xref&gt;</ph> was called.","source":"Gets the index of the lowest iteration from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> was called."}],"pos":[4562,4692],"yaml":true},{"content":"If <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was not employed, this property will return null.","nodes":[{"pos":[0,109],"content":"If <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was not employed, this property will return null.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ParallelLoopState.Break%2A&gt;</ph> was not employed, this property will return null.","pos":[0,109],"source":"If <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was not employed, this property will return null."}]}],"pos":[4703,4813],"yaml":true,"extradata":"MT"},{"content":"Returns an integer that represents the lowest iteration from which the Break statement was called.","nodes":[{"pos":[0,98],"content":"Returns an integer that represents the lowest iteration from which the Break statement was called.","nodes":[{"content":"Returns an integer that represents the lowest iteration from which the Break statement was called.","pos":[0,98]}]}],"pos":[4961,5060],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Tasks.ParallelLoopResult\n  commentId: T:System.Threading.Tasks.ParallelLoopResult\n  id: ParallelLoopResult\n  children:\n  - System.Threading.Tasks.ParallelLoopResult.IsCompleted\n  - System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration\n  langs:\n  - csharp\n  name: ParallelLoopResult\n  nameWithType: ParallelLoopResult\n  fullName: System.Threading.Tasks.ParallelLoopResult\n  type: Struct\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Provides completion status on the execution of a <xref href=\"System.Threading.Tasks.Parallel\"></xref> loop.\n  remarks: If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns true, then the loop ran to completion, such that all iterations of the loop were executed. If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns null, a call to <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> was used to end the loop prematurely. If <xref:System.Threading.Tasks.ParallelLoopResult.IsCompleted%2A> returns false and <xref:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration%2A> returns a non-null integral value, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was used to end the loop prematurely.\n  syntax:\n    content: public struct ParallelLoopResult\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopResult.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.ParallelLoopResult.IsCompleted\n  commentId: P:System.Threading.Tasks.ParallelLoopResult.IsCompleted\n  id: IsCompleted\n  parent: System.Threading.Tasks.ParallelLoopResult\n  langs:\n  - csharp\n  name: IsCompleted\n  nameWithType: ParallelLoopResult.IsCompleted\n  fullName: ParallelLoopResult.IsCompleted\n  type: Property\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.\n  syntax:\n    content: public bool IsCompleted { get; }\n    return:\n      type: System.Boolean\n      description: true if the loop ran to completion; otherwise false;\n  overload: System.Threading.Tasks.ParallelLoopResult.IsCompleted*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopResult.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration\n  commentId: P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration\n  id: LowestBreakIteration\n  parent: System.Threading.Tasks.ParallelLoopResult\n  langs:\n  - csharp\n  name: LowestBreakIteration\n  nameWithType: ParallelLoopResult.LowestBreakIteration\n  fullName: ParallelLoopResult.LowestBreakIteration\n  type: Property\n  assemblies:\n  - System.Threading.Tasks.Parallel\n  - mscorlib\n  - netstandard\n  namespace: System.Threading.Tasks\n  summary: Gets the index of the lowest iteration from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\"></xref> was called.\n  remarks: If <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> was not employed, this property will return null.\n  syntax:\n    content: public Nullable<long> LowestBreakIteration { get; }\n    return:\n      type: System.Nullable{System.Int64}\n      description: Returns an integer that represents the lowest iteration from which the Break statement was called.\n  overload: System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopResult.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.Threading.Tasks.ParallelLoopResult.IsCompleted\n  parent: System.Threading.Tasks.ParallelLoopResult\n  isExternal: false\n  name: IsCompleted\n  nameWithType: ParallelLoopResult.IsCompleted\n  fullName: ParallelLoopResult.IsCompleted\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration\n  parent: System.Threading.Tasks.ParallelLoopResult\n  isExternal: false\n  name: LowestBreakIteration\n  nameWithType: ParallelLoopResult.LowestBreakIteration\n  fullName: ParallelLoopResult.LowestBreakIteration\n- uid: System.Nullable`1\n  name: Nullable<T>\n  nameWithType: Nullable<T>\n  fullName: System.Nullable<T>\n- uid: System.Int64\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Nullable{System.Int64}\n  parent: System\n  isExternal: false\n  name: Nullable<Int64>\n  nameWithType: Nullable<Int64>\n  fullName: System.Nullable<System.Int64>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.ParallelLoopResult.IsCompleted*\n  parent: System.Threading.Tasks.ParallelLoopResult\n  isExternal: false\n  name: IsCompleted\n  nameWithType: ParallelLoopResult.IsCompleted\n  fullName: ParallelLoopResult.IsCompleted\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopResult.xml\n- uid: System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration*\n  parent: System.Threading.Tasks.ParallelLoopResult\n  isExternal: false\n  name: LowestBreakIteration\n  nameWithType: ParallelLoopResult.LowestBreakIteration\n  fullName: ParallelLoopResult.LowestBreakIteration\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/ParallelLoopResult.xml\n"}