{"nodes":[{"content":"Provides a property type to the bind infrastructure. It is implemented by activities that contain a property of variable type, where the type can vary depending on other activity settings.","nodes":[{"pos":[0,188],"content":"Provides a property type to the bind infrastructure. It is implemented by activities that contain a property of variable type, where the type can vary depending on other activity settings.","nodes":[{"content":"Provides a property type to the bind infrastructure. It is implemented by activities that contain a property of variable type, where the type can vary depending on other activity settings.","pos":[0,188],"nodes":[{"content":"Provides a property type to the bind infrastructure.","pos":[0,52]},{"content":"It is implemented by activities that contain a property of variable type, where the type can vary depending on other activity settings.","pos":[53,188]}]}]}],"pos":[757,946],"yaml":true},{"content":"> [!NOTE]\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \n  \n This interface allows the parent activity to associate two properties and indicate to the bind infrastructure the type to be used in validating the bind. For example, you might have an activity with two properties, `TypeProperty` and `ValueProperty`, where `TypeProperty` specifies a valid type for the value of `ValueProperty`. In such a case, the parent activity implements the <xref:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider> interface.","nodes":[{"pos":[2,78],"content":"[!NOTE]\n [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]","leadings":["","> "],"nodes":[]},{"pos":[85,542],"content":"This interface allows the parent activity to associate two properties and indicate to the bind infrastructure the type to be used in validating the bind. For example, you might have an activity with two properties, `TypeProperty` and `ValueProperty`, where `TypeProperty` specifies a valid type for the value of `ValueProperty`. In such a case, the parent activity implements the <xref:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider> interface.","nodes":[{"content":"This interface allows the parent activity to associate two properties and indicate to the bind infrastructure the type to be used in validating the bind.","pos":[0,153]},{"content":"For example, you might have an activity with two properties, <ph id=\"ph1\">`TypeProperty`</ph> and <ph id=\"ph2\">`ValueProperty`</ph>, where <ph id=\"ph3\">`TypeProperty`</ph> specifies a valid type for the value of <ph id=\"ph4\">`ValueProperty`</ph>.","pos":[154,328],"source":" For example, you might have an activity with two properties, `TypeProperty` and `ValueProperty`, where `TypeProperty` specifies a valid type for the value of `ValueProperty`."},{"content":"In such a case, the parent activity implements the <ph id=\"ph1\">&lt;xref:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider&gt;</ph> interface.","pos":[329,457],"source":" In such a case, the parent activity implements the <xref:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider> interface."}]}],"pos":[957,1505],"yaml":true,"extradata":"MT"},{"content":"Returns the access type for the specified property.","nodes":[{"pos":[0,51],"content":"Returns the access type for the specified property.","nodes":[{"content":"Returns the access type for the specified property.","pos":[0,51]}]}],"pos":[3436,3488],"yaml":true},{"content":"Used at compile time to validate if the properties are correctly bound to one other. Without this interface, this information is inferred directly from property getter/setters.","nodes":[{"pos":[0,176],"content":"Used at compile time to validate if the properties are correctly bound to one other. Without this interface, this information is inferred directly from property getter/setters.","nodes":[{"content":"Used at compile time to validate if the properties are correctly bound to one other. Without this interface, this information is inferred directly from property getter/setters.","pos":[0,176],"nodes":[{"content":"Used at compile time to validate if the properties are correctly bound to one other.","pos":[0,84]},{"content":"Without this interface, this information is inferred directly from property getter/setters.","pos":[85,176]}]}]}],"pos":[3499,3676],"yaml":true,"extradata":"MT"},{"content":"An object that implements <xref href=\"System.IServiceProvider\"></xref> to provide access to design time services if they are needed.","nodes":[{"pos":[0,132],"content":"An object that implements <ph id=\"ph1\">&lt;xref href=\"System.IServiceProvider\"&gt;&lt;/xref&gt;</ph> to provide access to design time services if they are needed.","source":"An object that implements <xref href=\"System.IServiceProvider\"></xref> to provide access to design time services if they are needed."}],"pos":[3926,4059],"yaml":true},{"content":"The name of the property.","nodes":[{"pos":[0,25],"content":"The name of the property.","nodes":[{"content":"The name of the property.","pos":[0,25]}]}],"pos":[4127,4153],"yaml":true},{"content":"An <xref href=\"System.Workflow.ComponentModel.Compiler.AccessTypes\"></xref> enumeration value that denotes the access level of the property.","nodes":[{"pos":[0,140],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Compiler.AccessTypes\"&gt;&lt;/xref&gt;</ph> enumeration value that denotes the access level of the property.","source":"An <xref href=\"System.Workflow.ComponentModel.Compiler.AccessTypes\"></xref> enumeration value that denotes the access level of the property."}],"pos":[4248,4389],"yaml":true},{"content":"Returns the <xref href=\"System.Type\"></xref> of the specified property.","nodes":[{"pos":[0,71],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the specified property.","source":"Returns the <xref href=\"System.Type\"></xref> of the specified property."}],"pos":[5753,5825],"yaml":true},{"content":"Used at compile time to validate if the properties are correctly bound to one other.","nodes":[{"pos":[0,84],"content":"Used at compile time to validate if the properties are correctly bound to one other.","nodes":[{"content":"Used at compile time to validate if the properties are correctly bound to one other.","pos":[0,84]}]}],"pos":[5836,5921],"yaml":true,"extradata":"MT"},{"content":"An object that implements <xref href=\"System.IServiceProvider\"></xref> to provide access to design-time services if they are needed.","nodes":[{"pos":[0,132],"content":"An object that implements <ph id=\"ph1\">&lt;xref href=\"System.IServiceProvider\"&gt;&lt;/xref&gt;</ph> to provide access to design-time services if they are needed.","source":"An object that implements <xref href=\"System.IServiceProvider\"></xref> to provide access to design-time services if they are needed."}],"pos":[6126,6259],"yaml":true},{"content":"The name of the property.","nodes":[{"pos":[0,25],"content":"The name of the property.","nodes":[{"content":"The name of the property.","pos":[0,25]}]}],"pos":[6327,6353],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> for the property whose name is passed as the <code>propertyName</code> parameter.","nodes":[{"pos":[0,118],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> for the property whose name is passed as the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">propertyName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The <xref href=\"System.Type\"></xref> for the property whose name is passed as the <code>propertyName</code> parameter."}],"pos":[6408,6527],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider\n  commentId: T:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider\n  id: IDynamicPropertyTypeProvider\n  children:\n  - System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(System.IServiceProvider,System.String)\n  - System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(System.IServiceProvider,System.String)\n  langs:\n  - csharp\n  name: IDynamicPropertyTypeProvider\n  nameWithType: IDynamicPropertyTypeProvider\n  fullName: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider\n  type: Interface\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Provides a property type to the bind infrastructure. It is implemented by activities that contain a property of variable type, where the type can vary depending on other activity settings.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \\n  \\n This interface allows the parent activity to associate two properties and indicate to the bind infrastructure the type to be used in validating the bind. For example, you might have an activity with two properties, `TypeProperty` and `ValueProperty`, where `TypeProperty` specifies a valid type for the value of `ValueProperty`. In such a case, the parent activity implements the <xref:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider> interface.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      public interface IDynamicPropertyTypeProvider\n  derivedClasses:\n  - System.Workflow.Activities.CallExternalMethodActivity\n  - System.Workflow.Activities.HandleExternalEventActivity\n  - System.Workflow.Activities.InvokeWebServiceActivity\n  - System.Workflow.Activities.WebServiceInputActivity\n  - System.Workflow.Activities.WebServiceOutputActivity\n  - System.Workflow.ComponentModel.FaultHandlerActivity\n  - System.Workflow.ComponentModel.ThrowActivity\n  implements: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.ComponentModel/IDynamicPropertyTypeProvider.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(System.IServiceProvider,System.String)\n  commentId: M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(System.IServiceProvider,System.String)\n  id: GetAccessType(System.IServiceProvider,System.String)\n  parent: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider\n  langs:\n  - csharp\n  name: GetAccessType(IServiceProvider, String)\n  nameWithType: IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider, String)\n  fullName: IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider, String)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Returns the access type for the specified property.\n  remarks: Used at compile time to validate if the properties are correctly bound to one other. Without this interface, this information is inferred directly from property getter/setters.\n  syntax:\n    content: public System.Workflow.ComponentModel.Compiler.AccessTypes GetAccessType (IServiceProvider serviceProvider, string propertyName);\n    parameters:\n    - id: serviceProvider\n      type: System.IServiceProvider\n      description: An object that implements <xref href=\"System.IServiceProvider\"></xref> to provide access to design time services if they are needed.\n    - id: propertyName\n      type: System.String\n      description: The name of the property.\n    return:\n      type: System.Workflow.ComponentModel.Compiler.AccessTypes\n      description: An <xref href=\"System.Workflow.ComponentModel.Compiler.AccessTypes\"></xref> enumeration value that denotes the access level of the property.\n  overload: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.ComponentModel/IDynamicPropertyTypeProvider.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(System.IServiceProvider,System.String)\n  commentId: M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(System.IServiceProvider,System.String)\n  id: GetPropertyType(System.IServiceProvider,System.String)\n  parent: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider\n  langs:\n  - csharp\n  name: GetPropertyType(IServiceProvider, String)\n  nameWithType: IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider, String)\n  fullName: IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider, String)\n  type: Method\n  assemblies:\n  - System.Workflow.ComponentModel\n  namespace: System.Workflow.ComponentModel\n  summary: Returns the <xref href=\"System.Type\"></xref> of the specified property.\n  remarks: Used at compile time to validate if the properties are correctly bound to one other.\n  syntax:\n    content: public Type GetPropertyType (IServiceProvider serviceProvider, string propertyName);\n    parameters:\n    - id: serviceProvider\n      type: System.IServiceProvider\n      description: An object that implements <xref href=\"System.IServiceProvider\"></xref> to provide access to design-time services if they are needed.\n    - id: propertyName\n      type: System.String\n      description: The name of the property.\n    return:\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> for the property whose name is passed as the <code>propertyName</code> parameter.\n  overload: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.ComponentModel/IDynamicPropertyTypeProvider.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(System.IServiceProvider,System.String)\n  parent: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider\n  isExternal: false\n  name: GetAccessType(IServiceProvider, String)\n  nameWithType: IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider, String)\n  fullName: IDynamicPropertyTypeProvider.GetAccessType(IServiceProvider, String)\n- uid: System.Workflow.ComponentModel.Compiler.AccessTypes\n  parent: System.Workflow.ComponentModel.Compiler\n  isExternal: false\n  name: AccessTypes\n  nameWithType: AccessTypes\n  fullName: System.Workflow.ComponentModel.Compiler.AccessTypes\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: false\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(System.IServiceProvider,System.String)\n  parent: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider\n  isExternal: false\n  name: GetPropertyType(IServiceProvider, String)\n  nameWithType: IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider, String)\n  fullName: IDynamicPropertyTypeProvider.GetPropertyType(IServiceProvider, String)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType*\n  parent: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider\n  isExternal: false\n  name: GetAccessType\n  nameWithType: IDynamicPropertyTypeProvider.GetAccessType\n  fullName: IDynamicPropertyTypeProvider.GetAccessType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.ComponentModel/IDynamicPropertyTypeProvider.xml\n- uid: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType*\n  parent: System.Workflow.ComponentModel.IDynamicPropertyTypeProvider\n  isExternal: false\n  name: GetPropertyType\n  nameWithType: IDynamicPropertyTypeProvider.GetPropertyType\n  fullName: IDynamicPropertyTypeProvider.GetPropertyType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.ComponentModel/IDynamicPropertyTypeProvider.xml\n"}