{"nodes":[{"content":"Provides the ability to create events for event tracing for Windows (ETW).","nodes":[{"pos":[0,74],"content":"Provides the ability to create events for event tracing for Windows (ETW).","nodes":[{"content":"Provides the ability to create events for event tracing for Windows (ETW).","pos":[0,74]}]}],"pos":[5652,5727],"yaml":true},{"content":"This class is intended to be inherited by a user class that provides specific events to be used for ETW. The <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName> methods are called to log the events.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.  \n  \n The basic functionality of <xref:System.Diagnostics.Tracing.EventSource> is sufficient for most applications.  If you want more control over the ETW manifest that is created, you can apply the <xref:System.Diagnostics.Tracing.EventAttribute> attribute to the methods. For advanced event source applications, it is possible to intercept the commands being sent to the derived event source and change the filtering, or to cause actions (such as dumping a data structure) to be performed by the inheritor.  An event source can be activated with Windows ETW controllers, such as the Logman tool, immediately.  It is also possible to programmatically control and intercept the data dispatcher.  The <xref:System.Diagnostics.Tracing.EventListener> class provides additional functionality.  \n  \n Starting with [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Diagnostics.Tracing.EventSource> provides channel support and some of the event source validation rules have been relaxed. This means:  \n  \n-   <xref:System.Diagnostics.Tracing.EventSource> types may now implement interfaces. This enables the use of event source types in advanced logging systems that use interfaces to define a common logging target.  \n  \n-   The concept of a utility event source type has been introduced. This feature enables sharing code across multiple event source types in a project to enable scenarios such as optimized <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overloads.  \n  \n For a version of the <xref:System.Diagnostics.Tracing.EventSource> class that provides features such as channel support you are targeting [!INCLUDE[net_v451](~/includes/net-v451-md.md)] or earlier, see [Microsoft EventSource Library 1.0.16](https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.EventSource).","nodes":[{"pos":[0,231],"content":"This class is intended to be inherited by a user class that provides specific events to be used for ETW. The <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName> methods are called to log the events.","nodes":[{"content":"This class is intended to be inherited by a user class that provides specific events to be used for ETW. The <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName> methods are called to log the events.","pos":[0,231],"nodes":[{"content":"This class is intended to be inherited by a user class that provides specific events to be used for ETW.","pos":[0,104]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName&gt;</ph> methods are called to log the events.","pos":[105,231],"source":" The <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName> methods are called to log the events."}]}]},{"pos":[239,765],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]},{"pos":[772,1554],"content":"The basic functionality of <xref:System.Diagnostics.Tracing.EventSource> is sufficient for most applications.  If you want more control over the ETW manifest that is created, you can apply the <xref:System.Diagnostics.Tracing.EventAttribute> attribute to the methods. For advanced event source applications, it is possible to intercept the commands being sent to the derived event source and change the filtering, or to cause actions (such as dumping a data structure) to be performed by the inheritor.  An event source can be activated with Windows ETW controllers, such as the Logman tool, immediately.  It is also possible to programmatically control and intercept the data dispatcher.  The <xref:System.Diagnostics.Tracing.EventListener> class provides additional functionality.","nodes":[{"content":"The basic functionality of <xref:System.Diagnostics.Tracing.EventSource> is sufficient for most applications.  If you want more control over the ETW manifest that is created, you can apply the <xref:System.Diagnostics.Tracing.EventAttribute> attribute to the methods. For advanced event source applications, it is possible to intercept the commands being sent to the derived event source and change the filtering, or to cause actions (such as dumping a data structure) to be performed by the inheritor.  An event source can be activated with Windows ETW controllers, such as the Logman tool, immediately.  It is also possible to programmatically control and intercept the data dispatcher.  The <xref:System.Diagnostics.Tracing.EventListener> class provides additional functionality.","pos":[0,782],"nodes":[{"content":"The basic functionality of <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> is sufficient for most applications.","pos":[0,109],"source":"The basic functionality of <xref:System.Diagnostics.Tracing.EventSource> is sufficient for most applications."},{"content":"If you want more control over the ETW manifest that is created, you can apply the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventAttribute&gt;</ph> attribute to the methods.","pos":[111,267],"source":"  If you want more control over the ETW manifest that is created, you can apply the <xref:System.Diagnostics.Tracing.EventAttribute> attribute to the methods."},{"content":"For advanced event source applications, it is possible to intercept the commands being sent to the derived event source and change the filtering, or to cause actions (such as dumping a data structure) to be performed by the inheritor.","pos":[268,502]},{"content":"An event source can be activated with Windows ETW controllers, such as the Logman tool, immediately.","pos":[504,604]},{"content":"It is also possible to programmatically control and intercept the data dispatcher.","pos":[606,688]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventListener&gt;</ph> class provides additional functionality.","pos":[690,782],"source":"  The <xref:System.Diagnostics.Tracing.EventListener> class provides additional functionality."}]}]},{"pos":[1561,1769],"content":"Starting with [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Diagnostics.Tracing.EventSource> provides channel support and some of the event source validation rules have been relaxed. This means:","nodes":[{"content":"Starting with <ph id=\"ph1\">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> provides channel support and some of the event source validation rules have been relaxed.","pos":[0,196],"source":"Starting with [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Diagnostics.Tracing.EventSource> provides channel support and some of the event source validation rules have been relaxed."},{"content":"This means:","pos":[197,208]}]},{"pos":[1779,1986],"content":"<xref:System.Diagnostics.Tracing.EventSource> types may now implement interfaces. This enables the use of event source types in advanced logging systems that use interfaces to define a common logging target.","nodes":[{"content":"<xref:System.Diagnostics.Tracing.EventSource> types may now implement interfaces. This enables the use of event source types in advanced logging systems that use interfaces to define a common logging target.","pos":[0,207],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> types may now implement interfaces.","pos":[0,81],"source":"<xref:System.Diagnostics.Tracing.EventSource> types may now implement interfaces."},{"content":"This enables the use of event source types in advanced logging systems that use interfaces to define a common logging target.","pos":[82,207]}]}]},{"pos":[1996,2250],"content":"The concept of a utility event source type has been introduced. This feature enables sharing code across multiple event source types in a project to enable scenarios such as optimized <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overloads.","nodes":[{"content":"The concept of a utility event source type has been introduced. This feature enables sharing code across multiple event source types in a project to enable scenarios such as optimized <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overloads.","pos":[0,254],"nodes":[{"content":"The concept of a utility event source type has been introduced.","pos":[0,63]},{"content":"This feature enables sharing code across multiple event source types in a project to enable scenarios such as optimized <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> overloads.","pos":[64,254],"source":" This feature enables sharing code across multiple event source types in a project to enable scenarios such as optimized <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overloads."}]}]},{"pos":[2257,2572],"content":"For a version of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> class that provides features such as channel support you are targeting <ph id=\"ph2\">[!INCLUDE[net_v451](~/includes/net-v451-md.md)]</ph> or earlier, see <bpt id=\"p1\">[</bpt>Microsoft EventSource Library 1.0.16<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.EventSource)</ept>.","source":"For a version of the <xref:System.Diagnostics.Tracing.EventSource> class that provides features such as channel support you are targeting [!INCLUDE[net_v451](~/includes/net-v451-md.md)] or earlier, see [Microsoft EventSource Library 1.0.16](https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.EventSource)."}],"pos":[5738,8328],"yaml":true,"extradata":"MT"},{"content":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class.","nodes":[{"pos":[0,96],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph> class.","source":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class."}],"pos":[10884,10981],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class and specifies whether to throw an exception when an error occurs in the underlying Windows code.","nodes":[{"pos":[0,192],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph> class and specifies whether to throw an exception when an error occurs in the underlying Windows code.","source":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class and specifies whether to throw an exception when an error occurs in the underlying Windows code."}],"pos":[12671,12864],"yaml":true},{"content":"`true` to throw an exception when an error occurs in the underlying Windows code; otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> to throw an exception when an error occurs in the underlying Windows code; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to throw an exception when an error occurs in the underlying Windows code; otherwise, `false`."}],"pos":[13037,13141],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified configuration settings.","nodes":[{"pos":[0,138],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph> class with the specified configuration settings.","source":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified configuration settings."}],"pos":[14895,15034],"yaml":true},{"content":"Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","nodes":[{"pos":[0,312],"content":"Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","nodes":[{"content":"Specifying <ph id=\"ph1\">`settings`</ph> when the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format.","pos":[0,193],"source":"Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format."},{"content":"In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","pos":[194,312]}]}],"pos":[15045,15358],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","nodes":[{"pos":[0,117],"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","nodes":[{"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","pos":[0,117]}]}],"pos":[15575,15693],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified name.","nodes":[{"pos":[0,120],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph> class with the specified name.","source":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified name."}],"pos":[17095,17216],"yaml":true},{"content":"The name to apply to the event source. Must not be `null`.","nodes":[{"pos":[0,58],"content":"The name to apply to the event source. Must not be `null`.","nodes":[{"content":"The name to apply to the event source.","pos":[0,38]},{"content":"Must not be <ph id=\"ph1\">`null`</ph>.","pos":[39,58],"source":" Must not be `null`."}]}],"pos":[17371,17430],"yaml":true},{"content":"<code>eventSourceName</code> is `null`.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;eventSourceName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>eventSourceName</code> is `null`."}],"pos":[17604,17644],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> to be used with non-contract events that contains the specified settings and traits.","nodes":[{"pos":[0,178],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph> to be used with non-contract events that contains the specified settings and traits.","source":"Initializes a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> to be used with non-contract events that contains the specified settings and traits."}],"pos":[19187,19366],"yaml":true},{"content":"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs and if not specified in pairs, an exception will occur. You can retrieve a trait by passing the key to the <xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A>, method.  \n  \n Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","nodes":[{"pos":[0,306],"content":"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs and if not specified in pairs, an exception will occur. You can retrieve a trait by passing the key to the <xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A>, method.","nodes":[{"content":"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs and if not specified in pairs, an exception will occur. You can retrieve a trait by passing the key to the <xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A>, method.","pos":[0,306],"nodes":[{"content":"Traits provide additional information for an event and are interpreted by an event listener.","pos":[0,92]},{"content":"Traits are specified as key-value pairs and if not specified in pairs, an exception will occur.","pos":[93,188]},{"content":"You can retrieve a trait by passing the key to the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A&gt;</ph>, method.","pos":[189,306],"source":" You can retrieve a trait by passing the key to the <xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A>, method."}]}]},{"pos":[313,625],"content":"Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","nodes":[{"content":"Specifying <ph id=\"ph1\">`settings`</ph> when the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format.","pos":[0,193],"source":"Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format."},{"content":"In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","pos":[194,312]}]}],"pos":[19377,20007],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","nodes":[{"pos":[0,117],"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","nodes":[{"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","pos":[0,117]}]}],"pos":[20241,20359],"yaml":true},{"content":"The key-value pairs that specify traits for the event source.","nodes":[{"pos":[0,61],"content":"The key-value pairs that specify traits for the event source.","nodes":[{"content":"The key-value pairs that specify traits for the event source.","pos":[0,61]}]}],"pos":[20423,20485],"yaml":true},{"content":"<code>traits</code> is not specified in key-value pairs.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;traits&lt;/code&gt;</ph> is not specified in key-value pairs.","source":"<code>traits</code> is not specified in key-value pairs."}],"pos":[20651,20708],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified name and settings.","nodes":[{"pos":[0,133],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph> class with the specified name and settings.","source":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified name and settings."}],"pos":[22239,22373],"yaml":true},{"content":"Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","nodes":[{"pos":[0,312],"content":"Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","nodes":[{"content":"Specifying <ph id=\"ph1\">`settings`</ph> when the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format.","pos":[0,193],"source":"Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format."},{"content":"In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","pos":[194,312]}]}],"pos":[22384,22697],"yaml":true,"extradata":"MT"},{"content":"The name to apply to the event source. Must not be `null`.","nodes":[{"pos":[0,58],"content":"The name to apply to the event source. Must not be `null`.","nodes":[{"content":"The name to apply to the event source.","pos":[0,38]},{"content":"Must not be <ph id=\"ph1\">`null`</ph>.","pos":[39,58],"source":" Must not be `null`."}]}],"pos":[22907,22966],"yaml":true},{"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","nodes":[{"pos":[0,117],"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","nodes":[{"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","pos":[0,117]}]}],"pos":[23061,23179],"yaml":true},{"content":"<code>eventSourceName</code> is `null`.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;eventSourceName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>eventSourceName</code> is `null`."}],"pos":[23353,23393],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified configuration settings.","nodes":[{"pos":[0,138],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph> class with the specified configuration settings.","source":"Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified configuration settings."}],"pos":[25002,25141],"yaml":true},{"content":"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs and if not specified in pairs, an exception will occur. You can retrieve a trait by passing the key to the <xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A>, method.  \n  \n Specifying `config` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","nodes":[{"pos":[0,306],"content":"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs and if not specified in pairs, an exception will occur. You can retrieve a trait by passing the key to the <xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A>, method.","nodes":[{"content":"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs and if not specified in pairs, an exception will occur. You can retrieve a trait by passing the key to the <xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A>, method.","pos":[0,306],"nodes":[{"content":"Traits provide additional information for an event and are interpreted by an event listener.","pos":[0,92]},{"content":"Traits are specified as key-value pairs and if not specified in pairs, an exception will occur.","pos":[93,188]},{"content":"You can retrieve a trait by passing the key to the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A&gt;</ph>, method.","pos":[189,306],"source":" You can retrieve a trait by passing the key to the <xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A>, method."}]}]},{"pos":[313,623],"content":"Specifying `config` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","nodes":[{"content":"Specifying <ph id=\"ph1\">`config`</ph> when the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format.","pos":[0,191],"source":"Specifying `config` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format."},{"content":"In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.","pos":[192,310]}]}],"pos":[25152,25780],"yaml":true,"extradata":"MT"},{"content":"The name to apply to the event source. Must not be `null`.","nodes":[{"pos":[0,58],"content":"The name to apply to the event source. Must not be `null`.","nodes":[{"content":"The name to apply to the event source.","pos":[0,38]},{"content":"Must not be <ph id=\"ph1\">`null`</ph>.","pos":[39,58],"source":" Must not be `null`."}]}],"pos":[26007,26066],"yaml":true},{"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","nodes":[{"pos":[0,117],"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","nodes":[{"content":"A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.","pos":[0,117]}]}],"pos":[26161,26279],"yaml":true},{"content":"The key-value pairs that specify traits for the event source.","nodes":[{"pos":[0,61],"content":"The key-value pairs that specify traits for the event source.","nodes":[{"content":"The key-value pairs that specify traits for the event source.","pos":[0,61]}]}],"pos":[26343,26405],"yaml":true},{"content":"<code>eventSourceName</code> is `null`.","nodes":[{"pos":[0,39],"content":"<ph id=\"ph1\">&lt;code&gt;eventSourceName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>eventSourceName</code> is `null`."}],"pos":[26579,26619],"yaml":true},{"content":"<code>traits</code> is not specified in key-value pairs.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;traits&lt;/code&gt;</ph> is not specified in key-value pairs.","source":"<code>traits</code> is not specified in key-value pairs."}],"pos":[26713,26770],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Gets any exception that was thrown during the construction of the event source.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,144],"content":"Gets any exception that was thrown during the construction of the event source.","nodes":[{"content":"Gets any exception that was thrown during the construction of the event source.","pos":[0,79]}]}],"pos":[28101,28250],"yaml":true},{"content":"<xref:System.Diagnostics.Tracing.EventSource> constructors do not throw exceptions. Instead, any exception that is thrown is assigned to the <xref:System.Diagnostics.Tracing.EventSource.ConstructionException%2A> property and logged by the <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,316],"content":"<xref:System.Diagnostics.Tracing.EventSource> constructors do not throw exceptions. Instead, any exception that is thrown is assigned to the <xref:System.Diagnostics.Tracing.EventSource.ConstructionException%2A> property and logged by the <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> method.","nodes":[{"content":"<xref:System.Diagnostics.Tracing.EventSource> constructors do not throw exceptions. Instead, any exception that is thrown is assigned to the <xref:System.Diagnostics.Tracing.EventSource.ConstructionException%2A> property and logged by the <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> method.","pos":[0,316],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> constructors do not throw exceptions.","pos":[0,83],"source":"<xref:System.Diagnostics.Tracing.EventSource> constructors do not throw exceptions."},{"content":"Instead, any exception that is thrown is assigned to the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.ConstructionException%2A&gt;</ph> property and logged by the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName&gt;</ph> method.","pos":[84,316],"source":" Instead, any exception that is thrown is assigned to the <xref:System.Diagnostics.Tracing.EventSource.ConstructionException%2A> property and logged by the <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> method."}]}]}],"pos":[28261,28578],"yaml":true,"extradata":"MT"},{"content":"The exception that was thrown during the construction of the event source, or `null` if no exception was thrown.","nodes":[{"pos":[0,112],"content":"The exception that was thrown during the construction of the event source, or <ph id=\"ph1\">`null`</ph> if no exception was thrown.","source":"The exception that was thrown during the construction of the event source, or `null` if no exception was thrown."}],"pos":[28709,28822],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Gets the activity ID of the current thread.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,108],"content":"Gets the activity ID of the current thread.","nodes":[{"content":"Gets the activity ID of the current thread.","pos":[0,43]}]}],"pos":[30388,30501],"yaml":true},{"content":"The activity ID of the current thread.","nodes":[{"pos":[0,38],"content":"The activity ID of the current thread.","nodes":[{"content":"The activity ID of the current thread.","pos":[0,38]}]}],"pos":[30631,30670],"yaml":true},{"content":"Releases all resources used by the current instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class.","nodes":[{"pos":[0,125],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class."}],"pos":[32146,32272],"yaml":true},{"content":"Call `Dispose` when you are finished using the <xref:System.Diagnostics.Tracing.EventSource>. The `Dispose` method leaves the <xref:System.Diagnostics.Tracing.EventSource> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Diagnostics.Tracing.EventSource> so the garbage collector can reclaim the memory that the <xref:System.Diagnostics.Tracing.EventSource> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Diagnostics.Tracing.EventSource>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Diagnostics.Tracing.EventSource> object's `Finalize` method.","nodes":[{"pos":[0,421],"content":"Call `Dispose` when you are finished using the <xref:System.Diagnostics.Tracing.EventSource>. The `Dispose` method leaves the <xref:System.Diagnostics.Tracing.EventSource> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Diagnostics.Tracing.EventSource> so the garbage collector can reclaim the memory that the <xref:System.Diagnostics.Tracing.EventSource> was occupying.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>.","pos":[0,93],"source":"Call `Dispose` when you are finished using the <xref:System.Diagnostics.Tracing.EventSource>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> in an unusable state.","pos":[94,193],"source":" The `Dispose` method leaves the <xref:System.Diagnostics.Tracing.EventSource> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> was occupying.","pos":[194,421],"source":" After calling `Dispose`, you must release all references to the <xref:System.Diagnostics.Tracing.EventSource> so the garbage collector can reclaim the memory that the <xref:System.Diagnostics.Tracing.EventSource> was occupying."}]},{"pos":[428,633],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[641,933],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:System.Diagnostics.Tracing.EventSource>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Diagnostics.Tracing.EventSource> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:System.Diagnostics.Tracing.EventSource>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Diagnostics.Tracing.EventSource> object's `Finalize` method.","pos":[8,290],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>.","pos":[1,115],"source":" Always call `Dispose` before you release your last reference to the <xref:System.Diagnostics.Tracing.EventSource>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[116,282],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Diagnostics.Tracing.EventSource> object's `Finalize` method."}]}]}],"pos":[32283,33224],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class and optionally releases the managed resources.","nodes":[{"pos":[0,157],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph> class and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class and optionally releases the managed resources."}],"pos":[34901,35059],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Diagnostics.Tracing.EventSource> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,249],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[82,187],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[188,249],"source":"`Finalize` invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[256,498],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Diagnostics.Tracing.EventSource> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> references.","pos":[0,172],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Diagnostics.Tracing.EventSource> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[173,242],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[35070,35573],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[35727,35830],"yaml":true},{"content":"Occurs when a command comes from an event listener.","nodes":[{"pos":[0,51],"content":"Occurs when a command comes from an event listener.","nodes":[{"content":"Occurs when a command comes from an event listener.","pos":[0,51]}]}],"pos":[37443,37495],"yaml":true},{"content":"Allows the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> object to attempt to free resources and perform other cleanup operations before the  object is reclaimed by garbage collection.","nodes":[{"pos":[0,198],"content":"Allows the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph> object to attempt to free resources and perform other cleanup operations before the  object is reclaimed by garbage collection.","source":"Allows the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> object to attempt to free resources and perform other cleanup operations before the  object is reclaimed by garbage collection."}],"pos":[38800,38999],"yaml":true},{"content":"Returns a string of the XML manifest that is associated with the current event source.","nodes":[{"pos":[0,86],"content":"Returns a string of the XML manifest that is associated with the current event source.","nodes":[{"content":"Returns a string of the XML manifest that is associated with the current event source.","pos":[0,86]}]}],"pos":[40982,41069],"yaml":true},{"content":"If `flags` specifies `OnlyIfNeededForRegistration` and the `eventSourceType` specified does not require explicit registration, <xref:System.Diagnostics.Tracing.EventSource.GenerateManifest%2A> returns `null`.","nodes":[{"pos":[0,208],"content":"If <ph id=\"ph1\">`flags`</ph> specifies <ph id=\"ph2\">`OnlyIfNeededForRegistration`</ph> and the <ph id=\"ph3\">`eventSourceType`</ph> specified does not require explicit registration, <ph id=\"ph4\">&lt;xref:System.Diagnostics.Tracing.EventSource.GenerateManifest%2A&gt;</ph> returns <ph id=\"ph5\">`null`</ph>.","source":"If `flags` specifies `OnlyIfNeededForRegistration` and the `eventSourceType` specified does not require explicit registration, <xref:System.Diagnostics.Tracing.EventSource.GenerateManifest%2A> returns `null`."}],"pos":[41080,41289],"yaml":true,"extradata":"MT"},{"content":"The type of the event source.","nodes":[{"pos":[0,29],"content":"The type of the event source.","nodes":[{"content":"The type of the event source.","pos":[0,29]}]}],"pos":[41554,41584],"yaml":true},{"content":"The path to the assembly file (.dll) file to include in the [provider](http://msdn.microsoft.com/library/windows/desktop/aa384022\\(v=vs.85\\).aspx) element of the manifest.","nodes":[{"pos":[0,171],"content":"The path to the assembly file (.dll) file to include in the <bpt id=\"p1\">[</bpt>provider<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa384022\\(v=vs.85\\).aspx)</ept> element of the manifest.","source":"The path to the assembly file (.dll) file to include in the [provider](http://msdn.microsoft.com/library/windows/desktop/aa384022\\(v=vs.85\\).aspx) element of the manifest."}],"pos":[41671,41843],"yaml":true},{"content":"A bitwise combination of the enumeration values that specify how the manifest is generated.","nodes":[{"pos":[0,91],"content":"A bitwise combination of the enumeration values that specify how the manifest is generated.","nodes":[{"content":"A bitwise combination of the enumeration values that specify how the manifest is generated.","pos":[0,91]}]}],"pos":[41938,42030],"yaml":true},{"content":"The XML data string or `null`.","nodes":[{"pos":[0,30],"content":"The XML data string or <ph id=\"ph1\">`null`</ph>.","source":"The XML data string or `null`."}],"pos":[42087,42118],"yaml":true},{"content":"Returns a string of the XML manifest that is associated with the current event source.","nodes":[{"pos":[0,86],"content":"Returns a string of the XML manifest that is associated with the current event source.","nodes":[{"content":"Returns a string of the XML manifest that is associated with the current event source.","pos":[0,86]}]}],"pos":[43626,43713],"yaml":true},{"content":"The information about the XML schema for the event manifest, see [Event Manifest Schema](http://go.microsoft.com/fwlink/?LinkId=228077) in the MSDN Library.","nodes":[{"pos":[0,156],"content":"The information about the XML schema for the event manifest, see <bpt id=\"p1\">[</bpt>Event Manifest Schema<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=228077)</ept> in the MSDN Library.","source":"The information about the XML schema for the event manifest, see [Event Manifest Schema](http://go.microsoft.com/fwlink/?LinkId=228077) in the MSDN Library."}],"pos":[43724,43881],"yaml":true,"extradata":"MT"},{"content":"The type of the event source.","nodes":[{"pos":[0,29],"content":"The type of the event source.","nodes":[{"content":"The type of the event source.","pos":[0,29]}]}],"pos":[44091,44121],"yaml":true},{"content":"The path to the assembly file (.dll) to include in the [provider](http://msdn.microsoft.com/library/windows/desktop/aa384022\\(v=vs.85\\).aspx) element of the manifest.","nodes":[{"pos":[0,166],"content":"The path to the assembly file (.dll) to include in the <bpt id=\"p1\">[</bpt>provider<ept id=\"p1\">](http://msdn.microsoft.com/library/windows/desktop/aa384022\\(v=vs.85\\).aspx)</ept> element of the manifest.","source":"The path to the assembly file (.dll) to include in the [provider](http://msdn.microsoft.com/library/windows/desktop/aa384022\\(v=vs.85\\).aspx) element of the manifest."}],"pos":[44208,44375],"yaml":true},{"content":"The XML data string.","nodes":[{"pos":[0,20],"content":"The XML data string.","nodes":[{"content":"The XML data string.","pos":[0,20]}]}],"pos":[44432,44453],"yaml":true},{"content":"Gets the unique identifier for this implementation of the event source.","nodes":[{"pos":[0,71],"content":"Gets the unique identifier for this implementation of the event source.","nodes":[{"content":"Gets the unique identifier for this implementation of the event source.","pos":[0,71]}]}],"pos":[46055,46127],"yaml":true},{"content":"The type of the event source.","nodes":[{"pos":[0,29],"content":"The type of the event source.","nodes":[{"content":"The type of the event source.","pos":[0,29]}]}],"pos":[46286,46316],"yaml":true},{"content":"A unique identifier for this event source type.","nodes":[{"pos":[0,47],"content":"A unique identifier for this event source type.","nodes":[{"content":"A unique identifier for this event source type.","pos":[0,47]}]}],"pos":[46371,46419],"yaml":true},{"content":"Gets the friendly name of the event source.","nodes":[{"pos":[0,43],"content":"Gets the friendly name of the event source.","nodes":[{"content":"Gets the friendly name of the event source.","pos":[0,43]}]}],"pos":[48012,48056],"yaml":true},{"content":"The type of the event source.","nodes":[{"pos":[0,29],"content":"The type of the event source.","nodes":[{"content":"The type of the event source.","pos":[0,29]}]}],"pos":[48217,48247],"yaml":true},{"content":"The friendly name of the event source. The default is the simple name of the class.","nodes":[{"pos":[0,83],"content":"The friendly name of the event source. The default is the simple name of the class.","nodes":[{"content":"The friendly name of the event source. The default is the simple name of the class.","pos":[0,83],"nodes":[{"content":"The friendly name of the event source.","pos":[0,38]},{"content":"The default is the simple name of the class.","pos":[39,83]}]}]}],"pos":[48304,48388],"yaml":true},{"content":"Gets a snapshot of all the event sources for the application domain.","nodes":[{"pos":[0,68],"content":"Gets a snapshot of all the event sources for the application domain.","nodes":[{"content":"Gets a snapshot of all the event sources for the application domain.","pos":[0,68]}]}],"pos":[49948,50017],"yaml":true},{"content":"An enumeration of all the event sources in the application domain.","nodes":[{"pos":[0,66],"content":"An enumeration of all the event sources in the application domain.","nodes":[{"content":"An enumeration of all the event sources in the application domain.","pos":[0,66]}]}],"pos":[50289,50356],"yaml":true},{"content":"Gets the trait value associated with the specified key.","nodes":[{"pos":[0,55],"content":"Gets the trait value associated with the specified key.","nodes":[{"content":"Gets the trait value associated with the specified key.","pos":[0,55]}]}],"pos":[51970,52026],"yaml":true},{"content":"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs when the event source is constructed.","nodes":[{"pos":[0,170],"content":"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs when the event source is constructed.","nodes":[{"content":"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs when the event source is constructed.","pos":[0,170],"nodes":[{"content":"Traits provide additional information for an event and are interpreted by an event listener.","pos":[0,92]},{"content":"Traits are specified as key-value pairs when the event source is constructed.","pos":[93,170]}]}]}],"pos":[52037,52208],"yaml":true,"extradata":"MT"},{"content":"The key of the trait to get.","nodes":[{"pos":[0,28],"content":"The key of the trait to get.","nodes":[{"content":"The key of the trait to get.","pos":[0,28]}]}],"pos":[52343,52372],"yaml":true},{"content":"The trait value associated with the specified key. If the key is not found, returns `null`.","nodes":[{"pos":[0,91],"content":"The trait value associated with the specified key. If the key is not found, returns `null`.","nodes":[{"content":"The trait value associated with the specified key.","pos":[0,50]},{"content":"If the key is not found, returns <ph id=\"ph1\">`null`</ph>.","pos":[51,91],"source":" If the key is not found, returns `null`."}]}],"pos":[52429,52521],"yaml":true},{"content":"The unique identifier for the event source.","nodes":[{"pos":[0,43],"content":"The unique identifier for the event source.","nodes":[{"content":"The unique identifier for the event source.","pos":[0,43]}]}],"pos":[53828,53872],"yaml":true},{"content":"A unique identifier for the event source.","nodes":[{"pos":[0,41],"content":"A unique identifier for the event source.","nodes":[{"content":"A unique identifier for the event source.","pos":[0,41]}]}],"pos":[53976,54018],"yaml":true},{"content":"Determines whether the current event source is enabled.","nodes":[{"pos":[0,55],"content":"Determines whether the current event source is enabled.","nodes":[{"content":"Determines whether the current event source is enabled.","pos":[0,55]}]}],"pos":[55569,55625],"yaml":true},{"content":"`true` if the current event source is enabled; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> if the current event source is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current event source is enabled; otherwise, `false`."}],"pos":[55751,55820],"yaml":true},{"content":"Determines whether the current event source that has the specified level and keyword is enabled.","nodes":[{"pos":[0,96],"content":"Determines whether the current event source that has the specified level and keyword is enabled.","nodes":[{"content":"Determines whether the current event source that has the specified level and keyword is enabled.","pos":[0,96]}]}],"pos":[57691,57788],"yaml":true},{"content":"The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity.","nodes":[{"pos":[0,246],"content":"The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity.","nodes":[{"content":"The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity.","pos":[0,246],"nodes":[{"content":"The result of this method is only an approximation of whether a particular event is active.","pos":[0,91]},{"content":"Use it to avoid expensive computation for logging when logging is disabled.","pos":[93,168]},{"content":"Event sources may have additional filtering that determines their activity.","pos":[171,246]}]}]}],"pos":[57799,58046],"yaml":true,"extradata":"MT"},{"content":"The level of the event source.","nodes":[{"pos":[0,30],"content":"The level of the event source.","nodes":[{"content":"The level of the event source.","pos":[0,30]}]}],"pos":[58290,58321],"yaml":true},{"content":"The keyword of the event source.","nodes":[{"pos":[0,32],"content":"The keyword of the event source.","nodes":[{"content":"The keyword of the event source.","pos":[0,32]}]}],"pos":[58412,58445],"yaml":true},{"content":"`true` if the event source is enabled; otherwise, `false`.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">`true`</ph> if the event source is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the event source is enabled; otherwise, `false`."}],"pos":[58503,58564],"yaml":true},{"content":"Determines whether the current event source is enabled for events with the specified level, keywords and channel.","nodes":[{"pos":[0,113],"content":"Determines whether the current event source is enabled for events with the specified level, keywords and channel.","nodes":[{"content":"Determines whether the current event source is enabled for events with the specified level, keywords and channel.","pos":[0,113]}]}],"pos":[60597,60711],"yaml":true},{"content":"If the","nodes":[{"pos":[0,6],"content":"If the","nodes":[{"content":"If the","pos":[0,6]}]}],"pos":[60722,60729],"yaml":true,"extradata":"MT"},{"content":"The event level to check. An event source will be considered enabled when its level is greater than or equal to <code>level</code>.","nodes":[{"pos":[0,131],"content":"The event level to check. An event source will be considered enabled when its level is greater than or equal to <code>level</code>.","nodes":[{"content":"The event level to check.","pos":[0,25]},{"content":"An event source will be considered enabled when its level is greater than or equal to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">level</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[26,131],"source":" An event source will be considered enabled when its level is greater than or equal to <code>level</code>."}]}],"pos":[61022,61154],"yaml":true},{"content":"The event keywords to check.","nodes":[{"pos":[0,28],"content":"The event keywords to check.","nodes":[{"content":"The event keywords to check.","pos":[0,28]}]}],"pos":[61245,61274],"yaml":true},{"content":"The event channel to check.","nodes":[{"pos":[0,27],"content":"The event channel to check.","nodes":[{"content":"The event channel to check.","pos":[0,27]}]}],"pos":[61363,61391],"yaml":true},{"content":"`true` if the event source is enabled for the specified event level, keywords and channel; otherwise, `false`.  \n  \n The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity..","nodes":[{"pos":[0,110],"content":"<ph id=\"ph1\">`true`</ph> if the event source is enabled for the specified event level, keywords and channel; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the event source is enabled for the specified event level, keywords and channel; otherwise, `false`."},{"pos":[117,364],"content":"The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity..","nodes":[{"content":"The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity..","pos":[0,247],"nodes":[{"content":"The result of this method is only an approximation of whether a particular event is active.","pos":[0,91]},{"content":"Use it to avoid expensive computation for logging when logging is disabled.","pos":[93,168]},{"content":"Event sources may have additional filtering that determines their activity..","pos":[171,247]}]}]}],"pos":[61449,61818],"yaml":true},{"content":"The friendly name of the class that is derived from the event source.","nodes":[{"pos":[0,69],"content":"The friendly name of the class that is derived from the event source.","nodes":[{"content":"The friendly name of the class that is derived from the event source.","pos":[0,69]}]}],"pos":[63126,63196],"yaml":true},{"content":"The friendly name of the derived class.  The default is the simple name of the class.","nodes":[{"pos":[0,85],"content":"The friendly name of the derived class.  The default is the simple name of the class.","nodes":[{"content":"The friendly name of the derived class.  The default is the simple name of the class.","pos":[0,85],"nodes":[{"content":"The friendly name of the derived class.","pos":[0,39]},{"content":"The default is the simple name of the class.","pos":[41,85]}]}]}],"pos":[63304,63390],"yaml":true},{"content":"Called when the current event source is updated by the controller.","nodes":[{"pos":[0,66],"content":"Called when the current event source is updated by the controller.","nodes":[{"content":"Called when the current event source is updated by the controller.","pos":[0,66]}]}],"pos":[65184,65251],"yaml":true},{"content":"The arguments for the event.","nodes":[{"pos":[0,28],"content":"The arguments for the event.","nodes":[{"content":"The arguments for the event.","pos":[0,28]}]}],"pos":[65486,65515],"yaml":true},{"content":"Sends a command to a specified event source.","nodes":[{"pos":[0,44],"content":"Sends a command to a specified event source.","nodes":[{"content":"Sends a command to a specified event source.","pos":[0,44]}]}],"pos":[67691,67736],"yaml":true},{"content":"Calling <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> forwards the command to the <xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A> callback.  What the <xref:System.Diagnostics.Tracing.EventSource> does with the command and its arguments is specific to the event source.  The command and command arguments are passed to the <xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A> callback of the specified event source.   If possible, the current event source should not affect other event listeners' filtering events; however, that may not be possible if the command causes a garbage collection, a system flush, or some other global activity.","nodes":[{"pos":[0,680],"content":"Calling <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> forwards the command to the <xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A> callback.  What the <xref:System.Diagnostics.Tracing.EventSource> does with the command and its arguments is specific to the event source.  The command and command arguments are passed to the <xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A> callback of the specified event source.   If possible, the current event source should not affect other event listeners' filtering events; however, that may not be possible if the command causes a garbage collection, a system flush, or some other global activity.","nodes":[{"content":"Calling <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> forwards the command to the <xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A> callback.  What the <xref:System.Diagnostics.Tracing.EventSource> does with the command and its arguments is specific to the event source.  The command and command arguments are passed to the <xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A> callback of the specified event source.   If possible, the current event source should not affect other event listeners' filtering events; however, that may not be possible if the command causes a garbage collection, a system flush, or some other global activity.","pos":[0,680],"nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A&gt;</ph> forwards the command to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A&gt;</ph> callback.","pos":[0,170],"source":"Calling <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> forwards the command to the <xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A> callback."},{"content":"What the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph> does with the command and its arguments is specific to the event source.","pos":[172,299],"source":"  What the <xref:System.Diagnostics.Tracing.EventSource> does with the command and its arguments is specific to the event source."},{"content":"The command and command arguments are passed to the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A&gt;</ph> callback of the specified event source.","pos":[301,456],"source":"  The command and command arguments are passed to the <xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A> callback of the specified event source."},{"content":"If possible, the current event source should not affect other event listeners' filtering events; however, that may not be possible if the command causes a garbage collection, a system flush, or some other global activity.","pos":[459,680]}]}]}],"pos":[67747,68428],"yaml":true,"extradata":"MT"},{"content":"The event source to send the command to.","nodes":[{"pos":[0,40],"content":"The event source to send the command to.","nodes":[{"content":"The event source to send the command to.","pos":[0,40]}]}],"pos":[68765,68806],"yaml":true},{"content":"The event command to send.","nodes":[{"pos":[0,26],"content":"The event command to send.","nodes":[{"content":"The event command to send.","pos":[0,26]}]}],"pos":[68895,68922],"yaml":true},{"content":"The arguments for the event command.","nodes":[{"pos":[0,36],"content":"The arguments for the event command.","nodes":[{"content":"The arguments for the event command.","pos":[0,36]}]}],"pos":[69048,69085],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Sets the activity ID on the current thread.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,108],"content":"Sets the activity ID on the current thread.","nodes":[{"content":"Sets the activity ID on the current thread.","pos":[0,43]}]}],"pos":[70796,70909],"yaml":true},{"content":"Calling the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%2A> method sets the activity ID on a per-thread basis. All events on the thread will have that activity ID until a new activity is started on the same thread.  \n  \n This method is called only by libraries that manage their own threads.","nodes":[{"pos":[0,242],"content":"Calling the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%2A> method sets the activity ID on a per-thread basis. All events on the thread will have that activity ID until a new activity is started on the same thread.","nodes":[{"content":"Calling the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%2A> method sets the activity ID on a per-thread basis. All events on the thread will have that activity ID until a new activity is started on the same thread.","pos":[0,242],"nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%2A&gt;</ph> method sets the activity ID on a per-thread basis.","pos":[0,138],"source":"Calling the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%2A> method sets the activity ID on a per-thread basis."},{"content":"All events on the thread will have that activity ID until a new activity is started on the same thread.","pos":[139,242]}]}]},{"pos":[249,319],"content":"This method is called only by libraries that manage their own threads.","nodes":[{"content":"This method is called only by libraries that manage their own threads.","pos":[0,70]}]}],"pos":[70920,71244],"yaml":true,"extradata":"MT"},{"content":"The current thread's new activity ID, or <xref href=\"System.Guid.Empty\"></xref> to indicate that work on the current thread is not associated with any activity.","nodes":[{"pos":[0,160],"content":"The current thread's new activity ID, or <ph id=\"ph1\">&lt;xref href=\"System.Guid.Empty\"&gt;&lt;/xref&gt;</ph> to indicate that work on the current thread is not associated with any activity.","source":"The current thread's new activity ID, or <xref href=\"System.Guid.Empty\"></xref> to indicate that work on the current thread is not associated with any activity."}],"pos":[71412,71573],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Sets the activity ID on the current thread, and returns the previous activity ID.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,146],"content":"Sets the activity ID on the current thread, and returns the previous activity ID.","nodes":[{"content":"Sets the activity ID on the current thread, and returns the previous activity ID.","pos":[0,81]}]}],"pos":[73274,73425],"yaml":true},{"content":"You can call the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%28System.Guid%2CSystem.Guid%40%29> method to temporarily overwrite the current thread's activity ID with a new activity ID. You must then restore the previous activity ID by passing the `oldActivityThatWillContinue` argument to the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%28System.Guid%29> method.","nodes":[{"pos":[0,418],"content":"You can call the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%28System.Guid%2CSystem.Guid%40%29> method to temporarily overwrite the current thread's activity ID with a new activity ID. You must then restore the previous activity ID by passing the `oldActivityThatWillContinue` argument to the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%28System.Guid%29> method.","nodes":[{"content":"You can call the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%28System.Guid%2CSystem.Guid%40%29&gt;</ph> method to temporarily overwrite the current thread's activity ID with a new activity ID.","pos":[0,212],"source":"You can call the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%28System.Guid%2CSystem.Guid%40%29> method to temporarily overwrite the current thread's activity ID with a new activity ID."},{"content":"You must then restore the previous activity ID by passing the <ph id=\"ph1\">`oldActivityThatWillContinue`</ph> argument to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%28System.Guid%29&gt;</ph> method.","pos":[213,418],"source":" You must then restore the previous activity ID by passing the `oldActivityThatWillContinue` argument to the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%28System.Guid%29> method."}]}],"pos":[73436,73855],"yaml":true,"extradata":"MT"},{"content":"The current thread's new activity ID, or <xref href=\"System.Guid.Empty\"></xref> to indicate that work on the current thread is not associated with any activity.","nodes":[{"pos":[0,160],"content":"The current thread's new activity ID, or <ph id=\"ph1\">&lt;xref href=\"System.Guid.Empty\"&gt;&lt;/xref&gt;</ph> to indicate that work on the current thread is not associated with any activity.","source":"The current thread's new activity ID, or <xref href=\"System.Guid.Empty\"></xref> to indicate that work on the current thread is not associated with any activity."}],"pos":[74061,74222],"yaml":true},{"content":"When this method returns, contains the previous activity ID on the current thread.","nodes":[{"pos":[0,82],"content":"When this method returns, contains the previous activity ID on the current thread.","nodes":[{"content":"When this method returns, contains the previous activity ID on the current thread.","pos":[0,82]}]}],"pos":[74303,74386],"yaml":true},{"content":"Gets the settings applied to this event source.","nodes":[{"pos":[0,47],"content":"Gets the settings applied to this event source.","nodes":[{"content":"Gets the settings applied to this event source.","pos":[0,47]}]}],"pos":[75867,75915],"yaml":true},{"content":"The settings applied to this event source.","nodes":[{"pos":[0,42],"content":"The settings applied to this event source.","nodes":[{"content":"The settings applied to this event source.","pos":[0,42]}]}],"pos":[76100,76143],"yaml":true},{"content":"Obtains a string representation of the current event source instance.","nodes":[{"pos":[0,69],"content":"Obtains a string representation of the current event source instance.","nodes":[{"content":"Obtains a string representation of the current event source instance.","pos":[0,69]}]}],"pos":[77478,77548],"yaml":true},{"content":"The name and unique identifier that identify the current event source.","nodes":[{"pos":[0,70],"content":"The name and unique identifier that identify the current event source.","nodes":[{"content":"The name and unique identifier that identify the current event source.","pos":[0,70]}]}],"pos":[77683,77754],"yaml":true},{"content":"Writes an event without fields, but with the specified name and default options.","nodes":[{"pos":[0,80],"content":"Writes an event without fields, but with the specified name and default options.","nodes":[{"content":"Writes an event without fields, but with the specified name and default options.","pos":[0,80]}]}],"pos":[79224,79305],"yaml":true},{"content":"The name of the event to write.","nodes":[{"pos":[0,31],"content":"The name of the event to write.","nodes":[{"content":"The name of the event to write.","pos":[0,31]}]}],"pos":[79447,79479],"yaml":true},{"content":"<code>eventName</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;eventName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>eventName</code> is `null`."}],"pos":[79653,79687],"yaml":true},{"content":"Writes an event without fields, but with the specified name and options.","nodes":[{"pos":[0,72],"content":"Writes an event without fields, but with the specified name and options.","nodes":[{"content":"Writes an event without fields, but with the specified name and options.","pos":[0,72]}]}],"pos":[81187,81260],"yaml":true},{"content":"The name of the event to write.","nodes":[{"pos":[0,31],"content":"The name of the event to write.","nodes":[{"content":"The name of the event to write.","pos":[0,31]}]}],"pos":[81457,81489],"yaml":true},{"content":"The options such as level, keywords and operation code for the event.","nodes":[{"pos":[0,69],"content":"The options such as level, keywords and operation code for the event.","nodes":[{"content":"The options such as level, keywords and operation code for the event.","pos":[0,69]}]}],"pos":[81584,81654],"yaml":true},{"content":"<code>eventName</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;eventName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>eventName</code> is `null`."}],"pos":[81828,81862],"yaml":true},{"content":"Writes an event with the specified name and data.","nodes":[{"pos":[0,49],"content":"Writes an event with the specified name and data.","nodes":[{"content":"Writes an event with the specified name and data.","pos":[0,49]}]}],"pos":[83203,83253],"yaml":true},{"content":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.","nodes":[{"pos":[0,299],"content":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.","nodes":[{"content":"If <ph id=\"ph1\">`eventName`</ph> is <ph id=\"ph2\">`null`</ph>, the event name is automatically derived from the type T’s event data (<ph id=\"ph3\">&lt;xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A&gt;</ph>) or determined based on the name of type <ph id=\"ph4\">`T`</ph>.","pos":[0,202],"source":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`."},{"content":"The public instance properties of <ph id=\"ph1\">`data`</ph> will be written recursively to create the event fields.","pos":[203,299],"source":" The public instance properties of `data` will be written recursively to create the event fields."}]}],"pos":[83264,83564],"yaml":true,"extradata":"MT"},{"content":"The name of the event.","nodes":[{"pos":[0,22],"content":"The name of the event.","nodes":[{"content":"The name of the event.","pos":[0,22]}]}],"pos":[83717,83740],"yaml":true},{"content":"The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.","nodes":[{"pos":[0,148],"content":"The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.","nodes":[{"content":"The event data.","pos":[0,15]},{"content":"This type must be an anonymous type or marked with the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"&gt;&lt;/xref&gt;</ph> attribute.","pos":[16,148],"source":" This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute."}]}],"pos":[83788,83937],"yaml":true},{"content":"The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.","nodes":[{"pos":[0,191],"content":"The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.","nodes":[{"content":"The type that defines the event and its associated data.","pos":[0,56]},{"content":"This type must be an anonymous type or marked with the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"&gt;&lt;/xref&gt;</ph> attribute.","pos":[57,191],"source":" This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute."}]}],"pos":[83988,84180],"yaml":true},{"content":"Writes an event with the specified name, event data and options.","nodes":[{"pos":[0,64],"content":"Writes an event with the specified name, event data and options.","nodes":[{"content":"Writes an event with the specified name, event data and options.","pos":[0,64]}]}],"pos":[85797,85862],"yaml":true},{"content":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.","nodes":[{"pos":[0,299],"content":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.","nodes":[{"content":"If <ph id=\"ph1\">`eventName`</ph> is <ph id=\"ph2\">`null`</ph>, the event name is automatically derived from the type T’s event data (<ph id=\"ph3\">&lt;xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A&gt;</ph>) or determined based on the name of type <ph id=\"ph4\">`T`</ph>.","pos":[0,202],"source":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`."},{"content":"The public instance properties of <ph id=\"ph1\">`data`</ph> will be written recursively to create the event fields.","pos":[203,299],"source":" The public instance properties of `data` will be written recursively to create the event fields."}]}],"pos":[85873,86173],"yaml":true,"extradata":"MT"},{"content":"The name of the event.","nodes":[{"pos":[0,22],"content":"The name of the event.","nodes":[{"content":"The name of the event.","pos":[0,22]}]}],"pos":[86381,86404],"yaml":true},{"content":"The event options.","nodes":[{"pos":[0,18],"content":"The event options.","nodes":[{"content":"The event options.","pos":[0,18]}]}],"pos":[86499,86518],"yaml":true},{"content":"The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.","nodes":[{"pos":[0,148],"content":"The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.","nodes":[{"content":"The event data.","pos":[0,15]},{"content":"This type must be an anonymous type or marked with the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"&gt;&lt;/xref&gt;</ph> attribute.","pos":[16,148],"source":" This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute."}]}],"pos":[86566,86715],"yaml":true},{"content":"The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.","nodes":[{"pos":[0,191],"content":"The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.","nodes":[{"content":"The type that defines the event and its associated data.","pos":[0,56]},{"content":"This type must be an anonymous type or marked with the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"&gt;&lt;/xref&gt;</ph> attribute.","pos":[57,191],"source":" This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute."}]}],"pos":[86766,86958],"yaml":true},{"content":"Writes an event with the specified name, options and event data.","nodes":[{"pos":[0,64],"content":"Writes an event with the specified name, options and event data.","nodes":[{"content":"Writes an event with the specified name, options and event data.","pos":[0,64]}]}],"pos":[88581,88646],"yaml":true},{"content":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.","nodes":[{"pos":[0,299],"content":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.","nodes":[{"content":"If <ph id=\"ph1\">`eventName`</ph> is <ph id=\"ph2\">`null`</ph>, the event name is automatically derived from the type T’s event data (<ph id=\"ph3\">&lt;xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A&gt;</ph>) or determined based on the name of type <ph id=\"ph4\">`T`</ph>.","pos":[0,202],"source":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`."},{"content":"The public instance properties of <ph id=\"ph1\">`data`</ph> will be written recursively to create the event fields.","pos":[203,299],"source":" The public instance properties of `data` will be written recursively to create the event fields."}]}],"pos":[88657,88957],"yaml":true,"extradata":"MT"},{"content":"The name of the event.","nodes":[{"pos":[0,22],"content":"The name of the event.","nodes":[{"content":"The name of the event.","pos":[0,22]}]}],"pos":[89173,89196],"yaml":true},{"content":"The event options.","nodes":[{"pos":[0,18],"content":"The event options.","nodes":[{"content":"The event options.","pos":[0,18]}]}],"pos":[89291,89310],"yaml":true},{"content":"The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.","nodes":[{"pos":[0,148],"content":"The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.","nodes":[{"content":"The event data.","pos":[0,15]},{"content":"This type must be an anonymous type or marked with the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"&gt;&lt;/xref&gt;</ph> attribute.","pos":[16,148],"source":" This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute."}]}],"pos":[89358,89507],"yaml":true},{"content":"The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.","nodes":[{"pos":[0,191],"content":"The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.","nodes":[{"content":"The type that defines the event and its associated data.","pos":[0,56]},{"content":"This type must be an anonymous type or marked with the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"&gt;&lt;/xref&gt;</ph> attribute.","pos":[57,191],"source":" This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute."}]}],"pos":[89558,89750],"yaml":true},{"content":"Writes an event with the specified name, options, related activity and event data.","nodes":[{"pos":[0,82],"content":"Writes an event with the specified name, options, related activity and event data.","nodes":[{"content":"Writes an event with the specified name, options, related activity and event data.","pos":[0,82]}]}],"pos":[91487,91570],"yaml":true},{"content":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.","nodes":[{"pos":[0,299],"content":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.","nodes":[{"content":"If <ph id=\"ph1\">`eventName`</ph> is <ph id=\"ph2\">`null`</ph>, the event name is automatically derived from the type T’s event data (<ph id=\"ph3\">&lt;xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A&gt;</ph>) or determined based on the name of type <ph id=\"ph4\">`T`</ph>.","pos":[0,202],"source":"If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`."},{"content":"The public instance properties of <ph id=\"ph1\">`data`</ph> will be written recursively to create the event fields.","pos":[203,299],"source":" The public instance properties of `data` will be written recursively to create the event fields."}]}],"pos":[91581,91881],"yaml":true,"extradata":"MT"},{"content":"The name of the event.","nodes":[{"pos":[0,22],"content":"The name of the event.","nodes":[{"content":"The name of the event.","pos":[0,22]}]}],"pos":[92146,92169],"yaml":true},{"content":"The event options.","nodes":[{"pos":[0,18],"content":"The event options.","nodes":[{"content":"The event options.","pos":[0,18]}]}],"pos":[92264,92283],"yaml":true},{"content":"The ID of the activity associated with the event.","nodes":[{"pos":[0,49],"content":"The ID of the activity associated with the event.","nodes":[{"content":"The ID of the activity associated with the event.","pos":[0,49]}]}],"pos":[92347,92397],"yaml":true},{"content":"The ID of an associated activity, or <xref href=\"System.Guid.Empty\"></xref> if there is no associated activity.","nodes":[{"pos":[0,111],"content":"The ID of an associated activity, or <ph id=\"ph1\">&lt;xref href=\"System.Guid.Empty\"&gt;&lt;/xref&gt;</ph> if there is no associated activity.","source":"The ID of an associated activity, or <xref href=\"System.Guid.Empty\"></xref> if there is no associated activity."}],"pos":[92468,92580],"yaml":true},{"content":"The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.","nodes":[{"pos":[0,148],"content":"The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.","nodes":[{"content":"The event data.","pos":[0,15]},{"content":"This type must be an anonymous type or marked with the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"&gt;&lt;/xref&gt;</ph> attribute.","pos":[16,148],"source":" This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute."}]}],"pos":[92628,92777],"yaml":true},{"content":"The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.","nodes":[{"pos":[0,191],"content":"The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.","nodes":[{"content":"The type that defines the event and its associated data.","pos":[0,56]},{"content":"This type must be an anonymous type or marked with the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"&gt;&lt;/xref&gt;</ph> attribute.","pos":[57,191],"source":" This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute."}]}],"pos":[92828,93020],"yaml":true},{"content":"Writes an event by using the provided event identifier and string arguments.","nodes":[{"pos":[0,76],"content":"Writes an event by using the provided event identifier and string arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and string arguments.","pos":[0,76]}]}],"pos":[94622,94699],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[94710,95656],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[95837,95902],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[95962,95981],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[96041,96060],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[96120,96139],"yaml":true},{"content":"Writes an event by using the provided event identifier and arguments.","nodes":[{"pos":[0,69],"content":"Writes an event by using the provided event identifier and arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and arguments.","pos":[0,69]}]}],"pos":[97945,98015],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[98026,98972],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[99147,99212],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[99272,99291],"yaml":true},{"content":"A 32 bit integer argument.","nodes":[{"pos":[0,26],"content":"A 32 bit integer argument.","nodes":[{"content":"A 32 bit integer argument.","pos":[0,26]}]}],"pos":[99350,99377],"yaml":true},{"content":"A 32 bit integer argument.","nodes":[{"pos":[0,26],"content":"A 32 bit integer argument.","nodes":[{"content":"A 32 bit integer argument.","pos":[0,26]}]}],"pos":[99436,99463],"yaml":true},{"content":"Writes an event by using the provided event identifier and 64-bit arguments.","nodes":[{"pos":[0,76],"content":"Writes an event by using the provided event identifier and 64-bit arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and 64-bit arguments.","pos":[0,76]}]}],"pos":[101263,101340],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[101351,102297],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[102472,102537],"yaml":true},{"content":"A 64 bit integer argument.","nodes":[{"pos":[0,26],"content":"A 64 bit integer argument.","nodes":[{"content":"A 64 bit integer argument.","pos":[0,26]}]}],"pos":[102596,102623],"yaml":true},{"content":"A 64 bit integer argument.","nodes":[{"pos":[0,26],"content":"A 64 bit integer argument.","nodes":[{"content":"A 64 bit integer argument.","pos":[0,26]}]}],"pos":[102682,102709],"yaml":true},{"content":"A 64 bit integer argument.","nodes":[{"pos":[0,26],"content":"A 64 bit integer argument.","nodes":[{"content":"A 64 bit integer argument.","pos":[0,26]}]}],"pos":[102768,102795],"yaml":true},{"content":"Writes an event by using the provided event identifier and 32-bit integer arguments.","nodes":[{"pos":[0,84],"content":"Writes an event by using the provided event identifier and 32-bit integer arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and 32-bit integer arguments.","pos":[0,84]}]}],"pos":[104595,104680],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[104691,105637],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[105809,105874],"yaml":true},{"content":"An integer argument.","nodes":[{"pos":[0,20],"content":"An integer argument.","nodes":[{"content":"An integer argument.","pos":[0,20]}]}],"pos":[105933,105954],"yaml":true},{"content":"An integer argument.","nodes":[{"pos":[0,20],"content":"An integer argument.","nodes":[{"content":"An integer argument.","pos":[0,20]}]}],"pos":[106013,106034],"yaml":true},{"content":"An integer argument.","nodes":[{"pos":[0,20],"content":"An integer argument.","nodes":[{"content":"An integer argument.","pos":[0,20]}]}],"pos":[106093,106114],"yaml":true},{"content":"Writes an event by using the provided event identifier and string arguments.","nodes":[{"pos":[0,76],"content":"Writes an event by using the provided event identifier and string arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and string arguments.","pos":[0,76]}]}],"pos":[107866,107943],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[107954,108900],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[109068,109133],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[109193,109212],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[109272,109291],"yaml":true},{"content":"Writes an event by using the provided event identifier and arguments.","nodes":[{"pos":[0,69],"content":"Writes an event by using the provided event identifier and arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and arguments.","pos":[0,69]}]}],"pos":[111037,111107],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[111118,112064],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[112230,112295],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[112355,112374],"yaml":true},{"content":"A 64 bit integer argument.","nodes":[{"pos":[0,26],"content":"A 64 bit integer argument.","nodes":[{"content":"A 64 bit integer argument.","pos":[0,26]}]}],"pos":[112433,112460],"yaml":true},{"content":"Writes an event by using the provided event identifier and arguments.","nodes":[{"pos":[0,69],"content":"Writes an event by using the provided event identifier and arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and arguments.","pos":[0,69]}]}],"pos":[114206,114276],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[114287,115233],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[115398,115463],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[115523,115542],"yaml":true},{"content":"A 32 bit integer argument.","nodes":[{"pos":[0,26],"content":"A 32 bit integer argument.","nodes":[{"content":"A 32 bit integer argument.","pos":[0,26]}]}],"pos":[115601,115628],"yaml":true},{"content":"Writes an event by using the provided event identifier and 64-bit integer, and string arguments.","nodes":[{"pos":[0,96],"content":"Writes an event by using the provided event identifier and 64-bit integer, and string arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and 64-bit integer, and string arguments.","pos":[0,96]}]}],"pos":[117374,117471],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(Int64 arg1, string arg2)  \n{  \n base.WriteEvent(2, arg1, arg2);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[117482,118446],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[118612,118677],"yaml":true},{"content":"A 64-bit integer argument.","nodes":[{"pos":[0,26],"content":"A 64-bit integer argument.","nodes":[{"content":"A 64-bit integer argument.","pos":[0,26]}]}],"pos":[118736,118763],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[118823,118842],"yaml":true},{"content":"Writes an event by using the provided event identifier and 64-bit arguments.","nodes":[{"pos":[0,76],"content":"Writes an event by using the provided event identifier and 64-bit arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and 64-bit arguments.","pos":[0,76]}]}],"pos":[120368,120445],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[120456,121402],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[121566,121631],"yaml":true},{"content":"A 64 bit integer argument.","nodes":[{"pos":[0,26],"content":"A 64 bit integer argument.","nodes":[{"content":"A 64 bit integer argument.","pos":[0,26]}]}],"pos":[121690,121717],"yaml":true},{"content":"A 64 bit integer argument.","nodes":[{"pos":[0,26],"content":"A 64 bit integer argument.","nodes":[{"content":"A 64 bit integer argument.","pos":[0,26]}]}],"pos":[121776,121803],"yaml":true},{"content":"Writes an event by using the provided event identifier and 32-bit integer arguments.","nodes":[{"pos":[0,84],"content":"Writes an event by using the provided event identifier and 32-bit integer arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and 32-bit integer arguments.","pos":[0,84]}]}],"pos":[123543,123628],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```csharp  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(int arg1, int arg2, int arg3)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[123639,124608],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[124770,124835],"yaml":true},{"content":"An integer argument.","nodes":[{"pos":[0,20],"content":"An integer argument.","nodes":[{"content":"An integer argument.","pos":[0,20]}]}],"pos":[124894,124915],"yaml":true},{"content":"An integer argument.","nodes":[{"pos":[0,20],"content":"An integer argument.","nodes":[{"content":"An integer argument.","pos":[0,20]}]}],"pos":[124974,124995],"yaml":true},{"content":"Writes an event by using the provided event identifier and 32-bit integer and string arguments.","nodes":[{"pos":[0,95],"content":"Writes an event by using the provided event identifier and 32-bit integer and string arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and 32-bit integer and string arguments.","pos":[0,95]}]}],"pos":[126741,126837],"yaml":true},{"content":"The event identifier. This value should be between 0 and 65535.","nodes":[{"pos":[0,63],"content":"The event identifier. This value should be between 0 and 65535.","nodes":[{"content":"The event identifier. This value should be between 0 and 65535.","pos":[0,63],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[22,63]}]}]}],"pos":[127002,127066],"yaml":true},{"content":"A 32-bit integer argument.","nodes":[{"pos":[0,26],"content":"A 32-bit integer argument.","nodes":[{"content":"A 32-bit integer argument.","pos":[0,26]}]}],"pos":[127125,127152],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[127212,127231],"yaml":true},{"content":"Writes an event by using the provided event identifier and string argument.","nodes":[{"pos":[0,75],"content":"Writes an event by using the provided event identifier and string argument.","nodes":[{"content":"Writes an event by using the provided event identifier and string argument.","pos":[0,75]}]}],"pos":[128703,128779],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[128790,129736],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[130304,130369],"yaml":true},{"content":"A string argument.","nodes":[{"pos":[0,18],"content":"A string argument.","nodes":[{"content":"A string argument.","pos":[0,18]}]}],"pos":[130429,130448],"yaml":true},{"content":"Writes an event by using the provided event identifier and array of arguments.","nodes":[{"pos":[0,78],"content":"Writes an event by using the provided event identifier and array of arguments.","nodes":[{"content":"Writes an event by using the provided event identifier and array of arguments.","pos":[0,78]}]}],"pos":[132146,132225],"yaml":true},{"content":"By default, the compiler calls this overload if the parameters for the call do not match one of the other method overloads. This overload is much slower than the other overloads, because it does the following:  \n  \n1.  It allocates an array to hold the variable argument.  \n  \n2.  It casts each parameter to an object (which causes allocations for primitive types).  \n  \n3.  It assigns these objects to the array.  \n  \n4.  It calls the function, which then determines the type of each argument so it can be serialized for ETW.  \n  \n The high overhead for this overload is not significant when tracing low-volume events, because the method is used only when the provider is enabled. However, for high-volume events, the performance overhead can be significant.  You can avoid using <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName> for high-volume payloads by creating a new, faster  overload with the <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A> method.  \n  \n `eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,209],"content":"By default, the compiler calls this overload if the parameters for the call do not match one of the other method overloads. This overload is much slower than the other overloads, because it does the following:","nodes":[{"content":"By default, the compiler calls this overload if the parameters for the call do not match one of the other method overloads. This overload is much slower than the other overloads, because it does the following:","pos":[0,209],"nodes":[{"content":"By default, the compiler calls this overload if the parameters for the call do not match one of the other method overloads.","pos":[0,123]},{"content":"This overload is much slower than the other overloads, because it does the following:","pos":[124,209]}]}]},{"pos":[219,271],"content":"It allocates an array to hold the variable argument.","nodes":[{"content":"It allocates an array to hold the variable argument.","pos":[0,52]}]},{"pos":[281,365],"content":"It casts each parameter to an object (which causes allocations for primitive types).","nodes":[{"content":"It casts each parameter to an object (which causes allocations for primitive types).","pos":[0,84]}]},{"pos":[375,413],"content":"It assigns these objects to the array.","nodes":[{"content":"It assigns these objects to the array.","pos":[0,38]}]},{"pos":[423,526],"content":"It calls the function, which then determines the type of each argument so it can be serialized for ETW.","nodes":[{"content":"It calls the function, which then determines the type of each argument so it can be serialized for ETW.","pos":[0,103]}]},{"pos":[533,1007],"content":"The high overhead for this overload is not significant when tracing low-volume events, because the method is used only when the provider is enabled. However, for high-volume events, the performance overhead can be significant.  You can avoid using <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName> for high-volume payloads by creating a new, faster  overload with the <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A> method.","nodes":[{"content":"The high overhead for this overload is not significant when tracing low-volume events, because the method is used only when the provider is enabled. However, for high-volume events, the performance overhead can be significant.  You can avoid using <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName> for high-volume payloads by creating a new, faster  overload with the <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A> method.","pos":[0,474],"nodes":[{"content":"The high overhead for this overload is not significant when tracing low-volume events, because the method is used only when the provider is enabled.","pos":[0,148]},{"content":"However, for high-volume events, the performance overhead can be significant.","pos":[149,226]},{"content":"You can avoid using <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName&gt;</ph> for high-volume payloads by creating a new, faster  overload with the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A&gt;</ph> method.","pos":[228,474],"source":"  You can avoid using <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName> for high-volume payloads by creating a new, faster  overload with the <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A> method."}]}]},{"pos":[1014,1428],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[1435,1815],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[132236,134208],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[134365,134430],"yaml":true},{"content":"An array of objects.","nodes":[{"pos":[0,20],"content":"An array of objects.","nodes":[{"content":"An array of objects.","pos":[0,20]}]}],"pos":[134492,134513],"yaml":true},{"content":"Writes an event by using the provided event identifier and 64-bit integer argument.","nodes":[{"pos":[0,83],"content":"Writes an event by using the provided event identifier and 64-bit integer argument.","nodes":[{"content":"Writes an event by using the provided event identifier and 64-bit integer argument.","pos":[0,83]}]}],"pos":[136193,136277],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[136288,137234],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[137387,137452],"yaml":true},{"content":"A 64 bit integer argument.","nodes":[{"pos":[0,26],"content":"A 64 bit integer argument.","nodes":[{"content":"A 64 bit integer argument.","pos":[0,26]}]}],"pos":[137511,137538],"yaml":true},{"content":"Writes an event by using the provided event identifier and 32-bit integer argument.","nodes":[{"pos":[0,83],"content":"Writes an event by using the provided event identifier and 32-bit integer argument.","nodes":[{"content":"Writes an event by using the provided event identifier and 32-bit integer argument.","pos":[0,83]}]}],"pos":[139218,139302],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(int  arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[139313,140257],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[140822,140887],"yaml":true},{"content":"An integer argument.","nodes":[{"pos":[0,20],"content":"An integer argument.","nodes":[{"content":"An integer argument.","pos":[0,20]}]}],"pos":[140946,140967],"yaml":true},{"content":"Writes an event by using the provided event identifier and byte array argument.","nodes":[{"pos":[0,79],"content":"Writes an event by using the provided event identifier and byte array argument.","nodes":[{"content":"Writes an event by using the provided event identifier and byte array argument.","pos":[0,79]}]}],"pos":[142653,142733],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(byte[] arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[142744,143690],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[143845,143910],"yaml":true},{"content":"A byte array argument.","nodes":[{"pos":[0,22],"content":"A byte array argument.","nodes":[{"content":"A byte array argument.","pos":[0,22]}]}],"pos":[143970,143993],"yaml":true},{"content":"Writes an event by using the provided event identifier.","nodes":[{"pos":[0,55],"content":"Writes an event by using the provided event identifier.","nodes":[{"content":"Writes an event by using the provided event identifier.","pos":[0,55]}]}],"pos":[145399,145455],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(string arg1)  \n{  \n base.WriteEvent(2, arg1);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[145466,146412],"yaml":true,"extradata":"MT"},{"content":"The event identifier. This value should be between 0 and 65535.","nodes":[{"pos":[0,63],"content":"The event identifier. This value should be between 0 and 65535.","nodes":[{"content":"The event identifier. This value should be between 0 and 65535.","pos":[0,63],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[22,63]}]}]}],"pos":[146967,147031],"yaml":true},{"content":"Writes the event data using the specified indentifier and 64-bit integer and byte array arguments.","nodes":[{"pos":[0,98],"content":"Writes the event data using the specified indentifier and 64-bit integer and byte array arguments.","nodes":[{"content":"Writes the event data using the specified indentifier and 64-bit integer and byte array arguments.","pos":[0,98]}]}],"pos":[148777,148876],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \n  \n```  \n[Event(2, Level = EventLevel.Informational)]  \npublic void Info1(Int64 arg1, Byte[] arg2)  \n{  \n base.WriteEvent(2, arg1, arg2);  \n}  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,801],"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","nodes":[{"content":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.","pos":[0,380],"nodes":[{"content":"When you implement a method that is identified as an ETW event in an <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource&gt;</ph>-derived class.","pos":[0,129],"source":"When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class."},{"content":"You must call the base class <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> method passing the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A&gt;</ph> and the same arguments as the implemented method similar to the following example.","pos":[130,380],"source":" You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example."}]}]}],"pos":[148887,149851],"yaml":true,"extradata":"MT"},{"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"pos":[0,64],"content":"The event identifier.  This value should be between 0 and 65535.","nodes":[{"content":"The event identifier.  This value should be between 0 and 65535.","pos":[0,64],"nodes":[{"content":"The event identifier.","pos":[0,21]},{"content":"This value should be between 0 and 65535.","pos":[23,64]}]}]}],"pos":[150017,150082],"yaml":true},{"content":"A 64-bit integer argument.","nodes":[{"pos":[0,26],"content":"A 64-bit integer argument.","nodes":[{"content":"A 64-bit integer argument.","pos":[0,26]}]}],"pos":[150141,150168],"yaml":true},{"content":"A byte array argument.","nodes":[{"pos":[0,22],"content":"A byte array argument.","nodes":[{"content":"A byte array argument.","pos":[0,22]}]}],"pos":[150228,150251],"yaml":true},{"content":"Creates a new <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEvent*\"></xref> overload by using the provided event identifier and event data.","nodes":[{"pos":[0,149],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource.WriteEvent*\"&gt;&lt;/xref&gt;</ph> overload by using the provided event identifier and event data.","source":"Creates a new <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEvent*\"></xref> overload by using the provided event identifier and event data."}],"pos":[151963,152113],"yaml":true},{"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \n  \n This protected method  enables users to define new <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overloads that are faster than the provided overloads.   Creating a new overload involves unsafe code.  The basic procedure is to stack-allocate an array of event data descriptors that matches the number of payload items.   For each payload item, set the correct size and value in the event data array.Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A> with the initialized array.  \n  \n The following example shows how to add a <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overload that accepts four arguments. An example would be if you have a logging event that logs a string and 3 integers.  \n  \n```csharp  \n  \n[Event(1)]  \npublic void LogTime(string tag, int hour, int minute, int second)   \n{  \n    WriteEvent(1, tag, hour, minute, second);  \n}  \n  \n```  \n  \n You could do this without calling <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A>, but it would be slower than it needs to be. That is because it uses arrays and reflection to figure out what to do. If you log these at a high rate (> 1000 / sec), it can be worth making a fast helper, as shown in the following example. The method shadows the existing <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A>. Thus the original caller code (LogTime) does not actually change, but the C# compiler will use the more specialized version which will be faster.  \n  \n To compile unsafe code, you must specify the [/unsafe (C# Compiler Options)](~/docs/csharp/language-reference/compiler-options/unsafe-compiler-option.md) compiler option.  \n  \n```csharp  \nclass AnotherEventSource : EventSource {  \n  \n    [NonEvent]  \n    public unsafe void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4)  \n    {  \n  \n        fixed (char* arg1Ptr = arg1)  \n        {  \n            EventData* dataDesc = stackalloc EventData[4];  \n  \n            dataDesc[0].DataPointer = (IntPtr)arg1Ptr;  \n            dataDesc[0].Size = (arg1.Length + 1) * 2; // Size in bytes, including a null terminator.   \n            dataDesc[1].DataPointer = (IntPtr)(&arg2);  \n            dataDesc[1].Size = 4;  \n            dataDesc[2].DataPointer = (IntPtr)(&arg3);  \n            dataDesc[2].Size = 4;  \n            dataDesc[3].DataPointer = (IntPtr)(&arg4);  \n            dataDesc[3].Size = 4;  \n  \n            WriteEventCore(eventId, 4, dataDesc);  \n        }  \n    }  \n}  \n  \n```","nodes":[{"pos":[0,414],"content":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","nodes":[{"content":"<ph id=\"ph1\">`eventid`</ph> should be greater than 0 or less than 65535 or errors can occur in the operation.","pos":[0,91],"source":"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation."},{"content":"If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events.","pos":[92,279]},{"content":"You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.","pos":[280,414]}]},{"pos":[421,930],"content":"This protected method  enables users to define new <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overloads that are faster than the provided overloads.   Creating a new overload involves unsafe code.  The basic procedure is to stack-allocate an array of event data descriptors that matches the number of payload items.   For each payload item, set the correct size and value in the event data array.Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A> with the initialized array.","nodes":[{"content":"This protected method  enables users to define new <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overloads that are faster than the provided overloads.   Creating a new overload involves unsafe code.  The basic procedure is to stack-allocate an array of event data descriptors that matches the number of payload items.   For each payload item, set the correct size and value in the event data array.Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A> with the initialized array.","pos":[0,509],"nodes":[{"content":"This protected method  enables users to define new <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> overloads that are faster than the provided overloads.","pos":[0,165],"source":"This protected method  enables users to define new <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overloads that are faster than the provided overloads."},{"content":"Creating a new overload involves unsafe code.","pos":[168,213]},{"content":"The basic procedure is to stack-allocate an array of event data descriptors that matches the number of payload items.","pos":[215,332]},{"content":"For each payload item, set the correct size and value in the event data array.Call <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A&gt;</ph> with the initialized array.","pos":[335,509],"source":"   For each payload item, set the correct size and value in the event data array.Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A> with the initialized array."}]}]},{"pos":[937,1158],"content":"The following example shows how to add a <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overload that accepts four arguments. An example would be if you have a logging event that logs a string and 3 integers.","nodes":[{"content":"The following example shows how to add a <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overload that accepts four arguments. An example would be if you have a logging event that logs a string and 3 integers.","pos":[0,221],"nodes":[{"content":"The following example shows how to add a <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph> overload that accepts four arguments.","pos":[0,138],"source":"The following example shows how to add a <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overload that accepts four arguments."},{"content":"An example would be if you have a logging event that logs a string and 3 integers.","pos":[139,221]}]}]},{"pos":[1330,1904],"content":"You could do this without calling <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A>, but it would be slower than it needs to be. That is because it uses arrays and reflection to figure out what to do. If you log these at a high rate (> 1000 / sec), it can be worth making a fast helper, as shown in the following example. The method shadows the existing <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A>. Thus the original caller code (LogTime) does not actually change, but the C# compiler will use the more specialized version which will be faster.","nodes":[{"content":"You could do this without calling <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A>, but it would be slower than it needs to be. That is because it uses arrays and reflection to figure out what to do. If you log these at a high rate (> 1000 / sec), it can be worth making a fast helper, as shown in the following example. The method shadows the existing <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A>. Thus the original caller code (LogTime) does not actually change, but the C# compiler will use the more specialized version which will be faster.","pos":[0,574],"nodes":[{"content":"You could do this without calling <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A&gt;</ph>, but it would be slower than it needs to be.","pos":[0,142],"source":"You could do this without calling <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A>, but it would be slower than it needs to be."},{"content":"That is because it uses arrays and reflection to figure out what to do.","pos":[143,214]},{"content":"If you log these at a high rate (&gt; 1000 / sec), it can be worth making a fast helper, as shown in the following example.","pos":[215,335],"source":" If you log these at a high rate (> 1000 / sec), it can be worth making a fast helper, as shown in the following example."},{"content":"The method shadows the existing <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A&gt;</ph>.","pos":[336,428],"source":" The method shadows the existing <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A>."},{"content":"Thus the original caller code (LogTime) does not actually change, but the C# compiler will use the more specialized version which will be faster.","pos":[429,574]}]}]},{"pos":[1911,2081],"content":"To compile unsafe code, you must specify the <bpt id=\"p1\">[</bpt>/unsafe (C# Compiler Options)<ept id=\"p1\">](~/docs/csharp/language-reference/compiler-options/unsafe-compiler-option.md)</ept> compiler option.","source":"To compile unsafe code, you must specify the [/unsafe (C# Compiler Options)](~/docs/csharp/language-reference/compiler-options/unsafe-compiler-option.md) compiler option."}],"pos":[152124,155077],"yaml":true,"extradata":"MT"},{"content":"The event identifier.","nodes":[{"pos":[0,21],"content":"The event identifier.","nodes":[{"content":"The event identifier.","pos":[0,21]}]}],"pos":[155344,155366],"yaml":true},{"content":"The number of event data items.","nodes":[{"pos":[0,31],"content":"The number of event data items.","nodes":[{"content":"The number of event data items.","pos":[0,31]}]}],"pos":[155435,155467],"yaml":true},{"content":"The structure that contains the event data.","nodes":[{"pos":[0,43],"content":"The structure that contains the event data.","nodes":[{"content":"The structure that contains the event data.","pos":[0,43]}]}],"pos":[155563,155607],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Writes an event that indicates that the current activity is related to another activity.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,153],"content":"Writes an event that indicates that the current activity is related to another activity.","nodes":[{"content":"Writes an event that indicates that the current activity is related to another activity.","pos":[0,88]}]}],"pos":[157542,157700],"yaml":true},{"content":"The <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> method logs a transfer event. The activity of the current thread is logged with the event, and this allows two activities to be related by a consumer of events.  \n  \n Your ETW event method calling this function must follow these guidelines:  \n  \n1.  Specify the first parameter as a <xref:System.Guid> named `relatedActivityId`.  \n  \n2.  Specify either <xref:System.Diagnostics.Tracing.EventOpcode.Send> or <xref:System.Diagnostics.Tracing.EventOpcode.Receive> as the <xref:System.Diagnostics.Tracing.EventAttribute.Opcode%2A?displayProperty=fullName> property.  \n  \n3.  Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order.  \n  \n If `args` is not used, it is converted to an empty array for the resulting call to ETW.","nodes":[{"pos":[0,245],"content":"The <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> method logs a transfer event. The activity of the current thread is logged with the event, and this allows two activities to be related by a consumer of events.","nodes":[{"content":"The <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> method logs a transfer event. The activity of the current thread is logged with the event, and this allows two activities to be related by a consumer of events.","pos":[0,245],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A&gt;</ph> method logs a transfer event.","pos":[0,114],"source":"The <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> method logs a transfer event."},{"content":"The activity of the current thread is logged with the event, and this allows two activities to be related by a consumer of events.","pos":[115,245]}]}]},{"pos":[252,325],"content":"Your ETW event method calling this function must follow these guidelines:","nodes":[{"content":"Your ETW event method calling this function must follow these guidelines:","pos":[0,73]}]},{"pos":[335,413],"content":"Specify the first parameter as a <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> named <ph id=\"ph2\">`relatedActivityId`</ph>.","source":"Specify the first parameter as a <xref:System.Guid> named `relatedActivityId`."},{"pos":[423,646],"content":"Specify either <xref:System.Diagnostics.Tracing.EventOpcode.Send> or <xref:System.Diagnostics.Tracing.EventOpcode.Receive> as the <xref:System.Diagnostics.Tracing.EventAttribute.Opcode%2A?displayProperty=fullName> property.","nodes":[{"content":"Specify either <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventOpcode.Send&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventOpcode.Receive&gt;</ph> as the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.Opcode%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,223],"source":"Specify either <xref:System.Diagnostics.Tracing.EventOpcode.Send> or <xref:System.Diagnostics.Tracing.EventOpcode.Receive> as the <xref:System.Diagnostics.Tracing.EventAttribute.Opcode%2A?displayProperty=fullName> property."}]},{"pos":[656,877],"content":"Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order.","nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A&gt;</ph> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order.","pos":[0,221],"source":"Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order."}]},{"pos":[884,971],"content":"If <ph id=\"ph1\">`args`</ph> is not used, it is converted to an empty array for the resulting call to ETW.","source":"If `args` is not used, it is converted to an empty array for the resulting call to ETW."}],"pos":[157711,158695],"yaml":true,"extradata":"MT"},{"content":"An identifier that uniquely identifies this event within the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref>.","nodes":[{"pos":[0,121],"content":"An identifier that uniquely identifies this event within the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph>.","source":"An identifier that uniquely identifies this event within the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref>."}],"pos":[159636,159758],"yaml":true},{"content":"The related activity identifier.","nodes":[{"pos":[0,32],"content":"The related activity identifier.","nodes":[{"content":"The related activity identifier.","pos":[0,32]}]}],"pos":[159829,159862],"yaml":true},{"content":"An array of objects that contain data about the event.","nodes":[{"pos":[0,54],"content":"An array of objects that contain data about the event.","nodes":[{"content":"An array of objects that contain data about the event.","pos":[0,54]}]}],"pos":[159924,159979],"yaml":true},{"content":"[Supported in the .NET Framework 4.5.1 and later versions]  \n  \n Writes an event that indicates that the current activity is related to another activity.","nodes":[{"pos":[0,58],"content":"[Supported in the .NET Framework 4.5.1 and later versions]","nodes":[{"content":"[Supported in the .NET Framework 4.5.1 and later versions]","pos":[0,58]}]},{"pos":[65,153],"content":"Writes an event that indicates that the current activity is related to another activity.","nodes":[{"content":"Writes an event that indicates that the current activity is related to another activity.","pos":[0,88]}]}],"pos":[162030,162188],"yaml":true},{"content":"<xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A> is similar to the <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> method but offers better performance, bevcause it does not have to unbox the `childActivityID` and `data` arguments.  \n  \n Your ETW event method calling this function must follow these guidelines:  \n  \n1.  Specify the first parameter as a <xref:System.Guid> named `relatedActivityId`.  \n  \n2.  Specify either <xref:System.Diagnostics.Tracing.EventOpcode.Send> or <xref:System.Diagnostics.Tracing.EventOpcode.Receive> as the <xref:System.Diagnostics.Tracing.EventAttribute.Opcode%2A?displayProperty=fullName> property.  \n  \n3.  Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order.","nodes":[{"pos":[0,300],"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A&gt;</ph> is similar to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A&gt;</ph> method but offers better performance, bevcause it does not have to unbox the <ph id=\"ph3\">`childActivityID`</ph> and <ph id=\"ph4\">`data`</ph> arguments.","source":"<xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A> is similar to the <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> method but offers better performance, bevcause it does not have to unbox the `childActivityID` and `data` arguments."},{"pos":[307,380],"content":"Your ETW event method calling this function must follow these guidelines:","nodes":[{"content":"Your ETW event method calling this function must follow these guidelines:","pos":[0,73]}]},{"pos":[390,468],"content":"Specify the first parameter as a <ph id=\"ph1\">&lt;xref:System.Guid&gt;</ph> named <ph id=\"ph2\">`relatedActivityId`</ph>.","source":"Specify the first parameter as a <xref:System.Guid> named `relatedActivityId`."},{"pos":[478,701],"content":"Specify either <xref:System.Diagnostics.Tracing.EventOpcode.Send> or <xref:System.Diagnostics.Tracing.EventOpcode.Receive> as the <xref:System.Diagnostics.Tracing.EventAttribute.Opcode%2A?displayProperty=fullName> property.","nodes":[{"content":"Specify either <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventOpcode.Send&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Diagnostics.Tracing.EventOpcode.Receive&gt;</ph> as the <ph id=\"ph3\">&lt;xref:System.Diagnostics.Tracing.EventAttribute.Opcode%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,223],"source":"Specify either <xref:System.Diagnostics.Tracing.EventOpcode.Send> or <xref:System.Diagnostics.Tracing.EventOpcode.Receive> as the <xref:System.Diagnostics.Tracing.EventAttribute.Opcode%2A?displayProperty=fullName> property."}]},{"pos":[711,936],"content":"Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order.","nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A&gt;</ph> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order.","pos":[0,225],"source":"Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order."}]}],"pos":[162199,163146],"yaml":true,"extradata":"MT"},{"content":"An identifier that uniquely identifies this event within the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref>.","nodes":[{"pos":[0,121],"content":"An identifier that uniquely identifies this event within the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Tracing.EventSource\"&gt;&lt;/xref&gt;</ph>.","source":"An identifier that uniquely identifies this event within the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref>."}],"pos":[164377,164499],"yaml":true},{"content":"A pointer to the GUID of the related activity ID.","nodes":[{"pos":[0,49],"content":"A pointer to the GUID of the related activity ID.","nodes":[{"content":"A pointer to the GUID of the related activity ID.","pos":[0,49]}]}],"pos":[164571,164621],"yaml":true},{"content":"The number of items in the <code>data</code> field.","nodes":[{"pos":[0,51],"content":"The number of items in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> field.","source":"The number of items in the <code>data</code> field."}],"pos":[164690,164742],"yaml":true},{"content":"A pointer to the first item in the event data field.","nodes":[{"pos":[0,52],"content":"A pointer to the first item in the event data field.","nodes":[{"content":"A pointer to the first item in the event data field.","pos":[0,52]}]}],"pos":[164838,164891],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Tracing.EventSource\n  commentId: T:System.Diagnostics.Tracing.EventSource\n  id: EventSource\n  children:\n  - System.Diagnostics.Tracing.EventSource.#ctor\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.String)\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)\n  - System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  - System.Diagnostics.Tracing.EventSource.ConstructionException\n  - System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId\n  - System.Diagnostics.Tracing.EventSource.Dispose\n  - System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)\n  - System.Diagnostics.Tracing.EventSource.EventCommandExecuted\n  - System.Diagnostics.Tracing.EventSource.Finalize\n  - System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)\n  - System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)\n  - System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)\n  - System.Diagnostics.Tracing.EventSource.GetName(System.Type)\n  - System.Diagnostics.Tracing.EventSource.GetSources\n  - System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n  - System.Diagnostics.Tracing.EventSource.Guid\n  - System.Diagnostics.Tracing.EventSource.IsEnabled\n  - System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  - System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)\n  - System.Diagnostics.Tracing.EventSource.Name\n  - System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\n  - System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\n  - System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n  - System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)\n  - System.Diagnostics.Tracing.EventSource.Settings\n  - System.Diagnostics.Tracing.EventSource.ToString\n  - System.Diagnostics.Tracing.EventSource.Write(System.String)\n  - System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\n  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)\n  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)\n  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)\n  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\n  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])\n  - System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  - System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n  - System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  langs:\n  - csharp\n  name: EventSource\n  nameWithType: EventSource\n  fullName: System.Diagnostics.Tracing.EventSource\n  type: Class\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Provides the ability to create events for event tracing for Windows (ETW).\n  remarks: \"This class is intended to be inherited by a user class that provides specific events to be used for ETW. The <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName> methods are called to log the events.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.  \\n  \\n The basic functionality of <xref:System.Diagnostics.Tracing.EventSource> is sufficient for most applications.  If you want more control over the ETW manifest that is created, you can apply the <xref:System.Diagnostics.Tracing.EventAttribute> attribute to the methods. For advanced event source applications, it is possible to intercept the commands being sent to the derived event source and change the filtering, or to cause actions (such as dumping a data structure) to be performed by the inheritor.  An event source can be activated with Windows ETW controllers, such as the Logman tool, immediately.  It is also possible to programmatically control and intercept the data dispatcher.  The <xref:System.Diagnostics.Tracing.EventListener> class provides additional functionality.  \\n  \\n Starting with [!INCLUDE[net_v46](~/includes/net-v46-md.md)], <xref:System.Diagnostics.Tracing.EventSource> provides channel support and some of the event source validation rules have been relaxed. This means:  \\n  \\n-   <xref:System.Diagnostics.Tracing.EventSource> types may now implement interfaces. This enables the use of event source types in advanced logging systems that use interfaces to define a common logging target.  \\n  \\n-   The concept of a utility event source type has been introduced. This feature enables sharing code across multiple event source types in a project to enable scenarios such as optimized <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overloads.  \\n  \\n For a version of the <xref:System.Diagnostics.Tracing.EventSource> class that provides features such as channel support you are targeting [!INCLUDE[net_v451](~/includes/net-v451-md.md)] or earlier, see [Microsoft EventSource Library 1.0.16](https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.EventSource).\"\n  example:\n  - \"The following example shows a simple implementation of the <xref:System.Diagnostics.Tracing.EventSource> class.  \\n  \\n [!code-csharp[ETWTraceSmall#1](~/samples/snippets/csharp/VS_Snippets_CLR/etwtracesmall/cs/program.cs#1)]\\n [!code-vb[ETWTraceSmall#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/etwtracesmall/vb/program.vb#1)]  \\n  \\n The following example shows a more complex implementation of the <xref:System.Diagnostics.Tracing.EventSource> class.  \\n  \\n [!code-csharp[ETWTrace#1](~/samples/snippets/csharp/VS_Snippets_CLR/etwtrace/cs/program.cs#1)]\\n [!code-vb[ETWTrace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/etwtrace/vb/program.vb#1)]\"\n  syntax:\n    content: 'public class EventSource : IDisposable'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.#ctor\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: EventSource()\n  nameWithType: EventSource.EventSource()\n  fullName: EventSource.EventSource()\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class.\n  syntax:\n    content: protected EventSource ();\n    parameters: []\n  overload: System.Diagnostics.Tracing.EventSource.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: EventSource(Boolean)\n  nameWithType: EventSource.EventSource(Boolean)\n  fullName: EventSource.EventSource(Boolean)\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class and specifies whether to throw an exception when an error occurs in the underlying Windows code.\n  syntax:\n    content: protected EventSource (bool throwOnEventWriteErrors);\n    parameters:\n    - id: throwOnEventWriteErrors\n      type: System.Boolean\n      description: '`true` to throw an exception when an error occurs in the underlying Windows code; otherwise, `false`.'\n  overload: System.Diagnostics.Tracing.EventSource.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)\n  id: '#ctor(System.Diagnostics.Tracing.EventSourceSettings)'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: EventSource(EventSourceSettings)\n  nameWithType: EventSource.EventSource(EventSourceSettings)\n  fullName: EventSource.EventSource(EventSourceSettings)\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified configuration settings.\n  remarks: Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.\n  syntax:\n    content: protected EventSource (System.Diagnostics.Tracing.EventSourceSettings settings);\n    parameters:\n    - id: settings\n      type: System.Diagnostics.Tracing.EventSourceSettings\n      description: A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.\n  overload: System.Diagnostics.Tracing.EventSource.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: EventSource(String)\n  nameWithType: EventSource.EventSource(String)\n  fullName: EventSource.EventSource(String)\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified name.\n  syntax:\n    content: public EventSource (string eventSourceName);\n    parameters:\n    - id: eventSourceName\n      type: System.String\n      description: The name to apply to the event source. Must not be `null`.\n  overload: System.Diagnostics.Tracing.EventSource.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>eventSourceName</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  id: '#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: EventSource(EventSourceSettings, String[])\n  nameWithType: EventSource.EventSource(EventSourceSettings, String[])\n  fullName: EventSource.EventSource(EventSourceSettings, String[])\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Initializes a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> to be used with non-contract events that contains the specified settings and traits.\n  remarks: \"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs and if not specified in pairs, an exception will occur. You can retrieve a trait by passing the key to the <xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A>, method.  \\n  \\n Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.\"\n  syntax:\n    content: protected EventSource (System.Diagnostics.Tracing.EventSourceSettings settings, string[] traits);\n    parameters:\n    - id: settings\n      type: System.Diagnostics.Tracing.EventSourceSettings\n      description: A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.\n    - id: traits\n      type: System.String[]\n      description: The key-value pairs that specify traits for the event source.\n  overload: System.Diagnostics.Tracing.EventSource.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>traits</code> is not specified in key-value pairs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)\n  id: '#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: EventSource(String, EventSourceSettings)\n  nameWithType: EventSource.EventSource(String, EventSourceSettings)\n  fullName: EventSource.EventSource(String, EventSourceSettings)\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified name and settings.\n  remarks: Specifying `settings` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.\n  syntax:\n    content: public EventSource (string eventSourceName, System.Diagnostics.Tracing.EventSourceSettings config);\n    parameters:\n    - id: eventSourceName\n      type: System.String\n      description: The name to apply to the event source. Must not be `null`.\n    - id: config\n      type: System.Diagnostics.Tracing.EventSourceSettings\n      description: A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.\n  overload: System.Diagnostics.Tracing.EventSource.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>eventSourceName</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  id: '#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])'\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: EventSource(String, EventSourceSettings, String[])\n  nameWithType: EventSource.EventSource(String, EventSourceSettings, String[])\n  fullName: EventSource.EventSource(String, EventSourceSettings, String[])\n  type: Constructor\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class with the specified configuration settings.\n  remarks: \"Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs and if not specified in pairs, an exception will occur. You can retrieve a trait by passing the key to the <xref:System.Diagnostics.Tracing.EventSource.GetTrait%2A>, method.  \\n  \\n Specifying `config` when the <xref:System.Diagnostics.Tracing.EventSource> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.\"\n  syntax:\n    content: public EventSource (string eventSourceName, System.Diagnostics.Tracing.EventSourceSettings config, string[] traits);\n    parameters:\n    - id: eventSourceName\n      type: System.String\n      description: The name to apply to the event source. Must not be `null`.\n    - id: config\n      type: System.Diagnostics.Tracing.EventSourceSettings\n      description: A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.\n    - id: traits\n      type: System.String[]\n      description: The key-value pairs that specify traits for the event source.\n  overload: System.Diagnostics.Tracing.EventSource.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>eventSourceName</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>traits</code> is not specified in key-value pairs.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.ConstructionException\n  commentId: P:System.Diagnostics.Tracing.EventSource.ConstructionException\n  id: ConstructionException\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: ConstructionException\n  nameWithType: EventSource.ConstructionException\n  fullName: EventSource.ConstructionException\n  type: Property\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Gets any exception that was thrown during the construction of the event source.\"\n  remarks: <xref:System.Diagnostics.Tracing.EventSource> constructors do not throw exceptions. Instead, any exception that is thrown is assigned to the <xref:System.Diagnostics.Tracing.EventSource.ConstructionException%2A> property and logged by the <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=fullName> method.\n  syntax:\n    content: public Exception ConstructionException { get; }\n    return:\n      type: System.Exception\n      description: The exception that was thrown during the construction of the event source, or `null` if no exception was thrown.\n  overload: System.Diagnostics.Tracing.EventSource.ConstructionException*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId\n  commentId: P:System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId\n  id: CurrentThreadActivityId\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: CurrentThreadActivityId\n  nameWithType: EventSource.CurrentThreadActivityId\n  fullName: EventSource.CurrentThreadActivityId\n  type: Property\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Gets the activity ID of the current thread.\"\n  syntax:\n    content: public static Guid CurrentThreadActivityId { get; }\n    return:\n      type: System.Guid\n      description: The activity ID of the current thread.\n  overload: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Dispose\n  commentId: M:System.Diagnostics.Tracing.EventSource.Dispose\n  id: Dispose\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: EventSource.Dispose()\n  fullName: EventSource.Dispose()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Diagnostics.Tracing.EventSource>. The `Dispose` method leaves the <xref:System.Diagnostics.Tracing.EventSource> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Diagnostics.Tracing.EventSource> so the garbage collector can reclaim the memory that the <xref:System.Diagnostics.Tracing.EventSource> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Diagnostics.Tracing.EventSource>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Diagnostics.Tracing.EventSource> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.Tracing.EventSource.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: EventSource.Dispose(Boolean)\n  fullName: EventSource.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> class and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Diagnostics.Tracing.EventSource> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Diagnostics.Tracing.EventSource.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.EventCommandExecuted\n  commentId: E:System.Diagnostics.Tracing.EventSource.EventCommandExecuted\n  id: EventCommandExecuted\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: EventCommandExecuted\n  nameWithType: EventSource.EventCommandExecuted\n  fullName: EventSource.EventCommandExecuted\n  type: Event\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Occurs when a command comes from an event listener.\n  syntax:\n    content: public event EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs> EventCommandExecuted;\n    return:\n      type: System.EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.2\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Finalize\n  commentId: M:System.Diagnostics.Tracing.EventSource.Finalize\n  id: Finalize\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: EventSource.Finalize()\n  fullName: EventSource.Finalize()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Allows the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref> object to attempt to free resources and perform other cleanup operations before the  object is reclaimed by garbage collection.\n  syntax:\n    content: ~EventSource ();\n    parameters: []\n  overload: System.Diagnostics.Tracing.EventSource.Finalize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)\n  commentId: M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)\n  id: GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: GenerateManifest(Type, String, EventManifestOptions)\n  nameWithType: EventSource.GenerateManifest(Type, String, EventManifestOptions)\n  fullName: EventSource.GenerateManifest(Type, String, EventManifestOptions)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Returns a string of the XML manifest that is associated with the current event source.\n  remarks: If `flags` specifies `OnlyIfNeededForRegistration` and the `eventSourceType` specified does not require explicit registration, <xref:System.Diagnostics.Tracing.EventSource.GenerateManifest%2A> returns `null`.\n  syntax:\n    content: public static string GenerateManifest (Type eventSourceType, string assemblyPathToIncludeInManifest, System.Diagnostics.Tracing.EventManifestOptions flags);\n    parameters:\n    - id: eventSourceType\n      type: System.Type\n      description: The type of the event source.\n    - id: assemblyPathToIncludeInManifest\n      type: System.String\n      description: The path to the assembly file (.dll) file to include in the [provider](http://msdn.microsoft.com/library/windows/desktop/aa384022\\(v=vs.85\\).aspx) element of the manifest.\n    - id: flags\n      type: System.Diagnostics.Tracing.EventManifestOptions\n      description: A bitwise combination of the enumeration values that specify how the manifest is generated.\n    return:\n      type: System.String\n      description: The XML data string or `null`.\n  overload: System.Diagnostics.Tracing.EventSource.GenerateManifest*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)\n  id: GenerateManifest(System.Type,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: GenerateManifest(Type, String)\n  nameWithType: EventSource.GenerateManifest(Type, String)\n  fullName: EventSource.GenerateManifest(Type, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Returns a string of the XML manifest that is associated with the current event source.\n  remarks: The information about the XML schema for the event manifest, see [Event Manifest Schema](http://go.microsoft.com/fwlink/?LinkId=228077) in the MSDN Library.\n  syntax:\n    content: public static string GenerateManifest (Type eventSourceType, string assemblyPathToIncludeInManifest);\n    parameters:\n    - id: eventSourceType\n      type: System.Type\n      description: The type of the event source.\n    - id: assemblyPathToIncludeInManifest\n      type: System.String\n      description: The path to the assembly file (.dll) to include in the [provider](http://msdn.microsoft.com/library/windows/desktop/aa384022\\(v=vs.85\\).aspx) element of the manifest.\n    return:\n      type: System.String\n      description: The XML data string.\n  overload: System.Diagnostics.Tracing.EventSource.GenerateManifest*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)\n  commentId: M:System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)\n  id: GetGuid(System.Type)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: GetGuid(Type)\n  nameWithType: EventSource.GetGuid(Type)\n  fullName: EventSource.GetGuid(Type)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Gets the unique identifier for this implementation of the event source.\n  syntax:\n    content: public static Guid GetGuid (Type eventSourceType);\n    parameters:\n    - id: eventSourceType\n      type: System.Type\n      description: The type of the event source.\n    return:\n      type: System.Guid\n      description: A unique identifier for this event source type.\n  overload: System.Diagnostics.Tracing.EventSource.GetGuid*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.GetName(System.Type)\n  commentId: M:System.Diagnostics.Tracing.EventSource.GetName(System.Type)\n  id: GetName(System.Type)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: GetName(Type)\n  nameWithType: EventSource.GetName(Type)\n  fullName: EventSource.GetName(Type)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Gets the friendly name of the event source.\n  syntax:\n    content: public static string GetName (Type eventSourceType);\n    parameters:\n    - id: eventSourceType\n      type: System.Type\n      description: The type of the event source.\n    return:\n      type: System.String\n      description: The friendly name of the event source. The default is the simple name of the class.\n  overload: System.Diagnostics.Tracing.EventSource.GetName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.GetSources\n  commentId: M:System.Diagnostics.Tracing.EventSource.GetSources\n  id: GetSources\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: GetSources()\n  nameWithType: EventSource.GetSources()\n  fullName: EventSource.GetSources()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Gets a snapshot of all the event sources for the application domain.\n  syntax:\n    content: public static System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource> GetSources ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}\n      description: An enumeration of all the event sources in the application domain.\n  overload: System.Diagnostics.Tracing.EventSource.GetSources*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n  id: GetTrait(System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: GetTrait(String)\n  nameWithType: EventSource.GetTrait(String)\n  fullName: EventSource.GetTrait(String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Gets the trait value associated with the specified key.\n  remarks: Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs when the event source is constructed.\n  syntax:\n    content: public string GetTrait (string key);\n    parameters:\n    - id: key\n      type: System.String\n      description: The key of the trait to get.\n    return:\n      type: System.String\n      description: The trait value associated with the specified key. If the key is not found, returns `null`.\n  overload: System.Diagnostics.Tracing.EventSource.GetTrait*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Guid\n  commentId: P:System.Diagnostics.Tracing.EventSource.Guid\n  id: Guid\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Guid\n  nameWithType: EventSource.Guid\n  fullName: EventSource.Guid\n  type: Property\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: The unique identifier for the event source.\n  syntax:\n    content: public Guid Guid { get; }\n    return:\n      type: System.Guid\n      description: A unique identifier for the event source.\n  overload: System.Diagnostics.Tracing.EventSource.Guid*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.IsEnabled\n  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled\n  id: IsEnabled\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: IsEnabled()\n  nameWithType: EventSource.IsEnabled()\n  fullName: EventSource.IsEnabled()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Determines whether the current event source is enabled.\n  syntax:\n    content: public bool IsEnabled ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the current event source is enabled; otherwise, `false`.'\n  overload: System.Diagnostics.Tracing.EventSource.IsEnabled*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  id: IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: IsEnabled(EventLevel, EventKeywords)\n  nameWithType: EventSource.IsEnabled(EventLevel, EventKeywords)\n  fullName: EventSource.IsEnabled(EventLevel, EventKeywords)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Determines whether the current event source that has the specified level and keyword is enabled.\n  remarks: The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity.\n  syntax:\n    content: public bool IsEnabled (System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords);\n    parameters:\n    - id: level\n      type: System.Diagnostics.Tracing.EventLevel\n      description: The level of the event source.\n    - id: keywords\n      type: System.Diagnostics.Tracing.EventKeywords\n      description: The keyword of the event source.\n    return:\n      type: System.Boolean\n      description: '`true` if the event source is enabled; otherwise, `false`.'\n  overload: System.Diagnostics.Tracing.EventSource.IsEnabled*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)\n  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)\n  id: IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: IsEnabled(EventLevel, EventKeywords, EventChannel)\n  nameWithType: EventSource.IsEnabled(EventLevel, EventKeywords, EventChannel)\n  fullName: EventSource.IsEnabled(EventLevel, EventKeywords, EventChannel)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Determines whether the current event source is enabled for events with the specified level, keywords and channel.\n  remarks: If the\n  syntax:\n    content: public bool IsEnabled (System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords, System.Diagnostics.Tracing.EventChannel channel);\n    parameters:\n    - id: level\n      type: System.Diagnostics.Tracing.EventLevel\n      description: The event level to check. An event source will be considered enabled when its level is greater than or equal to <code>level</code>.\n    - id: keywords\n      type: System.Diagnostics.Tracing.EventKeywords\n      description: The event keywords to check.\n    - id: channel\n      type: System.Diagnostics.Tracing.EventChannel\n      description: The event channel to check.\n    return:\n      type: System.Boolean\n      description: \"`true` if the event source is enabled for the specified event level, keywords and channel; otherwise, `false`.  \\n  \\n The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity..\"\n  overload: System.Diagnostics.Tracing.EventSource.IsEnabled*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Name\n  commentId: P:System.Diagnostics.Tracing.EventSource.Name\n  id: Name\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Name\n  nameWithType: EventSource.Name\n  fullName: EventSource.Name\n  type: Property\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: The friendly name of the class that is derived from the event source.\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: The friendly name of the derived class.  The default is the simple name of the class.\n  overload: System.Diagnostics.Tracing.EventSource.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\n  commentId: M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\n  id: OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: OnEventCommand(EventCommandEventArgs)\n  nameWithType: EventSource.OnEventCommand(EventCommandEventArgs)\n  fullName: EventSource.OnEventCommand(EventCommandEventArgs)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Called when the current event source is updated by the controller.\n  syntax:\n    content: protected virtual void OnEventCommand (System.Diagnostics.Tracing.EventCommandEventArgs command);\n    parameters:\n    - id: command\n      type: System.Diagnostics.Tracing.EventCommandEventArgs\n      description: The arguments for the event.\n  overload: System.Diagnostics.Tracing.EventSource.OnEventCommand*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\n  commentId: M:System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\n  id: SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: SendCommand(EventSource, EventCommand, IDictionary<String,String>)\n  nameWithType: EventSource.SendCommand(EventSource, EventCommand, IDictionary<String,String>)\n  fullName: EventSource.SendCommand(EventSource, EventCommand, IDictionary<String,String>)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Sends a command to a specified event source.\n  remarks: Calling <xref:System.Diagnostics.Tracing.EventSource.SendCommand%2A> forwards the command to the <xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A> callback.  What the <xref:System.Diagnostics.Tracing.EventSource> does with the command and its arguments is specific to the event source.  The command and command arguments are passed to the <xref:System.Diagnostics.Tracing.EventSource.OnEventCommand%2A> callback of the specified event source.   If possible, the current event source should not affect other event listeners' filtering events; however, that may not be possible if the command causes a garbage collection, a system flush, or some other global activity.\n  syntax:\n    content: public static void SendCommand (System.Diagnostics.Tracing.EventSource eventSource, System.Diagnostics.Tracing.EventCommand command, System.Collections.Generic.IDictionary<string,string> commandArguments);\n    parameters:\n    - id: eventSource\n      type: System.Diagnostics.Tracing.EventSource\n      description: The event source to send the command to.\n    - id: command\n      type: System.Diagnostics.Tracing.EventCommand\n      description: The event command to send.\n    - id: commandArguments\n      type: System.Collections.Generic.IDictionary{System.String,System.String}\n      description: The arguments for the event command.\n  overload: System.Diagnostics.Tracing.EventSource.SendCommand*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n  commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n  id: SetCurrentThreadActivityId(System.Guid)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: SetCurrentThreadActivityId(Guid)\n  nameWithType: EventSource.SetCurrentThreadActivityId(Guid)\n  fullName: EventSource.SetCurrentThreadActivityId(Guid)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Sets the activity ID on the current thread.\"\n  remarks: \"Calling the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%2A> method sets the activity ID on a per-thread basis. All events on the thread will have that activity ID until a new activity is started on the same thread.  \\n  \\n This method is called only by libraries that manage their own threads.\"\n  syntax:\n    content: public static void SetCurrentThreadActivityId (Guid activityId);\n    parameters:\n    - id: activityId\n      type: System.Guid\n      description: The current thread's new activity ID, or <xref href=\"System.Guid.Empty\"></xref> to indicate that work on the current thread is not associated with any activity.\n  overload: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)\n  commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)\n  id: SetCurrentThreadActivityId(System.Guid,System.Guid@)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: SetCurrentThreadActivityId(Guid, Guid)\n  nameWithType: EventSource.SetCurrentThreadActivityId(Guid, Guid)\n  fullName: EventSource.SetCurrentThreadActivityId(Guid, Guid)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Sets the activity ID on the current thread, and returns the previous activity ID.\"\n  remarks: You can call the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%28System.Guid%2CSystem.Guid%40%29> method to temporarily overwrite the current thread's activity ID with a new activity ID. You must then restore the previous activity ID by passing the `oldActivityThatWillContinue` argument to the <xref:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId%28System.Guid%29> method.\n  syntax:\n    content: public static void SetCurrentThreadActivityId (Guid activityId, out Guid oldActivityThatWillContinue);\n    parameters:\n    - id: activityId\n      type: System.Guid\n      description: The current thread's new activity ID, or <xref href=\"System.Guid.Empty\"></xref> to indicate that work on the current thread is not associated with any activity.\n    - id: oldActivityThatWillContinue\n      type: System.Guid\n      description: When this method returns, contains the previous activity ID on the current thread.\n  overload: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Settings\n  commentId: P:System.Diagnostics.Tracing.EventSource.Settings\n  id: Settings\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Settings\n  nameWithType: EventSource.Settings\n  fullName: EventSource.Settings\n  type: Property\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Gets the settings applied to this event source.\n  syntax:\n    content: public System.Diagnostics.Tracing.EventSourceSettings Settings { get; }\n    return:\n      type: System.Diagnostics.Tracing.EventSourceSettings\n      description: The settings applied to this event source.\n  overload: System.Diagnostics.Tracing.EventSource.Settings*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.ToString\n  commentId: M:System.Diagnostics.Tracing.EventSource.ToString\n  id: ToString\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: EventSource.ToString()\n  fullName: EventSource.ToString()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Obtains a string representation of the current event source instance.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The name and unique identifier that identify the current event source.\n  overload: System.Diagnostics.Tracing.EventSource.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Write(System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write(System.String)\n  id: Write(System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Write(String)\n  nameWithType: EventSource.Write(String)\n  fullName: EventSource.Write(String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event without fields, but with the specified name and default options.\n  syntax:\n    content: public void Write (string eventName);\n    parameters:\n    - id: eventName\n      type: System.String\n      description: The name of the event to write.\n  overload: System.Diagnostics.Tracing.EventSource.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>eventName</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\n  id: Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Write(String, EventSourceOptions)\n  nameWithType: EventSource.Write(String, EventSourceOptions)\n  fullName: EventSource.Write(String, EventSourceOptions)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event without fields, but with the specified name and options.\n  syntax:\n    content: public void Write (string eventName, System.Diagnostics.Tracing.EventSourceOptions options);\n    parameters:\n    - id: eventName\n      type: System.String\n      description: The name of the event to write.\n    - id: options\n      type: System.Diagnostics.Tracing.EventSourceOptions\n      description: The options such as level, keywords and operation code for the event.\n  overload: System.Diagnostics.Tracing.EventSource.Write*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>eventName</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)\n  id: Write``1(System.String,``0)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Write<T>(String, T)\n  nameWithType: EventSource.Write<T>(String, T)\n  fullName: EventSource.Write<T>(String, T)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event with the specified name and data.\n  remarks: If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.\n  syntax:\n    content: public void Write<T> (string eventName, T data);\n    parameters:\n    - id: eventName\n      type: System.String\n      description: The name of the event.\n    - id: data\n      type: T\n      description: The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.\n    typeParameters:\n    - id: T\n      description: The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.\n  overload: System.Diagnostics.Tracing.EventSource.Write``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)\n  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Write<T>(String, EventSourceOptions, T)\n  nameWithType: EventSource.Write<T>(String, EventSourceOptions, T)\n  fullName: EventSource.Write<T>(String, EventSourceOptions, T)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event with the specified name, event data and options.\n  remarks: If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.\n  syntax:\n    content: public void Write<T> (string eventName, System.Diagnostics.Tracing.EventSourceOptions options, T data);\n    parameters:\n    - id: eventName\n      type: System.String\n      description: The name of the event.\n    - id: options\n      type: System.Diagnostics.Tracing.EventSourceOptions\n      description: The event options.\n    - id: data\n      type: T\n      description: The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.\n    typeParameters:\n    - id: T\n      description: The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.\n  overload: System.Diagnostics.Tracing.EventSource.Write``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)\n  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Write<T>(String, EventSourceOptions, T)\n  nameWithType: EventSource.Write<T>(String, EventSourceOptions, T)\n  fullName: EventSource.Write<T>(String, EventSourceOptions, T)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event with the specified name, options and event data.\n  remarks: If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.\n  syntax:\n    content: public void Write<T> (string eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, ref T data);\n    parameters:\n    - id: eventName\n      type: System.String\n      description: The name of the event.\n    - id: options\n      type: System.Diagnostics.Tracing.EventSourceOptions\n      description: The event options.\n    - id: data\n      type: T\n      description: The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.\n    typeParameters:\n    - id: T\n      description: The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.\n  overload: System.Diagnostics.Tracing.EventSource.Write``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)\n  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)\n  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: Write<T>(String, EventSourceOptions, Guid, Guid, T)\n  nameWithType: EventSource.Write<T>(String, EventSourceOptions, Guid, Guid, T)\n  fullName: EventSource.Write<T>(String, EventSourceOptions, Guid, Guid, T)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event with the specified name, options, related activity and event data.\n  remarks: If `eventName` is `null`, the event name is automatically derived from the type T’s event data (<xref:System.Diagnostics.Tracing.EventDataAttribute.Name%2A>) or determined based on the name of type `T`. The public instance properties of `data` will be written recursively to create the event fields.\n  syntax:\n    content: public void Write<T> (string eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, ref Guid activityId, ref Guid relatedActivityId, ref T data);\n    parameters:\n    - id: eventName\n      type: System.String\n      description: The name of the event.\n    - id: options\n      type: System.Diagnostics.Tracing.EventSourceOptions\n      description: The event options.\n    - id: activityId\n      type: System.Guid\n      description: The ID of the activity associated with the event.\n    - id: relatedActivityId\n      type: System.Guid\n      description: The ID of an associated activity, or <xref href=\"System.Guid.Empty\"></xref> if there is no associated activity.\n    - id: data\n      type: T\n      description: The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\"></xref> attribute.\n    typeParameters:\n    - id: T\n      description: The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\"></xref> attribute.\n  overload: System.Diagnostics.Tracing.EventSource.Write``1*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)\n  id: WriteEvent(System.Int32,System.String,System.String,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, String, String, String)\n  nameWithType: EventSource.WriteEvent(Int32, String, String, String)\n  fullName: EventSource.WriteEvent(Int32, String, String, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and string arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, string arg1, string arg2, string arg3);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.String\n      description: A string argument.\n    - id: arg2\n      type: System.String\n      description: A string argument.\n    - id: arg3\n      type: System.String\n      description: A string argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)\n  id: WriteEvent(System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, String, Int32, Int32)\n  nameWithType: EventSource.WriteEvent(Int32, String, Int32, Int32)\n  fullName: EventSource.WriteEvent(Int32, String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, string arg1, int arg2, int arg3);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.String\n      description: A string argument.\n    - id: arg2\n      type: System.Int32\n      description: A 32 bit integer argument.\n    - id: arg3\n      type: System.Int32\n      description: A 32 bit integer argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)\n  id: WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Int64, Int64, Int64)\n  nameWithType: EventSource.WriteEvent(Int32, Int64, Int64, Int64)\n  fullName: EventSource.WriteEvent(Int32, Int64, Int64, Int64)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and 64-bit arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, long arg1, long arg2, long arg3);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.Int64\n      description: A 64 bit integer argument.\n    - id: arg2\n      type: System.Int64\n      description: A 64 bit integer argument.\n    - id: arg3\n      type: System.Int64\n      description: A 64 bit integer argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Int32, Int32, Int32)\n  nameWithType: EventSource.WriteEvent(Int32, Int32, Int32, Int32)\n  fullName: EventSource.WriteEvent(Int32, Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and 32-bit integer arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, int arg1, int arg2, int arg3);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.Int32\n      description: An integer argument.\n    - id: arg2\n      type: System.Int32\n      description: An integer argument.\n    - id: arg3\n      type: System.Int32\n      description: An integer argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)\n  id: WriteEvent(System.Int32,System.String,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, String, String)\n  nameWithType: EventSource.WriteEvent(Int32, String, String)\n  fullName: EventSource.WriteEvent(Int32, String, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and string arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, string arg1, string arg2);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.String\n      description: A string argument.\n    - id: arg2\n      type: System.String\n      description: A string argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)\n  id: WriteEvent(System.Int32,System.String,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, String, Int64)\n  nameWithType: EventSource.WriteEvent(Int32, String, Int64)\n  fullName: EventSource.WriteEvent(Int32, String, Int64)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, string arg1, long arg2);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.String\n      description: A string argument.\n    - id: arg2\n      type: System.Int64\n      description: A 64 bit integer argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)\n  id: WriteEvent(System.Int32,System.String,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, String, Int32)\n  nameWithType: EventSource.WriteEvent(Int32, String, Int32)\n  fullName: EventSource.WriteEvent(Int32, String, Int32)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, string arg1, int arg2);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.String\n      description: A string argument.\n    - id: arg2\n      type: System.Int32\n      description: A 32 bit integer argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)\n  id: WriteEvent(System.Int32,System.Int64,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Int64, String)\n  nameWithType: EventSource.WriteEvent(Int32, Int64, String)\n  fullName: EventSource.WriteEvent(Int32, Int64, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and 64-bit integer, and string arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(Int64 arg1, string arg2)  \\n{  \\n base.WriteEvent(2, arg1, arg2);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, long arg1, string arg2);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.Int64\n      description: A 64-bit integer argument.\n    - id: arg2\n      type: System.String\n      description: A string argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)\n  id: WriteEvent(System.Int32,System.Int64,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Int64, Int64)\n  nameWithType: EventSource.WriteEvent(Int32, Int64, Int64)\n  fullName: EventSource.WriteEvent(Int32, Int64, Int64)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and 64-bit arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, long arg1, long arg2);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.Int64\n      description: A 64 bit integer argument.\n    - id: arg2\n      type: System.Int64\n      description: A 64 bit integer argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)\n  id: WriteEvent(System.Int32,System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Int32, Int32)\n  nameWithType: EventSource.WriteEvent(Int32, Int32, Int32)\n  fullName: EventSource.WriteEvent(Int32, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and 32-bit integer arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```csharp  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(int arg1, int arg2, int arg3)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, int arg1, int arg2);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.Int32\n      description: An integer argument.\n    - id: arg2\n      type: System.Int32\n      description: An integer argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)\n  id: WriteEvent(System.Int32,System.Int32,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Int32, String)\n  nameWithType: EventSource.WriteEvent(Int32, Int32, String)\n  fullName: EventSource.WriteEvent(Int32, Int32, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and 32-bit integer and string arguments.\n  syntax:\n    content: protected void WriteEvent (int eventId, int arg1, string arg2);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier. This value should be between 0 and 65535.\n    - id: arg1\n      type: System.Int32\n      description: A 32-bit integer argument.\n    - id: arg2\n      type: System.String\n      description: A string argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)\n  id: WriteEvent(System.Int32,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, String)\n  nameWithType: EventSource.WriteEvent(Int32, String)\n  fullName: EventSource.WriteEvent(Int32, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and string argument.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  example:\n  - \"The following example shows how to use this method overload to write an event. This code example is part of a larger example provided for the <xref:System.Diagnostics.Tracing.EventSource> class.  \\n  \\n [!code-csharp[ETWTrace#5](~/samples/snippets/csharp/VS_Snippets_CLR/etwtrace/cs/program.cs#5)]\\n [!code-vb[ETWTrace#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/etwtrace/vb/program.vb#5)]\"\n  syntax:\n    content: protected void WriteEvent (int eventId, string arg1);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.String\n      description: A string argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])\n  id: WriteEvent(System.Int32,System.Object[])\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Object[])\n  nameWithType: EventSource.WriteEvent(Int32, Object[])\n  fullName: EventSource.WriteEvent(Int32, Object[])\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and array of arguments.\n  remarks: \"By default, the compiler calls this overload if the parameters for the call do not match one of the other method overloads. This overload is much slower than the other overloads, because it does the following:  \\n  \\n1.  It allocates an array to hold the variable argument.  \\n  \\n2.  It casts each parameter to an object (which causes allocations for primitive types).  \\n  \\n3.  It assigns these objects to the array.  \\n  \\n4.  It calls the function, which then determines the type of each argument so it can be serialized for ETW.  \\n  \\n The high overhead for this overload is not significant when tracing low-volume events, because the method is used only when the provider is enabled. However, for high-volume events, the performance overhead can be significant.  You can avoid using <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A?displayProperty=fullName> for high-volume payloads by creating a new, faster  overload with the <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A> method.  \\n  \\n `eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, object[] args);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: args\n      type: System.Object[]\n      description: An array of objects.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)\n  id: WriteEvent(System.Int32,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Int64)\n  nameWithType: EventSource.WriteEvent(Int32, Int64)\n  fullName: EventSource.WriteEvent(Int32, Int64)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and 64-bit integer argument.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, long arg1);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.Int64\n      description: A 64 bit integer argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)\n  id: WriteEvent(System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Int32)\n  nameWithType: EventSource.WriteEvent(Int32, Int32)\n  fullName: EventSource.WriteEvent(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and 32-bit integer argument.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(int  arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  example:\n  - \"The following example shows how to use this method overload to write an event. This code example is part of a larger example provided for the <xref:System.Diagnostics.Tracing.EventSource> class.  \\n  \\n [!code-csharp[ETWTrace#8](~/samples/snippets/csharp/VS_Snippets_CLR/etwtrace/cs/program.cs#8)]\\n [!code-vb[ETWTrace#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/etwtrace/vb/program.vb#8)]\"\n  syntax:\n    content: protected void WriteEvent (int eventId, int arg1);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.Int32\n      description: An integer argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])\n  id: WriteEvent(System.Int32,System.Byte[])\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Byte[])\n  nameWithType: EventSource.WriteEvent(Int32, Byte[])\n  fullName: EventSource.WriteEvent(Int32, Byte[])\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier and byte array argument.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(byte[] arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, byte[] arg1);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.Byte[]\n      description: A byte array argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\n  id: WriteEvent(System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32)\n  nameWithType: EventSource.WriteEvent(Int32)\n  fullName: EventSource.WriteEvent(Int32)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes an event by using the provided event identifier.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(string arg1)  \\n{  \\n base.WriteEvent(2, arg1);  \\n}  \\n```\"\n  example:\n  - \"The following example shows how to use this method overload to write an event. This code example is part of a larger example provided for the <xref:System.Diagnostics.Tracing.EventSource> class.  \\n  \\n [!code-csharp[ETWTrace#5](~/samples/snippets/csharp/VS_Snippets_CLR/etwtrace/cs/program.cs#5)]\\n [!code-vb[ETWTrace#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/etwtrace/vb/program.vb#5)]\"\n  syntax:\n    content: protected void WriteEvent (int eventId);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier. This value should be between 0 and 65535.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])\n  id: WriteEvent(System.Int32,System.Int64,System.Byte[])\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEvent(Int32, Int64, Byte[])\n  nameWithType: EventSource.WriteEvent(Int32, Int64, Byte[])\n  fullName: EventSource.WriteEvent(Int32, Int64, Byte[])\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Writes the event data using the specified indentifier and 64-bit integer and byte array arguments.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n When you implement a method that is identified as an ETW event in an <xref:System.Diagnostics.Tracing.EventSource>-derived class. You must call the base class <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> method passing the <xref:System.Diagnostics.Tracing.EventAttribute.EventId%2A> and the same arguments as the implemented method similar to the following example.  \\n  \\n```  \\n[Event(2, Level = EventLevel.Informational)]  \\npublic void Info1(Int64 arg1, Byte[] arg2)  \\n{  \\n base.WriteEvent(2, arg1, arg2);  \\n}  \\n```\"\n  syntax:\n    content: protected void WriteEvent (int eventId, long arg1, byte[] arg2);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.  This value should be between 0 and 65535.\n    - id: arg1\n      type: System.Int64\n      description: A 64-bit integer argument.\n    - id: arg2\n      type: System.Byte[]\n      description: A byte array argument.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  id: WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEventCore(Int32, Int32, EventSource+EventData*)\n  nameWithType: EventSource.WriteEventCore(Int32, Int32, EventSource+EventData*)\n  fullName: EventSource.WriteEventCore(Int32, Int32, EventSource+EventData*)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: Creates a new <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEvent*\"></xref> overload by using the provided event identifier and event data.\n  remarks: \"`eventid` should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.  \\n  \\n This protected method  enables users to define new <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overloads that are faster than the provided overloads.   Creating a new overload involves unsafe code.  The basic procedure is to stack-allocate an array of event data descriptors that matches the number of payload items.   For each payload item, set the correct size and value in the event data array.Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A> with the initialized array.  \\n  \\n The following example shows how to add a <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A> overload that accepts four arguments. An example would be if you have a logging event that logs a string and 3 integers.  \\n  \\n```csharp  \\n  \\n[Event(1)]  \\npublic void LogTime(string tag, int hour, int minute, int second)   \\n{  \\n    WriteEvent(1, tag, hour, minute, second);  \\n}  \\n  \\n```  \\n  \\n You could do this without calling <xref:System.Diagnostics.Tracing.EventSource.WriteEventCore%2A>, but it would be slower than it needs to be. That is because it uses arrays and reflection to figure out what to do. If you log these at a high rate (> 1000 / sec), it can be worth making a fast helper, as shown in the following example. The method shadows the existing <xref:System.Diagnostics.Tracing.EventSource.WriteEvent%2A>. Thus the original caller code (LogTime) does not actually change, but the C# compiler will use the more specialized version which will be faster.  \\n  \\n To compile unsafe code, you must specify the [/unsafe (C# Compiler Options)](~/docs/csharp/language-reference/compiler-options/unsafe-compiler-option.md) compiler option.  \\n  \\n```csharp  \\nclass AnotherEventSource : EventSource {  \\n  \\n    [NonEvent]  \\n    public unsafe void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4)  \\n    {  \\n  \\n        fixed (char* arg1Ptr = arg1)  \\n        {  \\n            EventData* dataDesc = stackalloc EventData[4];  \\n  \\n            dataDesc[0].DataPointer = (IntPtr)arg1Ptr;  \\n            dataDesc[0].Size = (arg1.Length + 1) * 2; // Size in bytes, including a null terminator.   \\n            dataDesc[1].DataPointer = (IntPtr)(&arg2);  \\n            dataDesc[1].Size = 4;  \\n            dataDesc[2].DataPointer = (IntPtr)(&arg3);  \\n            dataDesc[2].Size = 4;  \\n            dataDesc[3].DataPointer = (IntPtr)(&arg4);  \\n            dataDesc[3].Size = 4;  \\n  \\n            WriteEventCore(eventId, 4, dataDesc);  \\n        }  \\n    }  \\n}  \\n  \\n```\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      protected void WriteEventCore (int eventId, int eventDataCount, System.Diagnostics.Tracing.EventSource.EventData* data);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: The event identifier.\n    - id: eventDataCount\n      type: System.Int32\n      description: The number of event data items.\n    - id: data\n      type: System.Diagnostics.Tracing.EventSource+EventData*\n      description: The structure that contains the event data.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEventCore*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n  id: WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEventWithRelatedActivityId(Int32, Guid, Object[])\n  nameWithType: EventSource.WriteEventWithRelatedActivityId(Int32, Guid, Object[])\n  fullName: EventSource.WriteEventWithRelatedActivityId(Int32, Guid, Object[])\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Writes an event that indicates that the current activity is related to another activity.\"\n  remarks: \"The <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> method logs a transfer event. The activity of the current thread is logged with the event, and this allows two activities to be related by a consumer of events.  \\n  \\n Your ETW event method calling this function must follow these guidelines:  \\n  \\n1.  Specify the first parameter as a <xref:System.Guid> named `relatedActivityId`.  \\n  \\n2.  Specify either <xref:System.Diagnostics.Tracing.EventOpcode.Send> or <xref:System.Diagnostics.Tracing.EventOpcode.Receive> as the <xref:System.Diagnostics.Tracing.EventAttribute.Opcode%2A?displayProperty=fullName> property.  \\n  \\n3.  Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order.  \\n  \\n If `args` is not used, it is converted to an empty array for the resulting call to ETW.\"\n  example:\n  - \"The following code example shows how you might can specify an event source that calls <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A>.  \\n  \\n [!code-csharp[System.Diagnostics.EventSource.WriteEventWithId#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.eventsource.writeeventwithid/cs/program.cs#1)]\\n [!code-vb[System.Diagnostics.EventSource.WriteEventWithId#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.eventsource.writeeventwithid/vb/module1.vb#1)]  \\n[!code-csharp[System.Diagnostics.EventSource.WriteEventWithId#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.eventsource.writeeventwithid/cs/program.cs#2)]\"\n  syntax:\n    content: protected void WriteEventWithRelatedActivityId (int eventId, Guid relatedActivityId, object[] args);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: An identifier that uniquely identifies this event within the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref>.\n    - id: relatedActivityId\n      type: System.Guid\n      description: The related activity identifier.\n    - id: args\n      type: System.Object[]\n      description: An array of objects that contain data about the event.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  id: WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  parent: System.Diagnostics.Tracing.EventSource\n  langs:\n  - csharp\n  name: WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource+EventData*)\n  nameWithType: EventSource.WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource+EventData*)\n  fullName: EventSource.WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource+EventData*)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Tracing\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Tracing\n  summary: \"[Supported in the .NET Framework 4.5.1 and later versions]  \\n  \\n Writes an event that indicates that the current activity is related to another activity.\"\n  remarks: \"<xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A> is similar to the <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId%2A> method but offers better performance, bevcause it does not have to unbox the `childActivityID` and `data` arguments.  \\n  \\n Your ETW event method calling this function must follow these guidelines:  \\n  \\n1.  Specify the first parameter as a <xref:System.Guid> named `relatedActivityId`.  \\n  \\n2.  Specify either <xref:System.Diagnostics.Tracing.EventOpcode.Send> or <xref:System.Diagnostics.Tracing.EventOpcode.Receive> as the <xref:System.Diagnostics.Tracing.EventAttribute.Opcode%2A?displayProperty=fullName> property.  \\n  \\n3.  Call <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order.\"\n  example:\n  - \"The following C# code example shows how to define a method overload that calls <xref:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore%2A>.  \\n  \\n [!code-csharp[System.Diagnostics.EventSource.WriteEventWithId#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.eventsource.writeeventwithid/cs/program.cs#5)]\\n [!code-vb[System.Diagnostics.EventSource.WriteEventWithId#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.eventsource.writeeventwithid/vb/module1.vb#5)]  \\n[!code-csharp[System.Diagnostics.EventSource.WriteEventWithId#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.eventsource.writeeventwithid/cs/program.cs#3)]\\n[!code-vb[System.Diagnostics.EventSource.WriteEventWithId#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.eventsource.writeeventwithid/vb/module1.vb#3)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      protected void WriteEventWithRelatedActivityIdCore (int eventId, Guid* relatedActivityId, int eventDataCount, System.Diagnostics.Tracing.EventSource.EventData* data);\n    parameters:\n    - id: eventId\n      type: System.Int32\n      description: An identifier that uniquely identifies this event within the <xref href=\"System.Diagnostics.Tracing.EventSource\"></xref>.\n    - id: relatedActivityId\n      type: System.Guid*\n      description: A pointer to the GUID of the related activity ID.\n    - id: eventDataCount\n      type: System.Int32\n      description: The number of items in the <code>data</code> field.\n    - id: data\n      type: System.Diagnostics.Tracing.EventSource+EventData*\n      description: A pointer to the first item in the event data field.\n  overload: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Diagnostics.Tracing.EventSource.#ctor\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: EventSource()\n  nameWithType: EventSource.EventSource()\n  fullName: EventSource.EventSource()\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: EventSource(Boolean)\n  nameWithType: EventSource.EventSource(Boolean)\n  fullName: EventSource.EventSource(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: EventSource(EventSourceSettings)\n  nameWithType: EventSource.EventSource(EventSourceSettings)\n  fullName: EventSource.EventSource(EventSourceSettings)\n- uid: System.Diagnostics.Tracing.EventSourceSettings\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventSourceSettings\n  nameWithType: EventSourceSettings\n  fullName: System.Diagnostics.Tracing.EventSourceSettings\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: EventSource(String)\n  nameWithType: EventSource.EventSource(String)\n  fullName: EventSource.EventSource(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: EventSource(EventSourceSettings, String[])\n  nameWithType: EventSource.EventSource(EventSourceSettings, String[])\n  fullName: EventSource.EventSource(EventSourceSettings, String[])\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: EventSource(String, EventSourceSettings)\n  nameWithType: EventSource.EventSource(String, EventSourceSettings)\n  fullName: EventSource.EventSource(String, EventSourceSettings)\n- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: EventSource(String, EventSourceSettings, String[])\n  nameWithType: EventSource.EventSource(String, EventSourceSettings, String[])\n  fullName: EventSource.EventSource(String, EventSourceSettings, String[])\n- uid: System.Diagnostics.Tracing.EventSource.ConstructionException\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: ConstructionException\n  nameWithType: EventSource.ConstructionException\n  fullName: EventSource.ConstructionException\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: CurrentThreadActivityId\n  nameWithType: EventSource.CurrentThreadActivityId\n  fullName: EventSource.CurrentThreadActivityId\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Diagnostics.Tracing.EventSource.Dispose\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Dispose()\n  nameWithType: EventSource.Dispose()\n  fullName: EventSource.Dispose()\n- uid: System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: EventSource.Dispose(Boolean)\n  fullName: EventSource.Dispose(Boolean)\n- uid: System.Diagnostics.Tracing.EventSource.EventCommandExecuted\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: EventCommandExecuted\n  nameWithType: EventSource.EventCommandExecuted\n  fullName: EventSource.EventCommandExecuted\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Diagnostics.Tracing.EventCommandEventArgs\n  name: EventCommandEventArgs\n  nameWithType: EventCommandEventArgs\n  fullName: System.Diagnostics.Tracing.EventCommandEventArgs\n- uid: System.EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<EventCommandEventArgs>\n  nameWithType: EventHandler<EventCommandEventArgs>\n  fullName: System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.Tracing.EventCommandEventArgs\n    name: EventCommandEventArgs\n    nameWithType: EventCommandEventArgs\n    fullName: System.Diagnostics.Tracing.EventCommandEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Tracing.EventSource.Finalize\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Finalize()\n  nameWithType: EventSource.Finalize()\n  fullName: EventSource.Finalize()\n- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GenerateManifest(Type, String, EventManifestOptions)\n  nameWithType: EventSource.GenerateManifest(Type, String, EventManifestOptions)\n  fullName: EventSource.GenerateManifest(Type, String, EventManifestOptions)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Diagnostics.Tracing.EventManifestOptions\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventManifestOptions\n  nameWithType: EventManifestOptions\n  fullName: System.Diagnostics.Tracing.EventManifestOptions\n- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GenerateManifest(Type, String)\n  nameWithType: EventSource.GenerateManifest(Type, String)\n  fullName: EventSource.GenerateManifest(Type, String)\n- uid: System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GetGuid(Type)\n  nameWithType: EventSource.GetGuid(Type)\n  fullName: EventSource.GetGuid(Type)\n- uid: System.Diagnostics.Tracing.EventSource.GetName(System.Type)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GetName(Type)\n  nameWithType: EventSource.GetName(Type)\n  fullName: EventSource.GetName(Type)\n- uid: System.Diagnostics.Tracing.EventSource.GetSources\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GetSources()\n  nameWithType: EventSource.GetSources()\n  fullName: EventSource.GetSources()\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Diagnostics.Tracing.EventSource\n  name: EventSource\n  nameWithType: EventSource\n  fullName: System.Diagnostics.Tracing.EventSource\n- uid: System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<EventSource>\n  nameWithType: IEnumerable<EventSource>\n  fullName: System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.Tracing.EventSource\n    name: EventSource\n    nameWithType: EventSource\n    fullName: System.Diagnostics.Tracing.EventSource\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GetTrait(String)\n  nameWithType: EventSource.GetTrait(String)\n  fullName: EventSource.GetTrait(String)\n- uid: System.Diagnostics.Tracing.EventSource.Guid\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Guid\n  nameWithType: EventSource.Guid\n  fullName: EventSource.Guid\n- uid: System.Diagnostics.Tracing.EventSource.IsEnabled\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: IsEnabled()\n  nameWithType: EventSource.IsEnabled()\n  fullName: EventSource.IsEnabled()\n- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: IsEnabled(EventLevel, EventKeywords)\n  nameWithType: EventSource.IsEnabled(EventLevel, EventKeywords)\n  fullName: EventSource.IsEnabled(EventLevel, EventKeywords)\n- uid: System.Diagnostics.Tracing.EventLevel\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventLevel\n  nameWithType: EventLevel\n  fullName: System.Diagnostics.Tracing.EventLevel\n- uid: System.Diagnostics.Tracing.EventKeywords\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventKeywords\n  nameWithType: EventKeywords\n  fullName: System.Diagnostics.Tracing.EventKeywords\n- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: IsEnabled(EventLevel, EventKeywords, EventChannel)\n  nameWithType: EventSource.IsEnabled(EventLevel, EventKeywords, EventChannel)\n  fullName: EventSource.IsEnabled(EventLevel, EventKeywords, EventChannel)\n- uid: System.Diagnostics.Tracing.EventChannel\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventChannel\n  nameWithType: EventChannel\n  fullName: System.Diagnostics.Tracing.EventChannel\n- uid: System.Diagnostics.Tracing.EventSource.Name\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Name\n  nameWithType: EventSource.Name\n  fullName: EventSource.Name\n- uid: System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: OnEventCommand(EventCommandEventArgs)\n  nameWithType: EventSource.OnEventCommand(EventCommandEventArgs)\n  fullName: EventSource.OnEventCommand(EventCommandEventArgs)\n- uid: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: SendCommand(EventSource, EventCommand, IDictionary<String,String>)\n  nameWithType: EventSource.SendCommand(EventSource, EventCommand, IDictionary<String,String>)\n  fullName: EventSource.SendCommand(EventSource, EventCommand, IDictionary<String,String>)\n- uid: System.Diagnostics.Tracing.EventCommand\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventCommand\n  nameWithType: EventCommand\n  fullName: System.Diagnostics.Tracing.EventCommand\n- uid: System.Collections.Generic.IDictionary`2\n  name: IDictionary<TKey,TValue>\n  nameWithType: IDictionary<TKey,TValue>\n  fullName: System.Collections.Generic.IDictionary<TKey,TValue>\n- uid: System.Collections.Generic.IDictionary{System.String,System.String}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IDictionary<String,String>\n  nameWithType: IDictionary<String,String>\n  fullName: System.Collections.Generic.IDictionary<System.String,System.String>\n  spec.csharp:\n  - uid: System.Collections.Generic.IDictionary`2\n    name: IDictionary\n    nameWithType: IDictionary\n    fullName: System.Collections.Generic.IDictionary\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: SetCurrentThreadActivityId(Guid)\n  nameWithType: EventSource.SetCurrentThreadActivityId(Guid)\n  fullName: EventSource.SetCurrentThreadActivityId(Guid)\n- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: SetCurrentThreadActivityId(Guid, Guid)\n  nameWithType: EventSource.SetCurrentThreadActivityId(Guid, Guid)\n  fullName: EventSource.SetCurrentThreadActivityId(Guid, Guid)\n- uid: System.Diagnostics.Tracing.EventSource.Settings\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Settings\n  nameWithType: EventSource.Settings\n  fullName: EventSource.Settings\n- uid: System.Diagnostics.Tracing.EventSource.ToString\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: ToString()\n  nameWithType: EventSource.ToString()\n  fullName: EventSource.ToString()\n- uid: System.Diagnostics.Tracing.EventSource.Write(System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Write(String)\n  nameWithType: EventSource.Write(String)\n  fullName: EventSource.Write(String)\n- uid: System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Write(String, EventSourceOptions)\n  nameWithType: EventSource.Write(String, EventSourceOptions)\n  fullName: EventSource.Write(String, EventSourceOptions)\n- uid: System.Diagnostics.Tracing.EventSourceOptions\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventSourceOptions\n  nameWithType: EventSourceOptions\n  fullName: System.Diagnostics.Tracing.EventSourceOptions\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Write<T>(String, T)\n  nameWithType: EventSource.Write<T>(String, T)\n  fullName: EventSource.Write<T>(String, T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Write<T>(String, EventSourceOptions, T)\n  nameWithType: EventSource.Write<T>(String, EventSourceOptions, T)\n  fullName: EventSource.Write<T>(String, EventSourceOptions, T)\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Write<T>(String, EventSourceOptions, T)\n  nameWithType: EventSource.Write<T>(String, EventSourceOptions, T)\n  fullName: EventSource.Write<T>(String, EventSourceOptions, T)\n- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Write<T>(String, EventSourceOptions, Guid, Guid, T)\n  nameWithType: EventSource.Write<T>(String, EventSourceOptions, Guid, Guid, T)\n  fullName: EventSource.Write<T>(String, EventSourceOptions, Guid, Guid, T)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, String, String, String)\n  nameWithType: EventSource.WriteEvent(Int32, String, String, String)\n  fullName: EventSource.WriteEvent(Int32, String, String, String)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, String, Int32, Int32)\n  nameWithType: EventSource.WriteEvent(Int32, String, Int32, Int32)\n  fullName: EventSource.WriteEvent(Int32, String, Int32, Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Int64, Int64, Int64)\n  nameWithType: EventSource.WriteEvent(Int32, Int64, Int64, Int64)\n  fullName: EventSource.WriteEvent(Int32, Int64, Int64, Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Int32, Int32, Int32)\n  nameWithType: EventSource.WriteEvent(Int32, Int32, Int32, Int32)\n  fullName: EventSource.WriteEvent(Int32, Int32, Int32, Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, String, String)\n  nameWithType: EventSource.WriteEvent(Int32, String, String)\n  fullName: EventSource.WriteEvent(Int32, String, String)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, String, Int64)\n  nameWithType: EventSource.WriteEvent(Int32, String, Int64)\n  fullName: EventSource.WriteEvent(Int32, String, Int64)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, String, Int32)\n  nameWithType: EventSource.WriteEvent(Int32, String, Int32)\n  fullName: EventSource.WriteEvent(Int32, String, Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Int64, String)\n  nameWithType: EventSource.WriteEvent(Int32, Int64, String)\n  fullName: EventSource.WriteEvent(Int32, Int64, String)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Int64, Int64)\n  nameWithType: EventSource.WriteEvent(Int32, Int64, Int64)\n  fullName: EventSource.WriteEvent(Int32, Int64, Int64)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Int32, Int32)\n  nameWithType: EventSource.WriteEvent(Int32, Int32, Int32)\n  fullName: EventSource.WriteEvent(Int32, Int32, Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Int32, String)\n  nameWithType: EventSource.WriteEvent(Int32, Int32, String)\n  fullName: EventSource.WriteEvent(Int32, Int32, String)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, String)\n  nameWithType: EventSource.WriteEvent(Int32, String)\n  fullName: EventSource.WriteEvent(Int32, String)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Object[])\n  nameWithType: EventSource.WriteEvent(Int32, Object[])\n  fullName: EventSource.WriteEvent(Int32, Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Int64)\n  nameWithType: EventSource.WriteEvent(Int32, Int64)\n  fullName: EventSource.WriteEvent(Int32, Int64)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Int32)\n  nameWithType: EventSource.WriteEvent(Int32, Int32)\n  fullName: EventSource.WriteEvent(Int32, Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Byte[])\n  nameWithType: EventSource.WriteEvent(Int32, Byte[])\n  fullName: EventSource.WriteEvent(Int32, Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32)\n  nameWithType: EventSource.WriteEvent(Int32)\n  fullName: EventSource.WriteEvent(Int32)\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent(Int32, Int64, Byte[])\n  nameWithType: EventSource.WriteEvent(Int32, Int64, Byte[])\n  fullName: EventSource.WriteEvent(Int32, Int64, Byte[])\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEventCore(Int32, Int32, EventSource+EventData*)\n  nameWithType: EventSource.WriteEventCore(Int32, Int32, EventSource+EventData*)\n  fullName: EventSource.WriteEventCore(Int32, Int32, EventSource+EventData*)\n- uid: System.Diagnostics.Tracing.EventSource*\n  parent: System.Diagnostics.Tracing\n  isExternal: false\n  name: EventSource*\n  nameWithType: EventSource*\n  fullName: System.Diagnostics.Tracing.EventSource+EventData*\n  spec.csharp:\n  - uid: System.Diagnostics.Tracing.EventSource\n    name: EventSource\n    nameWithType: EventSource\n    fullName: System.Diagnostics.Tracing.EventSource\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEventWithRelatedActivityId(Int32, Guid, Object[])\n  nameWithType: EventSource.WriteEventWithRelatedActivityId(Int32, Guid, Object[])\n  fullName: EventSource.WriteEventWithRelatedActivityId(Int32, Guid, Object[])\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource+EventData*)\n  nameWithType: EventSource.WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource+EventData*)\n  fullName: EventSource.WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource+EventData*)\n- uid: System.Guid*\n  parent: System\n  isExternal: false\n  name: Guid*\n  nameWithType: Guid*\n  fullName: System.Guid*\n  spec.csharp:\n  - uid: System.Guid\n    name: Guid\n    nameWithType: Guid\n    fullName: System.Guid\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Diagnostics.Tracing.EventSource.WriteEvent*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEvent\n  nameWithType: EventSource.WriteEvent\n  fullName: EventSource.WriteEvent\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.#ctor*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: EventSource\n  nameWithType: EventSource.EventSource\n  fullName: EventSource.EventSource\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.ConstructionException*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: ConstructionException\n  nameWithType: EventSource.ConstructionException\n  fullName: EventSource.ConstructionException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: CurrentThreadActivityId\n  nameWithType: EventSource.CurrentThreadActivityId\n  fullName: EventSource.CurrentThreadActivityId\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.Dispose*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Dispose\n  nameWithType: EventSource.Dispose\n  fullName: EventSource.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.Finalize*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Finalize\n  nameWithType: EventSource.Finalize\n  fullName: EventSource.Finalize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GenerateManifest\n  nameWithType: EventSource.GenerateManifest\n  fullName: EventSource.GenerateManifest\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netstandard-1.1\n  - netstandard-1.2\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.GetGuid*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GetGuid\n  nameWithType: EventSource.GetGuid\n  fullName: EventSource.GetGuid\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.GetName*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GetName\n  nameWithType: EventSource.GetName\n  fullName: EventSource.GetName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.GetSources*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GetSources\n  nameWithType: EventSource.GetSources\n  fullName: EventSource.GetSources\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.GetTrait*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: GetTrait\n  nameWithType: EventSource.GetTrait\n  fullName: EventSource.GetTrait\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.Guid*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Guid\n  nameWithType: EventSource.Guid\n  fullName: EventSource.Guid\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.IsEnabled*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: IsEnabled\n  nameWithType: EventSource.IsEnabled\n  fullName: EventSource.IsEnabled\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.Name*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Name\n  nameWithType: EventSource.Name\n  fullName: EventSource.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.OnEventCommand*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: OnEventCommand\n  nameWithType: EventSource.OnEventCommand\n  fullName: EventSource.OnEventCommand\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.SendCommand*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: SendCommand\n  nameWithType: EventSource.SendCommand\n  fullName: EventSource.SendCommand\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: SetCurrentThreadActivityId\n  nameWithType: EventSource.SetCurrentThreadActivityId\n  fullName: EventSource.SetCurrentThreadActivityId\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.Settings*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Settings\n  nameWithType: EventSource.Settings\n  fullName: EventSource.Settings\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.ToString*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: ToString\n  nameWithType: EventSource.ToString\n  fullName: EventSource.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.Write*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Write\n  nameWithType: EventSource.Write\n  fullName: EventSource.Write\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.Write``1*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: Write<T>\n  nameWithType: EventSource.Write<T>\n  fullName: EventSource.Write<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventCore*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEventCore\n  nameWithType: EventSource.WriteEventCore\n  fullName: EventSource.WriteEventCore\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEventWithRelatedActivityId\n  nameWithType: EventSource.WriteEventWithRelatedActivityId\n  fullName: EventSource.WriteEventWithRelatedActivityId\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore*\n  parent: System.Diagnostics.Tracing.EventSource\n  isExternal: false\n  name: WriteEventWithRelatedActivityIdCore\n  nameWithType: EventSource.WriteEventWithRelatedActivityIdCore\n  fullName: EventSource.WriteEventWithRelatedActivityIdCore\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Tracing/EventSource.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}