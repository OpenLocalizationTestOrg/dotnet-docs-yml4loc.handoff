{"nodes":[{"content":"Wraps an exception that does not derive from the <xref href=\"System.Exception\"></xref> class. This class cannot be inherited.","nodes":[{"pos":[0,125],"content":"Wraps an exception that does not derive from the <xref href=\"System.Exception\"></xref> class. This class cannot be inherited.","nodes":[{"content":"Wraps an exception that does not derive from the <ph id=\"ph1\">&lt;xref href=\"System.Exception\"&gt;&lt;/xref&gt;</ph> class.","pos":[0,93],"source":"Wraps an exception that does not derive from the <xref href=\"System.Exception\"></xref> class."},{"content":"This class cannot be inherited.","pos":[94,125]}]}],"pos":[749,875],"yaml":true},{"content":"Some languages, such as C++, allow you to throw exceptions of any managed type.  Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref:System.Exception> class.  To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref:System.Exception> in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.  \n  \n You can use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.  Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.  \n  \n Note that the runtime still wraps exceptions even if you use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify that you do not want them wrapped.  In this case, exceptions are unwrapped only inside catch blocks or exception filters.","nodes":[{"pos":[0,441],"content":"Some languages, such as C++, allow you to throw exceptions of any managed type.  Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref:System.Exception> class.  To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref:System.Exception> in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.","nodes":[{"content":"Some languages, such as C++, allow you to throw exceptions of any managed type.  Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref:System.Exception> class.  To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref:System.Exception> in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.","pos":[0,441],"nodes":[{"content":"Some languages, such as C++, allow you to throw exceptions of any managed type.","pos":[0,79]},{"content":"Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> class.","pos":[81,223],"source":"  Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref:System.Exception> class."},{"content":"To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> in a <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph> object.","pos":[225,441],"source":"  To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref:System.Exception> in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object."}]}]},{"pos":[448,796],"content":"You can use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.  Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.","nodes":[{"content":"You can use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.  Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.","pos":[0,348],"nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.","pos":[0,201],"source":"You can use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly."},{"content":"Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.","pos":[203,348]}]}]},{"pos":[803,1075],"content":"Note that the runtime still wraps exceptions even if you use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify that you do not want them wrapped.  In this case, exceptions are unwrapped only inside catch blocks or exception filters.","nodes":[{"content":"Note that the runtime still wraps exceptions even if you use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify that you do not want them wrapped.  In this case, exceptions are unwrapped only inside catch blocks or exception filters.","pos":[0,272],"nodes":[{"content":"Note that the runtime still wraps exceptions even if you use the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph> class to specify that you do not want them wrapped.","pos":[0,185],"source":"Note that the runtime still wraps exceptions even if you use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify that you do not want them wrapped."},{"content":"In this case, exceptions are unwrapped only inside catch blocks or exception filters.","pos":[187,272]}]}]}],"pos":[886,1968],"yaml":true,"extradata":"MT"},{"content":"Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with information about the exception.","nodes":[{"pos":[0,121],"content":"Sets the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object with information about the exception.","source":"Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with information about the exception."}],"pos":[4828,4950],"yaml":true},{"content":"The <xref:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData%2A> method sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.","nodes":[{"pos":[0,334],"content":"The <xref:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData%2A> method sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData%2A&gt;</ph> method sets a <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.SerializationInfo&gt;</ph> object with all the exception object data targeted for serialization.","pos":[0,221],"source":"The <xref:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData%2A> method sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization."},{"content":"During deserialization, the exception is reconstituted from the <ph id=\"ph1\">`SerializationInfo`</ph> transmitted over the stream.","pos":[222,334],"source":" During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream."}]}],"pos":[4961,5296],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object that holds the serialized object data about the exception being thrown.","nodes":[{"pos":[0,150],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object that holds the serialized object data about the exception being thrown.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object that holds the serialized object data about the exception being thrown."}],"pos":[5624,5775],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object that contains contextual information about the source or destination.","nodes":[{"pos":[0,147],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> object that contains contextual information about the source or destination.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object that contains contextual information about the source or destination."}],"pos":[5870,6018],"yaml":true},{"content":"The <code>info</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>info</code> parameter is `null`."}],"pos":[6217,6260],"yaml":true},{"content":"Gets the object that was wrapped by the <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"></xref> object.","nodes":[{"pos":[0,124],"content":"Gets the object that was wrapped by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the object that was wrapped by the <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"></xref> object."}],"pos":[7625,7750],"yaml":true},{"content":"The <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A> property gets an object that was thrown as an exception from a language that allows exceptions that do not derive from the <xref:System.Exception> class.","nodes":[{"pos":[0,240],"content":"The <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A> property gets an object that was thrown as an exception from a language that allows exceptions that do not derive from the <xref:System.Exception> class.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A&gt;</ph> property gets an object that was thrown as an exception from a language that allows exceptions that do not derive from the <ph id=\"ph2\">&lt;xref:System.Exception&gt;</ph> class.","pos":[0,240],"source":"The <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A> property gets an object that was thrown as an exception from a language that allows exceptions that do not derive from the <xref:System.Exception> class."}]}],"pos":[7761,8002],"yaml":true,"extradata":"MT"},{"content":"The object that was wrapped by the <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"></xref> object.","nodes":[{"pos":[0,119],"content":"The object that was wrapped by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"&gt;&lt;/xref&gt;</ph> object.","source":"The object that was wrapped by the <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"></xref> object."}],"pos":[8122,8242],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException\n  commentId: T:System.Runtime.CompilerServices.RuntimeWrappedException\n  id: RuntimeWrappedException\n  children:\n  - System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException\n  langs:\n  - csharp\n  name: RuntimeWrappedException\n  nameWithType: RuntimeWrappedException\n  fullName: System.Runtime.CompilerServices.RuntimeWrappedException\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: Wraps an exception that does not derive from the <xref href=\"System.Exception\"></xref> class. This class cannot be inherited.\n  remarks: \"Some languages, such as C++, allow you to throw exceptions of any managed type.  Other languages, such as Microsoft C# and Visual Basic, require that every thrown exception be derived from the <xref:System.Exception> class.  To maintain compatibility between languages, the common language runtime (CLR) wraps objects that do not derive from <xref:System.Exception> in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.  \\n  \\n You can use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify whether exceptions should appear wrapped inside catch blocks and exception filters for an assembly.  Many language compilers, including the Microsoft C# and Visual Basic compilers, apply this attribute by default to specify the wrapping behavior.  \\n  \\n Note that the runtime still wraps exceptions even if you use the <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> class to specify that you do not want them wrapped.  In this case, exceptions are unwrapped only inside catch blocks or exception filters.\"\n  example:\n  - \"The following code example demonstrates how to throw a <xref:System.String> object as an exception in C++ and catch it using a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.  \\n  \\n [!code-cpp[System.Runtime.CompilerServices.RuntimeWrappedException#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Runtime.CompilerServices.RuntimeWrappedException/cpp/sample.cpp#1)]\"\n  syntax:\n    content: 'public sealed class RuntimeWrappedException : Exception'\n  inheritance:\n  - System.Object\n  - System.Exception\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/RuntimeWrappedException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: RuntimeWrappedException.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: RuntimeWrappedException.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: Sets the <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with information about the exception.\n  remarks: The <xref:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData%2A> method sets a <xref:System.Runtime.Serialization.SerializationInfo> object with all the exception object data targeted for serialization. During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> object that contains contextual information about the source or destination.\n  overload: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>info</code> parameter is `null`.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/RuntimeWrappedException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException\n  commentId: P:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException\n  id: WrappedException\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  langs:\n  - csharp\n  name: WrappedException\n  nameWithType: RuntimeWrappedException.WrappedException\n  fullName: RuntimeWrappedException.WrappedException\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: Gets the object that was wrapped by the <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"></xref> object.\n  remarks: The <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A> property gets an object that was thrown as an exception from a language that allows exceptions that do not derive from the <xref:System.Exception> class.\n  syntax:\n    content: public object WrappedException { get; }\n    return:\n      type: System.Object\n      description: The object that was wrapped by the <xref href=\"System.Runtime.CompilerServices.RuntimeWrappedException\"></xref> object.\n  overload: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/RuntimeWrappedException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: RuntimeWrappedException.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: RuntimeWrappedException.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  isExternal: false\n  name: WrappedException\n  nameWithType: RuntimeWrappedException.WrappedException\n  fullName: RuntimeWrappedException.WrappedException\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData*\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  isExternal: false\n  name: GetObjectData\n  nameWithType: RuntimeWrappedException.GetObjectData\n  fullName: RuntimeWrappedException.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/RuntimeWrappedException.xml\n- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException*\n  parent: System.Runtime.CompilerServices.RuntimeWrappedException\n  isExternal: false\n  name: WrappedException\n  nameWithType: RuntimeWrappedException.WrappedException\n  fullName: RuntimeWrappedException.WrappedException\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/RuntimeWrappedException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n"}