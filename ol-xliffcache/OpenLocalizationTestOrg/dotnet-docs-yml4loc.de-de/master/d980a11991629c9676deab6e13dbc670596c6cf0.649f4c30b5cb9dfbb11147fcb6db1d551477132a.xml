{"nodes":[{"content":"Represents a Transact-SQL transaction to be made in a SQL Server database. This class cannot be inherited.","nodes":[{"pos":[0,106],"content":"Represents a Transact-SQL transaction to be made in a SQL Server database. This class cannot be inherited.","nodes":[{"content":"Represents a Transact-SQL transaction to be made in a SQL Server database. This class cannot be inherited.","pos":[0,106],"nodes":[{"content":"Represents a Transact-SQL transaction to be made in a SQL Server database.","pos":[0,74]},{"content":"This class cannot be inherited.","pos":[75,106]}]}]}],"pos":[871,978],"yaml":true},{"content":"The application creates a <xref:System.Data.SqlClient.SqlTransaction> object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <xref:System.Data.SqlClient.SqlTransaction> object.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>. Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\\(SQL.105\\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\\(SQL.105\\).aspx).","nodes":[{"pos":[0,394],"content":"The application creates a <xref:System.Data.SqlClient.SqlTransaction> object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <xref:System.Data.SqlClient.SqlTransaction> object.","nodes":[{"content":"The application creates a <xref:System.Data.SqlClient.SqlTransaction> object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <xref:System.Data.SqlClient.SqlTransaction> object.","pos":[0,394],"nodes":[{"content":"The application creates a <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph> object by calling <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph> on the <ph id=\"ph3\">&lt;xref:System.Data.SqlClient.SqlConnection&gt;</ph> object.","pos":[0,208],"source":"The application creates a <xref:System.Data.SqlClient.SqlTransaction> object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object."},{"content":"All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph> object.","pos":[209,394],"source":" All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <xref:System.Data.SqlClient.SqlTransaction> object."}]}]},{"pos":[402,815],"content":"[!NOTE]\n `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>. Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.","leadings":["","> "],"nodes":[{"content":" `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>. Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.","pos":[8,411],"nodes":[{"content":"<ph id=\"ph1\"> `Try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`Catch`</ph> exception handling should always be used when committing or rolling back a <ph id=\"ph4\">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph>.","pos":[0,134],"source":" `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>."},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> generate an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph> if the connection is terminated or if the transaction has already been rolled back on the server.","pos":[135,403],"source":" Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server."}]}]},{"pos":[822,1098],"content":"For more information on <ph id=\"ph1\">[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]</ph> transactions, see <bpt id=\"p1\">[</bpt>Explicit Transactions<ept id=\"p1\">](http://msdn.microsoft.com/library/ms175127\\(SQL.105\\).aspx)</ept> and <bpt id=\"p2\">[</bpt>Coding Efficient Transactions<ept id=\"p2\">](http://msdn.microsoft.com/library/ms187484\\(SQL.105\\).aspx)</ept>.","source":"For more information on [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\\(SQL.105\\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\\(SQL.105\\).aspx)."}],"pos":[989,2099],"yaml":true,"extradata":"MT"},{"content":"Commits the database transaction.","nodes":[{"pos":[0,33],"content":"Commits the database transaction.","nodes":[{"content":"Commits the database transaction.","pos":[0,33]}]}],"pos":[4871,4905],"yaml":true},{"content":"The <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement. You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database. For more information, see SQL Server Books Online.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>. Both `Commit` and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.","nodes":[{"pos":[0,314],"content":"The <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement. You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database. For more information, see SQL Server Books Online.","nodes":[{"content":"The <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement. You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database. For more information, see SQL Server Books Online.","pos":[0,314],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement.","pos":[0,128],"source":"The <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement."},{"content":"You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database.","pos":[129,263]},{"content":"For more information, see SQL Server Books Online.","pos":[264,314]}]}]},{"pos":[322,691],"content":"[!NOTE]\n `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>. Both `Commit` and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.","leadings":["","> "],"nodes":[{"content":" `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>. Both `Commit` and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.","pos":[8,367],"nodes":[{"content":"<ph id=\"ph1\"> `Try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`Catch`</ph> exception handling should always be used when committing or rolling back a <ph id=\"ph4\">&lt;xref:System.Data.SqlClient.SqlTransaction&gt;</ph>.","pos":[0,134],"source":" `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>."},{"content":"Both <ph id=\"ph1\">`Commit`</ph> and <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> generates an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph> if the connection is terminated or if the transaction has already been rolled back on the server.","pos":[135,359],"source":" Both `Commit` and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server."}]}]},{"pos":[698,838],"content":"For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.","nodes":[{"content":"For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.","pos":[0,140]}]}],"pos":[4916,5766],"yaml":true,"extradata":"MT"},{"content":"An error occurred while trying to commit the transaction.","nodes":[{"pos":[0,57],"content":"An error occurred while trying to commit the transaction.","nodes":[{"content":"An error occurred while trying to commit the transaction.","pos":[0,57]}]}],"pos":[6906,6964],"yaml":true},{"content":"The transaction has already been committed or rolled back.  \n  \n -or-  \n  \n The connection is broken.","nodes":[{"pos":[0,58],"content":"The transaction has already been committed or rolled back.","nodes":[{"content":"The transaction has already been committed or rolled back.","pos":[0,58]}]},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,101],"content":"The connection is broken.","nodes":[{"content":"The connection is broken.","pos":[0,25]}]}],"pos":[7074,7182],"yaml":true},{"content":"Gets the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object associated with the transaction, or `null` if the transaction is no longer valid.","nodes":[{"pos":[0,154],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;&lt;/xref&gt;</ph> object associated with the transaction, or <ph id=\"ph2\">`null`</ph> if the transaction is no longer valid.","source":"Gets the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object associated with the transaction, or `null` if the transaction is no longer valid."}],"pos":[8376,8531],"yaml":true},{"content":"A single application may have multiple database connections, each with zero or more transactions. This property lets you determine the connection object associated with a particular transaction created by <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.","nodes":[{"pos":[0,268],"content":"A single application may have multiple database connections, each with zero or more transactions. This property lets you determine the connection object associated with a particular transaction created by <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.","nodes":[{"content":"A single application may have multiple database connections, each with zero or more transactions. This property lets you determine the connection object associated with a particular transaction created by <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.","pos":[0,268],"nodes":[{"content":"A single application may have multiple database connections, each with zero or more transactions.","pos":[0,97]},{"content":"This property lets you determine the connection object associated with a particular transaction created by <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph>.","pos":[98,268],"source":" This property lets you determine the connection object associated with a particular transaction created by <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>."}]}]}],"pos":[8542,8811],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object associated with the transaction.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Data.SqlClient.SqlConnection\"&gt;&lt;/xref&gt;</ph> object associated with the transaction.","source":"The <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object associated with the transaction."}],"pos":[8976,9077],"yaml":true},{"content":"Specifies the <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction.","nodes":[{"pos":[0,83],"content":"Specifies the <ph id=\"ph1\">&lt;xref href=\"System.Data.IsolationLevel\"&gt;&lt;/xref&gt;</ph> for this transaction.","source":"Specifies the <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction."}],"pos":[13097,13181],"yaml":true},{"content":"Parallel transactions are not supported. Therefore, the <xref:System.Data.IsolationLevel> applies to the whole transaction.  \n  \n For more information on SQL Server isolation levels, see \"Isolation Levels in the Database Engine\" in SQL Server Books Online.","nodes":[{"pos":[0,123],"content":"Parallel transactions are not supported. Therefore, the <xref:System.Data.IsolationLevel> applies to the whole transaction.","nodes":[{"content":"Parallel transactions are not supported. Therefore, the <xref:System.Data.IsolationLevel> applies to the whole transaction.","pos":[0,123],"nodes":[{"content":"Parallel transactions are not supported.","pos":[0,40]},{"content":"Therefore, the <ph id=\"ph1\">&lt;xref:System.Data.IsolationLevel&gt;</ph> applies to the whole transaction.","pos":[41,123],"source":" Therefore, the <xref:System.Data.IsolationLevel> applies to the whole transaction."}]}]},{"pos":[130,256],"content":"For more information on SQL Server isolation levels, see \"Isolation Levels in the Database Engine\" in SQL Server Books Online.","nodes":[{"content":"For more information on SQL Server isolation levels, see \"Isolation Levels in the Database Engine\" in SQL Server Books Online.","pos":[0,126]}]}],"pos":[13192,13455],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction. The default is `ReadCommitted`.","nodes":[{"pos":[0,105],"content":"The <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction. The default is `ReadCommitted`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Data.IsolationLevel\"&gt;&lt;/xref&gt;</ph> for this transaction.","pos":[0,73],"source":"The <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction."},{"content":"The default is <ph id=\"ph1\">`ReadCommitted`</ph>.","pos":[74,105],"source":" The default is `ReadCommitted`."}]}],"pos":[13615,13721],"yaml":true},{"content":"Rolls back a transaction from a pending state.","nodes":[{"pos":[0,46],"content":"Rolls back a transaction from a pending state.","nodes":[{"content":"Rolls back a transaction from a pending state.","pos":[0,46]}]}],"pos":[14989,15036],"yaml":true},{"content":"The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see SQL Server Books Online.  \n  \n The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called). The transaction is rolled back in the event it is disposed before `Commit` or `Rollback` is called.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when rolling back a transaction. A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.","nodes":[{"pos":[0,183],"content":"The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see SQL Server Books Online.","nodes":[{"content":"The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see SQL Server Books Online.","pos":[0,183],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement.","pos":[0,132],"source":"The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement."},{"content":"For more information, see SQL Server Books Online.","pos":[133,183]}]}]},{"pos":[190,514],"content":"The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called). The transaction is rolled back in the event it is disposed before `Commit` or `Rollback` is called.","nodes":[{"content":"The transaction can only be rolled back from a pending state (after <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph> has been called, but before <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph> is called).","pos":[0,224],"source":"The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called)."},{"content":"The transaction is rolled back in the event it is disposed before <ph id=\"ph1\">`Commit`</ph> or <ph id=\"ph2\">`Rollback`</ph> is called.","pos":[225,324],"source":" The transaction is rolled back in the event it is disposed before `Commit` or `Rollback` is called."}]},{"pos":[522,784],"content":"[!NOTE]\n `Try`/`Catch` exception handling should always be used when rolling back a transaction. A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.","leadings":["","> "],"nodes":[{"content":" `Try`/`Catch` exception handling should always be used when rolling back a transaction. A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.","pos":[8,260],"nodes":[{"content":"<ph id=\"ph1\"> `Try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`Catch`</ph> exception handling should always be used when rolling back a transaction.","pos":[0,88],"source":" `Try`/`Catch` exception handling should always be used when rolling back a transaction."},{"content":"A <ph id=\"ph1\">`Rollback`</ph> generates an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph> if the connection is terminated or if the transaction has already been rolled back on the server.","pos":[89,252],"source":" A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server."}]}]},{"pos":[791,931],"content":"For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.","nodes":[{"content":"For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.","pos":[0,140]}]}],"pos":[15047,15992],"yaml":true,"extradata":"MT"},{"content":"An error occurred while trying to commit the transaction.","nodes":[{"pos":[0,57],"content":"An error occurred while trying to commit the transaction.","nodes":[{"content":"An error occurred while trying to commit the transaction.","pos":[0,57]}]}],"pos":[17136,17194],"yaml":true},{"content":"The transaction has already been committed or rolled back.  \n  \n -or-  \n  \n The connection is broken.","nodes":[{"pos":[0,58],"content":"The transaction has already been committed or rolled back.","nodes":[{"content":"The transaction has already been committed or rolled back.","pos":[0,58]}]},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,101],"content":"The connection is broken.","nodes":[{"content":"The connection is broken.","pos":[0,25]}]}],"pos":[17304,17412],"yaml":true},{"content":"Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.","nodes":[{"pos":[0,95],"content":"Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.","nodes":[{"content":"Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.","pos":[0,95]}]}],"pos":[18661,18757],"yaml":true},{"content":"The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see \"Explicit Transactions\" and \"Transaction Savepoints\" in SQL Server Books Online.  \n  \n The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called). The transaction is rolled back if it is disposed before `Commit` or `Rollback` is called.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when rolling back a transaction. A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.","nodes":[{"pos":[0,239],"content":"The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see \"Explicit Transactions\" and \"Transaction Savepoints\" in SQL Server Books Online.","nodes":[{"content":"The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see \"Explicit Transactions\" and \"Transaction Savepoints\" in SQL Server Books Online.","pos":[0,239],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement.","pos":[0,132],"source":"The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement."},{"content":"For more information, see \"Explicit Transactions\" and \"Transaction Savepoints\" in SQL Server Books Online.","pos":[133,239]}]}]},{"pos":[246,560],"content":"The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called). The transaction is rolled back if it is disposed before `Commit` or `Rollback` is called.","nodes":[{"content":"The transaction can only be rolled back from a pending state (after <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph> has been called, but before <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlTransaction.Commit%2A&gt;</ph> is called).","pos":[0,224],"source":"The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called)."},{"content":"The transaction is rolled back if it is disposed before <ph id=\"ph1\">`Commit`</ph> or <ph id=\"ph2\">`Rollback`</ph> is called.","pos":[225,314],"source":" The transaction is rolled back if it is disposed before `Commit` or `Rollback` is called."}]},{"pos":[568,830],"content":"[!NOTE]\n `Try`/`Catch` exception handling should always be used when rolling back a transaction. A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.","leadings":["","> "],"nodes":[{"content":" `Try`/`Catch` exception handling should always be used when rolling back a transaction. A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.","pos":[8,260],"nodes":[{"content":"<ph id=\"ph1\"> `Try`</ph><ph id=\"ph2\">/</ph><ph id=\"ph3\">`Catch`</ph> exception handling should always be used when rolling back a transaction.","pos":[0,88],"source":" `Try`/`Catch` exception handling should always be used when rolling back a transaction."},{"content":"A <ph id=\"ph1\">`Rollback`</ph> generates an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph> if the connection is terminated or if the transaction has already been rolled back on the server.","pos":[89,252],"source":" A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server."}]}]},{"pos":[837,977],"content":"For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.","nodes":[{"content":"For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.","pos":[0,140]}]}],"pos":[18768,19763],"yaml":true,"extradata":"MT"},{"content":"The name of the transaction to roll back, or the savepoint to which to roll back.","nodes":[{"pos":[0,81],"content":"The name of the transaction to roll back, or the savepoint to which to roll back.","nodes":[{"content":"The name of the transaction to roll back, or the savepoint to which to roll back.","pos":[0,81]}]}],"pos":[20841,20923],"yaml":true},{"content":"No transaction name was specified.","nodes":[{"pos":[0,34],"content":"No transaction name was specified.","nodes":[{"content":"No transaction name was specified.","pos":[0,34]}]}],"pos":[21090,21125],"yaml":true},{"content":"The transaction has already been committed or rolled back.  \n  \n -or-  \n  \n The connection is broken.","nodes":[{"pos":[0,58],"content":"The transaction has already been committed or rolled back.","nodes":[{"content":"The transaction has already been committed or rolled back.","pos":[0,58]}]},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,101],"content":"The connection is broken.","nodes":[{"content":"The connection is broken.","pos":[0,25]}]}],"pos":[21235,21343],"yaml":true},{"content":"Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.","nodes":[{"pos":[0,129],"content":"Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.","nodes":[{"content":"Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.","pos":[0,129]}]}],"pos":[22568,22698],"yaml":true},{"content":"<xref:System.Data.SqlClient.SqlTransaction.Save%2A> method is equivalent to the Transact-SQL SAVE TRANSACTION statement.  \n  \n The value used in the `savePoint` parameter can be the same value used in the `transactionName` parameter of some implementations of the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method.  \n  \n Savepoints offer a mechanism to roll back parts of transactions. You create a savepoint using the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method, and then later call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to roll back to the savepoint instead of rolling back to the start of the transaction.","nodes":[{"pos":[0,120],"content":"<xref:System.Data.SqlClient.SqlTransaction.Save%2A> method is equivalent to the Transact-SQL SAVE TRANSACTION statement.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlTransaction.Save%2A&gt;</ph> method is equivalent to the Transact-SQL SAVE TRANSACTION statement.","pos":[0,120],"source":"<xref:System.Data.SqlClient.SqlTransaction.Save%2A> method is equivalent to the Transact-SQL SAVE TRANSACTION statement."}]},{"pos":[127,334],"content":"The value used in the <ph id=\"ph1\">`savePoint`</ph> parameter can be the same value used in the <ph id=\"ph2\">`transactionName`</ph> parameter of some implementations of the <ph id=\"ph3\">&lt;xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A&gt;</ph> method.","source":"The value used in the `savePoint` parameter can be the same value used in the `transactionName` parameter of some implementations of the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method."},{"pos":[341,672],"content":"Savepoints offer a mechanism to roll back parts of transactions. You create a savepoint using the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method, and then later call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to roll back to the savepoint instead of rolling back to the start of the transaction.","nodes":[{"content":"Savepoints offer a mechanism to roll back parts of transactions. You create a savepoint using the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method, and then later call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to roll back to the savepoint instead of rolling back to the start of the transaction.","pos":[0,331],"nodes":[{"content":"Savepoints offer a mechanism to roll back parts of transactions.","pos":[0,64]},{"content":"You create a savepoint using the <ph id=\"ph1\">&lt;xref:System.Data.SqlClient.SqlTransaction.Save%2A&gt;</ph> method, and then later call the <ph id=\"ph2\">&lt;xref:System.Data.SqlClient.SqlTransaction.Rollback%2A&gt;</ph> method to roll back to the savepoint instead of rolling back to the start of the transaction.","pos":[65,331],"source":" You create a savepoint using the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method, and then later call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to roll back to the savepoint instead of rolling back to the start of the transaction."}]}]}],"pos":[22709,23388],"yaml":true,"extradata":"MT"},{"content":"The name of the savepoint.","nodes":[{"pos":[0,26],"content":"The name of the savepoint.","nodes":[{"content":"The name of the savepoint.","pos":[0,26]}]}],"pos":[23537,23564],"yaml":true},{"content":"An error occurred while trying to commit the transaction.","nodes":[{"pos":[0,57],"content":"An error occurred while trying to commit the transaction.","nodes":[{"content":"An error occurred while trying to commit the transaction.","pos":[0,57]}]}],"pos":[23711,23769],"yaml":true},{"content":"The transaction has already been committed or rolled back.  \n  \n -or-  \n  \n The connection is broken.","nodes":[{"pos":[0,58],"content":"The transaction has already been committed or rolled back.","nodes":[{"content":"The transaction has already been committed or rolled back.","pos":[0,58]}]},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,101],"content":"The connection is broken.","nodes":[{"content":"The connection is broken.","pos":[0,25]}]}],"pos":[23879,23987],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.SqlClient.SqlTransaction\n  commentId: T:System.Data.SqlClient.SqlTransaction\n  id: SqlTransaction\n  children:\n  - System.Data.SqlClient.SqlTransaction.Commit\n  - System.Data.SqlClient.SqlTransaction.Connection\n  - System.Data.SqlClient.SqlTransaction.DbConnection\n  - System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)\n  - System.Data.SqlClient.SqlTransaction.IsolationLevel\n  - System.Data.SqlClient.SqlTransaction.Rollback\n  - System.Data.SqlClient.SqlTransaction.Rollback(System.String)\n  - System.Data.SqlClient.SqlTransaction.Save(System.String)\n  langs:\n  - csharp\n  name: SqlTransaction\n  nameWithType: SqlTransaction\n  fullName: System.Data.SqlClient.SqlTransaction\n  type: Class\n  assemblies:\n  - System.Data.SqlClient\n  - System.Data\n  - netstandard\n  namespace: System.Data.SqlClient\n  summary: Represents a Transact-SQL transaction to be made in a SQL Server database. This class cannot be inherited.\n  remarks: \"The application creates a <xref:System.Data.SqlClient.SqlTransaction> object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <xref:System.Data.SqlClient.SqlTransaction> object.  \\n  \\n> [!NOTE]\\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>. Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \\n  \\n For more information on [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\\\\(SQL.105\\\\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\\\\(SQL.105\\\\).aspx).\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error, or if it is disposed without first being committed. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \\n  \\n [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]\"\n  syntax:\n    content: 'public sealed class SqlTransaction : System.Data.Common.DbTransaction, IDisposable'\n  inheritance:\n  - System.Object\n  - System.Data.Common.DbTransaction\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Data.Common.DbTransaction.Dispose\n  - System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlTransaction.Commit\n  commentId: M:System.Data.SqlClient.SqlTransaction.Commit\n  id: Commit\n  parent: System.Data.SqlClient.SqlTransaction\n  langs:\n  - csharp\n  name: Commit()\n  nameWithType: SqlTransaction.Commit()\n  fullName: SqlTransaction.Commit()\n  type: Method\n  assemblies:\n  - System.Data.SqlClient\n  - System.Data\n  - netstandard\n  namespace: System.Data.SqlClient\n  summary: Commits the database transaction.\n  remarks: \"The <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement. You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database. For more information, see SQL Server Books Online.  \\n  \\n> [!NOTE]\\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>. Both `Commit` and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \\n  \\n For more information on SQL Server transactions, see \\\"Explicit Transactions\\\" and \\\"Coding Efficient Transactions\\\" in SQL Server Books Online.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \\n  \\n [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]\"\n  syntax:\n    content: public override void Commit ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlTransaction.Commit*\n  exceptions:\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: An error occurred while trying to commit the transaction.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The transaction has already been committed or rolled back.  \\n  \\n -or-  \\n  \\n The connection is broken.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlTransaction.Connection\n  commentId: P:System.Data.SqlClient.SqlTransaction.Connection\n  id: Connection\n  parent: System.Data.SqlClient.SqlTransaction\n  langs:\n  - csharp\n  name: Connection\n  nameWithType: SqlTransaction.Connection\n  fullName: SqlTransaction.Connection\n  type: Property\n  assemblies:\n  - System.Data.SqlClient\n  - System.Data\n  - netstandard\n  namespace: System.Data.SqlClient\n  summary: Gets the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object associated with the transaction, or `null` if the transaction is no longer valid.\n  remarks: A single application may have multiple database connections, each with zero or more transactions. This property lets you determine the connection object associated with a particular transaction created by <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.\n  syntax:\n    content: public System.Data.SqlClient.SqlConnection Connection { get; }\n    return:\n      type: System.Data.SqlClient.SqlConnection\n      description: The <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object associated with the transaction.\n  overload: System.Data.SqlClient.SqlTransaction.Connection*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlTransaction.DbConnection\n  commentId: P:System.Data.SqlClient.SqlTransaction.DbConnection\n  id: DbConnection\n  parent: System.Data.SqlClient.SqlTransaction\n  langs:\n  - csharp\n  name: DbConnection\n  nameWithType: SqlTransaction.DbConnection\n  fullName: SqlTransaction.DbConnection\n  type: Property\n  assemblies:\n  - System.Data.SqlClient\n  - System.Data\n  - netstandard\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override System.Data.Common.DbConnection DbConnection { get; }\n    return:\n      type: System.Data.Common.DbConnection\n      description: ''\n  overload: System.Data.SqlClient.SqlTransaction.DbConnection*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)\n  commentId: M:System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Data.SqlClient.SqlTransaction\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SqlTransaction.Dispose(Boolean)\n  fullName: SqlTransaction.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Data.SqlClient\n  - System.Data\n  - netstandard\n  namespace: System.Data.SqlClient\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: ''\n  overload: System.Data.SqlClient.SqlTransaction.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel\n  commentId: P:System.Data.SqlClient.SqlTransaction.IsolationLevel\n  id: IsolationLevel\n  parent: System.Data.SqlClient.SqlTransaction\n  langs:\n  - csharp\n  name: IsolationLevel\n  nameWithType: SqlTransaction.IsolationLevel\n  fullName: SqlTransaction.IsolationLevel\n  type: Property\n  assemblies:\n  - System.Data.SqlClient\n  - System.Data\n  - netstandard\n  namespace: System.Data.SqlClient\n  summary: Specifies the <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction.\n  remarks: \"Parallel transactions are not supported. Therefore, the <xref:System.Data.IsolationLevel> applies to the whole transaction.  \\n  \\n For more information on SQL Server isolation levels, see \\\"Isolation Levels in the Database Engine\\\" in SQL Server Books Online.\"\n  syntax:\n    content: public override System.Data.IsolationLevel IsolationLevel { get; }\n    return:\n      type: System.Data.IsolationLevel\n      description: The <xref href=\"System.Data.IsolationLevel\"></xref> for this transaction. The default is `ReadCommitted`.\n  overload: System.Data.SqlClient.SqlTransaction.IsolationLevel*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlTransaction.Rollback\n  commentId: M:System.Data.SqlClient.SqlTransaction.Rollback\n  id: Rollback\n  parent: System.Data.SqlClient.SqlTransaction\n  langs:\n  - csharp\n  name: Rollback()\n  nameWithType: SqlTransaction.Rollback()\n  fullName: SqlTransaction.Rollback()\n  type: Method\n  assemblies:\n  - System.Data.SqlClient\n  - System.Data\n  - netstandard\n  namespace: System.Data.SqlClient\n  summary: Rolls back a transaction from a pending state.\n  remarks: \"The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see SQL Server Books Online.  \\n  \\n The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called). The transaction is rolled back in the event it is disposed before `Commit` or `Rollback` is called.  \\n  \\n> [!NOTE]\\n>  `Try`/`Catch` exception handling should always be used when rolling back a transaction. A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \\n  \\n For more information on SQL Server transactions, see \\\"Explicit Transactions\\\" and \\\"Coding Efficient Transactions\\\" in SQL Server Books Online.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \\n  \\n [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]\"\n  syntax:\n    content: public override void Rollback ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlTransaction.Rollback*\n  exceptions:\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: An error occurred while trying to commit the transaction.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The transaction has already been committed or rolled back.  \\n  \\n -or-  \\n  \\n The connection is broken.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)\n  commentId: M:System.Data.SqlClient.SqlTransaction.Rollback(System.String)\n  id: Rollback(System.String)\n  parent: System.Data.SqlClient.SqlTransaction\n  langs:\n  - csharp\n  name: Rollback(String)\n  nameWithType: SqlTransaction.Rollback(String)\n  fullName: SqlTransaction.Rollback(String)\n  type: Method\n  assemblies:\n  - System.Data.SqlClient\n  - System.Data\n  - netstandard\n  namespace: System.Data.SqlClient\n  summary: Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.\n  remarks: \"The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement. For more information, see \\\"Explicit Transactions\\\" and \\\"Transaction Savepoints\\\" in SQL Server Books Online.  \\n  \\n The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called). The transaction is rolled back if it is disposed before `Commit` or `Rollback` is called.  \\n  \\n> [!NOTE]\\n>  `Try`/`Catch` exception handling should always be used when rolling back a transaction. A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \\n  \\n For more information on SQL Server transactions, see \\\"Explicit Transactions\\\" and \\\"Coding Efficient Transactions\\\" in SQL Server Books Online.\"\n  example:\n  - \"The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \\n  \\n [!code-csharp[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/CS/source.cs#1)]\\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/VB/source.vb#1)]\"\n  syntax:\n    content: public void Rollback (string transactionName);\n    parameters:\n    - id: transactionName\n      type: System.String\n      description: The name of the transaction to roll back, or the savepoint to which to roll back.\n  overload: System.Data.SqlClient.SqlTransaction.Rollback*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: No transaction name was specified.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The transaction has already been committed or rolled back.  \\n  \\n -or-  \\n  \\n The connection is broken.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)\n  commentId: M:System.Data.SqlClient.SqlTransaction.Save(System.String)\n  id: Save(System.String)\n  parent: System.Data.SqlClient.SqlTransaction\n  langs:\n  - csharp\n  name: Save(String)\n  nameWithType: SqlTransaction.Save(String)\n  fullName: SqlTransaction.Save(String)\n  type: Method\n  assemblies:\n  - System.Data.SqlClient\n  - System.Data\n  - netstandard\n  namespace: System.Data.SqlClient\n  summary: Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.\n  remarks: \"<xref:System.Data.SqlClient.SqlTransaction.Save%2A> method is equivalent to the Transact-SQL SAVE TRANSACTION statement.  \\n  \\n The value used in the `savePoint` parameter can be the same value used in the `transactionName` parameter of some implementations of the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method.  \\n  \\n Savepoints offer a mechanism to roll back parts of transactions. You create a savepoint using the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method, and then later call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to roll back to the savepoint instead of rolling back to the start of the transaction.\"\n  syntax:\n    content: public void Save (string savePointName);\n    parameters:\n    - id: savePointName\n      type: System.String\n      description: The name of the savepoint.\n  overload: System.Data.SqlClient.SqlTransaction.Save*\n  exceptions:\n  - type: System.Exception\n    commentId: T:System.Exception\n    description: An error occurred while trying to commit the transaction.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The transaction has already been committed or rolled back.  \\n  \\n -or-  \\n  \\n The connection is broken.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\nreferences:\n- uid: System.Data.Common.DbTransaction\n  parent: System.Data.Common\n  isExternal: false\n  name: DbTransaction\n  nameWithType: DbTransaction\n  fullName: System.Data.Common.DbTransaction\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Data.SqlClient.SqlTransaction.Commit\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Commit()\n  nameWithType: SqlTransaction.Commit()\n  fullName: SqlTransaction.Commit()\n- uid: System.Data.SqlClient.SqlTransaction.Connection\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Connection\n  nameWithType: SqlTransaction.Connection\n  fullName: SqlTransaction.Connection\n- uid: System.Data.SqlClient.SqlConnection\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlConnection\n  nameWithType: SqlConnection\n  fullName: System.Data.SqlClient.SqlConnection\n- uid: System.Data.SqlClient.SqlTransaction.DbConnection\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: DbConnection\n  nameWithType: SqlTransaction.DbConnection\n  fullName: SqlTransaction.DbConnection\n- uid: System.Data.Common.DbConnection\n  parent: System.Data.Common\n  isExternal: false\n  name: DbConnection\n  nameWithType: DbConnection\n  fullName: System.Data.Common.DbConnection\n- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SqlTransaction.Dispose(Boolean)\n  fullName: SqlTransaction.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: SqlTransaction.IsolationLevel\n  fullName: SqlTransaction.IsolationLevel\n- uid: System.Data.IsolationLevel\n  parent: System.Data\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: IsolationLevel\n  fullName: System.Data.IsolationLevel\n- uid: System.Data.SqlClient.SqlTransaction.Rollback\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Rollback()\n  nameWithType: SqlTransaction.Rollback()\n  fullName: SqlTransaction.Rollback()\n- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Rollback(String)\n  nameWithType: SqlTransaction.Rollback(String)\n  fullName: SqlTransaction.Rollback(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Save(String)\n  nameWithType: SqlTransaction.Save(String)\n  fullName: SqlTransaction.Save(String)\n- uid: System.Data.SqlClient.SqlTransaction.Commit*\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Commit\n  nameWithType: SqlTransaction.Commit\n  fullName: SqlTransaction.Commit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n- uid: System.Data.SqlClient.SqlTransaction.Connection*\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Connection\n  nameWithType: SqlTransaction.Connection\n  fullName: SqlTransaction.Connection\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n- uid: System.Data.SqlClient.SqlTransaction.DbConnection*\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: DbConnection\n  nameWithType: SqlTransaction.DbConnection\n  fullName: SqlTransaction.DbConnection\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n- uid: System.Data.SqlClient.SqlTransaction.Dispose*\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Dispose\n  nameWithType: SqlTransaction.Dispose\n  fullName: SqlTransaction.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel*\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: IsolationLevel\n  nameWithType: SqlTransaction.IsolationLevel\n  fullName: SqlTransaction.IsolationLevel\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n- uid: System.Data.SqlClient.SqlTransaction.Rollback*\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Rollback\n  nameWithType: SqlTransaction.Rollback\n  fullName: SqlTransaction.Rollback\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n- uid: System.Data.SqlClient.SqlTransaction.Save*\n  parent: System.Data.SqlClient.SqlTransaction\n  isExternal: false\n  name: Save\n  nameWithType: SqlTransaction.Save\n  fullName: SqlTransaction.Save\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlTransaction.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Data.Common.DbTransaction.Dispose\n  parent: System.Data.Common.DbTransaction\n  isExternal: false\n  name: Dispose()\n  nameWithType: DbTransaction.Dispose()\n  fullName: DbTransaction.Dispose()\n- uid: System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection\n  parent: System.Data.Common.DbTransaction\n  isExternal: false\n  name: IDbTransaction.Connection\n  nameWithType: DbTransaction.IDbTransaction.Connection\n  fullName: DbTransaction.IDbTransaction.Connection\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}