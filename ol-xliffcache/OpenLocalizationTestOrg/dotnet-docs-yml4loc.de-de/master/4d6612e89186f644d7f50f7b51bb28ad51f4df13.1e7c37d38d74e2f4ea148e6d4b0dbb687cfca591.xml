{"nodes":[{"content":"Defines the interface for unwrapping marshal-by-value objects from indirection.","nodes":[{"pos":[0,79],"content":"Defines the interface for unwrapping marshal-by-value objects from indirection.","nodes":[{"content":"Defines the interface for unwrapping marshal-by-value objects from indirection.","pos":[0,79]}]}],"pos":[430,510],"yaml":true},{"content":"Marshal-by-value objects can be returned through an indirection, allowing the caller to control when the object is loaded into their domain. The caller can unwrap the object from the indirection through this interface.  \n  \n The class implementing the <xref:System.Runtime.Remoting.IObjectHandle> interface can be used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.IObjectHandle> travels. Thus, the <xref:System.Runtime.Remoting.IObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into their domain.","nodes":[{"pos":[0,218],"content":"Marshal-by-value objects can be returned through an indirection, allowing the caller to control when the object is loaded into their domain. The caller can unwrap the object from the indirection through this interface.","nodes":[{"content":"Marshal-by-value objects can be returned through an indirection, allowing the caller to control when the object is loaded into their domain. The caller can unwrap the object from the indirection through this interface.","pos":[0,218],"nodes":[{"content":"Marshal-by-value objects can be returned through an indirection, allowing the caller to control when the object is loaded into their domain.","pos":[0,140]},{"content":"The caller can unwrap the object from the indirection through this interface.","pos":[141,218]}]}]},{"pos":[225,717],"content":"The class implementing the <xref:System.Runtime.Remoting.IObjectHandle> interface can be used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.IObjectHandle> travels. Thus, the <xref:System.Runtime.Remoting.IObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into their domain.","nodes":[{"content":"The class implementing the <xref:System.Runtime.Remoting.IObjectHandle> interface can be used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.IObjectHandle> travels. Thus, the <xref:System.Runtime.Remoting.IObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into their domain.","pos":[0,492],"nodes":[{"content":"The class implementing the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.IObjectHandle&gt;</ph> interface can be used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <ph id=\"ph2\">&lt;xref:System.AppDomain&gt;</ph> through which the <ph id=\"ph3\">&lt;xref:System.Runtime.Remoting.IObjectHandle&gt;</ph> travels.","pos":[0,325],"source":"The class implementing the <xref:System.Runtime.Remoting.IObjectHandle> interface can be used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.IObjectHandle> travels."},{"content":"Thus, the <ph id=\"ph1\">&lt;xref:System.Runtime.Remoting.IObjectHandle&gt;</ph> class gives the caller control of when the <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> of the remote object is loaded into their domain.","pos":[326,492],"source":" Thus, the <xref:System.Runtime.Remoting.IObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into their domain."}]}]}],"pos":[521,1243],"yaml":true,"extradata":"MT"},{"content":"Unwraps the object.","nodes":[{"pos":[0,19],"content":"Unwraps the object.","nodes":[{"content":"Unwraps the object.","pos":[0,19]}]}],"pos":[2835,2855],"yaml":true},{"content":"The unwrapped object.","nodes":[{"pos":[0,21],"content":"The unwrapped object.","nodes":[{"content":"The unwrapped object.","pos":[0,21]}]}],"pos":[2979,3001],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.Remoting.IObjectHandle\n  commentId: T:System.Runtime.Remoting.IObjectHandle\n  id: IObjectHandle\n  children:\n  - System.Runtime.Remoting.IObjectHandle.Unwrap\n  langs:\n  - csharp\n  name: IObjectHandle\n  nameWithType: IObjectHandle\n  fullName: System.Runtime.Remoting.IObjectHandle\n  type: Interface\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Defines the interface for unwrapping marshal-by-value objects from indirection.\n  remarks: \"Marshal-by-value objects can be returned through an indirection, allowing the caller to control when the object is loaded into their domain. The caller can unwrap the object from the indirection through this interface.  \\n  \\n The class implementing the <xref:System.Runtime.Remoting.IObjectHandle> interface can be used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <xref:System.AppDomain> through which the <xref:System.Runtime.Remoting.IObjectHandle> travels. Thus, the <xref:System.Runtime.Remoting.IObjectHandle> class gives the caller control of when the <xref:System.Type> of the remote object is loaded into their domain.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      [System.Runtime.InteropServices.Guid(\"C460E2B4-E199-412a-8456-84DC3E4838C3\")]\n\n      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]\n\n      public interface IObjectHandle\n  derivedClasses:\n  - System.Runtime.Remoting.ObjectHandle\n  implements: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Runtime.InteropServices.GuidAttribute\n  - type: System.Runtime.InteropServices.InterfaceTypeAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/IObjectHandle.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Runtime.Remoting.IObjectHandle.Unwrap\n  commentId: M:System.Runtime.Remoting.IObjectHandle.Unwrap\n  id: Unwrap\n  parent: System.Runtime.Remoting.IObjectHandle\n  langs:\n  - csharp\n  name: Unwrap()\n  nameWithType: IObjectHandle.Unwrap()\n  fullName: IObjectHandle.Unwrap()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Runtime.Remoting\n  summary: Unwraps the object.\n  syntax:\n    content: public object Unwrap ();\n    parameters: []\n    return:\n      type: System.Object\n      description: The unwrapped object.\n  overload: System.Runtime.Remoting.IObjectHandle.Unwrap*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/IObjectHandle.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Runtime.Remoting.IObjectHandle.Unwrap\n  parent: System.Runtime.Remoting.IObjectHandle\n  isExternal: false\n  name: Unwrap()\n  nameWithType: IObjectHandle.Unwrap()\n  fullName: IObjectHandle.Unwrap()\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.Remoting.IObjectHandle.Unwrap*\n  parent: System.Runtime.Remoting.IObjectHandle\n  isExternal: false\n  name: Unwrap\n  nameWithType: IObjectHandle.Unwrap\n  fullName: IObjectHandle.Unwrap\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Remoting/IObjectHandle.xml\n"}