{"nodes":[{"content":"Represents a mutable string of characters. This class cannot be inherited.","nodes":[{"pos":[0,74],"content":"Represents a mutable string of characters. This class cannot be inherited.","nodes":[{"content":"Represents a mutable string of characters. This class cannot be inherited.","pos":[0,74],"nodes":[{"content":"Represents a mutable string of characters.","pos":[0,42]},{"content":"This class cannot be inherited.","pos":[43,74]}]}]}],"pos":[5451,5526],"yaml":true},{"content":"> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n This class represents a string-like object whose value is a mutable sequence of characters.  \n  \n In this section:  \n  \n-   [The String and StringBuilder types](#StringAndSB)  \n  \n-   [How StringBuilder works](#HowWorks)  \n  \n-   [Memory allocation](#Memory)  \n  \n-   [Instantiating a StringBuilder object](#Instantiating)  \n  \n-   [Calling StringBuilder methods](#Calling)  \n  \n-   [Performing StringBuilder operations](#Operations)  \n  \n    -   [Iterating StringBuilder characters](#Iterating)  \n  \n    -   [Adding text to a StringBuilder object](#Adding)  \n  \n    -   [Deleting text from a StringBuilder object](#Deleting)  \n  \n    -   [Modifying the text in a StringBuilder object](#Modifying)  \n  \n-   [Searching the text in a StringBuilder object](#Searching)  \n  \n-   [Converting the StringBuilder object to a string](#Converting)  \n  \n<a name=\"StringAndSB\"></a>   \n## The String and StringBuilder types  \n Although <xref:System.Text.StringBuilder> and <xref:System.String> both represent sequences of characters, they are implemented differently. <xref:System.String> is an immutable type. That is, each operation that appears to modify a <xref:System.String> object actually creates a new string.  \n  \n For example, the call to the <xref:System.String.Concat%2A?displayProperty=fullName> method in the following C# example appears to change the value of a string variable named `value`. In fact, the <xref:System.String.Concat%2A> method returns a `value` object that has a different value and address from the `value` object that was passed to the method. Note that the example must be compiled using the `/unsafe` compiler option.  \n  \n [!code-csharp[System.Text.StringBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/immutability2.cs#1)]  \n  \n For routines that perform extensive string manipulation (such as apps that modify a string numerous times in a loop), modifying a string repeatedly can exact a significant performance penalty. The alternative is to use <xref:System.Text.StringBuilder>, which is a mutable string class. Mutability means that once an instance of the class has been created, it can be modified by appending, removing, replacing, or inserting characters. A <xref:System.Text.StringBuilder> object maintains a buffer to accommodate expansions to the string. New data is appended to the buffer if room is available; otherwise, a new, larger buffer is allocated, data from the original buffer is copied to the new buffer, and the new data is then appended to the new buffer.  \n  \n> [!IMPORTANT]\n>  Although the <xref:System.Text.StringBuilder> class generally offers better performance than the <xref:System.String> class, you should not automatically replace <xref:System.String> with <xref:System.Text.StringBuilder> whenever you want to manipulate strings. Performance depends on the size of the string, the amount of memory to be allocated for the new string, the system on which your app is executing, and the type of operation. You should be prepared to test your app to determine whether <xref:System.Text.StringBuilder> actually offers a significant performance improvement.  \n  \n Consider using the <xref:System.String> class under these conditions:  \n  \n-   When the number of changes that your app will make to a string is small. In these cases, <xref:System.Text.StringBuilder> might offer negligible or no performance improvement over <xref:System.String>.  \n  \n-   When you are performing a fixed number of concatenation operations, particularly with string literals. In this case, the compiler might combine the concatenation operations into a single operation.  \n  \n-   When you have to perform extensive search operations while you are building your string. The <xref:System.Text.StringBuilder> class lacks search methods such as `IndexOf` or `StartsWith`. You'll have to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> for these operations, and this can negate the performance benefit from using <xref:System.Text.StringBuilder>. For more information, see the [Searching the text in a StringBuilder object](#Searching) section.  \n  \n Consider using the <xref:System.Text.StringBuilder> class under these conditions:  \n  \n-   When you expect your app to make an unknown number of changes to a string at design time (for example, when you are using a loop to concatenate a random number of strings that contain user input).  \n  \n-   When you expect your app to make a significant number of changes to a string.  \n  \n<a name=\"HowWorks\"></a>   \n## How StringBuilder works  \n The <xref:System.Text.StringBuilder.Length%2A?displayProperty=fullName> property indicates the number of characters the <xref:System.Text.StringBuilder> object currently contains. If you add characters to the <xref:System.Text.StringBuilder> object, its length increases until it equals the size of the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property, which defines the number of characters that the object can contain. If the number of added characters causes the length of the <xref:System.Text.StringBuilder> object to exceed its current capacity, new memory is allocated, the value of the <xref:System.Text.StringBuilder.Capacity%2A> property is doubled, new characters are added to the <xref:System.Text.StringBuilder> object, and its <xref:System.Text.StringBuilder.Length%2A> property is adjusted. Additional memory for the <xref:System.Text.StringBuilder> object is allocated dynamically until it reaches the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=fullName> property. When the maximum capacity is reached, no further memory can be allocated for the <xref:System.Text.StringBuilder> object, and trying to add characters or expand it beyond its maximum capacity throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.OutOfMemoryException> exception.  \n  \n The following example illustrates how a <xref:System.Text.StringBuilder> object allocates new memory and increases its capacity dynamically as the string assigned to the object expands. The code creates a <xref:System.Text.StringBuilder> object by calling its default (parameterless) constructor. The default capacity of this object is 16 characters, and its maximum capacity is more than 2 billion characters. Appending the string \"This is a sentence.\" results in a new memory allocation because the string length (19 characters) exceeds the default capacity of the <xref:System.Text.StringBuilder> object. The capacity of the object doubles to 32 characters, the new string is added, and the length of the object now equals 19 characters. The code then appends the string \"This is an additional sentence.\" to the value of the <xref:System.Text.StringBuilder> object 11 times. Whenever the append operation causes the length of the <xref:System.Text.StringBuilder> object to exceed its capacity, its existing capacity is doubled and the <xref:System.Text.StringBuilder.Append%2A> operation succeeds.  \n  \n [!code-csharp[System.Text.StringBuilder.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/default1.cs#3)]\n [!code-vb[System.Text.StringBuilder.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/default1.vb#3)]  \n  \n<a name=\"Memory\"></a>   \n## Memory allocation  \n The default capacity of a <xref:System.Text.StringBuilder> object is 16 characters, and its default maximum capacity is <xref:System.Int32.MaxValue?displayProperty=fullName>. These default values are used if you call the <xref:System.Text.StringBuilder.%23ctor> and <xref:System.Text.StringBuilder.%23ctor%28System.String%29> constructors.  \n  \n You can explicitly define the initial capacity of a <xref:System.Text.StringBuilder> object in the following ways:  \n  \n-   By calling any of the <xref:System.Text.StringBuilder> constructors that includes a `capacity` parameter when you create the object.  \n  \n-   By explicitly assigning a new value to the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property to expand an existing <xref:System.Text.StringBuilder> object. Note that the property throws an exception if the new capacity is less than the existing capacity or greater than the <xref:System.Text.StringBuilder> object's maximum capacity.  \n  \n-   By calling the <xref:System.Text.StringBuilder.EnsureCapacity%2A?displayProperty=fullName> method with the new capacity. The new capacity must not be greater than the <xref:System.Text.StringBuilder> object's maximum capacity. However, unlike an assignment to the <xref:System.Text.StringBuilder.Capacity%2A> property, <xref:System.Text.StringBuilder.EnsureCapacity%2A> does not throw an exception if the desired new capacity is less than the existing capacity; in this case, the method call has no effect.  \n  \n If the length of the string assigned to the <xref:System.Text.StringBuilder> object in the constructor call exceeds either the default capacity or the specified capacity, the <xref:System.Text.StringBuilder.Capacity%2A> property is set to the length of the string specified with the `value` parameter.  \n  \n You can explicitly define the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor. You can't change the maximum capacity by assigning a new value to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property, because it is read-only.  \n  \n As the previous section shows, whenever the existing capacity is inadequate, additional memory is allocated and the capacity of a <xref:System.Text.StringBuilder> object doubles up to the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A> property.  \n  \n In general, the default capacity and maximum capacity are adequate for most apps. You might consider setting these values under the following conditions:  \n  \n-   If the eventual size of the <xref:System.Text.StringBuilder> object is likely to grow exceedingly large, typically in excess of several megabytes. In this case, there may be some performance benefit from setting the initial <xref:System.Text.StringBuilder.Capacity%2A> property to a significantly high value to eliminate the need for too many memory reallocations.  \n  \n-   If your app is running on a system with limited memory. In this case, you may want to consider setting the <xref:System.Text.StringBuilder.MaxCapacity%2A> property to less than <xref:System.Int32.MaxValue?displayProperty=fullName> if your app is handling large strings that may cause it to execute in a memory-constrained environment.  \n  \n<a name=\"Instantiating\"></a>   \n## Instantiating a StringBuilder object  \n You instantiate a <xref:System.Text.StringBuilder> object by calling one of its six overloaded class constructors, which are listed in the following table. Three of the constructors instantiate a <xref:System.Text.StringBuilder> object whose value is an empty string, but set its <xref:System.Text.StringBuilder.Capacity%2A> and <xref:System.Text.StringBuilder.MaxCapacity%2A> values differently. The remaining three constructors define a <xref:System.Text.StringBuilder> object that has a specific string value and capacity. Two of the three constructors use the default maximum capacity of <xref:System.Int32.MaxValue?displayProperty=fullName>, whereas the third allows you to set the maximum capacity.  \n  \n|Constructor|String value|Capacity|Maximum capacity|  \n|-----------------|------------------|--------------|----------------------|  \n|<xref:System.Text.StringBuilder.%23ctor>|<xref:System.String.Empty?displayProperty=fullName>|16|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \n|<xref:System.Text.StringBuilder.%23ctor%28System.Int32%29>|<xref:System.String.Empty?displayProperty=fullName>|Defined by the `capacity` parameter|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \n|<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29>|<xref:System.String.Empty?displayProperty=fullName>|Defined by the `capacity` parameter|Defined by the `maxCapacity` parameter|  \n|<xref:System.Text.StringBuilder.%23ctor%28System.String%29>|Defined by the `value` parameter|16 or `value`. <xref:System.String.Length%2A>, whichever is greater|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \n|<xref:System.Text.StringBuilder.%23ctor%28System.String%2CSystem.Int32%29>|Defined by the `value` parameter|Defined by the `capacity` parameter or `value`. <xref:System.String.Length%2A>, whichever is greater.|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \n|<xref:System.Text.StringBuilder.%23ctor%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>|Defined by `value`. <xref:System.String.Substring%2A>(`startIndex`, `length`)|Defined by the `capacity` parameter or `value`. <xref:System.String.Length%2A>, whichever is greater.|Defined by the `maxCapacity` parameter|  \n  \n The following example uses three of these constructor overloads to instantiate <xref:System.Text.StringBuilder> objects.  \n  \n [!code-csharp[System.Text.StringBuilder.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/instantiate1.cs#6)]\n [!code-vb[System.Text.StringBuilder.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/instantiate1.vb#6)]  \n  \n<a name=\"Calling\"></a>   \n## Calling StringBuilder methods  \n Most of the methods that modify the string in a <xref:System.Text.StringBuilder> instance return a reference to that same instance. This enables you to call <xref:System.Text.StringBuilder> methods in two ways:  \n  \n-   You can make individual method calls and ignore the return value, as the following example does.  \n  \n     [!code-csharp[System.Text.StringBuilder.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call1.cs#4)]\n     [!code-vb[System.Text.StringBuilder.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call1.vb#4)]  \n  \n-   You can make a series of method calls in a single statement. This can be convenient if you want to write a single statement that chains successive operations. The following example consolidates three method calls from the previous example into a single line of code.  \n  \n     [!code-csharp[System.Text.StringBuilder.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call2.cs#5)]\n     [!code-vb[System.Text.StringBuilder.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call2.vb#5)]  \n  \n<a name=\"Operations\"></a>   \n## Performing StringBuilder operations  \n You can use the methods of the <xref:System.Text.StringBuilder> class to iterate, add, delete, or modify characters in a <xref:System.Text.StringBuilder> object.  \n  \n<a name=\"Iterating\"></a>   \n### Iterating StringBuilder characters  \n You can access the characters in a <xref:System.Text.StringBuilder> object by using the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property. In C#, <xref:System.Text.StringBuilder.Chars%2A> is an indexer; in Visual Basic, it is the default property of the <xref:System.Text.StringBuilder> class. This enables you to set or retrieve individual characters by using their index only, without explicitly referencing the <xref:System.Text.StringBuilder.Chars%2A> property. Characters in a <xref:System.Text.StringBuilder> object begin at index 0 (zero) and continue to index <xref:System.Text.StringBuilder.Length%2A> - 1.  \n  \n The following example illustrates the <xref:System.Text.StringBuilder.Chars%2A> property. It appends ten random numbers to a <xref:System.Text.StringBuilder> object, and then iterates each character. If the character's Unicode category is <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, it decreases the number by 1 (or changes the number to 9 if its value is 0). The example displays the contents of the <xref:System.Text.StringBuilder> object both before and after the values of individual characters were changed.  \n  \n [!code-csharp[System.Text.StringBuilder.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/chars1.cs#7)]\n [!code-vb[System.Text.StringBuilder.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/chars1.vb#7)]  \n  \n<a name=\"Adding\"></a>   \n### Adding text to a StringBuilder object  \n The <xref:System.Text.StringBuilder> class includes the following methods for expanding the contents of a <xref:System.Text.StringBuilder> object:  \n  \n-   The <xref:System.Text.StringBuilder.Append%2A> method appends a string, a substring, a character array, a portion of a character array, a single character repeated multiple times, or the string representation of a primitive data type to a <xref:System.Text.StringBuilder> object.  \n  \n-   The <xref:System.Text.StringBuilder.AppendLine%2A> method appends a line terminator or a string along with a line terminator to a <xref:System.Text.StringBuilder> object.  \n  \n-   The <xref:System.Text.StringBuilder.AppendFormat%2A> method appends a  to a <xref:System.Text.StringBuilder> object. The string representations of objects included in the result string can reflect the formatting conventions of the current system culture or a specified culture.  \n  \n-   The <xref:System.Text.StringBuilder.Insert%2A> method inserts a string, a substring, multiple repetitions of a string, a character array, a portion of a character array, or the string representation of a primitive data type at a specified position in the <xref:System.Text.StringBuilder> object. The position is defined by a zero-based index.  \n  \n The following example uses the <xref:System.Text.StringBuilder.Append%2A>, <xref:System.Text.StringBuilder.AppendLine%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and <xref:System.Text.StringBuilder.Insert%2A> methods to expand the text of a <xref:System.Text.StringBuilder> object.  \n  \n [!code-csharp[System.Text.StringBuilder.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/expand1.cs#9)]\n [!code-vb[System.Text.StringBuilder.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/expand1.vb#9)]  \n  \n<a name=\"Deleting\"></a>   \n### Deleting text from a StringBuilder object  \n The <xref:System.Text.StringBuilder> class includes methods that can reduce the size of the current <xref:System.Text.StringBuilder> instance. The <xref:System.Text.StringBuilder.Clear%2A> method removes all characters and sets the <xref:System.Text.StringBuilder.Length%2A> property to zero. The <xref:System.Text.StringBuilder.Remove%2A> method deletes a specified number of characters starting at a particular index position. In addition, you can remove characters from the end of a <xref:System.Text.StringBuilder> object by setting its <xref:System.Text.StringBuilder.Length%2A> property to a value that is less than the length of the current instance.  \n  \n The following example removes some of the text from a <xref:System.Text.StringBuilder> object, displays its resulting capacity, maximum capacity, and length property values, and then calls the <xref:System.Text.StringBuilder.Clear%2A> method to remove all the characters from the <xref:System.Text.StringBuilder> object.  \n  \n [!code-csharp[System.Text.StringBuilder.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/delete1.cs#10)]\n [!code-vb[System.Text.StringBuilder.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/delete1.vb#10)]  \n  \n<a name=\"Modifying\"></a>   \n### Modifying the text in a StringBuilder object  \n The <xref:System.Text.StringBuilder.Replace%2A?displayProperty=fullName> method replaces all occurrences of a character or a string in the entire <xref:System.Text.StringBuilder> object or in a particular character range. The following example uses the <xref:System.Text.StringBuilder.Replace%2A> method to replace all exclamation points (!) with question marks (?) in the <xref:System.Text.StringBuilder> object.  \n  \n [!code-csharp[System.Text.StringBuilder.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/replace1.cs#11)]\n [!code-vb[System.Text.StringBuilder.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/replace1.vb#11)]  \n  \n<a name=\"Searching\"></a>   \n## Searching the text in a StringBuilder object  \n The <xref:System.Text.StringBuilder> class does not include methods similar to the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.IndexOf%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods provided by the <xref:System.String> class, which allow you to search the object for a particular character or a substring. Determining the presence or starting character position of a substring requires that you search a <xref:System.String> value by using either a string search method or a regular expression method. There are four ways to implement such searches, as the following table shows.  \n  \n|Technique|Pros|Cons|  \n|---------------|----------|----------|  \n|Search string values before adding them to the <xref:System.Text.StringBuilder> object.|Useful for determining whether a substring exists.|Cannot be used when the index position of a substring is important.|  \n|Call <xref:System.Text.StringBuilder.ToString%2A> and search the returned <xref:System.String> object.|Easy to use if you assign all the text to a <xref:System.Text.StringBuilder> object, and then begin to modify it.|Cumbersome to repeatedly call <xref:System.Text.StringBuilder.ToString%2A> if you must make modifications before all text is added to the <xref:System.Text.StringBuilder> object.<br /><br /> You must remember to work from the end of the <xref:System.Text.StringBuilder> object's text if you're making changes.|  \n|Use the <xref:System.Text.StringBuilder.Chars%2A> property to sequentially search a range of characters.|Useful if you're concerned with individual characters or a small substring.|Cumbersome if the number of characters to search is large or if the search logic is complex.|  \n|Convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object, and perform modifications on the <xref:System.String> object.|Useful if the number of modifications is small.|Negates the performance benefit of the <xref:System.Text.StringBuilder> class if the number of modifications is large.|  \n  \n Let's examine these techniques in greater detail.  \n  \n-   If the goal of the search is to determine whether a particular substring exists (that is, if you aren't interested in the position of the substring), you can search strings before storing them in the <xref:System.Text.StringBuilder> object. The following example provides one possible implementation. It defines a `StringBuilderFinder` class whose constructor is passed a reference to a <xref:System.Text.StringBuilder> object and the substring to find in the string. In this case, the example tries to determine whether recorded temperatures are in Fahrenheit or Celsius, and adds the appropriate introductory text to the beginning of the <xref:System.Text.StringBuilder> object. A random number generator is used to select an array that contains data in either degrees Celsius or degrees Fahrenheit.  \n  \n     [!code-csharp[System.Text.StringBuilder.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern1.cs#12)]\n     [!code-vb[System.Text.StringBuilder.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern1.vb#12)]  \n  \n-   Call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object. You can search the string by using methods such as <xref:System.String.LastIndexOf%2A?displayProperty=fullName> or <xref:System.String.StartsWith%2A?displayProperty=fullName>, or you can use regular expressions and the <xref:System.Text.RegularExpressions.Regex> class to search for patterns. Because both <xref:System.Text.StringBuilder> and <xref:System.String> objects use UTF-16 encoding to store characters, the index positions of characters, substrings, and regular expression matches are the same in both objects. This enables you to use <xref:System.Text.StringBuilder> methods to make changes at the same position at which that text is found in the <xref:System.String> object.  \n  \n    > [!NOTE]\n    >  If you adopt this approach, you should work from the end of the <xref:System.Text.StringBuilder> object to its beginning so that you don't have to repeatedly convert the <xref:System.Text.StringBuilder> object to a string.  \n  \n     The following example illustrates this approach. It stores four occurrences of each letter of the English alphabet in a <xref:System.Text.StringBuilder> object. It then converts the text to a <xref:System.String> object and uses a regular expression to identify the starting position of each four-character sequence. Finally, it adds an underscore before each four-character sequence except for the first sequence, and converts the first character of the sequence to uppercase.  \n  \n     [!code-csharp[System.Text.StringBuilder.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern2.cs#13)]\n     [!code-vb[System.Text.StringBuilder.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern2.vb#13)]  \n  \n-   Use the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property to sequentially search a range of characters in a <xref:System.Text.StringBuilder> object. This approach may not be practical if the number of characters to be searched is large or the search logic is particularly complex.  \n  \n     The following example is identical in functionality to the previous example but differs in implementation. It uses the <xref:System.Text.StringBuilder.Chars%2A> property to detect when a character value has changed, inserts an underscore at that position, and converts the first character in the new sequence to uppercase.  \n  \n     [!code-csharp[System.Text.StringBuilder.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern3.cs#14)]\n     [!code-vb[System.Text.StringBuilder.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern3.vb#14)]  \n  \n-   Store all the unmodified text in the <xref:System.Text.StringBuilder> object, call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object, and perform the modifications on the <xref:System.String> object. You can use this approach if you have only a few modifications; otherwise, the cost of working with immutable strings may negate the performance benefits of using a <xref:System.Text.StringBuilder> object.  \n  \n     The following example is identical in functionality to the previous two examples but differs in implementation. It creates a <xref:System.Text.StringBuilder> object, converts it to a <xref:System.String> object, and then uses a regular expression to perform all remaining modifications on the string. The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method uses a lambda expression to perform the replacement on each match.  \n  \n     [!code-csharp[System.Text.StringBuilder.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern4.cs#15)]\n     [!code-vb[System.Text.StringBuilder.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern4.vb#15)]  \n  \n<a name=\"Converting\"></a>   \n## Converting the StringBuilder object to a string  \n You must convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface. You perform this conversion by calling the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method. For an illustration, see the previous example, which calls the <xref:System.Text.StringBuilder.ToString%2A> method to convert a <xref:System.Text.StringBuilder> object to a string so that it can be passed to a regular expression method.","nodes":[{"pos":[2,417],"content":"[!NOTE]\n To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","leadings":["","> "],"nodes":[{"content":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).","pos":[8,413],"nodes":[{"content":"To view the .NET Framework source code for this type, see the <bpt id=\"p1\">[</bpt>Reference Source<ept id=\"p1\">](http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f)</ept>.","pos":[1,176],"source":" To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f)."},{"content":"You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <bpt id=\"p1\">[</bpt>instructions<ept id=\"p1\">](http://referencesource.microsoft.com/)</ept>.","pos":[177,405],"source":" You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/)."}]}]},{"pos":[424,515],"content":"This class represents a string-like object whose value is a mutable sequence of characters.","nodes":[{"content":"This class represents a string-like object whose value is a mutable sequence of characters.","pos":[0,91]}]},{"pos":[522,538],"content":"In this section:","nodes":[{"content":"In this section:","pos":[0,16]}]},{"pos":[548,598],"content":"<bpt id=\"p1\">[</bpt>The String and StringBuilder types<ept id=\"p1\">](#StringAndSB)</ept>","source":"[The String and StringBuilder types](#StringAndSB)"},{"pos":[608,644],"content":"<bpt id=\"p1\">[</bpt>How StringBuilder works<ept id=\"p1\">](#HowWorks)</ept>","source":"[How StringBuilder works](#HowWorks)"},{"pos":[654,682],"content":"<bpt id=\"p1\">[</bpt>Memory allocation<ept id=\"p1\">](#Memory)</ept>","source":"[Memory allocation](#Memory)"},{"pos":[692,746],"content":"<bpt id=\"p1\">[</bpt>Instantiating a StringBuilder object<ept id=\"p1\">](#Instantiating)</ept>","source":"[Instantiating a StringBuilder object](#Instantiating)"},{"pos":[756,797],"content":"<bpt id=\"p1\">[</bpt>Calling StringBuilder methods<ept id=\"p1\">](#Calling)</ept>","source":"[Calling StringBuilder methods](#Calling)"},{"pos":[807,857],"content":"<bpt id=\"p1\">[</bpt>Performing StringBuilder operations<ept id=\"p1\">](#Operations)</ept>","source":"[Performing StringBuilder operations](#Operations)"},{"pos":[871,919],"content":"<bpt id=\"p1\">[</bpt>Iterating StringBuilder characters<ept id=\"p1\">](#Iterating)</ept>","source":"[Iterating StringBuilder characters](#Iterating)"},{"pos":[933,981],"content":"<bpt id=\"p1\">[</bpt>Adding text to a StringBuilder object<ept id=\"p1\">](#Adding)</ept>","source":"[Adding text to a StringBuilder object](#Adding)"},{"pos":[995,1049],"content":"<bpt id=\"p1\">[</bpt>Deleting text from a StringBuilder object<ept id=\"p1\">](#Deleting)</ept>","source":"[Deleting text from a StringBuilder object](#Deleting)"},{"pos":[1063,1121],"content":"<bpt id=\"p1\">[</bpt>Modifying the text in a StringBuilder object<ept id=\"p1\">](#Modifying)</ept>","source":"[Modifying the text in a StringBuilder object](#Modifying)"},{"pos":[1131,1189],"content":"<bpt id=\"p1\">[</bpt>Searching the text in a StringBuilder object<ept id=\"p1\">](#Searching)</ept>","source":"[Searching the text in a StringBuilder object](#Searching)"},{"pos":[1199,1261],"content":"<bpt id=\"p1\">[</bpt>Converting the StringBuilder object to a string<ept id=\"p1\">](#Converting)</ept>","source":"[Converting the StringBuilder object to a string](#Converting)"},{"pos":[1300,1334],"content":"The String and StringBuilder types","linkify":"The String and StringBuilder types","nodes":[{"content":"The String and StringBuilder types","pos":[0,34]}]},{"pos":[1338,1629],"content":"Although <xref:System.Text.StringBuilder> and <xref:System.String> both represent sequences of characters, they are implemented differently. <xref:System.String> is an immutable type. That is, each operation that appears to modify a <xref:System.String> object actually creates a new string.","nodes":[{"content":"Although <xref:System.Text.StringBuilder> and <xref:System.String> both represent sequences of characters, they are implemented differently. <xref:System.String> is an immutable type. That is, each operation that appears to modify a <xref:System.String> object actually creates a new string.","pos":[0,291],"nodes":[{"content":"Although <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> both represent sequences of characters, they are implemented differently.","pos":[0,140],"source":"Although <xref:System.Text.StringBuilder> and <xref:System.String> both represent sequences of characters, they are implemented differently."},{"content":"<ph id=\"ph1\">&lt;xref:System.String&gt;</ph> is an immutable type.","pos":[141,183],"source":" <xref:System.String> is an immutable type."},{"content":"That is, each operation that appears to modify a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object actually creates a new string.","pos":[184,291],"source":" That is, each operation that appears to modify a <xref:System.String> object actually creates a new string."}]}]},{"pos":[1636,2065],"content":"For example, the call to the <xref:System.String.Concat%2A?displayProperty=fullName> method in the following C# example appears to change the value of a string variable named `value`. In fact, the <xref:System.String.Concat%2A> method returns a `value` object that has a different value and address from the `value` object that was passed to the method. Note that the example must be compiled using the `/unsafe` compiler option.","nodes":[{"content":"For example, the call to the <ph id=\"ph1\">&lt;xref:System.String.Concat%2A?displayProperty=fullName&gt;</ph> method in the following C# example appears to change the value of a string variable named <ph id=\"ph2\">`value`</ph>.","pos":[0,183],"source":"For example, the call to the <xref:System.String.Concat%2A?displayProperty=fullName> method in the following C# example appears to change the value of a string variable named `value`."},{"content":"In fact, the <ph id=\"ph1\">&lt;xref:System.String.Concat%2A&gt;</ph> method returns a <ph id=\"ph2\">`value`</ph> object that has a different value and address from the <ph id=\"ph3\">`value`</ph> object that was passed to the method.","pos":[184,353],"source":" In fact, the <xref:System.String.Concat%2A> method returns a `value` object that has a different value and address from the `value` object that was passed to the method."},{"content":"Note that the example must be compiled using the <ph id=\"ph1\">`/unsafe`</ph> compiler option.","pos":[354,429],"source":" Note that the example must be compiled using the `/unsafe` compiler option."}]},{"pos":[2072,2225],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/immutability2.cs#1)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/immutability2.cs#1)]"},{"pos":[2232,2983],"content":"For routines that perform extensive string manipulation (such as apps that modify a string numerous times in a loop), modifying a string repeatedly can exact a significant performance penalty. The alternative is to use <xref:System.Text.StringBuilder>, which is a mutable string class. Mutability means that once an instance of the class has been created, it can be modified by appending, removing, replacing, or inserting characters. A <xref:System.Text.StringBuilder> object maintains a buffer to accommodate expansions to the string. New data is appended to the buffer if room is available; otherwise, a new, larger buffer is allocated, data from the original buffer is copied to the new buffer, and the new data is then appended to the new buffer.","nodes":[{"content":"For routines that perform extensive string manipulation (such as apps that modify a string numerous times in a loop), modifying a string repeatedly can exact a significant performance penalty. The alternative is to use <xref:System.Text.StringBuilder>, which is a mutable string class. Mutability means that once an instance of the class has been created, it can be modified by appending, removing, replacing, or inserting characters. A <xref:System.Text.StringBuilder> object maintains a buffer to accommodate expansions to the string. New data is appended to the buffer if room is available; otherwise, a new, larger buffer is allocated, data from the original buffer is copied to the new buffer, and the new data is then appended to the new buffer.","pos":[0,751],"nodes":[{"content":"For routines that perform extensive string manipulation (such as apps that modify a string numerous times in a loop), modifying a string repeatedly can exact a significant performance penalty.","pos":[0,192]},{"content":"The alternative is to use <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph>, which is a mutable string class.","pos":[193,285],"source":" The alternative is to use <xref:System.Text.StringBuilder>, which is a mutable string class."},{"content":"Mutability means that once an instance of the class has been created, it can be modified by appending, removing, replacing, or inserting characters.","pos":[286,434]},{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object maintains a buffer to accommodate expansions to the string.","pos":[435,536],"source":" A <xref:System.Text.StringBuilder> object maintains a buffer to accommodate expansions to the string."},{"content":"New data is appended to the buffer if room is available; otherwise, a new, larger buffer is allocated, data from the original buffer is copied to the new buffer, and the new data is then appended to the new buffer.","pos":[537,751]}]}]},{"pos":[2991,3591],"content":"[!IMPORTANT]\n Although the <xref:System.Text.StringBuilder> class generally offers better performance than the <xref:System.String> class, you should not automatically replace <xref:System.String> with <xref:System.Text.StringBuilder> whenever you want to manipulate strings. Performance depends on the size of the string, the amount of memory to be allocated for the new string, the system on which your app is executing, and the type of operation. You should be prepared to test your app to determine whether <xref:System.Text.StringBuilder> actually offers a significant performance improvement.","leadings":["","> "],"nodes":[{"content":" Although the <xref:System.Text.StringBuilder> class generally offers better performance than the <xref:System.String> class, you should not automatically replace <xref:System.String> with <xref:System.Text.StringBuilder> whenever you want to manipulate strings. Performance depends on the size of the string, the amount of memory to be allocated for the new string, the system on which your app is executing, and the type of operation. You should be prepared to test your app to determine whether <xref:System.Text.StringBuilder> actually offers a significant performance improvement.","pos":[13,598],"nodes":[{"content":"Although the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class generally offers better performance than the <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> class, you should not automatically replace <ph id=\"ph3\">&lt;xref:System.String&gt;</ph> with <ph id=\"ph4\">&lt;xref:System.Text.StringBuilder&gt;</ph> whenever you want to manipulate strings.","pos":[1,262],"source":" Although the <xref:System.Text.StringBuilder> class generally offers better performance than the <xref:System.String> class, you should not automatically replace <xref:System.String> with <xref:System.Text.StringBuilder> whenever you want to manipulate strings."},{"content":"Performance depends on the size of the string, the amount of memory to be allocated for the new string, the system on which your app is executing, and the type of operation.","pos":[263,436]},{"content":"You should be prepared to test your app to determine whether <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> actually offers a significant performance improvement.","pos":[437,585],"source":" You should be prepared to test your app to determine whether <xref:System.Text.StringBuilder> actually offers a significant performance improvement."}]}]},{"pos":[3598,3667],"content":"Consider using the <xref:System.String> class under these conditions:","nodes":[{"content":"Consider using the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class under these conditions:","pos":[0,69],"source":"Consider using the <xref:System.String> class under these conditions:"}]},{"pos":[3677,3878],"content":"When the number of changes that your app will make to a string is small. In these cases, <xref:System.Text.StringBuilder> might offer negligible or no performance improvement over <xref:System.String>.","nodes":[{"content":"When the number of changes that your app will make to a string is small. In these cases, <xref:System.Text.StringBuilder> might offer negligible or no performance improvement over <xref:System.String>.","pos":[0,201],"nodes":[{"content":"When the number of changes that your app will make to a string is small.","pos":[0,72]},{"content":"In these cases, <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> might offer negligible or no performance improvement over <ph id=\"ph2\">&lt;xref:System.String&gt;</ph>.","pos":[73,201],"source":" In these cases, <xref:System.Text.StringBuilder> might offer negligible or no performance improvement over <xref:System.String>."}]}]},{"pos":[3888,4085],"content":"When you are performing a fixed number of concatenation operations, particularly with string literals. In this case, the compiler might combine the concatenation operations into a single operation.","nodes":[{"content":"When you are performing a fixed number of concatenation operations, particularly with string literals. In this case, the compiler might combine the concatenation operations into a single operation.","pos":[0,197],"nodes":[{"content":"When you are performing a fixed number of concatenation operations, particularly with string literals.","pos":[0,102]},{"content":"In this case, the compiler might combine the concatenation operations into a single operation.","pos":[103,197]}]}]},{"pos":[4095,4584],"content":"When you have to perform extensive search operations while you are building your string. The <xref:System.Text.StringBuilder> class lacks search methods such as `IndexOf` or `StartsWith`. You'll have to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> for these operations, and this can negate the performance benefit from using <xref:System.Text.StringBuilder>. For more information, see the [Searching the text in a StringBuilder object](#Searching) section.","nodes":[{"content":"When you have to perform extensive search operations while you are building your string.","pos":[0,88]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class lacks search methods such as <ph id=\"ph2\">`IndexOf`</ph> or <ph id=\"ph3\">`StartsWith`</ph>.","pos":[89,187],"source":" The <xref:System.Text.StringBuilder> class lacks search methods such as `IndexOf` or `StartsWith`."},{"content":"You'll have to convert the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> for these operations, and this can negate the performance benefit from using <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph>.","pos":[188,391],"source":" You'll have to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> for these operations, and this can negate the performance benefit from using <xref:System.Text.StringBuilder>."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Searching the text in a StringBuilder object<ept id=\"p1\">](#Searching)</ept> section.","pos":[392,489],"source":" For more information, see the [Searching the text in a StringBuilder object](#Searching) section."}]},{"pos":[4591,4672],"content":"Consider using the <xref:System.Text.StringBuilder> class under these conditions:","nodes":[{"content":"Consider using the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class under these conditions:","pos":[0,81],"source":"Consider using the <xref:System.Text.StringBuilder> class under these conditions:"}]},{"pos":[4682,4878],"content":"When you expect your app to make an unknown number of changes to a string at design time (for example, when you are using a loop to concatenate a random number of strings that contain user input).","nodes":[{"content":"When you expect your app to make an unknown number of changes to a string at design time (for example, when you are using a loop to concatenate a random number of strings that contain user input).","pos":[0,196]}]},{"pos":[4888,4965],"content":"When you expect your app to make a significant number of changes to a string.","nodes":[{"content":"When you expect your app to make a significant number of changes to a string.","pos":[0,77]}]},{"pos":[5001,5024],"content":"How StringBuilder works","linkify":"How StringBuilder works","nodes":[{"content":"How StringBuilder works","pos":[0,23]}]},{"pos":[5028,6382],"content":"The <xref:System.Text.StringBuilder.Length%2A?displayProperty=fullName> property indicates the number of characters the <xref:System.Text.StringBuilder> object currently contains. If you add characters to the <xref:System.Text.StringBuilder> object, its length increases until it equals the size of the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property, which defines the number of characters that the object can contain. If the number of added characters causes the length of the <xref:System.Text.StringBuilder> object to exceed its current capacity, new memory is allocated, the value of the <xref:System.Text.StringBuilder.Capacity%2A> property is doubled, new characters are added to the <xref:System.Text.StringBuilder> object, and its <xref:System.Text.StringBuilder.Length%2A> property is adjusted. Additional memory for the <xref:System.Text.StringBuilder> object is allocated dynamically until it reaches the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=fullName> property. When the maximum capacity is reached, no further memory can be allocated for the <xref:System.Text.StringBuilder> object, and trying to add characters or expand it beyond its maximum capacity throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.OutOfMemoryException> exception.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Length%2A?displayProperty=fullName> property indicates the number of characters the <xref:System.Text.StringBuilder> object currently contains. If you add characters to the <xref:System.Text.StringBuilder> object, its length increases until it equals the size of the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property, which defines the number of characters that the object can contain. If the number of added characters causes the length of the <xref:System.Text.StringBuilder> object to exceed its current capacity, new memory is allocated, the value of the <xref:System.Text.StringBuilder.Capacity%2A> property is doubled, new characters are added to the <xref:System.Text.StringBuilder> object, and its <xref:System.Text.StringBuilder.Length%2A> property is adjusted. Additional memory for the <xref:System.Text.StringBuilder> object is allocated dynamically until it reaches the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=fullName> property. When the maximum capacity is reached, no further memory can be allocated for the <xref:System.Text.StringBuilder> object, and trying to add characters or expand it beyond its maximum capacity throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.OutOfMemoryException> exception.","pos":[0,1354],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Length%2A?displayProperty=fullName&gt;</ph> property indicates the number of characters the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object currently contains.","pos":[0,179],"source":"The <xref:System.Text.StringBuilder.Length%2A?displayProperty=fullName> property indicates the number of characters the <xref:System.Text.StringBuilder> object currently contains."},{"content":"If you add characters to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, its length increases until it equals the size of the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName&gt;</ph> property, which defines the number of characters that the object can contain.","pos":[180,450],"source":" If you add characters to the <xref:System.Text.StringBuilder> object, its length increases until it equals the size of the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property, which defines the number of characters that the object can contain."},{"content":"If the number of added characters causes the length of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to exceed its current capacity, new memory is allocated, the value of the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property is doubled, new characters are added to the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, and its <ph id=\"ph4\">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property is adjusted.","pos":[451,835],"source":" If the number of added characters causes the length of the <xref:System.Text.StringBuilder> object to exceed its current capacity, new memory is allocated, the value of the <xref:System.Text.StringBuilder.Capacity%2A> property is doubled, new characters are added to the <xref:System.Text.StringBuilder> object, and its <xref:System.Text.StringBuilder.Length%2A> property is adjusted."},{"content":"Additional memory for the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is allocated dynamically until it reaches the value defined by the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=fullName&gt;</ph> property.","pos":[836,1051],"source":" Additional memory for the <xref:System.Text.StringBuilder> object is allocated dynamically until it reaches the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=fullName> property."},{"content":"When the maximum capacity is reached, no further memory can be allocated for the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, and trying to add characters or expand it beyond its maximum capacity throws either an <ph id=\"ph2\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph> or an <ph id=\"ph3\">&lt;xref:System.OutOfMemoryException&gt;</ph> exception.","pos":[1052,1354],"source":" When the maximum capacity is reached, no further memory can be allocated for the <xref:System.Text.StringBuilder> object, and trying to add characters or expand it beyond its maximum capacity throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.OutOfMemoryException> exception."}]}]},{"pos":[6389,7489],"content":"The following example illustrates how a <xref:System.Text.StringBuilder> object allocates new memory and increases its capacity dynamically as the string assigned to the object expands. The code creates a <xref:System.Text.StringBuilder> object by calling its default (parameterless) constructor. The default capacity of this object is 16 characters, and its maximum capacity is more than 2 billion characters. Appending the string \"This is a sentence.\" results in a new memory allocation because the string length (19 characters) exceeds the default capacity of the <xref:System.Text.StringBuilder> object. The capacity of the object doubles to 32 characters, the new string is added, and the length of the object now equals 19 characters. The code then appends the string \"This is an additional sentence.\" to the value of the <xref:System.Text.StringBuilder> object 11 times. Whenever the append operation causes the length of the <xref:System.Text.StringBuilder> object to exceed its capacity, its existing capacity is doubled and the <xref:System.Text.StringBuilder.Append%2A> operation succeeds.","nodes":[{"content":"The following example illustrates how a <xref:System.Text.StringBuilder> object allocates new memory and increases its capacity dynamically as the string assigned to the object expands. The code creates a <xref:System.Text.StringBuilder> object by calling its default (parameterless) constructor. The default capacity of this object is 16 characters, and its maximum capacity is more than 2 billion characters. Appending the string \"This is a sentence.\" results in a new memory allocation because the string length (19 characters) exceeds the default capacity of the <xref:System.Text.StringBuilder> object. The capacity of the object doubles to 32 characters, the new string is added, and the length of the object now equals 19 characters. The code then appends the string \"This is an additional sentence.\" to the value of the <xref:System.Text.StringBuilder> object 11 times. Whenever the append operation causes the length of the <xref:System.Text.StringBuilder> object to exceed its capacity, its existing capacity is doubled and the <xref:System.Text.StringBuilder.Append%2A> operation succeeds.","pos":[0,1100],"nodes":[{"content":"The following example illustrates how a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object allocates new memory and increases its capacity dynamically as the string assigned to the object expands.","pos":[0,185],"source":"The following example illustrates how a <xref:System.Text.StringBuilder> object allocates new memory and increases its capacity dynamically as the string assigned to the object expands."},{"content":"The code creates a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object by calling its default (parameterless) constructor.","pos":[186,296],"source":" The code creates a <xref:System.Text.StringBuilder> object by calling its default (parameterless) constructor."},{"content":"The default capacity of this object is 16 characters, and its maximum capacity is more than 2 billion characters.","pos":[297,410]},{"content":"Appending the string \"This is a sentence.\"","pos":[411,453]},{"content":"results in a new memory allocation because the string length (19 characters) exceeds the default capacity of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[454,607],"source":" results in a new memory allocation because the string length (19 characters) exceeds the default capacity of the <xref:System.Text.StringBuilder> object."},{"content":"The capacity of the object doubles to 32 characters, the new string is added, and the length of the object now equals 19 characters.","pos":[608,740]},{"content":"The code then appends the string \"This is an additional sentence.\"","pos":[741,807]},{"content":"to the value of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object 11 times.","pos":[808,877],"source":" to the value of the <xref:System.Text.StringBuilder> object 11 times."},{"content":"Whenever the append operation causes the length of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to exceed its capacity, its existing capacity is doubled and the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> operation succeeds.","pos":[878,1100],"source":" Whenever the append operation causes the length of the <xref:System.Text.StringBuilder> object to exceed its capacity, its existing capacity is doubled and the <xref:System.Text.StringBuilder.Append%2A> operation succeeds."}]}]},{"pos":[7496,7795],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/default1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/default1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/default1.cs#3)]\n [!code-vb[System.Text.StringBuilder.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/default1.vb#3)]"},{"pos":[7829,7846],"content":"Memory allocation","linkify":"Memory allocation","nodes":[{"content":"Memory allocation","pos":[0,17]}]},{"pos":[7850,8189],"content":"The default capacity of a <xref:System.Text.StringBuilder> object is 16 characters, and its default maximum capacity is <xref:System.Int32.MaxValue?displayProperty=fullName>. These default values are used if you call the <xref:System.Text.StringBuilder.%23ctor> and <xref:System.Text.StringBuilder.%23ctor%28System.String%29> constructors.","nodes":[{"content":"The default capacity of a <xref:System.Text.StringBuilder> object is 16 characters, and its default maximum capacity is <xref:System.Int32.MaxValue?displayProperty=fullName>. These default values are used if you call the <xref:System.Text.StringBuilder.%23ctor> and <xref:System.Text.StringBuilder.%23ctor%28System.String%29> constructors.","pos":[0,339],"nodes":[{"content":"The default capacity of a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is 16 characters, and its default maximum capacity is <ph id=\"ph2\">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph>.","pos":[0,174],"source":"The default capacity of a <xref:System.Text.StringBuilder> object is 16 characters, and its default maximum capacity is <xref:System.Int32.MaxValue?displayProperty=fullName>."},{"content":"These default values are used if you call the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.%23ctor&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.%23ctor%28System.String%29&gt;</ph> constructors.","pos":[175,339],"source":" These default values are used if you call the <xref:System.Text.StringBuilder.%23ctor> and <xref:System.Text.StringBuilder.%23ctor%28System.String%29> constructors."}]}]},{"pos":[8196,8310],"content":"You can explicitly define the initial capacity of a <xref:System.Text.StringBuilder> object in the following ways:","nodes":[{"content":"You can explicitly define the initial capacity of a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object in the following ways:","pos":[0,114],"source":"You can explicitly define the initial capacity of a <xref:System.Text.StringBuilder> object in the following ways:"}]},{"pos":[8320,8452],"content":"By calling any of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> constructors that includes a <ph id=\"ph2\">`capacity`</ph> parameter when you create the object.","source":"By calling any of the <xref:System.Text.StringBuilder> constructors that includes a `capacity` parameter when you create the object."},{"pos":[8462,8824],"content":"By explicitly assigning a new value to the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property to expand an existing <xref:System.Text.StringBuilder> object. Note that the property throws an exception if the new capacity is less than the existing capacity or greater than the <xref:System.Text.StringBuilder> object's maximum capacity.","nodes":[{"content":"By explicitly assigning a new value to the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property to expand an existing <xref:System.Text.StringBuilder> object. Note that the property throws an exception if the new capacity is less than the existing capacity or greater than the <xref:System.Text.StringBuilder> object's maximum capacity.","pos":[0,362],"nodes":[{"content":"By explicitly assigning a new value to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName&gt;</ph> property to expand an existing <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,184],"source":"By explicitly assigning a new value to the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property to expand an existing <xref:System.Text.StringBuilder> object."},{"content":"Note that the property throws an exception if the new capacity is less than the existing capacity or greater than the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object's maximum capacity.","pos":[185,362],"source":" Note that the property throws an exception if the new capacity is less than the existing capacity or greater than the <xref:System.Text.StringBuilder> object's maximum capacity."}]}]},{"pos":[8834,9340],"content":"By calling the <xref:System.Text.StringBuilder.EnsureCapacity%2A?displayProperty=fullName> method with the new capacity. The new capacity must not be greater than the <xref:System.Text.StringBuilder> object's maximum capacity. However, unlike an assignment to the <xref:System.Text.StringBuilder.Capacity%2A> property, <xref:System.Text.StringBuilder.EnsureCapacity%2A> does not throw an exception if the desired new capacity is less than the existing capacity; in this case, the method call has no effect.","nodes":[{"content":"By calling the <xref:System.Text.StringBuilder.EnsureCapacity%2A?displayProperty=fullName> method with the new capacity. The new capacity must not be greater than the <xref:System.Text.StringBuilder> object's maximum capacity. However, unlike an assignment to the <xref:System.Text.StringBuilder.Capacity%2A> property, <xref:System.Text.StringBuilder.EnsureCapacity%2A> does not throw an exception if the desired new capacity is less than the existing capacity; in this case, the method call has no effect.","pos":[0,506],"nodes":[{"content":"By calling the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.EnsureCapacity%2A?displayProperty=fullName&gt;</ph> method with the new capacity.","pos":[0,120],"source":"By calling the <xref:System.Text.StringBuilder.EnsureCapacity%2A?displayProperty=fullName> method with the new capacity."},{"content":"The new capacity must not be greater than the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object's maximum capacity.","pos":[121,226],"source":" The new capacity must not be greater than the <xref:System.Text.StringBuilder> object's maximum capacity."},{"content":"However, unlike an assignment to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property, <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.EnsureCapacity%2A&gt;</ph> does not throw an exception if the desired new capacity is less than the existing capacity; in this case, the method call has no effect.","pos":[227,506],"source":" However, unlike an assignment to the <xref:System.Text.StringBuilder.Capacity%2A> property, <xref:System.Text.StringBuilder.EnsureCapacity%2A> does not throw an exception if the desired new capacity is less than the existing capacity; in this case, the method call has no effect."}]}]},{"pos":[9347,9648],"content":"If the length of the string assigned to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object in the constructor call exceeds either the default capacity or the specified capacity, the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property is set to the length of the string specified with the <ph id=\"ph3\">`value`</ph> parameter.","source":"If the length of the string assigned to the <xref:System.Text.StringBuilder> object in the constructor call exceeds either the default capacity or the specified capacity, the <xref:System.Text.StringBuilder.Capacity%2A> property is set to the length of the string specified with the `value` parameter."},{"pos":[9655,10001],"content":"You can explicitly define the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor. You can't change the maximum capacity by assigning a new value to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property, because it is read-only.","nodes":[{"content":"You can explicitly define the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor. You can't change the maximum capacity by assigning a new value to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property, because it is read-only.","pos":[0,346],"nodes":[{"content":"You can explicitly define the maximum capacity of a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object by calling the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor.","pos":[0,193],"source":"You can explicitly define the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor."},{"content":"You can't change the maximum capacity by assigning a new value to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property, because it is read-only.","pos":[194,346],"source":" You can't change the maximum capacity by assigning a new value to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property, because it is read-only."}]}]},{"pos":[10008,10274],"content":"As the previous section shows, whenever the existing capacity is inadequate, additional memory is allocated and the capacity of a <xref:System.Text.StringBuilder> object doubles up to the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A> property.","nodes":[{"content":"As the previous section shows, whenever the existing capacity is inadequate, additional memory is allocated and the capacity of a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object doubles up to the value defined by the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property.","pos":[0,266],"source":"As the previous section shows, whenever the existing capacity is inadequate, additional memory is allocated and the capacity of a <xref:System.Text.StringBuilder> object doubles up to the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A> property."}]},{"pos":[10281,10434],"content":"In general, the default capacity and maximum capacity are adequate for most apps. You might consider setting these values under the following conditions:","nodes":[{"content":"In general, the default capacity and maximum capacity are adequate for most apps. You might consider setting these values under the following conditions:","pos":[0,153],"nodes":[{"content":"In general, the default capacity and maximum capacity are adequate for most apps.","pos":[0,81]},{"content":"You might consider setting these values under the following conditions:","pos":[82,153]}]}]},{"pos":[10444,10808],"content":"If the eventual size of the <xref:System.Text.StringBuilder> object is likely to grow exceedingly large, typically in excess of several megabytes. In this case, there may be some performance benefit from setting the initial <xref:System.Text.StringBuilder.Capacity%2A> property to a significantly high value to eliminate the need for too many memory reallocations.","nodes":[{"content":"If the eventual size of the <xref:System.Text.StringBuilder> object is likely to grow exceedingly large, typically in excess of several megabytes. In this case, there may be some performance benefit from setting the initial <xref:System.Text.StringBuilder.Capacity%2A> property to a significantly high value to eliminate the need for too many memory reallocations.","pos":[0,364],"nodes":[{"content":"If the eventual size of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is likely to grow exceedingly large, typically in excess of several megabytes.","pos":[0,146],"source":"If the eventual size of the <xref:System.Text.StringBuilder> object is likely to grow exceedingly large, typically in excess of several megabytes."},{"content":"In this case, there may be some performance benefit from setting the initial <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property to a significantly high value to eliminate the need for too many memory reallocations.","pos":[147,364],"source":" In this case, there may be some performance benefit from setting the initial <xref:System.Text.StringBuilder.Capacity%2A> property to a significantly high value to eliminate the need for too many memory reallocations."}]}]},{"pos":[10818,11152],"content":"If your app is running on a system with limited memory. In this case, you may want to consider setting the <xref:System.Text.StringBuilder.MaxCapacity%2A> property to less than <xref:System.Int32.MaxValue?displayProperty=fullName> if your app is handling large strings that may cause it to execute in a memory-constrained environment.","nodes":[{"content":"If your app is running on a system with limited memory. In this case, you may want to consider setting the <xref:System.Text.StringBuilder.MaxCapacity%2A> property to less than <xref:System.Int32.MaxValue?displayProperty=fullName> if your app is handling large strings that may cause it to execute in a memory-constrained environment.","pos":[0,334],"nodes":[{"content":"If your app is running on a system with limited memory.","pos":[0,55]},{"content":"In this case, you may want to consider setting the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property to less than <ph id=\"ph2\">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph> if your app is handling large strings that may cause it to execute in a memory-constrained environment.","pos":[56,334],"source":" In this case, you may want to consider setting the <xref:System.Text.StringBuilder.MaxCapacity%2A> property to less than <xref:System.Int32.MaxValue?displayProperty=fullName> if your app is handling large strings that may cause it to execute in a memory-constrained environment."}]}]},{"pos":[11193,11229],"content":"Instantiating a StringBuilder object","linkify":"Instantiating a StringBuilder object","nodes":[{"content":"Instantiating a StringBuilder object","pos":[0,36]}]},{"pos":[11233,11937],"content":"You instantiate a <xref:System.Text.StringBuilder> object by calling one of its six overloaded class constructors, which are listed in the following table. Three of the constructors instantiate a <xref:System.Text.StringBuilder> object whose value is an empty string, but set its <xref:System.Text.StringBuilder.Capacity%2A> and <xref:System.Text.StringBuilder.MaxCapacity%2A> values differently. The remaining three constructors define a <xref:System.Text.StringBuilder> object that has a specific string value and capacity. Two of the three constructors use the default maximum capacity of <xref:System.Int32.MaxValue?displayProperty=fullName>, whereas the third allows you to set the maximum capacity.","nodes":[{"content":"You instantiate a <xref:System.Text.StringBuilder> object by calling one of its six overloaded class constructors, which are listed in the following table. Three of the constructors instantiate a <xref:System.Text.StringBuilder> object whose value is an empty string, but set its <xref:System.Text.StringBuilder.Capacity%2A> and <xref:System.Text.StringBuilder.MaxCapacity%2A> values differently. The remaining three constructors define a <xref:System.Text.StringBuilder> object that has a specific string value and capacity. Two of the three constructors use the default maximum capacity of <xref:System.Int32.MaxValue?displayProperty=fullName>, whereas the third allows you to set the maximum capacity.","pos":[0,704],"nodes":[{"content":"You instantiate a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object by calling one of its six overloaded class constructors, which are listed in the following table.","pos":[0,155],"source":"You instantiate a <xref:System.Text.StringBuilder> object by calling one of its six overloaded class constructors, which are listed in the following table."},{"content":"Three of the constructors instantiate a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object whose value is an empty string, but set its <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> values differently.","pos":[156,396],"source":" Three of the constructors instantiate a <xref:System.Text.StringBuilder> object whose value is an empty string, but set its <xref:System.Text.StringBuilder.Capacity%2A> and <xref:System.Text.StringBuilder.MaxCapacity%2A> values differently."},{"content":"The remaining three constructors define a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object that has a specific string value and capacity.","pos":[397,525],"source":" The remaining three constructors define a <xref:System.Text.StringBuilder> object that has a specific string value and capacity."},{"content":"Two of the three constructors use the default maximum capacity of <ph id=\"ph1\">&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;</ph>, whereas the third allows you to set the maximum capacity.","pos":[526,704],"source":" Two of the three constructors use the default maximum capacity of <xref:System.Int32.MaxValue?displayProperty=fullName>, whereas the third allows you to set the maximum capacity."}]}]},{"pos":[11944,11955],"content":"Constructor","nodes":[{"content":"Constructor","pos":[0,11]}]},{"pos":[11956,11968],"content":"String value","nodes":[{"content":"String value","pos":[0,12]}]},{"pos":[11969,11977],"content":"Capacity","nodes":[{"content":"Capacity","pos":[0,8]}]},{"pos":[11978,11994],"content":"Maximum capacity","nodes":[{"content":"Maximum capacity","pos":[0,16]}]},{"pos":[12078,12118],"content":"<xref:System.Text.StringBuilder.%23ctor>","nodes":[]},{"pos":[12119,12170],"content":"<xref:System.String.Empty?displayProperty=fullName>","nodes":[]},{"pos":[12171,12173],"content":"16","nodes":[{"content":"16","pos":[0,2]}]},{"pos":[12174,12227],"content":"<xref:System.Int32.MaxValue?displayProperty=fullName>","nodes":[]},{"pos":[12232,12290],"content":"<xref:System.Text.StringBuilder.%23ctor%28System.Int32%29>","nodes":[]},{"pos":[12291,12342],"content":"<xref:System.String.Empty?displayProperty=fullName>","nodes":[]},{"pos":[12343,12378],"content":"Defined by the <ph id=\"ph1\">`capacity`</ph> parameter","source":"Defined by the `capacity` parameter"},{"pos":[12379,12432],"content":"<xref:System.Int32.MaxValue?displayProperty=fullName>","nodes":[]},{"pos":[12437,12510],"content":"<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29>","nodes":[]},{"pos":[12511,12562],"content":"<xref:System.String.Empty?displayProperty=fullName>","nodes":[]},{"pos":[12563,12598],"content":"Defined by the <ph id=\"ph1\">`capacity`</ph> parameter","source":"Defined by the `capacity` parameter"},{"pos":[12599,12637],"content":"Defined by the <ph id=\"ph1\">`maxCapacity`</ph> parameter","source":"Defined by the `maxCapacity` parameter"},{"pos":[12642,12701],"content":"<xref:System.Text.StringBuilder.%23ctor%28System.String%29>","nodes":[]},{"pos":[12702,12734],"content":"Defined by the <ph id=\"ph1\">`value`</ph> parameter","source":"Defined by the `value` parameter"},{"pos":[12735,12802],"content":"16 or `value`. <xref:System.String.Length%2A>, whichever is greater","nodes":[{"content":"16 or <ph id=\"ph1\">`value`</ph>.","pos":[0,14],"source":"16 or `value`."},{"content":"<ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph>, whichever is greater","pos":[15,67],"source":" <xref:System.String.Length%2A>, whichever is greater"}]},{"pos":[12803,12856],"content":"<xref:System.Int32.MaxValue?displayProperty=fullName>","nodes":[]},{"pos":[12861,12935],"content":"<xref:System.Text.StringBuilder.%23ctor%28System.String%2CSystem.Int32%29>","nodes":[]},{"pos":[12936,12968],"content":"Defined by the <ph id=\"ph1\">`value`</ph> parameter","source":"Defined by the `value` parameter"},{"pos":[12969,13070],"content":"Defined by the `capacity` parameter or `value`. <xref:System.String.Length%2A>, whichever is greater.","nodes":[{"content":"Defined by the <ph id=\"ph1\">`capacity`</ph> parameter or <ph id=\"ph2\">`value`</ph>.","pos":[0,47],"source":"Defined by the `capacity` parameter or `value`."},{"content":"<ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph>, whichever is greater.","pos":[48,101],"source":" <xref:System.String.Length%2A>, whichever is greater."}]},{"pos":[13071,13124],"content":"<xref:System.Int32.MaxValue?displayProperty=fullName>","nodes":[]},{"pos":[13129,13233],"content":"<xref:System.Text.StringBuilder.%23ctor%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>","nodes":[]},{"pos":[13234,13311],"content":"Defined by `value`. <xref:System.String.Substring%2A>(`startIndex`, `length`)","nodes":[{"content":"Defined by <ph id=\"ph1\">`value`</ph>.","pos":[0,19],"source":"Defined by `value`."},{"content":"<ph id=\"ph1\">&lt;xref:System.String.Substring%2A&gt;</ph>(<ph id=\"ph2\">`startIndex`</ph>, <ph id=\"ph3\">`length`</ph>)","pos":[20,77],"source":" <xref:System.String.Substring%2A>(`startIndex`, `length`)"}]},{"pos":[13312,13413],"content":"Defined by the `capacity` parameter or `value`. <xref:System.String.Length%2A>, whichever is greater.","nodes":[{"content":"Defined by the <ph id=\"ph1\">`capacity`</ph> parameter or <ph id=\"ph2\">`value`</ph>.","pos":[0,47],"source":"Defined by the `capacity` parameter or `value`."},{"content":"<ph id=\"ph1\">&lt;xref:System.String.Length%2A&gt;</ph>, whichever is greater.","pos":[48,101],"source":" <xref:System.String.Length%2A>, whichever is greater."}]},{"pos":[13414,13452],"content":"Defined by the <ph id=\"ph1\">`maxCapacity`</ph> parameter","source":"Defined by the `maxCapacity` parameter"},{"pos":[13460,13580],"content":"The following example uses three of these constructor overloads to instantiate <xref:System.Text.StringBuilder> objects.","nodes":[{"content":"The following example uses three of these constructor overloads to instantiate <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> objects.","pos":[0,120],"source":"The following example uses three of these constructor overloads to instantiate <xref:System.Text.StringBuilder> objects."}]},{"pos":[13587,13894],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/instantiate1.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/instantiate1.vb#6)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/instantiate1.cs#6)]\n [!code-vb[System.Text.StringBuilder.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/instantiate1.vb#6)]"},{"pos":[13929,13958],"content":"Calling StringBuilder methods","linkify":"Calling StringBuilder methods","nodes":[{"content":"Calling StringBuilder methods","pos":[0,29]}]},{"pos":[13962,14172],"content":"Most of the methods that modify the string in a <xref:System.Text.StringBuilder> instance return a reference to that same instance. This enables you to call <xref:System.Text.StringBuilder> methods in two ways:","nodes":[{"content":"Most of the methods that modify the string in a <xref:System.Text.StringBuilder> instance return a reference to that same instance. This enables you to call <xref:System.Text.StringBuilder> methods in two ways:","pos":[0,210],"nodes":[{"content":"Most of the methods that modify the string in a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> instance return a reference to that same instance.","pos":[0,131],"source":"Most of the methods that modify the string in a <xref:System.Text.StringBuilder> instance return a reference to that same instance."},{"content":"This enables you to call <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> methods in two ways:","pos":[132,210],"source":" This enables you to call <xref:System.Text.StringBuilder> methods in two ways:"}]}]},{"pos":[14182,14278],"content":"You can make individual method calls and ignore the return value, as the following example does.","nodes":[{"content":"You can make individual method calls and ignore the return value, as the following example does.","pos":[0,96]}]},{"pos":[14289,14586],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call1.cs#4)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call1.vb#4)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Text.StringBuilder.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call1.cs#4)]\n [!code-vb[System.Text.StringBuilder.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call1.vb#4)]"},{"pos":[14596,14862],"content":"You can make a series of method calls in a single statement. This can be convenient if you want to write a single statement that chains successive operations. The following example consolidates three method calls from the previous example into a single line of code.","nodes":[{"content":"You can make a series of method calls in a single statement. This can be convenient if you want to write a single statement that chains successive operations. The following example consolidates three method calls from the previous example into a single line of code.","pos":[0,266],"nodes":[{"content":"You can make a series of method calls in a single statement.","pos":[0,60]},{"content":"This can be convenient if you want to write a single statement that chains successive operations.","pos":[61,158]},{"content":"The following example consolidates three method calls from the previous example into a single line of code.","pos":[159,266]}]}]},{"pos":[14873,15170],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call2.cs#5)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call2.vb#5)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Text.StringBuilder.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call2.cs#5)]\n [!code-vb[System.Text.StringBuilder.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call2.vb#5)]"},{"pos":[15208,15243],"content":"Performing StringBuilder operations","linkify":"Performing StringBuilder operations","nodes":[{"content":"Performing StringBuilder operations","pos":[0,35]}]},{"pos":[15247,15408],"content":"You can use the methods of the <xref:System.Text.StringBuilder> class to iterate, add, delete, or modify characters in a <xref:System.Text.StringBuilder> object.","nodes":[{"content":"You can use the methods of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class to iterate, add, delete, or modify characters in a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,161],"source":"You can use the methods of the <xref:System.Text.StringBuilder> class to iterate, add, delete, or modify characters in a <xref:System.Text.StringBuilder> object."}]},{"pos":[15446,15480],"content":"Iterating StringBuilder characters","linkify":"Iterating StringBuilder characters","nodes":[{"content":"Iterating StringBuilder characters","pos":[0,34]}]},{"pos":[15484,16125],"content":"You can access the characters in a <xref:System.Text.StringBuilder> object by using the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property. In C#, <xref:System.Text.StringBuilder.Chars%2A> is an indexer; in Visual Basic, it is the default property of the <xref:System.Text.StringBuilder> class. This enables you to set or retrieve individual characters by using their index only, without explicitly referencing the <xref:System.Text.StringBuilder.Chars%2A> property. Characters in a <xref:System.Text.StringBuilder> object begin at index 0 (zero) and continue to index <xref:System.Text.StringBuilder.Length%2A> - 1.","nodes":[{"content":"You can access the characters in a <xref:System.Text.StringBuilder> object by using the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property. In C#, <xref:System.Text.StringBuilder.Chars%2A> is an indexer; in Visual Basic, it is the default property of the <xref:System.Text.StringBuilder> class. This enables you to set or retrieve individual characters by using their index only, without explicitly referencing the <xref:System.Text.StringBuilder.Chars%2A> property. Characters in a <xref:System.Text.StringBuilder> object begin at index 0 (zero) and continue to index <xref:System.Text.StringBuilder.Length%2A> - 1.","pos":[0,641],"nodes":[{"content":"You can access the characters in a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object by using the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,164],"source":"You can access the characters in a <xref:System.Text.StringBuilder> object by using the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property."},{"content":"In C#, <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> is an indexer; in Visual Basic, it is the default property of the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> class.","pos":[165,319],"source":" In C#, <xref:System.Text.StringBuilder.Chars%2A> is an indexer; in Visual Basic, it is the default property of the <xref:System.Text.StringBuilder> class."},{"content":"This enables you to set or retrieve individual characters by using their index only, without explicitly referencing the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> property.","pos":[320,491],"source":" This enables you to set or retrieve individual characters by using their index only, without explicitly referencing the <xref:System.Text.StringBuilder.Chars%2A> property."},{"content":"Characters in a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object begin at index 0 (zero) and continue to index <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> - 1.","pos":[492,641],"source":" Characters in a <xref:System.Text.StringBuilder> object begin at index 0 (zero) and continue to index <xref:System.Text.StringBuilder.Length%2A> - 1."}]}]},{"pos":[16132,16670],"content":"The following example illustrates the <xref:System.Text.StringBuilder.Chars%2A> property. It appends ten random numbers to a <xref:System.Text.StringBuilder> object, and then iterates each character. If the character's Unicode category is <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, it decreases the number by 1 (or changes the number to 9 if its value is 0). The example displays the contents of the <xref:System.Text.StringBuilder> object both before and after the values of individual characters were changed.","nodes":[{"content":"The following example illustrates the <xref:System.Text.StringBuilder.Chars%2A> property. It appends ten random numbers to a <xref:System.Text.StringBuilder> object, and then iterates each character. If the character's Unicode category is <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, it decreases the number by 1 (or changes the number to 9 if its value is 0). The example displays the contents of the <xref:System.Text.StringBuilder> object both before and after the values of individual characters were changed.","pos":[0,538],"nodes":[{"content":"The following example illustrates the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> property.","pos":[0,89],"source":"The following example illustrates the <xref:System.Text.StringBuilder.Chars%2A> property."},{"content":"It appends ten random numbers to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, and then iterates each character.","pos":[90,199],"source":" It appends ten random numbers to a <xref:System.Text.StringBuilder> object, and then iterates each character."},{"content":"If the character's Unicode category is <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory?displayProperty=fullName&gt;</ph>, it decreases the number by 1 (or changes the number to 9 if its value is 0).","pos":[200,385],"source":" If the character's Unicode category is <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, it decreases the number by 1 (or changes the number to 9 if its value is 0)."},{"content":"The example displays the contents of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object both before and after the values of individual characters were changed.","pos":[386,538],"source":" The example displays the contents of the <xref:System.Text.StringBuilder> object both before and after the values of individual characters were changed."}]}]},{"pos":[16677,16972],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/chars1.cs#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/chars1.vb#7)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/chars1.cs#7)]\n [!code-vb[System.Text.StringBuilder.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/chars1.vb#7)]"},{"pos":[17007,17044],"content":"Adding text to a StringBuilder object","linkify":"Adding text to a StringBuilder object","nodes":[{"content":"Adding text to a StringBuilder object","pos":[0,37]}]},{"pos":[17048,17194],"content":"The <xref:System.Text.StringBuilder> class includes the following methods for expanding the contents of a <xref:System.Text.StringBuilder> object:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class includes the following methods for expanding the contents of a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object:","pos":[0,146],"source":"The <xref:System.Text.StringBuilder> class includes the following methods for expanding the contents of a <xref:System.Text.StringBuilder> object:"}]},{"pos":[17204,17483],"content":"The <xref:System.Text.StringBuilder.Append%2A> method appends a string, a substring, a character array, a portion of a character array, a single character repeated multiple times, or the string representation of a primitive data type to a <xref:System.Text.StringBuilder> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> method appends a string, a substring, a character array, a portion of a character array, a single character repeated multiple times, or the string representation of a primitive data type to a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,279],"source":"The <xref:System.Text.StringBuilder.Append%2A> method appends a string, a substring, a character array, a portion of a character array, a single character repeated multiple times, or the string representation of a primitive data type to a <xref:System.Text.StringBuilder> object."}]},{"pos":[17493,17663],"content":"The <xref:System.Text.StringBuilder.AppendLine%2A> method appends a line terminator or a string along with a line terminator to a <xref:System.Text.StringBuilder> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.AppendLine%2A&gt;</ph> method appends a line terminator or a string along with a line terminator to a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,170],"source":"The <xref:System.Text.StringBuilder.AppendLine%2A> method appends a line terminator or a string along with a line terminator to a <xref:System.Text.StringBuilder> object."}]},{"pos":[17673,17950],"content":"The <xref:System.Text.StringBuilder.AppendFormat%2A> method appends a  to a <xref:System.Text.StringBuilder> object. The string representations of objects included in the result string can reflect the formatting conventions of the current system culture or a specified culture.","nodes":[{"content":"The <xref:System.Text.StringBuilder.AppendFormat%2A> method appends a  to a <xref:System.Text.StringBuilder> object. The string representations of objects included in the result string can reflect the formatting conventions of the current system culture or a specified culture.","pos":[0,277],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method appends a  to a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,116],"source":"The <xref:System.Text.StringBuilder.AppendFormat%2A> method appends a  to a <xref:System.Text.StringBuilder> object."},{"content":"The string representations of objects included in the result string can reflect the formatting conventions of the current system culture or a specified culture.","pos":[117,277]}]}]},{"pos":[17960,18302],"content":"The <xref:System.Text.StringBuilder.Insert%2A> method inserts a string, a substring, multiple repetitions of a string, a character array, a portion of a character array, or the string representation of a primitive data type at a specified position in the <xref:System.Text.StringBuilder> object. The position is defined by a zero-based index.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Insert%2A> method inserts a string, a substring, multiple repetitions of a string, a character array, a portion of a character array, or the string representation of a primitive data type at a specified position in the <xref:System.Text.StringBuilder> object. The position is defined by a zero-based index.","pos":[0,342],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Insert%2A&gt;</ph> method inserts a string, a substring, multiple repetitions of a string, a character array, a portion of a character array, or the string representation of a primitive data type at a specified position in the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,295],"source":"The <xref:System.Text.StringBuilder.Insert%2A> method inserts a string, a substring, multiple repetitions of a string, a character array, a portion of a character array, or the string representation of a primitive data type at a specified position in the <xref:System.Text.StringBuilder> object."},{"content":"The position is defined by a zero-based index.","pos":[296,342]}]}]},{"pos":[18309,18601],"content":"The following example uses the <xref:System.Text.StringBuilder.Append%2A>, <xref:System.Text.StringBuilder.AppendLine%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and <xref:System.Text.StringBuilder.Insert%2A> methods to expand the text of a <xref:System.Text.StringBuilder> object.","nodes":[{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendLine%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Text.StringBuilder.Insert%2A&gt;</ph> methods to expand the text of a <ph id=\"ph5\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,292],"source":"The following example uses the <xref:System.Text.StringBuilder.Append%2A>, <xref:System.Text.StringBuilder.AppendLine%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and <xref:System.Text.StringBuilder.Insert%2A> methods to expand the text of a <xref:System.Text.StringBuilder> object."}]},{"pos":[18608,18905],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/expand1.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/expand1.vb#9)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.Text.StringBuilder.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/expand1.cs#9)]\n[!code-vb[System.Text.StringBuilder.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/expand1.vb#9)]"},{"pos":[18942,18983],"content":"Deleting text from a StringBuilder object","linkify":"Deleting text from a StringBuilder object","nodes":[{"content":"Deleting text from a StringBuilder object","pos":[0,41]}]},{"pos":[18987,19644],"content":"The <xref:System.Text.StringBuilder> class includes methods that can reduce the size of the current <xref:System.Text.StringBuilder> instance. The <xref:System.Text.StringBuilder.Clear%2A> method removes all characters and sets the <xref:System.Text.StringBuilder.Length%2A> property to zero. The <xref:System.Text.StringBuilder.Remove%2A> method deletes a specified number of characters starting at a particular index position. In addition, you can remove characters from the end of a <xref:System.Text.StringBuilder> object by setting its <xref:System.Text.StringBuilder.Length%2A> property to a value that is less than the length of the current instance.","nodes":[{"content":"The <xref:System.Text.StringBuilder> class includes methods that can reduce the size of the current <xref:System.Text.StringBuilder> instance. The <xref:System.Text.StringBuilder.Clear%2A> method removes all characters and sets the <xref:System.Text.StringBuilder.Length%2A> property to zero. The <xref:System.Text.StringBuilder.Remove%2A> method deletes a specified number of characters starting at a particular index position. In addition, you can remove characters from the end of a <xref:System.Text.StringBuilder> object by setting its <xref:System.Text.StringBuilder.Length%2A> property to a value that is less than the length of the current instance.","pos":[0,657],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class includes methods that can reduce the size of the current <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> instance.","pos":[0,142],"source":"The <xref:System.Text.StringBuilder> class includes methods that can reduce the size of the current <xref:System.Text.StringBuilder> instance."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Clear%2A&gt;</ph> method removes all characters and sets the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property to zero.","pos":[143,292],"source":" The <xref:System.Text.StringBuilder.Clear%2A> method removes all characters and sets the <xref:System.Text.StringBuilder.Length%2A> property to zero."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Remove%2A&gt;</ph> method deletes a specified number of characters starting at a particular index position.","pos":[293,428],"source":" The <xref:System.Text.StringBuilder.Remove%2A> method deletes a specified number of characters starting at a particular index position."},{"content":"In addition, you can remove characters from the end of a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object by setting its <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property to a value that is less than the length of the current instance.","pos":[429,657],"source":" In addition, you can remove characters from the end of a <xref:System.Text.StringBuilder> object by setting its <xref:System.Text.StringBuilder.Length%2A> property to a value that is less than the length of the current instance."}]}]},{"pos":[19651,19971],"content":"The following example removes some of the text from a <xref:System.Text.StringBuilder> object, displays its resulting capacity, maximum capacity, and length property values, and then calls the <xref:System.Text.StringBuilder.Clear%2A> method to remove all the characters from the <xref:System.Text.StringBuilder> object.","nodes":[{"content":"The following example removes some of the text from a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, displays its resulting capacity, maximum capacity, and length property values, and then calls the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Clear%2A&gt;</ph> method to remove all the characters from the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,320],"source":"The following example removes some of the text from a <xref:System.Text.StringBuilder> object, displays its resulting capacity, maximum capacity, and length property values, and then calls the <xref:System.Text.StringBuilder.Clear%2A> method to remove all the characters from the <xref:System.Text.StringBuilder> object."}]},{"pos":[19978,20279],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/delete1.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/delete1.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/delete1.cs#10)]\n [!code-vb[System.Text.StringBuilder.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/delete1.vb#10)]"},{"pos":[20317,20361],"content":"Modifying the text in a StringBuilder object","linkify":"Modifying the text in a StringBuilder object","nodes":[{"content":"Modifying the text in a StringBuilder object","pos":[0,44]}]},{"pos":[20365,20778],"content":"The <xref:System.Text.StringBuilder.Replace%2A?displayProperty=fullName> method replaces all occurrences of a character or a string in the entire <xref:System.Text.StringBuilder> object or in a particular character range. The following example uses the <xref:System.Text.StringBuilder.Replace%2A> method to replace all exclamation points (!) with question marks (?) in the <xref:System.Text.StringBuilder> object.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Replace%2A?displayProperty=fullName> method replaces all occurrences of a character or a string in the entire <xref:System.Text.StringBuilder> object or in a particular character range. The following example uses the <xref:System.Text.StringBuilder.Replace%2A> method to replace all exclamation points (!) with question marks (?) in the <xref:System.Text.StringBuilder> object.","pos":[0,413],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Replace%2A?displayProperty=fullName&gt;</ph> method replaces all occurrences of a character or a string in the entire <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object or in a particular character range.","pos":[0,221],"source":"The <xref:System.Text.StringBuilder.Replace%2A?displayProperty=fullName> method replaces all occurrences of a character or a string in the entire <xref:System.Text.StringBuilder> object or in a particular character range."},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Replace%2A&gt;</ph> method to replace all exclamation points (!) with question marks (?) in the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[222,413],"source":" The following example uses the <xref:System.Text.StringBuilder.Replace%2A> method to replace all exclamation points (!) with question marks (?) in the <xref:System.Text.StringBuilder> object."}]}]},{"pos":[20785,21088],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#11<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/replace1.cs#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#11<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/replace1.vb#11)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/replace1.cs#11)]\n [!code-vb[System.Text.StringBuilder.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/replace1.vb#11)]"},{"pos":[21125,21169],"content":"Searching the text in a StringBuilder object","linkify":"Searching the text in a StringBuilder object","nodes":[{"content":"Searching the text in a StringBuilder object","pos":[0,44]}]},{"pos":[21173,21842],"content":"The <xref:System.Text.StringBuilder> class does not include methods similar to the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.IndexOf%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods provided by the <xref:System.String> class, which allow you to search the object for a particular character or a substring. Determining the presence or starting character position of a substring requires that you search a <xref:System.String> value by using either a string search method or a regular expression method. There are four ways to implement such searches, as the following table shows.","nodes":[{"content":"The <xref:System.Text.StringBuilder> class does not include methods similar to the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.IndexOf%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods provided by the <xref:System.String> class, which allow you to search the object for a particular character or a substring. Determining the presence or starting character position of a substring requires that you search a <xref:System.String> value by using either a string search method or a regular expression method. There are four ways to implement such searches, as the following table shows.","pos":[0,669],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class does not include methods similar to the <ph id=\"ph2\">&lt;xref:System.String.Contains%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.String.StartsWith%2A?displayProperty=fullName&gt;</ph> methods provided by the <ph id=\"ph5\">&lt;xref:System.String&gt;</ph> class, which allow you to search the object for a particular character or a substring.","pos":[0,395],"source":"The <xref:System.Text.StringBuilder> class does not include methods similar to the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.IndexOf%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods provided by the <xref:System.String> class, which allow you to search the object for a particular character or a substring."},{"content":"Determining the presence or starting character position of a substring requires that you search a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> value by using either a string search method or a regular expression method.","pos":[396,591],"source":" Determining the presence or starting character position of a substring requires that you search a <xref:System.String> value by using either a string search method or a regular expression method."},{"content":"There are four ways to implement such searches, as the following table shows.","pos":[592,669]}]}]},{"pos":[21849,21858],"content":"Technique","nodes":[{"content":"Technique","pos":[0,9]}]},{"pos":[21859,21863],"content":"Pros","nodes":[{"content":"Pros","pos":[0,4]}]},{"pos":[21864,21868],"content":"Cons","nodes":[{"content":"Cons","pos":[0,4]}]},{"pos":[21915,22002],"content":"Search string values before adding them to the <xref:System.Text.StringBuilder> object.","nodes":[{"content":"Search string values before adding them to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,87],"source":"Search string values before adding them to the <xref:System.Text.StringBuilder> object."}]},{"pos":[22003,22053],"content":"Useful for determining whether a substring exists.","nodes":[{"content":"Useful for determining whether a substring exists.","pos":[0,50]}]},{"pos":[22054,22121],"content":"Cannot be used when the index position of a substring is important.","nodes":[{"content":"Cannot be used when the index position of a substring is important.","pos":[0,67]}]},{"pos":[22126,22228],"content":"Call <xref:System.Text.StringBuilder.ToString%2A> and search the returned <xref:System.String> object.","nodes":[{"content":"Call <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.ToString%2A&gt;</ph> and search the returned <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object.","pos":[0,102],"source":"Call <xref:System.Text.StringBuilder.ToString%2A> and search the returned <xref:System.String> object."}]},{"pos":[22229,22342],"content":"Easy to use if you assign all the text to a <xref:System.Text.StringBuilder> object, and then begin to modify it.","nodes":[{"content":"Easy to use if you assign all the text to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, and then begin to modify it.","pos":[0,113],"source":"Easy to use if you assign all the text to a <xref:System.Text.StringBuilder> object, and then begin to modify it."}]},{"pos":[22343,22652],"content":"Cumbersome to repeatedly call <xref:System.Text.StringBuilder.ToString%2A> if you must make modifications before all text is added to the <xref:System.Text.StringBuilder> object.<br /><br /> You must remember to work from the end of the <xref:System.Text.StringBuilder> object's text if you're making changes.","nodes":[{"content":"Cumbersome to repeatedly call <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.ToString%2A&gt;</ph> if you must make modifications before all text is added to the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,178],"source":"Cumbersome to repeatedly call <xref:System.Text.StringBuilder.ToString%2A> if you must make modifications before all text is added to the <xref:System.Text.StringBuilder> object."},{"content":"You must remember to work from the end of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object's text if you're making changes.","pos":[191,309],"source":"You must remember to work from the end of the <xref:System.Text.StringBuilder> object's text if you're making changes."}]},{"pos":[22657,22761],"content":"Use the <xref:System.Text.StringBuilder.Chars%2A> property to sequentially search a range of characters.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> property to sequentially search a range of characters.","pos":[0,104],"source":"Use the <xref:System.Text.StringBuilder.Chars%2A> property to sequentially search a range of characters."}]},{"pos":[22762,22837],"content":"Useful if you're concerned with individual characters or a small substring.","nodes":[{"content":"Useful if you're concerned with individual characters or a small substring.","pos":[0,75]}]},{"pos":[22838,22930],"content":"Cumbersome if the number of characters to search is large or if the search logic is complex.","nodes":[{"content":"Cumbersome if the number of characters to search is large or if the search logic is complex.","pos":[0,92]}]},{"pos":[22935,23082],"content":"Convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object, and perform modifications on the <xref:System.String> object.","nodes":[{"content":"Convert the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object, and perform modifications on the <ph id=\"ph3\">&lt;xref:System.String&gt;</ph> object.","pos":[0,147],"source":"Convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object, and perform modifications on the <xref:System.String> object."}]},{"pos":[23083,23130],"content":"Useful if the number of modifications is small.","nodes":[{"content":"Useful if the number of modifications is small.","pos":[0,47]}]},{"pos":[23131,23249],"content":"Negates the performance benefit of the <xref:System.Text.StringBuilder> class if the number of modifications is large.","nodes":[{"content":"Negates the performance benefit of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> class if the number of modifications is large.","pos":[0,118],"source":"Negates the performance benefit of the <xref:System.Text.StringBuilder> class if the number of modifications is large."}]},{"pos":[23257,23306],"content":"Let's examine these techniques in greater detail.","nodes":[{"content":"Let's examine these techniques in greater detail.","pos":[0,49]}]},{"pos":[23316,24117],"content":"If the goal of the search is to determine whether a particular substring exists (that is, if you aren't interested in the position of the substring), you can search strings before storing them in the <xref:System.Text.StringBuilder> object. The following example provides one possible implementation. It defines a `StringBuilderFinder` class whose constructor is passed a reference to a <xref:System.Text.StringBuilder> object and the substring to find in the string. In this case, the example tries to determine whether recorded temperatures are in Fahrenheit or Celsius, and adds the appropriate introductory text to the beginning of the <xref:System.Text.StringBuilder> object. A random number generator is used to select an array that contains data in either degrees Celsius or degrees Fahrenheit.","nodes":[{"content":"If the goal of the search is to determine whether a particular substring exists (that is, if you aren't interested in the position of the substring), you can search strings before storing them in the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,240],"source":"If the goal of the search is to determine whether a particular substring exists (that is, if you aren't interested in the position of the substring), you can search strings before storing them in the <xref:System.Text.StringBuilder> object."},{"content":"The following example provides one possible implementation.","pos":[241,300]},{"content":"It defines a <ph id=\"ph1\">`StringBuilderFinder`</ph> class whose constructor is passed a reference to a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object and the substring to find in the string.","pos":[301,467],"source":" It defines a `StringBuilderFinder` class whose constructor is passed a reference to a <xref:System.Text.StringBuilder> object and the substring to find in the string."},{"content":"In this case, the example tries to determine whether recorded temperatures are in Fahrenheit or Celsius, and adds the appropriate introductory text to the beginning of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[468,680],"source":" In this case, the example tries to determine whether recorded temperatures are in Fahrenheit or Celsius, and adds the appropriate introductory text to the beginning of the <xref:System.Text.StringBuilder> object."},{"content":"A random number generator is used to select an array that contains data in either degrees Celsius or degrees Fahrenheit.","pos":[681,801]}]},{"pos":[24128,24435],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#12<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern1.cs#12)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#12<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern1.vb#12)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Text.StringBuilder.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern1.cs#12)]\n [!code-vb[System.Text.StringBuilder.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern1.vb#12)]"},{"pos":[24445,25306],"content":"Call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object. You can search the string by using methods such as <xref:System.String.LastIndexOf%2A?displayProperty=fullName> or <xref:System.String.StartsWith%2A?displayProperty=fullName>, or you can use regular expressions and the <xref:System.Text.RegularExpressions.Regex> class to search for patterns. Because both <xref:System.Text.StringBuilder> and <xref:System.String> objects use UTF-16 encoding to store characters, the index positions of characters, substrings, and regular expression matches are the same in both objects. This enables you to use <xref:System.Text.StringBuilder> methods to make changes at the same position at which that text is found in the <xref:System.String> object.","nodes":[{"content":"Call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object. You can search the string by using methods such as <xref:System.String.LastIndexOf%2A?displayProperty=fullName> or <xref:System.String.StartsWith%2A?displayProperty=fullName>, or you can use regular expressions and the <xref:System.Text.RegularExpressions.Regex> class to search for patterns. Because both <xref:System.Text.StringBuilder> and <xref:System.String> objects use UTF-16 encoding to store characters, the index positions of characters, substrings, and regular expression matches are the same in both objects. This enables you to use <xref:System.Text.StringBuilder> methods to make changes at the same position at which that text is found in the <xref:System.String> object.","pos":[0,861],"nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName&gt;</ph> method to convert the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id=\"ph3\">&lt;xref:System.String&gt;</ph> object.","pos":[0,174],"source":"Call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object."},{"content":"You can search the string by using methods such as <ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.String.StartsWith%2A?displayProperty=fullName&gt;</ph>, or you can use regular expressions and the <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph> class to search for patterns.","pos":[175,467],"source":" You can search the string by using methods such as <xref:System.String.LastIndexOf%2A?displayProperty=fullName> or <xref:System.String.StartsWith%2A?displayProperty=fullName>, or you can use regular expressions and the <xref:System.Text.RegularExpressions.Regex> class to search for patterns."},{"content":"Because both <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> objects use UTF-16 encoding to store characters, the index positions of characters, substrings, and regular expression matches are the same in both objects.","pos":[468,695],"source":" Because both <xref:System.Text.StringBuilder> and <xref:System.String> objects use UTF-16 encoding to store characters, the index positions of characters, substrings, and regular expression matches are the same in both objects."},{"content":"This enables you to use <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> methods to make changes at the same position at which that text is found in the <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object.","pos":[696,861],"source":" This enables you to use <xref:System.Text.StringBuilder> methods to make changes at the same position at which that text is found in the <xref:System.String> object."}]}]},{"pos":[25318,25555],"content":"[!NOTE]\nIf you adopt this approach, you should work from the end of the <xref:System.Text.StringBuilder> object to its beginning so that you don't have to repeatedly convert the <xref:System.Text.StringBuilder> object to a string.","leadings":["","    >  "],"nodes":[{"content":"If you adopt this approach, you should work from the end of the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to its beginning so that you don't have to repeatedly convert the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a string.","pos":[8,230],"source":"If you adopt this approach, you should work from the end of the <xref:System.Text.StringBuilder> object to its beginning so that you don't have to repeatedly convert the <xref:System.Text.StringBuilder> object to a string."}]},{"pos":[25566,26043],"content":"The following example illustrates this approach. It stores four occurrences of each letter of the English alphabet in a <xref:System.Text.StringBuilder> object. It then converts the text to a <xref:System.String> object and uses a regular expression to identify the starting position of each four-character sequence. Finally, it adds an underscore before each four-character sequence except for the first sequence, and converts the first character of the sequence to uppercase.","nodes":[{"content":"The following example illustrates this approach. It stores four occurrences of each letter of the English alphabet in a <xref:System.Text.StringBuilder> object. It then converts the text to a <xref:System.String> object and uses a regular expression to identify the starting position of each four-character sequence. Finally, it adds an underscore before each four-character sequence except for the first sequence, and converts the first character of the sequence to uppercase.","pos":[0,477],"nodes":[{"content":"The following example illustrates this approach.","pos":[0,48]},{"content":"It stores four occurrences of each letter of the English alphabet in a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[49,160],"source":" It stores four occurrences of each letter of the English alphabet in a <xref:System.Text.StringBuilder> object."},{"content":"It then converts the text to a <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> object and uses a regular expression to identify the starting position of each four-character sequence.","pos":[161,316],"source":" It then converts the text to a <xref:System.String> object and uses a regular expression to identify the starting position of each four-character sequence."},{"content":"Finally, it adds an underscore before each four-character sequence except for the first sequence, and converts the first character of the sequence to uppercase.","pos":[317,477]}]}]},{"pos":[26054,26361],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#13<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern2.cs#13)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#13<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern2.vb#13)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Text.StringBuilder.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern2.cs#13)]\n [!code-vb[System.Text.StringBuilder.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern2.vb#13)]"},{"pos":[26371,26677],"content":"Use the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property to sequentially search a range of characters in a <xref:System.Text.StringBuilder> object. This approach may not be practical if the number of characters to be searched is large or the search logic is particularly complex.","nodes":[{"content":"Use the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property to sequentially search a range of characters in a <xref:System.Text.StringBuilder> object. This approach may not be practical if the number of characters to be searched is large or the search logic is particularly complex.","pos":[0,306],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName&gt;</ph> property to sequentially search a range of characters in a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[0,174],"source":"Use the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property to sequentially search a range of characters in a <xref:System.Text.StringBuilder> object."},{"content":"This approach may not be practical if the number of characters to be searched is large or the search logic is particularly complex.","pos":[175,306]}]}]},{"pos":[26688,27010],"content":"The following example is identical in functionality to the previous example but differs in implementation. It uses the <xref:System.Text.StringBuilder.Chars%2A> property to detect when a character value has changed, inserts an underscore at that position, and converts the first character in the new sequence to uppercase.","nodes":[{"content":"The following example is identical in functionality to the previous example but differs in implementation. It uses the <xref:System.Text.StringBuilder.Chars%2A> property to detect when a character value has changed, inserts an underscore at that position, and converts the first character in the new sequence to uppercase.","pos":[0,322],"nodes":[{"content":"The following example is identical in functionality to the previous example but differs in implementation.","pos":[0,106]},{"content":"It uses the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> property to detect when a character value has changed, inserts an underscore at that position, and converts the first character in the new sequence to uppercase.","pos":[107,322],"source":" It uses the <xref:System.Text.StringBuilder.Chars%2A> property to detect when a character value has changed, inserts an underscore at that position, and converts the first character in the new sequence to uppercase."}]}]},{"pos":[27021,27328],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#14<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern3.cs#14)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#14<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern3.vb#14)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Text.StringBuilder.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern3.cs#14)]\n [!code-vb[System.Text.StringBuilder.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern3.vb#14)]"},{"pos":[27338,27862],"content":"Store all the unmodified text in the <xref:System.Text.StringBuilder> object, call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object, and perform the modifications on the <xref:System.String> object. You can use this approach if you have only a few modifications; otherwise, the cost of working with immutable strings may negate the performance benefits of using a <xref:System.Text.StringBuilder> object.","nodes":[{"content":"Store all the unmodified text in the <xref:System.Text.StringBuilder> object, call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object, and perform the modifications on the <xref:System.String> object. You can use this approach if you have only a few modifications; otherwise, the cost of working with immutable strings may negate the performance benefits of using a <xref:System.Text.StringBuilder> object.","pos":[0,524],"nodes":[{"content":"Store all the unmodified text in the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName&gt;</ph> method to convert the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id=\"ph4\">&lt;xref:System.String&gt;</ph> object, and perform the modifications on the <ph id=\"ph5\">&lt;xref:System.String&gt;</ph> object.","pos":[0,318],"source":"Store all the unmodified text in the <xref:System.Text.StringBuilder> object, call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object, and perform the modifications on the <xref:System.String> object."},{"content":"You can use this approach if you have only a few modifications; otherwise, the cost of working with immutable strings may negate the performance benefits of using a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[319,524],"source":" You can use this approach if you have only a few modifications; otherwise, the cost of working with immutable strings may negate the performance benefits of using a <xref:System.Text.StringBuilder> object."}]}]},{"pos":[27873,28411],"content":"The following example is identical in functionality to the previous two examples but differs in implementation. It creates a <xref:System.Text.StringBuilder> object, converts it to a <xref:System.String> object, and then uses a regular expression to perform all remaining modifications on the string. The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method uses a lambda expression to perform the replacement on each match.","nodes":[{"content":"The following example is identical in functionality to the previous two examples but differs in implementation. It creates a <xref:System.Text.StringBuilder> object, converts it to a <xref:System.String> object, and then uses a regular expression to perform all remaining modifications on the string. The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method uses a lambda expression to perform the replacement on each match.","pos":[0,538],"nodes":[{"content":"The following example is identical in functionality to the previous two examples but differs in implementation.","pos":[0,111]},{"content":"It creates a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, converts it to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object, and then uses a regular expression to perform all remaining modifications on the string.","pos":[112,300],"source":" It creates a <xref:System.Text.StringBuilder> object, converts it to a <xref:System.String> object, and then uses a regular expression to perform all remaining modifications on the string."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName&gt;</ph> method uses a lambda expression to perform the replacement on each match.","pos":[301,538],"source":" The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method uses a lambda expression to perform the replacement on each match."}]}]},{"pos":[28422,28729],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Class#15<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern4.cs#15)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Class#15<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern4.vb#15)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Text.StringBuilder.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern4.cs#15)]\n [!code-vb[System.Text.StringBuilder.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern4.vb#15)]"},{"pos":[28767,28814],"content":"Converting the StringBuilder object to a string","linkify":"Converting the StringBuilder object to a string","nodes":[{"content":"Converting the StringBuilder object to a string","pos":[0,47]}]},{"pos":[28818,29450],"content":"You must convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface. You perform this conversion by calling the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method. For an illustration, see the previous example, which calls the <xref:System.Text.StringBuilder.ToString%2A> method to convert a <xref:System.Text.StringBuilder> object to a string so that it can be passed to a regular expression method.","nodes":[{"content":"You must convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface. You perform this conversion by calling the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method. For an illustration, see the previous example, which calls the <xref:System.Text.StringBuilder.ToString%2A> method to convert a <xref:System.Text.StringBuilder> object to a string so that it can be passed to a regular expression method.","pos":[0,632],"nodes":[{"content":"You must convert the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id=\"ph2\">&lt;xref:System.String&gt;</ph> object before you can pass the string represented by the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a method that has a <ph id=\"ph4\">&lt;xref:System.String&gt;</ph> parameter or display it in the user interface.","pos":[0,274],"source":"You must convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface."},{"content":"You perform this conversion by calling the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[275,395],"source":" You perform this conversion by calling the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method."},{"content":"For an illustration, see the previous example, which calls the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.ToString%2A&gt;</ph> method to convert a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a string so that it can be passed to a regular expression method.","pos":[396,632],"source":" For an illustration, see the previous example, which calls the <xref:System.Text.StringBuilder.ToString%2A> method to convert a <xref:System.Text.StringBuilder> object to a string so that it can be passed to a regular expression method."}]}]}],"pos":[5537,35231],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class.","nodes":[{"pos":[0,87],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class."}],"pos":[37761,37849],"yaml":true},{"content":"The string value of this instance is set to <xref:System.String.Empty?displayProperty=fullName>, and the capacity is set to the implementation-specific default capacity.","nodes":[{"pos":[0,169],"content":"The string value of this instance is set to <xref:System.String.Empty?displayProperty=fullName>, and the capacity is set to the implementation-specific default capacity.","nodes":[{"content":"The string value of this instance is set to <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>, and the capacity is set to the implementation-specific default capacity.","pos":[0,169],"source":"The string value of this instance is set to <xref:System.String.Empty?displayProperty=fullName>, and the capacity is set to the implementation-specific default capacity."}]}],"pos":[37860,38030],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class using the specified capacity.","nodes":[{"pos":[0,116],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> class using the specified capacity.","source":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class using the specified capacity."}],"pos":[40315,40432],"yaml":true},{"content":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \n  \n The string value of this instance is set to <xref:System.String.Empty?displayProperty=fullName>. If `capacity` is zero, the implementation-specific default capacity is used.","nodes":[{"pos":[0,400],"content":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.","nodes":[{"content":"The <ph id=\"ph1\">`capacity`</ph> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance.","pos":[0,133],"source":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance."},{"content":"Its value is assigned to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property.","pos":[134,217],"source":" Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property."},{"content":"If the number of characters to be stored in the current instance exceeds this <ph id=\"ph1\">`capacity`</ph> value, the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object allocates additional memory to store them.","pos":[218,400],"source":" If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them."}]},{"pos":[407,580],"content":"The string value of this instance is set to <xref:System.String.Empty?displayProperty=fullName>. If `capacity` is zero, the implementation-specific default capacity is used.","nodes":[{"content":"The string value of this instance is set to <ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[0,96],"source":"The string value of this instance is set to <xref:System.String.Empty?displayProperty=fullName>."},{"content":"If <ph id=\"ph1\">`capacity`</ph> is zero, the implementation-specific default capacity is used.","pos":[97,173],"source":" If `capacity` is zero, the implementation-specific default capacity is used."}]}],"pos":[40443,41028],"yaml":true,"extradata":"MT"},{"content":"The suggested starting size of this instance.","nodes":[{"pos":[0,45],"content":"The suggested starting size of this instance.","nodes":[{"content":"The suggested starting size of this instance.","pos":[0,45]}]}],"pos":[41821,41867],"yaml":true},{"content":"<code>capacity</code> is less than zero.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","source":"<code>capacity</code> is less than zero."}],"pos":[42040,42081],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class using the specified string.","nodes":[{"pos":[0,114],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> class using the specified string.","source":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class using the specified string."}],"pos":[43596,43711],"yaml":true},{"content":"If `value` is `null`, the new <xref:System.Text.StringBuilder> will contain the empty string (that is, it contains <xref:System.String.Empty>).","nodes":[{"pos":[0,143],"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, the new <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> will contain the empty string (that is, it contains <ph id=\"ph4\">&lt;xref:System.String.Empty&gt;</ph>).","source":"If `value` is `null`, the new <xref:System.Text.StringBuilder> will contain the empty string (that is, it contains <xref:System.String.Empty>)."}],"pos":[43722,43866],"yaml":true,"extradata":"MT"},{"content":"The string used to initialize the value of the instance. If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>).","nodes":[{"pos":[0,239],"content":"The string used to initialize the value of the instance. If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>).","nodes":[{"content":"The string used to initialize the value of the instance.","pos":[0,56]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the new <ph id=\"ph3\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> will contain the empty string (that is, it contains <ph id=\"ph4\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>).","pos":[57,239],"source":" If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>)."}]}],"pos":[44657,44897],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class that starts with a specified capacity and can grow to a specified maximum.","nodes":[{"pos":[0,161],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> class that starts with a specified capacity and can grow to a specified maximum.","source":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class that starts with a specified capacity and can grow to a specified maximum."}],"pos":[46528,46690],"yaml":true},{"content":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \n  \n If `capacity` is zero, the implementation-specific default capacity is used.  \n  \n The `maxCapacity` property defines the maximum number of characters that the current instance can hold. Its value is assigned to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property. If the number of characters to be stored in the current instance exceeds this `maxCapacity` value, the <xref:System.Text.StringBuilder> object does not allocate additional memory, but instead throws an exception.","nodes":[{"pos":[0,400],"content":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.","nodes":[{"content":"The <ph id=\"ph1\">`capacity`</ph> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance.","pos":[0,133],"source":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance."},{"content":"Its value is assigned to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property.","pos":[134,217],"source":" Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property."},{"content":"If the number of characters to be stored in the current instance exceeds this <ph id=\"ph1\">`capacity`</ph> value, the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object allocates additional memory to store them.","pos":[218,400],"source":" If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them."}]},{"pos":[407,483],"content":"If <ph id=\"ph1\">`capacity`</ph> is zero, the implementation-specific default capacity is used.","source":"If `capacity` is zero, the implementation-specific default capacity is used."},{"pos":[490,893],"content":"The `maxCapacity` property defines the maximum number of characters that the current instance can hold. Its value is assigned to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property. If the number of characters to be stored in the current instance exceeds this `maxCapacity` value, the <xref:System.Text.StringBuilder> object does not allocate additional memory, but instead throws an exception.","nodes":[{"content":"The <ph id=\"ph1\">`maxCapacity`</ph> property defines the maximum number of characters that the current instance can hold.","pos":[0,103],"source":"The `maxCapacity` property defines the maximum number of characters that the current instance can hold."},{"content":"Its value is assigned to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property.","pos":[104,190],"source":" Its value is assigned to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property."},{"content":"If the number of characters to be stored in the current instance exceeds this <ph id=\"ph1\">`maxCapacity`</ph> value, the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object does not allocate additional memory, but instead throws an exception.","pos":[191,403],"source":" If the number of characters to be stored in the current instance exceeds this `maxCapacity` value, the <xref:System.Text.StringBuilder> object does not allocate additional memory, but instead throws an exception."}]}],"pos":[46701,47601],"yaml":true,"extradata":"MT"},{"content":"The suggested starting size of the <xref href=\"System.Text.StringBuilder\"></xref>.","nodes":[{"pos":[0,82],"content":"The suggested starting size of the <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"The suggested starting size of the <xref href=\"System.Text.StringBuilder\"></xref>."}],"pos":[48432,48515],"yaml":true},{"content":"The maximum number of characters the current string can contain.","nodes":[{"pos":[0,64],"content":"The maximum number of characters the current string can contain.","nodes":[{"content":"The maximum number of characters the current string can contain.","pos":[0,64]}]}],"pos":[48581,48646],"yaml":true},{"content":"<code>maxCapacity</code> is less than one, <code>capacity</code> is less than zero, or <code>capacity</code> is greater than <code>maxCapacity</code>.","nodes":[{"pos":[0,150],"content":"<ph id=\"ph1\">&lt;code&gt;maxCapacity&lt;/code&gt;</ph> is less than one, <ph id=\"ph2\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero, or <ph id=\"ph3\">&lt;code&gt;capacity&lt;/code&gt;</ph> is greater than <ph id=\"ph4\">&lt;code&gt;maxCapacity&lt;/code&gt;</ph>.","source":"<code>maxCapacity</code> is less than one, <code>capacity</code> is less than zero, or <code>capacity</code> is greater than <code>maxCapacity</code>."}],"pos":[48819,48970],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class using the specified string and capacity.","nodes":[{"pos":[0,127],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> class using the specified string and capacity.","source":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class using the specified string and capacity."}],"pos":[50545,50673],"yaml":true},{"content":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \n  \n If `capacity` is zero, the implementation-specific default capacity is used.","nodes":[{"pos":[0,400],"content":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.","nodes":[{"content":"The <ph id=\"ph1\">`capacity`</ph> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance.","pos":[0,133],"source":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance."},{"content":"Its value is assigned to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property.","pos":[134,217],"source":" Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property."},{"content":"If the number of characters to be stored in the current instance exceeds this <ph id=\"ph1\">`capacity`</ph> value, the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object allocates additional memory to store them.","pos":[218,400],"source":" If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them."}]},{"pos":[407,483],"content":"If <ph id=\"ph1\">`capacity`</ph> is zero, the implementation-specific default capacity is used.","source":"If `capacity` is zero, the implementation-specific default capacity is used."}],"pos":[50684,51172],"yaml":true,"extradata":"MT"},{"content":"The string used to initialize the value of the instance. If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>).","nodes":[{"pos":[0,239],"content":"The string used to initialize the value of the instance. If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>).","nodes":[{"content":"The string used to initialize the value of the instance.","pos":[0,56]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the new <ph id=\"ph3\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> will contain the empty string (that is, it contains <ph id=\"ph4\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>).","pos":[57,239],"source":" If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>)."}]}],"pos":[51999,52239],"yaml":true},{"content":"The suggested starting size of the <xref href=\"System.Text.StringBuilder\"></xref>.","nodes":[{"pos":[0,82],"content":"The suggested starting size of the <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"The suggested starting size of the <xref href=\"System.Text.StringBuilder\"></xref>."}],"pos":[52302,52385],"yaml":true},{"content":"<code>capacity</code> is less than zero.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","source":"<code>capacity</code> is less than zero."}],"pos":[52558,52599],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class from the specified substring and capacity.","nodes":[{"pos":[0,129],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> class from the specified substring and capacity.","source":"Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class from the specified substring and capacity."}],"pos":[54294,54424],"yaml":true},{"content":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \n  \n If `capacity` is zero, the implementation-specific default capacity is used.","nodes":[{"pos":[0,400],"content":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.","nodes":[{"content":"The <ph id=\"ph1\">`capacity`</ph> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance.","pos":[0,133],"source":"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance."},{"content":"Its value is assigned to the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> property.","pos":[134,217],"source":" Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property."},{"content":"If the number of characters to be stored in the current instance exceeds this <ph id=\"ph1\">`capacity`</ph> value, the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object allocates additional memory to store them.","pos":[218,400],"source":" If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them."}]},{"pos":[407,483],"content":"If <ph id=\"ph1\">`capacity`</ph> is zero, the implementation-specific default capacity is used.","source":"If `capacity` is zero, the implementation-specific default capacity is used."}],"pos":[54435,54923],"yaml":true,"extradata":"MT"},{"content":"The string that contains the substring used to initialize the value of this instance. If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>).","nodes":[{"pos":[0,268],"content":"The string that contains the substring used to initialize the value of this instance. If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>).","nodes":[{"content":"The string that contains the substring used to initialize the value of this instance.","pos":[0,85]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the new <ph id=\"ph3\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> will contain the empty string (that is, it contains <ph id=\"ph4\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>).","pos":[86,268],"source":" If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>)."}]}],"pos":[55756,56025],"yaml":true},{"content":"The position within <code>value</code> where the substring begins.","nodes":[{"pos":[0,66],"content":"The position within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> where the substring begins.","source":"The position within <code>value</code> where the substring begins."}],"pos":[56090,56157],"yaml":true},{"content":"The number of characters in the substring.","nodes":[{"pos":[0,42],"content":"The number of characters in the substring.","nodes":[{"content":"The number of characters in the substring.","pos":[0,42]}]}],"pos":[56218,56261],"yaml":true},{"content":"The suggested starting size of the <xref href=\"System.Text.StringBuilder\"></xref>.","nodes":[{"pos":[0,82],"content":"The suggested starting size of the <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"The suggested starting size of the <xref href=\"System.Text.StringBuilder\"></xref>."}],"pos":[56324,56407],"yaml":true},{"content":"<code>capacity</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> plus <code>length</code> is not a position within <code>value</code>.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","source":"<code>capacity</code> is less than zero."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,151],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is not a position within <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph>.","source":"<code>startIndex</code> plus <code>length</code> is not a position within <code>value</code>."}],"pos":[56580,56738],"yaml":true},{"content":"Appends a copy of a specified substring to this instance.","nodes":[{"pos":[0,57],"content":"Appends a copy of a specified substring to this instance.","nodes":[{"content":"Appends a copy of a specified substring to this instance.","pos":[0,57]}]}],"pos":[58365,58423],"yaml":true},{"content":"This method appends the specified range of characters in `value` to the current instance. If `value` is `null` and `startIndex` and `count` are both zero, no changes are made.  \n  \n The <xref:System.Text.StringBuilder.Append%28System.String%2CSystem.Int32%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#19)]\n [!code-vb[System.Text.StringBuilder.Append#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#19)]  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,175],"content":"This method appends the specified range of characters in `value` to the current instance. If `value` is `null` and `startIndex` and `count` are both zero, no changes are made.","nodes":[{"content":"This method appends the specified range of characters in <ph id=\"ph1\">`value`</ph> to the current instance.","pos":[0,89],"source":"This method appends the specified range of characters in `value` to the current instance."},{"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">`startIndex`</ph> and <ph id=\"ph4\">`count`</ph> are both zero, no changes are made.","pos":[90,175],"source":" If `value` is `null` and `startIndex` and `count` are both zero, no changes are made."}]},{"pos":[182,576],"content":"The <xref:System.Text.StringBuilder.Append%28System.String%2CSystem.Int32%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.String%2CSystem.Int32%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,394],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.String%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,186],"source":"The <xref:System.Text.StringBuilder.Append%28System.String%2CSystem.Int32%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[187,394],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[583,888],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#19<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#19)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#19<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#19)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#19)]\n [!code-vb[System.Text.StringBuilder.Append#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#19)]"},{"pos":[895,947],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[58434,59391],"yaml":true,"extradata":"MT"},{"content":"The string that contains the substring to append.","nodes":[{"pos":[0,49],"content":"The string that contains the substring to append.","nodes":[{"content":"The string that contains the substring to append.","pos":[0,49]}]}],"pos":[59574,59624],"yaml":true},{"content":"The starting position of the substring within <code>value</code>.","nodes":[{"pos":[0,65],"content":"The starting position of the substring within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position of the substring within <code>value</code>."}],"pos":[59689,59755],"yaml":true},{"content":"The number of characters in <code>value</code> to append.","nodes":[{"pos":[0,57],"content":"The number of characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to append.","source":"The number of characters in <code>value</code> to append."}],"pos":[59815,59873],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[59942,60013],"yaml":true},{"content":"<code>value</code> is `null`, and <code>startIndex</code> and <code>count</code> are not zero.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, and <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph4\">&lt;code&gt;count&lt;/code&gt;</ph> are not zero.","source":"<code>value</code> is `null`, and <code>startIndex</code> and <code>count</code> are not zero."}],"pos":[60175,60270],"yaml":true},{"content":"<code>count</code> less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> + <code>count</code> is greater than the length of <code>value</code>.  \n  \n -or-  \n  \n Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> less than zero.","source":"<code>count</code> less than zero."},{"pos":[41,45],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[52,91],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> less than zero.","source":"<code>startIndex</code> less than zero."},{"pos":[98,102],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[109,203],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph>.","source":"<code>startIndex</code> + <code>count</code> is greater than the length of <code>value</code>."},{"pos":[210,214],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[221,330],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[60384,60731],"yaml":true},{"content":"Appends the string representation of a specified subarray of Unicode characters to this instance.","nodes":[{"pos":[0,97],"content":"Appends the string representation of a specified subarray of Unicode characters to this instance.","nodes":[{"content":"Appends the string representation of a specified subarray of Unicode characters to this instance.","pos":[0,97]}]}],"pos":[62358,62456],"yaml":true},{"content":"This method appends the specified range of characters in `value` to the current instance. If `value` is `null` and `startIndex` and `count` are both zero, no changes are made.  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#7)]\n [!code-vb[System.Text.StringBuilder.Append#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#7)]  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,175],"content":"This method appends the specified range of characters in `value` to the current instance. If `value` is `null` and `startIndex` and `count` are both zero, no changes are made.","nodes":[{"content":"This method appends the specified range of characters in <ph id=\"ph1\">`value`</ph> to the current instance.","pos":[0,89],"source":"This method appends the specified range of characters in `value` to the current instance."},{"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph> and <ph id=\"ph3\">`startIndex`</ph> and <ph id=\"ph4\">`count`</ph> are both zero, no changes are made.","pos":[90,175],"source":" If `value` is `null` and `startIndex` and `count` are both zero, no changes are made."}]},{"pos":[182,580],"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,398],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,190],"source":"The <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[191,398],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[587,888],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#7)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#7)]\n [!code-vb[System.Text.StringBuilder.Append#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#7)]"},{"pos":[895,947],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[62467,63424],"yaml":true,"extradata":"MT"},{"content":"A character array.","nodes":[{"pos":[0,18],"content":"A character array.","nodes":[{"content":"A character array.","pos":[0,18]}]}],"pos":[63611,63630],"yaml":true},{"content":"The starting position in <code>value</code>.","nodes":[{"pos":[0,44],"content":"The starting position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting position in <code>value</code>."}],"pos":[63695,63740],"yaml":true},{"content":"The number of characters to append.","nodes":[{"pos":[0,35],"content":"The number of characters to append.","nodes":[{"content":"The number of characters to append.","pos":[0,35]}]}],"pos":[63804,63840],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[63909,63980],"yaml":true},{"content":"<code>value</code> is `null`, and <code>startIndex</code> and <code>charCount</code> are not zero.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, and <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph4\">&lt;code&gt;charCount&lt;/code&gt;</ph> are not zero.","source":"<code>value</code> is `null`, and <code>startIndex</code> and <code>charCount</code> are not zero."}],"pos":[64142,64241],"yaml":true},{"content":"<code>charCount</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> + <code>charCount</code> is greater than the length of <code>value</code>.  \n  \n -or-  \n  \n Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charCount</code> is less than zero."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,101],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> is less than zero."},{"pos":[108,112],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[119,217],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;charCount&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph>.","source":"<code>startIndex</code> + <code>charCount</code> is greater than the length of <code>value</code>."},{"pos":[224,228],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[235,344],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[64355,64716],"yaml":true},{"content":"Appends an array of Unicode characters starting at a specified address to this instance.","nodes":[{"pos":[0,88],"content":"Appends an array of Unicode characters starting at a specified address to this instance.","nodes":[{"content":"Appends an array of Unicode characters starting at a specified address to this instance.","pos":[0,88]}]}],"pos":[66277,66366],"yaml":true},{"content":"This method appends `valueCount` characters starting at address `value` to the current instance.  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Char%2A%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,96],"content":"This method appends <ph id=\"ph1\">`valueCount`</ph> characters starting at address <ph id=\"ph2\">`value`</ph> to the current instance.","source":"This method appends `valueCount` characters starting at address `value` to the current instance."},{"pos":[103,445],"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%2A%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%2A%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object.","pos":[0,342],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Char%2A%2CSystem.Int32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,172],"source":"The <xref:System.Text.StringBuilder.Append%28System.Char%2A%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[173,342],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object."}]}]},{"pos":[452,504],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[66377,66888],"yaml":true,"extradata":"MT"},{"content":"A pointer to an array of characters.","nodes":[{"pos":[0,36],"content":"A pointer to an array of characters.","nodes":[{"content":"A pointer to an array of characters.","pos":[0,36]}]}],"pos":[67145,67182],"yaml":true},{"content":"The number of characters in the array.","nodes":[{"pos":[0,38],"content":"The number of characters in the array.","nodes":[{"content":"The number of characters in the array.","pos":[0,38]}]}],"pos":[67247,67286],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[67355,67426],"yaml":true},{"content":"<code>valueCount</code> is less than zero.  \n  \n -or-  \n  \n Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;valueCount&lt;/code&gt;</ph> is less than zero.","source":"<code>valueCount</code> is less than zero."},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,169],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[67600,67778],"yaml":true},{"content":"<code>value</code> is a null pointer.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is a null pointer.","source":"<code>value</code> is a null pointer."}],"pos":[67882,67920],"yaml":true},{"content":"Appends a specified number of copies of the string representation of a Unicode character to this instance.","nodes":[{"pos":[0,106],"content":"Appends a specified number of copies of the string representation of a Unicode character to this instance.","nodes":[{"content":"Appends a specified number of copies of the string representation of a Unicode character to this instance.","pos":[0,106]}]}],"pos":[69399,69506],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#5)]\n [!code-vb[System.Text.StringBuilder.Append#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#5)]  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,377],"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,377],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Char%2CSystem.Int32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,169],"source":"The <xref:System.Text.StringBuilder.Append%28System.Char%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[170,377],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[384,685],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#5)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#5)]\n [!code-vb[System.Text.StringBuilder.Append#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#5)]"},{"pos":[692,744],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[69517,70269],"yaml":true,"extradata":"MT"},{"content":"The character to append.","nodes":[{"pos":[0,24],"content":"The character to append.","nodes":[{"content":"The character to append.","pos":[0,24]}]}],"pos":[70438,70463],"yaml":true},{"content":"The number of times to append <code>value</code>.","nodes":[{"pos":[0,49],"content":"The number of times to append <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The number of times to append <code>value</code>."}],"pos":[70529,70579],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[70648,70719],"yaml":true},{"content":"<code>repeatCount</code> is less than zero.  \n  \n -or-  \n  \n Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,43],"content":"<ph id=\"ph1\">&lt;code&gt;repeatCount&lt;/code&gt;</ph> is less than zero.","source":"<code>repeatCount</code> is less than zero."},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,170],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[70893,71072],"yaml":true},{"content":"Out of memory.","nodes":[{"pos":[0,14],"content":"Out of memory.","nodes":[{"content":"Out of memory.","pos":[0,14]}]}],"pos":[71172,71187],"yaml":true},{"content":"Appends the string representation of a specified 64-bit unsigned integer to this instance.","nodes":[{"pos":[0,90],"content":"Appends the string representation of a specified 64-bit unsigned integer to this instance.","nodes":[{"content":"Appends the string representation of a specified 64-bit unsigned integer to this instance.","pos":[0,90]}]}],"pos":[72677,72768],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt64%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#17)]\n [!code-vb[System.Text.StringBuilder.Append#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#17)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.UInt64%29> method calls the <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,364],"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt64%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt64%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,364],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.UInt64%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,156],"source":"The <xref:System.Text.StringBuilder.Append%28System.UInt64%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[157,364],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[371,676],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#17<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#17)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#17<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#17)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#17)]\n [!code-vb[System.Text.StringBuilder.Append#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#17)]"},{"pos":[683,1025],"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt64%29> method calls the <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.UInt64%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph> for the current culture.","pos":[0,238],"source":"The <xref:System.Text.StringBuilder.Append%28System.UInt64%29> method calls the <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[239,342],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[1032,1084],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[72779,73873],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[74073,74094],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[74163,74234],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[74408,74518],"yaml":true},{"content":"Appends the string representation of a specified 32-bit unsigned integer to this instance.","nodes":[{"pos":[0,90],"content":"Appends the string representation of a specified 32-bit unsigned integer to this instance.","nodes":[{"content":"Appends the string representation of a specified 32-bit unsigned integer to this instance.","pos":[0,90]}]}],"pos":[76061,76152],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#16)]\n [!code-vb[System.Text.StringBuilder.Append#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#16)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.UInt32%29> calls the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,364],"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,364],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.UInt32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,156],"source":"The <xref:System.Text.StringBuilder.Append%28System.UInt32%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[157,364],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[371,676],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#16<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#16)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#16<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#16)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#16)]\n [!code-vb[System.Text.StringBuilder.Append#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#16)]"},{"pos":[683,993],"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt32%29> calls the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.UInt32%29&gt;</ph> calls the <ph id=\"ph2\">&lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph> for the current culture.","pos":[0,206],"source":"The <xref:System.Text.StringBuilder.Append%28System.UInt32%29> calls the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method to get the string representation of `value` for the current culture."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[207,310],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[1000,1052],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[76163,77225],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[77424,77445],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[77514,77585],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[77759,77869],"yaml":true},{"content":"Appends the string representation of a specified 16-bit unsigned integer to this instance.","nodes":[{"pos":[0,90],"content":"Appends the string representation of a specified 16-bit unsigned integer to this instance.","nodes":[{"content":"Appends the string representation of a specified 16-bit unsigned integer to this instance.","pos":[0,90]}]}],"pos":[79412,79503],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt16%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#15)]\n [!code-vb[System.Text.StringBuilder.Append#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#15)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.UInt16%29> method calls the <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value`. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,364],"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt16%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt16%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,364],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.UInt16%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,156],"source":"The <xref:System.Text.StringBuilder.Append%28System.UInt16%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[157,364],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[371,676],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#15<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#15)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#15<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#15)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#15)]\n [!code-vb[System.Text.StringBuilder.Append#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#15)]"},{"pos":[683,1001],"content":"The <xref:System.Text.StringBuilder.Append%28System.UInt16%29> method calls the <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value`. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.UInt16%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph>.","pos":[0,214],"source":"The <xref:System.Text.StringBuilder.Append%28System.UInt16%29> method calls the <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value`."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[215,318],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[1008,1060],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[79514,80584],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[80785,80806],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[80875,80946],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[81120,81230],"yaml":true},{"content":"Appends a copy of the specified string to this instance.","nodes":[{"pos":[0,56],"content":"Appends a copy of the specified string to this instance.","nodes":[{"content":"Appends a copy of the specified string to this instance.","pos":[0,56]}]}],"pos":[82773,82830],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.String%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)]\n [!code-vb[System.Text.StringBuilder.Append#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)]  \n  \n If `value` is `null`, no changes are made.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,364],"content":"The <xref:System.Text.StringBuilder.Append%28System.String%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.String%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,364],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.String%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,156],"source":"The <xref:System.Text.StringBuilder.Append%28System.String%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[157,364],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[371,672],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)]\n [!code-vb[System.Text.StringBuilder.Append#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)]"},{"pos":[679,721],"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, no changes are made.","source":"If `value` is `null`, no changes are made."},{"pos":[728,780],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[82841,83631],"yaml":true,"extradata":"MT"},{"content":"The string to append.","nodes":[{"pos":[0,21],"content":"The string to append.","nodes":[{"content":"The string to append.","pos":[0,21]}]}],"pos":[83787,83809],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[83878,83949],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[84123,84233],"yaml":true},{"content":"Appends the string representation of a specified 8-bit signed integer to this instance.","nodes":[{"pos":[0,87],"content":"Appends the string representation of a specified 8-bit signed integer to this instance.","nodes":[{"content":"Appends the string representation of a specified 8-bit signed integer to this instance.","pos":[0,87]}]}],"pos":[85734,85822],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.SByte%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#13)]\n [!code-vb[System.Text.StringBuilder.Append#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#13)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.SByte%29> method calls the <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName> method  to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,363],"content":"The <xref:System.Text.StringBuilder.Append%28System.SByte%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.SByte%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,363],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.SByte%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,155],"source":"The <xref:System.Text.StringBuilder.Append%28System.SByte%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[156,363],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[370,675],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#13<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#13<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#13)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#13)]\n [!code-vb[System.Text.StringBuilder.Append#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#13)]"},{"pos":[682,1023],"content":"The <xref:System.Text.StringBuilder.Append%28System.SByte%29> method calls the <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName> method  to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.SByte%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method  to get the string representation of <ph id=\"ph3\">`value`</ph> for the current culture.","pos":[0,237],"source":"The <xref:System.Text.StringBuilder.Append%28System.SByte%29> method calls the <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName> method  to get the string representation of `value` for the current culture."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[238,341],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[1030,1082],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[85833,86925],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[87124,87145],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[87214,87285],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[87459,87569],"yaml":true},{"content":"Appends the string representation of a specified single-precision floating-point number to this instance.","nodes":[{"pos":[0,105],"content":"Appends the string representation of a specified single-precision floating-point number to this instance.","nodes":[{"content":"Appends the string representation of a specified single-precision floating-point number to this instance.","pos":[0,105]}]}],"pos":[89112,89218],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Single%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#14)]\n [!code-vb[System.Text.StringBuilder.Append#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#14)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Single%29> method calls the <xref:System.Single.ToString%2A?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,364],"content":"The <xref:System.Text.StringBuilder.Append%28System.Single%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Single%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,364],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Single%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,156],"source":"The <xref:System.Text.StringBuilder.Append%28System.Single%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[157,364],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[371,676],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#14<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#14)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#14<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#14)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#14)]\n [!code-vb[System.Text.StringBuilder.Append#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#14)]"},{"pos":[683,1000],"content":"The <xref:System.Text.StringBuilder.Append%28System.Single%29> method calls the <xref:System.Single.ToString%2A?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Single%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Single.ToString%2A?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph> for the current culture.","pos":[0,213],"source":"The <xref:System.Text.StringBuilder.Append%28System.Single%29> method calls the <xref:System.Single.ToString%2A?displayProperty=fullName> method to get the string representation of `value` for the current culture."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[214,317],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[1007,1059],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[89229,90298],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[90453,90474],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[90543,90614],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[90788,90898],"yaml":true},{"content":"Appends the string representation of a specified 64-bit signed integer to this instance.","nodes":[{"pos":[0,88],"content":"Appends the string representation of a specified 64-bit signed integer to this instance.","nodes":[{"content":"Appends the string representation of a specified 64-bit signed integer to this instance.","pos":[0,88]}]}],"pos":[92382,92471],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Int64%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#12)]\n [!code-vb[System.Text.StringBuilder.Append#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#12)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Int64%29> method calls the <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName> to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,363],"content":"The <xref:System.Text.StringBuilder.Append%28System.Int64%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Int64%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,363],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Int64%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,155],"source":"The <xref:System.Text.StringBuilder.Append%28System.Int64%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[156,363],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[370,675],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#12<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#12<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#12)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#12)]\n [!code-vb[System.Text.StringBuilder.Append#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#12)]"},{"pos":[682,1015],"content":"The <xref:System.Text.StringBuilder.Append%28System.Int64%29> method calls the <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName> to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Int64%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> to get the string representation of <ph id=\"ph3\">`value`</ph> for the current culture.","pos":[0,229],"source":"The <xref:System.Text.StringBuilder.Append%28System.Int64%29> method calls the <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName> to get the string representation of `value` for the current culture."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[230,333],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[1022,1074],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[92482,93566],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[93719,93740],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[93809,93880],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[94054,94164],"yaml":true},{"content":"Appends the string representation of a specified object to this instance.","nodes":[{"pos":[0,73],"content":"Appends the string representation of a specified object to this instance.","nodes":[{"content":"Appends the string representation of a specified object to this instance.","pos":[0,73]}]}],"pos":[95654,95728],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Object%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates. It defines a `Dog` class, creates a `Dog` object, and makes three calls to the <xref:System.Text.StringBuilder.Append%2A> method to create a string that contains the dog's name and breed.  \n  \n [!code-csharp[System.Text.Stringbuilder.Append#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append4.cs#18)]\n [!code-vb[System.Text.Stringbuilder.Append#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append4.vb#18)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Object%29> method calls the <xref:System.Object.ToString%2A?displayProperty=fullName> method to get the string representation of `value`. If `value` is `null`, no changes are made to the <xref:System.Text.StringBuilder> object.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,552],"content":"The <xref:System.Text.StringBuilder.Append%28System.Object%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates. It defines a `Dog` class, creates a `Dog` object, and makes three calls to the <xref:System.Text.StringBuilder.Append%2A> method to create a string that contains the dog's name and breed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Object%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,156],"source":"The <xref:System.Text.StringBuilder.Append%28System.Object%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[157,364],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."},{"content":"It defines a <ph id=\"ph1\">`Dog`</ph> class, creates a <ph id=\"ph2\">`Dog`</ph> object, and makes three calls to the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> method to create a string that contains the dog's name and breed.","pos":[365,552],"source":" It defines a `Dog` class, creates a `Dog` object, and makes three calls to the <xref:System.Text.StringBuilder.Append%2A> method to create a string that contains the dog's name and breed."}]},{"pos":[559,864],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.Stringbuilder.Append#18<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append4.cs#18)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.Stringbuilder.Append#18<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append4.vb#18)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.Stringbuilder.Append#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append4.cs#18)]\n [!code-vb[System.Text.Stringbuilder.Append#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append4.vb#18)]"},{"pos":[871,1150],"content":"The <xref:System.Text.StringBuilder.Append%28System.Object%29> method calls the <xref:System.Object.ToString%2A?displayProperty=fullName> method to get the string representation of `value`. If `value` is `null`, no changes are made to the <xref:System.Text.StringBuilder> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Object%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph>.","pos":[0,189],"source":"The <xref:System.Text.StringBuilder.Append%28System.Object%29> method calls the <xref:System.Object.ToString%2A?displayProperty=fullName> method to get the string representation of `value`."},{"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, no changes are made to the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[190,279],"source":" If `value` is `null`, no changes are made to the <xref:System.Text.StringBuilder> object."}]},{"pos":[1157,1209],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[95739,96958],"yaml":true,"extradata":"MT"},{"content":"The object to append.","nodes":[{"pos":[0,21],"content":"The object to append.","nodes":[{"content":"The object to append.","pos":[0,21]}]}],"pos":[97114,97136],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[97205,97276],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[97450,97560],"yaml":true},{"content":"Appends the string representation of a specified 8-bit unsigned integer to this instance.","nodes":[{"pos":[0,89],"content":"Appends the string representation of a specified 8-bit unsigned integer to this instance.","nodes":[{"content":"Appends the string representation of a specified 8-bit unsigned integer to this instance.","pos":[0,89]}]}],"pos":[99038,99128],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Byte%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#3)]\n [!code-vb[System.Text.StringBuilder.Append#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#3)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Byte%29> method calls the <xref:System.Byte.ToString%28System.IFormatProvider%29> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,362],"content":"The <xref:System.Text.StringBuilder.Append%28System.Byte%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Byte%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,362],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Byte%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,154],"source":"The <xref:System.Text.StringBuilder.Append%28System.Byte%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[155,362],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[369,670],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#3)]\n [!code-vb[System.Text.StringBuilder.Append#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#3)]"},{"pos":[677,990],"content":"The <xref:System.Text.StringBuilder.Append%28System.Byte%29> method calls the <xref:System.Byte.ToString%28System.IFormatProvider%29> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Byte%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Byte.ToString%28System.IFormatProvider%29&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph> for the current culture.","pos":[0,209],"source":"The <xref:System.Text.StringBuilder.Append%28System.Byte%29> method calls the <xref:System.Byte.ToString%28System.IFormatProvider%29> method to get the string representation of `value` for the current culture."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[210,313],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[997,1049],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[99139,100198],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[100350,100371],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[100440,100511],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[100685,100795],"yaml":true},{"content":"Appends the string representation of a specified <xref href=\"System.Char\"></xref> object to this instance.","nodes":[{"pos":[0,106],"content":"Appends the string representation of a specified <ph id=\"ph1\">&lt;xref href=\"System.Char\"&gt;&lt;/xref&gt;</ph> object to this instance.","source":"Appends the string representation of a specified <xref href=\"System.Char\"></xref> object to this instance."}],"pos":[102273,102380],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#4)]\n [!code-vb[System.Text.StringBuilder.Append#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#4)]  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,362],"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,362],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Char%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,154],"source":"The <xref:System.Text.StringBuilder.Append%28System.Char%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[155,362],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[369,670],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#4)]\n [!code-vb[System.Text.StringBuilder.Append#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#4)]"},{"pos":[677,729],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[102391,103128],"yaml":true,"extradata":"MT"},{"content":"The UTF-16-encoded code unit to append.","nodes":[{"pos":[0,39],"content":"The UTF-16-encoded code unit to append.","nodes":[{"content":"The UTF-16-encoded code unit to append.","pos":[0,39]}]}],"pos":[103280,103320],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[103389,103460],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[103634,103744],"yaml":true},{"content":"Appends the string representation of the Unicode characters in a specified array to this instance.","nodes":[{"pos":[0,98],"content":"Appends the string representation of the Unicode characters in a specified array to this instance.","nodes":[{"content":"Appends the string representation of the Unicode characters in a specified array to this instance.","pos":[0,98]}]}],"pos":[105234,105333],"yaml":true},{"content":"This method appends all the characters in the specified array to the current instance in the same order as they appear in `value`. If `value` is `null`, no changes are made.  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#6)]\n [!code-vb[System.Text.StringBuilder.Append#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#6)]  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,173],"content":"This method appends all the characters in the specified array to the current instance in the same order as they appear in `value`. If `value` is `null`, no changes are made.","nodes":[{"content":"This method appends all the characters in the specified array to the current instance in the same order as they appear in <ph id=\"ph1\">`value`</ph>.","pos":[0,130],"source":"This method appends all the characters in the specified array to the current instance in the same order as they appear in `value`."},{"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, no changes are made.","pos":[131,173],"source":" If `value` is `null`, no changes are made."}]},{"pos":[180,548],"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,368],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,160],"source":"The <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[161,368],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[555,856],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#6)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#6)]\n [!code-vb[System.Text.StringBuilder.Append#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#6)]"},{"pos":[863,915],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[105344,106269],"yaml":true,"extradata":"MT"},{"content":"The array of characters to append.","nodes":[{"pos":[0,34],"content":"The array of characters to append.","nodes":[{"content":"The array of characters to append.","pos":[0,34]}]}],"pos":[106425,106460],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[106529,106600],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[106774,106884],"yaml":true},{"content":"Appends the string representation of a specified Boolean value to this instance.","nodes":[{"pos":[0,80],"content":"Appends the string representation of a specified Boolean value to this instance.","nodes":[{"content":"Appends the string representation of a specified Boolean value to this instance.","pos":[0,80]}]}],"pos":[108397,108478],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Boolean%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)]\n [!code-vb[System.Text.StringBuilder.Append#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Boolean%29> method calls the <xref:System.Boolean.ToString?displayProperty=fullName> method to get the string representation of `value`. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,365],"content":"The <xref:System.Text.StringBuilder.Append%28System.Boolean%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Boolean%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,365],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Boolean%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,157],"source":"The <xref:System.Text.StringBuilder.Append%28System.Boolean%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[158,365],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[372,673],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)]\n [!code-vb[System.Text.StringBuilder.Append#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)]"},{"pos":[680,921],"content":"The <xref:System.Text.StringBuilder.Append%28System.Boolean%29> method calls the <xref:System.Boolean.ToString?displayProperty=fullName> method to get the string representation of `value`. The capacity of this instance is adjusted as needed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Boolean%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Boolean.ToString?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph>.","pos":[0,188],"source":"The <xref:System.Text.StringBuilder.Append%28System.Boolean%29> method calls the <xref:System.Boolean.ToString?displayProperty=fullName> method to get the string representation of `value`."},{"content":"The capacity of this instance is adjusted as needed.","pos":[189,241]}]}],"pos":[108489,109418],"yaml":true,"extradata":"MT"},{"content":"The Boolean value to append.","nodes":[{"pos":[0,28],"content":"The Boolean value to append.","nodes":[{"content":"The Boolean value to append.","pos":[0,28]}]}],"pos":[109573,109602],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[109671,109742],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[109916,110026],"yaml":true},{"content":"Appends the string representation of a specified double-precision floating-point number to this instance.","nodes":[{"pos":[0,105],"content":"Appends the string representation of a specified double-precision floating-point number to this instance.","nodes":[{"content":"Appends the string representation of a specified double-precision floating-point number to this instance.","pos":[0,105]}]}],"pos":[111516,111622],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Double%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#9)]\n [!code-vb[System.Text.StringBuilder.Append#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#9)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Double%29> method calls the <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,364],"content":"The <xref:System.Text.StringBuilder.Append%28System.Double%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Double%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,364],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Double%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,156],"source":"The <xref:System.Text.StringBuilder.Append%28System.Double%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[157,364],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[371,672],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#9)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#9)]\n [!code-vb[System.Text.StringBuilder.Append#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#9)]"},{"pos":[679,1021],"content":"The <xref:System.Text.StringBuilder.Append%28System.Double%29> method calls the <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Double%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph> for the current culture.","pos":[0,238],"source":"The <xref:System.Text.StringBuilder.Append%28System.Double%29> method calls the <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[239,342],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[1028,1080],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[111633,112723],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[112879,112900],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[112969,113040],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[113214,113324],"yaml":true},{"content":"Appends the string representation of a specified 16-bit signed integer to this instance.","nodes":[{"pos":[0,88],"content":"Appends the string representation of a specified 16-bit signed integer to this instance.","nodes":[{"content":"Appends the string representation of a specified 16-bit signed integer to this instance.","pos":[0,88]}]}],"pos":[114808,114897],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Int16%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#10)]\n [!code-vb[System.Text.StringBuilder.Append#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#10)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Int16%29> method calls the <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,363],"content":"The <xref:System.Text.StringBuilder.Append%28System.Int16%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Int16%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,363],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Int16%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,155],"source":"The <xref:System.Text.StringBuilder.Append%28System.Int16%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[156,363],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[370,675],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#10)]\n [!code-vb[System.Text.StringBuilder.Append#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#10)]"},{"pos":[682,1022],"content":"The <xref:System.Text.StringBuilder.Append%28System.Int16%29> method calls the <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Int16%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph> for the current culture.","pos":[0,236],"source":"The <xref:System.Text.StringBuilder.Append%28System.Int16%29> method calls the <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[237,340],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[1029,1081],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[114908,115999],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[116153,116174],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[116243,116314],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[116488,116598],"yaml":true},{"content":"Appends the string representation of a specified 32-bit signed integer to this instance.","nodes":[{"pos":[0,88],"content":"Appends the string representation of a specified 32-bit signed integer to this instance.","nodes":[{"content":"Appends the string representation of a specified 32-bit signed integer to this instance.","pos":[0,88]}]}],"pos":[118082,118171],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#11)]\n [!code-vb[System.Text.StringBuilder.Append#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#11)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Int32%29> method calls the <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,363],"content":"The <xref:System.Text.StringBuilder.Append%28System.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,363],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Int32%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,155],"source":"The <xref:System.Text.StringBuilder.Append%28System.Int32%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[156,363],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[370,675],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#11<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#11<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#11)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#11)]\n [!code-vb[System.Text.StringBuilder.Append#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#11)]"},{"pos":[682,1022],"content":"The <xref:System.Text.StringBuilder.Append%28System.Int32%29> method calls the <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Int32%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph> for the current culture.","pos":[0,236],"source":"The <xref:System.Text.StringBuilder.Append%28System.Int32%29> method calls the <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[237,340],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[1029,1081],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[118182,119273],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[119425,119446],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[119515,119586],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[119760,119870],"yaml":true},{"content":"Appends the string representation of a specified decimal number to this instance.","nodes":[{"pos":[0,81],"content":"Appends the string representation of a specified decimal number to this instance.","nodes":[{"content":"Appends the string representation of a specified decimal number to this instance.","pos":[0,81]}]}],"pos":[121366,121448],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.Append%28System.Decimal%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \n  \n [!code-csharp[System.Text.StringBuilder.Append#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#8)]\n [!code-vb[System.Text.StringBuilder.Append#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#8)]  \n  \n The <xref:System.Text.StringBuilder.Append%28System.Decimal%29> method calls the <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,365],"content":"The <xref:System.Text.StringBuilder.Append%28System.Decimal%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","nodes":[{"content":"The <xref:System.Text.StringBuilder.Append%28System.Decimal%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.","pos":[0,365],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Decimal%29&gt;</ph> method modifies the existing instance of this class; it does not return a new class instance.","pos":[0,157],"source":"The <xref:System.Text.StringBuilder.Append%28System.Decimal%29> method modifies the existing instance of this class; it does not return a new class instance."},{"content":"Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object, as the following example illustrates.","pos":[158,365],"source":" Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates."}]}]},{"pos":[372,673],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Append#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Append#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#8)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Append#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#8)]\n [!code-vb[System.Text.StringBuilder.Append#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#8)]"},{"pos":[680,1024],"content":"The <xref:System.Text.StringBuilder.Append%28System.Decimal%29> method calls the <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%28System.Decimal%29&gt;</ph> method calls the <ph id=\"ph2\">&lt;xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName&gt;</ph> method to get the string representation of <ph id=\"ph3\">`value`</ph> for the current culture.","pos":[0,240],"source":"The <xref:System.Text.StringBuilder.Append%28System.Decimal%29> method calls the <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture."},{"content":"To control the formatting of <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> method.","pos":[241,344],"source":" To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method."}]},{"pos":[1031,1083],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[121459,122552],"yaml":true,"extradata":"MT"},{"content":"The value to append.","nodes":[{"pos":[0,20],"content":"The value to append.","nodes":[{"content":"The value to append.","pos":[0,20]}]}],"pos":[122710,122731],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[122800,122871],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[123045,123155],"yaml":true},{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.","nodes":[{"pos":[0,250],"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.","nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.","pos":[0,250],"nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.","pos":[0,128]},{"content":"Each format item is replaced by the string representation of either of three arguments using a specified format provider.","pos":[129,250]}]}]}],"pos":[124999,125250],"yaml":true},{"content":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for `arg0` and `arg1`. `provider` can be any of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for `arg0` or `arg1` if they are numeric values.  \n  \n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for `arg0`, `arg1`, or `arg2` if they are date and time values.  \n  \n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0`,  `arg1`, and `arg2`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.  \n  \n If the `provider` parameter is `null`, format provider information is obtained from the current culture.  \n  \n `arg0`, `arg1`, and `arg2` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of the object that has the corresponding index. If the format item includes `formatString` and the corresponding argument implements the <xref:System.IFormattable> interface, then the argument's `ToString(formatString, provider)` method defines the formatting. Otherwise, the argument's `ToString()` method defines the formatting.","nodes":[{"pos":[0,272],"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","source":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object."},{"pos":[279,585],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method.","pos":[0,197],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the corresponding object.","pos":[198,306]}]},{"pos":[592,634],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[641,678],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[685,770],"content":"Elements in square brackets are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets are optional. The following table describes each element.","pos":[0,85],"nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]}]}]},{"pos":[777,784],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[785,796],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[837,844],"content":"<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>","source":"*index*"},{"pos":[845,1144],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[77,206],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[207,299],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[1149,1158],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[1159,1316],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[1321,1336],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[1337,1407],"content":"A standard or custom format string that is supported by the parameter.","nodes":[{"content":"A standard or custom format string that is supported by the parameter.","pos":[0,70]}]},{"pos":[1416,2140],"content":"[!NOTE]\n For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","leadings":["","> "],"nodes":[{"content":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","pos":[8,722],"nodes":[{"content":"For the standard and custom format strings used with date and time values, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","pos":[1,298],"source":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"content":"For the standard and custom format strings used with numeric values, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[299,566],"source":" For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"For the standard format strings used with enumerations, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","pos":[567,714],"source":" For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."}]}]},{"pos":[2147,2332],"content":"The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for `arg0` and `arg1`. `provider` can be any of the following:","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter specifies an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that can provide formatting information for <ph id=\"ph3\">`arg0`</ph> and <ph id=\"ph4\">`arg1`</ph>.","pos":[0,145],"source":"The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for `arg0` and `arg1`."},{"content":"<ph id=\"ph1\">`provider`</ph> can be any of the following:","pos":[146,185],"source":"`provider` can be any of the following:"}]},{"pos":[2342,2445],"content":"A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that provides culture-specific formatting information.","pos":[0,103],"source":"A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information."}]},{"pos":[2455,2611],"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id=\"ph2\">`arg0`</ph> or <ph id=\"ph3\">`arg1`</ph> if they are numeric values.","source":"A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for `arg0` or `arg1` if they are numeric values."},{"pos":[2621,2794],"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id=\"ph2\">`arg0`</ph>, <ph id=\"ph3\">`arg1`</ph>, or <ph id=\"ph4\">`arg2`</ph> if they are date and time values.","source":"A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for `arg0`, `arg1`, or `arg2` if they are date and time values."},{"pos":[2804,3023],"content":"A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0`,  `arg1`, and `arg2`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.","nodes":[{"content":"A custom <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting information for <ph id=\"ph2\">`arg0`</ph>,  <ph id=\"ph3\">`arg1`</ph>, and <ph id=\"ph4\">`arg2`</ph>.","pos":[0,123],"source":"A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0`,  `arg1`, and `arg2`."},{"content":"Typically, such an implementation also implements the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> interface.","pos":[124,219],"source":" Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface."}]},{"pos":[3030,3134],"content":"If the <ph id=\"ph1\">`provider`</ph> parameter is <ph id=\"ph2\">`null`</ph>, format provider information is obtained from the current culture.","source":"If the `provider` parameter is `null`, format provider information is obtained from the current culture."},{"pos":[3141,3609],"content":"`arg0`, `arg1`, and `arg2` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of the object that has the corresponding index. If the format item includes `formatString` and the corresponding argument implements the <xref:System.IFormattable> interface, then the argument's `ToString(formatString, provider)` method defines the formatting. Otherwise, the argument's `ToString()` method defines the formatting.","nodes":[{"content":"<ph id=\"ph1\">`arg0`</ph>, <ph id=\"ph2\">`arg1`</ph>, and <ph id=\"ph3\">`arg2`</ph> represent the objects to be formatted.","pos":[0,65],"source":"`arg0`, `arg1`, and `arg2` represent the objects to be formatted."},{"content":"Each format item in <ph id=\"ph1\">`format`</ph> is replaced with the string representation of the object that has the corresponding index.","pos":[66,185],"source":" Each format item in `format` is replaced with the string representation of the object that has the corresponding index."},{"content":"If the format item includes <ph id=\"ph1\">`formatString`</ph> and the corresponding argument implements the <ph id=\"ph2\">&lt;xref:System.IFormattable&gt;</ph> interface, then the argument's <ph id=\"ph3\">`ToString(formatString, provider)`</ph> method defines the formatting.","pos":[186,398],"source":" If the format item includes `formatString` and the corresponding argument implements the <xref:System.IFormattable> interface, then the argument's `ToString(formatString, provider)` method defines the formatting."},{"content":"Otherwise, the argument's <ph id=\"ph1\">`ToString()`</ph> method defines the formatting.","pos":[399,468],"source":" Otherwise, the argument's `ToString()` method defines the formatting."}]}],"pos":[125261,128904],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[129926,129991],"yaml":true},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[130053,130080],"yaml":true},{"content":"The first object to format.","nodes":[{"pos":[0,27],"content":"The first object to format.","nodes":[{"content":"The first object to format.","pos":[0,27]}]}],"pos":[130140,130168],"yaml":true},{"content":"The second object to format.","nodes":[{"pos":[0,28],"content":"The second object to format.","nodes":[{"content":"The second object to format.","pos":[0,28]}]}],"pos":[130228,130257],"yaml":true},{"content":"The third object to format.","nodes":[{"pos":[0,27],"content":"The third object to format.","nodes":[{"content":"The third object to format.","pos":[0,27]}]}],"pos":[130317,130345],"yaml":true},{"content":"A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.","nodes":[{"pos":[0,317],"content":"A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]},{"content":"After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> where any format specification is replaced by the string representation of the corresponding object argument.","pos":[71,317],"source":" After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument."}]}],"pos":[130414,130732],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[130900,130931],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to 3 (three).","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,137],"content":"The index of a format item is less than 0 (zero), or greater than or equal to 3 (three).","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to 3 (three).","pos":[0,88]}]}],"pos":[131021,131165],"yaml":true},{"content":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,106],"content":"The length of the expanded string would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[131279,131386],"yaml":true},{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.","nodes":[{"pos":[0,208],"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.","nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.","pos":[0,208],"nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.","pos":[0,128]},{"content":"Each format item is replaced by the string representation of a single argument.","pos":[129,208]}]}]}],"pos":[132724,132933],"yaml":true},{"content":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of the format items must be 0, to correspond to `arg0`, the single object in the parameter list of this method. The formatting process replaces each format item with the string representation of `arg0`.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n `arg0` represents the object to be formatted. Each format item in `format` is replaced with the string representation of `arg0`. If the format item includes `formatString` and `arg0` implements the <xref:System.IFormattable> interface, then `arg0.ToString(formatString, null)` defines the formatting. Otherwise, `arg0.ToString()` defines the formatting.  \n  \n If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","nodes":[{"pos":[0,272],"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","source":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object."},{"pos":[279,624],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of the format items must be 0, to correspond to `arg0`, the single object in the parameter list of this method. The formatting process replaces each format item with the string representation of `arg0`.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items.","pos":[0,132],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items."},{"content":"The index of the format items must be 0, to correspond to <ph id=\"ph1\">`arg0`</ph>, the single object in the parameter list of this method.","pos":[133,254],"source":" The index of the format items must be 0, to correspond to `arg0`, the single object in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of <ph id=\"ph1\">`arg0`</ph>.","pos":[255,345],"source":" The formatting process replaces each format item with the string representation of `arg0`."}]},{"pos":[631,673],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[680,717],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[724,809],"content":"Elements in square brackets are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets are optional. The following table describes each element.","pos":[0,85],"nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]}]}]},{"pos":[816,823],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[824,835],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[876,883],"content":"<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>","source":"*index*"},{"pos":[884,1183],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[77,206],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[207,299],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[1188,1197],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[1198,1355],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[1360,1375],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[1376,1446],"content":"A standard or custom format string that is supported by the parameter.","nodes":[{"content":"A standard or custom format string that is supported by the parameter.","pos":[0,70]}]},{"pos":[1455,2179],"content":"[!NOTE]\n For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","leadings":["","> "],"nodes":[{"content":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","pos":[8,722],"nodes":[{"content":"For the standard and custom format strings used with date and time values, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","pos":[1,298],"source":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"content":"For the standard and custom format strings used with numeric values, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[299,566],"source":" For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"For the standard format strings used with enumerations, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","pos":[567,714],"source":" For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."}]}]},{"pos":[2186,2539],"content":"`arg0` represents the object to be formatted. Each format item in `format` is replaced with the string representation of `arg0`. If the format item includes `formatString` and `arg0` implements the <xref:System.IFormattable> interface, then `arg0.ToString(formatString, null)` defines the formatting. Otherwise, `arg0.ToString()` defines the formatting.","nodes":[{"content":"<ph id=\"ph1\">`arg0`</ph> represents the object to be formatted.","pos":[0,45],"source":"`arg0` represents the object to be formatted."},{"content":"Each format item in <ph id=\"ph1\">`format`</ph> is replaced with the string representation of <ph id=\"ph2\">`arg0`</ph>.","pos":[46,128],"source":" Each format item in `format` is replaced with the string representation of `arg0`."},{"content":"If the format item includes <ph id=\"ph1\">`formatString`</ph> and <ph id=\"ph2\">`arg0`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id=\"ph4\">`arg0.ToString(formatString, null)`</ph> defines the formatting.","pos":[129,300],"source":" If the format item includes `formatString` and `arg0` implements the <xref:System.IFormattable> interface, then `arg0.ToString(formatString, null)` defines the formatting."},{"content":"Otherwise, <ph id=\"ph1\">`arg0.ToString()`</ph> defines the formatting.","pos":[301,353],"source":" Otherwise, `arg0.ToString()` defines the formatting."}]},{"pos":[2546,2820],"content":"If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","nodes":[{"content":"If the string assigned to <ph id=\"ph1\">`format`</ph> is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\"","pos":[0,124],"source":"If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\""},{"content":"and <ph id=\"ph1\">`arg0`</ph> is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","pos":[125,274],"source":" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\""}]}],"pos":[132944,135792],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[136481,136508],"yaml":true},{"content":"An object to format.","nodes":[{"pos":[0,20],"content":"An object to format.","nodes":[{"content":"An object to format.","pos":[0,20]}]}],"pos":[136568,136589],"yaml":true},{"content":"A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of <code>arg0</code>.","nodes":[{"pos":[0,166],"content":"A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of <code>arg0</code>.","nodes":[{"content":"A reference to this instance with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> appended.","pos":[0,63],"source":"A reference to this instance with <code>format</code> appended."},{"content":"Each format item in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is replaced by the string representation of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arg0</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[64,166],"source":" Each format item in <code>format</code> is replaced by the string representation of <code>arg0</code>."}]}],"pos":[136658,136825],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[136993,137024],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to 1.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,129],"content":"The index of a format item is less than 0 (zero), or greater than or equal to 1.","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to 1.","pos":[0,80]}]}],"pos":[137114,137250],"yaml":true},{"content":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,106],"content":"The length of the expanded string would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[137364,137471],"yaml":true},{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.","nodes":[{"pos":[0,236],"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.","nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.","pos":[0,236],"nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.","pos":[0,128]},{"content":"Each format item is replaced by the string representation of a corresponding argument in a parameter array.","pos":[129,236]}]}]}],"pos":[138955,139192],"yaml":true},{"content":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n `args` represents the objects to be formatted. Each format item in `format` is replaced with the string representation of the corresponding object in `args`. If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `args[index].ToString(formatString, provider)` defines the formatting. Otherwise, `args[index].ToString()` defines the formatting.  \n  \n If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","nodes":[{"pos":[0,272],"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","source":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object."},{"pos":[279,585],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method.","pos":[0,197],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the corresponding object.","pos":[198,306]}]},{"pos":[592,634],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[641,678],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[685,770],"content":"Elements in square brackets are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets are optional. The following table describes each element.","pos":[0,85],"nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]}]}]},{"pos":[777,784],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[785,796],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[837,844],"content":"<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>","source":"*index*"},{"pos":[845,1144],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[77,206],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[207,299],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[1149,1158],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[1159,1316],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[1321,1336],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[1337,1407],"content":"A standard or custom format string that is supported by the parameter.","nodes":[{"content":"A standard or custom format string that is supported by the parameter.","pos":[0,70]}]},{"pos":[1416,2140],"content":"[!NOTE]\n For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","leadings":["","> "],"nodes":[{"content":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","pos":[8,722],"nodes":[{"content":"For the standard and custom format strings used with date and time values, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","pos":[1,298],"source":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"content":"For the standard and custom format strings used with numeric values, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[299,566],"source":" For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"For the standard format strings used with enumerations, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","pos":[567,714],"source":" For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."}]}]},{"pos":[2147,2575],"content":"`args` represents the objects to be formatted. Each format item in `format` is replaced with the string representation of the corresponding object in `args`. If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `args[index].ToString(formatString, provider)` defines the formatting. Otherwise, `args[index].ToString()` defines the formatting.","nodes":[{"content":"<ph id=\"ph1\">`args`</ph> represents the objects to be formatted.","pos":[0,46],"source":"`args` represents the objects to be formatted."},{"content":"Each format item in <ph id=\"ph1\">`format`</ph> is replaced with the string representation of the corresponding object in <ph id=\"ph2\">`args`</ph>.","pos":[47,157],"source":" Each format item in `format` is replaced with the string representation of the corresponding object in `args`."},{"content":"If the format item includes <ph id=\"ph1\">`formatString`</ph> and the corresponding object in <ph id=\"ph2\">`args`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id=\"ph4\">`args[index].ToString(formatString, provider)`</ph> defines the formatting.","pos":[158,368],"source":" If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `args[index].ToString(formatString, provider)` defines the formatting."},{"content":"Otherwise, <ph id=\"ph1\">`args[index].ToString()`</ph> defines the formatting.","pos":[369,428],"source":" Otherwise, `args[index].ToString()` defines the formatting."}]},{"pos":[2582,2856],"content":"If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","nodes":[{"content":"If the string assigned to <ph id=\"ph1\">`format`</ph> is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\"","pos":[0,124],"source":"If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\""},{"content":"and <ph id=\"ph1\">`arg0`</ph> is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","pos":[125,274],"source":" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\""}]}],"pos":[139203,142087],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[142778,142805],"yaml":true},{"content":"An array of objects to format.","nodes":[{"pos":[0,30],"content":"An array of objects to format.","nodes":[{"content":"An array of objects to format.","pos":[0,30]}]}],"pos":[142867,142898],"yaml":true},{"content":"A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.","nodes":[{"pos":[0,182],"content":"A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.","nodes":[{"content":"A reference to this instance with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> appended.","pos":[0,63],"source":"A reference to this instance with <code>format</code> appended."},{"content":"Each format item in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is replaced by the string representation of the corresponding object argument.","pos":[64,182],"source":" Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument."}]}],"pos":[142967,143150],"yaml":true},{"content":"<code>format</code> or <code>args</code> is `null`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;args&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>format</code> or <code>args</code> is `null`."}],"pos":[143318,143370],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>args</code> array.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,169],"content":"The index of a format item is less than 0 (zero), or greater than or equal to the length of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","source":"The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>args</code> array."}],"pos":[143460,143636],"yaml":true},{"content":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,106],"content":"The length of the expanded string would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[143750,143857],"yaml":true},{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider.","nodes":[{"pos":[0,242],"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider.","nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider.","pos":[0,242],"nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.","pos":[0,128]},{"content":"Each format item is replaced by the string representation of a single argument using a specified format provider.","pos":[129,242]}]}]}],"pos":[145569,145812],"yaml":true},{"content":"This method uses the  [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of `arg0` to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of each format item must be zero (0) since this method includes an argument list with a single argument. The formatting process replaces each format item with the string representation of `arg0`.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. In this case, since the <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%29> method has a single argument in the argument list, the value of *index* must always be 0. If it is not, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for the objects in `args`. `provider` can be any of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for `arg0` if it is a numeric value.  \n  \n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for `arg0` if it is a date and time value.  \n  \n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.  \n  \n If the `provider` parameter is `null`, formatting information is obtained from the current culture.  \n  \n `arg0` represents the object to be formatted. Each format item in `format` is replaced with the string representation of `arg0`. If the format item includes `formatString` and `arg0` implements the <xref:System.IFormattable> interface, then `arg0.ToString(formatString, provider)` defines the formatting. Otherwise, `arg0.ToString()` defines the formatting.","nodes":[{"pos":[0,270],"content":"This method uses the  <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of <ph id=\"ph1\">`arg0`</ph> to its text representation and embed that representation in the current <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","source":"This method uses the  [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of `arg0` to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object."},{"pos":[277,615],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of each format item must be zero (0) since this method includes an argument list with a single argument. The formatting process replaces each format item with the string representation of `arg0`.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items.","pos":[0,132],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items."},{"content":"The index of each format item must be zero (0) since this method includes an argument list with a single argument.","pos":[133,247]},{"content":"The formatting process replaces each format item with the string representation of <ph id=\"ph1\">`arg0`</ph>.","pos":[248,338],"source":" The formatting process replaces each format item with the string representation of `arg0`."}]},{"pos":[622,664],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[671,708],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[715,800],"content":"Elements in square brackets are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets are optional. The following table describes each element.","pos":[0,85],"nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]}]}]},{"pos":[807,814],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[815,826],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[867,874],"content":"<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>","source":"*index*"},{"pos":[875,1358],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. In this case, since the <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%29> method has a single argument in the argument list, the value of *index* must always be 0. If it is not, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[77,206],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>."},{"content":"In this case, since the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%29&gt;</ph> method has a single argument in the argument list, the value of <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> must always be 0.","pos":[207,426],"source":" In this case, since the <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%29> method has a single argument in the argument list, the value of *index* must always be 0."},{"content":"If it is not, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[427,483],"source":" If it is not, a <xref:System.FormatException> is thrown."}]},{"pos":[1363,1372],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[1373,1530],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[1535,1550],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[1551,1621],"content":"A standard or custom format string that is supported by the parameter.","nodes":[{"content":"A standard or custom format string that is supported by the parameter.","pos":[0,70]}]},{"pos":[1630,2354],"content":"[!NOTE]\n For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","leadings":["","> "],"nodes":[{"content":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","pos":[8,722],"nodes":[{"content":"For the standard and custom format strings used with date and time values, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","pos":[1,298],"source":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"content":"For the standard and custom format strings used with numeric values, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[299,566],"source":" For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"For the standard format strings used with enumerations, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","pos":[567,714],"source":" For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."}]}]},{"pos":[2361,2550],"content":"The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for the objects in `args`. `provider` can be any of the following:","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter specifies an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that can provide formatting information for the objects in <ph id=\"ph3\">`args`</ph>.","pos":[0,149],"source":"The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for the objects in `args`."},{"content":"<ph id=\"ph1\">`provider`</ph> can be any of the following:","pos":[150,189],"source":"`provider` can be any of the following:"}]},{"pos":[2560,2663],"content":"A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that provides culture-specific formatting information.","pos":[0,103],"source":"A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information."}]},{"pos":[2673,2817],"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id=\"ph2\">`arg0`</ph> if it is a numeric value.","source":"A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for `arg0` if it is a numeric value."},{"pos":[2827,2979],"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id=\"ph2\">`arg0`</ph> if it is a date and time value.","source":"A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for `arg0` if it is a date and time value."},{"pos":[2989,3187],"content":"A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.","nodes":[{"content":"A custom <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting information for <ph id=\"ph2\">`arg0`</ph>.","pos":[0,102],"source":"A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0`."},{"content":"Typically, such an implementation also implements the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> interface.","pos":[103,198],"source":" Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface."}]},{"pos":[3194,3293],"content":"If the <ph id=\"ph1\">`provider`</ph> parameter is <ph id=\"ph2\">`null`</ph>, formatting information is obtained from the current culture.","source":"If the `provider` parameter is `null`, formatting information is obtained from the current culture."},{"pos":[3300,3657],"content":"`arg0` represents the object to be formatted. Each format item in `format` is replaced with the string representation of `arg0`. If the format item includes `formatString` and `arg0` implements the <xref:System.IFormattable> interface, then `arg0.ToString(formatString, provider)` defines the formatting. Otherwise, `arg0.ToString()` defines the formatting.","nodes":[{"content":"<ph id=\"ph1\">`arg0`</ph> represents the object to be formatted.","pos":[0,45],"source":"`arg0` represents the object to be formatted."},{"content":"Each format item in <ph id=\"ph1\">`format`</ph> is replaced with the string representation of <ph id=\"ph2\">`arg0`</ph>.","pos":[46,128],"source":" Each format item in `format` is replaced with the string representation of `arg0`."},{"content":"If the format item includes <ph id=\"ph1\">`formatString`</ph> and <ph id=\"ph2\">`arg0`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id=\"ph4\">`arg0.ToString(formatString, provider)`</ph> defines the formatting.","pos":[129,304],"source":" If the format item includes `formatString` and `arg0` implements the <xref:System.IFormattable> interface, then `arg0.ToString(formatString, provider)` defines the formatting."},{"content":"Otherwise, <ph id=\"ph1\">`arg0.ToString()`</ph> defines the formatting.","pos":[305,357],"source":" Otherwise, `arg0.ToString()` defines the formatting."}]}],"pos":[145823,149514],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[150603,150668],"yaml":true},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[150730,150757],"yaml":true},{"content":"The object to format.","nodes":[{"pos":[0,21],"content":"The object to format.","nodes":[{"content":"The object to format.","pos":[0,21]}]}],"pos":[150817,150839],"yaml":true},{"content":"A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> in which any format specification is replaced by the string representation of <code>arg0</code>.","nodes":[{"pos":[0,304],"content":"A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> in which any format specification is replaced by the string representation of <code>arg0</code>.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]},{"content":"After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which any format specification is replaced by the string representation of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">arg0</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[71,304],"source":" After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> in which any format specification is replaced by the string representation of <code>arg0</code>."}]}],"pos":[150908,151213],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[151381,151412],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to one (1).","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,135],"content":"The index of a format item is less than 0 (zero), or greater than or equal to one (1).","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to one (1).","pos":[0,86]}]}],"pos":[151502,151644],"yaml":true},{"content":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,106],"content":"The length of the expanded string would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[151758,151865],"yaml":true},{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.","nodes":[{"pos":[0,270],"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.","nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.","pos":[0,270],"nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.","pos":[0,128]},{"content":"Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.","pos":[129,270]}]}]}],"pos":[153335,153606],"yaml":true},{"content":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for the objects in `args`. `provider` can be any of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for numeric values in `args`.  \n  \n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for date and time values in `args`.  \n  \n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for one or more of the objects in `args`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface. The second example in the next section illustrates an <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method call with a custom <xref:System.IFormatProvider> implementation.  \n  \n If the `provider` parameter is `null`, format provider information is obtained from the current culture.  \n  \n `args` represents the objects to be formatted. Each format item in `format` is replaced with the string representation of the corresponding object in `args`. If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `args[index].ToString(formatString, provider)` defines the formatting. Otherwise, `args[index].ToString()` defines the formatting.","nodes":[{"pos":[0,272],"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","source":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object."},{"pos":[279,585],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method.","pos":[0,197],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the corresponding object.","pos":[198,306]}]},{"pos":[592,634],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[641,678],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[685,770],"content":"Elements in square brackets are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets are optional. The following table describes each element.","pos":[0,85],"nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]}]}]},{"pos":[777,784],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[785,796],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[837,844],"content":"<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>","source":"*index*"},{"pos":[845,1144],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[77,206],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[207,299],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[1149,1158],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[1159,1316],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[1321,1336],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[1337,1407],"content":"A standard or custom format string that is supported by the parameter.","nodes":[{"content":"A standard or custom format string that is supported by the parameter.","pos":[0,70]}]},{"pos":[1416,2140],"content":"[!NOTE]\n For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","leadings":["","> "],"nodes":[{"content":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","pos":[8,722],"nodes":[{"content":"For the standard and custom format strings used with date and time values, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","pos":[1,298],"source":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"content":"For the standard and custom format strings used with numeric values, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[299,566],"source":" For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"For the standard format strings used with enumerations, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","pos":[567,714],"source":" For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."}]}]},{"pos":[2147,2336],"content":"The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for the objects in `args`. `provider` can be any of the following:","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter specifies an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that can provide formatting information for the objects in <ph id=\"ph3\">`args`</ph>.","pos":[0,149],"source":"The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for the objects in `args`."},{"content":"<ph id=\"ph1\">`provider`</ph> can be any of the following:","pos":[150,189],"source":"`provider` can be any of the following:"}]},{"pos":[2346,2449],"content":"A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that provides culture-specific formatting information.","pos":[0,103],"source":"A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information."}]},{"pos":[2459,2596],"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific formatting information for numeric values in <ph id=\"ph2\">`args`</ph>.","source":"A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for numeric values in `args`."},{"pos":[2606,2751],"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that provides culture-specific formatting information for date and time values in <ph id=\"ph2\">`args`</ph>.","source":"A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for date and time values in `args`."},{"pos":[2761,3252],"content":"A custom <xref:System.IFormatProvider> implementation that provides formatting information for one or more of the objects in `args`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface. The second example in the next section illustrates an <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method call with a custom <xref:System.IFormatProvider> implementation.","nodes":[{"content":"A custom <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting information for one or more of the objects in <ph id=\"ph2\">`args`</ph>.","pos":[0,132],"source":"A custom <xref:System.IFormatProvider> implementation that provides formatting information for one or more of the objects in `args`."},{"content":"Typically, such an implementation also implements the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> interface.","pos":[133,228],"source":" Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface."},{"content":"The second example in the next section illustrates an <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt;</ph> method call with a custom <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation.","pos":[229,491],"source":" The second example in the next section illustrates an <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method call with a custom <xref:System.IFormatProvider> implementation."}]},{"pos":[3259,3363],"content":"If the <ph id=\"ph1\">`provider`</ph> parameter is <ph id=\"ph2\">`null`</ph>, format provider information is obtained from the current culture.","source":"If the `provider` parameter is `null`, format provider information is obtained from the current culture."},{"pos":[3370,3798],"content":"`args` represents the objects to be formatted. Each format item in `format` is replaced with the string representation of the corresponding object in `args`. If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `args[index].ToString(formatString, provider)` defines the formatting. Otherwise, `args[index].ToString()` defines the formatting.","nodes":[{"content":"<ph id=\"ph1\">`args`</ph> represents the objects to be formatted.","pos":[0,46],"source":"`args` represents the objects to be formatted."},{"content":"Each format item in <ph id=\"ph1\">`format`</ph> is replaced with the string representation of the corresponding object in <ph id=\"ph2\">`args`</ph>.","pos":[47,157],"source":" Each format item in `format` is replaced with the string representation of the corresponding object in `args`."},{"content":"If the format item includes <ph id=\"ph1\">`formatString`</ph> and the corresponding object in <ph id=\"ph2\">`args`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id=\"ph4\">`args[index].ToString(formatString, provider)`</ph> defines the formatting.","pos":[158,368],"source":" If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `args[index].ToString(formatString, provider)` defines the formatting."},{"content":"Otherwise, <ph id=\"ph1\">`args[index].ToString()`</ph> defines the formatting.","pos":[369,428],"source":" Otherwise, `args[index].ToString()` defines the formatting."}]}],"pos":[153617,157449],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[159000,159065],"yaml":true},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[159127,159154],"yaml":true},{"content":"An array of objects to format.","nodes":[{"pos":[0,30],"content":"An array of objects to format.","nodes":[{"content":"An array of objects to format.","pos":[0,30]}]}],"pos":[159216,159247],"yaml":true},{"content":"A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.","nodes":[{"pos":[0,317],"content":"A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]},{"content":"After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> where any format specification is replaced by the string representation of the corresponding object argument.","pos":[71,317],"source":" After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument."}]}],"pos":[159316,159634],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[159802,159833],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>args</code> array.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,169],"content":"The index of a format item is less than 0 (zero), or greater than or equal to the length of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","source":"The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>args</code> array."}],"pos":[159923,160099],"yaml":true},{"content":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,106],"content":"The length of the expanded string would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[160213,160320],"yaml":true},{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.","nodes":[{"pos":[0,214],"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.","nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.","pos":[0,214],"nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.","pos":[0,128]},{"content":"Each format item is replaced by the string representation of either of two arguments.","pos":[129,214]}]}]}],"pos":[161978,162193],"yaml":true},{"content":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to `arg0` and `arg1`, the two objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n `arg0` and `arg1` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of either `arg0` or `arg1`. If the format item includes `formatString` and the corresponding object implements the <xref:System.IFormattable> interface, then `arg`*x*`.ToString(formatString, provider)` defines the formatting, where *x* is the index of the argument. Otherwise, `arg`*x*`.ToString()` defines the formatting.  \n  \n If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","nodes":[{"pos":[0,272],"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","source":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object."},{"pos":[279,612],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to `arg0` and `arg1`, the two objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to <ph id=\"ph2\">`arg0`</ph> and <ph id=\"ph3\">`arg1`</ph>, the two objects in the parameter list of this method.","pos":[0,224],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to `arg0` and `arg1`, the two objects in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the corresponding object.","pos":[225,333]}]},{"pos":[619,661],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[668,705],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[712,797],"content":"Elements in square brackets are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets are optional. The following table describes each element.","pos":[0,85],"nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]}]}]},{"pos":[804,811],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[812,823],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[864,871],"content":"<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>","source":"*index*"},{"pos":[872,1171],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[77,206],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[207,299],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[1176,1185],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[1186,1343],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[1348,1363],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[1364,1434],"content":"A standard or custom format string that is supported by the parameter.","nodes":[{"content":"A standard or custom format string that is supported by the parameter.","pos":[0,70]}]},{"pos":[1443,2167],"content":"[!NOTE]\n For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","leadings":["","> "],"nodes":[{"content":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","pos":[8,722],"nodes":[{"content":"For the standard and custom format strings used with date and time values, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","pos":[1,298],"source":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"content":"For the standard and custom format strings used with numeric values, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[299,566],"source":" For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"For the standard format strings used with enumerations, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","pos":[567,714],"source":" For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."}]}]},{"pos":[2174,2625],"content":"`arg0` and `arg1` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of either `arg0` or `arg1`. If the format item includes `formatString` and the corresponding object implements the <xref:System.IFormattable> interface, then `arg`*x*`.ToString(formatString, provider)` defines the formatting, where *x* is the index of the argument. Otherwise, `arg`*x*`.ToString()` defines the formatting.","nodes":[{"content":"<ph id=\"ph1\">`arg0`</ph> and <ph id=\"ph2\">`arg1`</ph> represent the objects to be formatted.","pos":[0,56],"source":"`arg0` and `arg1` represent the objects to be formatted."},{"content":"Each format item in <ph id=\"ph1\">`format`</ph> is replaced with the string representation of either <ph id=\"ph2\">`arg0`</ph> or <ph id=\"ph3\">`arg1`</ph>.","pos":[57,156],"source":" Each format item in `format` is replaced with the string representation of either `arg0` or `arg1`."},{"content":"If the format item includes <ph id=\"ph1\">`formatString`</ph> and the corresponding object implements the <ph id=\"ph2\">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id=\"ph3\">`arg`</ph><bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept><ph id=\"ph4\">`.ToString(formatString, provider)`</ph> defines the formatting, where <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept> is the index of the argument.","pos":[157,394],"source":" If the format item includes `formatString` and the corresponding object implements the <xref:System.IFormattable> interface, then `arg`*x*`.ToString(formatString, provider)` defines the formatting, where *x* is the index of the argument."},{"content":"Otherwise, <ph id=\"ph1\">`arg`</ph><bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept><ph id=\"ph2\">`.ToString()`</ph> defines the formatting.","pos":[395,451],"source":" Otherwise, `arg`*x*`.ToString()` defines the formatting."}]},{"pos":[2632,2906],"content":"If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","nodes":[{"content":"If the string assigned to <ph id=\"ph1\">`format`</ph> is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\"","pos":[0,124],"source":"If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\""},{"content":"and <ph id=\"ph1\">`arg0`</ph> is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","pos":[125,274],"source":" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\""}]}],"pos":[162204,165138],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[165840,165867],"yaml":true},{"content":"The first object to format.","nodes":[{"pos":[0,27],"content":"The first object to format.","nodes":[{"content":"The first object to format.","pos":[0,27]}]}],"pos":[165927,165955],"yaml":true},{"content":"The second object to format.","nodes":[{"pos":[0,28],"content":"The second object to format.","nodes":[{"content":"The second object to format.","pos":[0,28]}]}],"pos":[166015,166044],"yaml":true},{"content":"A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.","nodes":[{"pos":[0,182],"content":"A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.","nodes":[{"content":"A reference to this instance with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> appended.","pos":[0,63],"source":"A reference to this instance with <code>format</code> appended."},{"content":"Each format item in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is replaced by the string representation of the corresponding object argument.","pos":[64,182],"source":" Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument."}]}],"pos":[166113,166296],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[166464,166495],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to 2.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,129],"content":"The index of a format item is less than 0 (zero), or greater than or equal to 2.","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to 2.","pos":[0,80]}]}],"pos":[166585,166721],"yaml":true},{"content":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,106],"content":"The length of the expanded string would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[166835,166942],"yaml":true},{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.","nodes":[{"pos":[0,248],"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.","nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.","pos":[0,248],"nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.","pos":[0,128]},{"content":"Each format item is replaced by the string representation of either of two arguments using a specified format provider.","pos":[129,248]}]}]}],"pos":[168600,168849],"yaml":true},{"content":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for `arg0` and `arg1`. `provider` can be any of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for `arg0` or `arg1` if they are numeric values.  \n  \n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for `arg0` or `arg1` if they are date and time values.  \n  \n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0` and `arg1`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.  \n  \n If the `provider` parameter is `null`, format provider information is obtained from the current culture.  \n  \n `arg0` and `arg1` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of the object that has the corresponding index. If the format item includes `formatString` and the corresponding argument implements the <xref:System.IFormattable> interface, then the argument's `ToString(formatString, provider)` method defines the formatting. Otherwise, the argument's `ToString()` method defines the formatting.","nodes":[{"pos":[0,272],"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","source":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object."},{"pos":[279,585],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method.","pos":[0,197],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the corresponding object.","pos":[198,306]}]},{"pos":[592,634],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[641,678],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[685,770],"content":"Elements in square brackets are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets are optional. The following table describes each element.","pos":[0,85],"nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]}]}]},{"pos":[777,784],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[785,796],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[837,844],"content":"<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>","source":"*index*"},{"pos":[845,1144],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[77,206],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[207,299],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[1149,1158],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[1159,1316],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[1321,1336],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[1337,1407],"content":"A standard or custom format string that is supported by the parameter.","nodes":[{"content":"A standard or custom format string that is supported by the parameter.","pos":[0,70]}]},{"pos":[1416,2140],"content":"[!NOTE]\n For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","leadings":["","> "],"nodes":[{"content":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","pos":[8,722],"nodes":[{"content":"For the standard and custom format strings used with date and time values, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","pos":[1,298],"source":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"content":"For the standard and custom format strings used with numeric values, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[299,566],"source":" For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"For the standard format strings used with enumerations, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","pos":[567,714],"source":" For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."}]}]},{"pos":[2147,2332],"content":"The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for `arg0` and `arg1`. `provider` can be any of the following:","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter specifies an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that can provide formatting information for <ph id=\"ph3\">`arg0`</ph> and <ph id=\"ph4\">`arg1`</ph>.","pos":[0,145],"source":"The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for `arg0` and `arg1`."},{"content":"<ph id=\"ph1\">`provider`</ph> can be any of the following:","pos":[146,185],"source":"`provider` can be any of the following:"}]},{"pos":[2342,2445],"content":"A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that provides culture-specific formatting information.","pos":[0,103],"source":"A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information."}]},{"pos":[2455,2611],"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id=\"ph2\">`arg0`</ph> or <ph id=\"ph3\">`arg1`</ph> if they are numeric values.","source":"A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for `arg0` or `arg1` if they are numeric values."},{"pos":[2621,2785],"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.DateTimeFormatInfo&gt;</ph> object that provides culture-specific formatting information for <ph id=\"ph2\">`arg0`</ph> or <ph id=\"ph3\">`arg1`</ph> if they are date and time values.","source":"A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for `arg0` or `arg1` if they are date and time values."},{"pos":[2795,3004],"content":"A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0` and `arg1`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.","nodes":[{"content":"A custom <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting information for <ph id=\"ph2\">`arg0`</ph> and <ph id=\"ph3\">`arg1`</ph>.","pos":[0,113],"source":"A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0` and `arg1`."},{"content":"Typically, such an implementation also implements the <ph id=\"ph1\">&lt;xref:System.ICustomFormatter&gt;</ph> interface.","pos":[114,209],"source":" Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface."}]},{"pos":[3011,3115],"content":"If the <ph id=\"ph1\">`provider`</ph> parameter is <ph id=\"ph2\">`null`</ph>, format provider information is obtained from the current culture.","source":"If the `provider` parameter is `null`, format provider information is obtained from the current culture."},{"pos":[3122,3581],"content":"`arg0` and `arg1` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of the object that has the corresponding index. If the format item includes `formatString` and the corresponding argument implements the <xref:System.IFormattable> interface, then the argument's `ToString(formatString, provider)` method defines the formatting. Otherwise, the argument's `ToString()` method defines the formatting.","nodes":[{"content":"<ph id=\"ph1\">`arg0`</ph> and <ph id=\"ph2\">`arg1`</ph> represent the objects to be formatted.","pos":[0,56],"source":"`arg0` and `arg1` represent the objects to be formatted."},{"content":"Each format item in <ph id=\"ph1\">`format`</ph> is replaced with the string representation of the object that has the corresponding index.","pos":[57,176],"source":" Each format item in `format` is replaced with the string representation of the object that has the corresponding index."},{"content":"If the format item includes <ph id=\"ph1\">`formatString`</ph> and the corresponding argument implements the <ph id=\"ph2\">&lt;xref:System.IFormattable&gt;</ph> interface, then the argument's <ph id=\"ph3\">`ToString(formatString, provider)`</ph> method defines the formatting.","pos":[177,389],"source":" If the format item includes `formatString` and the corresponding argument implements the <xref:System.IFormattable> interface, then the argument's `ToString(formatString, provider)` method defines the formatting."},{"content":"Otherwise, the argument's <ph id=\"ph1\">`ToString()`</ph> method defines the formatting.","pos":[390,459],"source":" Otherwise, the argument's `ToString()` method defines the formatting."}]}],"pos":[168860,172475],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[173611,173676],"yaml":true},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[173738,173765],"yaml":true},{"content":"The first object to format.","nodes":[{"pos":[0,27],"content":"The first object to format.","nodes":[{"content":"The first object to format.","pos":[0,27]}]}],"pos":[173825,173853],"yaml":true},{"content":"The second object to format.","nodes":[{"pos":[0,28],"content":"The second object to format.","nodes":[{"content":"The second object to format.","pos":[0,28]}]}],"pos":[173913,173942],"yaml":true},{"content":"A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.","nodes":[{"pos":[0,317],"content":"A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]},{"content":"After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> where any format specification is replaced by the string representation of the corresponding object argument.","pos":[71,317],"source":" After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument."}]}],"pos":[174011,174329],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[174497,174528],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to 2 (two).","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,135],"content":"The index of a format item is less than 0 (zero), or greater than or equal to 2 (two).","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to 2 (two).","pos":[0,86]}]}],"pos":[174618,174760],"yaml":true},{"content":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,106],"content":"The length of the expanded string would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[174874,174981],"yaml":true},{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.","nodes":[{"pos":[0,216],"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.","nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.","pos":[0,216],"nodes":[{"content":"Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.","pos":[0,128]},{"content":"Each format item is replaced by the string representation of either of three arguments.","pos":[129,216]}]}]}],"pos":[176451,176668],"yaml":true},{"content":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to `arg0` through `arg2`, the objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \n  \n The syntax of a format item is as follows:  \n  \n {*index*[,*length*][:*formatString*]}  \n  \n Elements in square brackets are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \n  \n> [!NOTE]\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \n  \n `arg0`, `arg1`, and `arg2` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of either `arg0`, `arg1`, or `arg2`, depending on the index of the format item. If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `arg`*x*`.ToString(formatString, null)` defines the formatting, where *x* is the index of the argument. Otherwise, `arg`*x*`.ToString()` defines the formatting.  \n  \n If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","nodes":[{"pos":[0,272],"content":"This method uses the <bpt id=\"p1\">[</bpt>composite formatting feature<ept id=\"p1\">](~/docs/standard/base-types/composite-formatting.md)</ept> of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","source":"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object."},{"pos":[279,612],"content":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to `arg0` through `arg2`, the objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to <ph id=\"ph2\">`arg0`</ph> through <ph id=\"ph3\">`arg2`</ph>, the objects in the parameter list of this method.","pos":[0,224],"source":"The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to `arg0` through `arg2`, the objects in the parameter list of this method."},{"content":"The formatting process replaces each format item with the string representation of the corresponding object.","pos":[225,333]}]},{"pos":[619,661],"content":"The syntax of a format item is as follows:","nodes":[{"content":"The syntax of a format item is as follows:","pos":[0,42]}]},{"pos":[668,705],"content":"{<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>[,<bpt id=\"p2\">*</bpt>length<ept id=\"p2\">*</ept>][:<bpt id=\"p3\">*</bpt>formatString<ept id=\"p3\">*</ept>]}","source":"{*index*[,*length*][:*formatString*]}"},{"pos":[712,797],"content":"Elements in square brackets are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets are optional. The following table describes each element.","pos":[0,85],"nodes":[{"content":"Elements in square brackets are optional.","pos":[0,41]},{"content":"The following table describes each element.","pos":[42,85]}]}]},{"pos":[804,811],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[812,823],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[864,871],"content":"<bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept>","source":"*index*"},{"pos":[872,1171],"content":"The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.","nodes":[{"content":"The zero-based position in the parameter list of the object to be formatted.","pos":[0,76]},{"content":"If the object specified by <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> is <ph id=\"ph1\">`null`</ph>, the format item is replaced by <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[77,206],"source":" If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>."},{"content":"If there is no parameter in the <bpt id=\"p1\">*</bpt>index<ept id=\"p1\">*</ept> position, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[207,299],"source":" If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown."}]},{"pos":[1176,1185],"content":",<bpt id=\"p1\">*</bpt>length<ept id=\"p1\">*</ept>","source":",*length*"},{"pos":[1186,1343],"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","nodes":[{"content":"The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[0,157],"nodes":[{"content":"The minimum number of characters in the string representation of the parameter.","pos":[0,79]},{"content":"If positive, the parameter is right-aligned; if negative, it is left-aligned.","pos":[80,157]}]}]},{"pos":[1348,1363],"content":":<bpt id=\"p1\">*</bpt>formatString<ept id=\"p1\">*</ept>","source":":*formatString*"},{"pos":[1364,1434],"content":"A standard or custom format string that is supported by the parameter.","nodes":[{"content":"A standard or custom format string that is supported by the parameter.","pos":[0,70]}]},{"pos":[1443,2167],"content":"[!NOTE]\n For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","leadings":["","> "],"nodes":[{"content":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).","pos":[8,722],"nodes":[{"content":"For the standard and custom format strings used with date and time values, see <bpt id=\"p1\">[</bpt>Standard Date and Time Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-date-and-time-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Date and Time Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-date-and-time-format-strings.md)</ept>.","pos":[1,298],"source":" For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)."},{"content":"For the standard and custom format strings used with numeric values, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[299,566],"source":" For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"For the standard format strings used with enumerations, see <bpt id=\"p1\">[</bpt>Enumeration Format Strings<ept id=\"p1\">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.","pos":[567,714],"source":" For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md)."}]}]},{"pos":[2174,2692],"content":"`arg0`, `arg1`, and `arg2` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of either `arg0`, `arg1`, or `arg2`, depending on the index of the format item. If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `arg`*x*`.ToString(formatString, null)` defines the formatting, where *x* is the index of the argument. Otherwise, `arg`*x*`.ToString()` defines the formatting.","nodes":[{"content":"<ph id=\"ph1\">`arg0`</ph>, <ph id=\"ph2\">`arg1`</ph>, and <ph id=\"ph3\">`arg2`</ph> represent the objects to be formatted.","pos":[0,65],"source":"`arg0`, `arg1`, and `arg2` represent the objects to be formatted."},{"content":"Each format item in <ph id=\"ph1\">`format`</ph> is replaced with the string representation of either <ph id=\"ph2\">`arg0`</ph>, <ph id=\"ph3\">`arg1`</ph>, or <ph id=\"ph4\">`arg2`</ph>, depending on the index of the format item.","pos":[66,217],"source":" Each format item in `format` is replaced with the string representation of either `arg0`, `arg1`, or `arg2`, depending on the index of the format item."},{"content":"If the format item includes <ph id=\"ph1\">`formatString`</ph> and the corresponding object in <ph id=\"ph2\">`args`</ph> implements the <ph id=\"ph3\">&lt;xref:System.IFormattable&gt;</ph> interface, then <ph id=\"ph4\">`arg`</ph><bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept><ph id=\"ph5\">`.ToString(formatString, null)`</ph> defines the formatting, where <bpt id=\"p2\">*</bpt>x<ept id=\"p2\">*</ept> is the index of the argument.","pos":[218,461],"source":" If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `arg`*x*`.ToString(formatString, null)` defines the formatting, where *x* is the index of the argument."},{"content":"Otherwise, <ph id=\"ph1\">`arg`</ph><bpt id=\"p1\">*</bpt>x<ept id=\"p1\">*</ept><ph id=\"ph2\">`.ToString()`</ph> defines the formatting.","pos":[462,518],"source":" Otherwise, `arg`*x*`.ToString()` defines the formatting."}]},{"pos":[2699,2973],"content":"If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","nodes":[{"content":"If the string assigned to <ph id=\"ph1\">`format`</ph> is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\"","pos":[0,124],"source":"If the string assigned to `format` is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\""},{"content":"and <ph id=\"ph1\">`arg0`</ph> is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\"","pos":[125,274],"source":" and `arg0` is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\""}]}],"pos":[176679,179680],"yaml":true,"extradata":"MT"},{"content":"A composite format string.","nodes":[{"pos":[0,26],"content":"A composite format string.","nodes":[{"content":"A composite format string.","pos":[0,26]}]}],"pos":[180395,180422],"yaml":true},{"content":"The first object to format.","nodes":[{"pos":[0,27],"content":"The first object to format.","nodes":[{"content":"The first object to format.","pos":[0,27]}]}],"pos":[180482,180510],"yaml":true},{"content":"The second object to format.","nodes":[{"pos":[0,28],"content":"The second object to format.","nodes":[{"content":"The second object to format.","pos":[0,28]}]}],"pos":[180570,180599],"yaml":true},{"content":"The third object to format.","nodes":[{"pos":[0,27],"content":"The third object to format.","nodes":[{"content":"The third object to format.","pos":[0,27]}]}],"pos":[180659,180687],"yaml":true},{"content":"A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.","nodes":[{"pos":[0,182],"content":"A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.","nodes":[{"content":"A reference to this instance with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> appended.","pos":[0,63],"source":"A reference to this instance with <code>format</code> appended."},{"content":"Each format item in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> is replaced by the string representation of the corresponding object argument.","pos":[64,182],"source":" Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument."}]}],"pos":[180756,180939],"yaml":true},{"content":"<code>format</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>format</code> is `null`."}],"pos":[181107,181138],"yaml":true},{"content":"<code>format</code> is invalid.  \n  \n -or-  \n  \n The index of a format item is less than 0 (zero), or greater than or equal to 3.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is invalid.","source":"<code>format</code> is invalid."},{"pos":[38,42],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[49,129],"content":"The index of a format item is less than 0 (zero), or greater than or equal to 3.","nodes":[{"content":"The index of a format item is less than 0 (zero), or greater than or equal to 3.","pos":[0,80]}]}],"pos":[181228,181364],"yaml":true},{"content":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,106],"content":"The length of the expanded string would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[181478,181585],"yaml":true},{"content":"Appends the default line terminator to the end of the current <xref href=\"System.Text.StringBuilder\"></xref> object.","nodes":[{"pos":[0,116],"content":"Appends the default line terminator to the end of the current <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> object.","source":"Appends the default line terminator to the end of the current <xref href=\"System.Text.StringBuilder\"></xref> object."}],"pos":[189530,189647],"yaml":true},{"content":"The default line terminator is the current value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,127],"content":"The default line terminator is the current value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property.","nodes":[{"content":"The default line terminator is the current value of the <ph id=\"ph1\">&lt;xref:System.Environment.NewLine%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,127],"source":"The default line terminator is the current value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property."}]},{"pos":[134,186],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[189658,189849],"yaml":true,"extradata":"MT"},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[190561,190632],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[190810,190920],"yaml":true},{"content":"Appends a copy of the specified string followed by the default line terminator to the end of the current <xref href=\"System.Text.StringBuilder\"></xref> object.","nodes":[{"pos":[0,159],"content":"Appends a copy of the specified string followed by the default line terminator to the end of the current <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> object.","source":"Appends a copy of the specified string followed by the default line terminator to the end of the current <xref href=\"System.Text.StringBuilder\"></xref> object."}],"pos":[192509,192669],"yaml":true},{"content":"The default line terminator is the current value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property.  \n  \n The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,127],"content":"The default line terminator is the current value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property.","nodes":[{"content":"The default line terminator is the current value of the <ph id=\"ph1\">&lt;xref:System.Environment.NewLine%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,127],"source":"The default line terminator is the current value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property."}]},{"pos":[134,186],"content":"The capacity of this instance is adjusted as needed.","nodes":[{"content":"The capacity of this instance is adjusted as needed.","pos":[0,52]}]}],"pos":[192680,192871],"yaml":true,"extradata":"MT"},{"content":"The string to append.","nodes":[{"pos":[0,21],"content":"The string to append.","nodes":[{"content":"The string to append.","pos":[0,21]}]}],"pos":[193098,193120],"yaml":true},{"content":"A reference to this instance after the append operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the append operation has completed.","nodes":[{"content":"A reference to this instance after the append operation has completed.","pos":[0,70]}]}],"pos":[193189,193260],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[193438,193548],"yaml":true},{"content":"Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.","nodes":[{"pos":[0,116],"content":"Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.","nodes":[{"content":"Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.","pos":[0,116]}]}],"pos":[195058,195175],"yaml":true},{"content":"<xref:System.Text.StringBuilder.Capacity%2A> does not affect the string value of the current instance. <xref:System.Text.StringBuilder.Capacity%2A> can be decreased as long as it is not less than <xref:System.Text.StringBuilder.Length%2A>.  \n  \n The <xref:System.Text.StringBuilder> dynamically allocates more space when required and increases <xref:System.Text.StringBuilder.Capacity%2A> accordingly. For performance reasons, a <xref:System.Text.StringBuilder> might allocate more memory than needed. The amount of memory allocated is implementation-specific.","nodes":[{"pos":[0,239],"content":"<xref:System.Text.StringBuilder.Capacity%2A> does not affect the string value of the current instance. <xref:System.Text.StringBuilder.Capacity%2A> can be decreased as long as it is not less than <xref:System.Text.StringBuilder.Length%2A>.","nodes":[{"content":"<xref:System.Text.StringBuilder.Capacity%2A> does not affect the string value of the current instance. <xref:System.Text.StringBuilder.Capacity%2A> can be decreased as long as it is not less than <xref:System.Text.StringBuilder.Length%2A>.","pos":[0,239],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> does not affect the string value of the current instance.","pos":[0,102],"source":"<xref:System.Text.StringBuilder.Capacity%2A> does not affect the string value of the current instance."},{"content":"<ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> can be decreased as long as it is not less than <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph>.","pos":[103,239],"source":" <xref:System.Text.StringBuilder.Capacity%2A> can be decreased as long as it is not less than <xref:System.Text.StringBuilder.Length%2A>."}]}]},{"pos":[246,560],"content":"The <xref:System.Text.StringBuilder> dynamically allocates more space when required and increases <xref:System.Text.StringBuilder.Capacity%2A> accordingly. For performance reasons, a <xref:System.Text.StringBuilder> might allocate more memory than needed. The amount of memory allocated is implementation-specific.","nodes":[{"content":"The <xref:System.Text.StringBuilder> dynamically allocates more space when required and increases <xref:System.Text.StringBuilder.Capacity%2A> accordingly. For performance reasons, a <xref:System.Text.StringBuilder> might allocate more memory than needed. The amount of memory allocated is implementation-specific.","pos":[0,314],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> dynamically allocates more space when required and increases <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> accordingly.","pos":[0,155],"source":"The <xref:System.Text.StringBuilder> dynamically allocates more space when required and increases <xref:System.Text.StringBuilder.Capacity%2A> accordingly."},{"content":"For performance reasons, a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> might allocate more memory than needed.","pos":[156,255],"source":" For performance reasons, a <xref:System.Text.StringBuilder> might allocate more memory than needed."},{"content":"The amount of memory allocated is implementation-specific.","pos":[256,314]}]}]}],"pos":[195186,195751],"yaml":true,"extradata":"MT"},{"content":"The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from <xref href=\"System.Text.StringBuilder.Length\"></xref> to <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,245],"content":"The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from <xref href=\"System.Text.StringBuilder.Length\"></xref> to <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"content":"The maximum number of characters that can be contained in the memory allocated by the current instance.","pos":[0,103]},{"content":"Its value can range from <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.Length\"&gt;&lt;/xref&gt;</ph> to <ph id=\"ph2\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","pos":[104,245],"source":" Its value can range from <xref href=\"System.Text.StringBuilder.Length\"></xref> to <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}]}],"pos":[196377,196623],"yaml":true},{"content":"The value specified for a set operation is less than the current length of this instance.  \n  \n -or-  \n  \n The value specified for a set operation is greater than the maximum capacity.","nodes":[{"pos":[0,89],"content":"The value specified for a set operation is less than the current length of this instance.","nodes":[{"content":"The value specified for a set operation is less than the current length of this instance.","pos":[0,89]}]},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,184],"content":"The value specified for a set operation is greater than the maximum capacity.","nodes":[{"content":"The value specified for a set operation is greater than the maximum capacity.","pos":[0,77]}]}],"pos":[196799,196990],"yaml":true},{"content":"Gets or sets the character at the specified character position in this instance.","nodes":[{"pos":[0,80],"content":"Gets or sets the character at the specified character position in this instance.","nodes":[{"content":"Gets or sets the character at the specified character position in this instance.","pos":[0,80]}]}],"pos":[198470,198551],"yaml":true},{"content":"The `index` parameter is the position of a character within the <xref:System.Text.StringBuilder>. The first character in the string is at index 0. The length of a string is the number of characters it contains. The last accessible character of a <xref:System.Text.StringBuilder> instance is at index <xref:System.Text.StringBuilder.Length%2A> - 1.  \n  \n <xref:System.Text.StringBuilder.Chars%2A> is the default property of the <xref:System.Text.StringBuilder> class. In C#, it is an indexer. This means that individual characters can be retrieved from the <xref:System.Text.StringBuilder.Chars%2A> property as shown in the following example, which counts the number of alphabetic, white-space, and punctuation characters in a string.  \n  \n [!code-csharp[System.Text.StringBuilder.Chars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.chars/cs/chars1.cs#1)]\n [!code-vb[System.Text.StringBuilder.Chars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.chars/vb/chars1.vb#1)]","nodes":[{"pos":[0,347],"content":"The `index` parameter is the position of a character within the <xref:System.Text.StringBuilder>. The first character in the string is at index 0. The length of a string is the number of characters it contains. The last accessible character of a <xref:System.Text.StringBuilder> instance is at index <xref:System.Text.StringBuilder.Length%2A> - 1.","nodes":[{"content":"The <ph id=\"ph1\">`index`</ph> parameter is the position of a character within the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph>.","pos":[0,97],"source":"The `index` parameter is the position of a character within the <xref:System.Text.StringBuilder>."},{"content":"The first character in the string is at index 0.","pos":[98,146]},{"content":"The length of a string is the number of characters it contains.","pos":[147,210]},{"content":"The last accessible character of a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> instance is at index <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> - 1.","pos":[211,347],"source":" The last accessible character of a <xref:System.Text.StringBuilder> instance is at index <xref:System.Text.StringBuilder.Length%2A> - 1."}]},{"pos":[354,733],"content":"<xref:System.Text.StringBuilder.Chars%2A> is the default property of the <xref:System.Text.StringBuilder> class. In C#, it is an indexer. This means that individual characters can be retrieved from the <xref:System.Text.StringBuilder.Chars%2A> property as shown in the following example, which counts the number of alphabetic, white-space, and punctuation characters in a string.","nodes":[{"content":"<xref:System.Text.StringBuilder.Chars%2A> is the default property of the <xref:System.Text.StringBuilder> class. In C#, it is an indexer. This means that individual characters can be retrieved from the <xref:System.Text.StringBuilder.Chars%2A> property as shown in the following example, which counts the number of alphabetic, white-space, and punctuation characters in a string.","pos":[0,379],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> is the default property of the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> class.","pos":[0,112],"source":"<xref:System.Text.StringBuilder.Chars%2A> is the default property of the <xref:System.Text.StringBuilder> class."},{"content":"In C#, it is an indexer.","pos":[113,137]},{"content":"This means that individual characters can be retrieved from the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Chars%2A&gt;</ph> property as shown in the following example, which counts the number of alphabetic, white-space, and punctuation characters in a string.","pos":[138,379],"source":" This means that individual characters can be retrieved from the <xref:System.Text.StringBuilder.Chars%2A> property as shown in the following example, which counts the number of alphabetic, white-space, and punctuation characters in a string."}]}]},{"pos":[740,1035],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.StringBuilder.Chars#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.chars/cs/chars1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.StringBuilder.Chars#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.chars/vb/chars1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.StringBuilder.Chars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.chars/cs/chars1.cs#1)]\n [!code-vb[System.Text.StringBuilder.Chars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.chars/vb/chars1.vb#1)]"}],"pos":[198562,199605],"yaml":true,"extradata":"MT"},{"content":"The position of the character.","nodes":[{"pos":[0,30],"content":"The position of the character.","nodes":[{"content":"The position of the character.","pos":[0,30]}]}],"pos":[199746,199777],"yaml":true},{"content":"The Unicode character at position <code>index</code>.","nodes":[{"pos":[0,53],"content":"The Unicode character at position <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">index</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The Unicode character at position <code>index</code>."}],"pos":[199832,199886],"yaml":true},{"content":"<code>index</code> is outside the bounds of this instance while setting a character.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the bounds of this instance while setting a character.","source":"<code>index</code> is outside the bounds of this instance while setting a character."}],"pos":[200059,200144],"yaml":true},{"content":"<code>index</code> is outside the bounds of this instance while getting a character.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the bounds of this instance while getting a character.","source":"<code>index</code> is outside the bounds of this instance while getting a character."}],"pos":[200252,200337],"yaml":true},{"content":"Removes all characters from the current <xref href=\"System.Text.StringBuilder\"></xref> instance.","nodes":[{"pos":[0,96],"content":"Removes all characters from the current <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> instance.","source":"Removes all characters from the current <xref href=\"System.Text.StringBuilder\"></xref> instance."}],"pos":[201758,201855],"yaml":true},{"content":"<xref:System.Text.StringBuilder.Clear%2A> is a convenience method that is equivalent to setting the <xref:System.Text.StringBuilder.Length%2A> property of the current instance to 0 (zero).  \n  \n Calling the <xref:System.Text.StringBuilder.Clear%2A> method does not modify the current instance's <xref:System.Text.StringBuilder.Capacity%2A> or <xref:System.Text.StringBuilder.MaxCapacity%2A> property.","nodes":[{"pos":[0,188],"content":"<xref:System.Text.StringBuilder.Clear%2A> is a convenience method that is equivalent to setting the <xref:System.Text.StringBuilder.Length%2A> property of the current instance to 0 (zero).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Clear%2A&gt;</ph> is a convenience method that is equivalent to setting the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property of the current instance to 0 (zero).","pos":[0,188],"source":"<xref:System.Text.StringBuilder.Clear%2A> is a convenience method that is equivalent to setting the <xref:System.Text.StringBuilder.Length%2A> property of the current instance to 0 (zero)."}]},{"pos":[195,400],"content":"Calling the <xref:System.Text.StringBuilder.Clear%2A> method does not modify the current instance's <xref:System.Text.StringBuilder.Capacity%2A> or <xref:System.Text.StringBuilder.MaxCapacity%2A> property.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Clear%2A&gt;</ph> method does not modify the current instance's <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property.","pos":[0,205],"source":"Calling the <xref:System.Text.StringBuilder.Clear%2A> method does not modify the current instance's <xref:System.Text.StringBuilder.Capacity%2A> or <xref:System.Text.StringBuilder.MaxCapacity%2A> property."}]}],"pos":[201866,202271],"yaml":true,"extradata":"MT"},{"content":"An object whose <xref href=\"System.Text.StringBuilder.Length\"></xref> is 0 (zero).","nodes":[{"pos":[0,82],"content":"An object whose <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.Length\"&gt;&lt;/xref&gt;</ph> is 0 (zero).","source":"An object whose <xref href=\"System.Text.StringBuilder.Length\"></xref> is 0 (zero)."}],"pos":[202930,203013],"yaml":true},{"content":"Copies the characters from a specified segment of this instance to a specified segment of a destination <xref href=\"System.Char\"></xref> array.","nodes":[{"pos":[0,143],"content":"Copies the characters from a specified segment of this instance to a specified segment of a destination <ph id=\"ph1\">&lt;xref href=\"System.Char\"&gt;&lt;/xref&gt;</ph> array.","source":"Copies the characters from a specified segment of this instance to a specified segment of a destination <xref href=\"System.Char\"></xref> array."}],"pos":[204745,204889],"yaml":true},{"content":"The <xref:System.Text.StringBuilder.CopyTo%2A> method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <xref:System.Text.StringBuilder> object to an array. The array should be a fixed size, preallocated, reusable, and possibly globally accessible.  \n  \n For example, your application could populate a <xref:System.Text.StringBuilder> object with a large number of characters then use the <xref:System.Text.StringBuilder.CopyTo%2A> method to copy small, successive pieces of the <xref:System.Text.StringBuilder> object to an array where the pieces are processed. When all the data in the <xref:System.Text.StringBuilder> object is processed, the size of the <xref:System.Text.StringBuilder> object is set to zero and the cycle is repeated.","nodes":[{"pos":[0,302],"content":"The <xref:System.Text.StringBuilder.CopyTo%2A> method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <xref:System.Text.StringBuilder> object to an array. The array should be a fixed size, preallocated, reusable, and possibly globally accessible.","nodes":[{"content":"The <xref:System.Text.StringBuilder.CopyTo%2A> method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <xref:System.Text.StringBuilder> object to an array. The array should be a fixed size, preallocated, reusable, and possibly globally accessible.","pos":[0,302],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.CopyTo%2A&gt;</ph> method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to an array.","pos":[0,210],"source":"The <xref:System.Text.StringBuilder.CopyTo%2A> method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <xref:System.Text.StringBuilder> object to an array."},{"content":"The array should be a fixed size, preallocated, reusable, and possibly globally accessible.","pos":[211,302]}]}]},{"pos":[309,793],"content":"For example, your application could populate a <xref:System.Text.StringBuilder> object with a large number of characters then use the <xref:System.Text.StringBuilder.CopyTo%2A> method to copy small, successive pieces of the <xref:System.Text.StringBuilder> object to an array where the pieces are processed. When all the data in the <xref:System.Text.StringBuilder> object is processed, the size of the <xref:System.Text.StringBuilder> object is set to zero and the cycle is repeated.","nodes":[{"content":"For example, your application could populate a <xref:System.Text.StringBuilder> object with a large number of characters then use the <xref:System.Text.StringBuilder.CopyTo%2A> method to copy small, successive pieces of the <xref:System.Text.StringBuilder> object to an array where the pieces are processed. When all the data in the <xref:System.Text.StringBuilder> object is processed, the size of the <xref:System.Text.StringBuilder> object is set to zero and the cycle is repeated.","pos":[0,484],"nodes":[{"content":"For example, your application could populate a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object with a large number of characters then use the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.CopyTo%2A&gt;</ph> method to copy small, successive pieces of the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to an array where the pieces are processed.","pos":[0,307],"source":"For example, your application could populate a <xref:System.Text.StringBuilder> object with a large number of characters then use the <xref:System.Text.StringBuilder.CopyTo%2A> method to copy small, successive pieces of the <xref:System.Text.StringBuilder> object to an array where the pieces are processed."},{"content":"When all the data in the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is processed, the size of the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is set to zero and the cycle is repeated.","pos":[308,484],"source":" When all the data in the <xref:System.Text.StringBuilder> object is processed, the size of the <xref:System.Text.StringBuilder> object is set to zero and the cycle is repeated."}]}]}],"pos":[204900,205698],"yaml":true,"extradata":"MT"},{"content":"The starting position in this instance where characters will be copied from. The index is zero-based.","nodes":[{"pos":[0,101],"content":"The starting position in this instance where characters will be copied from. The index is zero-based.","nodes":[{"content":"The starting position in this instance where characters will be copied from. The index is zero-based.","pos":[0,101],"nodes":[{"content":"The starting position in this instance where characters will be copied from.","pos":[0,76]},{"content":"The index is zero-based.","pos":[77,101]}]}]}],"pos":[206428,206530],"yaml":true},{"content":"The array where characters will be copied.","nodes":[{"pos":[0,42],"content":"The array where characters will be copied.","nodes":[{"content":"The array where characters will be copied.","pos":[0,42]}]}],"pos":[206597,206640],"yaml":true},{"content":"The starting position in <code>destination</code> where characters will be copied. The index is zero-based.","nodes":[{"pos":[0,107],"content":"The starting position in <code>destination</code> where characters will be copied. The index is zero-based.","nodes":[{"content":"The starting position in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">destination</ph><ept id=\"p1\">&lt;/code&gt;</ept> where characters will be copied.","pos":[0,82],"source":"The starting position in <code>destination</code> where characters will be copied."},{"content":"The index is zero-based.","pos":[83,107]}]}],"pos":[206711,206819],"yaml":true},{"content":"The number of characters to be copied.","nodes":[{"pos":[0,38],"content":"The number of characters to be copied.","nodes":[{"content":"The number of characters to be copied.","pos":[0,38]}]}],"pos":[206879,206918],"yaml":true},{"content":"<code>destination</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;destination&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>destination</code> is `null`."}],"pos":[207080,207116],"yaml":true},{"content":"<code>sourceIndex</code>, <code>destinationIndex</code>, or <code>count</code>, is less than zero.  \n  \n -or-  \n  \n <code>sourceIndex</code> is greater than the length of this instance.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;code&gt;sourceIndex&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;destinationIndex&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;count&lt;/code&gt;</ph>, is less than zero.","source":"<code>sourceIndex</code>, <code>destinationIndex</code>, or <code>count</code>, is less than zero."},{"pos":[105,109],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[116,185],"content":"<ph id=\"ph1\">&lt;code&gt;sourceIndex&lt;/code&gt;</ph> is greater than the length of this instance.","source":"<code>sourceIndex</code> is greater than the length of this instance."}],"pos":[207230,207422],"yaml":true},{"content":"<code>sourceIndex</code> + <code>count</code> is greater than the length of this instance.  \n  \n -or-  \n  \n <code>destinationIndex</code> + <code>count</code> is greater than the length of <code>destination</code>.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;sourceIndex&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of this instance.","source":"<code>sourceIndex</code> + <code>count</code> is greater than the length of this instance."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,214],"content":"<ph id=\"ph1\">&lt;code&gt;destinationIndex&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of <ph id=\"ph3\">&lt;code&gt;destination&lt;/code&gt;</ph>.","source":"<code>destinationIndex</code> + <code>count</code> is greater than the length of <code>destination</code>."}],"pos":[207516,207737],"yaml":true},{"content":"Ensures that the capacity of this instance of <xref href=\"System.Text.StringBuilder\"></xref> is at least the specified value.","nodes":[{"pos":[0,125],"content":"Ensures that the capacity of this instance of <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> is at least the specified value.","source":"Ensures that the capacity of this instance of <xref href=\"System.Text.StringBuilder\"></xref> is at least the specified value."}],"pos":[209344,209470],"yaml":true},{"content":"If the current capacity is less than the `capacity` parameter, memory for this instance is reallocated to hold at least `capacity` number of characters; otherwise, no memory is changed.","nodes":[{"pos":[0,185],"content":"If the current capacity is less than the <ph id=\"ph1\">`capacity`</ph> parameter, memory for this instance is reallocated to hold at least <ph id=\"ph2\">`capacity`</ph> number of characters; otherwise, no memory is changed.","source":"If the current capacity is less than the `capacity` parameter, memory for this instance is reallocated to hold at least `capacity` number of characters; otherwise, no memory is changed."}],"pos":[209481,209667],"yaml":true,"extradata":"MT"},{"content":"The minimum capacity to ensure.","nodes":[{"pos":[0,31],"content":"The minimum capacity to ensure.","nodes":[{"content":"The minimum capacity to ensure.","pos":[0,31]}]}],"pos":[210328,210360],"yaml":true},{"content":"The new capacity of this instance.","nodes":[{"pos":[0,34],"content":"The new capacity of this instance.","nodes":[{"content":"The new capacity of this instance.","pos":[0,34]}]}],"pos":[210416,210451],"yaml":true},{"content":"<code>capacity</code> is less than zero.  \n  \n -or-  \n  \n Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,40],"content":"<ph id=\"ph1\">&lt;code&gt;capacity&lt;/code&gt;</ph> is less than zero.","source":"<code>capacity</code> is less than zero."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,167],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[210633,210809],"yaml":true},{"content":"Returns a value indicating whether this instance is equal to a specified object.","nodes":[{"pos":[0,80],"content":"Returns a value indicating whether this instance is equal to a specified object.","nodes":[{"content":"Returns a value indicating whether this instance is equal to a specified object.","pos":[0,80]}]}],"pos":[212356,212437],"yaml":true},{"content":"An object to compare with this instance, or `null`.","nodes":[{"pos":[0,51],"content":"An object to compare with this instance, or <ph id=\"ph1\">`null`</ph>.","source":"An object to compare with this instance, or `null`."}],"pos":[213304,213356],"yaml":true},{"content":"`true` if this instance and <code>sb</code> have equal string, <xref href=\"System.Text.StringBuilder.Capacity\"></xref>, and <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref> values; otherwise, `false`.","nodes":[{"pos":[0,210],"content":"<ph id=\"ph1\">`true`</ph> if this instance and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">sb</ph><ept id=\"p1\">&lt;/code&gt;</ept> have equal string, <ph id=\"ph3\">&lt;xref href=\"System.Text.StringBuilder.Capacity\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph4\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph> values; otherwise, <ph id=\"ph5\">`false`</ph>.","source":"`true` if this instance and <code>sb</code> have equal string, <xref href=\"System.Text.StringBuilder.Capacity\"></xref>, and <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref> values; otherwise, `false`."}],"pos":[213414,213627],"yaml":true},{"content":"Inserts one or more copies of a specified string into this instance at the specified character position.","nodes":[{"pos":[0,104],"content":"Inserts one or more copies of a specified string into this instance at the specified character position.","nodes":[{"content":"Inserts one or more copies of a specified string into this instance at the specified character position.","pos":[0,104]}]}],"pos":[215300,215405],"yaml":true},{"content":"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  \n  \n This <xref:System.Text.StringBuilder> object is not changed if `value` is `null`, `value` is not `null` but its length is zero, or `count` is zero.","nodes":[{"pos":[0,115],"content":"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","pos":[0,115],"nodes":[{"content":"Existing characters are shifted to make room for the new text.","pos":[0,62]},{"content":"The capacity of this instance is adjusted as needed.","pos":[63,115]}]}]},{"pos":[122,269],"content":"This <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is not changed if <ph id=\"ph2\">`value`</ph> is <ph id=\"ph3\">`null`</ph>, <ph id=\"ph4\">`value`</ph> is not <ph id=\"ph5\">`null`</ph> but its length is zero, or <ph id=\"ph6\">`count`</ph> is zero.","source":"This <xref:System.Text.StringBuilder> object is not changed if `value` is `null`, `value` is not `null` but its length is zero, or `count` is zero."}],"pos":[215416,215690],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[216337,216391],"yaml":true},{"content":"The string to insert.","nodes":[{"pos":[0,21],"content":"The string to insert.","nodes":[{"content":"The string to insert.","pos":[0,21]}]}],"pos":[216452,216474],"yaml":true},{"content":"The number of times to insert <code>value</code>.","nodes":[{"pos":[0,49],"content":"The number of times to insert <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The number of times to insert <code>value</code>."}],"pos":[216534,216584],"yaml":true},{"content":"A reference to this instance after insertion has completed.","nodes":[{"pos":[0,59],"content":"A reference to this instance after insertion has completed.","nodes":[{"content":"A reference to this instance after insertion has completed.","pos":[0,59]}]}],"pos":[216653,216713],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the current length of this instance.  \n  \n -or-  \n  \n <code>count</code> is less than zero.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the current length of this instance.","source":"<code>index</code> is less than zero or greater than the current length of this instance."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,144],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[216887,217038],"yaml":true},{"content":"The current length of this <xref href=\"System.Text.StringBuilder\"></xref> object plus the length of <code>value</code> times <code>count</code> exceeds <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,211],"content":"The current length of this <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> object plus the length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> times <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> exceeds <ph id=\"ph4\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The current length of this <xref href=\"System.Text.StringBuilder\"></xref> object plus the length of <code>value</code> times <code>count</code> exceeds <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[217138,217350],"yaml":true},{"content":"Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.","nodes":[{"pos":[0,118],"content":"Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.","pos":[0,118]}]}],"pos":[218917,219036],"yaml":true},{"content":"<xref:System.UInt64.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,224],"content":"<xref:System.UInt64.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.UInt64.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,108],"source":"<xref:System.UInt64.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[109,171]},{"content":"The capacity of this instance is adjusted as needed.","pos":[172,224]}]}],"pos":[219047,219272],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[219952,220006],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[220067,220088],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[220157,220228],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[220402,220484],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[220584,220694],"yaml":true},{"content":"Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.","nodes":[{"pos":[0,118],"content":"Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.","pos":[0,118]}]}],"pos":[222297,222416],"yaml":true},{"content":"<xref:System.UInt32.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,224],"content":"<xref:System.UInt32.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.UInt32.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,108],"source":"<xref:System.UInt32.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[109,171]},{"content":"The capacity of this instance is adjusted as needed.","pos":[172,224]}]}],"pos":[222427,222652],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[223331,223385],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[223446,223467],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[223536,223607],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[223781,223863],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[223963,224073],"yaml":true},{"content":"Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.","nodes":[{"pos":[0,118],"content":"Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.","pos":[0,118]}]}],"pos":[225676,225795],"yaml":true},{"content":"<xref:System.UInt16.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,224],"content":"<xref:System.UInt16.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.UInt16.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,108],"source":"<xref:System.UInt16.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[109,171]},{"content":"The capacity of this instance is adjusted as needed.","pos":[172,224]}]}],"pos":[225806,226031],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[226712,226766],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[226827,226848],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[226917,226988],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[227162,227244],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[227344,227454],"yaml":true},{"content":"Inserts a string into this instance at the specified character position.","nodes":[{"pos":[0,72],"content":"Inserts a string into this instance at the specified character position.","nodes":[{"content":"Inserts a string into this instance at the specified character position.","pos":[0,72]}]}],"pos":[229057,229130],"yaml":true},{"content":"Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.  \n  \n This instance of <xref:System.Text.StringBuilder> is not changed if `value` is `null`, or `value` is not `null` but its length is zero.","nodes":[{"pos":[0,98],"content":"Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.","nodes":[{"content":"Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.","pos":[0,98],"nodes":[{"content":"Existing characters are shifted to make room for the new text.","pos":[0,62]},{"content":"The capacity is adjusted as needed.","pos":[63,98]}]}]},{"pos":[105,240],"content":"This instance of <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> is not changed if <ph id=\"ph2\">`value`</ph> is <ph id=\"ph3\">`null`</ph>, or <ph id=\"ph4\">`value`</ph> is not <ph id=\"ph5\">`null`</ph> but its length is zero.","source":"This instance of <xref:System.Text.StringBuilder> is not changed if `value` is `null`, or `value` is not `null` but its length is zero."}],"pos":[229141,229386],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[230022,230076],"yaml":true},{"content":"The string to insert.","nodes":[{"pos":[0,21],"content":"The string to insert.","nodes":[{"content":"The string to insert.","pos":[0,21]}]}],"pos":[230137,230159],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[230228,230299],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the current length of this instance.  \n  \n -or-  \n  \n The current length of this <xref href=\"System.Text.StringBuilder\"></xref> object plus the length of <code>value</code> exceeds <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the current length of this instance.","source":"<code>index</code> is less than zero or greater than the current length of this instance."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,293],"content":"The current length of this <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> object plus the length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds <ph id=\"ph3\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The current length of this <xref href=\"System.Text.StringBuilder\"></xref> object plus the length of <code>value</code> exceeds <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[230473,230777],"yaml":true},{"content":"Inserts the string representation of a single-precision floating point number into this instance at the specified character position.","nodes":[{"pos":[0,133],"content":"Inserts the string representation of a single-precision floating point number into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a single-precision floating point number into this instance at the specified character position.","pos":[0,133]}]}],"pos":[232344,232478],"yaml":true},{"content":"<xref:System.Single.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,224],"content":"<xref:System.Single.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Single.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,108],"source":"<xref:System.Single.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[109,171]},{"content":"The capacity of this instance is adjusted as needed.","pos":[172,224]}]}],"pos":[232489,232714],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[233349,233403],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[233464,233485],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[233554,233625],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[233799,233881],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[233981,234091],"yaml":true},{"content":"Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.","nodes":[{"pos":[0,125],"content":"Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.","pos":[0,125]}]}],"pos":[235635,235761],"yaml":true},{"content":"<xref:System.SByte.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.","nodes":[{"pos":[0,206],"content":"<xref:System.SByte.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.SByte.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,107],"source":"<xref:System.SByte.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[108,170]},{"content":"The capacity is adjusted as needed.","pos":[171,206]}]}],"pos":[235772,235979],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[236659,236713],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[236773,236794],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[236863,236934],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[237108,237190],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[237290,237400],"yaml":true},{"content":"Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.","nodes":[{"pos":[0,135],"content":"Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.","pos":[0,135]}]}],"pos":[239123,239259],"yaml":true},{"content":"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,115],"content":"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","pos":[0,115],"nodes":[{"content":"Existing characters are shifted to make room for the new text.","pos":[0,62]},{"content":"The capacity of this instance is adjusted as needed.","pos":[63,115]}]}]}],"pos":[239270,239386],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[240053,240107],"yaml":true},{"content":"A character array.","nodes":[{"pos":[0,18],"content":"A character array.","nodes":[{"content":"A character array.","pos":[0,18]}]}],"pos":[240168,240187],"yaml":true},{"content":"The starting index within <code>value</code>.","nodes":[{"pos":[0,45],"content":"The starting index within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The starting index within <code>value</code>."}],"pos":[240252,240298],"yaml":true},{"content":"The number of characters to insert.","nodes":[{"pos":[0,35],"content":"The number of characters to insert.","nodes":[{"content":"The number of characters to insert.","pos":[0,35]}]}],"pos":[240362,240398],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[240467,240538],"yaml":true},{"content":"<code>value</code> is `null`, and <code>startIndex</code> and <code>charCount</code> are not zero.","nodes":[{"pos":[0,98],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, and <ph id=\"ph3\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph4\">&lt;code&gt;charCount&lt;/code&gt;</ph> are not zero.","source":"<code>value</code> is `null`, and <code>startIndex</code> and <code>charCount</code> are not zero."}],"pos":[240700,240799],"yaml":true},{"content":"<code>index</code>, <code>startIndex</code>, or <code>charCount</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is greater than the length of this instance.  \n  \n -or-  \n  \n <code>startIndex</code> plus <code>charCount</code> is not a position within <code>value</code>.  \n  \n -or-  \n  \n Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;startIndex&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;charCount&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code>, <code>startIndex</code>, or <code>charCount</code> is less than zero."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,170],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is greater than the length of this instance.","source":"<code>index</code> is greater than the length of this instance."},{"pos":[177,181],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[188,284],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> is not a position within <ph id=\"ph3\">&lt;code&gt;value&lt;/code&gt;</ph>.","source":"<code>startIndex</code> plus <code>charCount</code> is not a position within <code>value</code>."},{"pos":[291,295],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[302,411],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[240913,241341],"yaml":true},{"content":"Inserts the string representation of an object into this instance at the specified character position.","nodes":[{"pos":[0,102],"content":"Inserts the string representation of an object into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of an object into this instance at the specified character position.","pos":[0,102]}]}],"pos":[242908,243011],"yaml":true},{"content":"<xref:System.Object.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  \n  \n If `value` is `null`, the value of this instance is unchanged.","nodes":[{"pos":[0,224],"content":"<xref:System.Object.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,108],"source":"<xref:System.Object.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[109,171]},{"content":"The capacity of this instance is adjusted as needed.","pos":[172,224]}]},{"pos":[231,293],"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, the value of this instance is unchanged.","source":"If `value` is `null`, the value of this instance is unchanged."}],"pos":[243022,243320],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[243956,244010],"yaml":true},{"content":"The object to insert, or `null`.","nodes":[{"pos":[0,32],"content":"The object to insert, or <ph id=\"ph1\">`null`</ph>.","source":"The object to insert, or `null`."}],"pos":[244071,244104],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[244173,244244],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[244418,244500],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[244600,244710],"yaml":true},{"content":"Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.","nodes":[{"pos":[0,126],"content":"Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.","pos":[0,126]}]}],"pos":[246254,246381],"yaml":true},{"content":"<xref:System.Int32.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,223],"content":"<xref:System.Int32.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,107],"source":"<xref:System.Int32.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[108,170]},{"content":"The capacity of this instance is adjusted as needed.","pos":[171,223]}]}],"pos":[246392,246616],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[247249,247303],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[247363,247384],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[247453,247524],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[247698,247780],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[247880,247990],"yaml":true},{"content":"Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.","nodes":[{"pos":[0,126],"content":"Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.","pos":[0,126]}]}],"pos":[249534,249661],"yaml":true},{"content":"<xref:System.Int16.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,223],"content":"<xref:System.Int16.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Int16.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,107],"source":"<xref:System.Int16.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[108,170]},{"content":"The capacity of this instance is adjusted as needed.","pos":[171,223]}]}],"pos":[249672,249896],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[250531,250585],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[250645,250666],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[250735,250806],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[250980,251062],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[251162,251272],"yaml":true},{"content":"Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.","nodes":[{"pos":[0,133],"content":"Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.","pos":[0,133]}]}],"pos":[252822,252956],"yaml":true},{"content":"<xref:System.Double.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,224],"content":"<xref:System.Double.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Double.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,108],"source":"<xref:System.Double.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[109,171]},{"content":"The capacity of this instance is adjusted as needed.","pos":[172,224]}]}],"pos":[252967,253192],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[253828,253882],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[253943,253964],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[254033,254104],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[254278,254360],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[254460,254570],"yaml":true},{"content":"Inserts the string representation of a decimal number into this instance at the specified character position.","nodes":[{"pos":[0,109],"content":"Inserts the string representation of a decimal number into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a decimal number into this instance at the specified character position.","pos":[0,109]}]}],"pos":[256126,256236],"yaml":true},{"content":"<xref:System.Decimal.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,225],"content":"<xref:System.Decimal.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Decimal.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"<xref:System.Decimal.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[110,172]},{"content":"The capacity of this instance is adjusted as needed.","pos":[173,225]}]}],"pos":[256247,256473],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[257110,257164],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[257226,257247],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[257316,257387],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[257561,257643],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[257743,257853],"yaml":true},{"content":"Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.","nodes":[{"pos":[0,132],"content":"Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.","pos":[0,132]}]}],"pos":[259403,259536],"yaml":true},{"content":"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  \n  \n If `value` is `null`, the <xref:System.Text.StringBuilder> is not changed.","nodes":[{"pos":[0,115],"content":"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","pos":[0,115],"nodes":[{"content":"Existing characters are shifted to make room for the new text.","pos":[0,62]},{"content":"The capacity of this instance is adjusted as needed.","pos":[63,115]}]}]},{"pos":[122,196],"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> is not changed.","source":"If `value` is `null`, the <xref:System.Text.StringBuilder> is not changed."}],"pos":[259547,259748],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[260384,260438],"yaml":true},{"content":"The character array to insert.","nodes":[{"pos":[0,30],"content":"The character array to insert.","nodes":[{"content":"The character array to insert.","pos":[0,30]}]}],"pos":[260499,260530],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[260599,260670],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.  \n  \n -or-  \n  \n Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,208],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[260844,261061],"yaml":true},{"content":"Inserts the string representation of a specified Unicode character into this instance at the specified character position.","nodes":[{"pos":[0,122],"content":"Inserts the string representation of a specified Unicode character into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a specified Unicode character into this instance at the specified character position.","pos":[0,122]}]}],"pos":[262599,262722],"yaml":true},{"content":"<xref:System.Char.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,222],"content":"<xref:System.Char.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Char.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,106],"source":"<xref:System.Char.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[107,169]},{"content":"The capacity of this instance is adjusted as needed.","pos":[170,222]}]}],"pos":[262733,262956],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[263590,263644],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[263703,263724],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[263793,263864],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.  \n  \n -or-  \n  \n Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."},{"pos":[88,92],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[99,208],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[264038,264255],"yaml":true},{"content":"Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.","nodes":[{"pos":[0,127],"content":"Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.","pos":[0,127]}]}],"pos":[265810,265938],"yaml":true},{"content":"<xref:System.Byte.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,222],"content":"<xref:System.Byte.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Byte.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,106],"source":"<xref:System.Byte.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[107,169]},{"content":"The capacity of this instance is adjusted as needed.","pos":[170,222]}]}],"pos":[265949,266172],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[266806,266860],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[266919,266940],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[267009,267080],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[267254,267336],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[267436,267546],"yaml":true},{"content":"Inserts the string representation of a Boolean value into this instance at the specified character position.","nodes":[{"pos":[0,108],"content":"Inserts the string representation of a Boolean value into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a Boolean value into this instance at the specified character position.","pos":[0,108]}]}],"pos":[269102,269211],"yaml":true},{"content":"<xref:System.Boolean.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.","nodes":[{"pos":[0,208],"content":"<xref:System.Boolean.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Boolean.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,109],"source":"<xref:System.Boolean.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[110,172]},{"content":"The capacity is adjusted as needed.","pos":[173,208]}]}],"pos":[269222,269431],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[270065,270119],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[270181,270202],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[270271,270342],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[270516,270598],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[270698,270808],"yaml":true},{"content":"Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.","nodes":[{"pos":[0,116],"content":"Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.","nodes":[{"content":"Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.","pos":[0,116]}]}],"pos":[272352,272469],"yaml":true},{"content":"<xref:System.Int64.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"pos":[0,223],"content":"<xref:System.Int64.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt;</ph> is used to get a string representation of <ph id=\"ph2\">`value`</ph>.","pos":[0,107],"source":"<xref:System.Int64.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`."},{"content":"Existing characters are shifted to make room for the new text.","pos":[108,170]},{"content":"The capacity of this instance is adjusted as needed.","pos":[171,223]}]}],"pos":[272480,272704],"yaml":true,"extradata":"MT"},{"content":"The position in this instance where insertion begins.","nodes":[{"pos":[0,53],"content":"The position in this instance where insertion begins.","nodes":[{"content":"The position in this instance where insertion begins.","pos":[0,53]}]}],"pos":[273338,273392],"yaml":true},{"content":"The value to insert.","nodes":[{"pos":[0,20],"content":"The value to insert.","nodes":[{"content":"The value to insert.","pos":[0,20]}]}],"pos":[273452,273473],"yaml":true},{"content":"A reference to this instance after the insert operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the insert operation has completed.","nodes":[{"content":"A reference to this instance after the insert operation has completed.","pos":[0,70]}]}],"pos":[273542,273613],"yaml":true},{"content":"<code>index</code> is less than zero or greater than the length of this instance.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero or greater than the length of this instance.","source":"<code>index</code> is less than zero or greater than the length of this instance."}],"pos":[273787,273869],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[273969,274079],"yaml":true},{"content":"Gets or sets the length of the current <xref href=\"System.Text.StringBuilder\"></xref> object.","nodes":[{"pos":[0,93],"content":"Gets or sets the length of the current <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets or sets the length of the current <xref href=\"System.Text.StringBuilder\"></xref> object."}],"pos":[275502,275596],"yaml":true},{"content":"The length of a <xref:System.Text.StringBuilder> object is defined by its number of <xref:System.Char> objects.  \n  \n Like the<xref:System.String.Length%2A?displayProperty=fullName> property, the <xref:System.Text.StringBuilder.Length%2A> property indicates the length of the current string object. Unlike the <xref:System.String.Length%2A?displayProperty=fullName> property, which is read-only, the <xref:System.Text.StringBuilder.Length%2A> property allows you to modify the length of the string stored to the <xref:System.Text.StringBuilder> object.  \n  \n If the specified length is less than the current length, the current <xref:System.Text.StringBuilder> object is truncated to the specified length. If the specified length is greater than the current length, the end of the string value of the current <xref:System.Text.StringBuilder> object is padded with the Unicode NULL character (U+0000).  \n  \n If the specified length is greater than the current capacity, <xref:System.Text.StringBuilder.Capacity%2A> increases so that it is greater than or equal to the specified length.","nodes":[{"pos":[0,111],"content":"The length of a <xref:System.Text.StringBuilder> object is defined by its number of <xref:System.Char> objects.","nodes":[{"content":"The length of a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is defined by its number of <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> objects.","pos":[0,111],"source":"The length of a <xref:System.Text.StringBuilder> object is defined by its number of <xref:System.Char> objects."}]},{"pos":[118,552],"content":"Like the<xref:System.String.Length%2A?displayProperty=fullName> property, the <xref:System.Text.StringBuilder.Length%2A> property indicates the length of the current string object. Unlike the <xref:System.String.Length%2A?displayProperty=fullName> property, which is read-only, the <xref:System.Text.StringBuilder.Length%2A> property allows you to modify the length of the string stored to the <xref:System.Text.StringBuilder> object.","nodes":[{"content":"Like the<xref:System.String.Length%2A?displayProperty=fullName> property, the <xref:System.Text.StringBuilder.Length%2A> property indicates the length of the current string object. Unlike the <xref:System.String.Length%2A?displayProperty=fullName> property, which is read-only, the <xref:System.Text.StringBuilder.Length%2A> property allows you to modify the length of the string stored to the <xref:System.Text.StringBuilder> object.","pos":[0,434],"nodes":[{"content":"Like the<ph id=\"ph1\">&lt;xref:System.String.Length%2A?displayProperty=fullName&gt;</ph> property, the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property indicates the length of the current string object.","pos":[0,180],"source":"Like the<xref:System.String.Length%2A?displayProperty=fullName> property, the <xref:System.Text.StringBuilder.Length%2A> property indicates the length of the current string object."},{"content":"Unlike the <ph id=\"ph1\">&lt;xref:System.String.Length%2A?displayProperty=fullName&gt;</ph> property, which is read-only, the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.Length%2A&gt;</ph> property allows you to modify the length of the string stored to the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[181,434],"source":" Unlike the <xref:System.String.Length%2A?displayProperty=fullName> property, which is read-only, the <xref:System.Text.StringBuilder.Length%2A> property allows you to modify the length of the string stored to the <xref:System.Text.StringBuilder> object."}]}]},{"pos":[559,900],"content":"If the specified length is less than the current length, the current <xref:System.Text.StringBuilder> object is truncated to the specified length. If the specified length is greater than the current length, the end of the string value of the current <xref:System.Text.StringBuilder> object is padded with the Unicode NULL character (U+0000).","nodes":[{"content":"If the specified length is less than the current length, the current <xref:System.Text.StringBuilder> object is truncated to the specified length. If the specified length is greater than the current length, the end of the string value of the current <xref:System.Text.StringBuilder> object is padded with the Unicode NULL character (U+0000).","pos":[0,341],"nodes":[{"content":"If the specified length is less than the current length, the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is truncated to the specified length.","pos":[0,146],"source":"If the specified length is less than the current length, the current <xref:System.Text.StringBuilder> object is truncated to the specified length."},{"content":"If the specified length is greater than the current length, the end of the string value of the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is padded with the Unicode NULL character (U+0000).","pos":[147,341],"source":" If the specified length is greater than the current length, the end of the string value of the current <xref:System.Text.StringBuilder> object is padded with the Unicode NULL character (U+0000)."}]}]},{"pos":[907,1084],"content":"If the specified length is greater than the current capacity, <xref:System.Text.StringBuilder.Capacity%2A> increases so that it is greater than or equal to the specified length.","nodes":[{"content":"If the specified length is greater than the current capacity, <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Capacity%2A&gt;</ph> increases so that it is greater than or equal to the specified length.","pos":[0,177],"source":"If the specified length is greater than the current capacity, <xref:System.Text.StringBuilder.Capacity%2A> increases so that it is greater than or equal to the specified length."}]}],"pos":[275607,276700],"yaml":true,"extradata":"MT"},{"content":"The length of this instance.","nodes":[{"pos":[0,28],"content":"The length of this instance.","nodes":[{"content":"The length of this instance.","pos":[0,28]}]}],"pos":[277322,277351],"yaml":true},{"content":"The value specified for a set operation is less than zero or greater than <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,133],"content":"The value specified for a set operation is less than zero or greater than <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"The value specified for a set operation is less than zero or greater than <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[277525,277659],"yaml":true},{"content":"Gets the maximum capacity of this instance.","nodes":[{"pos":[0,43],"content":"Gets the maximum capacity of this instance.","nodes":[{"content":"Gets the maximum capacity of this instance.","pos":[0,43]}]}],"pos":[279112,279156],"yaml":true},{"content":"The maximum capacity for this implementation is <xref:System.Int32?displayProperty=fullName>. However, this value is implementation-specific and might be different in other or later implementations. You can explicitly set the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.  \n  \n In the[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], when you instantiate the <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor, both the length and the capacity of the <xref:System.Text.StringBuilder> instance can grow beyond the value of its <xref:System.Text.StringBuilder.MaxCapacity%2A> property. This can occur particularly when you call the <xref:System.Text.StringBuilder.Append%2A> and <xref:System.Text.StringBuilder.AppendFormat%2A> methods to append small strings.","nodes":[{"pos":[0,389],"content":"The maximum capacity for this implementation is <xref:System.Int32?displayProperty=fullName>. However, this value is implementation-specific and might be different in other or later implementations. You can explicitly set the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.","nodes":[{"content":"The maximum capacity for this implementation is <xref:System.Int32?displayProperty=fullName>. However, this value is implementation-specific and might be different in other or later implementations. You can explicitly set the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.","pos":[0,389],"nodes":[{"content":"The maximum capacity for this implementation is <ph id=\"ph1\">&lt;xref:System.Int32?displayProperty=fullName&gt;</ph>.","pos":[0,93],"source":"The maximum capacity for this implementation is <xref:System.Int32?displayProperty=fullName>."},{"content":"However, this value is implementation-specific and might be different in other or later implementations.","pos":[94,198]},{"content":"You can explicitly set the maximum capacity of a <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object by calling the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor.","pos":[199,389],"source":" You can explicitly set the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor."}]}]},{"pos":[396,1029],"content":"In the[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], when you instantiate the <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor, both the length and the capacity of the <xref:System.Text.StringBuilder> instance can grow beyond the value of its <xref:System.Text.StringBuilder.MaxCapacity%2A> property. This can occur particularly when you call the <xref:System.Text.StringBuilder.Append%2A> and <xref:System.Text.StringBuilder.AppendFormat%2A> methods to append small strings.","nodes":[{"content":"In the<ph id=\"ph1\">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> and the <ph id=\"ph2\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, when you instantiate the <ph id=\"ph3\">&lt;xref:System.Text.StringBuilder&gt;</ph> object by calling the <ph id=\"ph4\">&lt;xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29&gt;</ph> constructor, both the length and the capacity of the <ph id=\"ph5\">&lt;xref:System.Text.StringBuilder&gt;</ph> instance can grow beyond the value of its <ph id=\"ph6\">&lt;xref:System.Text.StringBuilder.MaxCapacity%2A&gt;</ph> property.","pos":[0,458],"source":"In the[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], when you instantiate the <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor, both the length and the capacity of the <xref:System.Text.StringBuilder> instance can grow beyond the value of its <xref:System.Text.StringBuilder.MaxCapacity%2A> property."},{"content":"This can occur particularly when you call the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Append%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder.AppendFormat%2A&gt;</ph> methods to append small strings.","pos":[459,633],"source":" This can occur particularly when you call the <xref:System.Text.StringBuilder.Append%2A> and <xref:System.Text.StringBuilder.AppendFormat%2A> methods to append small strings."}]}],"pos":[279167,280201],"yaml":true,"extradata":"MT"},{"content":"The maximum number of characters this instance can hold.","nodes":[{"pos":[0,56],"content":"The maximum number of characters this instance can hold.","nodes":[{"content":"The maximum number of characters this instance can hold.","pos":[0,56]}]}],"pos":[280312,280369],"yaml":true},{"content":"Removes the specified range of characters from this instance.","nodes":[{"pos":[0,61],"content":"Removes the specified range of characters from this instance.","nodes":[{"content":"Removes the specified range of characters from this instance.","pos":[0,61]}]}],"pos":[281981,282043],"yaml":true},{"content":"The current method removes the specified range of characters from the current instance. The characters at (`startIndex` + `length`) are moved to `startIndex`, and the string value of the current instance is shortened by `length`. The capacity of the current instance is unaffected.  \n  \n> [!NOTE]\n>  The <xref:System.Text.StringBuilder.Remove%2A> method modifies the value of the current <xref:System.Text.StringBuilder> instance and returns that instance. It does not create and return a new <xref:System.Text.StringBuilder> object.","nodes":[{"pos":[0,281],"content":"The current method removes the specified range of characters from the current instance. The characters at (`startIndex` + `length`) are moved to `startIndex`, and the string value of the current instance is shortened by `length`. The capacity of the current instance is unaffected.","nodes":[{"content":"The current method removes the specified range of characters from the current instance.","pos":[0,87]},{"content":"The characters at (<ph id=\"ph1\">`startIndex`</ph><ph id=\"ph2\"> + </ph><ph id=\"ph3\">`length`</ph>) are moved to <ph id=\"ph4\">`startIndex`</ph>, and the string value of the current instance is shortened by <ph id=\"ph5\">`length`</ph>.","pos":[88,229],"source":" The characters at (`startIndex` + `length`) are moved to `startIndex`, and the string value of the current instance is shortened by `length`."},{"content":"The capacity of the current instance is unaffected.","pos":[230,281]}]},{"pos":[289,533],"content":"[!NOTE]\n The <xref:System.Text.StringBuilder.Remove%2A> method modifies the value of the current <xref:System.Text.StringBuilder> instance and returns that instance. It does not create and return a new <xref:System.Text.StringBuilder> object.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Text.StringBuilder.Remove%2A> method modifies the value of the current <xref:System.Text.StringBuilder> instance and returns that instance. It does not create and return a new <xref:System.Text.StringBuilder> object.","pos":[8,242],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.Remove%2A&gt;</ph> method modifies the value of the current <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> instance and returns that instance.","pos":[1,157],"source":" The <xref:System.Text.StringBuilder.Remove%2A> method modifies the value of the current <xref:System.Text.StringBuilder> instance and returns that instance."},{"content":"It does not create and return a new <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object.","pos":[158,234],"source":" It does not create and return a new <xref:System.Text.StringBuilder> object."}]}]}],"pos":[282054,282593],"yaml":true,"extradata":"MT"},{"content":"The number of characters to remove.","nodes":[{"pos":[0,35],"content":"The number of characters to remove.","nodes":[{"content":"The number of characters to remove.","pos":[0,35]}]}],"pos":[283301,283337],"yaml":true},{"content":"A reference to this instance after the excise operation has completed.","nodes":[{"pos":[0,70],"content":"A reference to this instance after the excise operation has completed.","nodes":[{"content":"A reference to this instance after the excise operation has completed.","pos":[0,70]}]}],"pos":[283406,283477],"yaml":true},{"content":"If <code>startIndex</code> or <code>length</code> is less than zero, or <code>startIndex</code> + <code>length</code> is greater than the length of this instance.","nodes":[{"pos":[0,162],"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">length</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than zero, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept><ph id=\"ph4\"> + </ph><bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">length</ph><ept id=\"p4\">&lt;/code&gt;</ept> is greater than the length of this instance.","source":"If <code>startIndex</code> or <code>length</code> is less than zero, or <code>startIndex</code> + <code>length</code> is greater than the length of this instance."}],"pos":[283651,283814],"yaml":true},{"content":"Replaces all occurrences of a specified character in this instance with another specified character.","nodes":[{"pos":[0,100],"content":"Replaces all occurrences of a specified character in this instance with another specified character.","nodes":[{"content":"Replaces all occurrences of a specified character in this instance with another specified character.","pos":[0,100]}]}],"pos":[285352,285453],"yaml":true},{"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldChar` in the current instance. The size of the current <xref:System.Text.StringBuilder> instance is unchanged after the replacement.","nodes":[{"pos":[0,222],"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldChar` in the current instance. The size of the current <xref:System.Text.StringBuilder> instance is unchanged after the replacement.","nodes":[{"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of <ph id=\"ph1\">`oldChar`</ph> in the current instance.","pos":[0,120],"source":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldChar` in the current instance."},{"content":"The size of the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> instance is unchanged after the replacement.","pos":[121,222],"source":" The size of the current <xref:System.Text.StringBuilder> instance is unchanged after the replacement."}]}],"pos":[285464,285687],"yaml":true,"extradata":"MT"},{"content":"The character to replace.","nodes":[{"pos":[0,25],"content":"The character to replace.","nodes":[{"content":"The character to replace.","pos":[0,25]}]}],"pos":[286338,286364],"yaml":true},{"content":"The character that replaces <code>oldChar</code>.","nodes":[{"pos":[0,49],"content":"The character that replaces <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldChar</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character that replaces <code>oldChar</code>."}],"pos":[286425,286475],"yaml":true},{"content":"A reference to this instance with <code>oldChar</code> replaced by <code>newChar</code>.","nodes":[{"pos":[0,88],"content":"A reference to this instance with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldChar</ph><ept id=\"p1\">&lt;/code&gt;</ept> replaced by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">newChar</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A reference to this instance with <code>oldChar</code> replaced by <code>newChar</code>."}],"pos":[286544,286633],"yaml":true},{"content":"Replaces all occurrences of a specified string in this instance with another specified string.","nodes":[{"pos":[0,94],"content":"Replaces all occurrences of a specified string in this instance with another specified string.","nodes":[{"content":"Replaces all occurrences of a specified string in this instance with another specified string.","pos":[0,94]}]}],"pos":[288259,288354],"yaml":true},{"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldValue` in the current instance. If `newValue` is `null` or <xref:System.String?displayProperty=fullName>, all occurrences of `oldValue` are removed.","nodes":[{"pos":[0,238],"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldValue` in the current instance. If `newValue` is `null` or <xref:System.String?displayProperty=fullName>, all occurrences of `oldValue` are removed.","nodes":[{"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of <ph id=\"ph1\">`oldValue`</ph> in the current instance.","pos":[0,121],"source":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldValue` in the current instance."},{"content":"If <ph id=\"ph1\">`newValue`</ph> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>, all occurrences of <ph id=\"ph4\">`oldValue`</ph> are removed.","pos":[122,238],"source":" If `newValue` is `null` or <xref:System.String?displayProperty=fullName>, all occurrences of `oldValue` are removed."}]}],"pos":[288365,288604],"yaml":true,"extradata":"MT"},{"content":"The string to replace.","nodes":[{"pos":[0,22],"content":"The string to replace.","nodes":[{"content":"The string to replace.","pos":[0,22]}]}],"pos":[289264,289287],"yaml":true},{"content":"The string that replaces <code>oldValue</code>, or `null`.","nodes":[{"pos":[0,58],"content":"The string that replaces <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValue</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph2\">`null`</ph>.","source":"The string that replaces <code>oldValue</code>, or `null`."}],"pos":[289351,289410],"yaml":true},{"content":"A reference to this instance with all instances of <code>oldValue</code> replaced by <code>newValue</code>.","nodes":[{"pos":[0,107],"content":"A reference to this instance with all instances of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> replaced by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">newValue</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A reference to this instance with all instances of <code>oldValue</code> replaced by <code>newValue</code>."}],"pos":[289479,289587],"yaml":true},{"content":"<code>oldValue</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;oldValue&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>oldValue</code> is `null`."}],"pos":[289750,289783],"yaml":true},{"content":"The length of <code>oldValue</code> is zero.","nodes":[{"pos":[0,44],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>oldValue</code> is zero."}],"pos":[289877,289922],"yaml":true},{"content":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,109],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[290036,290146],"yaml":true},{"content":"Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.","nodes":[{"pos":[0,121],"content":"Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.","nodes":[{"content":"Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.","pos":[0,121]}]}],"pos":[291804,291926],"yaml":true},{"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldChar` in the current instance. The size of the current <xref:System.Text.StringBuilder> object is unchanged after the replacement.","nodes":[{"pos":[0,220],"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldChar` in the current instance. The size of the current <xref:System.Text.StringBuilder> object is unchanged after the replacement.","nodes":[{"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of <ph id=\"ph1\">`oldChar`</ph> in the current instance.","pos":[0,120],"source":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldChar` in the current instance."},{"content":"The size of the current <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder&gt;</ph> object is unchanged after the replacement.","pos":[121,220],"source":" The size of the current <xref:System.Text.StringBuilder> object is unchanged after the replacement."}]}],"pos":[291937,292158],"yaml":true,"extradata":"MT"},{"content":"The character to replace.","nodes":[{"pos":[0,25],"content":"The character to replace.","nodes":[{"content":"The character to replace.","pos":[0,25]}]}],"pos":[292836,292862],"yaml":true},{"content":"The character that replaces <code>oldChar</code>.","nodes":[{"pos":[0,49],"content":"The character that replaces <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldChar</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character that replaces <code>oldChar</code>."}],"pos":[292923,292973],"yaml":true},{"content":"The position in this instance where the substring begins.","nodes":[{"pos":[0,57],"content":"The position in this instance where the substring begins.","nodes":[{"content":"The position in this instance where the substring begins.","pos":[0,57]}]}],"pos":[293038,293096],"yaml":true},{"content":"The length of the substring.","nodes":[{"pos":[0,28],"content":"The length of the substring.","nodes":[{"content":"The length of the substring.","pos":[0,28]}]}],"pos":[293156,293185],"yaml":true},{"content":"A reference to this instance with <code>oldChar</code> replaced by <code>newChar</code> in the range from <code>startIndex</code> to <code>startIndex</code> + <code>count</code> -1.","nodes":[{"pos":[0,181],"content":"A reference to this instance with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldChar</ph><ept id=\"p1\">&lt;/code&gt;</ept> replaced by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">newChar</ph><ept id=\"p2\">&lt;/code&gt;</ept> in the range from <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> to <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept><ph id=\"ph5\"> + </ph><bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">count</ph><ept id=\"p5\">&lt;/code&gt;</ept> -1.","source":"A reference to this instance with <code>oldChar</code> replaced by <code>newChar</code> in the range from <code>startIndex</code> to <code>startIndex</code> + <code>count</code> -1."}],"pos":[293254,293436],"yaml":true},{"content":"<code>startIndex</code> + <code>count</code> is greater than the length of the value of this instance.  \n  \n -or-  \n  \n <code>startIndex</code> or <code>count</code> is less than zero.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph><ph id=\"ph2\"> + &lt;code&gt;count&lt;/code&gt;</ph> is greater than the length of the value of this instance.","source":"<code>startIndex</code> + <code>count</code> is greater than the length of the value of this instance."},{"pos":[109,113],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[120,184],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> or <code>count</code> is less than zero."}],"pos":[293611,293802],"yaml":true},{"content":"Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.","nodes":[{"pos":[0,115],"content":"Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.","nodes":[{"content":"Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.","pos":[0,115]}]}],"pos":[295484,295600],"yaml":true},{"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldValue` in the specified substring. If `newValue` is `null` or <xref:System.String?displayProperty=fullName>, all occurrences of `oldValue` are removed.","nodes":[{"pos":[0,241],"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldValue` in the specified substring. If `newValue` is `null` or <xref:System.String?displayProperty=fullName>, all occurrences of `oldValue` are removed.","nodes":[{"content":"This method performs an ordinal, case-sensitive comparison to identify occurrences of <ph id=\"ph1\">`oldValue`</ph> in the specified substring.","pos":[0,124],"source":"This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldValue` in the specified substring."},{"content":"If <ph id=\"ph1\">`newValue`</ph> is <ph id=\"ph2\">`null`</ph> or <ph id=\"ph3\">&lt;xref:System.String?displayProperty=fullName&gt;</ph>, all occurrences of <ph id=\"ph4\">`oldValue`</ph> are removed.","pos":[125,241],"source":" If `newValue` is `null` or <xref:System.String?displayProperty=fullName>, all occurrences of `oldValue` are removed."}]}],"pos":[295611,295853],"yaml":true,"extradata":"MT"},{"content":"The string to replace.","nodes":[{"pos":[0,22],"content":"The string to replace.","nodes":[{"content":"The string to replace.","pos":[0,22]}]}],"pos":[296540,296563],"yaml":true},{"content":"The string that replaces <code>oldValue</code>, or `null`.","nodes":[{"pos":[0,58],"content":"The string that replaces <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValue</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph2\">`null`</ph>.","source":"The string that replaces <code>oldValue</code>, or `null`."}],"pos":[296627,296686],"yaml":true},{"content":"The position in this instance where the substring begins.","nodes":[{"pos":[0,57],"content":"The position in this instance where the substring begins.","nodes":[{"content":"The position in this instance where the substring begins.","pos":[0,57]}]}],"pos":[296751,296809],"yaml":true},{"content":"The length of the substring.","nodes":[{"pos":[0,28],"content":"The length of the substring.","nodes":[{"content":"The length of the substring.","pos":[0,28]}]}],"pos":[296869,296898],"yaml":true},{"content":"A reference to this instance with all instances of <code>oldValue</code> replaced by <code>newValue</code> in the range from <code>startIndex</code> to <code>startIndex</code> + <code>count</code> - 1.","nodes":[{"pos":[0,201],"content":"A reference to this instance with all instances of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> replaced by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">newValue</ph><ept id=\"p2\">&lt;/code&gt;</ept> in the range from <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> to <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept><ph id=\"ph5\"> + </ph><bpt id=\"p5\">&lt;code&gt;</bpt><ph id=\"ph6\">count</ph><ept id=\"p5\">&lt;/code&gt;</ept> - 1.","source":"A reference to this instance with all instances of <code>oldValue</code> replaced by <code>newValue</code> in the range from <code>startIndex</code> to <code>startIndex</code> + <code>count</code> - 1."}],"pos":[296967,297169],"yaml":true},{"content":"<code>oldValue</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;oldValue&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>oldValue</code> is `null`."}],"pos":[297332,297365],"yaml":true},{"content":"The length of <code>oldValue</code> is zero.","nodes":[{"pos":[0,44],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">oldValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>oldValue</code> is zero."}],"pos":[297459,297504],"yaml":true},{"content":"<code>startIndex</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> plus <code>count</code> indicates a character position not within this instance.  \n  \n -or-  \n  \n Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> or <code>count</code> is less than zero."},{"pos":[71,75],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[82,186],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> plus <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> indicates a character position not within this instance.","source":"<code>startIndex</code> plus <code>count</code> indicates a character position not within this instance."},{"pos":[193,197],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[204,313],"content":"Enlarging the value of this instance would exceed <ph id=\"ph1\">&lt;xref href=\"System.Text.StringBuilder.MaxCapacity\"&gt;&lt;/xref&gt;</ph>.","source":"Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>."}],"pos":[297618,297944],"yaml":true},{"content":"Converts the value of this instance to a <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,76],"content":"Converts the value of this instance to a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Converts the value of this instance to a <xref href=\"System.String\"></xref>."}],"pos":[299383,299460],"yaml":true},{"content":"You must call the <xref:System.Text.StringBuilder.ToString%2A> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface.","nodes":[{"pos":[0,338],"content":"You must call the <xref:System.Text.StringBuilder.ToString%2A> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface.","nodes":[{"content":"You must call the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.ToString%2A&gt;</ph> method to convert the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id=\"ph3\">&lt;xref:System.String&gt;</ph> object before you can pass the string represented by the <ph id=\"ph4\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a method that has a <ph id=\"ph5\">&lt;xref:System.String&gt;</ph> parameter or display it in the user interface.","pos":[0,338],"source":"You must call the <xref:System.Text.StringBuilder.ToString%2A> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface."}]}],"pos":[299471,299810],"yaml":true,"extradata":"MT"},{"content":"A string whose value is the same as this instance.","nodes":[{"pos":[0,50],"content":"A string whose value is the same as this instance.","nodes":[{"content":"A string whose value is the same as this instance.","pos":[0,50]}]}],"pos":[300502,300553],"yaml":true},{"content":"Converts the value of a substring of this instance to a <xref href=\"System.String\"></xref>.","nodes":[{"pos":[0,91],"content":"Converts the value of a substring of this instance to a <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","source":"Converts the value of a substring of this instance to a <xref href=\"System.String\"></xref>."}],"pos":[302191,302283],"yaml":true},{"content":"You must call the <xref:System.Text.StringBuilder.ToString%2A> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface.","nodes":[{"pos":[0,338],"content":"You must call the <xref:System.Text.StringBuilder.ToString%2A> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface.","nodes":[{"content":"You must call the <ph id=\"ph1\">&lt;xref:System.Text.StringBuilder.ToString%2A&gt;</ph> method to convert the <ph id=\"ph2\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a <ph id=\"ph3\">&lt;xref:System.String&gt;</ph> object before you can pass the string represented by the <ph id=\"ph4\">&lt;xref:System.Text.StringBuilder&gt;</ph> object to a method that has a <ph id=\"ph5\">&lt;xref:System.String&gt;</ph> parameter or display it in the user interface.","pos":[0,338],"source":"You must call the <xref:System.Text.StringBuilder.ToString%2A> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface."}]}],"pos":[302294,302633],"yaml":true,"extradata":"MT"},{"content":"The starting position of the substring in this instance.","nodes":[{"pos":[0,56],"content":"The starting position of the substring in this instance.","nodes":[{"content":"The starting position of the substring in this instance.","pos":[0,56]}]}],"pos":[302790,302847],"yaml":true},{"content":"The length of the substring.","nodes":[{"pos":[0,28],"content":"The length of the substring.","nodes":[{"content":"The length of the substring.","pos":[0,28]}]}],"pos":[302908,302937],"yaml":true},{"content":"A string whose value is the same as the specified substring of this instance.","nodes":[{"pos":[0,77],"content":"A string whose value is the same as the specified substring of this instance.","nodes":[{"content":"A string whose value is the same as the specified substring of this instance.","pos":[0,77]}]}],"pos":[302994,303072],"yaml":true},{"content":"<code>startIndex</code> or <code>length</code> is less than zero.  \n  \n -or-  \n  \n The sum of <code>startIndex</code> and <code>length</code> is greater than the length of the current instance.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length&lt;/code&gt;</ph> is less than zero.","source":"<code>startIndex</code> or <code>length</code> is less than zero."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,193],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">length</ph><ept id=\"p2\">&lt;/code&gt;</ept> is greater than the length of the current instance.","source":"The sum of <code>startIndex</code> and <code>length</code> is greater than the length of the current instance."}],"pos":[303248,303448],"yaml":true},{"content":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data necessary to deserialize the current <xref href=\"System.Text.StringBuilder\"></xref> object.","nodes":[{"pos":[0,192],"content":"Populates a <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object with the data necessary to deserialize the current <ph id=\"ph2\">&lt;xref href=\"System.Text.StringBuilder\"&gt;&lt;/xref&gt;</ph> object.","source":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data necessary to deserialize the current <xref href=\"System.Text.StringBuilder\"></xref> object."}],"pos":[305506,305699],"yaml":true},{"content":"The `context` parameter is reserved for future use and does not participate in this operation.  \n  \n For more information, see the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%28System.String%2CSystem.Object%2CSystem.Type%29?displayProperty=fullName> method.","nodes":[{"pos":[0,94],"content":"The <ph id=\"ph1\">`context`</ph> parameter is reserved for future use and does not participate in this operation.","source":"The `context` parameter is reserved for future use and does not participate in this operation."},{"pos":[101,275],"content":"For more information, see the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%28System.String%2CSystem.Object%2CSystem.Type%29?displayProperty=fullName> method.","nodes":[{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.SerializationInfo.AddValue%28System.String%2CSystem.Object%2CSystem.Type%29?displayProperty=fullName&gt;</ph> method.","pos":[0,174],"source":"For more information, see the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%28System.String%2CSystem.Object%2CSystem.Type%29?displayProperty=fullName> method."}]}],"pos":[305710,305990],"yaml":true,"extradata":"MT"},{"content":"The object to populate with serialization information.","nodes":[{"pos":[0,54],"content":"The object to populate with serialization information.","nodes":[{"content":"The object to populate with serialization information.","pos":[0,54]}]}],"pos":[306316,306371],"yaml":true},{"content":"The place to store and retrieve serialized data. Reserved for future use.","nodes":[{"pos":[0,73],"content":"The place to store and retrieve serialized data. Reserved for future use.","nodes":[{"content":"The place to store and retrieve serialized data. Reserved for future use.","pos":[0,73],"nodes":[{"content":"The place to store and retrieve serialized data.","pos":[0,48]},{"content":"Reserved for future use.","pos":[49,73]}]}]}],"pos":[306466,306540],"yaml":true},{"content":"<code>info</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>info</code> is `null`."}],"pos":[306752,306781],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.StringBuilder\n  commentId: T:System.Text.StringBuilder\n  id: StringBuilder\n  children:\n  - System.Text.StringBuilder.#ctor\n  - System.Text.StringBuilder.#ctor(System.Int32)\n  - System.Text.StringBuilder.#ctor(System.String)\n  - System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\n  - System.Text.StringBuilder.#ctor(System.String,System.Int32)\n  - System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)\n  - System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)\n  - System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)\n  - System.Text.StringBuilder.Append(System.Char*,System.Int32)\n  - System.Text.StringBuilder.Append(System.Char,System.Int32)\n  - System.Text.StringBuilder.Append(System.UInt64)\n  - System.Text.StringBuilder.Append(System.UInt32)\n  - System.Text.StringBuilder.Append(System.UInt16)\n  - System.Text.StringBuilder.Append(System.String)\n  - System.Text.StringBuilder.Append(System.SByte)\n  - System.Text.StringBuilder.Append(System.Single)\n  - System.Text.StringBuilder.Append(System.Int64)\n  - System.Text.StringBuilder.Append(System.Object)\n  - System.Text.StringBuilder.Append(System.Byte)\n  - System.Text.StringBuilder.Append(System.Char)\n  - System.Text.StringBuilder.Append(System.Char[])\n  - System.Text.StringBuilder.Append(System.Boolean)\n  - System.Text.StringBuilder.Append(System.Double)\n  - System.Text.StringBuilder.Append(System.Int16)\n  - System.Text.StringBuilder.Append(System.Int32)\n  - System.Text.StringBuilder.Append(System.Decimal)\n  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.String,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.String,System.Object[])\n  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])\n  - System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)\n  - System.Text.StringBuilder.AppendJoin(System.String,System.Object[])\n  - System.Text.StringBuilder.AppendJoin(System.String,System.String[])\n  - System.Text.StringBuilder.AppendJoin(System.Char,System.Object[])\n  - System.Text.StringBuilder.AppendJoin(System.Char,System.String[])\n  - System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})\n  - System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  - System.Text.StringBuilder.AppendLine\n  - System.Text.StringBuilder.AppendLine(System.String)\n  - System.Text.StringBuilder.Capacity\n  - System.Text.StringBuilder.Chars(System.Int32)\n  - System.Text.StringBuilder.Clear\n  - System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  - System.Text.StringBuilder.EnsureCapacity(System.Int32)\n  - System.Text.StringBuilder.Equals(System.Text.StringBuilder)\n  - System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)\n  - System.Text.StringBuilder.Insert(System.Int32,System.UInt64)\n  - System.Text.StringBuilder.Insert(System.Int32,System.UInt32)\n  - System.Text.StringBuilder.Insert(System.Int32,System.UInt16)\n  - System.Text.StringBuilder.Insert(System.Int32,System.String)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Single)\n  - System.Text.StringBuilder.Insert(System.Int32,System.SByte)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Object)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Int32)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Int16)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Double)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Decimal)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Char[])\n  - System.Text.StringBuilder.Insert(System.Int32,System.Char)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Byte)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Boolean)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Int64)\n  - System.Text.StringBuilder.Length\n  - System.Text.StringBuilder.MaxCapacity\n  - System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n  - System.Text.StringBuilder.Replace(System.Char,System.Char)\n  - System.Text.StringBuilder.Replace(System.String,System.String)\n  - System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)\n  - System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)\n  - System.Text.StringBuilder.ToString\n  - System.Text.StringBuilder.ToString(System.Int32,System.Int32)\n  - System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  langs:\n  - csharp\n  name: StringBuilder\n  nameWithType: StringBuilder\n  fullName: System.Text.StringBuilder\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Represents a mutable string of characters. This class cannot be inherited.\n  remarks: \"> [!NOTE]\\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \\n  \\n This class represents a string-like object whose value is a mutable sequence of characters.  \\n  \\n In this section:  \\n  \\n-   [The String and StringBuilder types](#StringAndSB)  \\n  \\n-   [How StringBuilder works](#HowWorks)  \\n  \\n-   [Memory allocation](#Memory)  \\n  \\n-   [Instantiating a StringBuilder object](#Instantiating)  \\n  \\n-   [Calling StringBuilder methods](#Calling)  \\n  \\n-   [Performing StringBuilder operations](#Operations)  \\n  \\n    -   [Iterating StringBuilder characters](#Iterating)  \\n  \\n    -   [Adding text to a StringBuilder object](#Adding)  \\n  \\n    -   [Deleting text from a StringBuilder object](#Deleting)  \\n  \\n    -   [Modifying the text in a StringBuilder object](#Modifying)  \\n  \\n-   [Searching the text in a StringBuilder object](#Searching)  \\n  \\n-   [Converting the StringBuilder object to a string](#Converting)  \\n  \\n<a name=\\\"StringAndSB\\\"></a>   \\n## The String and StringBuilder types  \\n Although <xref:System.Text.StringBuilder> and <xref:System.String> both represent sequences of characters, they are implemented differently. <xref:System.String> is an immutable type. That is, each operation that appears to modify a <xref:System.String> object actually creates a new string.  \\n  \\n For example, the call to the <xref:System.String.Concat%2A?displayProperty=fullName> method in the following C# example appears to change the value of a string variable named `value`. In fact, the <xref:System.String.Concat%2A> method returns a `value` object that has a different value and address from the `value` object that was passed to the method. Note that the example must be compiled using the `/unsafe` compiler option.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/immutability2.cs#1)]  \\n  \\n For routines that perform extensive string manipulation (such as apps that modify a string numerous times in a loop), modifying a string repeatedly can exact a significant performance penalty. The alternative is to use <xref:System.Text.StringBuilder>, which is a mutable string class. Mutability means that once an instance of the class has been created, it can be modified by appending, removing, replacing, or inserting characters. A <xref:System.Text.StringBuilder> object maintains a buffer to accommodate expansions to the string. New data is appended to the buffer if room is available; otherwise, a new, larger buffer is allocated, data from the original buffer is copied to the new buffer, and the new data is then appended to the new buffer.  \\n  \\n> [!IMPORTANT]\\n>  Although the <xref:System.Text.StringBuilder> class generally offers better performance than the <xref:System.String> class, you should not automatically replace <xref:System.String> with <xref:System.Text.StringBuilder> whenever you want to manipulate strings. Performance depends on the size of the string, the amount of memory to be allocated for the new string, the system on which your app is executing, and the type of operation. You should be prepared to test your app to determine whether <xref:System.Text.StringBuilder> actually offers a significant performance improvement.  \\n  \\n Consider using the <xref:System.String> class under these conditions:  \\n  \\n-   When the number of changes that your app will make to a string is small. In these cases, <xref:System.Text.StringBuilder> might offer negligible or no performance improvement over <xref:System.String>.  \\n  \\n-   When you are performing a fixed number of concatenation operations, particularly with string literals. In this case, the compiler might combine the concatenation operations into a single operation.  \\n  \\n-   When you have to perform extensive search operations while you are building your string. The <xref:System.Text.StringBuilder> class lacks search methods such as `IndexOf` or `StartsWith`. You'll have to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> for these operations, and this can negate the performance benefit from using <xref:System.Text.StringBuilder>. For more information, see the [Searching the text in a StringBuilder object](#Searching) section.  \\n  \\n Consider using the <xref:System.Text.StringBuilder> class under these conditions:  \\n  \\n-   When you expect your app to make an unknown number of changes to a string at design time (for example, when you are using a loop to concatenate a random number of strings that contain user input).  \\n  \\n-   When you expect your app to make a significant number of changes to a string.  \\n  \\n<a name=\\\"HowWorks\\\"></a>   \\n## How StringBuilder works  \\n The <xref:System.Text.StringBuilder.Length%2A?displayProperty=fullName> property indicates the number of characters the <xref:System.Text.StringBuilder> object currently contains. If you add characters to the <xref:System.Text.StringBuilder> object, its length increases until it equals the size of the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property, which defines the number of characters that the object can contain. If the number of added characters causes the length of the <xref:System.Text.StringBuilder> object to exceed its current capacity, new memory is allocated, the value of the <xref:System.Text.StringBuilder.Capacity%2A> property is doubled, new characters are added to the <xref:System.Text.StringBuilder> object, and its <xref:System.Text.StringBuilder.Length%2A> property is adjusted. Additional memory for the <xref:System.Text.StringBuilder> object is allocated dynamically until it reaches the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=fullName> property. When the maximum capacity is reached, no further memory can be allocated for the <xref:System.Text.StringBuilder> object, and trying to add characters or expand it beyond its maximum capacity throws either an <xref:System.ArgumentOutOfRangeException> or an <xref:System.OutOfMemoryException> exception.  \\n  \\n The following example illustrates how a <xref:System.Text.StringBuilder> object allocates new memory and increases its capacity dynamically as the string assigned to the object expands. The code creates a <xref:System.Text.StringBuilder> object by calling its default (parameterless) constructor. The default capacity of this object is 16 characters, and its maximum capacity is more than 2 billion characters. Appending the string \\\"This is a sentence.\\\" results in a new memory allocation because the string length (19 characters) exceeds the default capacity of the <xref:System.Text.StringBuilder> object. The capacity of the object doubles to 32 characters, the new string is added, and the length of the object now equals 19 characters. The code then appends the string \\\"This is an additional sentence.\\\" to the value of the <xref:System.Text.StringBuilder> object 11 times. Whenever the append operation causes the length of the <xref:System.Text.StringBuilder> object to exceed its capacity, its existing capacity is doubled and the <xref:System.Text.StringBuilder.Append%2A> operation succeeds.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/default1.cs#3)]\\n [!code-vb[System.Text.StringBuilder.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/default1.vb#3)]  \\n  \\n<a name=\\\"Memory\\\"></a>   \\n## Memory allocation  \\n The default capacity of a <xref:System.Text.StringBuilder> object is 16 characters, and its default maximum capacity is <xref:System.Int32.MaxValue?displayProperty=fullName>. These default values are used if you call the <xref:System.Text.StringBuilder.%23ctor> and <xref:System.Text.StringBuilder.%23ctor%28System.String%29> constructors.  \\n  \\n You can explicitly define the initial capacity of a <xref:System.Text.StringBuilder> object in the following ways:  \\n  \\n-   By calling any of the <xref:System.Text.StringBuilder> constructors that includes a `capacity` parameter when you create the object.  \\n  \\n-   By explicitly assigning a new value to the <xref:System.Text.StringBuilder.Capacity%2A?displayProperty=fullName> property to expand an existing <xref:System.Text.StringBuilder> object. Note that the property throws an exception if the new capacity is less than the existing capacity or greater than the <xref:System.Text.StringBuilder> object's maximum capacity.  \\n  \\n-   By calling the <xref:System.Text.StringBuilder.EnsureCapacity%2A?displayProperty=fullName> method with the new capacity. The new capacity must not be greater than the <xref:System.Text.StringBuilder> object's maximum capacity. However, unlike an assignment to the <xref:System.Text.StringBuilder.Capacity%2A> property, <xref:System.Text.StringBuilder.EnsureCapacity%2A> does not throw an exception if the desired new capacity is less than the existing capacity; in this case, the method call has no effect.  \\n  \\n If the length of the string assigned to the <xref:System.Text.StringBuilder> object in the constructor call exceeds either the default capacity or the specified capacity, the <xref:System.Text.StringBuilder.Capacity%2A> property is set to the length of the string specified with the `value` parameter.  \\n  \\n You can explicitly define the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor. You can't change the maximum capacity by assigning a new value to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property, because it is read-only.  \\n  \\n As the previous section shows, whenever the existing capacity is inadequate, additional memory is allocated and the capacity of a <xref:System.Text.StringBuilder> object doubles up to the value defined by the <xref:System.Text.StringBuilder.MaxCapacity%2A> property.  \\n  \\n In general, the default capacity and maximum capacity are adequate for most apps. You might consider setting these values under the following conditions:  \\n  \\n-   If the eventual size of the <xref:System.Text.StringBuilder> object is likely to grow exceedingly large, typically in excess of several megabytes. In this case, there may be some performance benefit from setting the initial <xref:System.Text.StringBuilder.Capacity%2A> property to a significantly high value to eliminate the need for too many memory reallocations.  \\n  \\n-   If your app is running on a system with limited memory. In this case, you may want to consider setting the <xref:System.Text.StringBuilder.MaxCapacity%2A> property to less than <xref:System.Int32.MaxValue?displayProperty=fullName> if your app is handling large strings that may cause it to execute in a memory-constrained environment.  \\n  \\n<a name=\\\"Instantiating\\\"></a>   \\n## Instantiating a StringBuilder object  \\n You instantiate a <xref:System.Text.StringBuilder> object by calling one of its six overloaded class constructors, which are listed in the following table. Three of the constructors instantiate a <xref:System.Text.StringBuilder> object whose value is an empty string, but set its <xref:System.Text.StringBuilder.Capacity%2A> and <xref:System.Text.StringBuilder.MaxCapacity%2A> values differently. The remaining three constructors define a <xref:System.Text.StringBuilder> object that has a specific string value and capacity. Two of the three constructors use the default maximum capacity of <xref:System.Int32.MaxValue?displayProperty=fullName>, whereas the third allows you to set the maximum capacity.  \\n  \\n|Constructor|String value|Capacity|Maximum capacity|  \\n|-----------------|------------------|--------------|----------------------|  \\n|<xref:System.Text.StringBuilder.%23ctor>|<xref:System.String.Empty?displayProperty=fullName>|16|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \\n|<xref:System.Text.StringBuilder.%23ctor%28System.Int32%29>|<xref:System.String.Empty?displayProperty=fullName>|Defined by the `capacity` parameter|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \\n|<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29>|<xref:System.String.Empty?displayProperty=fullName>|Defined by the `capacity` parameter|Defined by the `maxCapacity` parameter|  \\n|<xref:System.Text.StringBuilder.%23ctor%28System.String%29>|Defined by the `value` parameter|16 or `value`. <xref:System.String.Length%2A>, whichever is greater|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \\n|<xref:System.Text.StringBuilder.%23ctor%28System.String%2CSystem.Int32%29>|Defined by the `value` parameter|Defined by the `capacity` parameter or `value`. <xref:System.String.Length%2A>, whichever is greater.|<xref:System.Int32.MaxValue?displayProperty=fullName>|  \\n|<xref:System.Text.StringBuilder.%23ctor%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>|Defined by `value`. <xref:System.String.Substring%2A>(`startIndex`, `length`)|Defined by the `capacity` parameter or `value`. <xref:System.String.Length%2A>, whichever is greater.|Defined by the `maxCapacity` parameter|  \\n  \\n The following example uses three of these constructor overloads to instantiate <xref:System.Text.StringBuilder> objects.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/instantiate1.cs#6)]\\n [!code-vb[System.Text.StringBuilder.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/instantiate1.vb#6)]  \\n  \\n<a name=\\\"Calling\\\"></a>   \\n## Calling StringBuilder methods  \\n Most of the methods that modify the string in a <xref:System.Text.StringBuilder> instance return a reference to that same instance. This enables you to call <xref:System.Text.StringBuilder> methods in two ways:  \\n  \\n-   You can make individual method calls and ignore the return value, as the following example does.  \\n  \\n     [!code-csharp[System.Text.StringBuilder.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call1.cs#4)]\\n     [!code-vb[System.Text.StringBuilder.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call1.vb#4)]  \\n  \\n-   You can make a series of method calls in a single statement. This can be convenient if you want to write a single statement that chains successive operations. The following example consolidates three method calls from the previous example into a single line of code.  \\n  \\n     [!code-csharp[System.Text.StringBuilder.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/call2.cs#5)]\\n     [!code-vb[System.Text.StringBuilder.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/call2.vb#5)]  \\n  \\n<a name=\\\"Operations\\\"></a>   \\n## Performing StringBuilder operations  \\n You can use the methods of the <xref:System.Text.StringBuilder> class to iterate, add, delete, or modify characters in a <xref:System.Text.StringBuilder> object.  \\n  \\n<a name=\\\"Iterating\\\"></a>   \\n### Iterating StringBuilder characters  \\n You can access the characters in a <xref:System.Text.StringBuilder> object by using the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property. In C#, <xref:System.Text.StringBuilder.Chars%2A> is an indexer; in Visual Basic, it is the default property of the <xref:System.Text.StringBuilder> class. This enables you to set or retrieve individual characters by using their index only, without explicitly referencing the <xref:System.Text.StringBuilder.Chars%2A> property. Characters in a <xref:System.Text.StringBuilder> object begin at index 0 (zero) and continue to index <xref:System.Text.StringBuilder.Length%2A> - 1.  \\n  \\n The following example illustrates the <xref:System.Text.StringBuilder.Chars%2A> property. It appends ten random numbers to a <xref:System.Text.StringBuilder> object, and then iterates each character. If the character's Unicode category is <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>, it decreases the number by 1 (or changes the number to 9 if its value is 0). The example displays the contents of the <xref:System.Text.StringBuilder> object both before and after the values of individual characters were changed.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/chars1.cs#7)]\\n [!code-vb[System.Text.StringBuilder.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/chars1.vb#7)]  \\n  \\n<a name=\\\"Adding\\\"></a>   \\n### Adding text to a StringBuilder object  \\n The <xref:System.Text.StringBuilder> class includes the following methods for expanding the contents of a <xref:System.Text.StringBuilder> object:  \\n  \\n-   The <xref:System.Text.StringBuilder.Append%2A> method appends a string, a substring, a character array, a portion of a character array, a single character repeated multiple times, or the string representation of a primitive data type to a <xref:System.Text.StringBuilder> object.  \\n  \\n-   The <xref:System.Text.StringBuilder.AppendLine%2A> method appends a line terminator or a string along with a line terminator to a <xref:System.Text.StringBuilder> object.  \\n  \\n-   The <xref:System.Text.StringBuilder.AppendFormat%2A> method appends a  to a <xref:System.Text.StringBuilder> object. The string representations of objects included in the result string can reflect the formatting conventions of the current system culture or a specified culture.  \\n  \\n-   The <xref:System.Text.StringBuilder.Insert%2A> method inserts a string, a substring, multiple repetitions of a string, a character array, a portion of a character array, or the string representation of a primitive data type at a specified position in the <xref:System.Text.StringBuilder> object. The position is defined by a zero-based index.  \\n  \\n The following example uses the <xref:System.Text.StringBuilder.Append%2A>, <xref:System.Text.StringBuilder.AppendLine%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and <xref:System.Text.StringBuilder.Insert%2A> methods to expand the text of a <xref:System.Text.StringBuilder> object.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/expand1.cs#9)]\\n [!code-vb[System.Text.StringBuilder.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/expand1.vb#9)]  \\n  \\n<a name=\\\"Deleting\\\"></a>   \\n### Deleting text from a StringBuilder object  \\n The <xref:System.Text.StringBuilder> class includes methods that can reduce the size of the current <xref:System.Text.StringBuilder> instance. The <xref:System.Text.StringBuilder.Clear%2A> method removes all characters and sets the <xref:System.Text.StringBuilder.Length%2A> property to zero. The <xref:System.Text.StringBuilder.Remove%2A> method deletes a specified number of characters starting at a particular index position. In addition, you can remove characters from the end of a <xref:System.Text.StringBuilder> object by setting its <xref:System.Text.StringBuilder.Length%2A> property to a value that is less than the length of the current instance.  \\n  \\n The following example removes some of the text from a <xref:System.Text.StringBuilder> object, displays its resulting capacity, maximum capacity, and length property values, and then calls the <xref:System.Text.StringBuilder.Clear%2A> method to remove all the characters from the <xref:System.Text.StringBuilder> object.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/delete1.cs#10)]\\n [!code-vb[System.Text.StringBuilder.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/delete1.vb#10)]  \\n  \\n<a name=\\\"Modifying\\\"></a>   \\n### Modifying the text in a StringBuilder object  \\n The <xref:System.Text.StringBuilder.Replace%2A?displayProperty=fullName> method replaces all occurrences of a character or a string in the entire <xref:System.Text.StringBuilder> object or in a particular character range. The following example uses the <xref:System.Text.StringBuilder.Replace%2A> method to replace all exclamation points (!) with question marks (?) in the <xref:System.Text.StringBuilder> object.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/replace1.cs#11)]\\n [!code-vb[System.Text.StringBuilder.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/replace1.vb#11)]  \\n  \\n<a name=\\\"Searching\\\"></a>   \\n## Searching the text in a StringBuilder object  \\n The <xref:System.Text.StringBuilder> class does not include methods similar to the <xref:System.String.Contains%2A?displayProperty=fullName>, <xref:System.String.IndexOf%2A?displayProperty=fullName>, and <xref:System.String.StartsWith%2A?displayProperty=fullName> methods provided by the <xref:System.String> class, which allow you to search the object for a particular character or a substring. Determining the presence or starting character position of a substring requires that you search a <xref:System.String> value by using either a string search method or a regular expression method. There are four ways to implement such searches, as the following table shows.  \\n  \\n|Technique|Pros|Cons|  \\n|---------------|----------|----------|  \\n|Search string values before adding them to the <xref:System.Text.StringBuilder> object.|Useful for determining whether a substring exists.|Cannot be used when the index position of a substring is important.|  \\n|Call <xref:System.Text.StringBuilder.ToString%2A> and search the returned <xref:System.String> object.|Easy to use if you assign all the text to a <xref:System.Text.StringBuilder> object, and then begin to modify it.|Cumbersome to repeatedly call <xref:System.Text.StringBuilder.ToString%2A> if you must make modifications before all text is added to the <xref:System.Text.StringBuilder> object.<br /><br /> You must remember to work from the end of the <xref:System.Text.StringBuilder> object's text if you're making changes.|  \\n|Use the <xref:System.Text.StringBuilder.Chars%2A> property to sequentially search a range of characters.|Useful if you're concerned with individual characters or a small substring.|Cumbersome if the number of characters to search is large or if the search logic is complex.|  \\n|Convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object, and perform modifications on the <xref:System.String> object.|Useful if the number of modifications is small.|Negates the performance benefit of the <xref:System.Text.StringBuilder> class if the number of modifications is large.|  \\n  \\n Let's examine these techniques in greater detail.  \\n  \\n-   If the goal of the search is to determine whether a particular substring exists (that is, if you aren't interested in the position of the substring), you can search strings before storing them in the <xref:System.Text.StringBuilder> object. The following example provides one possible implementation. It defines a `StringBuilderFinder` class whose constructor is passed a reference to a <xref:System.Text.StringBuilder> object and the substring to find in the string. In this case, the example tries to determine whether recorded temperatures are in Fahrenheit or Celsius, and adds the appropriate introductory text to the beginning of the <xref:System.Text.StringBuilder> object. A random number generator is used to select an array that contains data in either degrees Celsius or degrees Fahrenheit.  \\n  \\n     [!code-csharp[System.Text.StringBuilder.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern1.cs#12)]\\n     [!code-vb[System.Text.StringBuilder.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern1.vb#12)]  \\n  \\n-   Call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object. You can search the string by using methods such as <xref:System.String.LastIndexOf%2A?displayProperty=fullName> or <xref:System.String.StartsWith%2A?displayProperty=fullName>, or you can use regular expressions and the <xref:System.Text.RegularExpressions.Regex> class to search for patterns. Because both <xref:System.Text.StringBuilder> and <xref:System.String> objects use UTF-16 encoding to store characters, the index positions of characters, substrings, and regular expression matches are the same in both objects. This enables you to use <xref:System.Text.StringBuilder> methods to make changes at the same position at which that text is found in the <xref:System.String> object.  \\n  \\n    > [!NOTE]\\n    >  If you adopt this approach, you should work from the end of the <xref:System.Text.StringBuilder> object to its beginning so that you don't have to repeatedly convert the <xref:System.Text.StringBuilder> object to a string.  \\n  \\n     The following example illustrates this approach. It stores four occurrences of each letter of the English alphabet in a <xref:System.Text.StringBuilder> object. It then converts the text to a <xref:System.String> object and uses a regular expression to identify the starting position of each four-character sequence. Finally, it adds an underscore before each four-character sequence except for the first sequence, and converts the first character of the sequence to uppercase.  \\n  \\n     [!code-csharp[System.Text.StringBuilder.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern2.cs#13)]\\n     [!code-vb[System.Text.StringBuilder.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern2.vb#13)]  \\n  \\n-   Use the <xref:System.Text.StringBuilder.Chars%2A?displayProperty=fullName> property to sequentially search a range of characters in a <xref:System.Text.StringBuilder> object. This approach may not be practical if the number of characters to be searched is large or the search logic is particularly complex.  \\n  \\n     The following example is identical in functionality to the previous example but differs in implementation. It uses the <xref:System.Text.StringBuilder.Chars%2A> property to detect when a character value has changed, inserts an underscore at that position, and converts the first character in the new sequence to uppercase.  \\n  \\n     [!code-csharp[System.Text.StringBuilder.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern3.cs#14)]\\n     [!code-vb[System.Text.StringBuilder.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern3.vb#14)]  \\n  \\n-   Store all the unmodified text in the <xref:System.Text.StringBuilder> object, call the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object, and perform the modifications on the <xref:System.String> object. You can use this approach if you have only a few modifications; otherwise, the cost of working with immutable strings may negate the performance benefits of using a <xref:System.Text.StringBuilder> object.  \\n  \\n     The following example is identical in functionality to the previous two examples but differs in implementation. It creates a <xref:System.Text.StringBuilder> object, converts it to a <xref:System.String> object, and then uses a regular expression to perform all remaining modifications on the string. The <xref:System.Text.RegularExpressions.Regex.Replace%28System.String%2CSystem.String%2CSystem.Text.RegularExpressions.MatchEvaluator%29?displayProperty=fullName> method uses a lambda expression to perform the replacement on each match.  \\n  \\n     [!code-csharp[System.Text.StringBuilder.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.class/cs/pattern4.cs#15)]\\n     [!code-vb[System.Text.StringBuilder.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.class/vb/pattern4.vb#15)]  \\n  \\n<a name=\\\"Converting\\\"></a>   \\n## Converting the StringBuilder object to a string  \\n You must convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface. You perform this conversion by calling the <xref:System.Text.StringBuilder.ToString%2A?displayProperty=fullName> method. For an illustration, see the previous example, which calls the <xref:System.Text.StringBuilder.ToString%2A> method to convert a <xref:System.Text.StringBuilder> object to a string so that it can be passed to a regular expression method.\"\n  example:\n  - \"The following example shows how to call many of the methods defined by the <xref:System.Text.StringBuilder> class.  \\n  \\n [!code-cpp[StringBuilder#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringBuilder/cpp/StringBuilder.cpp#1)]\\n [!code-csharp[StringBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringBuilder/CS/StringBuilder.cs#1)]\\n [!code-vb[StringBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringBuilder/VB/StringBuilder.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class StringBuilder : System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Runtime.Serialization.ISerializable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.#ctor\n  commentId: M:System.Text.StringBuilder.#ctor\n  id: '#ctor'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: StringBuilder()\n  nameWithType: StringBuilder.StringBuilder()\n  fullName: StringBuilder.StringBuilder()\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class.\n  remarks: The string value of this instance is set to <xref:System.String.Empty?displayProperty=fullName>, and the capacity is set to the implementation-specific default capacity.\n  example:\n  - \"The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with no parameters.  \\n  \\n [!code-cpp[System.Text.StringBuilder.Constructors#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#1)]\\n [!code-csharp[System.Text.StringBuilder.Constructors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#1)]\\n [!code-vb[System.Text.StringBuilder.Constructors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#1)]\"\n  syntax:\n    content: public StringBuilder ();\n    parameters: []\n  overload: System.Text.StringBuilder.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.#ctor(System.Int32)\n  commentId: M:System.Text.StringBuilder.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: StringBuilder(Int32)\n  nameWithType: StringBuilder.StringBuilder(Int32)\n  fullName: StringBuilder.StringBuilder(Int32)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class using the specified capacity.\n  remarks: \"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \\n  \\n The string value of this instance is set to <xref:System.String.Empty?displayProperty=fullName>. If `capacity` is zero, the implementation-specific default capacity is used.\"\n  example:\n  - \"The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with a specified capacity.  \\n  \\n [!code-cpp[System.Text.StringBuilder.Constructors#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#3)]\\n [!code-csharp[System.Text.StringBuilder.Constructors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#3)]\\n [!code-vb[System.Text.StringBuilder.Constructors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#3)]\"\n  syntax:\n    content: public StringBuilder (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The suggested starting size of this instance.\n  overload: System.Text.StringBuilder.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.#ctor(System.String)\n  commentId: M:System.Text.StringBuilder.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: StringBuilder(String)\n  nameWithType: StringBuilder.StringBuilder(String)\n  fullName: StringBuilder.StringBuilder(String)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class using the specified string.\n  remarks: If `value` is `null`, the new <xref:System.Text.StringBuilder> will contain the empty string (that is, it contains <xref:System.String.Empty>).\n  example:\n  - \"The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with the specified string.  \\n  \\n [!code-cpp[System.Text.StringBuilder.Constructors#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#4)]\\n [!code-csharp[System.Text.StringBuilder.Constructors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#4)]\\n [!code-vb[System.Text.StringBuilder.Constructors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#4)]\"\n  syntax:\n    content: public StringBuilder (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string used to initialize the value of the instance. If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>).\n  overload: System.Text.StringBuilder.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32)'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: StringBuilder(Int32, Int32)\n  nameWithType: StringBuilder.StringBuilder(Int32, Int32)\n  fullName: StringBuilder.StringBuilder(Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class that starts with a specified capacity and can grow to a specified maximum.\n  remarks: \"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \\n  \\n If `capacity` is zero, the implementation-specific default capacity is used.  \\n  \\n The `maxCapacity` property defines the maximum number of characters that the current instance can hold. Its value is assigned to the <xref:System.Text.StringBuilder.MaxCapacity%2A> property. If the number of characters to be stored in the current instance exceeds this `maxCapacity` value, the <xref:System.Text.StringBuilder> object does not allocate additional memory, but instead throws an exception.\"\n  example:\n  - \"The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with a specified capacity and maximum capacity.  \\n  \\n [!code-cpp[System.Text.StringBuilder.Constructors#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#5)]\\n [!code-csharp[System.Text.StringBuilder.Constructors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#5)]\\n [!code-vb[System.Text.StringBuilder.Constructors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#5)]\"\n  syntax:\n    content: public StringBuilder (int capacity, int maxCapacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The suggested starting size of the <xref href=\"System.Text.StringBuilder\"></xref>.\n    - id: maxCapacity\n      type: System.Int32\n      description: The maximum number of characters the current string can contain.\n  overload: System.Text.StringBuilder.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>maxCapacity</code> is less than one, <code>capacity</code> is less than zero, or <code>capacity</code> is greater than <code>maxCapacity</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32)\n  commentId: M:System.Text.StringBuilder.#ctor(System.String,System.Int32)\n  id: '#ctor(System.String,System.Int32)'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: StringBuilder(String, Int32)\n  nameWithType: StringBuilder.StringBuilder(String, Int32)\n  fullName: StringBuilder.StringBuilder(String, Int32)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class using the specified string and capacity.\n  remarks: \"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \\n  \\n If `capacity` is zero, the implementation-specific default capacity is used.\"\n  example:\n  - \"The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with an initial string and a specified capacity.  \\n  \\n [!code-cpp[System.Text.StringBuilder.Constructors#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#7)]\\n [!code-csharp[System.Text.StringBuilder.Constructors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#7)]\\n [!code-vb[System.Text.StringBuilder.Constructors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#7)]\"\n  syntax:\n    content: public StringBuilder (string value, int capacity);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string used to initialize the value of the instance. If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>).\n    - id: capacity\n      type: System.Int32\n      description: The suggested starting size of the <xref href=\"System.Text.StringBuilder\"></xref>.\n  overload: System.Text.StringBuilder.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>capacity</code> is less than zero.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)\n  id: '#ctor(System.String,System.Int32,System.Int32,System.Int32)'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: StringBuilder(String, Int32, Int32, Int32)\n  nameWithType: StringBuilder.StringBuilder(String, Int32, Int32, Int32)\n  fullName: StringBuilder.StringBuilder(String, Int32, Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.StringBuilder\"></xref> class from the specified substring and capacity.\n  remarks: \"The `capacity` parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref:System.Text.StringBuilder.Capacity%2A> property. If the number of characters to be stored in the current instance exceeds this `capacity` value, the <xref:System.Text.StringBuilder> object allocates additional memory to store them.  \\n  \\n If `capacity` is zero, the implementation-specific default capacity is used.\"\n  example:\n  - \"The following example demonstrates how to call the <xref:System.Text.StringBuilder.%23ctor%2A> constructor with the specified string.  \\n  \\n [!code-cpp[System.Text.StringBuilder.Constructors#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CPP/constructors.cpp#6)]\\n [!code-csharp[System.Text.StringBuilder.Constructors#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/CS/constructors.cs#6)]\\n [!code-vb[System.Text.StringBuilder.Constructors#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Constructors/VB/Form1.vb#6)]\"\n  syntax:\n    content: public StringBuilder (string value, int startIndex, int length, int capacity);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string that contains the substring used to initialize the value of this instance. If <code>value</code> is `null`, the new <xref href=\"System.Text.StringBuilder\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\"></xref>).\n    - id: startIndex\n      type: System.Int32\n      description: The position within <code>value</code> where the substring begins.\n    - id: length\n      type: System.Int32\n      description: The number of characters in the substring.\n    - id: capacity\n      type: System.Int32\n      description: The suggested starting size of the <xref href=\"System.Text.StringBuilder\"></xref>.\n  overload: System.Text.StringBuilder.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>capacity</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> plus <code>length</code> is not a position within <code>value</code>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)\n  id: Append(System.String,System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(String, Int32, Int32)\n  nameWithType: StringBuilder.Append(String, Int32, Int32)\n  fullName: StringBuilder.Append(String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends a copy of a specified substring to this instance.\n  remarks: \"This method appends the specified range of characters in `value` to the current instance. If `value` is `null` and `startIndex` and `count` are both zero, no changes are made.  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.String%2CSystem.Int32%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#19)]\\n [!code-vb[System.Text.StringBuilder.Append#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#19)]  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (string value, int startIndex, int count);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string that contains the substring to append.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position of the substring within <code>value</code>.\n    - id: count\n      type: System.Int32\n      description: The number of characters in <code>value</code> to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`, and <code>startIndex</code> and <code>count</code> are not zero.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>count</code> less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> + <code>count</code> is greater than the length of <code>value</code>.  \\n  \\n -or-  \\n  \\n Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)\n  id: Append(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Char[], Int32, Int32)\n  nameWithType: StringBuilder.Append(Char[], Int32, Int32)\n  fullName: StringBuilder.Append(Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified subarray of Unicode characters to this instance.\n  remarks: \"This method appends the specified range of characters in `value` to the current instance. If `value` is `null` and `startIndex` and `count` are both zero, no changes are made.  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#7)]\\n [!code-vb[System.Text.StringBuilder.Append#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#7)]  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (char[] value, int startIndex, int charCount);\n    parameters:\n    - id: value\n      type: System.Char[]\n      description: A character array.\n    - id: startIndex\n      type: System.Int32\n      description: The starting position in <code>value</code>.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`, and <code>startIndex</code> and <code>charCount</code> are not zero.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> + <code>charCount</code> is greater than the length of <code>value</code>.  \\n  \\n -or-  \\n  \\n Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Char*,System.Int32)\n  commentId: M:System.Text.StringBuilder.Append(System.Char*,System.Int32)\n  id: Append(System.Char*,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Char*, Int32)\n  nameWithType: StringBuilder.Append(Char*, Int32)\n  fullName: StringBuilder.Append(Char*, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends an array of Unicode characters starting at a specified address to this instance.\n  remarks: \"This method appends `valueCount` characters starting at address `value` to the current instance.  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Char%2A%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Security.SecurityCritical]\n\n      public System.Text.StringBuilder Append (char* value, int valueCount);\n    parameters:\n    - id: value\n      type: System.Char*\n      description: A pointer to an array of characters.\n    - id: valueCount\n      type: System.Int32\n      description: The number of characters in the array.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>valueCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\"></xref>.\"\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: <code>value</code> is a null pointer.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Char,System.Int32)\n  commentId: M:System.Text.StringBuilder.Append(System.Char,System.Int32)\n  id: Append(System.Char,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Char, Int32)\n  nameWithType: StringBuilder.Append(Char, Int32)\n  fullName: StringBuilder.Append(Char, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends a specified number of copies of the string representation of a Unicode character to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Char%2CSystem.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#5)]\\n [!code-vb[System.Text.StringBuilder.Append#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#5)]  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (char value, int repeatCount);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The character to append.\n    - id: repeatCount\n      type: System.Int32\n      description: The number of times to append <code>value</code>.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>repeatCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\"></xref>.\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Out of memory.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.UInt64)\n  commentId: M:System.Text.StringBuilder.Append(System.UInt64)\n  id: Append(System.UInt64)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(UInt64)\n  nameWithType: StringBuilder.Append(UInt64)\n  fullName: StringBuilder.Append(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified 64-bit unsigned integer to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.UInt64%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#17)]\\n [!code-vb[System.Text.StringBuilder.Append#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#17)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.UInt64%29> method calls the <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public System.Text.StringBuilder Append (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.UInt32)\n  commentId: M:System.Text.StringBuilder.Append(System.UInt32)\n  id: Append(System.UInt32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(UInt32)\n  nameWithType: StringBuilder.Append(UInt32)\n  fullName: StringBuilder.Append(UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified 32-bit unsigned integer to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.UInt32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#16)]\\n [!code-vb[System.Text.StringBuilder.Append#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#16)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.UInt32%29> calls the <xref:System.UInt32.ToString%2A?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public System.Text.StringBuilder Append (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.UInt16)\n  commentId: M:System.Text.StringBuilder.Append(System.UInt16)\n  id: Append(System.UInt16)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(UInt16)\n  nameWithType: StringBuilder.Append(UInt16)\n  fullName: StringBuilder.Append(UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified 16-bit unsigned integer to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.UInt16%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#15)]\\n [!code-vb[System.Text.StringBuilder.Append#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#15)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.UInt16%29> method calls the <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value`. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public System.Text.StringBuilder Append (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.String)\n  commentId: M:System.Text.StringBuilder.Append(System.String)\n  id: Append(System.String)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(String)\n  nameWithType: StringBuilder.Append(String)\n  fullName: StringBuilder.Append(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends a copy of the specified string to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.String%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)]\\n [!code-vb[System.Text.StringBuilder.Append#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)]  \\n  \\n If `value` is `null`, no changes are made.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.SByte)\n  commentId: M:System.Text.StringBuilder.Append(System.SByte)\n  id: Append(System.SByte)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(SByte)\n  nameWithType: StringBuilder.Append(SByte)\n  fullName: StringBuilder.Append(SByte)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified 8-bit signed integer to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.SByte%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#13)]\\n [!code-vb[System.Text.StringBuilder.Append#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#13)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.SByte%29> method calls the <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName> method  to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public System.Text.StringBuilder Append (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Single)\n  commentId: M:System.Text.StringBuilder.Append(System.Single)\n  id: Append(System.Single)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Single)\n  nameWithType: StringBuilder.Append(Single)\n  fullName: StringBuilder.Append(Single)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified single-precision floating-point number to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Single%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#14)]\\n [!code-vb[System.Text.StringBuilder.Append#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#14)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Single%29> method calls the <xref:System.Single.ToString%2A?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Int64)\n  commentId: M:System.Text.StringBuilder.Append(System.Int64)\n  id: Append(System.Int64)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Int64)\n  nameWithType: StringBuilder.Append(Int64)\n  fullName: StringBuilder.Append(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified 64-bit signed integer to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Int64%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#12)]\\n [!code-vb[System.Text.StringBuilder.Append#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#12)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Int64%29> method calls the <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName> to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Object)\n  commentId: M:System.Text.StringBuilder.Append(System.Object)\n  id: Append(System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Object)\n  nameWithType: StringBuilder.Append(Object)\n  fullName: StringBuilder.Append(Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified object to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Object%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates. It defines a `Dog` class, creates a `Dog` object, and makes three calls to the <xref:System.Text.StringBuilder.Append%2A> method to create a string that contains the dog's name and breed.  \\n  \\n [!code-csharp[System.Text.Stringbuilder.Append#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append4.cs#18)]\\n [!code-vb[System.Text.Stringbuilder.Append#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append4.vb#18)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Object%29> method calls the <xref:System.Object.ToString%2A?displayProperty=fullName> method to get the string representation of `value`. If `value` is `null`, no changes are made to the <xref:System.Text.StringBuilder> object.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Byte)\n  commentId: M:System.Text.StringBuilder.Append(System.Byte)\n  id: Append(System.Byte)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Byte)\n  nameWithType: StringBuilder.Append(Byte)\n  fullName: StringBuilder.Append(Byte)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified 8-bit unsigned integer to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Byte%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#3)]\\n [!code-vb[System.Text.StringBuilder.Append#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#3)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Byte%29> method calls the <xref:System.Byte.ToString%28System.IFormatProvider%29> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Char)\n  commentId: M:System.Text.StringBuilder.Append(System.Char)\n  id: Append(System.Char)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Char)\n  nameWithType: StringBuilder.Append(Char)\n  fullName: StringBuilder.Append(Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified <xref href=\"System.Char\"></xref> object to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Char%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#4)]\\n [!code-vb[System.Text.StringBuilder.Append#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#4)]  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (char value);\n    parameters:\n    - id: value\n      type: System.Char\n      description: The UTF-16-encoded code unit to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Char[])\n  commentId: M:System.Text.StringBuilder.Append(System.Char[])\n  id: Append(System.Char[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Char[])\n  nameWithType: StringBuilder.Append(Char[])\n  fullName: StringBuilder.Append(Char[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of the Unicode characters in a specified array to this instance.\n  remarks: \"This method appends all the characters in the specified array to the current instance in the same order as they appear in `value`. If `value` is `null`, no changes are made.  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#6)]\\n [!code-vb[System.Text.StringBuilder.Append#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#6)]  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (char[] value);\n    parameters:\n    - id: value\n      type: System.Char[]\n      description: The array of characters to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Boolean)\n  commentId: M:System.Text.StringBuilder.Append(System.Boolean)\n  id: Append(System.Boolean)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Boolean)\n  nameWithType: StringBuilder.Append(Boolean)\n  fullName: StringBuilder.Append(Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified Boolean value to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Boolean%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#2)]\\n [!code-vb[System.Text.StringBuilder.Append#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#2)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Boolean%29> method calls the <xref:System.Boolean.ToString?displayProperty=fullName> method to get the string representation of `value`. The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (bool value);\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: The Boolean value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Double)\n  commentId: M:System.Text.StringBuilder.Append(System.Double)\n  id: Append(System.Double)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Double)\n  nameWithType: StringBuilder.Append(Double)\n  fullName: StringBuilder.Append(Double)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified double-precision floating-point number to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Double%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#9)]\\n [!code-vb[System.Text.StringBuilder.Append#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#9)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Double%29> method calls the <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Int16)\n  commentId: M:System.Text.StringBuilder.Append(System.Int16)\n  id: Append(System.Int16)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Int16)\n  nameWithType: StringBuilder.Append(Int16)\n  fullName: StringBuilder.Append(Int16)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified 16-bit signed integer to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Int16%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#10)]\\n [!code-vb[System.Text.StringBuilder.Append#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#10)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Int16%29> method calls the <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Int32)\n  commentId: M:System.Text.StringBuilder.Append(System.Int32)\n  id: Append(System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Int32)\n  nameWithType: StringBuilder.Append(Int32)\n  fullName: StringBuilder.Append(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified 32-bit signed integer to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Int32%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append3.cs#11)]\\n [!code-vb[System.Text.StringBuilder.Append#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append3.vb#11)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Int32%29> method calls the <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Append(System.Decimal)\n  commentId: M:System.Text.StringBuilder.Append(System.Decimal)\n  id: Append(System.Decimal)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Append(Decimal)\n  nameWithType: StringBuilder.Append(Decimal)\n  fullName: StringBuilder.Append(Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string representation of a specified decimal number to this instance.\n  remarks: \"The <xref:System.Text.StringBuilder.Append%28System.Decimal%29> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref:System.Text.StringBuilder> object, as the following example illustrates.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Append#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/cs/append2.cs#8)]\\n [!code-vb[System.Text.StringBuilder.Append#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.StringBuilder.Append/vb/append2.vb#8)]  \\n  \\n The <xref:System.Text.StringBuilder.Append%28System.Decimal%29> method calls the <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName> method to get the string representation of `value` for the current culture. To control the formatting of `value`, call the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: public System.Text.StringBuilder Append (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: The value to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.Append*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  id: AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendFormat(IFormatProvider, String, Object, Object, Object)\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object, Object)\n  fullName: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.\n  remarks: \"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \\n  \\n> [!NOTE]\\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for `arg0` and `arg1`. `provider` can be any of the following:  \\n  \\n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \\n  \\n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for `arg0` or `arg1` if they are numeric values.  \\n  \\n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for `arg0`, `arg1`, or `arg2` if they are date and time values.  \\n  \\n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0`,  `arg1`, and `arg2`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.  \\n  \\n If the `provider` parameter is `null`, format provider information is obtained from the current culture.  \\n  \\n `arg0`, `arg1`, and `arg2` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of the object that has the corresponding index. If the format item includes `formatString` and the corresponding argument implements the <xref:System.IFormattable> interface, then the argument's `ToString(formatString, provider)` method defines the formatting. Otherwise, the argument's `ToString()` method defines the formatting.\"\n  example:\n  - \"The following example uses the <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method to illustrate the result of a Boolean `And` operation with integer values. Note that the format string includes six format items, but the method has only three items in its argument list, because each item is formatted in two different ways.  \\n  \\n [!code-csharp[System.Text.StringBuilder.AppendFormat#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/cs/appendformat3.cs#4)]\\n [!code-vb[System.Text.StringBuilder.AppendFormat#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/vb/appendformat3.vb#4)]\"\n  syntax:\n    content: public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0, object arg1, object arg2);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The first object to format.\n    - id: arg1\n      type: System.Object\n      description: The second object to format.\n    - id: arg2\n      type: System.Object\n      description: The third object to format.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.\n  overload: System.Text.StringBuilder.AppendFormat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to 3 (three).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)\n  id: AppendFormat(System.String,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendFormat(String, Object)\n  nameWithType: StringBuilder.AppendFormat(String, Object)\n  fullName: StringBuilder.AppendFormat(String, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.\n  remarks: \"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of the format items must be 0, to correspond to `arg0`, the single object in the parameter list of this method. The formatting process replaces each format item with the string representation of `arg0`.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \\n  \\n> [!NOTE]\\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n `arg0` represents the object to be formatted. Each format item in `format` is replaced with the string representation of `arg0`. If the format item includes `formatString` and `arg0` implements the <xref:System.IFormattable> interface, then `arg0.ToString(formatString, null)` defines the formatting. Otherwise, `arg0.ToString()` defines the formatting.  \\n  \\n If the string assigned to `format` is \\\"Thank you for your donation of {0:####} cans of food to our charitable organization.\\\" and `arg0` is an integer with the value 10, the return value will be \\\"Thank you for your donation of 10 cans of food to our charitable organization.\\\"\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n [!code-cpp[stringbuilder.appendformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendformat/CPP/appfmt.cpp#1)]\\n [!code-csharp[stringbuilder.appendformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendformat/CS/appfmt.cs#1)]\\n [!code-vb[stringbuilder.appendformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendformat/VB/appfmt.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder AppendFormat (string format, object arg0);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: An object to format.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of <code>arg0</code>.\n  overload: System.Text.StringBuilder.AppendFormat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to 1.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object[])\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])\n  id: AppendFormat(System.String,System.Object[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendFormat(String, Object[])\n  nameWithType: StringBuilder.AppendFormat(String, Object[])\n  fullName: StringBuilder.AppendFormat(String, Object[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.\n  remarks: \"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \\n  \\n> [!NOTE]\\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n `args` represents the objects to be formatted. Each format item in `format` is replaced with the string representation of the corresponding object in `args`. If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `args[index].ToString(formatString, provider)` defines the formatting. Otherwise, `args[index].ToString()` defines the formatting.  \\n  \\n If the string assigned to `format` is \\\"Thank you for your donation of {0:####} cans of food to our charitable organization.\\\" and `arg0` is an integer with the value 10, the return value will be \\\"Thank you for your donation of 10 cans of food to our charitable organization.\\\"\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n [!code-cpp[stringbuilder.appendformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendformat/CPP/appfmt.cpp#1)]\\n [!code-csharp[stringbuilder.appendformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendformat/CS/appfmt.cs#1)]\\n [!code-vb[stringbuilder.appendformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendformat/VB/appfmt.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder AppendFormat (string format, object[] args);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to format.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.\n  overload: System.Text.StringBuilder.AppendFormat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> or <code>args</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>args</code> array.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\n  id: AppendFormat(System.IFormatProvider,System.String,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendFormat(IFormatProvider, String, Object)\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object)\n  fullName: StringBuilder.AppendFormat(IFormatProvider, String, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider.\n  remarks: \"This method uses the  [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of `arg0` to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of each format item must be zero (0) since this method includes an argument list with a single argument. The formatting process replaces each format item with the string representation of `arg0`.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. In this case, since the <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%29> method has a single argument in the argument list, the value of *index* must always be 0. If it is not, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \\n  \\n> [!NOTE]\\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for the objects in `args`. `provider` can be any of the following:  \\n  \\n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \\n  \\n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for `arg0` if it is a numeric value.  \\n  \\n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for `arg0` if it is a date and time value.  \\n  \\n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.  \\n  \\n If the `provider` parameter is `null`, formatting information is obtained from the current culture.  \\n  \\n `arg0` represents the object to be formatted. Each format item in `format` is replaced with the string representation of `arg0`. If the format item includes `formatString` and `arg0` implements the <xref:System.IFormattable> interface, then `arg0.ToString(formatString, provider)` defines the formatting. Otherwise, `arg0.ToString()` defines the formatting.\"\n  example:\n  - \"The following includes two calls to the <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%29> method. Both use the formatting conventions of the English-Great Britain (en-GB) culture. The first inserts the string representation of a <xref:System.Decimal> value currency in a result string. The second inserts a <xref:System.DateTime> value in two places in a result string, the first including only the short date string and the second the short time string.  \\n  \\n [!code-csharp[System.Text.StringBuilder.AppendFormat#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/cs/appendformat1.cs#2)]\\n [!code-vb[System.Text.StringBuilder.AppendFormat#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/vb/appendformat1.vb#2)]\"\n  syntax:\n    content: public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The object to format.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> in which any format specification is replaced by the string representation of <code>arg0</code>.\n  overload: System.Text.StringBuilder.AppendFormat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to one (1).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])\n  id: AppendFormat(System.IFormatProvider,System.String,System.Object[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendFormat(IFormatProvider, String, Object[])\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object[])\n  fullName: StringBuilder.AppendFormat(IFormatProvider, String, Object[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.\n  remarks: \"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \\n  \\n> [!NOTE]\\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for the objects in `args`. `provider` can be any of the following:  \\n  \\n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \\n  \\n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for numeric values in `args`.  \\n  \\n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for date and time values in `args`.  \\n  \\n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for one or more of the objects in `args`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface. The second example in the next section illustrates an <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method call with a custom <xref:System.IFormatProvider> implementation.  \\n  \\n If the `provider` parameter is `null`, format provider information is obtained from the current culture.  \\n  \\n `args` represents the objects to be formatted. Each format item in `format` is replaced with the string representation of the corresponding object in `args`. If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `args[index].ToString(formatString, provider)` defines the formatting. Otherwise, `args[index].ToString()` defines the formatting.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n [!code-cpp[stringbuilder.appendformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendformat/CPP/appfmt.cpp#1)]\\n [!code-csharp[stringbuilder.appendformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendformat/CS/appfmt.cs#1)]\\n [!code-vb[stringbuilder.appendformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendformat/VB/appfmt.vb#1)]  \\n  \\n The following example defines a custom <xref:System.IFormatProvider> implementation named `CustomerFormatter` that formats a 10-digit customer number with hyphens after the fourth and seventh digits. It is passed to the <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method to create a string that includes the formatted customer number and customer name.  \\n  \\n [!code-csharp[System.Text.StringBuilder.AppendFormat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/cs/customernumberformatter1.cs#1)]\\n [!code-vb[System.Text.StringBuilder.AppendFormat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/vb/customernumberformatter1.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object[] args);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: args\n      type: System.Object[]\n      description: An array of objects to format.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.\n  overload: System.Text.StringBuilder.AppendFormat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to the length of the <code>args</code> array.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)\n  id: AppendFormat(System.String,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendFormat(String, Object, Object)\n  nameWithType: StringBuilder.AppendFormat(String, Object, Object)\n  fullName: StringBuilder.AppendFormat(String, Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.\n  remarks: \"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to `arg0` and `arg1`, the two objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \\n  \\n> [!NOTE]\\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n `arg0` and `arg1` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of either `arg0` or `arg1`. If the format item includes `formatString` and the corresponding object implements the <xref:System.IFormattable> interface, then `arg`*x*`.ToString(formatString, provider)` defines the formatting, where *x* is the index of the argument. Otherwise, `arg`*x*`.ToString()` defines the formatting.  \\n  \\n If the string assigned to `format` is \\\"Thank you for your donation of {0:####} cans of food to our charitable organization.\\\" and `arg0` is an integer with the value 10, the return value will be \\\"Thank you for your donation of 10 cans of food to our charitable organization.\\\"\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n [!code-cpp[stringbuilder.appendformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendformat/CPP/appfmt.cpp#1)]\\n [!code-csharp[stringbuilder.appendformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendformat/CS/appfmt.cs#1)]\\n [!code-vb[stringbuilder.appendformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendformat/VB/appfmt.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The first object to format.\n    - id: arg1\n      type: System.Object\n      description: The second object to format.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.\n  overload: System.Text.StringBuilder.AppendFormat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to 2.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)\n  id: AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendFormat(IFormatProvider, String, Object, Object)\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object)\n  fullName: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.\n  remarks: \"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \\n  \\n> [!NOTE]\\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n The `provider` parameter specifies an <xref:System.IFormatProvider> implementation that can provide formatting information for `arg0` and `arg1`. `provider` can be any of the following:  \\n  \\n-   A <xref:System.Globalization.CultureInfo> object that provides culture-specific formatting information.  \\n  \\n-   A <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information for `arg0` or `arg1` if they are numeric values.  \\n  \\n-   A <xref:System.Globalization.DateTimeFormatInfo> object that provides culture-specific formatting information for `arg0` or `arg1` if they are date and time values.  \\n  \\n-   A custom <xref:System.IFormatProvider> implementation that provides formatting information for `arg0` and `arg1`. Typically, such an implementation also implements the <xref:System.ICustomFormatter> interface.  \\n  \\n If the `provider` parameter is `null`, format provider information is obtained from the current culture.  \\n  \\n `arg0` and `arg1` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of the object that has the corresponding index. If the format item includes `formatString` and the corresponding argument implements the <xref:System.IFormattable> interface, then the argument's `ToString(formatString, provider)` method defines the formatting. Otherwise, the argument's `ToString()` method defines the formatting.\"\n  example:\n  - \"The following example uses the <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%2CSystem.Object%29> method to display time and temperature data stored in a generic <xref:System.Collections.Generic.Dictionary%602> object. Note that the format string has three format items, although there are only to objects to format. This is because the first object in the list (a date and time value) is used by two format items: The first format item displays the time, and the second displays the date.  \\n  \\n [!code-csharp[System.Text.StringBuilder.AppendFormat#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/cs/appendformat2.cs#3)]\\n [!code-vb[System.Text.StringBuilder.AppendFormat#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.appendformat/vb/appendformat2.vb#3)]\"\n  syntax:\n    content: public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object arg0, object arg1);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The first object to format.\n    - id: arg1\n      type: System.Object\n      description: The second object to format.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <code>format</code> where any format specification is replaced by the string representation of the corresponding object argument.\n  overload: System.Text.StringBuilder.AppendFormat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to 2 (two).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)\n  id: AppendFormat(System.String,System.Object,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendFormat(String, Object, Object, Object)\n  nameWithType: StringBuilder.AppendFormat(String, Object, Object, Object)\n  fullName: StringBuilder.AppendFormat(String, Object, Object, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.\n  remarks: \"This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref:System.Text.StringBuilder> object.  \\n  \\n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to `arg0` through `arg2`, the objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.  \\n  \\n The syntax of a format item is as follows:  \\n  \\n {*index*[,*length*][:*formatString*]}  \\n  \\n Elements in square brackets are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*index*|The zero-based position in the parameter list of the object to be formatted. If the object specified by *index* is `null`, the format item is replaced by <xref:System.String.Empty?displayProperty=fullName>. If there is no parameter in the *index* position, a <xref:System.FormatException> is thrown.|  \\n|,*length*|The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.|  \\n|:*formatString*|A standard or custom format string that is supported by the parameter.|  \\n  \\n> [!NOTE]\\n>  For the standard and custom format strings used with date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md). For the standard and custom format strings used with numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md). For the standard format strings used with enumerations, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).  \\n  \\n `arg0`, `arg1`, and `arg2` represent the objects to be formatted. Each format item in `format` is replaced with the string representation of either `arg0`, `arg1`, or `arg2`, depending on the index of the format item. If the format item includes `formatString` and the corresponding object in `args` implements the <xref:System.IFormattable> interface, then `arg`*x*`.ToString(formatString, null)` defines the formatting, where *x* is the index of the argument. Otherwise, `arg`*x*`.ToString()` defines the formatting.  \\n  \\n If the string assigned to `format` is \\\"Thank you for your donation of {0:####} cans of food to our charitable organization.\\\" and `arg0` is an integer with the value 10, the return value will be \\\"Thank you for your donation of 10 cans of food to our charitable organization.\\\"\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.AppendFormat%2A> method.  \\n  \\n [!code-cpp[stringbuilder.appendformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendformat/CPP/appfmt.cpp#1)]\\n [!code-csharp[stringbuilder.appendformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendformat/CS/appfmt.cs#1)]\\n [!code-vb[stringbuilder.appendformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendformat/VB/appfmt.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1, object arg2);\n    parameters:\n    - id: format\n      type: System.String\n      description: A composite format string.\n    - id: arg0\n      type: System.Object\n      description: The first object to format.\n    - id: arg1\n      type: System.Object\n      description: The second object to format.\n    - id: arg2\n      type: System.Object\n      description: The third object to format.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance with <code>format</code> appended. Each format item in <code>format</code> is replaced by the string representation of the corresponding object argument.\n  overload: System.Text.StringBuilder.AppendFormat*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>format</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"<code>format</code> is invalid.  \\n  \\n -or-  \\n  \\n The index of a format item is less than 0 (zero), or greater than or equal to 3.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.AppendJoin(System.String,System.Object[])\n  commentId: M:System.Text.StringBuilder.AppendJoin(System.String,System.Object[])\n  id: AppendJoin(System.String,System.Object[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendJoin(String, Object[])\n  nameWithType: StringBuilder.AppendJoin(String, Object[])\n  fullName: StringBuilder.AppendJoin(String, Object[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  syntax:\n    content: public System.Text.StringBuilder AppendJoin (string separator, object[] values);\n    parameters:\n    - id: separator\n      type: System.String\n      description: ''\n    - id: values\n      type: System.Object[]\n      description: ''\n    return:\n      type: System.Text.StringBuilder\n      description: ''\n  overload: System.Text.StringBuilder.AppendJoin*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.AppendJoin(System.String,System.String[])\n  commentId: M:System.Text.StringBuilder.AppendJoin(System.String,System.String[])\n  id: AppendJoin(System.String,System.String[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendJoin(String, String[])\n  nameWithType: StringBuilder.AppendJoin(String, String[])\n  fullName: StringBuilder.AppendJoin(String, String[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  syntax:\n    content: public System.Text.StringBuilder AppendJoin (string separator, string[] values);\n    parameters:\n    - id: separator\n      type: System.String\n      description: ''\n    - id: values\n      type: System.String[]\n      description: ''\n    return:\n      type: System.Text.StringBuilder\n      description: ''\n  overload: System.Text.StringBuilder.AppendJoin*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.AppendJoin(System.Char,System.Object[])\n  commentId: M:System.Text.StringBuilder.AppendJoin(System.Char,System.Object[])\n  id: AppendJoin(System.Char,System.Object[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendJoin(Char, Object[])\n  nameWithType: StringBuilder.AppendJoin(Char, Object[])\n  fullName: StringBuilder.AppendJoin(Char, Object[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  syntax:\n    content: public System.Text.StringBuilder AppendJoin (char separator, object[] values);\n    parameters:\n    - id: separator\n      type: System.Char\n      description: ''\n    - id: values\n      type: System.Object[]\n      description: ''\n    return:\n      type: System.Text.StringBuilder\n      description: ''\n  overload: System.Text.StringBuilder.AppendJoin*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.AppendJoin(System.Char,System.String[])\n  commentId: M:System.Text.StringBuilder.AppendJoin(System.Char,System.String[])\n  id: AppendJoin(System.Char,System.String[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendJoin(Char, String[])\n  nameWithType: StringBuilder.AppendJoin(Char, String[])\n  fullName: StringBuilder.AppendJoin(Char, String[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  syntax:\n    content: public System.Text.StringBuilder AppendJoin (char separator, string[] values);\n    parameters:\n    - id: separator\n      type: System.Char\n      description: ''\n    - id: values\n      type: System.String[]\n      description: ''\n    return:\n      type: System.Text.StringBuilder\n      description: ''\n  overload: System.Text.StringBuilder.AppendJoin*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})\n  id: AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendJoin<T>(Char, IEnumerable<T>)\n  nameWithType: StringBuilder.AppendJoin<T>(Char, IEnumerable<T>)\n  fullName: StringBuilder.AppendJoin<T>(Char, IEnumerable<T>)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  syntax:\n    content: public System.Text.StringBuilder AppendJoin<T> (char separator, System.Collections.Generic.IEnumerable<T> values);\n    parameters:\n    - id: separator\n      type: System.Char\n      description: ''\n    - id: values\n      type: System.Collections.Generic.IEnumerable`1\n      description: ''\n    typeParameters:\n    - id: T\n      description: ''\n    return:\n      type: System.Text.StringBuilder\n      description: ''\n  overload: System.Text.StringBuilder.AppendJoin``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  id: AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendJoin<T>(String, IEnumerable<T>)\n  nameWithType: StringBuilder.AppendJoin<T>(String, IEnumerable<T>)\n  fullName: StringBuilder.AppendJoin<T>(String, IEnumerable<T>)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  syntax:\n    content: public System.Text.StringBuilder AppendJoin<T> (string separator, System.Collections.Generic.IEnumerable<T> values);\n    parameters:\n    - id: separator\n      type: System.String\n      description: ''\n    - id: values\n      type: System.Collections.Generic.IEnumerable`1\n      description: ''\n    typeParameters:\n    - id: T\n      description: ''\n    return:\n      type: System.Text.StringBuilder\n      description: ''\n  overload: System.Text.StringBuilder.AppendJoin``1*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.AppendLine\n  commentId: M:System.Text.StringBuilder.AppendLine\n  id: AppendLine\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendLine()\n  nameWithType: StringBuilder.AppendLine()\n  fullName: StringBuilder.AppendLine()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends the default line terminator to the end of the current <xref href=\"System.Text.StringBuilder\"></xref> object.\n  remarks: \"The default line terminator is the current value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.AppendLine%2A> method.  \\n  \\n [!code-cpp[stringbuilder.appendline#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.appendline/CPP/al.cpp#1)]\\n [!code-csharp[stringbuilder.appendline#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.appendline/CS/al.cs#1)]\\n [!code-vb[stringbuilder.appendline#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.appendline/VB/al.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Text.StringBuilder AppendLine ();\n    parameters: []\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.AppendLine*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.AppendLine(System.String)\n  commentId: M:System.Text.StringBuilder.AppendLine(System.String)\n  id: AppendLine(System.String)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: AppendLine(String)\n  nameWithType: StringBuilder.AppendLine(String)\n  fullName: StringBuilder.AppendLine(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Appends a copy of the specified string followed by the default line terminator to the end of the current <xref href=\"System.Text.StringBuilder\"></xref> object.\n  remarks: \"The default line terminator is the current value of the <xref:System.Environment.NewLine%2A?displayProperty=fullName> property.  \\n  \\n The capacity of this instance is adjusted as needed.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Text.StringBuilder AppendLine (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string to append.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the append operation has completed.\n  overload: System.Text.StringBuilder.AppendLine*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Capacity\n  commentId: P:System.Text.StringBuilder.Capacity\n  id: Capacity\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: StringBuilder.Capacity\n  fullName: StringBuilder.Capacity\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.\n  remarks: \"<xref:System.Text.StringBuilder.Capacity%2A> does not affect the string value of the current instance. <xref:System.Text.StringBuilder.Capacity%2A> can be decreased as long as it is not less than <xref:System.Text.StringBuilder.Length%2A>.  \\n  \\n The <xref:System.Text.StringBuilder> dynamically allocates more space when required and increases <xref:System.Text.StringBuilder.Capacity%2A> accordingly. For performance reasons, a <xref:System.Text.StringBuilder> might allocate more memory than needed. The amount of memory allocated is implementation-specific.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Capacity%2A> property.  \\n  \\n [!code-cpp[stringbuilder.ensurecapacity#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CPP/cap.cpp#1)]\\n [!code-csharp[stringbuilder.ensurecapacity#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CS/cap.cs#1)]\\n [!code-vb[stringbuilder.ensurecapacity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.ensurecapacity/VB/cap.vb#1)]\"\n  syntax:\n    content: public int Capacity { get; set; }\n    return:\n      type: System.Int32\n      description: The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from <xref href=\"System.Text.StringBuilder.Length\"></xref> to <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  overload: System.Text.StringBuilder.Capacity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The value specified for a set operation is less than the current length of this instance.  \\n  \\n -or-  \\n  \\n The value specified for a set operation is greater than the maximum capacity.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Chars(System.Int32)\n  commentId: P:System.Text.StringBuilder.Chars(System.Int32)\n  id: Chars(System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Chars(Int32)\n  nameWithType: StringBuilder.Chars(Int32)\n  fullName: StringBuilder.Chars(Int32)\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Gets or sets the character at the specified character position in this instance.\n  remarks: \"The `index` parameter is the position of a character within the <xref:System.Text.StringBuilder>. The first character in the string is at index 0. The length of a string is the number of characters it contains. The last accessible character of a <xref:System.Text.StringBuilder> instance is at index <xref:System.Text.StringBuilder.Length%2A> - 1.  \\n  \\n <xref:System.Text.StringBuilder.Chars%2A> is the default property of the <xref:System.Text.StringBuilder> class. In C#, it is an indexer. This means that individual characters can be retrieved from the <xref:System.Text.StringBuilder.Chars%2A> property as shown in the following example, which counts the number of alphabetic, white-space, and punctuation characters in a string.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Chars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.chars/cs/chars1.cs#1)]\\n [!code-vb[System.Text.StringBuilder.Chars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.chars/vb/chars1.vb#1)]\"\n  syntax:\n    content: public char this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position of the character.\n    return:\n      type: System.Char\n      description: The Unicode character at position <code>index</code>.\n  overload: System.Text.StringBuilder.Chars*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the bounds of this instance while setting a character.\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: <code>index</code> is outside the bounds of this instance while getting a character.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Clear\n  commentId: M:System.Text.StringBuilder.Clear\n  id: Clear\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: StringBuilder.Clear()\n  fullName: StringBuilder.Clear()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Removes all characters from the current <xref href=\"System.Text.StringBuilder\"></xref> instance.\n  remarks: \"<xref:System.Text.StringBuilder.Clear%2A> is a convenience method that is equivalent to setting the <xref:System.Text.StringBuilder.Length%2A> property of the current instance to 0 (zero).  \\n  \\n Calling the <xref:System.Text.StringBuilder.Clear%2A> method does not modify the current instance's <xref:System.Text.StringBuilder.Capacity%2A> or <xref:System.Text.StringBuilder.MaxCapacity%2A> property.\"\n  example:\n  - \"The following example instantiates a <xref:System.Text.StringBuilder> object with a string, calls the <xref:System.Text.StringBuilder.Clear%2A> method, and then appends a new string.  \\n  \\n [!code-csharp[System.Text.StringBuilder.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.stringbuilder.clear/cs/clear1.cs#1)]\\n [!code-vb[System.Text.StringBuilder.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.stringbuilder.clear/vb/clear1.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Clear ();\n    parameters: []\n    return:\n      type: System.Text.StringBuilder\n      description: An object whose <xref href=\"System.Text.StringBuilder.Length\"></xref> is 0 (zero).\n  overload: System.Text.StringBuilder.Clear*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  id: CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: CopyTo(Int32, Char[], Int32, Int32)\n  nameWithType: StringBuilder.CopyTo(Int32, Char[], Int32, Int32)\n  fullName: StringBuilder.CopyTo(Int32, Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Copies the characters from a specified segment of this instance to a specified segment of a destination <xref href=\"System.Char\"></xref> array.\n  remarks: \"The <xref:System.Text.StringBuilder.CopyTo%2A> method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <xref:System.Text.StringBuilder> object to an array. The array should be a fixed size, preallocated, reusable, and possibly globally accessible.  \\n  \\n For example, your application could populate a <xref:System.Text.StringBuilder> object with a large number of characters then use the <xref:System.Text.StringBuilder.CopyTo%2A> method to copy small, successive pieces of the <xref:System.Text.StringBuilder> object to an array where the pieces are processed. When all the data in the <xref:System.Text.StringBuilder> object is processed, the size of the <xref:System.Text.StringBuilder> object is set to zero and the cycle is repeated.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.CopyTo%2A> method.  \\n  \\n [!code-cpp[stringbuilder.copyto2#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.copyto2/CPP/ct2.cpp#1)]\\n [!code-csharp[stringbuilder.copyto2#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.copyto2/CS/ct2.cs#1)]\\n [!code-vb[stringbuilder.copyto2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.copyto2/VB/ct2.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);\n    parameters:\n    - id: sourceIndex\n      type: System.Int32\n      description: The starting position in this instance where characters will be copied from. The index is zero-based.\n    - id: destination\n      type: System.Char[]\n      description: The array where characters will be copied.\n    - id: destinationIndex\n      type: System.Int32\n      description: The starting position in <code>destination</code> where characters will be copied. The index is zero-based.\n    - id: count\n      type: System.Int32\n      description: The number of characters to be copied.\n  overload: System.Text.StringBuilder.CopyTo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>destination</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>sourceIndex</code>, <code>destinationIndex</code>, or <code>count</code>, is less than zero.  \\n  \\n -or-  \\n  \\n <code>sourceIndex</code> is greater than the length of this instance.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>sourceIndex</code> + <code>count</code> is greater than the length of this instance.  \\n  \\n -or-  \\n  \\n <code>destinationIndex</code> + <code>count</code> is greater than the length of <code>destination</code>.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.EnsureCapacity(System.Int32)\n  commentId: M:System.Text.StringBuilder.EnsureCapacity(System.Int32)\n  id: EnsureCapacity(System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: EnsureCapacity(Int32)\n  nameWithType: StringBuilder.EnsureCapacity(Int32)\n  fullName: StringBuilder.EnsureCapacity(Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Ensures that the capacity of this instance of <xref href=\"System.Text.StringBuilder\"></xref> is at least the specified value.\n  remarks: If the current capacity is less than the `capacity` parameter, memory for this instance is reallocated to hold at least `capacity` number of characters; otherwise, no memory is changed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.EnsureCapacity%2A> method.  \\n  \\n [!code-cpp[stringbuilder.ensurecapacity#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CPP/cap.cpp#1)]\\n [!code-csharp[stringbuilder.ensurecapacity#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CS/cap.cs#1)]\\n [!code-vb[stringbuilder.ensurecapacity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.ensurecapacity/VB/cap.vb#1)]\"\n  syntax:\n    content: public int EnsureCapacity (int capacity);\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: The minimum capacity to ensure.\n    return:\n      type: System.Int32\n      description: The new capacity of this instance.\n  overload: System.Text.StringBuilder.EnsureCapacity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>capacity</code> is less than zero.  \\n  \\n -or-  \\n  \\n Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Equals(System.Text.StringBuilder)\n  commentId: M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)\n  id: Equals(System.Text.StringBuilder)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Equals(StringBuilder)\n  nameWithType: StringBuilder.Equals(StringBuilder)\n  fullName: StringBuilder.Equals(StringBuilder)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Returns a value indicating whether this instance is equal to a specified object.\n  remarks: ''\n  example:\n  - \"The following code uses the <xref:System.Text.StringBuilder.Equals%2A> method to check whether two <xref:System.Text.StringBuilder> objects are equal. The method is called repeatedly after small changes are made to each object, and the results are displayed to the console.  \\n  \\n [!code-cpp[stringbuilder.ensurecapacity#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CPP/cap.cpp#1)]\\n [!code-csharp[stringbuilder.ensurecapacity#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CS/cap.cs#1)]\\n [!code-vb[stringbuilder.ensurecapacity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.ensurecapacity/VB/cap.vb#1)]\"\n  syntax:\n    content: public bool Equals (System.Text.StringBuilder sb);\n    parameters:\n    - id: sb\n      type: System.Text.StringBuilder\n      description: An object to compare with this instance, or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if this instance and <code>sb</code> have equal string, <xref href=\"System.Text.StringBuilder.Capacity\"></xref>, and <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref> values; otherwise, `false`.'\n  overload: System.Text.StringBuilder.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)\n  id: Insert(System.Int32,System.String,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, String, Int32)\n  nameWithType: StringBuilder.Insert(Int32, String, Int32)\n  fullName: StringBuilder.Insert(Int32, String, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts one or more copies of a specified string into this instance at the specified character position.\n  remarks: \"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  \\n  \\n This <xref:System.Text.StringBuilder> object is not changed if `value` is `null`, `value` is not `null` but its length is zero, or `count` is zero.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, string value, int count);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.String\n      description: The string to insert.\n    - id: count\n      type: System.Int32\n      description: The number of times to insert <code>value</code>.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after insertion has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero or greater than the current length of this instance.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: The current length of this <xref href=\"System.Text.StringBuilder\"></xref> object plus the length of <code>value</code> times <code>count</code> exceeds <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt64)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)\n  id: Insert(System.Int32,System.UInt64)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, UInt64)\n  nameWithType: StringBuilder.Insert(Int32, UInt64)\n  fullName: StringBuilder.Insert(Int32, UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.\n  remarks: <xref:System.UInt64.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public System.Text.StringBuilder Insert (int index, ulong value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.UInt64\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt32)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)\n  id: Insert(System.Int32,System.UInt32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, UInt32)\n  nameWithType: StringBuilder.Insert(Int32, UInt32)\n  fullName: StringBuilder.Insert(Int32, UInt32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.\n  remarks: <xref:System.UInt32.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public System.Text.StringBuilder Insert (int index, uint value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.UInt32\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt16)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)\n  id: Insert(System.Int32,System.UInt16)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, UInt16)\n  nameWithType: StringBuilder.Insert(Int32, UInt16)\n  fullName: StringBuilder.Insert(Int32, UInt16)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.\n  remarks: <xref:System.UInt16.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public System.Text.StringBuilder Insert (int index, ushort value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.UInt16\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.String)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.String)\n  id: Insert(System.Int32,System.String)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, String)\n  nameWithType: StringBuilder.Insert(Int32, String)\n  fullName: StringBuilder.Insert(Int32, String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts a string into this instance at the specified character position.\n  remarks: \"Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.  \\n  \\n This instance of <xref:System.Text.StringBuilder> is not changed if `value` is `null`, or `value` is not `null` but its length is zero.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, string value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.String\n      description: The string to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero or greater than the current length of this instance.  \\n  \\n -or-  \\n  \\n The current length of this <xref href=\\\"System.Text.StringBuilder\\\"></xref> object plus the length of <code>value</code> exceeds <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Single)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Single)\n  id: Insert(System.Int32,System.Single)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Single)\n  nameWithType: StringBuilder.Insert(Int32, Single)\n  fullName: StringBuilder.Insert(Int32, Single)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a single-precision floating point number into this instance at the specified character position.\n  remarks: <xref:System.Single.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, float value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Single\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.SByte)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)\n  id: Insert(System.Int32,System.SByte)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, SByte)\n  nameWithType: StringBuilder.Insert(Int32, SByte)\n  fullName: StringBuilder.Insert(Int32, SByte)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.\n  remarks: <xref:System.SByte.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public System.Text.StringBuilder Insert (int index, sbyte value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.SByte\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)\n  id: Insert(System.Int32,System.Char[],System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Char[], Int32, Int32)\n  nameWithType: StringBuilder.Insert(Int32, Char[], Int32, Int32)\n  fullName: StringBuilder.Insert(Int32, Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.\n  remarks: Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, char[] value, int startIndex, int charCount);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Char[]\n      description: A character array.\n    - id: startIndex\n      type: System.Int32\n      description: The starting index within <code>value</code>.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`, and <code>startIndex</code> and <code>charCount</code> are not zero.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code>, <code>startIndex</code>, or <code>charCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> is greater than the length of this instance.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> plus <code>charCount</code> is not a position within <code>value</code>.  \\n  \\n -or-  \\n  \\n Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Object)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Object)\n  id: Insert(System.Int32,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Object)\n  nameWithType: StringBuilder.Insert(Int32, Object)\n  fullName: StringBuilder.Insert(Int32, Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of an object into this instance at the specified character position.\n  remarks: \"<xref:System.Object.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  \\n  \\n If `value` is `null`, the value of this instance is unchanged.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, object value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Object\n      description: The object to insert, or `null`.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)\n  id: Insert(System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Int32)\n  nameWithType: StringBuilder.Insert(Int32, Int32)\n  fullName: StringBuilder.Insert(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.\n  remarks: <xref:System.Int32.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, int value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Int32\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int16)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)\n  id: Insert(System.Int32,System.Int16)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Int16)\n  nameWithType: StringBuilder.Insert(Int32, Int16)\n  fullName: StringBuilder.Insert(Int32, Int16)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.\n  remarks: <xref:System.Int16.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, short value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Int16\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Double)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Double)\n  id: Insert(System.Int32,System.Double)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Double)\n  nameWithType: StringBuilder.Insert(Int32, Double)\n  fullName: StringBuilder.Insert(Int32, Double)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.\n  remarks: <xref:System.Double.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, double value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Double\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Decimal)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)\n  id: Insert(System.Int32,System.Decimal)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Decimal)\n  nameWithType: StringBuilder.Insert(Int32, Decimal)\n  fullName: StringBuilder.Insert(Int32, Decimal)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a decimal number into this instance at the specified character position.\n  remarks: <xref:System.Decimal.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, decimal value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Decimal\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[])\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])\n  id: Insert(System.Int32,System.Char[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Char[])\n  nameWithType: StringBuilder.Insert(Int32, Char[])\n  fullName: StringBuilder.Insert(Int32, Char[])\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.\n  remarks: \"Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.  \\n  \\n If `value` is `null`, the <xref:System.Text.StringBuilder> is not changed.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, char[] value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Char[]\n      description: The character array to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero or greater than the length of this instance.  \\n  \\n -or-  \\n  \\n Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char)\n  id: Insert(System.Int32,System.Char)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Char)\n  nameWithType: StringBuilder.Insert(Int32, Char)\n  fullName: StringBuilder.Insert(Int32, Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a specified Unicode character into this instance at the specified character position.\n  remarks: <xref:System.Char.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, char value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Char\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero or greater than the length of this instance.  \\n  \\n -or-  \\n  \\n Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\"></xref>.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Byte)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)\n  id: Insert(System.Int32,System.Byte)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Byte)\n  nameWithType: StringBuilder.Insert(Int32, Byte)\n  fullName: StringBuilder.Insert(Int32, Byte)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.\n  remarks: <xref:System.Byte.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, byte value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Byte\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Boolean)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)\n  id: Insert(System.Int32,System.Boolean)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Boolean)\n  nameWithType: StringBuilder.Insert(Int32, Boolean)\n  fullName: StringBuilder.Insert(Int32, Boolean)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a Boolean value into this instance at the specified character position.\n  remarks: <xref:System.Boolean.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, bool value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Boolean\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int64)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)\n  id: Insert(System.Int32,System.Int64)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Insert(Int32, Int64)\n  nameWithType: StringBuilder.Insert(Int32, Int64)\n  fullName: StringBuilder.Insert(Int32, Int64)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.\n  remarks: <xref:System.Int64.ToString%2A?displayProperty=fullName> is used to get a string representation of `value`. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Insert%2A> method.  \\n  \\n [!code-cpp[stringbuilder.insert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.insert/CPP/insert.cpp#1)]\\n [!code-csharp[stringbuilder.insert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.insert/CS/insert.cs#1)]\\n [!code-vb[stringbuilder.insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.insert/VB/insert.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Insert (int index, long value);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The position in this instance where insertion begins.\n    - id: value\n      type: System.Int64\n      description: The value to insert.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the insert operation has completed.\n  overload: System.Text.StringBuilder.Insert*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is less than zero or greater than the length of this instance.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Length\n  commentId: P:System.Text.StringBuilder.Length\n  id: Length\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Length\n  nameWithType: StringBuilder.Length\n  fullName: StringBuilder.Length\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Gets or sets the length of the current <xref href=\"System.Text.StringBuilder\"></xref> object.\n  remarks: \"The length of a <xref:System.Text.StringBuilder> object is defined by its number of <xref:System.Char> objects.  \\n  \\n Like the<xref:System.String.Length%2A?displayProperty=fullName> property, the <xref:System.Text.StringBuilder.Length%2A> property indicates the length of the current string object. Unlike the <xref:System.String.Length%2A?displayProperty=fullName> property, which is read-only, the <xref:System.Text.StringBuilder.Length%2A> property allows you to modify the length of the string stored to the <xref:System.Text.StringBuilder> object.  \\n  \\n If the specified length is less than the current length, the current <xref:System.Text.StringBuilder> object is truncated to the specified length. If the specified length is greater than the current length, the end of the string value of the current <xref:System.Text.StringBuilder> object is padded with the Unicode NULL character (U+0000).  \\n  \\n If the specified length is greater than the current capacity, <xref:System.Text.StringBuilder.Capacity%2A> increases so that it is greater than or equal to the specified length.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Length%2A> property.  \\n  \\n [!code-cpp[stringbuilder.ensurecapacity#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CPP/cap.cpp#1)]\\n [!code-csharp[stringbuilder.ensurecapacity#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.ensurecapacity/CS/cap.cs#1)]\\n [!code-vb[stringbuilder.ensurecapacity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.ensurecapacity/VB/cap.vb#1)]\"\n  syntax:\n    content: public int Length { get; set; }\n    return:\n      type: System.Int32\n      description: The length of this instance.\n  overload: System.Text.StringBuilder.Length*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value specified for a set operation is less than zero or greater than <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.MaxCapacity\n  commentId: P:System.Text.StringBuilder.MaxCapacity\n  id: MaxCapacity\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: MaxCapacity\n  nameWithType: StringBuilder.MaxCapacity\n  fullName: StringBuilder.MaxCapacity\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Gets the maximum capacity of this instance.\n  remarks: \"The maximum capacity for this implementation is <xref:System.Int32?displayProperty=fullName>. However, this value is implementation-specific and might be different in other or later implementations. You can explicitly set the maximum capacity of a <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor.  \\n  \\n In the[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], when you instantiate the <xref:System.Text.StringBuilder> object by calling the <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29> constructor, both the length and the capacity of the <xref:System.Text.StringBuilder> instance can grow beyond the value of its <xref:System.Text.StringBuilder.MaxCapacity%2A> property. This can occur particularly when you call the <xref:System.Text.StringBuilder.Append%2A> and <xref:System.Text.StringBuilder.AppendFormat%2A> methods to append small strings.\"\n  syntax:\n    content: public int MaxCapacity { get; }\n    return:\n      type: System.Int32\n      description: The maximum number of characters this instance can hold.\n  overload: System.Text.StringBuilder.MaxCapacity*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n  id: Remove(System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Remove(Int32, Int32)\n  nameWithType: StringBuilder.Remove(Int32, Int32)\n  fullName: StringBuilder.Remove(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Removes the specified range of characters from this instance.\n  remarks: \"The current method removes the specified range of characters from the current instance. The characters at (`startIndex` + `length`) are moved to `startIndex`, and the string value of the current instance is shortened by `length`. The capacity of the current instance is unaffected.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Text.StringBuilder.Remove%2A> method modifies the value of the current <xref:System.Text.StringBuilder> instance and returns that instance. It does not create and return a new <xref:System.Text.StringBuilder> object.\"\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Remove%2A> method.  \\n  \\n [!code-cpp[stringbuilder.remove#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.remove/CPP/remove.cpp#1)]\\n [!code-csharp[stringbuilder.remove#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.remove/CS/remove.cs#1)]\\n [!code-vb[stringbuilder.remove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.remove/VB/remove.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Remove (int startIndex, int length);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: ''\n    - id: length\n      type: System.Int32\n      description: The number of characters to remove.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance after the excise operation has completed.\n  overload: System.Text.StringBuilder.Remove*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: If <code>startIndex</code> or <code>length</code> is less than zero, or <code>startIndex</code> + <code>length</code> is greater than the length of this instance.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Replace(System.Char,System.Char)\n  commentId: M:System.Text.StringBuilder.Replace(System.Char,System.Char)\n  id: Replace(System.Char,System.Char)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Replace(Char, Char)\n  nameWithType: StringBuilder.Replace(Char, Char)\n  fullName: StringBuilder.Replace(Char, Char)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Replaces all occurrences of a specified character in this instance with another specified character.\n  remarks: This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldChar` in the current instance. The size of the current <xref:System.Text.StringBuilder> instance is unchanged after the replacement.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Replace%2A> method.  \\n  \\n [!code-cpp[stringbuilder.replace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.replace/CPP/replace.cpp#1)]\\n [!code-csharp[stringbuilder.replace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.replace/CS/replace.cs#1)]\\n [!code-vb[stringbuilder.replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.replace/VB/replace.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Replace (char oldChar, char newChar);\n    parameters:\n    - id: oldChar\n      type: System.Char\n      description: The character to replace.\n    - id: newChar\n      type: System.Char\n      description: The character that replaces <code>oldChar</code>.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance with <code>oldChar</code> replaced by <code>newChar</code>.\n  overload: System.Text.StringBuilder.Replace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Replace(System.String,System.String)\n  commentId: M:System.Text.StringBuilder.Replace(System.String,System.String)\n  id: Replace(System.String,System.String)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Replace(String, String)\n  nameWithType: StringBuilder.Replace(String, String)\n  fullName: StringBuilder.Replace(String, String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Replaces all occurrences of a specified string in this instance with another specified string.\n  remarks: This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldValue` in the current instance. If `newValue` is `null` or <xref:System.String?displayProperty=fullName>, all occurrences of `oldValue` are removed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Replace%2A> method.  \\n  \\n [!code-cpp[stringbuilder.replace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.replace/CPP/replace.cpp#1)]\\n [!code-csharp[stringbuilder.replace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.replace/CS/replace.cs#1)]\\n [!code-vb[stringbuilder.replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.replace/VB/replace.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Replace (string oldValue, string newValue);\n    parameters:\n    - id: oldValue\n      type: System.String\n      description: The string to replace.\n    - id: newValue\n      type: System.String\n      description: The string that replaces <code>oldValue</code>, or `null`.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance with all instances of <code>oldValue</code> replaced by <code>newValue</code>.\n  overload: System.Text.StringBuilder.Replace*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>oldValue</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of <code>oldValue</code> is zero.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)\n  id: Replace(System.Char,System.Char,System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Replace(Char, Char, Int32, Int32)\n  nameWithType: StringBuilder.Replace(Char, Char, Int32, Int32)\n  fullName: StringBuilder.Replace(Char, Char, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.\n  remarks: This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldChar` in the current instance. The size of the current <xref:System.Text.StringBuilder> object is unchanged after the replacement.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Replace%2A> method.  \\n  \\n [!code-cpp[stringbuilder.replace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.replace/CPP/replace.cpp#1)]\\n [!code-csharp[stringbuilder.replace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.replace/CS/replace.cs#1)]\\n [!code-vb[stringbuilder.replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.replace/VB/replace.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Replace (char oldChar, char newChar, int startIndex, int count);\n    parameters:\n    - id: oldChar\n      type: System.Char\n      description: The character to replace.\n    - id: newChar\n      type: System.Char\n      description: The character that replaces <code>oldChar</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The position in this instance where the substring begins.\n    - id: count\n      type: System.Int32\n      description: The length of the substring.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance with <code>oldChar</code> replaced by <code>newChar</code> in the range from <code>startIndex</code> to <code>startIndex</code> + <code>count</code> -1.\n  overload: System.Text.StringBuilder.Replace*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> + <code>count</code> is greater than the length of the value of this instance.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> or <code>count</code> is less than zero.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)\n  id: Replace(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: Replace(String, String, Int32, Int32)\n  nameWithType: StringBuilder.Replace(String, String, Int32, Int32)\n  fullName: StringBuilder.Replace(String, String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.\n  remarks: This method performs an ordinal, case-sensitive comparison to identify occurrences of `oldValue` in the specified substring. If `newValue` is `null` or <xref:System.String?displayProperty=fullName>, all occurrences of `oldValue` are removed.\n  example:\n  - \"The following example demonstrates the <xref:System.Text.StringBuilder.Replace%2A> method.  \\n  \\n [!code-cpp[stringbuilder.replace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringbuilder.replace/CPP/replace.cpp#1)]\\n [!code-csharp[stringbuilder.replace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringbuilder.replace/CS/replace.cs#1)]\\n [!code-vb[stringbuilder.replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringbuilder.replace/VB/replace.vb#1)]\"\n  syntax:\n    content: public System.Text.StringBuilder Replace (string oldValue, string newValue, int startIndex, int count);\n    parameters:\n    - id: oldValue\n      type: System.String\n      description: The string to replace.\n    - id: newValue\n      type: System.String\n      description: The string that replaces <code>oldValue</code>, or `null`.\n    - id: startIndex\n      type: System.Int32\n      description: The position in this instance where the substring begins.\n    - id: count\n      type: System.Int32\n      description: The length of the substring.\n    return:\n      type: System.Text.StringBuilder\n      description: A reference to this instance with all instances of <code>oldValue</code> replaced by <code>newValue</code> in the range from <code>startIndex</code> to <code>startIndex</code> + <code>count</code> - 1.\n  overload: System.Text.StringBuilder.Replace*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>oldValue</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of <code>oldValue</code> is zero.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> plus <code>count</code> indicates a character position not within this instance.  \\n  \\n -or-  \\n  \\n Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.ToString\n  commentId: M:System.Text.StringBuilder.ToString\n  id: ToString\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: StringBuilder.ToString()\n  fullName: StringBuilder.ToString()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Converts the value of this instance to a <xref href=\"System.String\"></xref>.\n  remarks: You must call the <xref:System.Text.StringBuilder.ToString%2A> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface.\n  example:\n  - \"The following example demonstrates calling the <xref:System.Text.StringBuilder.ToString%2A> method. This example is part of a larger example provided for the <xref:System.Text.StringBuilder> class.  \\n  \\n [!code-cpp[StringBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/StringBuilder/cpp/StringBuilder.cpp#5)]\\n [!code-csharp[StringBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/StringBuilder/CS/StringBuilder.cs#5)]\\n [!code-vb[StringBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringBuilder/VB/StringBuilder.vb#5)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string whose value is the same as this instance.\n  overload: System.Text.StringBuilder.ToString*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.ToString(System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)\n  id: ToString(System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: ToString(Int32, Int32)\n  nameWithType: StringBuilder.ToString(Int32, Int32)\n  fullName: StringBuilder.ToString(Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Text\n  summary: Converts the value of a substring of this instance to a <xref href=\"System.String\"></xref>.\n  remarks: You must call the <xref:System.Text.StringBuilder.ToString%2A> method to convert the <xref:System.Text.StringBuilder> object to a <xref:System.String> object before you can pass the string represented by the <xref:System.Text.StringBuilder> object to a method that has a <xref:System.String> parameter or display it in the user interface.\n  syntax:\n    content: public string ToString (int startIndex, int length);\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: The starting position of the substring in this instance.\n    - id: length\n      type: System.Int32\n      description: The length of the substring.\n    return:\n      type: System.String\n      description: A string whose value is the same as the specified substring of this instance.\n  overload: System.Text.StringBuilder.ToString*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> or <code>length</code> is less than zero.  \\n  \\n -or-  \\n  \\n The sum of <code>startIndex</code> and <code>length</code> is greater than the length of the current instance.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: StringBuilder.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: StringBuilder.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data necessary to deserialize the current <xref href=\"System.Text.StringBuilder\"></xref> object.\n  remarks: \"The `context` parameter is reserved for future use and does not participate in this operation.  \\n  \\n For more information, see the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%28System.String%2CSystem.Object%2CSystem.Type%29?displayProperty=fullName> method.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object to populate with serialization information.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The place to store and retrieve serialized data. Reserved for future use.\n  overload: System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is `null`.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NullReferenceException\n  parent: System\n  isExternal: false\n  name: NullReferenceException\n  nameWithType: NullReferenceException\n  fullName: System.NullReferenceException\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Text.StringBuilder.#ctor\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: StringBuilder()\n  nameWithType: StringBuilder.StringBuilder()\n  fullName: StringBuilder.StringBuilder()\n- uid: System.Text.StringBuilder.#ctor(System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: StringBuilder(Int32)\n  nameWithType: StringBuilder.StringBuilder(Int32)\n  fullName: StringBuilder.StringBuilder(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.StringBuilder.#ctor(System.String)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: StringBuilder(String)\n  nameWithType: StringBuilder.StringBuilder(String)\n  fullName: StringBuilder.StringBuilder(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: StringBuilder(Int32, Int32)\n  nameWithType: StringBuilder.StringBuilder(Int32, Int32)\n  fullName: StringBuilder.StringBuilder(Int32, Int32)\n- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: StringBuilder(String, Int32)\n  nameWithType: StringBuilder.StringBuilder(String, Int32)\n  fullName: StringBuilder.StringBuilder(String, Int32)\n- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: StringBuilder(String, Int32, Int32, Int32)\n  nameWithType: StringBuilder.StringBuilder(String, Int32, Int32, Int32)\n  fullName: StringBuilder.StringBuilder(String, Int32, Int32, Int32)\n- uid: System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(String, Int32, Int32)\n  nameWithType: StringBuilder.Append(String, Int32, Int32)\n  fullName: StringBuilder.Append(String, Int32, Int32)\n- uid: System.Text.StringBuilder\n  parent: System.Text\n  isExternal: false\n  name: StringBuilder\n  nameWithType: StringBuilder\n  fullName: System.Text.StringBuilder\n- uid: System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Char[], Int32, Int32)\n  nameWithType: StringBuilder.Append(Char[], Int32, Int32)\n  fullName: StringBuilder.Append(Char[], Int32, Int32)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.StringBuilder.Append(System.Char*,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Char*, Int32)\n  nameWithType: StringBuilder.Append(Char*, Int32)\n  fullName: StringBuilder.Append(Char*, Int32)\n- uid: System.Char*\n  parent: System\n  isExternal: false\n  name: Char*\n  nameWithType: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Text.StringBuilder.Append(System.Char,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Char, Int32)\n  nameWithType: StringBuilder.Append(Char, Int32)\n  fullName: StringBuilder.Append(Char, Int32)\n- uid: System.Text.StringBuilder.Append(System.UInt64)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(UInt64)\n  nameWithType: StringBuilder.Append(UInt64)\n  fullName: StringBuilder.Append(UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.Text.StringBuilder.Append(System.UInt32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(UInt32)\n  nameWithType: StringBuilder.Append(UInt32)\n  fullName: StringBuilder.Append(UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Text.StringBuilder.Append(System.UInt16)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(UInt16)\n  nameWithType: StringBuilder.Append(UInt16)\n  fullName: StringBuilder.Append(UInt16)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: System.Text.StringBuilder.Append(System.String)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(String)\n  nameWithType: StringBuilder.Append(String)\n  fullName: StringBuilder.Append(String)\n- uid: System.Text.StringBuilder.Append(System.SByte)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(SByte)\n  nameWithType: StringBuilder.Append(SByte)\n  fullName: StringBuilder.Append(SByte)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: System.Text.StringBuilder.Append(System.Single)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Single)\n  nameWithType: StringBuilder.Append(Single)\n  fullName: StringBuilder.Append(Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Text.StringBuilder.Append(System.Int64)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Int64)\n  nameWithType: StringBuilder.Append(Int64)\n  fullName: StringBuilder.Append(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Text.StringBuilder.Append(System.Object)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Object)\n  nameWithType: StringBuilder.Append(Object)\n  fullName: StringBuilder.Append(Object)\n- uid: System.Text.StringBuilder.Append(System.Byte)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Byte)\n  nameWithType: StringBuilder.Append(Byte)\n  fullName: StringBuilder.Append(Byte)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Text.StringBuilder.Append(System.Char)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Char)\n  nameWithType: StringBuilder.Append(Char)\n  fullName: StringBuilder.Append(Char)\n- uid: System.Text.StringBuilder.Append(System.Char[])\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Char[])\n  nameWithType: StringBuilder.Append(Char[])\n  fullName: StringBuilder.Append(Char[])\n- uid: System.Text.StringBuilder.Append(System.Boolean)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Boolean)\n  nameWithType: StringBuilder.Append(Boolean)\n  fullName: StringBuilder.Append(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.StringBuilder.Append(System.Double)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Double)\n  nameWithType: StringBuilder.Append(Double)\n  fullName: StringBuilder.Append(Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Text.StringBuilder.Append(System.Int16)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Int16)\n  nameWithType: StringBuilder.Append(Int16)\n  fullName: StringBuilder.Append(Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Text.StringBuilder.Append(System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Int32)\n  nameWithType: StringBuilder.Append(Int32)\n  fullName: StringBuilder.Append(Int32)\n- uid: System.Text.StringBuilder.Append(System.Decimal)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append(Decimal)\n  nameWithType: StringBuilder.Append(Decimal)\n  fullName: StringBuilder.Append(Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendFormat(IFormatProvider, String, Object, Object, Object)\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object, Object)\n  fullName: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object, Object)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendFormat(String, Object)\n  nameWithType: StringBuilder.AppendFormat(String, Object)\n  fullName: StringBuilder.AppendFormat(String, Object)\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object[])\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendFormat(String, Object[])\n  nameWithType: StringBuilder.AppendFormat(String, Object[])\n  fullName: StringBuilder.AppendFormat(String, Object[])\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendFormat(IFormatProvider, String, Object)\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object)\n  fullName: StringBuilder.AppendFormat(IFormatProvider, String, Object)\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendFormat(IFormatProvider, String, Object[])\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object[])\n  fullName: StringBuilder.AppendFormat(IFormatProvider, String, Object[])\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendFormat(String, Object, Object)\n  nameWithType: StringBuilder.AppendFormat(String, Object, Object)\n  fullName: StringBuilder.AppendFormat(String, Object, Object)\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendFormat(IFormatProvider, String, Object, Object)\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object)\n  fullName: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object)\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendFormat(String, Object, Object, Object)\n  nameWithType: StringBuilder.AppendFormat(String, Object, Object, Object)\n  fullName: StringBuilder.AppendFormat(String, Object, Object, Object)\n- uid: System.Text.StringBuilder.AppendJoin(System.String,System.Object[])\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendJoin(String, Object[])\n  nameWithType: StringBuilder.AppendJoin(String, Object[])\n  fullName: StringBuilder.AppendJoin(String, Object[])\n- uid: System.Text.StringBuilder.AppendJoin(System.String,System.String[])\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendJoin(String, String[])\n  nameWithType: StringBuilder.AppendJoin(String, String[])\n  fullName: StringBuilder.AppendJoin(String, String[])\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.StringBuilder.AppendJoin(System.Char,System.Object[])\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendJoin(Char, Object[])\n  nameWithType: StringBuilder.AppendJoin(Char, Object[])\n  fullName: StringBuilder.AppendJoin(Char, Object[])\n- uid: System.Text.StringBuilder.AppendJoin(System.Char,System.String[])\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendJoin(Char, String[])\n  nameWithType: StringBuilder.AppendJoin(Char, String[])\n  fullName: StringBuilder.AppendJoin(Char, String[])\n- uid: System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendJoin<T>(Char, IEnumerable<T>)\n  nameWithType: StringBuilder.AppendJoin<T>(Char, IEnumerable<T>)\n  fullName: StringBuilder.AppendJoin<T>(Char, IEnumerable<T>)\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendJoin<T>(String, IEnumerable<T>)\n  nameWithType: StringBuilder.AppendJoin<T>(String, IEnumerable<T>)\n  fullName: StringBuilder.AppendJoin<T>(String, IEnumerable<T>)\n- uid: System.Text.StringBuilder.AppendLine\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendLine()\n  nameWithType: StringBuilder.AppendLine()\n  fullName: StringBuilder.AppendLine()\n- uid: System.Text.StringBuilder.AppendLine(System.String)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendLine(String)\n  nameWithType: StringBuilder.AppendLine(String)\n  fullName: StringBuilder.AppendLine(String)\n- uid: System.Text.StringBuilder.Capacity\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Capacity\n  nameWithType: StringBuilder.Capacity\n  fullName: StringBuilder.Capacity\n- uid: System.Text.StringBuilder.Chars(System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Chars(Int32)\n  nameWithType: StringBuilder.Chars(Int32)\n  fullName: StringBuilder.Chars(Int32)\n- uid: System.Text.StringBuilder.Clear\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Clear()\n  nameWithType: StringBuilder.Clear()\n  fullName: StringBuilder.Clear()\n- uid: System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: CopyTo(Int32, Char[], Int32, Int32)\n  nameWithType: StringBuilder.CopyTo(Int32, Char[], Int32, Int32)\n  fullName: StringBuilder.CopyTo(Int32, Char[], Int32, Int32)\n- uid: System.Text.StringBuilder.EnsureCapacity(System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: EnsureCapacity(Int32)\n  nameWithType: StringBuilder.EnsureCapacity(Int32)\n  fullName: StringBuilder.EnsureCapacity(Int32)\n- uid: System.Text.StringBuilder.Equals(System.Text.StringBuilder)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Equals(StringBuilder)\n  nameWithType: StringBuilder.Equals(StringBuilder)\n  fullName: StringBuilder.Equals(StringBuilder)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, String, Int32)\n  nameWithType: StringBuilder.Insert(Int32, String, Int32)\n  fullName: StringBuilder.Insert(Int32, String, Int32)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt64)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, UInt64)\n  nameWithType: StringBuilder.Insert(Int32, UInt64)\n  fullName: StringBuilder.Insert(Int32, UInt64)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, UInt32)\n  nameWithType: StringBuilder.Insert(Int32, UInt32)\n  fullName: StringBuilder.Insert(Int32, UInt32)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt16)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, UInt16)\n  nameWithType: StringBuilder.Insert(Int32, UInt16)\n  fullName: StringBuilder.Insert(Int32, UInt16)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.String)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, String)\n  nameWithType: StringBuilder.Insert(Int32, String)\n  fullName: StringBuilder.Insert(Int32, String)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Single)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Single)\n  nameWithType: StringBuilder.Insert(Int32, Single)\n  fullName: StringBuilder.Insert(Int32, Single)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.SByte)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, SByte)\n  nameWithType: StringBuilder.Insert(Int32, SByte)\n  fullName: StringBuilder.Insert(Int32, SByte)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Char[], Int32, Int32)\n  nameWithType: StringBuilder.Insert(Int32, Char[], Int32, Int32)\n  fullName: StringBuilder.Insert(Int32, Char[], Int32, Int32)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Object)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Object)\n  nameWithType: StringBuilder.Insert(Int32, Object)\n  fullName: StringBuilder.Insert(Int32, Object)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Int32)\n  nameWithType: StringBuilder.Insert(Int32, Int32)\n  fullName: StringBuilder.Insert(Int32, Int32)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int16)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Int16)\n  nameWithType: StringBuilder.Insert(Int32, Int16)\n  fullName: StringBuilder.Insert(Int32, Int16)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Double)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Double)\n  nameWithType: StringBuilder.Insert(Int32, Double)\n  fullName: StringBuilder.Insert(Int32, Double)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Decimal)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Decimal)\n  nameWithType: StringBuilder.Insert(Int32, Decimal)\n  fullName: StringBuilder.Insert(Int32, Decimal)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[])\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Char[])\n  nameWithType: StringBuilder.Insert(Int32, Char[])\n  fullName: StringBuilder.Insert(Int32, Char[])\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Char)\n  nameWithType: StringBuilder.Insert(Int32, Char)\n  fullName: StringBuilder.Insert(Int32, Char)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Byte)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Byte)\n  nameWithType: StringBuilder.Insert(Int32, Byte)\n  fullName: StringBuilder.Insert(Int32, Byte)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Boolean)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Boolean)\n  nameWithType: StringBuilder.Insert(Int32, Boolean)\n  fullName: StringBuilder.Insert(Int32, Boolean)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int64)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert(Int32, Int64)\n  nameWithType: StringBuilder.Insert(Int32, Int64)\n  fullName: StringBuilder.Insert(Int32, Int64)\n- uid: System.Text.StringBuilder.Length\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Length\n  nameWithType: StringBuilder.Length\n  fullName: StringBuilder.Length\n- uid: System.Text.StringBuilder.MaxCapacity\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: MaxCapacity\n  nameWithType: StringBuilder.MaxCapacity\n  fullName: StringBuilder.MaxCapacity\n- uid: System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Remove(Int32, Int32)\n  nameWithType: StringBuilder.Remove(Int32, Int32)\n  fullName: StringBuilder.Remove(Int32, Int32)\n- uid: System.Text.StringBuilder.Replace(System.Char,System.Char)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Replace(Char, Char)\n  nameWithType: StringBuilder.Replace(Char, Char)\n  fullName: StringBuilder.Replace(Char, Char)\n- uid: System.Text.StringBuilder.Replace(System.String,System.String)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Replace(String, String)\n  nameWithType: StringBuilder.Replace(String, String)\n  fullName: StringBuilder.Replace(String, String)\n- uid: System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Replace(Char, Char, Int32, Int32)\n  nameWithType: StringBuilder.Replace(Char, Char, Int32, Int32)\n  fullName: StringBuilder.Replace(Char, Char, Int32, Int32)\n- uid: System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Replace(String, String, Int32, Int32)\n  nameWithType: StringBuilder.Replace(String, String, Int32, Int32)\n  fullName: StringBuilder.Replace(String, String, Int32, Int32)\n- uid: System.Text.StringBuilder.ToString\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: ToString()\n  nameWithType: StringBuilder.ToString()\n  fullName: StringBuilder.ToString()\n- uid: System.Text.StringBuilder.ToString(System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: ToString(Int32, Int32)\n  nameWithType: StringBuilder.ToString(Int32, Int32)\n  fullName: StringBuilder.ToString(Int32, Int32)\n- uid: System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: StringBuilder.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: StringBuilder.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Text.StringBuilder.#ctor*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: StringBuilder\n  nameWithType: StringBuilder.StringBuilder\n  fullName: StringBuilder.StringBuilder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.Append*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Append\n  nameWithType: StringBuilder.Append\n  fullName: StringBuilder.Append\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.AppendFormat*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendFormat\n  nameWithType: StringBuilder.AppendFormat\n  fullName: StringBuilder.AppendFormat\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.AppendJoin*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendJoin\n  nameWithType: StringBuilder.AppendJoin\n  fullName: StringBuilder.AppendJoin\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.AppendJoin``1*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendJoin<T>\n  nameWithType: StringBuilder.AppendJoin<T>\n  fullName: StringBuilder.AppendJoin<T>\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.AppendLine*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: AppendLine\n  nameWithType: StringBuilder.AppendLine\n  fullName: StringBuilder.AppendLine\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.Capacity*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Capacity\n  nameWithType: StringBuilder.Capacity\n  fullName: StringBuilder.Capacity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.Chars*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Chars\n  nameWithType: StringBuilder.Chars\n  fullName: StringBuilder.Chars\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.Clear*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Clear\n  nameWithType: StringBuilder.Clear\n  fullName: StringBuilder.Clear\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.CopyTo*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: CopyTo\n  nameWithType: StringBuilder.CopyTo\n  fullName: StringBuilder.CopyTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.EnsureCapacity*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: EnsureCapacity\n  nameWithType: StringBuilder.EnsureCapacity\n  fullName: StringBuilder.EnsureCapacity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.Equals*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Equals\n  nameWithType: StringBuilder.Equals\n  fullName: StringBuilder.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.Insert*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Insert\n  nameWithType: StringBuilder.Insert\n  fullName: StringBuilder.Insert\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.Length*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Length\n  nameWithType: StringBuilder.Length\n  fullName: StringBuilder.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.MaxCapacity*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: MaxCapacity\n  nameWithType: StringBuilder.MaxCapacity\n  fullName: StringBuilder.MaxCapacity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.Remove*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Remove\n  nameWithType: StringBuilder.Remove\n  fullName: StringBuilder.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.Replace*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: Replace\n  nameWithType: StringBuilder.Replace\n  fullName: StringBuilder.Replace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.ToString*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: ToString\n  nameWithType: StringBuilder.ToString\n  fullName: StringBuilder.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.Text.StringBuilder\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: StringBuilder.System.Runtime.Serialization.ISerializable.GetObjectData\n  fullName: StringBuilder.System.Runtime.Serialization.ISerializable.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/StringBuilder.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}