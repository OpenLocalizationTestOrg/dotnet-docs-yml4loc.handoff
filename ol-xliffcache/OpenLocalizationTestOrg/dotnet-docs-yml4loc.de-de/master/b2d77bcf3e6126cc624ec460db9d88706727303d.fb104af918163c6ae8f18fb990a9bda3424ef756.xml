{"nodes":[{"content":"Represents the base class from which all implementations of the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm must derive.","nodes":[{"pos":[0,140],"content":"Represents the base class from which all implementations of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RC2\"&gt;&lt;/xref&gt;</ph> algorithm must derive.","source":"Represents the base class from which all implementations of the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm must derive."}],"pos":[701,842],"yaml":true},{"content":"> [!NOTE]\n>  A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> algorithm and its derived classes instead of the <xref:System.Security.Cryptography.RC2> class. Use <xref:System.Security.Cryptography.RC2> only for compatibility with legacy applications and data.","nodes":[{"pos":[2,359],"content":"[!NOTE]\n A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> algorithm and its derived classes instead of the <xref:System.Security.Cryptography.RC2> class. Use <xref:System.Security.Cryptography.RC2> only for compatibility with legacy applications and data.","leadings":["","> "],"nodes":[{"content":" A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> algorithm and its derived classes instead of the <xref:System.Security.Cryptography.RC2> class. Use <xref:System.Security.Cryptography.RC2> only for compatibility with legacy applications and data.","pos":[8,355],"nodes":[{"content":"A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available.","pos":[1,90]},{"content":"Consider using the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.Aes&gt;</ph> algorithm and its derived classes instead of the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.RC2&gt;</ph> class.","pos":[91,245],"source":" Consider using the <xref:System.Security.Cryptography.Aes> algorithm and its derived classes instead of the <xref:System.Security.Cryptography.RC2> class."},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RC2&gt;</ph> only for compatibility with legacy applications and data.","pos":[246,347],"source":" Use <xref:System.Security.Cryptography.RC2> only for compatibility with legacy applications and data."}]}]}],"pos":[853,1225],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of <xref href=\"System.Security.Cryptography.RC2\"></xref>.","nodes":[{"pos":[0,84],"content":"Initializes a new instance of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RC2\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of <xref href=\"System.Security.Cryptography.RC2\"></xref>."}],"pos":[4875,4960],"yaml":true},{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \n  \n This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the <xref:System.Security.Cryptography.RC2CryptoServiceProvider> implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits.  \n  \n This method initializes the protected fields of <xref:System.Security.Cryptography.SymmetricAlgorithm> to the default values listed in the following table.  \n  \n|Field|Default Value|  \n|-----------|-------------------|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|128|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|64|  \n|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|","nodes":[{"pos":[0,115],"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.","nodes":[{"content":"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.","pos":[0,115],"nodes":[{"content":"You cannot create an instance of an abstract class.","pos":[0,51]},{"content":"Application code will create a new instance of a derived class.","pos":[52,115]}]}]},{"pos":[122,368],"content":"This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the <xref:System.Security.Cryptography.RC2CryptoServiceProvider> implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits.","nodes":[{"content":"This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RC2CryptoServiceProvider&gt;</ph> implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits.","pos":[0,246],"source":"This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the <xref:System.Security.Cryptography.RC2CryptoServiceProvider> implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits."}]},{"pos":[375,530],"content":"This method initializes the protected fields of <xref:System.Security.Cryptography.SymmetricAlgorithm> to the default values listed in the following table.","nodes":[{"content":"This method initializes the protected fields of <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.SymmetricAlgorithm&gt;</ph> to the default values listed in the following table.","pos":[0,155],"source":"This method initializes the protected fields of <xref:System.Security.Cryptography.SymmetricAlgorithm> to the default values listed in the following table."}]},{"pos":[537,542],"content":"Field","nodes":[{"content":"Field","pos":[0,5]}]},{"pos":[543,556],"content":"Default Value","nodes":[{"content":"Default Value","pos":[0,13]}]},{"pos":[597,664],"content":"<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>","nodes":[]},{"pos":[665,668],"content":"128","nodes":[{"content":"128","pos":[0,3]}]},{"pos":[673,742],"content":"<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>","nodes":[]},{"pos":[743,745],"content":"64","nodes":[{"content":"64","pos":[0,2]}]},{"pos":[750,822],"content":"<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>","nodes":[]},{"pos":[823,825],"content":"64","nodes":[{"content":"64","pos":[0,2]}]}],"pos":[4971,5810],"yaml":true,"extradata":"MT"},{"content":"Creates an instance of a cryptographic object to perform the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm.","nodes":[{"pos":[0,125],"content":"Creates an instance of a cryptographic object to perform the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RC2\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"Creates an instance of a cryptographic object to perform the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm."}],"pos":[7069,7195],"yaml":true},{"content":"Use this method to create an instance of the RC2 class that you can use to encrypt and decrypt data.","nodes":[{"pos":[0,100],"content":"Use this method to create an instance of the RC2 class that you can use to encrypt and decrypt data.","nodes":[{"content":"Use this method to create an instance of the RC2 class that you can use to encrypt and decrypt data.","pos":[0,100]}]}],"pos":[7206,7307],"yaml":true,"extradata":"MT"},{"content":"An instance of a cryptographic object.","nodes":[{"pos":[0,38],"content":"An instance of a cryptographic object.","nodes":[{"content":"An instance of a cryptographic object.","pos":[0,38]}]}],"pos":[8584,8623],"yaml":true},{"content":"The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.","nodes":[{"pos":[0,117],"content":"The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.","nodes":[{"content":"The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.","pos":[0,117]}]}],"pos":[8822,8940],"yaml":true},{"content":"Creates an instance of a cryptographic object to perform the specified implementation of the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm.","nodes":[{"pos":[0,157],"content":"Creates an instance of a cryptographic object to perform the specified implementation of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RC2\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"Creates an instance of a cryptographic object to perform the specified implementation of the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm."}],"pos":[10133,10291],"yaml":true},{"content":"Use this method to create an instance of the RC2 class that you can use to encrypt and decrypt data.","nodes":[{"pos":[0,100],"content":"Use this method to create an instance of the RC2 class that you can use to encrypt and decrypt data.","nodes":[{"content":"Use this method to create an instance of the RC2 class that you can use to encrypt and decrypt data.","pos":[0,100]}]}],"pos":[10302,10403],"yaml":true,"extradata":"MT"},{"content":"The name of the specific implementation of <xref href=\"System.Security.Cryptography.RC2\"></xref> to use.","nodes":[{"pos":[0,104],"content":"The name of the specific implementation of <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RC2\"&gt;&lt;/xref&gt;</ph> to use.","source":"The name of the specific implementation of <xref href=\"System.Security.Cryptography.RC2\"></xref> to use."}],"pos":[11750,11855],"yaml":true},{"content":"An instance of a cryptographic object.","nodes":[{"pos":[0,38],"content":"An instance of a cryptographic object.","nodes":[{"content":"An instance of a cryptographic object.","pos":[0,38]}]}],"pos":[11931,11970],"yaml":true},{"content":"The algorithm described by the <code>algName</code> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.","nodes":[{"pos":[0,165],"content":"The algorithm described by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">algName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.","source":"The algorithm described by the <code>algName</code> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible."}],"pos":[12169,12335],"yaml":true},{"content":"Gets or sets the effective size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm in bits.","nodes":[{"pos":[0,134],"content":"Gets or sets the effective size of the secret key used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RC2\"&gt;&lt;/xref&gt;</ph> algorithm in bits.","source":"Gets or sets the effective size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm in bits."}],"pos":[13521,13656],"yaml":true},{"content":"The effective key size used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm.","nodes":[{"pos":[0,99],"content":"The effective key size used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RC2\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"The effective key size used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm."}],"pos":[13785,13885],"yaml":true},{"content":"The effective key size is invalid.","nodes":[{"pos":[0,34],"content":"The effective key size is invalid.","nodes":[{"content":"The effective key size is invalid.","pos":[0,34]}]}],"pos":[14110,14145],"yaml":true},{"content":"Represents the effective size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm in bits.","nodes":[{"pos":[0,132],"content":"Represents the effective size of the secret key used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RC2\"&gt;&lt;/xref&gt;</ph> algorithm in bits.","source":"Represents the effective size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm in bits."}],"pos":[15358,15491],"yaml":true},{"content":"This field is accessed through the <xref:System.Security.Cryptography.RC2.EffectiveKeySize%2A> property.","nodes":[{"pos":[0,104],"content":"This field is accessed through the <xref:System.Security.Cryptography.RC2.EffectiveKeySize%2A> property.","nodes":[{"content":"This field is accessed through the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.RC2.EffectiveKeySize%2A&gt;</ph> property.","pos":[0,104],"source":"This field is accessed through the <xref:System.Security.Cryptography.RC2.EffectiveKeySize%2A> property."}]}],"pos":[15502,15607],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm in bits.","nodes":[{"pos":[0,124],"content":"Gets or sets the size of the secret key used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RC2\"&gt;&lt;/xref&gt;</ph> algorithm in bits.","source":"Gets or sets the size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm in bits."}],"pos":[16875,17000],"yaml":true},{"content":"This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the RC2CryptoServiceProvider implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits.","nodes":[{"pos":[0,210],"content":"This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the RC2CryptoServiceProvider implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits.","nodes":[{"content":"This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the RC2CryptoServiceProvider implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits.","pos":[0,210]}]}],"pos":[17011,17222],"yaml":true,"extradata":"MT"},{"content":"The size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm.","nodes":[{"pos":[0,103],"content":"The size of the secret key used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.RC2\"&gt;&lt;/xref&gt;</ph> algorithm.","source":"The size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm."}],"pos":[17343,17447],"yaml":true},{"content":"The value for the RC2 key size is less than the effective key size value.","nodes":[{"pos":[0,73],"content":"The value for the RC2 key size is less than the effective key size value.","nodes":[{"content":"The value for the RC2 key size is less than the effective key size value.","pos":[0,73]}]}],"pos":[17663,17737],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.RC2\n  commentId: T:System.Security.Cryptography.RC2\n  id: RC2\n  children:\n  - System.Security.Cryptography.RC2.#ctor\n  - System.Security.Cryptography.RC2.Create\n  - System.Security.Cryptography.RC2.Create(System.String)\n  - System.Security.Cryptography.RC2.EffectiveKeySize\n  - System.Security.Cryptography.RC2.EffectiveKeySizeValue\n  - System.Security.Cryptography.RC2.KeySize\n  langs:\n  - csharp\n  name: RC2\n  nameWithType: RC2\n  fullName: System.Security.Cryptography.RC2\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Represents the base class from which all implementations of the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm must derive.\n  remarks: >-\n    > [!NOTE]\n\n    >  A newer symmetric encryption algorithm, Advanced Encryption Standard (AES), is available. Consider using the <xref:System.Security.Cryptography.Aes> algorithm and its derived classes instead of the <xref:System.Security.Cryptography.RC2> class. Use <xref:System.Security.Cryptography.RC2> only for compatibility with legacy applications and data.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class RC2 : System.Security.Cryptography.SymmetricAlgorithm\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.SymmetricAlgorithm\n  derivedClasses:\n  - System.Security.Cryptography.RC2CryptoServiceProvider\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Clear\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  - System.Security.Cryptography.SymmetricAlgorithm.IV\n  - System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Key\n  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Mode\n  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  - System.Security.Cryptography.SymmetricAlgorithm.Padding\n  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RC2.#ctor\n  commentId: M:System.Security.Cryptography.RC2.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RC2\n  langs:\n  - csharp\n  name: RC2()\n  nameWithType: RC2.RC2()\n  fullName: RC2.RC2()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of <xref href=\"System.Security.Cryptography.RC2\"></xref>.\n  remarks: \"You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.  \\n  \\n This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the <xref:System.Security.Cryptography.RC2CryptoServiceProvider> implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits.  \\n  \\n This method initializes the protected fields of <xref:System.Security.Cryptography.SymmetricAlgorithm> to the default values listed in the following table.  \\n  \\n|Field|Default Value|  \\n|-----------|-------------------|  \\n|<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|128|  \\n|<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|64|  \\n|<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|\"\n  syntax:\n    content: protected RC2 ();\n    parameters: []\n  overload: System.Security.Cryptography.RC2.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RC2.Create\n  commentId: M:System.Security.Cryptography.RC2.Create\n  id: Create\n  parent: System.Security.Cryptography.RC2\n  langs:\n  - csharp\n  name: Create()\n  nameWithType: RC2.Create()\n  fullName: RC2.Create()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of a cryptographic object to perform the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm.\n  remarks: Use this method to create an instance of the RC2 class that you can use to encrypt and decrypt data.\n  example:\n  - \"The following example shows how to create and use an RC2 object to encrypt and decrypt data in a file.  \\n  \\n [!code-cpp[Cryptography.RC2.Create.File#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RC2.Create.File/CPP/fileexample.cpp#1)]\\n [!code-csharp[Cryptography.RC2.Create.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RC2.Create.File/CS/fileexample.cs#1)]\\n [!code-vb[Cryptography.RC2.Create.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RC2.Create.File/VB/fileexample.vb#1)]  \\n  \\n The following example shows how to create and use an RC2 object to encrypt and decrypt data in memory.  \\n  \\n [!code-cpp[Cryptography.RC2.Create.Memory#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RC2.Create.Memory/CPP/memoryexample.cpp#1)]\\n [!code-csharp[Cryptography.RC2.Create.Memory#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RC2.Create.Memory/CS/memoryexample.cs#1)]\\n [!code-vb[Cryptography.RC2.Create.Memory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RC2.Create.Memory/VB/memoryexample.vb#1)]\"\n  syntax:\n    content: public static System.Security.Cryptography.RC2 Create ();\n    parameters: []\n    return:\n      type: System.Security.Cryptography.RC2\n      description: An instance of a cryptographic object.\n  overload: System.Security.Cryptography.RC2.Create*\n  exceptions:\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RC2.Create(System.String)\n  commentId: M:System.Security.Cryptography.RC2.Create(System.String)\n  id: Create(System.String)\n  parent: System.Security.Cryptography.RC2\n  langs:\n  - csharp\n  name: Create(String)\n  nameWithType: RC2.Create(String)\n  fullName: RC2.Create(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Creates an instance of a cryptographic object to perform the specified implementation of the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm.\n  remarks: Use this method to create an instance of the RC2 class that you can use to encrypt and decrypt data.\n  example:\n  - \"The following example shows how to create and use an RC2 object to encrypt and decrypt data in a file.  \\n  \\n [!code-cpp[Cryptography.RC2.Createstring.File#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RC2.Createstring.File/CPP/fileexample.cpp#1)]\\n [!code-csharp[Cryptography.RC2.Createstring.File#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RC2.Createstring.File/CS/fileexample.cs#1)]\\n [!code-vb[Cryptography.RC2.Createstring.File#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RC2.Createstring.File/VB/fileexample.vb#1)]  \\n  \\n The following example shows how to create and use an RC2 object to encrypt and decrypt data in memory.  \\n  \\n [!code-cpp[Cryptography.RC2.Createstring.Memory#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.RC2.Createstring.Memory/CPP/memoryexample.cpp#1)]\\n [!code-csharp[Cryptography.RC2.Createstring.Memory#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.RC2.Createstring.Memory/CS/memoryexample.cs#1)]\\n [!code-vb[Cryptography.RC2.Createstring.Memory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.RC2.Createstring.Memory/VB/memoryexample.vb#1)]\"\n  syntax:\n    content: public static System.Security.Cryptography.RC2 Create (string AlgName);\n    parameters:\n    - id: AlgName\n      type: System.String\n      description: The name of the specific implementation of <xref href=\"System.Security.Cryptography.RC2\"></xref> to use.\n    return:\n      type: System.Security.Cryptography.RC2\n      description: An instance of a cryptographic object.\n  overload: System.Security.Cryptography.RC2.Create*\n  exceptions:\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: The algorithm described by the <code>algName</code> parameter was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RC2.EffectiveKeySize\n  commentId: P:System.Security.Cryptography.RC2.EffectiveKeySize\n  id: EffectiveKeySize\n  parent: System.Security.Cryptography.RC2\n  langs:\n  - csharp\n  name: EffectiveKeySize\n  nameWithType: RC2.EffectiveKeySize\n  fullName: RC2.EffectiveKeySize\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the effective size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm in bits.\n  syntax:\n    content: public virtual int EffectiveKeySize { get; set; }\n    return:\n      type: System.Int32\n      description: The effective key size used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm.\n  overload: System.Security.Cryptography.RC2.EffectiveKeySize*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The effective key size is invalid.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RC2.EffectiveKeySizeValue\n  commentId: F:System.Security.Cryptography.RC2.EffectiveKeySizeValue\n  id: EffectiveKeySizeValue\n  parent: System.Security.Cryptography.RC2\n  langs:\n  - csharp\n  name: EffectiveKeySizeValue\n  nameWithType: RC2.EffectiveKeySizeValue\n  fullName: RC2.EffectiveKeySizeValue\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Represents the effective size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm in bits.\n  remarks: This field is accessed through the <xref:System.Security.Cryptography.RC2.EffectiveKeySize%2A> property.\n  syntax:\n    content: protected int EffectiveKeySizeValue;\n    return:\n      type: System.Int32\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.RC2.KeySize\n  commentId: P:System.Security.Cryptography.RC2.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.RC2\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: RC2.KeySize\n  fullName: RC2.KeySize\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: Gets or sets the size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm in bits.\n  remarks: This algorithm supports key lengths from 40 bits to 1024 bits in increments of 8 bits, but the RC2CryptoServiceProvider implementation only supports key lengths from 40 bits to 128 bits in increments of 8 bits.\n  syntax:\n    content: public override int KeySize { get; set; }\n    return:\n      type: System.Int32\n      description: The size of the secret key used by the <xref href=\"System.Security.Cryptography.RC2\"></xref> algorithm.\n  overload: System.Security.Cryptography.RC2.KeySize*\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The value for the RC2 key size is less than the effective key size value.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n- uid: System.Reflection.TargetInvocationException\n  parent: System.Reflection\n  isExternal: false\n  name: TargetInvocationException\n  nameWithType: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.Security.Cryptography.RC2.#ctor\n  parent: System.Security.Cryptography.RC2\n  isExternal: false\n  name: RC2()\n  nameWithType: RC2.RC2()\n  fullName: RC2.RC2()\n- uid: System.Security.Cryptography.RC2.Create\n  parent: System.Security.Cryptography.RC2\n  isExternal: false\n  name: Create()\n  nameWithType: RC2.Create()\n  fullName: RC2.Create()\n- uid: System.Security.Cryptography.RC2\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RC2\n  nameWithType: RC2\n  fullName: System.Security.Cryptography.RC2\n- uid: System.Security.Cryptography.RC2.Create(System.String)\n  parent: System.Security.Cryptography.RC2\n  isExternal: false\n  name: Create(String)\n  nameWithType: RC2.Create(String)\n  fullName: RC2.Create(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.RC2.EffectiveKeySize\n  parent: System.Security.Cryptography.RC2\n  isExternal: false\n  name: EffectiveKeySize\n  nameWithType: RC2.EffectiveKeySize\n  fullName: RC2.EffectiveKeySize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.RC2.EffectiveKeySizeValue\n  parent: System.Security.Cryptography.RC2\n  isExternal: false\n  name: EffectiveKeySizeValue\n  nameWithType: RC2.EffectiveKeySizeValue\n  fullName: RC2.EffectiveKeySizeValue\n- uid: System.Security.Cryptography.RC2.KeySize\n  parent: System.Security.Cryptography.RC2\n  isExternal: false\n  name: KeySize\n  nameWithType: RC2.KeySize\n  fullName: RC2.KeySize\n- uid: System.Security.Cryptography.RC2.#ctor*\n  parent: System.Security.Cryptography.RC2\n  isExternal: false\n  name: RC2\n  nameWithType: RC2.RC2\n  fullName: RC2.RC2\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n- uid: System.Security.Cryptography.RC2.Create*\n  parent: System.Security.Cryptography.RC2\n  isExternal: false\n  name: Create\n  nameWithType: RC2.Create\n  fullName: RC2.Create\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n- uid: System.Security.Cryptography.RC2.EffectiveKeySize*\n  parent: System.Security.Cryptography.RC2\n  isExternal: false\n  name: EffectiveKeySize\n  nameWithType: RC2.EffectiveKeySize\n  fullName: RC2.EffectiveKeySize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n- uid: System.Security.Cryptography.RC2.KeySize*\n  parent: System.Security.Cryptography.RC2\n  isExternal: false\n  name: KeySize\n  nameWithType: RC2.KeySize\n  fullName: RC2.KeySize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/RC2.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSize\n  nameWithType: SymmetricAlgorithm.BlockSize\n  fullName: SymmetricAlgorithm.BlockSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: BlockSizeValue\n  nameWithType: SymmetricAlgorithm.BlockSizeValue\n  fullName: SymmetricAlgorithm.BlockSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Clear()\n  nameWithType: SymmetricAlgorithm.Clear()\n  fullName: SymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor()\n  nameWithType: SymmetricAlgorithm.CreateDecryptor()\n  fullName: SymmetricAlgorithm.CreateDecryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateDecryptor(Byte[], Byte[])\n  nameWithType: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n  fullName: SymmetricAlgorithm.CreateDecryptor(Byte[], Byte[])\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor()\n  nameWithType: SymmetricAlgorithm.CreateEncryptor()\n  fullName: SymmetricAlgorithm.CreateEncryptor()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: CreateEncryptor(Byte[], Byte[])\n  nameWithType: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n  fullName: SymmetricAlgorithm.CreateEncryptor(Byte[], Byte[])\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose()\n  nameWithType: SymmetricAlgorithm.Dispose()\n  fullName: SymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SymmetricAlgorithm.Dispose(Boolean)\n  fullName: SymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSize\n  nameWithType: SymmetricAlgorithm.FeedbackSize\n  fullName: SymmetricAlgorithm.FeedbackSize\n- uid: System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: FeedbackSizeValue\n  nameWithType: SymmetricAlgorithm.FeedbackSizeValue\n  fullName: SymmetricAlgorithm.FeedbackSizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateIV()\n  nameWithType: SymmetricAlgorithm.GenerateIV()\n  fullName: SymmetricAlgorithm.GenerateIV()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: GenerateKey()\n  nameWithType: SymmetricAlgorithm.GenerateKey()\n  fullName: SymmetricAlgorithm.GenerateKey()\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IV\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IV\n  nameWithType: SymmetricAlgorithm.IV\n  fullName: SymmetricAlgorithm.IV\n- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: IVValue\n  nameWithType: SymmetricAlgorithm.IVValue\n  fullName: SymmetricAlgorithm.IVValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Key\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Key\n  nameWithType: SymmetricAlgorithm.Key\n  fullName: SymmetricAlgorithm.Key\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeySizeValue\n  nameWithType: SymmetricAlgorithm.KeySizeValue\n  fullName: SymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: KeyValue\n  nameWithType: SymmetricAlgorithm.KeyValue\n  fullName: SymmetricAlgorithm.KeyValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalBlockSizes\n  nameWithType: SymmetricAlgorithm.LegalBlockSizes\n  fullName: SymmetricAlgorithm.LegalBlockSizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalBlockSizesValue\n  nameWithType: SymmetricAlgorithm.LegalBlockSizesValue\n  fullName: SymmetricAlgorithm.LegalBlockSizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizes\n  nameWithType: SymmetricAlgorithm.LegalKeySizes\n  fullName: SymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: LegalKeySizesValue\n  nameWithType: SymmetricAlgorithm.LegalKeySizesValue\n  fullName: SymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Mode\n  nameWithType: SymmetricAlgorithm.Mode\n  fullName: SymmetricAlgorithm.Mode\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ModeValue\n  nameWithType: SymmetricAlgorithm.ModeValue\n  fullName: SymmetricAlgorithm.ModeValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: Padding\n  nameWithType: SymmetricAlgorithm.Padding\n  fullName: SymmetricAlgorithm.Padding\n- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: PaddingValue\n  nameWithType: SymmetricAlgorithm.PaddingValue\n  fullName: SymmetricAlgorithm.PaddingValue\n- uid: System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)\n  parent: System.Security.Cryptography.SymmetricAlgorithm\n  isExternal: false\n  name: ValidKeySize(Int32)\n  nameWithType: SymmetricAlgorithm.ValidKeySize(Int32)\n  fullName: SymmetricAlgorithm.ValidKeySize(Int32)\n"}