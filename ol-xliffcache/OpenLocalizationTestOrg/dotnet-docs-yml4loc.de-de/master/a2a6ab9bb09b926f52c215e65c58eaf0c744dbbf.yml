### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.UnmanagedMarshal
  commentId: T:System.Reflection.Emit.UnmanagedMarshal
  id: UnmanagedMarshal
  children:
  - System.Reflection.Emit.UnmanagedMarshal.BaseType
  - System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)
  - System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)
  - System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  - System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  - System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  - System.Reflection.Emit.UnmanagedMarshal.ElementCount
  - System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  - System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  langs:
  - csharp
  name: UnmanagedMarshal
  nameWithType: UnmanagedMarshal
  fullName: System.Reflection.Emit.UnmanagedMarshal
  type: Class
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Represents the class that describes how to marshal a field from managed to unmanaged code. This class cannot be inherited.
  remarks: "The code example shows the workaround for this obsolete type.  \n  \n Marshaling is the process of packaging and unpackaging parameters so remote procedure calls can occur. During marshaling, a field might undergo a format conversion when the format of the managed type is different from the format of the corresponding unmanaged type. For example, you might want to marshal a `String` type as an unmanaged BSTR. Some format conversions are handled automatically by the runtime. To override the default behavior, you must use the `UnmanagedMarshal` class to define the format conversion."
  example:
  - "The following code example shows replacement code for the obsolete <xref:System.Reflection.Emit.UnmanagedMarshal> type. The example emits a single-module assembly named `EmitMarshalAs.dll`, containing a type named `Sample`. The type has a method named `Test`, with one parameter of type <xref:System.String>. The code example applies the <xref:System.Runtime.InteropServices.MarshalAsAttribute> with <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> to the parameter.  \n  \n You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the emitted assembly and observe that the parameter is marked `marshal(bstr)`.  \n  \n [!code-cpp[UnmanagedMarshalObsolete#1](~/samples/snippets/cpp/VS_Snippets_CLR/UnmanagedMarshalObsolete/cpp/source.cpp#1)]\n [!code-csharp[UnmanagedMarshalObsolete#1](~/samples/snippets/csharp/VS_Snippets_CLR/UnmanagedMarshalObsolete/cs/source.cs#1)]\n [!code-vb[UnmanagedMarshalObsolete#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/UnmanagedMarshalObsolete/vb/source.vb#1)]"
  syntax:
    content: >-
      [System.Obsolete("An alternate API is available: Emit the MarshalAs custom attribute instead.")]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class UnmanagedMarshal
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.ObsoleteAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType
  commentId: P:System.Reflection.Emit.UnmanagedMarshal.BaseType
  id: BaseType
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: BaseType
  nameWithType: UnmanagedMarshal.BaseType
  fullName: UnmanagedMarshal.BaseType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets an unmanaged base type. This property is read-only.
  syntax:
    content: public System.Runtime.InteropServices.UnmanagedType BaseType { get; }
    return:
      type: System.Runtime.InteropServices.UnmanagedType
      description: An `UnmanagedType` object.
  overload: System.Reflection.Emit.UnmanagedMarshal.BaseType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The unmanaged type is not an `LPArray` or a `SafeArray`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)
  commentId: M:System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)
  id: DefineByValArray(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineByValArray(Int32)
  nameWithType: UnmanagedMarshal.DefineByValArray(Int32)
  fullName: UnmanagedMarshal.DefineByValArray(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Specifies a fixed-length array (ByValArray) to marshal to unmanaged code.
  remarks: "The `DefineByValArray` method is not a simple native marshal.  \n  \n Only unmanaged marshal constructs can be made using these static constructors.  \n  \n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly."
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineByValArray (int elemCount);
    parameters:
    - id: elemCount
      type: System.Int32
      description: The number of elements in the fixed-length array.
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: An <xref href="System.Reflection.Emit.UnmanagedMarshal"></xref> object.
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The argument is not a simple native type.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)
  commentId: M:System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)
  id: DefineByValTStr(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineByValTStr(Int32)
  nameWithType: UnmanagedMarshal.DefineByValTStr(Int32)
  fullName: UnmanagedMarshal.DefineByValTStr(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Specifies a string in a fixed array buffer (ByValTStr) to marshal to unmanaged code.
  remarks: "The `DefineByValStr` method is not a simple native marshal.  \n  \n Only unmanaged marshal constructs can be made using these static constructors.  \n  \n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly."
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineByValTStr (int elemCount);
    parameters:
    - id: elemCount
      type: System.Int32
      description: The number of elements in the fixed array buffer.
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: An <xref href="System.Reflection.Emit.UnmanagedMarshal"></xref> object.
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The argument is not a simple native type.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  commentId: M:System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  id: DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineLPArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineLPArray(UnmanagedType)
  fullName: UnmanagedMarshal.DefineLPArray(UnmanagedType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Specifies an `LPArray` to marshal to unmanaged code. The length of an `LPArray` is determined at runtime by the size of the actual marshaled array.
  remarks: "The `DefineLPArray` method is not a simple native marshal.  \n  \n Only unmanaged marshal constructs can be made using these static constructors.  \n  \n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly."
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineLPArray (System.Runtime.InteropServices.UnmanagedType elemType);
    parameters:
    - id: elemType
      type: System.Runtime.InteropServices.UnmanagedType
      description: The unmanaged type to which to marshal the array.
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: An <xref href="System.Reflection.Emit.UnmanagedMarshal"></xref> object.
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The argument is not a simple native type.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  commentId: M:System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  id: DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineSafeArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineSafeArray(UnmanagedType)
  fullName: UnmanagedMarshal.DefineSafeArray(UnmanagedType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Specifies a `SafeArray` to marshal to unmanaged code.
  remarks: "The `DefineSafeArray` method is not a simple native marshal.  \n  \n Only unmanaged marshal constructs can be made using these static constructors.  \n  \n Marshaling an array is a more complex process than marshaling an integer parameter. Array members are copied in a specific order so that the other side can reconstruct the array exactly."
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineSafeArray (System.Runtime.InteropServices.UnmanagedType elemType);
    parameters:
    - id: elemType
      type: System.Runtime.InteropServices.UnmanagedType
      description: The base type or the `UnmanagedType` of each element of the array.
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: An <xref href="System.Reflection.Emit.UnmanagedMarshal"></xref> object.
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The argument is not a simple native type.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  commentId: M:System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  id: DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: DefineUnmanagedMarshal(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
  fullName: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Specifies a given type that is to be marshaled to unmanaged code.
  remarks: "The <xref:System.Runtime.InteropServices.UnmanagedType> passed to this method must be a simple native type. None of the following values may be used: <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>, or <xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>.  \n  \n Only unmanaged marshal constructs can be made using this method."
  syntax:
    content: public static System.Reflection.Emit.UnmanagedMarshal DefineUnmanagedMarshal (System.Runtime.InteropServices.UnmanagedType unmanagedType);
    parameters:
    - id: unmanagedType
      type: System.Runtime.InteropServices.UnmanagedType
      description: The unmanaged type to which the type is to be marshaled.
    return:
      type: System.Reflection.Emit.UnmanagedMarshal
      description: An <xref href="System.Reflection.Emit.UnmanagedMarshal"></xref> object.
  overload: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The argument is not a simple native type.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount
  commentId: P:System.Reflection.Emit.UnmanagedMarshal.ElementCount
  id: ElementCount
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: ElementCount
  nameWithType: UnmanagedMarshal.ElementCount
  fullName: UnmanagedMarshal.ElementCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a number element. This property is read-only.
  remarks: There is an `ElementCount` only if there is a `NativeTypeFixedArray`.
  syntax:
    content: public int ElementCount { get; }
    return:
      type: System.Int32
      description: An integer indicating the element count.
  overload: System.Reflection.Emit.UnmanagedMarshal.ElementCount*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The argument is not an unmanaged element count.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  commentId: P:System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  id: GetUnmanagedType
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: GetUnmanagedType
  nameWithType: UnmanagedMarshal.GetUnmanagedType
  fullName: UnmanagedMarshal.GetUnmanagedType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Indicates an unmanaged type. This property is read-only.
  remarks: The `GetUnmanagedType` property is an accessor function for the native type.
  syntax:
    content: public System.Runtime.InteropServices.UnmanagedType GetUnmanagedType { get; }
    return:
      type: System.Runtime.InteropServices.UnmanagedType
      description: An <xref href="System.Runtime.InteropServices.UnmanagedType"></xref> object.
  overload: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  commentId: P:System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  id: IIDGuid
  parent: System.Reflection.Emit.UnmanagedMarshal
  langs:
  - csharp
  name: IIDGuid
  nameWithType: UnmanagedMarshal.IIDGuid
  fullName: UnmanagedMarshal.IIDGuid
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: Gets a GUID. This property is read-only.
  remarks: This property always returns Guid.Empty. This property might be removed in a future release.
  syntax:
    content: public Guid IIDGuid { get; }
    return:
      type: System.Guid
      description: A <xref href="System.Guid"></xref> object.
  overload: System.Reflection.Emit.UnmanagedMarshal.IIDGuid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The argument is not a custom marshaler.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: BaseType
  nameWithType: UnmanagedMarshal.BaseType
  fullName: UnmanagedMarshal.BaseType
- uid: System.Runtime.InteropServices.UnmanagedType
  parent: System.Runtime.InteropServices
  isExternal: false
  name: UnmanagedType
  nameWithType: UnmanagedType
  fullName: System.Runtime.InteropServices.UnmanagedType
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValArray(Int32)
  nameWithType: UnmanagedMarshal.DefineByValArray(Int32)
  fullName: UnmanagedMarshal.DefineByValArray(Int32)
- uid: System.Reflection.Emit.UnmanagedMarshal
  parent: System.Reflection.Emit
  isExternal: false
  name: UnmanagedMarshal
  nameWithType: UnmanagedMarshal
  fullName: System.Reflection.Emit.UnmanagedMarshal
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(System.Int32)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValTStr(Int32)
  nameWithType: UnmanagedMarshal.DefineByValTStr(Int32)
  fullName: UnmanagedMarshal.DefineByValTStr(Int32)
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineLPArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineLPArray(UnmanagedType)
  fullName: UnmanagedMarshal.DefineLPArray(UnmanagedType)
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineSafeArray(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineSafeArray(UnmanagedType)
  fullName: UnmanagedMarshal.DefineSafeArray(UnmanagedType)
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType)
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineUnmanagedMarshal(UnmanagedType)
  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
  fullName: UnmanagedMarshal.DefineUnmanagedMarshal(UnmanagedType)
- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: ElementCount
  nameWithType: UnmanagedMarshal.ElementCount
  fullName: UnmanagedMarshal.ElementCount
- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: GetUnmanagedType
  nameWithType: UnmanagedMarshal.GetUnmanagedType
  fullName: UnmanagedMarshal.GetUnmanagedType
- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: IIDGuid
  nameWithType: UnmanagedMarshal.IIDGuid
  fullName: UnmanagedMarshal.IIDGuid
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Reflection.Emit.UnmanagedMarshal.BaseType*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: BaseType
  nameWithType: UnmanagedMarshal.BaseType
  fullName: UnmanagedMarshal.BaseType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValArray*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValArray
  nameWithType: UnmanagedMarshal.DefineByValArray
  fullName: UnmanagedMarshal.DefineByValArray
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineByValTStr
  nameWithType: UnmanagedMarshal.DefineByValTStr
  fullName: UnmanagedMarshal.DefineByValTStr
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineLPArray*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineLPArray
  nameWithType: UnmanagedMarshal.DefineLPArray
  fullName: UnmanagedMarshal.DefineLPArray
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineSafeArray
  nameWithType: UnmanagedMarshal.DefineSafeArray
  fullName: UnmanagedMarshal.DefineSafeArray
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
- uid: System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: DefineUnmanagedMarshal
  nameWithType: UnmanagedMarshal.DefineUnmanagedMarshal
  fullName: UnmanagedMarshal.DefineUnmanagedMarshal
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
- uid: System.Reflection.Emit.UnmanagedMarshal.ElementCount*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: ElementCount
  nameWithType: UnmanagedMarshal.ElementCount
  fullName: UnmanagedMarshal.ElementCount
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
- uid: System.Reflection.Emit.UnmanagedMarshal.GetUnmanagedType*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: GetUnmanagedType
  nameWithType: UnmanagedMarshal.GetUnmanagedType
  fullName: UnmanagedMarshal.GetUnmanagedType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
- uid: System.Reflection.Emit.UnmanagedMarshal.IIDGuid*
  parent: System.Reflection.Emit.UnmanagedMarshal
  isExternal: false
  name: IIDGuid
  nameWithType: UnmanagedMarshal.IIDGuid
  fullName: UnmanagedMarshal.IIDGuid
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/UnmanagedMarshal.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
