<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4e0bdd6c9e01e303877c352e194dd334af256f7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Media.Visual.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">06475232f0d6081acee856a3525d583006da8f83</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">87ce132c3681ac8e93d6ed60800bad504845c910</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides rendering support in WPF, which includes hit testing, coordinate transformation, and bounding box calculations.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> class is the basic abstraction from which every <ph id="ph2">&lt;xref:System.Windows.FrameworkElement&gt;</ph> object derives.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It also serves as the entry point for writing new controls in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>, and in many ways can be thought of as an equivalent of a window handle (HWND) in the <ph id="ph2">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> application model.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> object is a core <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> object, whose primary role is to provide rendering support.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>User interface controls, such as <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.TextBox&gt;</ph>, derive from the <ph id="ph3">&lt;xref:System.Windows.Media.Visual&gt;</ph> class, and use the <ph id="ph4">&lt;xref:System.Windows.Media.Visual&gt;</ph> defined properties for persisting their rendering data.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> object provides support for the following:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Output display: Rendering the persisted, serialized drawing content of a visual.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>Transformations: Performing transformations on a visual.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clipping: Providing clipping region support for a visual.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hit testing: Determining whether a specified coordinate (point) or geometry is contained within the bounds of a visual.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Bounding box calculations: Determining the bounding rectangle of a visual.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Architecturally, the <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> object does not include support for other application development requirements / <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> features that are not immediately related to its rendering, such as the following:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Event handling</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Layout</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Styles</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Data binding</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Globalization</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> is provided as a public abstract class from which further classes can be derived.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following illustration shows the hierarchy of the existing visual objects that are defined in the <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> architecture.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">![</bpt>Diagram of classes derived from the Visual object<ept id="p1">](~/add/media/visualclass01.png "Diagram of classes derived from the Visual object")</ept></source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Visual class hierarchy</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>In some cases, members that are defined as protected in <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> are exposed as more readily accessible members with similar names in the derived <ph id="ph2">&lt;xref:System.Windows.UIElement&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>WPF Graphics Rendering Overview<ept id="p1">](~/docs/framework/wpf/graphics-multimedia/wpf-graphics-rendering-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> has a limited number of levels.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>In previous versions of the .NET Framework, this maximum depth was 255.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>This limit is inadequate for some layouts that have many levels in the visual tree.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>In <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the maximum depth of a <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph> is 2047, which enables much deeper visual trees.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>In most applications, there is not enough stack space to traverse so many levels, and the result is a <ph id="ph1">&lt;xref:System.StackOverflowException&gt;</ph> during layout.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For the default stack size, this exception is usually thrown when the tree depth is approximately 800, which corresponds to about 190 nested <ph id="ph1">&lt;xref:System.Windows.Controls.TreeViewItem&gt;</ph> objects.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this exception is thrown by your application and you need to have a deeper visual tree, you can increase the application's stack size.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can increase the size of the stack by using the /STACK option at compile time or by using the EDITBIN utility.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>Increasing the stack size may affect your application's performance.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Stack Allocations<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=165510)</ept> and <bpt id="p2">[</bpt>EDITBIN Options<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=165511)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Provides the base initialization for objects derived from the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Defines the parent-child relationship between two visuals.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Visual.AddVisualChild%2A&gt;</ph> method sets up the parent-child relationship between two visual objects.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method must be used when you need greater low-level control over the underlying storage implementation of visual child objects.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.VisualCollection&gt;</ph> can be used as a default implementation for storing child objects.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The child visual object to add to parent visual.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Returns the common ancestor of two visual objects.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>2D and 3D objects can have common visual ancestors, so it is possible to pass a <ph id="ph1">&lt;xref:System.Windows.Media.Media3D.Visual3D&gt;</ph> for <ph id="ph2">`otherVisual`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A visual object of type <ph id="ph1">&lt;xref href="System.Windows.DependencyObject"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The common ancestor of the visual object and <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">otherVisual</ph><ept id="p1">&lt;/code&gt;</ept> if one exists; otherwise, <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns the specified <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> in the parent <ph id="ph2">&lt;xref href="System.Windows.Media.VisualCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, a <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> has no children.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the default implementation always throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The index of the visual object in the <ph id="ph1">&lt;xref href="System.Windows.Media.VisualCollection"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The child in the <ph id="ph1">&lt;xref href="System.Windows.Media.VisualCollection"&gt;&lt;/xref&gt;</ph> at the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">index</ph><ept id="p1">&lt;/code&gt;</ept> value.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Determines whether a geometry value is within the bounds of the visual object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override default hit testing support for a visual object by overriding the <ph id="ph1">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that when you invoke the <ph id="ph1">&lt;xref:System.Windows.Media.VisualTreeHelper.HitTest%2A&gt;</ph> method, your overridden implementation of <ph id="ph2">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your overridden method is called when a hit test falls within the bounding rectangle of the visual object, even if the coordinate falls outside the geometry of the visual object.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Media.GeometryHitTestParameters"&gt;&lt;/xref&gt;</ph> object that specifies the <ph id="ph2">&lt;xref href="System.Windows.Media.Geometry"&gt;&lt;/xref&gt;</ph> to hit test against.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Media.GeometryHitTestResult"&gt;&lt;/xref&gt;</ph> that represents the result of the hit test.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Determines whether a point coordinate value is within the bounds of the visual object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the default hit testing support on visual objects by overriding the <ph id="ph1">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that when you invoke the <ph id="ph1">&lt;xref:System.Windows.Media.VisualTreeHelper.HitTest%2A&gt;</ph> method, your overridden implementation of <ph id="ph2">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A&gt;</ph> is called.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Your overridden method is called when a hit test falls within the bounding rectangle of the visual object, even if the coordinate falls outside the geometry of the visual object.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Media.PointHitTestParameters"&gt;&lt;/xref&gt;</ph> object that specifies the <ph id="ph2">&lt;xref href="System.Windows.Point"&gt;&lt;/xref&gt;</ph> to hit test against.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Media.HitTestResult"&gt;&lt;/xref&gt;</ph> that represents the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> that is returned from a hit test.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Determines whether the visual object is an ancestor of the descendant visual object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;xref href="System.Windows.DependencyObject"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the visual object is an ancestor of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">descendant</ph><ept id="p1">&lt;/code&gt;</ept>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Determines whether the visual object is a descendant of the ancestor visual object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;xref href="System.Windows.DependencyObject"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the visual object is a descendant of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">ancestor</ph><ept id="p1">&lt;/code&gt;</ept>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Called when the DPI at which this View is rendered changes.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The previous DPI scale setting.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The new DPI scale setting.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Called when the <ph id="ph1">&lt;xref href="System.Windows.Media.VisualCollection"&gt;&lt;/xref&gt;</ph> of the visual object is modified.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> that was added to the collection</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> that was removed from the collection</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Called when the parent of the visual object is changed.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>A class that derives from <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> can choose to override this method.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no "VisualParentChanged" event provided that reports this change to instances.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, you must override this method to handle notification scenarios and provide an instance version of the notification if that is part of your scenario.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;xref href="System.Windows.DependencyObject"&gt;&lt;/xref&gt;</ph> that represents the previous parent of the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> object did not have a previous parent, the value of the parameter is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">&lt;xref href="System.Windows.Point"&gt;&lt;/xref&gt;</ph> in screen coordinates into a <ph id="ph2">&lt;xref href="System.Windows.Point"&gt;&lt;/xref&gt;</ph> that represents the current coordinate system of the <ph id="ph3">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Media.Visual.PointToScreen%2A&gt;</ph> method to convert a <ph id="ph2">&lt;xref:System.Windows.Point&gt;</ph> that represents the current coordinate system of the <ph id="ph3">&lt;xref:System.Windows.Media.Visual&gt;</ph> into a <ph id="ph4">&lt;xref:System.Windows.Point&gt;</ph> in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Point"&gt;&lt;/xref&gt;</ph> value in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The converted <ph id="ph1">&lt;xref href="System.Windows.Point"&gt;&lt;/xref&gt;</ph> value that represents the current coordinate system of the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">&lt;xref href="System.Windows.Point"&gt;&lt;/xref&gt;</ph> that represents the current coordinate system of the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> into a <ph id="ph3">&lt;xref href="System.Windows.Point"&gt;&lt;/xref&gt;</ph> in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Media.Visual.PointFromScreen%2A&gt;</ph> method to convert a <ph id="ph2">&lt;xref:System.Windows.Point&gt;</ph> in screen coordinates into a <ph id="ph3">&lt;xref:System.Windows.Point&gt;</ph> that represents the current coordinate system of the <ph id="ph4">&lt;xref:System.Windows.Media.Visual&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Point"&gt;&lt;/xref&gt;</ph> value that represents the current coordinate system of the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The converted <ph id="ph1">&lt;xref href="System.Windows.Point"&gt;&lt;/xref&gt;</ph> value in screen coordinates.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Removes the parent-child relationship between two visuals.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Visual.RemoveVisualChild%2A&gt;</ph> method removes the parent-child relationship between two visuals.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method, along with the <ph id="ph1">&lt;xref:System.Windows.Media.Visual.AddVisualChild%2A&gt;</ph> method, must be used when you need greater low-level control over the underlying storage implementation of visual child objects.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Media.VisualCollection&gt;</ph> can be used as a default implementation for storing child objects.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The child visual object to remove from the parent visual.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Returns a transform that can be used to transform coordinates from the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> to the specified <ph id="ph2">&lt;xref href="System.Windows.Media.Media3D.Visual3D"&gt;&lt;/xref&gt;</ph> ancestor of the visual object.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.Media3D.Visual3D"&gt;&lt;/xref&gt;</ph> to which the coordinates are transformed.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A transform that can be used to transform coordinates from the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> to the specified <ph id="ph2">&lt;xref href="System.Windows.Media.Media3D.Visual3D"&gt;&lt;/xref&gt;</ph> ancestor of the visual object.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Returns a transform that can be used to transform coordinates from the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> to the specified <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> ancestor of the visual object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, you can use the <ph id="ph1">&lt;xref:System.Windows.Media.VisualTreeHelper.GetOffset%2A?displayProperty=fullName&gt;</ph> method to retrieve the offset of a visual object relative to its parent.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The offset values are contained within the returned <ph id="ph1">&lt;xref:System.Windows.Vector&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>VisualSnippets#VisualSnippet2<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_Wpf/VisualSnippets/CSharp/Window1.xaml.cs#visualsnippet2)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>VisualSnippets#VisualSnippet2<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VisualSnippets/visualbasic/window1.xaml.vb#visualsnippet2)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> to which the coordinates are transformed.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;xref href="System.Windows.Media.GeneralTransform"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;ancestor&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;ancestor&lt;/code&gt;</ph> is not an ancestor of the visual.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The visual objects are not related.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Returns a transform that can be used to transform coordinates from the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> to the specified visual object descendant.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> to which the coordinates are transformed.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;xref href="System.Windows.Media.GeneralTransform"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;descendant&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The visual is not an ancestor of the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">descendant</ph><ept id="p1">&lt;/code&gt;</ept> visual.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The visual objects are not related.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Returns a transform that can be used to transform coordinates from the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> to the specified visual object.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Visual.TransformToAncestor%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Media.Visual.TransformToDescendant%2A&gt;</ph> methods can also be used to return a transform for a visual object.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> to which the coordinates are transformed.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A value of type <ph id="ph1">&lt;xref href="System.Windows.Media.GeneralTransform"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;visual&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The visual objects are not related.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Media.Effects.BitmapEffect"&gt;&lt;/xref&gt;</ph> value for the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The bitmap effect for this visual object.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Media.Effects.BitmapEffectInput"&gt;&lt;/xref&gt;</ph> value for the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The bitmap effect input value for this visual object.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Media.BitmapScalingMode"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.BitmapScalingMode"&gt;&lt;/xref&gt;</ph> value for the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Gets or sets a cached representation of the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Media.Visual.VisualCacheMode%2A&gt;</ph> property when you need to increase performance for content that is time-consuming to render.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Windows.Media.BitmapCache&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Media.CacheMode"&gt;&lt;/xref&gt;</ph> that holds a cached representation of the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Gets the number of child elements for the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, a <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> has no children.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the default implementation always returns 0.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The number of child elements.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Media.ClearTypeHint"&gt;&lt;/xref&gt;</ph> that determines how ClearType is rendered in the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Media.ClearTypeHint"&gt;&lt;/xref&gt;</ph> of the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Gets or sets the clip region of the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> as a <ph id="ph2">&lt;xref href="System.Windows.Media.Geometry"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The clip region value of the visual as a <ph id="ph1">&lt;xref href="System.Windows.Media.Geometry"&gt;&lt;/xref&gt;</ph> type.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Gets or sets the edge mode of the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> as an <ph id="ph2">&lt;xref href="System.Windows.Media.EdgeMode"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.EdgeMode"&gt;&lt;/xref&gt;</ph> value of the visual.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Gets or sets the bitmap effect to apply to the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Media.Effects.Effect"&gt;&lt;/xref&gt;</ph> that represents the bitmap effect.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Gets or sets the offset value of the visual object.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Vector"&gt;&lt;/xref&gt;</ph> that specifies the offset value.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Gets or sets the opacity of the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of the opacity of the <ph id="ph1">&lt;xref:System.Windows.Media.Visual&gt;</ph> is expressed as a value between 0 and 1.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of 0 indicates that the element is completely transparent, whereas a value of 1 indicates that the element is completely opaque.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>A value of 0.5 indicates that the element is 50 percent opaque.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Values that are less than 0 are treated as 0; values that are greater than 1 are treated as 1.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The opacity value of the visual.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Media.Brush"&gt;&lt;/xref&gt;</ph> value that represents the opacity mask of the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>The opacity mask is a <ph id="ph1">&lt;xref:System.Windows.Media.Brush&gt;</ph> that is applied to any alpha-channel masking for the rendered content of this visual.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Media.Brush"&gt;&lt;/xref&gt;</ph> that represents the opacity mask value of the visual.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Gets the visual tree parent of the visual object.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> parent.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Gets or sets a clipped scrollable area for the <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set the <ph id="ph1">&lt;xref:System.Windows.Media.Visual.VisualScrollableAreaClip%2A&gt;</ph> property to enable accelerated scrolling when rendering in software.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is useful in remote rendering scenarios, such as running over Remote Desktop or running in a virtual machine.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set this property on the parent element whose children will be scrolled.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Windows.Media.Visual.VisualScrollableAreaClip%2A&gt;</ph> property has no effect when rendering is hardware accelerated.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Visual.VisualScrollableAreaClip%2A&gt;</ph> property enables specific, advanced scenarios.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following list shows the caveats that apply when you use the <ph id="ph1">&lt;xref:System.Windows.Media.Visual.VisualScrollableAreaClip%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>The background of the scrolled area must be opaque, or scrolling artifacts will occur.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Visual.VisualScrollableAreaClip%2A&gt;</ph> property accelerates scrolling only when WPF is rendering in software.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, this situation occurs when the application is running over Remote Desktop or running locally in a virtual machine.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>The scrolling behavior is unchanged when rendering in hardware.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>To prevent differences in scrolling behavior, you should keep the <ph id="ph1">&lt;xref:System.Windows.Media.Visual.VisualScrollableAreaClip%2A&gt;</ph> property enabled for both hardware and software.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rotate and skew transforms disable accelerated scrolling.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scale transforms and horizontal or vertical translations above the scrolled region work correctly and do not disable scrolling acceleration.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>Changing the subtree or triggering parts of the scrollable area to redraw via animation behave as expected, but lose the benefit of accelerated scrolling for the redrawn area.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any animation that invalidates the scrolled area during the same frame in which scrolling occurs eliminates the benefit of this optimization.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Media.Visual.VisualScrollableAreaClip%2A&gt;</ph> rectangle snaps inward to pixels.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, the snapped size of the scrolling rectangle is always less than or equal to the size you have set.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>Offsets snap downward.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that the difference of the previous snapped offset and current snapped offset is always an integer number of pixels.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>Hit tests can be off by up to a pixel.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Layout rounding should be turned on, because it ensures that the edges of scrollable areas and the boundary window client area are snapped to pixel boundaries, resulting in correct alignment.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scrolling acceleration does not work on layered windows.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means windows in which AllowTransparency == true, window.windowstyle == none, and so on.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scrolling acceleration does not occur during full-window rendering.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scrolling acceleration does not work when the window straddles two monitors.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scrolling acceleration does not work in the presence of intermediate render targets in the parent chain of the scrolled element.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following list shows some of these intermediate render targets.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>Clips</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>Effects</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>DrawingBrushes</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>VisualBrushes</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>OpacityMasks</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>Opacity</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only one accelerated scroll can happen per frame.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>There can be multiple accelerated scroll areas, but only one of them can perform an accelerated scroll during a frame.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>Which area is scrolled is indeterminate.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>Scrolling acceleration supports content above the scrolling region (in z-order) that is not scrolled with the rest of the content.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>The system calculates all necessary dirty regions and completes the accelerated scroll, but it sends several additional bitmaps over the wire to move the unintentionally scrolled portion back to its correct position on screen.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Rect"&gt;&lt;/xref&gt;</ph> that represents the scrollable clipping area, or <ph id="ph2">`null`</ph> if no clipping area is assigned.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Media.TextHintingMode"&gt;&lt;/xref&gt;</ph> of the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.TextHintingMode"&gt;&lt;/xref&gt;</ph> applied to the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Media.TextRenderingMode"&gt;&lt;/xref&gt;</ph> of the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.TextRenderingMode"&gt;&lt;/xref&gt;</ph> applied to the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Gets or sets the <ph id="ph1">&lt;xref href="System.Windows.Media.Transform"&gt;&lt;/xref&gt;</ph> value for the <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The transform value of the visual.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Gets or sets the x-coordinate (vertical) guideline collection.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pixel snapping is the process in which content layout is fixed so that object edges are rendered on device-specific pixels.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> graphics system uses device-independent units to enable resolution and device independence.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each device independent pixel automatically scales with the system's <ph id="ph1">[!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]</ph> setting.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>This provides <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> applications proper scaling for different <ph id="ph2">[!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)]</ph> settings and makes the application automatically <ph id="ph3">[!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)]</ph>-aware.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this <ph id="ph1">[!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)]</ph> independence can create irregular edge rendering due to anti-aliasing.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>These artifacts, commonly seen as blurry or "soft" edges, can occur when the location of an edge falls in the middle of a device pixel rather than between device pixels.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>To address this issue, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> provides a way for object edges in a visual tree to "snap" to device pixels, eliminating the soft edges produced by anti-aliasing.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The x-coordinate guideline collection of the visual.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Gets or sets the y-coordinate (horizontal) guideline collection.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>Pixel snapping is the process in which content layout is fixed so that object edges are rendered on device-specific pixels.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> graphics system uses device-independent units to enable resolution and device independence.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each device independent pixel automatically scales with the system's <ph id="ph1">[!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]</ph> setting.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>This provides <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> applications proper scaling for different <ph id="ph2">[!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)]</ph> settings and makes the application automatically <ph id="ph3">[!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)]</ph>-aware.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, this <ph id="ph1">[!INCLUDE[TLA2#tla_dpi](~/includes/tla2sharptla-dpi-md.md)]</ph> independence can create irregular edge rendering due to anti-aliasing.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>These artifacts, commonly seen as blurry, or "soft" edges, can occur when the location of an edge falls in the middle of a device pixel rather than between device pixels.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>To address this issue, <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> provides a way for object edges in a visual tree to "snap" to device pixels, eliminating the soft edges produced by anti-aliasing.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The y-coordinate guideline collection of the visual.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>