{"nodes":[{"content":"Specifies the permitted use of the <xref href=\"System.Reflection\"></xref> and <xref href=\"System.Reflection.Emit\"></xref> namespaces.","nodes":[{"pos":[0,133],"content":"Specifies the permitted use of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit\"&gt;&lt;/xref&gt;</ph> namespaces.","source":"Specifies the permitted use of the <xref href=\"System.Reflection\"></xref> and <xref href=\"System.Reflection.Emit\"></xref> namespaces."}],"pos":[916,1050],"yaml":true},{"content":"This enumeration is used by the <xref:System.Security.Permissions.ReflectionPermission> and <xref:System.Security.Permissions.ReflectionPermissionAttribute> classes. If no <xref:System.Security.Permissions.ReflectionPermission> is granted, reflection is allowed on all types and members, but invocation operations are allowed only on visible types and members. For more information, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).  \n  \n> [!CAUTION]\n>  Because <xref:System.Security.Permissions.ReflectionPermission> can provide access to private class members, we recommend that you grant <xref:System.Security.Permissions.ReflectionPermission> to Internet code only with the RestrictedMemberAccess flag, and not with any other flags.  \n  \n The RestrictedMemberAccess flag is introduced in the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]. To use this flag, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \n  \n> [!IMPORTANT]\n>  AllFlags does not include the RestrictedMemberAccess flag. To get a mask that includes all flags in this enumeration, you must use the combination of AllFlags with RestrictedMemberAccess.  \n  \n Starting with the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], the ReflectionEmit flag is no longer required to emit code, unless debug symbols are emitted. To use this feature, your application should target the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] or later.  \n  \n Starting with the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], the TypeInformation flag is no longer required to reflect on nonpublic types and members; the flag has been marked obsolete.","nodes":[{"pos":[0,511],"content":"This enumeration is used by the <xref:System.Security.Permissions.ReflectionPermission> and <xref:System.Security.Permissions.ReflectionPermissionAttribute> classes. If no <xref:System.Security.Permissions.ReflectionPermission> is granted, reflection is allowed on all types and members, but invocation operations are allowed only on visible types and members. For more information, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).","nodes":[{"content":"This enumeration is used by the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermissionAttribute&gt;</ph> classes.","pos":[0,165],"source":"This enumeration is used by the <xref:System.Security.Permissions.ReflectionPermission> and <xref:System.Security.Permissions.ReflectionPermissionAttribute> classes."},{"content":"If no <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> is granted, reflection is allowed on all types and members, but invocation operations are allowed only on visible types and members.","pos":[166,360],"source":" If no <xref:System.Security.Permissions.ReflectionPermission> is granted, reflection is allowed on all types and members, but invocation operations are allowed only on visible types and members."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Security Considerations for Reflection<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)</ept>.","pos":[361,511],"source":" For more information, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)."}]},{"pos":[519,815],"content":"[!CAUTION]\n Because <xref:System.Security.Permissions.ReflectionPermission> can provide access to private class members, we recommend that you grant <xref:System.Security.Permissions.ReflectionPermission> to Internet code only with the RestrictedMemberAccess flag, and not with any other flags.","leadings":["","> "],"nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> can provide access to private class members, we recommend that you grant <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> to Internet code only with the RestrictedMemberAccess flag, and not with any other flags.","pos":[12,294],"source":" Because <xref:System.Security.Permissions.ReflectionPermission> can provide access to private class members, we recommend that you grant <xref:System.Security.Permissions.ReflectionPermission> to Internet code only with the RestrictedMemberAccess flag, and not with any other flags."}]},{"pos":[822,1058],"content":"The RestrictedMemberAccess flag is introduced in the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]. To use this flag, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"content":"The RestrictedMemberAccess flag is introduced in the <ph id=\"ph1\">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph>.","pos":[0,117],"source":"The RestrictedMemberAccess flag is introduced in the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]."},{"content":"To use this flag, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[118,236],"source":" To use this flag, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]},{"pos":[1066,1269],"content":"[!IMPORTANT]\n AllFlags does not include the RestrictedMemberAccess flag. To get a mask that includes all flags in this enumeration, you must use the combination of AllFlags with RestrictedMemberAccess.","leadings":["","> "],"nodes":[{"content":" AllFlags does not include the RestrictedMemberAccess flag. To get a mask that includes all flags in this enumeration, you must use the combination of AllFlags with RestrictedMemberAccess.","pos":[13,201],"nodes":[{"content":"AllFlags does not include the RestrictedMemberAccess flag.","pos":[1,59]},{"content":"To get a mask that includes all flags in this enumeration, you must use the combination of AllFlags with RestrictedMemberAccess.","pos":[60,188]}]}]},{"pos":[1276,1576],"content":"Starting with the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], the ReflectionEmit flag is no longer required to emit code, unless debug symbols are emitted. To use this feature, your application should target the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] or later.","nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph>, the ReflectionEmit flag is no longer required to emit code, unless debug symbols are emitted.","pos":[0,176],"source":"Starting with the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], the ReflectionEmit flag is no longer required to emit code, unless debug symbols are emitted."},{"content":"To use this feature, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> or later.","pos":[177,300],"source":" To use this feature, your application should target the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] or later."}]},{"pos":[1583,1778],"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, the TypeInformation flag is no longer required to reflect on nonpublic types and members; the flag has been marked obsolete.","source":"Starting with the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], the TypeInformation flag is no longer required to reflect on nonpublic types and members; the flag has been marked obsolete."}],"pos":[1061,2854],"yaml":true,"extradata":"MT"},{"content":"`TypeInformation` , `MemberAccess`, and `ReflectionEmit` are set. <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.AllFlags\"></xref> does not include <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\"></xref>.","nodes":[{"pos":[0,263],"content":"`TypeInformation` , `MemberAccess`, and `ReflectionEmit` are set. <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.AllFlags\"></xref> does not include <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">`TypeInformation`</ph> , <ph id=\"ph2\">`MemberAccess`</ph>, and <ph id=\"ph3\">`ReflectionEmit`</ph> are set.","pos":[0,65],"source":"`TypeInformation` , `MemberAccess`, and `ReflectionEmit` are set."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermissionFlag.AllFlags\"&gt;&lt;/xref&gt;</ph> does not include <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\"&gt;&lt;/xref&gt;</ph>.","pos":[66,263],"source":"<xref href=\"System.Security.Permissions.ReflectionPermissionFlag.AllFlags\"></xref> does not include <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\"></xref>."}]}],"pos":[5508,5774],"yaml":true},{"content":"Invocation operations on all members are allowed, regardless of grant set. If this flag is not set, invocation operations are allowed only on visible members.","nodes":[{"pos":[0,158],"content":"Invocation operations on all members are allowed, regardless of grant set. If this flag is not set, invocation operations are allowed only on visible members.","nodes":[{"content":"Invocation operations on all members are allowed, regardless of grant set. If this flag is not set, invocation operations are allowed only on visible members.","pos":[0,158],"nodes":[{"content":"Invocation operations on all members are allowed, regardless of grant set.","pos":[0,74]},{"content":"If this flag is not set, invocation operations are allowed only on visible members.","pos":[75,158]}]}]}],"pos":[7123,7282],"yaml":true},{"content":"Enumeration of types and members is allowed. Invocation operations are allowed on visible types and members.","nodes":[{"pos":[0,108],"content":"Enumeration of types and members is allowed. Invocation operations are allowed on visible types and members.","nodes":[{"content":"Enumeration of types and members is allowed. Invocation operations are allowed on visible types and members.","pos":[0,108],"nodes":[{"content":"Enumeration of types and members is allowed.","pos":[0,44]},{"content":"Invocation operations are allowed on visible types and members.","pos":[45,108]}]}]}],"pos":[8522,8631],"yaml":true},{"content":"Emitting debug symbols is allowed. Beginning with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this flag is no longer required to emit code.","nodes":[{"pos":[0,162],"content":"Emitting debug symbols is allowed. Beginning with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this flag is no longer required to emit code.","nodes":[{"content":"Emitting debug symbols is allowed.","pos":[0,34]},{"content":"Beginning with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this flag is no longer required to emit code.","pos":[35,162],"source":" Beginning with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this flag is no longer required to emit code."}]}],"pos":[9908,10071],"yaml":true},{"content":"Restricted member access is provided for partially trusted code. Partially trusted code can access nonpublic types and members, but only if the grant set of the partially trusted code includes all permissions in the grant set of the assembly that contains the nonpublic types and members being accessed. This flag is new in the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)].","nodes":[{"pos":[0,392],"content":"Restricted member access is provided for partially trusted code. Partially trusted code can access nonpublic types and members, but only if the grant set of the partially trusted code includes all permissions in the grant set of the assembly that contains the nonpublic types and members being accessed. This flag is new in the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)].","nodes":[{"content":"Restricted member access is provided for partially trusted code.","pos":[0,64]},{"content":"Partially trusted code can access nonpublic types and members, but only if the grant set of the partially trusted code includes all permissions in the grant set of the assembly that contains the nonpublic types and members being accessed.","pos":[65,303]},{"content":"This flag is new in the <ph id=\"ph1\">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph>.","pos":[304,392],"source":" This flag is new in the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]."}]}],"pos":[11486,11879],"yaml":true},{"content":"This flag is obsolete. No flags are necessary to enumerate types and members and to examine their metadata. Use <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.NoFlags\"></xref> instead.","nodes":[{"pos":[0,202],"content":"This flag is obsolete. No flags are necessary to enumerate types and members and to examine their metadata. Use <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.NoFlags\"></xref> instead.","nodes":[{"content":"This flag is obsolete.","pos":[0,22]},{"content":"No flags are necessary to enumerate types and members and to examine their metadata.","pos":[23,107]},{"content":"Use <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.ReflectionPermissionFlag.NoFlags\"&gt;&lt;/xref&gt;</ph> instead.","pos":[108,202],"source":" Use <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.NoFlags\"></xref> instead."}]}],"pos":[13319,13522],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.ReflectionPermissionFlag\n  commentId: T:System.Security.Permissions.ReflectionPermissionFlag\n  id: ReflectionPermissionFlag\n  children:\n  - System.Security.Permissions.ReflectionPermissionFlag.AllFlags\n  - System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\n  - System.Security.Permissions.ReflectionPermissionFlag.NoFlags\n  - System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\n  - System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\n  - System.Security.Permissions.ReflectionPermissionFlag.TypeInformation\n  langs:\n  - csharp\n  name: ReflectionPermissionFlag\n  nameWithType: ReflectionPermissionFlag\n  fullName: System.Security.Permissions.ReflectionPermissionFlag\n  type: Enum\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Specifies the permitted use of the <xref href=\"System.Reflection\"></xref> and <xref href=\"System.Reflection.Emit\"></xref> namespaces.\n  remarks: \"This enumeration is used by the <xref:System.Security.Permissions.ReflectionPermission> and <xref:System.Security.Permissions.ReflectionPermissionAttribute> classes. If no <xref:System.Security.Permissions.ReflectionPermission> is granted, reflection is allowed on all types and members, but invocation operations are allowed only on visible types and members. For more information, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).  \\n  \\n> [!CAUTION]\\n>  Because <xref:System.Security.Permissions.ReflectionPermission> can provide access to private class members, we recommend that you grant <xref:System.Security.Permissions.ReflectionPermission> to Internet code only with the RestrictedMemberAccess flag, and not with any other flags.  \\n  \\n The RestrictedMemberAccess flag is introduced in the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]. To use this flag, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.  \\n  \\n> [!IMPORTANT]\\n>  AllFlags does not include the RestrictedMemberAccess flag. To get a mask that includes all flags in this enumeration, you must use the combination of AllFlags with RestrictedMemberAccess.  \\n  \\n Starting with the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)], the ReflectionEmit flag is no longer required to emit code, unless debug symbols are emitted. To use this feature, your application should target the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] or later.  \\n  \\n Starting with the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], the TypeInformation flag is no longer required to reflect on nonpublic types and members; the flag has been marked obsolete.\"\n  example:\n  - \"The following example shows how to use the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> enumeration to initialize a new instance of the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> class that represents the right to perform restricted member access. This example is part of a larger example that is provided for the <xref:System.Security.Permissions.ReflectionPermissionFlag.AllFlags> class.  \\n  \\n For an example that shows how to use the RestrictedMemberAccess flag with Internet code, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).  \\n  \\n [!code-csharp[System.Security.Permissions.ReflectionPermission#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/CS/reflectionpermission.cs#8)]\\n [!code-vb[System.Security.Permissions.ReflectionPermission#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.ReflectionPermission/VB/reflectionpermission.vb#8)]\"\n  syntax:\n    content: >-\n      [System.Flags]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum ReflectionPermissionFlag\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.FlagsAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/ReflectionPermissionFlag.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.ReflectionPermissionFlag.AllFlags\n  commentId: F:System.Security.Permissions.ReflectionPermissionFlag.AllFlags\n  id: AllFlags\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  langs:\n  - csharp\n  name: AllFlags\n  nameWithType: ReflectionPermissionFlag.AllFlags\n  fullName: ReflectionPermissionFlag.AllFlags\n  type: Field\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: '`TypeInformation` , `MemberAccess`, and `ReflectionEmit` are set. <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.AllFlags\"></xref> does not include <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\"></xref>.'\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      AllFlags\n    return:\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/ReflectionPermissionFlag.xml\n- uid: System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\n  commentId: F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\n  id: MemberAccess\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  langs:\n  - csharp\n  name: MemberAccess\n  nameWithType: ReflectionPermissionFlag.MemberAccess\n  fullName: ReflectionPermissionFlag.MemberAccess\n  type: Field\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Invocation operations on all members are allowed, regardless of grant set. If this flag is not set, invocation operations are allowed only on visible members.\n  syntax:\n    content: MemberAccess\n    return:\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/ReflectionPermissionFlag.xml\n- uid: System.Security.Permissions.ReflectionPermissionFlag.NoFlags\n  commentId: F:System.Security.Permissions.ReflectionPermissionFlag.NoFlags\n  id: NoFlags\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  langs:\n  - csharp\n  name: NoFlags\n  nameWithType: ReflectionPermissionFlag.NoFlags\n  fullName: ReflectionPermissionFlag.NoFlags\n  type: Field\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Enumeration of types and members is allowed. Invocation operations are allowed on visible types and members.\n  syntax:\n    content: NoFlags\n    return:\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/ReflectionPermissionFlag.xml\n- uid: System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\n  commentId: F:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\n  id: ReflectionEmit\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  langs:\n  - csharp\n  name: ReflectionEmit\n  nameWithType: ReflectionPermissionFlag.ReflectionEmit\n  fullName: ReflectionPermissionFlag.ReflectionEmit\n  type: Field\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Emitting debug symbols is allowed. Beginning with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this flag is no longer required to emit code.\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      ReflectionEmit\n    return:\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/ReflectionPermissionFlag.xml\n- uid: System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\n  commentId: F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\n  id: RestrictedMemberAccess\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  langs:\n  - csharp\n  name: RestrictedMemberAccess\n  nameWithType: ReflectionPermissionFlag.RestrictedMemberAccess\n  fullName: ReflectionPermissionFlag.RestrictedMemberAccess\n  type: Field\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Restricted member access is provided for partially trusted code. Partially trusted code can access nonpublic types and members, but only if the grant set of the partially trusted code includes all permissions in the grant set of the assembly that contains the nonpublic types and members being accessed. This flag is new in the [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)].\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      RestrictedMemberAccess\n    return:\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/ReflectionPermissionFlag.xml\n- uid: System.Security.Permissions.ReflectionPermissionFlag.TypeInformation\n  commentId: F:System.Security.Permissions.ReflectionPermissionFlag.TypeInformation\n  id: TypeInformation\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  langs:\n  - csharp\n  name: TypeInformation\n  nameWithType: ReflectionPermissionFlag.TypeInformation\n  fullName: ReflectionPermissionFlag.TypeInformation\n  type: Field\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: This flag is obsolete. No flags are necessary to enumerate types and members and to examine their metadata. Use <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.NoFlags\"></xref> instead.\n  syntax:\n    content: >-\n      [System.Obsolete(\"not used anymore\")]\n\n      TypeInformation\n    return:\n      type: System.Security.Permissions.ReflectionPermissionFlag\n      description: ''\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/ReflectionPermissionFlag.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Security.Permissions.ReflectionPermissionFlag.AllFlags\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  isExternal: false\n  name: AllFlags\n  nameWithType: ReflectionPermissionFlag.AllFlags\n  fullName: ReflectionPermissionFlag.AllFlags\n- uid: System.Security.Permissions.ReflectionPermissionFlag\n  parent: System.Security.Permissions\n  isExternal: false\n  name: ReflectionPermissionFlag\n  nameWithType: ReflectionPermissionFlag\n  fullName: System.Security.Permissions.ReflectionPermissionFlag\n- uid: System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  isExternal: false\n  name: MemberAccess\n  nameWithType: ReflectionPermissionFlag.MemberAccess\n  fullName: ReflectionPermissionFlag.MemberAccess\n- uid: System.Security.Permissions.ReflectionPermissionFlag.NoFlags\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  isExternal: false\n  name: NoFlags\n  nameWithType: ReflectionPermissionFlag.NoFlags\n  fullName: ReflectionPermissionFlag.NoFlags\n- uid: System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  isExternal: false\n  name: ReflectionEmit\n  nameWithType: ReflectionPermissionFlag.ReflectionEmit\n  fullName: ReflectionPermissionFlag.ReflectionEmit\n- uid: System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  isExternal: false\n  name: RestrictedMemberAccess\n  nameWithType: ReflectionPermissionFlag.RestrictedMemberAccess\n  fullName: ReflectionPermissionFlag.RestrictedMemberAccess\n- uid: System.Security.Permissions.ReflectionPermissionFlag.TypeInformation\n  parent: System.Security.Permissions.ReflectionPermissionFlag\n  isExternal: false\n  name: TypeInformation\n  nameWithType: ReflectionPermissionFlag.TypeInformation\n  fullName: ReflectionPermissionFlag.TypeInformation\n"}