{"nodes":[{"content":"Provides the Media Access Control (MAC) address for a network interface (adapter).","nodes":[{"pos":[0,82],"content":"Provides the Media Access Control (MAC) address for a network interface (adapter).","nodes":[{"content":"Provides the Media Access Control (MAC) address for a network interface (adapter).","pos":[0,82]}]}],"pos":[917,1000],"yaml":true},{"content":"The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.  \n  \n Instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,140],"content":"The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.","nodes":[{"content":"The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.","pos":[0,140]}]},{"pos":[147,299],"content":"Instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=fullName> method.","nodes":[{"content":"Instances of this class are returned by the <ph id=\"ph1\">&lt;xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,152],"source":"Instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=fullName> method."}]}],"pos":[1011,1315],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> class.","nodes":[{"pos":[0,107],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkInformation.PhysicalAddress\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> class."}],"pos":[3294,3402],"yaml":true},{"content":"In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> method.  \n  \n Note that you can also use the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method to create a new instance of <xref:System.Net.NetworkInformation.PhysicalAddress>.","nodes":[{"pos":[0,199],"content":"In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> method.","nodes":[{"content":"In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <ph id=\"ph1\">&lt;xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A&gt;</ph> method.","pos":[0,199],"source":"In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> method."}]},{"pos":[206,387],"content":"Note that you can also use the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method to create a new instance of <xref:System.Net.NetworkInformation.PhysicalAddress>.","nodes":[{"content":"Note that you can also use the <ph id=\"ph1\">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> method to create a new instance of <ph id=\"ph2\">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph>.","pos":[0,181],"source":"Note that you can also use the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method to create a new instance of <xref:System.Net.NetworkInformation.PhysicalAddress>."}]}],"pos":[3413,3805],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Byte\"></xref> array containing the address.","nodes":[{"pos":[0,64],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the address.","source":"A <xref href=\"System.Byte\"></xref> array containing the address."}],"pos":[4334,4399],"yaml":true},{"content":"Compares two <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instances.","nodes":[{"pos":[0,90],"content":"Compares two <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkInformation.PhysicalAddress\"&gt;&lt;/xref&gt;</ph> instances.","source":"Compares two <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instances."}],"pos":[5746,5837],"yaml":true},{"content":"The <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> to compare to the current instance.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkInformation.PhysicalAddress\"&gt;&lt;/xref&gt;</ph> to compare to the current instance.","source":"The <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> to compare to the current instance."}],"pos":[6391,6498],"yaml":true},{"content":"`true` if this instance and the specified instance contain the same address; otherwise `false`.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">`true`</ph> if this instance and the specified instance contain the same address; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if this instance and the specified instance contain the same address; otherwise `false`."}],"pos":[6556,6654],"yaml":true},{"content":"Returns the address of the current instance.","nodes":[{"pos":[0,44],"content":"Returns the address of the current instance.","nodes":[{"content":"Returns the address of the current instance.","pos":[0,44]}]}],"pos":[7993,8038],"yaml":true},{"content":"A <xref href=\"System.Byte\"></xref> array containing the address.","nodes":[{"pos":[0,64],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> array containing the address.","source":"A <xref href=\"System.Byte\"></xref> array containing the address."}],"pos":[8633,8698],"yaml":true},{"content":"Returns the hash value of a physical address.","nodes":[{"pos":[0,45],"content":"Returns the hash value of a physical address.","nodes":[{"content":"Returns the hash value of a physical address.","pos":[0,45]}]}],"pos":[10022,10068],"yaml":true},{"content":"An integer hash value.","nodes":[{"pos":[0,22],"content":"An integer hash value.","nodes":[{"content":"An integer hash value.","pos":[0,22]}]}],"pos":[10202,10225],"yaml":true},{"content":"Returns a new <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instance with a zero length address. This field is read-only.","nodes":[{"pos":[0,142],"content":"Returns a new <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instance with a zero length address. This field is read-only.","nodes":[{"content":"Returns a new <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkInformation.PhysicalAddress\"&gt;&lt;/xref&gt;</ph> instance with a zero length address.","pos":[0,117],"source":"Returns a new <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instance with a zero length address."},{"content":"This field is read-only.","pos":[118,142]}]}],"pos":[11496,11639],"yaml":true},{"content":"The <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method returns <xref:System.Net.NetworkInformation.PhysicalAddress.None> if you specify `null` address.","nodes":[{"pos":[0,169],"content":"The <ph id=\"ph1\">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A&gt;</ph> method returns <ph id=\"ph2\">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.None&gt;</ph> if you specify <ph id=\"ph3\">`null`</ph> address.","source":"The <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method returns <xref:System.Net.NetworkInformation.PhysicalAddress.None> if you specify `null` address."}],"pos":[11650,11820],"yaml":true,"extradata":"MT"},{"content":"Parses the specified <xref href=\"System.String\"></xref> and stores its contents as the address bytes of the <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> returned by this method.","nodes":[{"pos":[0,199],"content":"Parses the specified <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> and stores its contents as the address bytes of the <ph id=\"ph2\">&lt;xref href=\"System.Net.NetworkInformation.PhysicalAddress\"&gt;&lt;/xref&gt;</ph> returned by this method.","source":"Parses the specified <xref href=\"System.String\"></xref> and stores its contents as the address bytes of the <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> returned by this method."}],"pos":[13669,13869],"yaml":true},{"content":"The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits. Some examples of string formats that are acceptable are as follows:  \n  \n `001122334455`  \n  \n `00-11-22-33-44-55`  \n  \n `F0-E1-D2-C3-B4-A5`  \n  \n Note that an address that contains `f0-e1-d2-c3-b4-a5` will fail to parse and throw an exception.  \n  \n Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance.","nodes":[{"pos":[0,192],"content":"The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits. Some examples of string formats that are acceptable are as follows:","nodes":[{"content":"The <ph id=\"ph1\">`address`</ph> parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits.","pos":[0,124],"source":"The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits."},{"content":"Some examples of string formats that are acceptable are as follows:","pos":[125,192]}]},{"pos":[272,369],"content":"Note that an address that contains <ph id=\"ph1\">`f0-e1-d2-c3-b4-a5`</ph> will fail to parse and throw an exception.","source":"Note that an address that contains `f0-e1-d2-c3-b4-a5` will fail to parse and throw an exception."},{"pos":[376,566],"content":"Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A&gt;</ph> method to retrieve the address from an existing <ph id=\"ph2\">&lt;xref:System.Net.NetworkInformation.PhysicalAddress&gt;</ph> instance.","pos":[0,190],"source":"Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance."}]}],"pos":[13880,14459],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> containing the address that will be used to initialize the <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instance returned by this method.","nodes":[{"pos":[0,196],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the address that will be used to initialize the <ph id=\"ph2\">&lt;xref href=\"System.Net.NetworkInformation.PhysicalAddress\"&gt;&lt;/xref&gt;</ph> instance returned by this method.","source":"A <xref href=\"System.String\"></xref> containing the address that will be used to initialize the <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instance returned by this method."}],"pos":[15113,15310],"yaml":true},{"content":"A <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instance with the specified address.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkInformation.PhysicalAddress\"&gt;&lt;/xref&gt;</ph> instance with the specified address.","source":"A <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instance with the specified address."}],"pos":[15399,15505],"yaml":true},{"content":"The <code>address</code> parameter contains an illegal hardware address.  \n  \n This exception also occurs if the <code>address</code> parameter contains a string in the incorrect format.","nodes":[{"pos":[0,72],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains an illegal hardware address.","source":"The <code>address</code> parameter contains an illegal hardware address."},{"pos":[79,186],"content":"This exception also occurs if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains a string in the incorrect format.","source":"This exception also occurs if the <code>address</code> parameter contains a string in the incorrect format."}],"pos":[15674,15865],"yaml":true},{"content":"Returns the <xref href=\"System.String\"></xref> representation of the address of this instance.","nodes":[{"pos":[0,94],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> representation of the address of this instance.","source":"Returns the <xref href=\"System.String\"></xref> representation of the address of this instance."}],"pos":[17079,17174],"yaml":true},{"content":"A <xref href=\"System.String\"></xref> containing the address contained in this instance.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the address contained in this instance.","source":"A <xref href=\"System.String\"></xref> containing the address contained in this instance."}],"pos":[17738,17826],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.NetworkInformation.PhysicalAddress\n  commentId: T:System.Net.NetworkInformation.PhysicalAddress\n  id: PhysicalAddress\n  children:\n  - System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])\n  - System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)\n  - System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes\n  - System.Net.NetworkInformation.PhysicalAddress.GetHashCode\n  - System.Net.NetworkInformation.PhysicalAddress.None\n  - System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)\n  - System.Net.NetworkInformation.PhysicalAddress.ToString\n  langs:\n  - csharp\n  name: PhysicalAddress\n  nameWithType: PhysicalAddress\n  fullName: System.Net.NetworkInformation.PhysicalAddress\n  type: Class\n  assemblies:\n  - System.Net.NetworkInformation\n  - System\n  - netstandard\n  namespace: System.Net.NetworkInformation\n  summary: Provides the Media Access Control (MAC) address for a network interface (adapter).\n  remarks: \"The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.  \\n  \\n Instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following code example displays the physical addresses of all interfaces on the local computer.  \\n  \\n [!code-cpp[NCLPhysicalAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#2)]\\n [!code-csharp[NCLPhysicalAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#2)]\"\n  syntax:\n    content: public class PhysicalAddress\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  name: PhysicalAddress(Byte[])\n  nameWithType: PhysicalAddress.PhysicalAddress(Byte[])\n  fullName: PhysicalAddress.PhysicalAddress(Byte[])\n  type: Constructor\n  assemblies:\n  - System.Net.NetworkInformation\n  - System\n  - netstandard\n  namespace: System.Net.NetworkInformation\n  summary: Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> class.\n  remarks: \"In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> method.  \\n  \\n Note that you can also use the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method to create a new instance of <xref:System.Net.NetworkInformation.PhysicalAddress>.\"\n  example:\n  - \"The following code example creates a new <xref:System.Net.NetworkInformation.PhysicalAddress> object.  \\n  \\n [!code-cpp[NCLPhysicalAddress#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#4)]\\n [!code-csharp[NCLPhysicalAddress#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#4)]\"\n  syntax:\n    content: public PhysicalAddress (byte[] address);\n    parameters:\n    - id: address\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the address.\n  overload: System.Net.NetworkInformation.PhysicalAddress.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: PhysicalAddress.Equals(Object)\n  fullName: PhysicalAddress.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Net.NetworkInformation\n  - System\n  - netstandard\n  namespace: System.Net.NetworkInformation\n  summary: Compares two <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instances.\n  remarks: ''\n  example:\n  - \"The following code example compares two <xref:System.Net.NetworkInformation.PhysicalAddress> instances.  \\n  \\n [!code-cpp[NCLPhysicalAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#3)]\\n [!code-csharp[NCLPhysicalAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#3)]\"\n  syntax:\n    content: public override bool Equals (object comparand);\n    parameters:\n    - id: comparand\n      type: System.Object\n      description: The <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> to compare to the current instance.\n    return:\n      type: System.Boolean\n      description: '`true` if this instance and the specified instance contain the same address; otherwise `false`.'\n  overload: System.Net.NetworkInformation.PhysicalAddress.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes\n  id: GetAddressBytes\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  name: GetAddressBytes()\n  nameWithType: PhysicalAddress.GetAddressBytes()\n  fullName: PhysicalAddress.GetAddressBytes()\n  type: Method\n  assemblies:\n  - System.Net.NetworkInformation\n  - System\n  - netstandard\n  namespace: System.Net.NetworkInformation\n  summary: Returns the address of the current instance.\n  remarks: ''\n  example:\n  - \"The following code example calls this method to retrieve the address of a <xref:System.Net.NetworkInformation.PhysicalAddress> and formats the address for display.  \\n  \\n [!code-cpp[NCLPhysicalAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#2)]\\n [!code-csharp[NCLPhysicalAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#2)]\"\n  syntax:\n    content: public byte[] GetAddressBytes ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: A <xref href=\"System.Byte\"></xref> array containing the address.\n  overload: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.NetworkInformation.PhysicalAddress.GetHashCode\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode\n  id: GetHashCode\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: PhysicalAddress.GetHashCode()\n  fullName: PhysicalAddress.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Net.NetworkInformation\n  - System\n  - netstandard\n  namespace: System.Net.NetworkInformation\n  summary: Returns the hash value of a physical address.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: An integer hash value.\n  overload: System.Net.NetworkInformation.PhysicalAddress.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.NetworkInformation.PhysicalAddress.None\n  commentId: F:System.Net.NetworkInformation.PhysicalAddress.None\n  id: None\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  name: None\n  nameWithType: PhysicalAddress.None\n  fullName: PhysicalAddress.None\n  type: Field\n  assemblies:\n  - System.Net.NetworkInformation\n  - System\n  - netstandard\n  namespace: System.Net.NetworkInformation\n  summary: Returns a new <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instance with a zero length address. This field is read-only.\n  remarks: The <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method returns <xref:System.Net.NetworkInformation.PhysicalAddress.None> if you specify `null` address.\n  example:\n  - \"The following code example demonstrates using this field to test the result of parsing an address.  \\n  \\n [!code-cpp[NCLPhysicalAddress#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#5)]\\n [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#5)]\"\n  syntax:\n    content: public static readonly System.Net.NetworkInformation.PhysicalAddress None;\n    return:\n      type: System.Net.NetworkInformation.PhysicalAddress\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  name: Parse(String)\n  nameWithType: PhysicalAddress.Parse(String)\n  fullName: PhysicalAddress.Parse(String)\n  type: Method\n  assemblies:\n  - System.Net.NetworkInformation\n  - System\n  - netstandard\n  namespace: System.Net.NetworkInformation\n  summary: Parses the specified <xref href=\"System.String\"></xref> and stores its contents as the address bytes of the <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> returned by this method.\n  remarks: \"The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits. Some examples of string formats that are acceptable are as follows:  \\n  \\n `001122334455`  \\n  \\n `00-11-22-33-44-55`  \\n  \\n `F0-E1-D2-C3-B4-A5`  \\n  \\n Note that an address that contains `f0-e1-d2-c3-b4-a5` will fail to parse and throw an exception.  \\n  \\n Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance.\"\n  example:\n  - \"The following code example creates a <xref:System.Net.NetworkInformation.PhysicalAddress> instance by calling the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method.  \\n  \\n [!code-cpp[NCLPhysicalAddress#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#5)]\\n [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#5)]\"\n  syntax:\n    content: public static System.Net.NetworkInformation.PhysicalAddress Parse (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the address that will be used to initialize the <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instance returned by this method.\n    return:\n      type: System.Net.NetworkInformation.PhysicalAddress\n      description: A <xref href=\"System.Net.NetworkInformation.PhysicalAddress\"></xref> instance with the specified address.\n  overload: System.Net.NetworkInformation.PhysicalAddress.Parse*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"The <code>address</code> parameter contains an illegal hardware address.  \\n  \\n This exception also occurs if the <code>address</code> parameter contains a string in the incorrect format.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.NetworkInformation.PhysicalAddress.ToString\n  commentId: M:System.Net.NetworkInformation.PhysicalAddress.ToString\n  id: ToString\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: PhysicalAddress.ToString()\n  fullName: PhysicalAddress.ToString()\n  type: Method\n  assemblies:\n  - System.Net.NetworkInformation\n  - System\n  - netstandard\n  namespace: System.Net.NetworkInformation\n  summary: Returns the <xref href=\"System.String\"></xref> representation of the address of this instance.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates displaying the address in a <xref:System.Net.NetworkInformation.PhysicalAddress> instance.  \\n  \\n [!code-cpp[NCLPhysicalAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#3)]\\n [!code-csharp[NCLPhysicalAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#3)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> containing the address contained in this instance.\n  overload: System.Net.NetworkInformation.PhysicalAddress.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: PhysicalAddress(Byte[])\n  nameWithType: PhysicalAddress.PhysicalAddress(Byte[])\n  fullName: PhysicalAddress.PhysicalAddress(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: PhysicalAddress.Equals(Object)\n  fullName: PhysicalAddress.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: GetAddressBytes()\n  nameWithType: PhysicalAddress.GetAddressBytes()\n  fullName: PhysicalAddress.GetAddressBytes()\n- uid: System.Net.NetworkInformation.PhysicalAddress.GetHashCode\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: PhysicalAddress.GetHashCode()\n  fullName: PhysicalAddress.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.NetworkInformation.PhysicalAddress.None\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: None\n  nameWithType: PhysicalAddress.None\n  fullName: PhysicalAddress.None\n- uid: System.Net.NetworkInformation.PhysicalAddress\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PhysicalAddress\n  nameWithType: PhysicalAddress\n  fullName: System.Net.NetworkInformation.PhysicalAddress\n- uid: System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: Parse(String)\n  nameWithType: PhysicalAddress.Parse(String)\n  fullName: PhysicalAddress.Parse(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Net.NetworkInformation.PhysicalAddress.ToString\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: ToString()\n  nameWithType: PhysicalAddress.ToString()\n  fullName: PhysicalAddress.ToString()\n- uid: System.Net.NetworkInformation.PhysicalAddress.#ctor*\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: PhysicalAddress\n  nameWithType: PhysicalAddress.PhysicalAddress\n  fullName: PhysicalAddress.PhysicalAddress\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n- uid: System.Net.NetworkInformation.PhysicalAddress.Equals*\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: Equals\n  nameWithType: PhysicalAddress.Equals\n  fullName: PhysicalAddress.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n- uid: System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes*\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: GetAddressBytes\n  nameWithType: PhysicalAddress.GetAddressBytes\n  fullName: PhysicalAddress.GetAddressBytes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n- uid: System.Net.NetworkInformation.PhysicalAddress.GetHashCode*\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: GetHashCode\n  nameWithType: PhysicalAddress.GetHashCode\n  fullName: PhysicalAddress.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n- uid: System.Net.NetworkInformation.PhysicalAddress.Parse*\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: Parse\n  nameWithType: PhysicalAddress.Parse\n  fullName: PhysicalAddress.Parse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n- uid: System.Net.NetworkInformation.PhysicalAddress.ToString*\n  parent: System.Net.NetworkInformation.PhysicalAddress\n  isExternal: false\n  name: ToString\n  nameWithType: PhysicalAddress.ToString\n  fullName: PhysicalAddress.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/PhysicalAddress.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n"}