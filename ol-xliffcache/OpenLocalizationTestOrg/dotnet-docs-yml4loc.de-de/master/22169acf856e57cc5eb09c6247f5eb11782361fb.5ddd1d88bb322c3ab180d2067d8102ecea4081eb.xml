{"nodes":[{"content":"Represents an arbitrarily large signed integer.","nodes":[{"pos":[0,47],"content":"Represents an arbitrarily large signed integer.","nodes":[{"content":"Represents an arbitrarily large signed integer.","pos":[0,47]}]}],"pos":[10003,10051],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds. The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types). This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties.  \n  \n> [!NOTE]\n>  Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large.  \n  \n## Instantiating a BigInteger Object  \n You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:  \n  \n-   You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor. (Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values.  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]\n     [!code-vb[System.Numerics.BigInteger.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]  \n  \n-   You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type. The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]\n     [!code-vb[System.Numerics.BigInteger.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]  \n  \n-   You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first. The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]\n     [!code-vb[System.Numerics.BigInteger.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]  \n  \n These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only. You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:  \n  \n-   You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=fullName> constructor. For example:  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]\n     [!code-vb[System.Numerics.BigInteger.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]  \n  \n-   You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>. For example:  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]\n     [!code-vb[System.Numerics.BigInteger.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]  \n  \n-   You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result. The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=fullName> and assigning the result to a <xref:System.Numerics.BigInteger>.  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]\n     [!code-vb[System.Numerics.BigInteger.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]  \n  \n The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>.  \n  \n## Performing Operations on BigInteger Values  \n You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type. <xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation. You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other. Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators. For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations. These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others.  \n  \n Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types. In addition, <xref:System.Numerics.BigInteger> adds members such as the following:  \n  \n-   <xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value.  \n  \n-   <xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value.  \n  \n-   <xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation.  \n  \n-   <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values.  \n  \n Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types.  \n  \n<a name=\"mutability\"></a>   \n## Mutability and the BigInteger Structure  \n The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]  \n  \n Although this example appears to modify the value of the existing object, this is not the case. <xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value. This new object is then returned to the caller.  \n  \n> [!NOTE]\n>  The other numeric types in the .NET Framework are also immutable. However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.  \n  \n Although this process is transparent to the caller, it does incur a performance penalty. In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant. For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]  \n  \n In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable. The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits. The following example provides an illustration.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]  \n  \n## Working with Byte Arrays and Hexadecimal Strings  \n If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes. The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes). You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]  \n  \n To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor. The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]  \n  \n The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation. Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit. To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0. For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296. Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000. To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor. The following example illustrates this.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]  \n  \n Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte. Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]  \n  \n However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=fullName>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=fullName>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=fullName>).  \n  \n When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation. For example, both \"FF01\" and \"F01\" represent the decimal value -255. To differentiate positive from negative values, positive values should include a leading zero. The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the \"X\" format string, add a leading zero to the returned hexadecimal string for positive values. This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]  \n  \n However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived. Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic. The following example provides one possible implementation.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]","nodes":[{"pos":[0,637],"content":"The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds. The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types). This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds.","pos":[0,160],"source":"The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds."},{"content":"The members of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> type closely parallel those of other integral types (the <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Int64&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.UInt16&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.UInt32&gt;</ph>, and <ph id=\"ph9\">&lt;xref:System.UInt64&gt;</ph> types).","pos":[161,451],"source":" The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types)."},{"content":"This type differs from the other integral types in the <ph id=\"ph1\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>, which have a range indicated by their <ph id=\"ph2\">`MinValue`</ph> and <ph id=\"ph3\">`MaxValue`</ph> properties.","pos":[452,637],"source":" This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties."}]},{"pos":[645,968],"content":"[!NOTE]\n Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large.","leadings":["","> "],"nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> type is immutable (see <bpt id=\"p1\">[</bpt>Mutability and the BigInteger Structure<ept id=\"p1\">](#mutability)</ept>) and because it has no upper or lower bounds, an <ph id=\"ph2\">&lt;xref:System.OutOfMemoryException&gt;</ph> can be thrown for any operation that causes a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value to grow too large.","pos":[9,321],"source":" Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large."}]},{"pos":[977,1010],"content":"Instantiating a BigInteger Object","linkify":"Instantiating a BigInteger Object","nodes":[{"content":"Instantiating a BigInteger Object","pos":[0,33]}]},{"pos":[1014,1093],"content":"You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:","nodes":[{"content":"You can instantiate a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object in several ways:","pos":[0,79],"source":"You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:"}]},{"pos":[1103,1475],"content":"You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor. (Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values.","nodes":[{"content":"You can use the <ph id=\"ph1\">`new`</ph> keyword and provide any integral or floating-point value as a parameter to the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> constructor.","pos":[0,147],"source":"You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor."},{"content":"(Floating-point values are truncated before they are assigned to the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.) The following example illustrates how to use the <ph id=\"ph2\">`new`</ph> keyword to instantiate <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[148,372],"source":" (Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values."}]},{"pos":[1486,1815],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Numerics.BigInteger.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]"},{"pos":[1825,2105],"content":"You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type. The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.","nodes":[{"content":"You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type. The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.","pos":[0,280],"nodes":[{"content":"You can declare a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> variable and assign it a value just as you would any numeric type, as long as that value is an integral type.","pos":[0,161],"source":"You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type."},{"content":"The following example uses assignment to create a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value from an <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph>.","pos":[162,280],"source":" The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>."}]}]},{"pos":[2116,2445],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Numerics.BigInteger.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]\n [!code-vb[System.Numerics.BigInteger.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]"},{"pos":[2455,2766],"content":"You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first. The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"content":"You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first. The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.","pos":[0,311],"nodes":[{"content":"You can assign a decimal or floating-point value to a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object if you cast the value or convert it first.","pos":[0,137],"source":"You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first."},{"content":"The following example explicitly casts (in C#) or converts (in Visual Basic) a <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> and a <ph id=\"ph2\">&lt;xref:System.Decimal&gt;</ph> value to a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.","pos":[138,311],"source":" The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>."}]}]},{"pos":[2777,3106],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Numerics.BigInteger.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]"},{"pos":[3113,3414],"content":"These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only. You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:","nodes":[{"content":"These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only. You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:","pos":[0,301],"nodes":[{"content":"These methods enable you to instantiate a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object whose value is in the range of one of the existing numeric types only.","pos":[0,153],"source":"These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only."},{"content":"You can instantiate a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object whose value can exceed the range of the existing numeric types in one of three ways:","pos":[154,301],"source":" You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:"}]}]},{"pos":[3424,3593],"content":"You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=fullName> constructor. For example:","nodes":[{"content":"You can use the <ph id=\"ph1\">`new`</ph> keyword and provide a byte array of any size to the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=fullName&gt;</ph> constructor.","pos":[0,156],"source":"You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=fullName> constructor."},{"content":"For example:","pos":[157,169]}]},{"pos":[3604,3933],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Numerics.BigInteger.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]\n [!code-vb[System.Numerics.BigInteger.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]"},{"pos":[3943,4161],"content":"You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>. For example:","nodes":[{"content":"You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>. For example:","pos":[0,218],"nodes":[{"content":"You can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Parse%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.TryParse%2A&gt;</ph> methods to convert the string representation of a number to a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.","pos":[0,205],"source":"You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>."},{"content":"For example:","pos":[206,218]}]}]},{"pos":[4172,4501],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Numerics.BigInteger.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]\n [!code-vb[System.Numerics.BigInteger.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]"},{"pos":[4511,4884],"content":"You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result. The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=fullName> and assigning the result to a <xref:System.Numerics.BigInteger>.","nodes":[{"content":"You can call a <ph id=\"ph1\">`static`</ph> (<ph id=\"ph2\">`Shared`</ph> in Visual Basic) <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> method that performs some operation on a numeric expression and returns a calculated <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger&gt;</ph> result.","pos":[0,211],"source":"You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result."},{"content":"The following example does this by cubing <ph id=\"ph1\">&lt;xref:System.UInt64.MaxValue?displayProperty=fullName&gt;</ph> and assigning the result to a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.","pos":[212,373],"source":" The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=fullName> and assigning the result to a <xref:System.Numerics.BigInteger>."}]},{"pos":[4895,5224],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.Numerics.BigInteger.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]\n [!code-vb[System.Numerics.BigInteger.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]"},{"pos":[5231,5339],"content":"The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>.","nodes":[{"content":"The uninitialized value of a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> is <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Zero%2A&gt;</ph>.","pos":[0,108],"source":"The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>."}]},{"pos":[5348,5390],"content":"Performing Operations on BigInteger Values","linkify":"Performing Operations on BigInteger Values","nodes":[{"content":"Performing Operations on BigInteger Values","pos":[0,42]}]},{"pos":[5394,6426],"content":"You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type. <xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation. You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other. Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators. For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations. These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others.","nodes":[{"content":"You can use a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> instance as you would use any other integral type.","pos":[0,98],"source":"You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type."},{"content":"<ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation.","pos":[99,328],"source":" <xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation."},{"content":"You can also use the standard numeric operators to compare two <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values with each other.","pos":[329,449],"source":" You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other."},{"content":"Like the other integral types, <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> also supports the bitwise <ph id=\"ph2\">`And`</ph>, <ph id=\"ph3\">`Or`</ph>, <ph id=\"ph4\">`XOr`</ph>, left shift, and right shift operators.","pos":[450,599],"source":" Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators."},{"content":"For languages that do not support custom operators, the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> structure also provides equivalent methods for performing mathematical operations.","pos":[600,772],"source":" For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations."},{"content":"These include <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Add%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Divide%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.Multiply%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger.Negate%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Numerics.BigInteger.Subtract%2A&gt;</ph>, and several others.","pos":[773,1032],"source":" These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others."}]},{"pos":[6433,6639],"content":"Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types. In addition, <xref:System.Numerics.BigInteger> adds members such as the following:","nodes":[{"content":"Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types. In addition, <xref:System.Numerics.BigInteger> adds members such as the following:","pos":[0,206],"nodes":[{"content":"Many members of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> structure correspond directly to members of the other integral types.","pos":[0,123],"source":"Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types."},{"content":"In addition, <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> adds members such as the following:","pos":[124,206],"source":" In addition, <xref:System.Numerics.BigInteger> adds members such as the following:"}]}]},{"pos":[6649,6783],"content":"<xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Sign%2A&gt;</ph>, which returns a value that indicates the sign of a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[0,134],"source":"<xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value."}]},{"pos":[6793,6913],"content":"<xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Abs%2A&gt;</ph>, which returns the absolute value of a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[0,120],"source":"<xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value."}]},{"pos":[6923,7038],"content":"<xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.DivRem%2A&gt;</ph>, which returns both the quotient and remainder of a division operation.","pos":[0,115],"source":"<xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation."}]},{"pos":[7048,7198],"content":"<xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A&gt;</ph>, which returns the greatest common divisor of two <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,150],"source":"<xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values."}]},{"pos":[7205,7371],"content":"Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types.","nodes":[{"content":"Many of these additional members correspond to the members of the <ph id=\"ph1\">&lt;xref:System.Math&gt;</ph> class, which provides the functionality to work with the primitive numeric types.","pos":[0,166],"source":"Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types."}]},{"pos":[7409,7448],"content":"Mutability and the BigInteger Structure","linkify":"Mutability and the BigInteger Structure","nodes":[{"content":"Mutability and the BigInteger Structure","pos":[0,39]}]},{"pos":[7452,7567],"content":"The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one.","nodes":[{"content":"The following example instantiates a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object and then increments its value by one.","pos":[0,115],"source":"The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one."}]},{"pos":[7574,7943],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class.Mutability#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class.Mutability#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]"},{"pos":[7950,8331],"content":"Although this example appears to modify the value of the existing object, this is not the case. <xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value. This new object is then returned to the caller.","nodes":[{"content":"Although this example appears to modify the value of the existing object, this is not the case. <xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value. This new object is then returned to the caller.","pos":[0,381],"nodes":[{"content":"Although this example appears to modify the value of the existing object, this is not the case.","pos":[0,95]},{"content":"<ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> objects are immutable, which means that internally, the common language runtime actually creates a new <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object and assigns it a value one greater than its previous value.","pos":[96,333],"source":" <xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value."},{"content":"This new object is then returned to the caller.","pos":[334,381]}]}]},{"pos":[8339,8586],"content":"[!NOTE]\n The other numeric types in the .NET Framework are also immutable. However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.","leadings":["","> "],"nodes":[{"content":" The other numeric types in the .NET Framework are also immutable. However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.","pos":[8,245],"nodes":[{"content":"The other numeric types in the .NET Framework are also immutable.","pos":[1,66]},{"content":"However, because the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.","pos":[67,237],"source":" However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance."}]}]},{"pos":[8593,9061],"content":"Although this process is transparent to the caller, it does incur a performance penalty. In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant. For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.","nodes":[{"content":"Although this process is transparent to the caller, it does incur a performance penalty. In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant. For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.","pos":[0,468],"nodes":[{"content":"Although this process is transparent to the caller, it does incur a performance penalty.","pos":[0,88]},{"content":"In some cases, especially when repeated operations are performed in a loop on very large <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values, that performance penalty can be significant.","pos":[89,264],"source":" In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant."},{"content":"For example, in the following example, an operation is performed repetitively up to a million times, and a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value is incremented by one every time the operation succeeds.","pos":[265,468],"source":" For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds."}]}]},{"pos":[9068,9441],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class.Mutability#12<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class.Mutability#12<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]"},{"pos":[9448,9740],"content":"In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable. The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits. The following example provides an illustration.","nodes":[{"content":"In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable. The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits. The following example provides an illustration.","pos":[0,292],"nodes":[{"content":"In such a case, you can improve performance by performing all intermediate assignments to an <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph> variable.","pos":[0,122],"source":"In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable."},{"content":"The final value of the variable can then be assigned to the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object when the loop exits.","pos":[123,244],"source":" The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits."},{"content":"The following example provides an illustration.","pos":[245,292]}]}]},{"pos":[9747,10116],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class.Mutability#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class.Mutability#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]"},{"pos":[10125,10173],"content":"Working with Byte Arrays and Hexadecimal Strings","linkify":"Working with Byte Arrays and Hexadecimal Strings","nodes":[{"content":"Working with Byte Arrays and Hexadecimal Strings","pos":[0,48]}]},{"pos":[10177,10856],"content":"If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes. The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes). You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.","nodes":[{"content":"If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes. The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes). You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.","pos":[0,679],"nodes":[{"content":"If you convert <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values to byte arrays, or if you convert byte arrays to <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values, you must consider the order of bytes.","pos":[0,184],"source":"If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes).","pos":[185,388],"source":" The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes)."},{"content":"You can round-trip a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value by calling the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.ToByteArray%2A&gt;</ph> method and then passing the resulting byte array to the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructor, as the following example shows.","pos":[389,679],"source":" You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows."}]}]},{"pos":[10863,11232],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]"},{"pos":[11239,11742],"content":"To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor. The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.","nodes":[{"content":"To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor. The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.","pos":[0,503],"nodes":[{"content":"To instantiate a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <ph id=\"ph2\">&lt;xref:System.BitConverter.GetBytes%2A?displayProperty=fullName&gt;</ph> method, and then pass the resulting byte array to the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructor.","pos":[0,362],"source":"To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor."},{"content":"The following example instantiates a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value from a byte array that represents an <ph id=\"ph2\">&lt;xref:System.Int16&gt;</ph> value.","pos":[363,503],"source":" The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value."}]}]},{"pos":[11749,12118],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]"},{"pos":[12125,13463],"content":"The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation. Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit. To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0. For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296. Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000. To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor. The following example illustrates this.","nodes":[{"content":"The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation. Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit. To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0. For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296. Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000. To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor. The following example illustrates this.","pos":[0,1338],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> structure assumes that negative values are stored by using two's complement representation.","pos":[0,129],"source":"The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation."},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> structure represents a numeric value with no fixed length, the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructor always interprets the most significant bit of the last byte in the array as a sign bit.","pos":[130,403],"source":" Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit."},{"content":"To prevent the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0.","pos":[404,791],"source":" To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0."},{"content":"For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296.","pos":[792,911]},{"content":"Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructor as -1,000,000.","pos":[912,1130],"source":" Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000."},{"content":"To instantiate a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor.","pos":[1131,1298],"source":" To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor."},{"content":"The following example illustrates this.","pos":[1299,1338]}]}]},{"pos":[13470,13839],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]"},{"pos":[13846,14176],"content":"Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte. Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.","nodes":[{"content":"Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte. Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.","pos":[0,330],"nodes":[{"content":"Byte arrays created by the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToByteArray%2A&gt;</ph> method from positive values include this extra zero-value byte.","pos":[0,139],"source":"Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte."},{"content":"Therefore, the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.","pos":[140,330],"source":" Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows."}]}]},{"pos":[14183,14552],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]"},{"pos":[14559,15015],"content":"However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=fullName>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=fullName>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=fullName>).","nodes":[{"content":"However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=fullName&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=fullName&gt;</ph>).","pos":[0,456],"source":"However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=fullName>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=fullName>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=fullName>)."}]},{"pos":[15022,16172],"content":"When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation. For example, both \"FF01\" and \"F01\" represent the decimal value -255. To differentiate positive from negative values, positive values should include a leading zero. The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the \"X\" format string, add a leading zero to the returned hexadecimal string for positive values. This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.","nodes":[{"content":"When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation. For example, both \"FF01\" and \"F01\" represent the decimal value -255. To differentiate positive from negative values, positive values should include a leading zero. The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the \"X\" format string, add a leading zero to the returned hexadecimal string for positive values. This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.","pos":[0,1150],"nodes":[{"content":"When parsing a hexadecimal string, the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName&gt;</ph> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation.","pos":[0,558],"source":"When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation."},{"content":"For example, both \"FF01\" and \"F01\" represent the decimal value -255.","pos":[559,627]},{"content":"To differentiate positive from negative values, positive values should include a leading zero.","pos":[628,722]},{"content":"The relevant overloads of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> method, when they are passed the \"X\" format string, add a leading zero to the returned hexadecimal string for positive values.","pos":[723,925],"source":" The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the \"X\" format string, add a leading zero to the returned hexadecimal string for positive values."},{"content":"This makes it possible to round-trip <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values by using the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.Parse%2A&gt;</ph> methods, as the following example shows.","pos":[926,1150],"source":" This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows."}]}]},{"pos":[16179,16548],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]"},{"pos":[16555,17045],"content":"However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived. Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic. The following example provides one possible implementation.","nodes":[{"content":"However, the hexadecimal strings created by calling the <ph id=\"ph1\">`ToString`</ph> methods of the other integral types or the overloads of the <ph id=\"ph2\">&lt;xref:System.Convert.ToString%2A&gt;</ph> method that include a <ph id=\"ph3\">`toBase`</ph> parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived.","pos":[0,310],"source":"However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived."},{"content":"Successfully instantiating a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value from such a string requires some additional logic.","pos":[311,430],"source":" Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic."},{"content":"The following example provides one possible implementation.","pos":[431,490]}]},{"pos":[17052,17423],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Class.ByteAndHex#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]"}],"pos":[10062,27606],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using the values in a byte array.","nodes":[{"pos":[0,125],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> structure using the values in a byte array.","source":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using the values in a byte array."}],"pos":[29425,29551],"yaml":true},{"content":"The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte. For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:  \n  \n|||  \n|-|-|  \n|Hexadecimal string|E8D4A51000|  \n|Byte array (lowest index first)|00 10 A5 D4 E8 00|  \n  \n Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> and <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName>, return byte arrays in little-endian order.  \n  \n The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation. In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative. Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value. Byte arrays are typically generated in the following ways:  \n  \n-   By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> method. Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative. Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.  \n  \n-   By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it a signed integer as a parameter. Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.  \n  \n-   By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it an unsigned integer as a parameter. Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values. To prevent this misinterpretation, you can add a zero-byte value to the end of the array. The example in the next section provides an illustration.  \n  \n-   By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array. To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.  \n  \n If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>. If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>.","nodes":[{"pos":[0,218],"content":"The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte. For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:","nodes":[{"content":"The individual bytes in the <ph id=\"ph1\">`value`</ph> array should be in little-endian order, from lowest-order byte to highest-order byte.","pos":[0,121],"source":"The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte."},{"content":"For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:","pos":[122,218]}]},{"pos":[239,257],"content":"Hexadecimal string","nodes":[{"content":"Hexadecimal string","pos":[0,18]}]},{"pos":[258,268],"content":"E8D4A51000","nodes":[{"content":"E8D4A51000","pos":[0,10]}]},{"pos":[273,304],"content":"Byte array (lowest index first)","nodes":[{"content":"Byte array (lowest index first)","pos":[0,31]}]},{"pos":[305,322],"content":"00 10 A5 D4 E8 00","nodes":[{"content":"00 10 A5 D4 E8 00","pos":[0,17]}]},{"pos":[330,580],"content":"Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> and <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName>, return byte arrays in little-endian order.","nodes":[{"content":"Most methods that convert numeric values to byte arrays, such as <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.BitConverter.GetBytes%2A?displayProperty=fullName&gt;</ph>, return byte arrays in little-endian order.","pos":[0,250],"source":"Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> and <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName>, return byte arrays in little-endian order."}]},{"pos":[587,1075],"content":"The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation. In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative. Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value. Byte arrays are typically generated in the following ways:","nodes":[{"content":"The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation.","pos":[0,159]},{"content":"In other words, if the highest-order bit of the highest-order byte in <ph id=\"ph1\">`value`</ph> is set, the resulting <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value is negative.","pos":[160,312],"source":" In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative."},{"content":"Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value.","pos":[313,429]},{"content":"Byte arrays are typically generated in the following ways:","pos":[430,488]}]},{"pos":[1085,1620],"content":"By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> method. Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative. Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.","nodes":[{"content":"By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> method. Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative. Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.","pos":[0,535],"nodes":[{"content":"By calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,96],"source":"By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> method."},{"content":"Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative.","pos":[97,304]},{"content":"Unmodified byte arrays created by the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToByteArray%2A&gt;</ph> method always successfully round-trip when they are passed to the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructor.","pos":[305,535],"source":" Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor."}]}]},{"pos":[1630,1938],"content":"By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it a signed integer as a parameter. Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.","nodes":[{"content":"By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it a signed integer as a parameter. Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.","pos":[0,308],"nodes":[{"content":"By calling the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A?displayProperty=fullName&gt;</ph> method and passing it a signed integer as a parameter.","pos":[0,133],"source":"By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it a signed integer as a parameter."},{"content":"Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.","pos":[134,308]}]}]},{"pos":[1948,2357],"content":"By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it an unsigned integer as a parameter. Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values. To prevent this misinterpretation, you can add a zero-byte value to the end of the array. The example in the next section provides an illustration.","nodes":[{"content":"By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it an unsigned integer as a parameter. Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values. To prevent this misinterpretation, you can add a zero-byte value to the end of the array. The example in the next section provides an illustration.","pos":[0,409],"nodes":[{"content":"By calling the <ph id=\"ph1\">&lt;xref:System.BitConverter.GetBytes%2A?displayProperty=fullName&gt;</ph> method and passing it an unsigned integer as a parameter.","pos":[0,136],"source":"By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it an unsigned integer as a parameter."},{"content":"Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values.","pos":[137,261]},{"content":"To prevent this misinterpretation, you can add a zero-byte value to the end of the array.","pos":[262,351]},{"content":"The example in the next section provides an illustration.","pos":[352,409]}]}]},{"pos":[2367,2649],"content":"By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array. To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.","nodes":[{"content":"By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array. To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.","pos":[0,282],"nodes":[{"content":"By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array.","pos":[0,154]},{"content":"To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.","pos":[155,282]}]}]},{"pos":[2656,2935],"content":"If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>. If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>.","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is an empty <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph> array, the new <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object is initialized to a value of <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName&gt;</ph>.","pos":[0,194],"source":"If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>."},{"content":"If <ph id=\"ph1\">`value`</ph> is <ph id=\"ph2\">`null`</ph>, the constructor throws an <ph id=\"ph3\">&lt;xref:System.ArgumentNullException&gt;</ph>.","pos":[195,279],"source":" If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>."}]}],"pos":[29562,32519],"yaml":true,"extradata":"MT"},{"content":"An array of byte values in little-endian order.","nodes":[{"pos":[0,47],"content":"An array of byte values in little-endian order.","nodes":[{"content":"An array of byte values in little-endian order.","pos":[0,47]}]}],"pos":[35409,35457],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[35619,35649],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a <xref href=\"System.Decimal\"></xref> value.","nodes":[{"pos":[0,142],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> structure using a <ph id=\"ph2\">&lt;xref href=\"System.Decimal\"&gt;&lt;/xref&gt;</ph> value.","source":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a <xref href=\"System.Decimal\"></xref> value."}],"pos":[37152,37295],"yaml":true},{"content":"The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable.  \n  \n Calling this constructor can cause data loss; any fractional part of `value` is truncated when instantiating a <xref:System.Numerics.BigInteger> object.","nodes":[{"pos":[0,154],"content":"The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable.","nodes":[{"content":"The result of calling this constructor is identical to explicitly assigning a <ph id=\"ph1\">&lt;xref:System.Decimal&gt;</ph> value to a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> variable.","pos":[0,154],"source":"The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable."}]},{"pos":[161,313],"content":"Calling this constructor can cause data loss; any fractional part of <ph id=\"ph1\">`value`</ph> is truncated when instantiating a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object.","source":"Calling this constructor can cause data loss; any fractional part of `value` is truncated when instantiating a <xref:System.Numerics.BigInteger> object."}],"pos":[37306,37624],"yaml":true,"extradata":"MT"},{"content":"A decimal number.","nodes":[{"pos":[0,17],"content":"A decimal number.","nodes":[{"content":"A decimal number.","pos":[0,17]}]}],"pos":[38577,38595],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a double-precision floating-point value.","nodes":[{"pos":[0,138],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> structure using a double-precision floating-point value.","source":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a double-precision floating-point value."}],"pos":[40102,40241],"yaml":true},{"content":"Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.  \n  \n Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"pos":[0,120],"content":"Any fractional part of the <ph id=\"ph1\">`value`</ph> parameter is truncated when instantiating a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object.","source":"Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object."},{"pos":[127,244],"content":"Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss.","nodes":[{"content":"Because of the lack of precision of the <ph id=\"ph1\">&lt;xref:System.Double&gt;</ph> data type, calling this constructor can cause data loss.","pos":[0,117],"source":"Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss."}]},{"pos":[251,471],"content":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that results from calling this constructor is identical to the value that results from explicitly assigning a <ph id=\"ph2\">&lt;xref:System.Double&gt;</ph> value to a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.","pos":[0,220],"source":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>."}]}],"pos":[40252,40730],"yaml":true,"extradata":"MT"},{"content":"A double-precision floating-point value.","nodes":[{"pos":[0,40],"content":"A double-precision floating-point value.","nodes":[{"content":"A double-precision floating-point value.","pos":[0,40]}]}],"pos":[41854,41895],"yaml":true},{"content":"The value of <code>value</code> is <xref href=\"System.Double.NaN\"></xref>.  \n  \n -or-  \n  \n The value of <code>value</code> is <xref href=\"System.Double.NegativeInfinity\"></xref>.  \n  \n -or-  \n  \n The value of <code>value</code> is <xref href=\"System.Double.PositiveInfinity\"></xref>.","nodes":[{"pos":[0,74],"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.Double.NaN\"&gt;&lt;/xref&gt;</ph>.","source":"The value of <code>value</code> is <xref href=\"System.Double.NaN\"></xref>."},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,179],"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.Double.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>.","source":"The value of <code>value</code> is <xref href=\"System.Double.NegativeInfinity\"></xref>."},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,284],"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.Double.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>.","source":"The value of <code>value</code> is <xref href=\"System.Double.PositiveInfinity\"></xref>."}],"pos":[42049,42350],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a 32-bit signed integer value.","nodes":[{"pos":[0,128],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> structure using a 32-bit signed integer value.","source":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a 32-bit signed integer value."}],"pos":[43804,43933],"yaml":true},{"content":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>.  \n  \n The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>. However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers. As a result, this constructor is called if `value` is any one of these four integral types.","nodes":[{"pos":[0,118],"content":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.","nodes":[{"content":"There is no loss of precision when instantiating a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object by using this constructor.","pos":[0,118],"source":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor."}]},{"pos":[125,334],"content":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that results from calling this constructor is identical to the value that results from assigning an <ph id=\"ph2\">&lt;xref:System.Int32&gt;</ph> value to a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.","pos":[0,209],"source":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>."}]},{"pos":[341,769],"content":"The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>. However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers. As a result, this constructor is called if `value` is any one of these four integral types.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> structure does not include constructors with a parameter of type <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.SByte&gt;</ph>, or <ph id=\"ph5\">&lt;xref:System.UInt16&gt;</ph>.","pos":[0,189],"source":"The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>."},{"content":"However, the <ph id=\"ph1\">&lt;xref:System.Int32&gt;</ph> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers.","pos":[190,336],"source":" However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers."},{"content":"As a result, this constructor is called if <ph id=\"ph1\">`value`</ph> is any one of these four integral types.","pos":[337,428],"source":" As a result, this constructor is called if `value` is any one of these four integral types."}]}],"pos":[43944,44720],"yaml":true,"extradata":"MT"},{"content":"A 32-bit signed integer.","nodes":[{"pos":[0,24],"content":"A 32-bit signed integer.","nodes":[{"content":"A 32-bit signed integer.","pos":[0,24]}]}],"pos":[45611,45636],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a 64-bit signed integer value.","nodes":[{"pos":[0,128],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> structure using a 64-bit signed integer value.","source":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a 64-bit signed integer value."}],"pos":[47153,47282],"yaml":true},{"content":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"pos":[0,118],"content":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.","nodes":[{"content":"There is no loss of precision when instantiating a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object by using this constructor.","pos":[0,118],"source":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor."}]},{"pos":[125,334],"content":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that results from calling this constructor is identical to the value that results from assigning an <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> value to a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.","pos":[0,209],"source":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>."}]}],"pos":[47293,47632],"yaml":true,"extradata":"MT"},{"content":"A 64-bit signed integer.","nodes":[{"pos":[0,24],"content":"A 64-bit signed integer.","nodes":[{"content":"A 64-bit signed integer.","pos":[0,24]}]}],"pos":[48524,48549],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a single-precision floating-point value.","nodes":[{"pos":[0,138],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> structure using a single-precision floating-point value.","source":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a single-precision floating-point value."}],"pos":[50056,50195],"yaml":true},{"content":"Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.  \n  \n Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"pos":[0,120],"content":"Any fractional part of the <ph id=\"ph1\">`value`</ph> parameter is truncated when instantiating a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object.","source":"Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object."},{"pos":[127,248],"content":"Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss.","nodes":[{"content":"Because of the lack of precision of the <ph id=\"ph1\">&lt;xref:System.Single&gt;</ph> data type, calling this constructor can result in data loss.","pos":[0,121],"source":"Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss."}]},{"pos":[255,475],"content":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that results from calling this constructor is identical to the value that results from explicitly assigning a <ph id=\"ph2\">&lt;xref:System.Single&gt;</ph> value to a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.","pos":[0,220],"source":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>."}]}],"pos":[50206,50688],"yaml":true,"extradata":"MT"},{"content":"A single-precision floating-point value.","nodes":[{"pos":[0,40],"content":"A single-precision floating-point value.","nodes":[{"content":"A single-precision floating-point value.","pos":[0,40]}]}],"pos":[51820,51861],"yaml":true},{"content":"The value of <code>value</code> is <xref href=\"System.Single.NaN\"></xref>.  \n  \n -or-  \n  \n The value of <code>value</code> is <xref href=\"System.Single.NegativeInfinity\"></xref>.  \n  \n -or-  \n  \n The value of <code>value</code> is <xref href=\"System.Single.PositiveInfinity\"></xref>.","nodes":[{"pos":[0,74],"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.Single.NaN\"&gt;&lt;/xref&gt;</ph>.","source":"The value of <code>value</code> is <xref href=\"System.Single.NaN\"></xref>."},{"pos":[81,85],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[92,179],"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.Single.NegativeInfinity\"&gt;&lt;/xref&gt;</ph>.","source":"The value of <code>value</code> is <xref href=\"System.Single.NegativeInfinity\"></xref>."},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,284],"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">&lt;xref href=\"System.Single.PositiveInfinity\"&gt;&lt;/xref&gt;</ph>.","source":"The value of <code>value</code> is <xref href=\"System.Single.PositiveInfinity\"></xref>."}],"pos":[52015,52316],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using an unsigned 32-bit integer value.","nodes":[{"pos":[0,131],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> structure using an unsigned 32-bit integer value.","source":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using an unsigned 32-bit integer value."}],"pos":[53760,53892],"yaml":true},{"content":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"pos":[0,108],"content":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.","nodes":[{"content":"There is no loss of precision when instantiating a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> using this constructor.","pos":[0,108],"source":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor."}]},{"pos":[115,324],"content":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that results from calling this constructor is identical to the value that results from assigning a <ph id=\"ph2\">&lt;xref:System.UInt32&gt;</ph> value to a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.","pos":[0,209],"source":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>."}]}],"pos":[53903,54232],"yaml":true,"extradata":"MT"},{"content":"An unsigned 32-bit integer value.","nodes":[{"pos":[0,33],"content":"An unsigned 32-bit integer value.","nodes":[{"content":"An unsigned 32-bit integer value.","pos":[0,33]}]}],"pos":[55122,55156],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure with an unsigned 64-bit integer value.","nodes":[{"pos":[0,130],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> structure with an unsigned 64-bit integer value.","source":"Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure with an unsigned 64-bit integer value."}],"pos":[56779,56910],"yaml":true},{"content":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"pos":[0,108],"content":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.","nodes":[{"content":"There is no loss of precision when instantiating a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> using this constructor.","pos":[0,108],"source":"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor."}]},{"pos":[115,324],"content":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that results from calling this constructor is identical to the value that results from assigning a <ph id=\"ph2\">&lt;xref:System.UInt64&gt;</ph> value to a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.","pos":[0,209],"source":"The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>."}]}],"pos":[56921,57250],"yaml":true,"extradata":"MT"},{"content":"An unsigned 64-bit integer.","nodes":[{"pos":[0,27],"content":"An unsigned 64-bit integer.","nodes":[{"content":"An unsigned 64-bit integer.","pos":[0,27]}]}],"pos":[57979,58007],"yaml":true},{"content":"Gets the absolute value of a <xref href=\"System.Numerics.BigInteger\"></xref> object.","nodes":[{"pos":[0,84],"content":"Gets the absolute value of a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the absolute value of a <xref href=\"System.Numerics.BigInteger\"></xref> object."}],"pos":[59664,59749],"yaml":true},{"content":"The absolute value of a number is that number without its sign, as shown in the following table.  \n  \n|`value` parameter|Return value|  \n|-----------------------|------------------|  \n|`value` >= 0|`value`|  \n|`value` < 0|`value` * -1|  \n  \n The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=fullName> method for the primitive numeric types.","nodes":[{"pos":[0,96],"content":"The absolute value of a number is that number without its sign, as shown in the following table.","nodes":[{"content":"The absolute value of a number is that number without its sign, as shown in the following table.","pos":[0,96]}]},{"pos":[103,120],"content":"<ph id=\"ph1\">`value`</ph> parameter","source":"`value` parameter"},{"pos":[121,133],"content":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[185,197],"content":"<ph id=\"ph1\">`value`</ph> &gt;= 0","source":"`value` >= 0"},{"pos":[210,221],"content":"<ph id=\"ph1\">`value`</ph> &lt; 0","source":"`value` < 0"},{"pos":[222,234],"content":"<ph id=\"ph1\">`value`</ph> * -1","source":"`value` * -1"},{"pos":[242,405],"content":"The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=fullName> method for the primitive numeric types.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Abs%2A&gt;</ph> method is equivalent to the <ph id=\"ph2\">&lt;xref:System.Math.Abs%2A?displayProperty=fullName&gt;</ph> method for the primitive numeric types.","pos":[0,163],"source":"The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=fullName> method for the primitive numeric types."}]}],"pos":[59760,60175],"yaml":true,"extradata":"MT"},{"content":"A number.","nodes":[{"pos":[0,9],"content":"A number.","nodes":[{"content":"A number.","pos":[0,9]}]}],"pos":[61024,61034],"yaml":true},{"content":"The absolute value of <code>value</code>.","nodes":[{"pos":[0,41],"content":"The absolute value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The absolute value of <code>value</code>."}],"pos":[61104,61146],"yaml":true},{"content":"Adds two <xref href=\"System.Numerics.BigInteger\"></xref> values and returns the result.","nodes":[{"pos":[0,87],"content":"Adds two <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values and returns the result.","source":"Adds two <xref href=\"System.Numerics.BigInteger\"></xref> values and returns the result."}],"pos":[62785,62873],"yaml":true},{"content":"Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values.  \n  \n The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example.  \n  \n [!code-csharp[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]","nodes":[{"pos":[0,198],"content":"Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values.","nodes":[{"content":"Languages that do not support operator overloading or custom operators can use the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Add%2A&gt;</ph> method to perform addition using <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,198],"source":"Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values."}]},{"pos":[205,454],"content":"The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Add%2A&gt;</ph> method is a useful substitute for the addition operator when instantiating a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> variable by assigning it a sum that results from addition, as shown in the following example.","pos":[0,249],"source":"The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example."}]},{"pos":[461,810],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.OperationMethods#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.OperationMethods#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]"}],"pos":[62884,63702],"yaml":true,"extradata":"MT"},{"content":"The first value to add.","nodes":[{"pos":[0,23],"content":"The first value to add.","nodes":[{"content":"The first value to add.","pos":[0,23]}]}],"pos":[63928,63952],"yaml":true},{"content":"The second value to add.","nodes":[{"pos":[0,24],"content":"The second value to add.","nodes":[{"content":"The second value to add.","pos":[0,24]}]}],"pos":[64026,64051],"yaml":true},{"content":"The sum of <code>left</code> and <code>right</code>.","nodes":[{"pos":[0,52],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The sum of <code>left</code> and <code>right</code>."}],"pos":[64121,64174],"yaml":true},{"content":"Compares two <xref href=\"System.Numerics.BigInteger\"></xref> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.","nodes":[{"pos":[0,187],"content":"Compares two <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.","source":"Compares two <xref href=\"System.Numerics.BigInteger\"></xref> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value."}],"pos":[65837,66025],"yaml":true},{"content":"Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers. The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits. The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.  \n  \n [!code-csharp[System.Numerics.BigInteger.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]","nodes":[{"pos":[0,472],"content":"Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers. The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits. The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.","nodes":[{"content":"Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers. The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits. The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.","pos":[0,472],"nodes":[{"content":"Although the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> type has no fixed range, comparisons of <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers.","pos":[0,235],"source":"Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers."},{"content":"The following example compares two <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values that differ by one and that each have 1,896 digits.","pos":[236,363],"source":" The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Compare%2A&gt;</ph> method correctly reports that the two values are not equal.","pos":[364,472],"source":" The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal."}]}]},{"pos":[479,790],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Compare#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Compare#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]"}],"pos":[66036,66832],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[67039,67067],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[67141,67170],"yaml":true},{"content":"A signed integer that indicates the relative values of <code>left</code> and <code>right</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>left</code> is less than <code>right</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>left</code> equals <code>right</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>left</code> is greater than <code>right</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,129],"content":"A signed integer that indicates the relative values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A signed integer that indicates the relative values of <code>left</code> and <code>right</code>, as shown in the following table."},{"pos":[136,547],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>left</code> is less than <code>right</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>left</code> equals <code>right</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>left</code> is greater than <code>right</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"Less than zero","pos":[95,114],"source":" Less than zero  \n  \n "},{"content":"<code>left</code> is less than <code>right</code>.  \n  \n ","pos":[125,182],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph>.","pos":[0,50],"source":"<code>left</code> is less than <code>right</code>."}]},{"content":"Zero","pos":[201,210],"source":" Zero  \n  \n "},{"content":"<code>left</code> equals <code>right</code>.  \n  \n ","pos":[221,272],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> equals <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph>.","pos":[0,44],"source":"<code>left</code> equals <code>right</code>."}]},{"content":"Greater than zero","pos":[291,313],"source":" Greater than zero  \n  \n "},{"content":"<code>left</code> is greater than <code>right</code>.  \n  \n ","pos":[324,384],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;left&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;right&lt;/code&gt;</ph>.","pos":[0,53],"source":"<code>left</code> is greater than <code>right</code>."}]}]}],"pos":[67226,67793],"yaml":true},{"content":"Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.","nodes":[{"pos":[0,207],"content":"Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.","nodes":[{"content":"Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.","pos":[0,207]}]}],"pos":[69304,69512],"yaml":true},{"content":"The unsigned 64-bit integer to compare.","nodes":[{"pos":[0,39],"content":"The unsigned 64-bit integer to compare.","nodes":[{"content":"The unsigned 64-bit integer to compare.","pos":[0,39]}]}],"pos":[69693,69733],"yaml":true},{"content":"A signed integer that indicates the relative value of this instance and <code>other</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>other</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,124],"content":"A signed integer that indicates the relative value of this instance and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A signed integer that indicates the relative value of this instance and <code>other</code>, as shown in the following table."},{"pos":[131,563],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>other</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Description","pos":[52,68],"source":" Description  \n  \n "},{"content":"Less than zero","pos":[104,123],"source":" Less than zero  \n  \n "},{"content":" The current instance is less than <code>other</code>.  \n  \n ","pos":[134,195],"nodes":[{"content":"The current instance is less than <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,54],"source":" The current instance is less than <code>other</code>."}]},{"content":"Zero","pos":[214,223],"source":" Zero  \n  \n "},{"content":" The current instance equals <code>other</code>.  \n  \n ","pos":[234,289],"nodes":[{"content":"The current instance equals <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,48],"source":" The current instance equals <code>other</code>."}]},{"content":"Greater than zero","pos":[308,330],"source":" Greater than zero  \n  \n "},{"content":" The current instance is greater than <code>other</code>.  \n  \n ","pos":[341,405],"nodes":[{"content":"The current instance is greater than <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,57],"source":" The current instance is greater than <code>other</code>."}]}]}],"pos":[69789,70372],"yaml":true},{"content":"Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.","nodes":[{"pos":[0,192],"content":"Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.","nodes":[{"content":"Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.","pos":[0,192]}]}],"pos":[71938,72131],"yaml":true},{"content":"This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> method. It is used by non-generic collection objects to order the items in the collection.  \n  \n The `obj` parameter must be one of the following:  \n  \n-   An object whose run-time type is <xref:System.Numerics.BigInteger>.  \n  \n-   An <xref:System.Object> variable whose value is `null`. If the value of the `obj` parameter is `null`, the method returns 1, which indicates that that the current instance is greater than `obj`.","nodes":[{"pos":[0,244],"content":"This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> method. It is used by non-generic collection objects to order the items in the collection.","nodes":[{"content":"This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> method. It is used by non-generic collection objects to order the items in the collection.","pos":[0,244],"nodes":[{"content":"This overload of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%2A&gt;</ph> method implements the <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,161],"source":"This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> method."},{"content":"It is used by non-generic collection objects to order the items in the collection.","pos":[162,244]}]}]},{"pos":[251,300],"content":"The <ph id=\"ph1\">`obj`</ph> parameter must be one of the following:","source":"The `obj` parameter must be one of the following:"},{"pos":[310,377],"content":"An object whose run-time type is <xref:System.Numerics.BigInteger>.","nodes":[{"content":"An object whose run-time type is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph>.","pos":[0,67],"source":"An object whose run-time type is <xref:System.Numerics.BigInteger>."}]},{"pos":[387,581],"content":"An <xref:System.Object> variable whose value is `null`. If the value of the `obj` parameter is `null`, the method returns 1, which indicates that that the current instance is greater than `obj`.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> variable whose value is <ph id=\"ph2\">`null`</ph>.","pos":[0,55],"source":"An <xref:System.Object> variable whose value is `null`."},{"content":"If the value of the <ph id=\"ph1\">`obj`</ph> parameter is <ph id=\"ph2\">`null`</ph>, the method returns 1, which indicates that that the current instance is greater than <ph id=\"ph3\">`obj`</ph>.","pos":[56,194],"source":" If the value of the `obj` parameter is `null`, the method returns 1, which indicates that that the current instance is greater than `obj`."}]}],"pos":[72142,72732],"yaml":true,"extradata":"MT"},{"content":"The object to compare.","nodes":[{"pos":[0,22],"content":"The object to compare.","nodes":[{"content":"The object to compare.","pos":[0,22]}]}],"pos":[73403,73426],"yaml":true},{"content":"A signed integer that indicates the relationship of the current instance to the <code>obj</code> parameter, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>obj</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>obj</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>obj</code>, or the <code>obj</code> parameter is `null`.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,140],"content":"A signed integer that indicates the relationship of the current instance to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter, as shown in the following table.","source":"A signed integer that indicates the relationship of the current instance to the <code>obj</code> parameter, as shown in the following table."},{"pos":[147,618],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>obj</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>obj</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>obj</code>, or the <code>obj</code> parameter is `null`.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Description","pos":[52,68],"source":" Description  \n  \n "},{"content":"Less than zero","pos":[104,123],"source":" Less than zero  \n  \n "},{"content":" The current instance is less than <code>obj</code>.  \n  \n ","pos":[134,193],"nodes":[{"content":"The current instance is less than <ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph>.","pos":[1,52],"source":" The current instance is less than <code>obj</code>."}]},{"content":"Zero","pos":[212,221],"source":" Zero  \n  \n "},{"content":" The current instance equals <code>obj</code>.  \n  \n ","pos":[232,285],"nodes":[{"content":"The current instance equals <ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph>.","pos":[1,46],"source":" The current instance equals <code>obj</code>."}]},{"content":"Greater than zero","pos":[304,326],"source":" Greater than zero  \n  \n "},{"content":" The current instance is greater than <code>obj</code>, or the <code>obj</code> parameter is `null`.  \n  \n ","pos":[337,444],"nodes":[{"content":"The current instance is greater than <ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph>, or the <ph id=\"ph2\">&lt;code&gt;obj&lt;/code&gt;</ph> parameter is <ph id=\"ph3\">`null`</ph>.","pos":[1,100],"source":" The current instance is greater than <code>obj</code>, or the <code>obj</code> parameter is `null`."}]}]}],"pos":[73482,74120],"yaml":true},{"content":"<code>obj</code> is not a <xref href=\"System.Numerics.BigInteger\"></xref>.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">&lt;code&gt;obj&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph>.","source":"<code>obj</code> is not a <xref href=\"System.Numerics.BigInteger\"></xref>."}],"pos":[74278,74353],"yaml":true},{"content":"Compares this instance to a second <xref href=\"System.Numerics.BigInteger\"></xref> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.","nodes":[{"pos":[0,230],"content":"Compares this instance to a second <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.","source":"Compares this instance to a second <xref href=\"System.Numerics.BigInteger\"></xref> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object."}],"pos":[75586,75817],"yaml":true},{"content":"This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> method. It is used by generic collection objects to order the items in the collection.","nodes":[{"pos":[0,244],"content":"This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> method. It is used by generic collection objects to order the items in the collection.","nodes":[{"content":"This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> method. It is used by generic collection objects to order the items in the collection.","pos":[0,244],"nodes":[{"content":"This overload of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%2A&gt;</ph> method implements the <ph id=\"ph2\">&lt;xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,165],"source":"This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> method."},{"content":"It is used by generic collection objects to order the items in the collection.","pos":[166,244]}]}]}],"pos":[75828,76073],"yaml":true,"extradata":"MT"},{"content":"The object to compare.","nodes":[{"pos":[0,22],"content":"The object to compare.","nodes":[{"content":"The object to compare.","pos":[0,22]}]}],"pos":[77853,77876],"yaml":true},{"content":"A signed integer value that indicates the relationship of this instance to <code>other</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>other</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,127],"content":"A signed integer value that indicates the relationship of this instance to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A signed integer value that indicates the relationship of this instance to <code>other</code>, as shown in the following table."},{"pos":[134,566],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>other</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Description","pos":[52,68],"source":" Description  \n  \n "},{"content":"Less than zero","pos":[104,123],"source":" Less than zero  \n  \n "},{"content":" The current instance is less than <code>other</code>.  \n  \n ","pos":[134,195],"nodes":[{"content":"The current instance is less than <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,54],"source":" The current instance is less than <code>other</code>."}]},{"content":"Zero","pos":[214,223],"source":" Zero  \n  \n "},{"content":" The current instance equals <code>other</code>.  \n  \n ","pos":[234,289],"nodes":[{"content":"The current instance equals <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,48],"source":" The current instance equals <code>other</code>."}]},{"content":"Greater than zero","pos":[308,330],"source":" Greater than zero  \n  \n "},{"content":" The current instance is greater than <code>other</code>.  \n  \n ","pos":[341,405],"nodes":[{"content":"The current instance is greater than <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,57],"source":" The current instance is greater than <code>other</code>."}]}]}],"pos":[77932,78518],"yaml":true},{"content":"Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.","nodes":[{"pos":[0,202],"content":"Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.","nodes":[{"content":"Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.","pos":[0,202]}]}],"pos":[80025,80228],"yaml":true},{"content":"If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method is called.","nodes":[{"pos":[0,299],"content":"If <ph id=\"ph1\">`other`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the <ph id=\"ph9\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29&gt;</ph> method is called.","source":"If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method is called."}],"pos":[80239,80539],"yaml":true,"extradata":"MT"},{"content":"The signed 64-bit integer to compare.","nodes":[{"pos":[0,37],"content":"The signed 64-bit integer to compare.","nodes":[{"content":"The signed 64-bit integer to compare.","pos":[0,37]}]}],"pos":[81170,81208],"yaml":true},{"content":"A signed integer value that indicates the relationship of this instance to <code>other</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>other</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,127],"content":"A signed integer value that indicates the relationship of this instance to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A signed integer value that indicates the relationship of this instance to <code>other</code>, as shown in the following table."},{"pos":[134,566],"content":"<table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>other</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Return value","pos":[23,40],"source":" Return value  \n  \n "},{"content":"Description","pos":[52,68],"source":" Description  \n  \n "},{"content":"Less than zero","pos":[104,123],"source":" Less than zero  \n  \n "},{"content":" The current instance is less than <code>other</code>.  \n  \n ","pos":[134,195],"nodes":[{"content":"The current instance is less than <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,54],"source":" The current instance is less than <code>other</code>."}]},{"content":"Zero","pos":[214,223],"source":" Zero  \n  \n "},{"content":" The current instance equals <code>other</code>.  \n  \n ","pos":[234,289],"nodes":[{"content":"The current instance equals <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,48],"source":" The current instance equals <code>other</code>."}]},{"content":"Greater than zero","pos":[308,330],"source":" Greater than zero  \n  \n "},{"content":" The current instance is greater than <code>other</code>.  \n  \n ","pos":[341,405],"nodes":[{"content":"The current instance is greater than <ph id=\"ph1\">&lt;code&gt;other&lt;/code&gt;</ph>.","pos":[1,57],"source":" The current instance is greater than <code>other</code>."}]}]}],"pos":[81264,81850],"yaml":true},{"content":"Divides one <xref href=\"System.Numerics.BigInteger\"></xref> value by another and returns the result.","nodes":[{"pos":[0,100],"content":"Divides one <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value by another and returns the result.","source":"Divides one <xref href=\"System.Numerics.BigInteger\"></xref> value by another and returns the result."}],"pos":[83513,83614],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded. To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method. To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.  \n  \n The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading. Its behavior is identical to division using the division operator.","nodes":[{"pos":[0,357],"content":"The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded. To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method. To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.","nodes":[{"content":"The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded. To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method. To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.","pos":[0,357],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Divide%2A&gt;</ph> method performs integer division; any remainder that results from the division is discarded.","pos":[0,140],"source":"The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded."},{"content":"To perform integer division while preserving the remainder, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.DivRem%2A&gt;</ph> method.","pos":[141,261],"source":" To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method."},{"content":"To retrieve only the remainder, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Remainder%2A&gt;</ph> method.","pos":[262,357],"source":" To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method."}]}]},{"pos":[364,552],"content":"The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading. Its behavior is identical to division using the division operator.","nodes":[{"content":"The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading. Its behavior is identical to division using the division operator.","pos":[0,188],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Divide%2A&gt;</ph> method can be used by languages that do not support operator overloading.","pos":[0,121],"source":"The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading."},{"content":"Its behavior is identical to division using the division operator.","pos":[122,188]}]}]}],"pos":[83625,84182],"yaml":true,"extradata":"MT"},{"content":"The value to be divided.","nodes":[{"pos":[0,24],"content":"The value to be divided.","nodes":[{"content":"The value to be divided.","pos":[0,24]}]}],"pos":[85056,85081],"yaml":true},{"content":"The value to divide by.","nodes":[{"pos":[0,23],"content":"The value to divide by.","nodes":[{"content":"The value to divide by.","pos":[0,23]}]}],"pos":[85157,85181],"yaml":true},{"content":"The quotient of the division.","nodes":[{"pos":[0,29],"content":"The quotient of the division.","nodes":[{"content":"The quotient of the division.","pos":[0,29]}]}],"pos":[85251,85281],"yaml":true},{"content":"<code>divisor</code> is 0 (zero).","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;divisor&lt;/code&gt;</ph> is 0 (zero).","source":"<code>divisor</code> is 0 (zero)."}],"pos":[85444,85478],"yaml":true},{"content":"Divides one <xref href=\"System.Numerics.BigInteger\"></xref> value by another, returns the result, and returns the remainder in an output parameter.","nodes":[{"pos":[0,147],"content":"Divides one <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value by another, returns the result, and returns the remainder in an output parameter.","source":"Divides one <xref href=\"System.Numerics.BigInteger\"></xref> value by another, returns the result, and returns the remainder in an output parameter."}],"pos":[87210,87358],"yaml":true},{"content":"This method preserves both the quotient and the remainder that results from integer division. If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.  \n  \n The sign of the returned `remainder` value is the same as the sign of the `dividend` parameter.  \n  \n The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,330],"content":"This method preserves both the quotient and the remainder that results from integer division. If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.","nodes":[{"content":"This method preserves both the quotient and the remainder that results from integer division. If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.","pos":[0,330],"nodes":[{"content":"This method preserves both the quotient and the remainder that results from integer division.","pos":[0,93]},{"content":"If you are not interested in the remainder, use the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Divide%2A&gt;</ph> method or the division operator; if you are only interested in the remainder, use the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Remainder%2A&gt;</ph> method.","pos":[94,330],"source":" If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method."}]}]},{"pos":[337,432],"content":"The sign of the returned <ph id=\"ph1\">`remainder`</ph> value is the same as the sign of the <ph id=\"ph2\">`dividend`</ph> parameter.","source":"The sign of the returned `remainder` value is the same as the sign of the `dividend` parameter."},{"pos":[439,599],"content":"The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=fullName> method.","nodes":[{"content":"The behavior of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.DivRem%2A&gt;</ph> method is identical to that of the <ph id=\"ph2\">&lt;xref:System.Math.DivRem%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,160],"source":"The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=fullName> method."}]}],"pos":[87369,87975],"yaml":true,"extradata":"MT"},{"content":"The value to be divided.","nodes":[{"pos":[0,24],"content":"The value to be divided.","nodes":[{"content":"The value to be divided.","pos":[0,24]}]}],"pos":[88891,88916],"yaml":true},{"content":"The value to divide by.","nodes":[{"pos":[0,23],"content":"The value to divide by.","nodes":[{"content":"The value to divide by.","pos":[0,23]}]}],"pos":[88992,89016],"yaml":true},{"content":"When this method returns, contains a <xref href=\"System.Numerics.BigInteger\"></xref> value that represents the remainder from the division. This parameter is passed uninitialized.","nodes":[{"pos":[0,179],"content":"When this method returns, contains a <xref href=\"System.Numerics.BigInteger\"></xref> value that represents the remainder from the division. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value that represents the remainder from the division.","pos":[0,139],"source":"When this method returns, contains a <xref href=\"System.Numerics.BigInteger\"></xref> value that represents the remainder from the division."},{"content":"This parameter is passed uninitialized.","pos":[140,179]}]}],"pos":[89094,89274],"yaml":true},{"content":"The quotient of the division.","nodes":[{"pos":[0,29],"content":"The quotient of the division.","nodes":[{"content":"The quotient of the division.","pos":[0,29]}]}],"pos":[89344,89374],"yaml":true},{"content":"<code>divisor</code> is 0 (zero).","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;divisor&lt;/code&gt;</ph> is 0 (zero).","source":"<code>divisor</code> is 0 (zero)."}],"pos":[89537,89571],"yaml":true},{"content":"Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.","nodes":[{"pos":[0,108],"content":"Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.","nodes":[{"content":"Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.","pos":[0,108]}]}],"pos":[90993,91102],"yaml":true},{"content":"If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the method is called.  \n  \n To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method.","nodes":[{"pos":[0,237],"content":"If <ph id=\"ph1\">`other`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the method is called.","source":"If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the method is called."},{"pos":[244,439],"content":"To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method.","nodes":[{"content":"To determine the relationship between the two objects instead of just testing for equality, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> method.","pos":[0,195],"source":"To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method."}]}],"pos":[91113,91557],"yaml":true,"extradata":"MT"},{"content":"The signed 64-bit integer value to compare.","nodes":[{"pos":[0,43],"content":"The signed 64-bit integer value to compare.","nodes":[{"content":"The signed 64-bit integer value to compare.","pos":[0,43]}]}],"pos":[92612,92656],"yaml":true},{"content":"`true` if the signed 64-bit integer and the current instance have the same value; otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if the signed 64-bit integer and the current instance have the same value; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the signed 64-bit integer and the current instance have the same value; otherwise, `false`."}],"pos":[92714,92818],"yaml":true},{"content":"Returns a value that indicates whether the current instance and a specified <xref href=\"System.Numerics.BigInteger\"></xref> object have the same value.","nodes":[{"pos":[0,151],"content":"Returns a value that indicates whether the current instance and a specified <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object have the same value.","source":"Returns a value that indicates whether the current instance and a specified <xref href=\"System.Numerics.BigInteger\"></xref> object have the same value."}],"pos":[94361,94513],"yaml":true},{"content":"This method implements the <xref:System.IEquatable%601> interface and performs slightly better than <xref:System.Numerics.BigInteger.Equals%28System.Object%29> because it does not have to convert the `other` parameter to a <xref:System.Numerics.BigInteger> object.  \n  \n To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=fullName> method.","nodes":[{"pos":[0,264],"content":"This method implements the <ph id=\"ph1\">&lt;xref:System.IEquatable%601&gt;</ph> interface and performs slightly better than <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Equals%28System.Object%29&gt;</ph> because it does not have to convert the <ph id=\"ph3\">`other`</ph> parameter to a <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object.","source":"This method implements the <xref:System.IEquatable%601> interface and performs slightly better than <xref:System.Numerics.BigInteger.Equals%28System.Object%29> because it does not have to convert the `other` parameter to a <xref:System.Numerics.BigInteger> object."},{"pos":[271,514],"content":"To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=fullName> method.","nodes":[{"content":"To determine the relationship between the two <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> objects instead of just testing for equality, call the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph> method.","pos":[0,243],"source":"To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=fullName> method."}]}],"pos":[94524,95043],"yaml":true,"extradata":"MT"},{"content":"The object to compare.","nodes":[{"pos":[0,22],"content":"The object to compare.","nodes":[{"content":"The object to compare.","pos":[0,22]}]}],"pos":[95984,96007],"yaml":true},{"content":"`true` if this <xref href=\"System.Numerics.BigInteger\"></xref> object and <code>other</code> have the same value; otherwise, `false`.","nodes":[{"pos":[0,133],"content":"<ph id=\"ph1\">`true`</ph> if this <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> have the same value; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if this <xref href=\"System.Numerics.BigInteger\"></xref> object and <code>other</code> have the same value; otherwise, `false`."}],"pos":[96065,96201],"yaml":true},{"content":"Returns a value that indicates whether the current instance and a specified object have the same value.","nodes":[{"pos":[0,103],"content":"Returns a value that indicates whether the current instance and a specified object have the same value.","nodes":[{"content":"Returns a value that indicates whether the current instance and a specified object have the same value.","pos":[0,103]}]}],"pos":[97709,97813],"yaml":true},{"content":"If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`. The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.  \n  \n To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method.","nodes":[{"pos":[0,233],"content":"If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`. The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.","nodes":[{"content":"If the <ph id=\"ph1\">`obj`</ph> argument is not a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value, the method returns <ph id=\"ph3\">`false`</ph>.","pos":[0,99],"source":"If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`."},{"content":"The method returns <ph id=\"ph1\">`true`</ph> only if <ph id=\"ph2\">`obj`</ph> is a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> instance whose value is equal to the current instance.","pos":[100,233],"source":" The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance."}]},{"pos":[240,411],"content":"To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method.","nodes":[{"content":"To determine the relationship between the two objects instead of just testing for equality, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Object%29&gt;</ph> method.","pos":[0,171],"source":"To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method."}]}],"pos":[97824,98240],"yaml":true,"extradata":"MT"},{"content":"The object to compare.","nodes":[{"pos":[0,22],"content":"The object to compare.","nodes":[{"content":"The object to compare.","pos":[0,22]}]}],"pos":[99181,99204],"yaml":true},{"content":"`true` if the <code>obj</code> argument is a <xref href=\"System.Numerics.BigInteger\"></xref> object, and its value is equal to the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> instance; otherwise, `false`.","nodes":[{"pos":[0,229],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is a <ph id=\"ph3\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object, and its value is equal to the value of the current <ph id=\"ph4\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> instance; otherwise, <ph id=\"ph5\">`false`</ph>.","source":"`true` if the <code>obj</code> argument is a <xref href=\"System.Numerics.BigInteger\"></xref> object, and its value is equal to the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> instance; otherwise, `false`."}],"pos":[99262,99494],"yaml":true},{"content":"Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.","nodes":[{"pos":[0,111],"content":"Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.","nodes":[{"content":"Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.","pos":[0,111]}]}],"pos":[100986,101098],"yaml":true},{"content":"To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method.","nodes":[{"pos":[0,196],"content":"To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method.","nodes":[{"content":"To determine the relationship between the two objects instead of just testing for equality, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method.","pos":[0,196],"source":"To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method."}]}],"pos":[101109,101306],"yaml":true,"extradata":"MT"},{"content":"The unsigned 64-bit integer to compare.","nodes":[{"pos":[0,39],"content":"The unsigned 64-bit integer to compare.","nodes":[{"content":"The unsigned 64-bit integer to compare.","pos":[0,39]}]}],"pos":[102258,102298],"yaml":true},{"content":"`true` if the current instance and the unsigned 64-bit integer have the same value; otherwise, `false`.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">`true`</ph> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current instance and the unsigned 64-bit integer have the same value; otherwise, `false`."}],"pos":[102356,102462],"yaml":true},{"content":"Returns the hash code for the current <xref href=\"System.Numerics.BigInteger\"></xref> object.","nodes":[{"pos":[0,93],"content":"Returns the hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns the hash code for the current <xref href=\"System.Numerics.BigInteger\"></xref> object."}],"pos":[103990,104084],"yaml":true},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[104218,104253],"yaml":true},{"content":"Finds the greatest common divisor of two <xref href=\"System.Numerics.BigInteger\"></xref> values.","nodes":[{"pos":[0,96],"content":"Finds the greatest common divisor of two <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values.","source":"Finds the greatest common divisor of two <xref href=\"System.Numerics.BigInteger\"></xref> values."}],"pos":[106024,106121],"yaml":true},{"content":"The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder.  \n  \n If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1. If either parameter is zero, the method returns the absolute value of the non-zero parameter. If both values are zero, the method returns zero.  \n  \n> [!NOTE]\n>  Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation.  \n  \n The value returned by the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method is always positive regardless of the sign of the `left` and `right` parameters.","nodes":[{"pos":[0,155],"content":"The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder.","nodes":[{"content":"The greatest common divisor is the largest number into which the two <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values can be divided without returning a remainder.","pos":[0,155],"source":"The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder."}]},{"pos":[162,453],"content":"If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1. If either parameter is zero, the method returns the absolute value of the non-zero parameter. If both values are zero, the method returns zero.","nodes":[{"content":"If the <ph id=\"ph1\">`left`</ph> and <ph id=\"ph2\">`right`</ph> parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1.","pos":[0,147],"source":"If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1."},{"content":"If either parameter is zero, the method returns the absolute value of the non-zero parameter.","pos":[148,241]},{"content":"If both values are zero, the method returns zero.","pos":[242,291]}]},{"pos":[461,592],"content":"[!NOTE]\n Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation.","leadings":["","> "],"nodes":[{"content":"Computing the greatest common divisor of very large values of <ph id=\"ph1\">`left`</ph> and <ph id=\"ph2\">`right`</ph> can be a very time-consuming operation.","pos":[9,129],"source":" Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation."}]},{"pos":[599,770],"content":"The value returned by the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A&gt;</ph> method is always positive regardless of the sign of the <ph id=\"ph2\">`left`</ph> and <ph id=\"ph3\">`right`</ph> parameters.","source":"The value returned by the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method is always positive regardless of the sign of the `left` and `right` parameters."}],"pos":[106132,106912],"yaml":true,"extradata":"MT"},{"content":"The first value.","nodes":[{"pos":[0,16],"content":"The first value.","nodes":[{"content":"The first value.","pos":[0,16]}]}],"pos":[107822,107839],"yaml":true},{"content":"The second value.","nodes":[{"pos":[0,17],"content":"The second value.","nodes":[{"content":"The second value.","pos":[0,17]}]}],"pos":[107913,107931],"yaml":true},{"content":"The greatest common divisor of <code>left</code> and <code>right</code>.","nodes":[{"pos":[0,72],"content":"The greatest common divisor of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The greatest common divisor of <code>left</code> and <code>right</code>."}],"pos":[108001,108074],"yaml":true},{"content":"Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is an even number.","nodes":[{"pos":[0,116],"content":"Indicates whether the value of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object is an even number.","source":"Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is an even number."}],"pos":[109514,109631],"yaml":true},{"content":"This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two. It is equivalent to the following expression:  \n  \n```csharp  \nvalue % 2 == 0;  \n```  \n  \n```vb  \nvalue Mod 2 = 0  \n```  \n  \n If the value of the current <xref:System.Numerics.BigInteger> object is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>, the property returns `true`.","nodes":[{"pos":[0,177],"content":"This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two. It is equivalent to the following expression:","nodes":[{"content":"This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two. It is equivalent to the following expression:","pos":[0,177],"nodes":[{"content":"This property is a convenience feature that indicates whether a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value is evenly divisible by two.","pos":[0,131],"source":"This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two."},{"content":"It is equivalent to the following expression:","pos":[132,177]}]}]},{"pos":[258,426],"content":"If the value of the current <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object is <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName&gt;</ph>, the property returns <ph id=\"ph3\">`true`</ph>.","source":"If the value of the current <xref:System.Numerics.BigInteger> object is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>, the property returns `true`."}],"pos":[109642,110081],"yaml":true,"extradata":"MT"},{"content":"`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is an even number; otherwise, `false`.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">`true`</ph> if the value of the <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object is an even number; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is an even number; otherwise, `false`."}],"pos":[110190,110313],"yaml":true},{"content":"Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.One\"></xref>.","nodes":[{"pos":[0,153],"content":"Indicates whether the value of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object is <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger.One\"&gt;&lt;/xref&gt;</ph>.","source":"Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.One\"></xref>."}],"pos":[111748,111902],"yaml":true},{"content":"This property offers significantly better performance than other comparisons with one, such as `thisBigInteger.Equals(BigInteger.One)`.","nodes":[{"pos":[0,135],"content":"This property offers significantly better performance than other comparisons with one, such as <ph id=\"ph1\">`thisBigInteger.Equals(BigInteger.One)`</ph>.","source":"This property offers significantly better performance than other comparisons with one, such as `thisBigInteger.Equals(BigInteger.One)`."}],"pos":[111913,112049],"yaml":true,"extradata":"MT"},{"content":"`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.One\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,157],"content":"<ph id=\"ph1\">`true`</ph> if the value of the <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object is <ph id=\"ph3\">&lt;xref href=\"System.Numerics.BigInteger.One\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.One\"></xref>; otherwise, `false`."}],"pos":[112157,112317],"yaml":true},{"content":"Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is a power of two.","nodes":[{"pos":[0,116],"content":"Indicates whether the value of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object is a power of two.","source":"Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is a power of two."}],"pos":[113777,113894],"yaml":true},{"content":"This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set. This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two. It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0.","nodes":[{"pos":[0,361],"content":"This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set. This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two. It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0.","nodes":[{"content":"This property determines whether a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value has a single non-zero bit set.","pos":[0,105],"source":"This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set."},{"content":"This means that it returns <ph id=\"ph1\">`true`</ph> if the value of the current <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object is 1 (that is, 2<bpt id=\"p1\">&lt;sup&gt;</bpt>0<ept id=\"p1\">&lt;/sup&gt;</ept>) or any greater power of two.","pos":[106,267],"source":" This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two."},{"content":"It returns <ph id=\"ph1\">`false`</ph> if the value of the current <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object is 0.","pos":[268,361],"source":" It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0."}]}],"pos":[113905,114267],"yaml":true,"extradata":"MT"},{"content":"`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is a power of two; otherwise, `false`.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">`true`</ph> if the value of the <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object is a power of two; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is a power of two; otherwise, `false`."}],"pos":[114382,114505],"yaml":true},{"content":"Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.Zero\"></xref>.","nodes":[{"pos":[0,154],"content":"Indicates whether the value of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object is <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger.Zero\"&gt;&lt;/xref&gt;</ph>.","source":"Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.Zero\"></xref>."}],"pos":[115952,116107],"yaml":true},{"content":"This property offers significantly better performance than `BigInteger.Equals(BigInteger.Zero)`.","nodes":[{"pos":[0,96],"content":"This property offers significantly better performance than <ph id=\"ph1\">`BigInteger.Equals(BigInteger.Zero)`</ph>.","source":"This property offers significantly better performance than `BigInteger.Equals(BigInteger.Zero)`."}],"pos":[116118,116215],"yaml":true,"extradata":"MT"},{"content":"`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.Zero\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,158],"content":"<ph id=\"ph1\">`true`</ph> if the value of the <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object is <ph id=\"ph3\">&lt;xref href=\"System.Numerics.BigInteger.Zero\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.Zero\"></xref>; otherwise, `false`."}],"pos":[116324,116485],"yaml":true},{"content":"Returns the natural (base `e`) logarithm of a specified number.","nodes":[{"pos":[0,63],"content":"Returns the natural (base <ph id=\"ph1\">`e`</ph>) logarithm of a specified number.","source":"Returns the natural (base `e`) logarithm of a specified number."}],"pos":[118010,118074],"yaml":true},{"content":"The `value` parameter is specified as a base 10 number.  \n  \n The precise return value of this method depends on the sign of `value`, as the following table shows.  \n  \n|Sign of `value` parameter|Return value|  \n|-------------------------------|------------------|  \n|Positive|The natural logarithm of `value`; that is, ln `value`, or log e`value`.|  \n|Zero|<xref:System.Double.NegativeInfinity>.|  \n|Negative|<xref:System.Double.NaN>.|  \n  \n To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method. To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.  \n  \n You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=fullName> method. Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=fullName> if the result is greater than <xref:System.Double.MaxValue?displayProperty=fullName>. The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.  \n  \n [!code-csharp[System.Numerics.BigInteger.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)] \n [!code-vb[System.Numerics.BigInteger.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]   \n  \n This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=fullName> method for the primitive numeric types.","nodes":[{"pos":[0,55],"content":"The <ph id=\"ph1\">`value`</ph> parameter is specified as a base 10 number.","source":"The `value` parameter is specified as a base 10 number."},{"pos":[62,163],"content":"The precise return value of this method depends on the sign of <ph id=\"ph1\">`value`</ph>, as the following table shows.","source":"The precise return value of this method depends on the sign of `value`, as the following table shows."},{"pos":[170,195],"content":"Sign of <ph id=\"ph1\">`value`</ph> parameter","source":"Sign of `value` parameter"},{"pos":[196,208],"content":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[268,276],"content":"Positive","nodes":[{"content":"Positive","pos":[0,8]}]},{"pos":[277,348],"content":"The natural logarithm of <ph id=\"ph1\">`value`</ph>; that is, ln <ph id=\"ph2\">`value`</ph>, or log e<ph id=\"ph3\">`value`</ph>.","source":"The natural logarithm of `value`; that is, ln `value`, or log e`value`."},{"pos":[353,357],"content":"Zero","nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[358,396],"content":"<xref:System.Double.NegativeInfinity>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Double.NegativeInfinity&gt;</ph>.","pos":[0,38],"source":"<xref:System.Double.NegativeInfinity>."}]},{"pos":[401,409],"content":"Negative","nodes":[{"content":"Negative","pos":[0,8]}]},{"pos":[410,435],"content":"<xref:System.Double.NaN>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Double.NaN&gt;</ph>.","pos":[0,25],"source":"<xref:System.Double.NaN>."}]},{"pos":[443,742],"content":"To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method. To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.","nodes":[{"content":"To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method. To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.","pos":[0,299],"nodes":[{"content":"To calculate the base 10 logarithm of a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value, call the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Log10%2A&gt;</ph> method.","pos":[0,140],"source":"To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method."},{"content":"To calculate the logarithm of a number in another base, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29&gt;</ph> method.","pos":[141,299],"source":" To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method."}]}]},{"pos":[749,1221],"content":"You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=fullName> method. Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=fullName> if the result is greater than <xref:System.Double.MaxValue?displayProperty=fullName>. The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.","nodes":[{"content":"You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=fullName> method. Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=fullName> if the result is greater than <xref:System.Double.MaxValue?displayProperty=fullName>. The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.","pos":[0,472],"nodes":[{"content":"You can find the square root of a number by calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Log%2A&gt;</ph> method along with the <ph id=\"ph2\">&lt;xref:System.Math.Exp%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,177],"source":"You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=fullName> method."},{"content":"Note that the result is <ph id=\"ph1\">&lt;xref:System.Double.PositiveInfinity?displayProperty=fullName&gt;</ph> if the result is greater than <ph id=\"ph2\">&lt;xref:System.Double.MaxValue?displayProperty=fullName&gt;</ph>.","pos":[178,350],"source":" Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=fullName> if the result is greater than <xref:System.Double.MaxValue?displayProperty=fullName>."},{"content":"The following example calculates the square root of each element in an array of <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[351,472],"source":" The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values."}]}]},{"pos":[1228,1516],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Log#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Log#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)] \n [!code-vb[System.Numerics.BigInteger.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]"},{"pos":[1524,1661],"content":"This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=fullName> method for the primitive numeric types.","nodes":[{"content":"This method corresponds to the <ph id=\"ph1\">&lt;xref:System.Math.Log%28System.Double%29?displayProperty=fullName&gt;</ph> method for the primitive numeric types.","pos":[0,137],"source":"This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=fullName> method for the primitive numeric types."}]}],"pos":[118085,119766],"yaml":true,"extradata":"MT"},{"content":"The number whose logarithm is to be found.","nodes":[{"pos":[0,42],"content":"The number whose logarithm is to be found.","nodes":[{"content":"The number whose logarithm is to be found.","pos":[0,42]}]}],"pos":[119940,119983],"yaml":true},{"content":"The natural (base `e`) logarithm of <code>value</code>, as shown in the table in the Remarks section.","nodes":[{"pos":[0,101],"content":"The natural (base <ph id=\"ph1\">`e`</ph>) logarithm of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the table in the Remarks section.","source":"The natural (base `e`) logarithm of <code>value</code>, as shown in the table in the Remarks section."}],"pos":[120040,120142],"yaml":true},{"content":"The natural log of <code>value</code> is out of range of the <xref href=\"System.Double\"></xref> data type.","nodes":[{"pos":[0,106],"content":"The natural log of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is out of range of the <ph id=\"ph2\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> data type.","source":"The natural log of <code>value</code> is out of range of the <xref href=\"System.Double\"></xref> data type."}],"pos":[120314,120421],"yaml":true},{"content":"Returns the logarithm of a specified number in a specified base.","nodes":[{"pos":[0,64],"content":"Returns the logarithm of a specified number in a specified base.","nodes":[{"content":"Returns the logarithm of a specified number in a specified base.","pos":[0,64]}]}],"pos":[121948,122013],"yaml":true},{"content":"The `value` and `baseValue` parameters are specified as base 10 numbers.  \n  \n The precise return value of the method depends on the sign of `value` and on the sign and value of `baseValue`, as the following table shows.  \n  \n|`value` parameter|`baseValue` parameter|Return value|  \n|-----------------------|---------------------------|------------------|  \n|`value` > 0|(0 < `baseValue` < 1) -or-(`baseValue` > 1)|logbaseValue(`value`)|  \n|`value` < 0|(any value)|<xref:System.Double?displayProperty=fullName>|  \n|(any value)|`baseValue` < 0|<xref:System.Double?displayProperty=fullName>|  \n|`value` != 1|`baseValue` = 0|<xref:System.Double?displayProperty=fullName>|  \n|`value` != 1|`baseValue` = <xref:System.Double?displayProperty=fullName>|<xref:System.Double?displayProperty=fullName>|  \n|(any value)|`baseValue` = <xref:System.Double?displayProperty=fullName>|<xref:System.Double?displayProperty=fullName>|  \n|(any value)|`baseValue` = 1|<xref:System.Double?displayProperty=fullName>|  \n|`value` = 0|0 < `baseValue` < 1|<xref:System.Double?displayProperty=fullName>|  \n|`value` = 0|`baseValue` > 1|<xref:System.Double.PositiveInfinity?displayProperty=fullName>|  \n|`value` = 1|`baseValue` = 0|0|  \n|`value` = 1|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=fullName>|0|  \n  \n To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method. To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.  \n  \n This method corresponds to the <xref:System.Math.Log%2A?displayProperty=fullName> method for the primitive numeric types.","nodes":[{"pos":[0,72],"content":"The <ph id=\"ph1\">`value`</ph> and <ph id=\"ph2\">`baseValue`</ph> parameters are specified as base 10 numbers.","source":"The `value` and `baseValue` parameters are specified as base 10 numbers."},{"pos":[79,220],"content":"The precise return value of the method depends on the sign of <ph id=\"ph1\">`value`</ph> and on the sign and value of <ph id=\"ph2\">`baseValue`</ph>, as the following table shows.","source":"The precise return value of the method depends on the sign of `value` and on the sign and value of `baseValue`, as the following table shows."},{"pos":[227,244],"content":"<ph id=\"ph1\">`value`</ph> parameter","source":"`value` parameter"},{"pos":[245,266],"content":"<ph id=\"ph1\">`baseValue`</ph> parameter","source":"`baseValue` parameter"},{"pos":[267,279],"content":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[359,370],"content":"<ph id=\"ph1\">`value`</ph> &gt; 0","source":"`value` > 0"},{"pos":[371,414],"content":"(0 &lt; <ph id=\"ph1\">`baseValue`</ph> &lt; 1) -or-(<ph id=\"ph2\">`baseValue`</ph> &gt; 1)","source":"(0 < `baseValue` < 1) -or-(`baseValue` > 1)"},{"pos":[415,436],"content":"logbaseValue(<ph id=\"ph1\">`value`</ph>)","source":"logbaseValue(`value`)"},{"pos":[441,452],"content":"<ph id=\"ph1\">`value`</ph> &lt; 0","source":"`value` < 0"},{"pos":[453,464],"content":"(any value)","nodes":[{"content":"(any value)","pos":[0,11]}]},{"pos":[465,510],"content":"<xref:System.Double?displayProperty=fullName>","nodes":[]},{"pos":[515,526],"content":"(any value)","nodes":[{"content":"(any value)","pos":[0,11]}]},{"pos":[527,542],"content":"<ph id=\"ph1\">`baseValue`</ph> &lt; 0","source":"`baseValue` < 0"},{"pos":[543,588],"content":"<xref:System.Double?displayProperty=fullName>","nodes":[]},{"pos":[593,605],"content":"<ph id=\"ph1\">`value`</ph> != 1","source":"`value` != 1"},{"pos":[606,621],"content":"<ph id=\"ph1\">`baseValue`</ph> = 0","source":"`baseValue` = 0"},{"pos":[622,667],"content":"<xref:System.Double?displayProperty=fullName>","nodes":[]},{"pos":[672,684],"content":"<ph id=\"ph1\">`value`</ph> != 1","source":"`value` != 1"},{"pos":[745,790],"content":"<xref:System.Double?displayProperty=fullName>","nodes":[]},{"pos":[795,806],"content":"(any value)","nodes":[{"content":"(any value)","pos":[0,11]}]},{"pos":[867,912],"content":"<xref:System.Double?displayProperty=fullName>","nodes":[]},{"pos":[917,928],"content":"(any value)","nodes":[{"content":"(any value)","pos":[0,11]}]},{"pos":[929,944],"content":"<ph id=\"ph1\">`baseValue`</ph> = 1","source":"`baseValue` = 1"},{"pos":[945,990],"content":"<xref:System.Double?displayProperty=fullName>","nodes":[]},{"pos":[995,1006],"content":"<ph id=\"ph1\">`value`</ph> = 0","source":"`value` = 0"},{"pos":[1007,1026],"content":"0 &lt; <ph id=\"ph1\">`baseValue`</ph> &lt; 1","source":"0 < `baseValue` < 1"},{"pos":[1027,1072],"content":"<xref:System.Double?displayProperty=fullName>","nodes":[]},{"pos":[1077,1088],"content":"<ph id=\"ph1\">`value`</ph> = 0","source":"`value` = 0"},{"pos":[1089,1104],"content":"<ph id=\"ph1\">`baseValue`</ph> &gt; 1","source":"`baseValue` > 1"},{"pos":[1105,1167],"content":"<xref:System.Double.PositiveInfinity?displayProperty=fullName>","nodes":[]},{"pos":[1172,1183],"content":"<ph id=\"ph1\">`value`</ph> = 1","source":"`value` = 1"},{"pos":[1184,1199],"content":"<ph id=\"ph1\">`baseValue`</ph> = 0","source":"`baseValue` = 0"},{"pos":[1200,1201],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[1206,1217],"content":"<ph id=\"ph1\">`value`</ph> = 1","source":"`value` = 1"},{"pos":[1295,1296],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[1304,1579],"content":"To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method. To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.","nodes":[{"content":"To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method. To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.","pos":[0,275],"nodes":[{"content":"To calculate the base 10 logarithm of a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value, call the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Log10%2A&gt;</ph> method.","pos":[0,140],"source":"To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method."},{"content":"To calculate the natural logarithm of a number, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29&gt;</ph> method.","pos":[141,275],"source":" To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method."}]}]},{"pos":[1586,1707],"content":"This method corresponds to the <xref:System.Math.Log%2A?displayProperty=fullName> method for the primitive numeric types.","nodes":[{"content":"This method corresponds to the <ph id=\"ph1\">&lt;xref:System.Math.Log%2A?displayProperty=fullName&gt;</ph> method for the primitive numeric types.","pos":[0,121],"source":"This method corresponds to the <xref:System.Math.Log%2A?displayProperty=fullName> method for the primitive numeric types."}]}],"pos":[122024,123754],"yaml":true,"extradata":"MT"},{"content":"A number whose logarithm is to be found.","nodes":[{"pos":[0,40],"content":"A number whose logarithm is to be found.","nodes":[{"content":"A number whose logarithm is to be found.","pos":[0,40]}]}],"pos":[123946,123987],"yaml":true},{"content":"The base of the logarithm.","nodes":[{"pos":[0,26],"content":"The base of the logarithm.","nodes":[{"content":"The base of the logarithm.","pos":[0,26]}]}],"pos":[124052,124079],"yaml":true},{"content":"The base <code>baseValue</code> logarithm of <code>value</code>, as shown in the table in the Remarks section.","nodes":[{"pos":[0,110],"content":"The base <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">baseValue</ph><ept id=\"p1\">&lt;/code&gt;</ept> logarithm of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept>, as shown in the table in the Remarks section.","source":"The base <code>baseValue</code> logarithm of <code>value</code>, as shown in the table in the Remarks section."}],"pos":[124136,124247],"yaml":true},{"content":"The log of <code>value</code> is out of range of the <xref href=\"System.Double\"></xref> data type.","nodes":[{"pos":[0,98],"content":"The log of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is out of range of the <ph id=\"ph2\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> data type.","source":"The log of <code>value</code> is out of range of the <xref href=\"System.Double\"></xref> data type."}],"pos":[124419,124518],"yaml":true},{"content":"Returns the base 10 logarithm of a specified number.","nodes":[{"pos":[0,52],"content":"Returns the base 10 logarithm of a specified number.","nodes":[{"content":"Returns the base 10 logarithm of a specified number.","pos":[0,52]}]}],"pos":[125991,126044],"yaml":true},{"content":"The `value` parameter is specified as a base 10 number.  \n  \n The precise return value of the method depends on the sign of `value`, as the following table shows.  \n  \n|Sign of value parameter|Return value|  \n|-----------------------------|------------------|  \n|Positive|The base 10 log of `value`; that is, log10`value`.|  \n|Zero|<xref:System.Double?displayProperty=fullName>.|  \n|Negative|<xref:System.Double?displayProperty=fullName>.|  \n  \n To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=fullName> method. To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=fullName> method.  \n  \n This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=fullName> method for the primitive numeric types.","nodes":[{"pos":[0,55],"content":"The <ph id=\"ph1\">`value`</ph> parameter is specified as a base 10 number.","source":"The `value` parameter is specified as a base 10 number."},{"pos":[62,162],"content":"The precise return value of the method depends on the sign of <ph id=\"ph1\">`value`</ph>, as the following table shows.","source":"The precise return value of the method depends on the sign of `value`, as the following table shows."},{"pos":[169,192],"content":"Sign of value parameter","nodes":[{"content":"Sign of value parameter","pos":[0,23]}]},{"pos":[193,205],"content":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[263,271],"content":"Positive","nodes":[{"content":"Positive","pos":[0,8]}]},{"pos":[272,322],"content":"The base 10 log of <ph id=\"ph1\">`value`</ph>; that is, log10<ph id=\"ph2\">`value`</ph>.","source":"The base 10 log of `value`; that is, log10`value`."},{"pos":[327,331],"content":"Zero","nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[332,378],"content":"<xref:System.Double?displayProperty=fullName>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Double?displayProperty=fullName&gt;</ph>.","pos":[0,46],"source":"<xref:System.Double?displayProperty=fullName>."}]},{"pos":[383,391],"content":"Negative","nodes":[{"content":"Negative","pos":[0,8]}]},{"pos":[392,438],"content":"<xref:System.Double?displayProperty=fullName>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Double?displayProperty=fullName&gt;</ph>.","pos":[0,46],"source":"<xref:System.Double?displayProperty=fullName>."}]},{"pos":[446,822],"content":"To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=fullName> method. To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=fullName> method.","nodes":[{"content":"To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=fullName> method. To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=fullName> method.","pos":[0,376],"nodes":[{"content":"To calculate the natural logarithm of a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value, call the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph> method.","pos":[0,192],"source":"To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=fullName> method."},{"content":"To calculate the logarithm of a number in another base, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=fullName&gt;</ph> method.","pos":[193,376],"source":" To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=fullName> method."}]}]},{"pos":[829,952],"content":"This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=fullName> method for the primitive numeric types.","nodes":[{"content":"This method corresponds to the <ph id=\"ph1\">&lt;xref:System.Math.Log10%2A?displayProperty=fullName&gt;</ph> method for the primitive numeric types.","pos":[0,123],"source":"This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=fullName> method for the primitive numeric types."}]}],"pos":[126055,127022],"yaml":true,"extradata":"MT"},{"content":"A number whose logarithm is to be found.","nodes":[{"pos":[0,40],"content":"A number whose logarithm is to be found.","nodes":[{"content":"A number whose logarithm is to be found.","pos":[0,40]}]}],"pos":[127198,127239],"yaml":true},{"content":"The base 10 logarithm of <code>value</code>, as shown in the table in the Remarks section.","nodes":[{"pos":[0,90],"content":"The base 10 logarithm of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, as shown in the table in the Remarks section.","source":"The base 10 logarithm of <code>value</code>, as shown in the table in the Remarks section."}],"pos":[127296,127387],"yaml":true},{"content":"The base 10 log of <code>value</code> is out of range of the <xref href=\"System.Double\"></xref> data type.","nodes":[{"pos":[0,106],"content":"The base 10 log of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is out of range of the <ph id=\"ph2\">&lt;xref href=\"System.Double\"&gt;&lt;/xref&gt;</ph> data type.","source":"The base 10 log of <code>value</code> is out of range of the <xref href=\"System.Double\"></xref> data type."}],"pos":[127561,127668],"yaml":true},{"content":"Returns the larger of two <xref href=\"System.Numerics.BigInteger\"></xref> values.","nodes":[{"pos":[0,81],"content":"Returns the larger of two <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the larger of two <xref href=\"System.Numerics.BigInteger\"></xref> values."}],"pos":[129246,129328],"yaml":true},{"content":"This method corresponds to the <xref:System.Math.Max%2A?displayProperty=fullName> method for primitive numeric types.","nodes":[{"pos":[0,117],"content":"This method corresponds to the <xref:System.Math.Max%2A?displayProperty=fullName> method for primitive numeric types.","nodes":[{"content":"This method corresponds to the <ph id=\"ph1\">&lt;xref:System.Math.Max%2A?displayProperty=fullName&gt;</ph> method for primitive numeric types.","pos":[0,117],"source":"This method corresponds to the <xref:System.Math.Max%2A?displayProperty=fullName> method for primitive numeric types."}]}],"pos":[129339,129457],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[130162,130190],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[130264,130293],"yaml":true},{"content":"The <code>left</code> or <code>right</code> parameter, whichever is larger.","nodes":[{"pos":[0,75],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter, whichever is larger.","source":"The <code>left</code> or <code>right</code> parameter, whichever is larger."}],"pos":[130363,130439],"yaml":true},{"content":"Returns the smaller of two <xref href=\"System.Numerics.BigInteger\"></xref> values.","nodes":[{"pos":[0,82],"content":"Returns the smaller of two <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the smaller of two <xref href=\"System.Numerics.BigInteger\"></xref> values."}],"pos":[132078,132161],"yaml":true},{"content":"This method corresponds to the <xref:System.Math.Min%2A?displayProperty=fullName> method for primitive numeric types.","nodes":[{"pos":[0,117],"content":"This method corresponds to the <xref:System.Math.Min%2A?displayProperty=fullName> method for primitive numeric types.","nodes":[{"content":"This method corresponds to the <ph id=\"ph1\">&lt;xref:System.Math.Min%2A?displayProperty=fullName&gt;</ph> method for primitive numeric types.","pos":[0,117],"source":"This method corresponds to the <xref:System.Math.Min%2A?displayProperty=fullName> method for primitive numeric types."}]}],"pos":[132172,132290],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[132996,133024],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[133098,133127],"yaml":true},{"content":"The <code>left</code> or <code>right</code> parameter, whichever is smaller.","nodes":[{"pos":[0,76],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter, whichever is smaller.","source":"The <code>left</code> or <code>right</code> parameter, whichever is smaller."}],"pos":[133197,133274],"yaml":true},{"content":"Gets a value that represents the number negative one (-1).","nodes":[{"pos":[0,58],"content":"Gets a value that represents the number negative one (-1).","nodes":[{"content":"Gets a value that represents the number negative one (-1).","pos":[0,58]}]}],"pos":[134708,134767],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object.","nodes":[{"pos":[0,188],"content":"The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.MinusOne%2A&gt;</ph> property is used to compare a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value to -1 or to assign -1 to a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object.","pos":[0,188],"source":"The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object."}]}],"pos":[134778,134967],"yaml":true,"extradata":"MT"},{"content":"An integer whose value is negative one (-1).","nodes":[{"pos":[0,44],"content":"An integer whose value is negative one (-1).","nodes":[{"content":"An integer whose value is negative one (-1).","pos":[0,44]}]}],"pos":[135119,135164],"yaml":true},{"content":"Performs modulus division on a number raised to the power of another number.","nodes":[{"pos":[0,76],"content":"Performs modulus division on a number raised to the power of another number.","nodes":[{"content":"Performs modulus division on a number raised to the power of another number.","pos":[0,76]}]}],"pos":[136943,137020],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:  \n  \n (baseValue ^ exponent) Mod modulus  \n  \n To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method.","nodes":[{"pos":[0,90],"content":"The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ModPow%2A&gt;</ph> method evaluates the following expression:","pos":[0,90],"source":"The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:"}]},{"pos":[97,131],"content":"(baseValue ^ exponent) Mod modulus","nodes":[{"content":"(baseValue ^ exponent) Mod modulus","pos":[0,34]}]},{"pos":[138,290],"content":"To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method.","nodes":[{"content":"To perform exponentiation on <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values without modulus division, use the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Pow%2A&gt;</ph> method.","pos":[0,152],"source":"To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method."}]}],"pos":[137031,137328],"yaml":true,"extradata":"MT"},{"content":"The number to raise to the <code>exponent</code> power.","nodes":[{"pos":[0,55],"content":"The number to raise to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">exponent</ph><ept id=\"p1\">&lt;/code&gt;</ept> power.","source":"The number to raise to the <code>exponent</code> power."}],"pos":[138050,138106],"yaml":true},{"content":"The exponent to raise <code>value</code> by.","nodes":[{"pos":[0,44],"content":"The exponent to raise <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> by.","source":"The exponent to raise <code>value</code> by."}],"pos":[138183,138228],"yaml":true},{"content":"The number by which to divide <code>value</code> raised to the <code>exponent</code> power.","nodes":[{"pos":[0,91],"content":"The number by which to divide <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> raised to the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">exponent</ph><ept id=\"p2\">&lt;/code&gt;</ept> power.","source":"The number by which to divide <code>value</code> raised to the <code>exponent</code> power."}],"pos":[138304,138396],"yaml":true},{"content":"The remainder after dividing <code>value</code><sup>exponent</sup> by <code>modulus</code>.","nodes":[{"pos":[0,91],"content":"The remainder after dividing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept><bpt id=\"p2\">&lt;sup&gt;</bpt>exponent<ept id=\"p2\">&lt;/sup&gt;</ept> by <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph2\">modulus</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The remainder after dividing <code>value</code><sup>exponent</sup> by <code>modulus</code>."}],"pos":[138466,138558],"yaml":true},{"content":"<code>modulus</code> is zero.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;modulus&lt;/code&gt;</ph> is zero.","source":"<code>modulus</code> is zero."}],"pos":[138721,138751],"yaml":true},{"content":"<code>exponent</code> is negative.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;exponent&lt;/code&gt;</ph> is negative.","source":"<code>exponent</code> is negative."}],"pos":[138865,138900],"yaml":true},{"content":"Returns the product of two <xref href=\"System.Numerics.BigInteger\"></xref> values.","nodes":[{"pos":[0,82],"content":"Returns the product of two <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the product of two <xref href=\"System.Numerics.BigInteger\"></xref> values."}],"pos":[140508,140591],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading. Its behavior is identical to multiplication using the multiplication operator. In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.  \n  \n [!code-csharp[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]  \n  \n If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects. This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values.","nodes":[{"pos":[0,490],"content":"The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading. Its behavior is identical to multiplication using the multiplication operator. In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.","nodes":[{"content":"The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading. Its behavior is identical to multiplication using the multiplication operator. In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.","pos":[0,490],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Multiply%2A&gt;</ph> method is implemented for languages that do not support operator overloading.","pos":[0,127],"source":"The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading."},{"content":"Its behavior is identical to multiplication using the multiplication operator.","pos":[128,206]},{"content":"In addition, the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Multiply%2A&gt;</ph> method is a useful substitute for the multiplication operator when instantiating a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> variable by assigning it a product that results from multiplication, as shown in the following example.","pos":[207,490],"source":" In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example."}]}]},{"pos":[497,846],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.OperationMethods#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.OperationMethods#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]"},{"pos":[853,1152],"content":"If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects. This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values.","nodes":[{"content":"If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects. This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values.","pos":[0,299],"nodes":[{"content":"If necessary, this method automatically performs implicit conversion of other integral types to <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> objects.","pos":[0,138],"source":"If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects."},{"content":"This is illustrated in the example in the next section, where the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Multiply%2A&gt;</ph> method is passed two <ph id=\"ph2\">&lt;xref:System.Int64&gt;</ph> values.","pos":[139,299],"source":" This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values."}]}]}],"pos":[140602,141762],"yaml":true,"extradata":"MT"},{"content":"The first number to multiply.","nodes":[{"pos":[0,29],"content":"The first number to multiply.","nodes":[{"content":"The first number to multiply.","pos":[0,29]}]}],"pos":[142801,142831],"yaml":true},{"content":"The second number to multiply.","nodes":[{"pos":[0,30],"content":"The second number to multiply.","nodes":[{"content":"The second number to multiply.","pos":[0,30]}]}],"pos":[142905,142936],"yaml":true},{"content":"The product of the <code>left</code> and <code>right</code> parameters.","nodes":[{"pos":[0,71],"content":"The product of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters.","source":"The product of the <code>left</code> and <code>right</code> parameters."}],"pos":[143006,143078],"yaml":true},{"content":"Negates a specified <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,74],"content":"Negates a specified <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Negates a specified <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[144623,144698],"yaml":true},{"content":"Negation obtains the additive inverse of a number. The additive inverse of a number is a number that produces a value of zero when it is added to the original number.  \n  \n The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to negation using the unary negation operator. In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.  \n  \n [!code-csharp[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]","nodes":[{"pos":[0,166],"content":"Negation obtains the additive inverse of a number. The additive inverse of a number is a number that produces a value of zero when it is added to the original number.","nodes":[{"content":"Negation obtains the additive inverse of a number. The additive inverse of a number is a number that produces a value of zero when it is added to the original number.","pos":[0,166],"nodes":[{"content":"Negation obtains the additive inverse of a number.","pos":[0,50]},{"content":"The additive inverse of a number is a number that produces a value of zero when it is added to the original number.","pos":[51,166]}]}]},{"pos":[173,584],"content":"The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to negation using the unary negation operator. In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.","nodes":[{"content":"The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to negation using the unary negation operator. In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.","pos":[0,411],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Negate%2A&gt;</ph> method is implemented for languages that do not support custom operators.","pos":[0,121],"source":"The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators."},{"content":"Its behavior is identical to negation using the unary negation operator.","pos":[122,194]},{"content":"In addition, the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Negate%2A&gt;</ph> method is a useful substitute for the negation operator when instantiating a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> variable, as shown in the following example.","pos":[195,411],"source":" In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example."}]}]},{"pos":[591,940],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.OperationMethods#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.OperationMethods#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]"}],"pos":[144709,145657],"yaml":true,"extradata":"MT"},{"content":"The value to negate.","nodes":[{"pos":[0,20],"content":"The value to negate.","nodes":[{"content":"The value to negate.","pos":[0,20]}]}],"pos":[146318,146339],"yaml":true},{"content":"The result of the <code>value</code> parameter multiplied by negative one (-1).","nodes":[{"pos":[0,79],"content":"The result of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter multiplied by negative one (-1).","source":"The result of the <code>value</code> parameter multiplied by negative one (-1)."}],"pos":[146409,146489],"yaml":true},{"content":"Gets a value that represents the number one (1).","nodes":[{"pos":[0,48],"content":"Gets a value that represents the number one (1).","nodes":[{"content":"Gets a value that represents the number one (1).","pos":[0,48]}]}],"pos":[147912,147961],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object.","nodes":[{"pos":[0,189],"content":"The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.One%2A&gt;</ph> property is usually used to compare a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value to 1 or to assign 1 to a <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object.","pos":[0,189],"source":"The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object."}]}],"pos":[147972,148162],"yaml":true,"extradata":"MT"},{"content":"An object whose value is one (1).","nodes":[{"pos":[0,33],"content":"An object whose value is one (1).","nodes":[{"content":"An object whose value is one (1).","pos":[0,33]}]}],"pos":[148309,148343],"yaml":true},{"content":"Adds the values of two specified <xref href=\"System.Numerics.BigInteger\"></xref> objects.","nodes":[{"pos":[0,89],"content":"Adds the values of two specified <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> objects.","source":"Adds the values of two specified <xref href=\"System.Numerics.BigInteger\"></xref> objects."}],"pos":[150048,150138],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]\n [!code-vb[System.Numeric.BigInteger.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead.","nodes":[{"pos":[0,175],"content":"The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,175],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Addition%2A&gt;</ph> method defines the addition operation for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,136],"source":"The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[137,175]}]}]},{"pos":[182,507],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#12<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#12<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]\n [!code-vb[System.Numeric.BigInteger.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]"},{"pos":[514,630],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead.","nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Add%2A&gt;</ph> method instead.","pos":[0,116],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead."}]}],"pos":[150149,150787],"yaml":true,"extradata":"MT"},{"content":"The first value to add.","nodes":[{"pos":[0,23],"content":"The first value to add.","nodes":[{"content":"The first value to add.","pos":[0,23]}]}],"pos":[151021,151045],"yaml":true},{"content":"The second value to add.","nodes":[{"pos":[0,24],"content":"The second value to add.","nodes":[{"content":"The second value to add.","pos":[0,24]}]}],"pos":[151119,151144],"yaml":true},{"content":"The sum of <code>left</code> and <code>right</code>.","nodes":[{"pos":[0,52],"content":"The sum of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The sum of <code>left</code> and <code>right</code>."}],"pos":[151214,151267],"yaml":true},{"content":"Performs a bitwise `And` operation on two <xref href=\"System.Numerics.BigInteger\"></xref> values.","nodes":[{"pos":[0,97],"content":"Performs a bitwise <ph id=\"ph1\">`And`</ph> operation on two <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values.","source":"Performs a bitwise `And` operation on two <xref href=\"System.Numerics.BigInteger\"></xref> values."}],"pos":[152976,153074],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values. The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table.  \n  \n|Bit in `left`|Bit in `right`|Bit in result|  \n|-------------------|--------------------|-------------------|  \n|0|0|0|  \n|1|0|0|  \n|1|1|1|  \n|0|1|0|  \n  \n The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]  \n  \n The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method performs the bitwise `And` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.","nodes":[{"pos":[0,289],"content":"The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values. The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_BitwiseAnd%2A&gt;</ph> method defines the bitwise <ph id=\"ph2\">`And`</ph> operation for <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,143],"source":"The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values."},{"content":"The bitwise <ph id=\"ph1\">`And`</ph> operation sets a result bit only if the corresponding bits in <ph id=\"ph2\">`left`</ph> and <ph id=\"ph3\">`right`</ph> are also set, as shown in the following table.","pos":[144,289],"source":" The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table."}]},{"pos":[296,309],"content":"Bit in <ph id=\"ph1\">`left`</ph>","source":"Bit in `left`"},{"pos":[310,324],"content":"Bit in <ph id=\"ph1\">`right`</ph>","source":"Bit in `right`"},{"pos":[325,338],"content":"Bit in result","nodes":[{"content":"Bit in result","pos":[0,13]}]},{"pos":[408,409],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[410,411],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[412,413],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[418,419],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[420,421],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[422,423],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[428,429],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[430,431],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[432,433],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[438,439],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[440,441],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[442,443],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[451,548],"content":"The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_BitwiseAnd%2A&gt;</ph> method enables code such as the following:","pos":[0,97],"source":"The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:"}]},{"pos":[555,876],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]"},{"pos":[883,1114],"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_BitwiseAnd%2A&gt;</ph> method performs the bitwise <ph id=\"ph2\">`And`</ph> operation on two <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values as if they were both in two's complement representation with virtual sign extension.","source":"The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method performs the bitwise `And` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension."}],"pos":[153085,154216],"yaml":true,"extradata":"MT"},{"content":"The first value.","nodes":[{"pos":[0,16],"content":"The first value.","nodes":[{"content":"The first value.","pos":[0,16]}]}],"pos":[154452,154469],"yaml":true},{"content":"The second value.","nodes":[{"pos":[0,17],"content":"The second value.","nodes":[{"content":"The second value.","pos":[0,17]}]}],"pos":[154543,154561],"yaml":true},{"content":"The result of the bitwise `And` operation.","nodes":[{"pos":[0,42],"content":"The result of the bitwise <ph id=\"ph1\">`And`</ph> operation.","source":"The result of the bitwise `And` operation."}],"pos":[154631,154674],"yaml":true},{"content":"Performs a bitwise `Or` operation on two <xref href=\"System.Numerics.BigInteger\"></xref> values.","nodes":[{"pos":[0,96],"content":"Performs a bitwise <ph id=\"ph1\">`Or`</ph> operation on two <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values.","source":"Performs a bitwise `Or` operation on two <xref href=\"System.Numerics.BigInteger\"></xref> values."}],"pos":[156379,156476],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values. The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table.  \n  \n|Bit in `left`|Bit in `right`|Bit in result|  \n|-------------------|--------------------|-------------------|  \n|0|0|0|  \n|1|0|1|  \n|1|1|1|  \n|0|1|1|  \n  \n The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]  \n  \n The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method performs the bitwise `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.","nodes":[{"pos":[0,299],"content":"The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values. The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_BitwiseOr%2A&gt;</ph> method defines the bitwise <ph id=\"ph2\">`Or`</ph> operation for <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,141],"source":"The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values."},{"content":"The bitwise <ph id=\"ph1\">`Or`</ph> operation sets a result bit only if either or both of the corresponding bits in <ph id=\"ph2\">`left`</ph> and <ph id=\"ph3\">`right`</ph> are set, as shown in the following table.","pos":[142,299],"source":" The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table."}]},{"pos":[306,319],"content":"Bit in <ph id=\"ph1\">`left`</ph>","source":"Bit in `left`"},{"pos":[320,334],"content":"Bit in <ph id=\"ph1\">`right`</ph>","source":"Bit in `right`"},{"pos":[335,348],"content":"Bit in result","nodes":[{"content":"Bit in result","pos":[0,13]}]},{"pos":[418,419],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[420,421],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[422,423],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[428,429],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[430,431],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[432,433],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[438,439],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[440,441],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[442,443],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[448,449],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[450,451],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[452,453],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[461,557],"content":"The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_BitwiseOr%2A&gt;</ph> method enables code such as the following:","pos":[0,96],"source":"The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:"}]},{"pos":[564,885],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]"},{"pos":[892,1121],"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_BitwiseOr%2A&gt;</ph> method performs the bitwise <ph id=\"ph2\">`Or`</ph> operation on two <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values as if they were both in two's complement representation with virtual sign extension.","source":"The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method performs the bitwise `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension."}],"pos":[156487,157625],"yaml":true,"extradata":"MT"},{"content":"The first value.","nodes":[{"pos":[0,16],"content":"The first value.","nodes":[{"content":"The first value.","pos":[0,16]}]}],"pos":[157860,157877],"yaml":true},{"content":"The second value.","nodes":[{"pos":[0,17],"content":"The second value.","nodes":[{"content":"The second value.","pos":[0,17]}]}],"pos":[157951,157969],"yaml":true},{"content":"The result of the bitwise `Or` operation.","nodes":[{"pos":[0,41],"content":"The result of the bitwise <ph id=\"ph1\">`Or`</ph> operation.","source":"The result of the bitwise `Or` operation."}],"pos":[158039,158081],"yaml":true},{"content":"Decrements a <xref href=\"System.Numerics.BigInteger\"></xref> value by 1.","nodes":[{"pos":[0,72],"content":"Decrements a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value by 1.","source":"Decrements a <xref href=\"System.Numerics.BigInteger\"></xref> value by 1."}],"pos":[159668,159741],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead. For example:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]  \n  \n Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`. This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"pos":[0,177],"content":"The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,177],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Decrement%2A&gt;</ph> method defines the decrement operation for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,138],"source":"The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[139,177]}]}]},{"pos":[184,345],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#17<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]"},{"pos":[352,486],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead. For example:","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead. For example:","pos":[0,134],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Subtract%2A&gt;</ph> method instead.","pos":[0,121],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead."},{"content":"For example:","pos":[122,134]}]}]},{"pos":[493,814],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]"},{"pos":[821,1203],"content":"Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`. This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive.","nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> objects are immutable, the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.op_Decrement%2A&gt;</ph> operator creates a new <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object whose value is one less than the <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object represented by <ph id=\"ph5\">`value`</ph>.","pos":[0,280],"source":"Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`."},{"content":"This means that repeated calls to <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Decrement%2A&gt;</ph> may be expensive.","pos":[281,382],"source":" This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive."}]},{"pos":[1210,1381],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph>","pos":[0,171],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"}]}],"pos":[159752,161147],"yaml":true,"extradata":"MT"},{"content":"The value to decrement.","nodes":[{"pos":[0,23],"content":"The value to decrement.","nodes":[{"content":"The value to decrement.","pos":[0,23]}]}],"pos":[161350,161374],"yaml":true},{"content":"The value of the <code>value</code> parameter decremented by 1.","nodes":[{"pos":[0,63],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter decremented by 1.","source":"The value of the <code>value</code> parameter decremented by 1."}],"pos":[161444,161508],"yaml":true},{"content":"Divides a specified <xref href=\"System.Numerics.BigInteger\"></xref> value by another specified <xref href=\"System.Numerics.BigInteger\"></xref> value by using integer division.","nodes":[{"pos":[0,175],"content":"Divides a specified <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value by another specified <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value by using integer division.","source":"Divides a specified <xref href=\"System.Numerics.BigInteger\"></xref> value by another specified <xref href=\"System.Numerics.BigInteger\"></xref> value by using integer division."}],"pos":[163222,163398],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]\n [!code-vb[System.Numeric.BigInteger.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]  \n  \n Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"pos":[0,175],"content":"The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,175],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Division%2A&gt;</ph> method defines the division operation for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,136],"source":"The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[137,175]}]}]},{"pos":[182,507],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#13<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#13<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]\n [!code-vb[System.Numeric.BigInteger.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]"},{"pos":[514,658],"content":"Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead.","nodes":[{"content":"Languages that do not support custom operators and operator overloading can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Divide%2A&gt;</ph> method instead.","pos":[0,144],"source":"Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead."}]},{"pos":[665,834],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph>","pos":[0,169],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"}]}],"pos":[163409,164253],"yaml":true,"extradata":"MT"},{"content":"The value to be divided.","nodes":[{"pos":[0,24],"content":"The value to be divided.","nodes":[{"content":"The value to be divided.","pos":[0,24]}]}],"pos":[165132,165157],"yaml":true},{"content":"The value to divide by.","nodes":[{"pos":[0,23],"content":"The value to divide by.","nodes":[{"content":"The value to divide by.","pos":[0,23]}]}],"pos":[165233,165257],"yaml":true},{"content":"The integral result of the division.","nodes":[{"pos":[0,36],"content":"The integral result of the division.","nodes":[{"content":"The integral result of the division.","pos":[0,36]}]}],"pos":[165327,165364],"yaml":true},{"content":"<code>divisor</code> is 0 (zero).","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;divisor&lt;/code&gt;</ph> is 0 (zero).","source":"<code>divisor</code> is 0 (zero)."}],"pos":[165532,165566],"yaml":true},{"content":"Returns a value that indicates whether a signed long integer value and a <xref href=\"System.Numerics.BigInteger\"></xref> value are equal.","nodes":[{"pos":[0,137],"content":"Returns a value that indicates whether a signed long integer value and a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value are equal.","source":"Returns a value that indicates whether a signed long integer value and a <xref href=\"System.Numerics.BigInteger\"></xref> value are equal."}],"pos":[167137,167275],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]\n [!code-vb[System.Numerics.BigInteger.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method instead.  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,230],"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,230],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29&gt;</ph> method defines the equality comparison operation for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,191],"source":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[192,230]}]}]},{"pos":[237,558],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]\n [!code-vb[System.Numerics.BigInteger.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]"},{"pos":[565,733],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method instead.","nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName&gt;</ph> instance method instead.","pos":[0,168],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method instead."}]},{"pos":[740,982],"content":"If <ph id=\"ph1\">`left`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[989,1115],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,126],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[167286,168413],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[168589,168617],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[168691,168720],"yaml":true},{"content":"`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters have the same value; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`."}],"pos":[168778,168887],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and a signed long integer value are equal.","nodes":[{"pos":[0,137],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value and a signed long integer value are equal.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and a signed long integer value are equal."}],"pos":[170527,170665],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]\n [!code-vb[System.Numerics.BigInteger.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method instead.  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,230],"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,230],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29&gt;</ph> method defines the equality comparison operation for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,191],"source":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[192,230]}]}]},{"pos":[237,558],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]\n [!code-vb[System.Numerics.BigInteger.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]"},{"pos":[565,733],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method instead.","nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName&gt;</ph> instance method instead.","pos":[0,168],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method instead."}]},{"pos":[740,983],"content":"If <ph id=\"ph1\">`right`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[990,1116],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,126],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[170676,171804],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[171994,172022],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[172082,172111],"yaml":true},{"content":"`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters have the same value; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`."}],"pos":[172169,172278],"yaml":true},{"content":"Returns a value that indicates whether the values of two <xref href=\"System.Numerics.BigInteger\"></xref> objects are equal.","nodes":[{"pos":[0,123],"content":"Returns a value that indicates whether the values of two <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> objects are equal.","source":"Returns a value that indicates whether the values of two <xref href=\"System.Numerics.BigInteger\"></xref> objects are equal."}],"pos":[173991,174115],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]\n [!code-vb[System.Numeric.BigInteger.Class#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> instance method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"pos":[0,249],"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,249],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29&gt;</ph> method defines the operation of the equality operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,210],"source":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[211,249]}]}]},{"pos":[256,581],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#19<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#19<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]\n [!code-vb[System.Numeric.BigInteger.Class#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]"},{"pos":[588,770],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> instance method instead.","nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph> instance method instead.","pos":[0,182],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> instance method instead."}]},{"pos":[777,917],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph>","pos":[0,140],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName>"}]}],"pos":[174126,175053],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[175265,175293],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[175367,175396],"yaml":true},{"content":"`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters have the same value; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`."}],"pos":[175454,175563],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and an unsigned long integer value are equal.","nodes":[{"pos":[0,140],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value and an unsigned long integer value are equal.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and an unsigned long integer value are equal."}],"pos":[177209,177350],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]\n [!code-vb[System.Numerics.BigInteger.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> instance method instead.","nodes":[{"pos":[0,231],"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,231],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29&gt;</ph> method defines the equality comparison operation for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,192],"source":"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[193,231]}]}]},{"pos":[238,559],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]\n [!code-vb[System.Numerics.BigInteger.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]"},{"pos":[566,735],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> instance method instead.","nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName&gt;</ph> instance method instead.","pos":[0,169],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> instance method instead."}]}],"pos":[177361,178104],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[178340,178368],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[178429,178458],"yaml":true},{"content":"`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters have the same value; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`."}],"pos":[178516,178625],"yaml":true},{"content":"Returns a value that indicates whether an unsigned long integer value and a <xref href=\"System.Numerics.BigInteger\"></xref> value are equal.","nodes":[{"pos":[0,140],"content":"Returns a value that indicates whether an unsigned long integer value and a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value are equal.","source":"Returns a value that indicates whether an unsigned long integer value and a <xref href=\"System.Numerics.BigInteger\"></xref> value are equal."}],"pos":[180324,180465],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]\n [!code-vb[System.Numerics.BigInteger.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> instance method instead.","nodes":[{"pos":[0,231],"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,231],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29&gt;</ph> method defines the equality comparison operation for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,192],"source":"The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[193,231]}]}]},{"pos":[238,559],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]\n [!code-vb[System.Numerics.BigInteger.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]"},{"pos":[566,735],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> instance method instead.","nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName&gt;</ph> instance method instead.","pos":[0,169],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> instance method instead."}]}],"pos":[180476,181219],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[181442,181470],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[181544,181573],"yaml":true},{"content":"`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters have the same value; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`."}],"pos":[181631,181740],"yaml":true},{"content":"Performs a bitwise exclusive `Or` (`XOr`) operation on two <xref href=\"System.Numerics.BigInteger\"></xref> values.","nodes":[{"pos":[0,114],"content":"Performs a bitwise exclusive <ph id=\"ph1\">`Or`</ph> (<ph id=\"ph2\">`XOr`</ph>) operation on two <ph id=\"ph3\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values.","source":"Performs a bitwise exclusive `Or` (`XOr`) operation on two <xref href=\"System.Numerics.BigInteger\"></xref> values."}],"pos":[183508,183623],"yaml":true},{"content":"The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`. The following table illustrates the exclusive `Or` operation.  \n  \n|Bit x in `left`|Bit x in `right`|Return value|  \n|---------------------|----------------------|------------------|  \n|0|0|0|  \n|0|1|1|  \n|1|0|1|  \n|1|1|0|  \n  \n The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]\n [!code-vb[System.Numerics.BigInteger.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]  \n  \n The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method performs the bitwise exclusive `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.","nodes":[{"pos":[0,191],"content":"The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`. The following table illustrates the exclusive `Or` operation.","nodes":[{"content":"The result of a bitwise exclusive <ph id=\"ph1\">`Or`</ph> operation is <ph id=\"ph2\">`true`</ph> if the values of the two bits are different; otherwise, it is <ph id=\"ph3\">`false`</ph>.","pos":[0,129],"source":"The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`."},{"content":"The following table illustrates the exclusive <ph id=\"ph1\">`Or`</ph> operation.","pos":[130,191],"source":" The following table illustrates the exclusive `Or` operation."}]},{"pos":[198,213],"content":"Bit x in <ph id=\"ph1\">`left`</ph>","source":"Bit x in `left`"},{"pos":[214,230],"content":"Bit x in <ph id=\"ph1\">`right`</ph>","source":"Bit x in `right`"},{"pos":[231,243],"content":"Return value","nodes":[{"content":"Return value","pos":[0,12]}]},{"pos":[316,317],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[318,319],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[320,321],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[326,327],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[328,329],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[330,331],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[336,337],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[338,339],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[340,341],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[346,347],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[348,349],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[350,351],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[359,457],"content":"The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_ExclusiveOr%2A&gt;</ph> method enables code such as the following:","pos":[0,98],"source":"The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:"}]},{"pos":[464,785],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]\n [!code-vb[System.Numerics.BigInteger.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]"},{"pos":[792,1033],"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_ExclusiveOr%2A&gt;</ph> method performs the bitwise exclusive <ph id=\"ph2\">`Or`</ph> operation on two <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values as if they were both in two's complement representation with virtual sign extension.","source":"The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method performs the bitwise exclusive `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension."}],"pos":[183634,184684],"yaml":true,"extradata":"MT"},{"content":"The first value.","nodes":[{"pos":[0,16],"content":"The first value.","nodes":[{"content":"The first value.","pos":[0,16]}]}],"pos":[184921,184938],"yaml":true},{"content":"The second value.","nodes":[{"pos":[0,17],"content":"The second value.","nodes":[{"content":"The second value.","pos":[0,17]}]}],"pos":[185012,185030],"yaml":true},{"content":"The result of the bitwise `Or` operation.","nodes":[{"pos":[0,41],"content":"The result of the bitwise <ph id=\"ph1\">`Or`</ph> operation.","source":"The result of the bitwise `Or` operation."}],"pos":[185100,185142],"yaml":true},{"content":"Returns a value that indicates whether a 64-bit signed integer is greater than a <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,135],"content":"Returns a value that indicates whether a 64-bit signed integer is greater than a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a 64-bit signed integer is greater than a <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[212333,212469],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]\n [!code-vb[System.Numerics.BigInteger.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,198],"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,198],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThan%2A&gt;</ph> method defines the operation of the greater than operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,159],"source":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[160,198]}]}]},{"pos":[205,526],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]\n [!code-vb[System.Numerics.BigInteger.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]"},{"pos":[533,882],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,349],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> instance method instead.","pos":[0,171],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[172,349],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[889,1051],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#10<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]"},{"pos":[1058,1300],"content":"If <ph id=\"ph1\">`left`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[1307,1436],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,129],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[212480,213930],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[214109,214137],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[214211,214240],"yaml":true},{"content":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`."}],"pos":[214298,214384],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> is greater than a 64-bit signed integer value.","nodes":[{"pos":[0,135],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> is greater than a 64-bit signed integer value.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> is greater than a 64-bit signed integer value."}],"pos":[216045,216181],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]\n [!code-vb[System.Numerics.BigInteger.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,198],"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,198],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThan%2A&gt;</ph> method defines the operation of the greater than operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,159],"source":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[160,198]}]}]},{"pos":[205,530],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#11<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#11<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]\n [!code-vb[System.Numerics.BigInteger.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]"},{"pos":[537,877],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.","pos":[0,340],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,162],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29&gt;</ph> method directly, as the following example shows.","pos":[163,340],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows."}]}]},{"pos":[884,1046],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#12<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]"},{"pos":[1053,1296],"content":"If <ph id=\"ph1\">`right`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[1303,1432],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,129],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[216192,217638],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[217831,217859],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[217919,217948],"yaml":true},{"content":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`."}],"pos":[218006,218092],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than another <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,173],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is greater than another <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than another <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[219826,220000],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]\n [!code-vb[System.Numeric.BigInteger.Class#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numeric.BigInteger.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False","nodes":[{"pos":[0,198],"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,198],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThan%2A&gt;</ph> method defines the operation of the greater than operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,159],"source":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[160,198]}]}]},{"pos":[205,530],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#20<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#20<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]\n [!code-vb[System.Numeric.BigInteger.Class#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]"},{"pos":[537,922],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,385],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,203],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName> method instead."},{"content":"They can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[204,385],"source":" They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[929,1091],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#21<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numeric.BigInteger.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]"},{"pos":[1098,1280],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.%2A&gt;</ph> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&amp;autoUpgrade=False","pos":[0,182],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False"}]}],"pos":[220011,221303],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[221518,221546],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[221620,221649],"yaml":true},{"content":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`."}],"pos":[221707,221793],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than a 64-bit unsigned integer.","nodes":[{"pos":[0,137],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is greater than a 64-bit unsigned integer.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than a 64-bit unsigned integer."}],"pos":[223460,223598],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]\n [!code-vb[System.Numerics.BigInteger.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]","nodes":[{"pos":[0,198],"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,198],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThan%2A&gt;</ph> method defines the operation of the greater than operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,159],"source":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[160,198]}]}]},{"pos":[205,530],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#13<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#13<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]\n [!code-vb[System.Numerics.BigInteger.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]"},{"pos":[537,879],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.","pos":[0,342],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,163],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29&gt;</ph> method directly, as the following example shows.","pos":[164,342],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows."}]}]},{"pos":[886,1048],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#14<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]"}],"pos":[223609,224667],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[224906,224934],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[224995,225024],"yaml":true},{"content":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`."}],"pos":[225082,225168],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than a 64-bit unsigned integer.","nodes":[{"pos":[0,137],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is greater than a 64-bit unsigned integer.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than a 64-bit unsigned integer."}],"pos":[226888,227026],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]\n [!code-vb[System.Numerics.BigInteger.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]","nodes":[{"pos":[0,198],"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,198],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThan%2A&gt;</ph> method defines the operation of the greater than operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,159],"source":"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[160,198]}]}]},{"pos":[205,530],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#15<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#15<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]\n [!code-vb[System.Numerics.BigInteger.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]"},{"pos":[537,879],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,342],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,163],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[164,342],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[886,1048],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#16<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]"}],"pos":[227037,228095],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[228321,228349],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[228423,228452],"yaml":true},{"content":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`."}],"pos":[228510,228596],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than or equal to a 64-bit unsigned integer value.","nodes":[{"pos":[0,155],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is greater than or equal to a 64-bit unsigned integer value.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than or equal to a 64-bit unsigned integer value."}],"pos":[230358,230514],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]\n [!code-vb[System.Numerics.BigInteger.Operators#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"pos":[0,217],"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,217],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A&gt;</ph> method defines the operation of the greater than or equal to operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,178],"source":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[179,217]}]}]},{"pos":[224,549],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#21<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#21<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]\n [!code-vb[System.Numerics.BigInteger.Operators#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]"},{"pos":[556,905],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.","pos":[0,349],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,163],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29&gt;</ph> method directly, as the following example shows.","pos":[164,349],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows."}]}]},{"pos":[912,1074],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#22<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]"},{"pos":[1081,1211],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph>","pos":[0,130],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"}]}],"pos":[230525,231748],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[231994,232022],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[232083,232112],"yaml":true},{"content":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`."}],"pos":[232170,232256],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than or equal to another <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,185],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is greater than or equal to another <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than or equal to another <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[234092,234278],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]\n [!code-vb[System.Numeric.BigInteger.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numeric.BigInteger.Class#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False","nodes":[{"pos":[0,217],"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,217],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A&gt;</ph> method defines the operation of the greater than or equal to operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,178],"source":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[179,217]}]}]},{"pos":[224,549],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#22<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#22<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]\n [!code-vb[System.Numeric.BigInteger.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]"},{"pos":[556,900],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,344],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,145],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[146,344],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[907,1069],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#23<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numeric.BigInteger.Class#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]"},{"pos":[1076,1258],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.%2A&gt;</ph> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&amp;autoUpgrade=False","pos":[0,182],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False"}]}],"pos":[234289,235559],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[235781,235809],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[235883,235912],"yaml":true},{"content":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`."}],"pos":[235970,236056],"yaml":true},{"content":"Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,149],"content":"Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[237772,237922],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]\n [!code-vb[System.Numerics.BigInteger.Operators#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"pos":[0,217],"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,217],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A&gt;</ph> method defines the operation of the greater than or equal to operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,178],"source":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[179,217]}]}]},{"pos":[224,549],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#23<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#23<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]\n [!code-vb[System.Numerics.BigInteger.Operators#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]"},{"pos":[556,905],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,349],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,163],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[164,349],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[912,1074],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#24<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]"},{"pos":[1081,1211],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph>","pos":[0,130],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"}]}],"pos":[237933,239156],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[239389,239417],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[239491,239520],"yaml":true},{"content":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`."}],"pos":[239578,239664],"yaml":true},{"content":"Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,147],"content":"Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[241427,241575],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]\n [!code-vb[System.Numerics.BigInteger.Operators#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,217],"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,217],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A&gt;</ph> method defines the operation of the greater than or equal to operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,178],"source":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[179,217]}]}]},{"pos":[224,549],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#17<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#17<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]\n [!code-vb[System.Numerics.BigInteger.Operators#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]"},{"pos":[556,903],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,347],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,162],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[163,347],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[910,1072],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#18<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]"},{"pos":[1079,1321],"content":"If <ph id=\"ph1\">`left`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[1328,1457],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,129],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[241586,243057],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[243243,243271],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[243345,243374],"yaml":true},{"content":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`."}],"pos":[243432,243518],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than or equal to a 64-bit signed integer value.","nodes":[{"pos":[0,153],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is greater than or equal to a 64-bit signed integer value.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than or equal to a 64-bit signed integer value."}],"pos":[245228,245382],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]\n [!code-vb[System.Numerics.BigInteger.Operators#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,217],"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,217],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A&gt;</ph> method defines the operation of the greater than or equal to operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,178],"source":"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[179,217]}]}]},{"pos":[224,549],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#19<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#19<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]\n [!code-vb[System.Numerics.BigInteger.Operators#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]"},{"pos":[556,903],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.","pos":[0,347],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,162],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29&gt;</ph> method directly, as the following example shows.","pos":[163,347],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows."}]}]},{"pos":[910,1072],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#20<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]"},{"pos":[1079,1322],"content":"If <ph id=\"ph1\">`right`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[1329,1458],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,129],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[245393,246865],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[247065,247093],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[247153,247182],"yaml":true},{"content":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`."}],"pos":[247240,247326],"yaml":true},{"content":"Increments a <xref href=\"System.Numerics.BigInteger\"></xref> value by 1.","nodes":[{"pos":[0,72],"content":"Increments a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value by 1.","source":"Increments a <xref href=\"System.Numerics.BigInteger\"></xref> value by 1."}],"pos":[263620,263693],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]  \n  \n Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows.  \n  \n [!code-vb[System.Numeric.BigInteger.Class#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]  \n  \n Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`. Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"pos":[0,177],"content":"The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,177],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Increment%2A&gt;</ph> method defines the increment operation for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,138],"source":"The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[139,177]}]}]},{"pos":[184,345],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#24<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]"},{"pos":[352,572],"content":"Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows.","nodes":[{"content":"Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Increment%2A&gt;</ph> method directly, as the following example shows.","pos":[0,220],"source":"Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows."}]},{"pos":[579,741],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#25<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numeric.BigInteger.Class#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]"},{"pos":[748,1125],"content":"Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`. Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive.","nodes":[{"content":"Because <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> objects are immutable, the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.op_Increment%2A&gt;</ph> operator creates a new <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object whose value is one more than the <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object represented by <ph id=\"ph5\">`value`</ph>.","pos":[0,280],"source":"Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`."},{"content":"Therefore, repeated calls to <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Increment%2A&gt;</ph> may be expensive.","pos":[281,377],"source":" Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive."}]},{"pos":[1132,1298],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph>","pos":[0,166],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"}]}],"pos":[263704,265015],"yaml":true,"extradata":"MT"},{"content":"The value to increment.","nodes":[{"pos":[0,23],"content":"The value to increment.","nodes":[{"content":"The value to increment.","pos":[0,23]}]}],"pos":[265218,265242],"yaml":true},{"content":"The value of the <code>value</code> parameter incremented by 1.","nodes":[{"pos":[0,63],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter incremented by 1.","source":"The value of the <code>value</code> parameter incremented by 1."}],"pos":[265312,265376],"yaml":true},{"content":"Returns a value that indicates whether a 64-bit signed integer and a <xref href=\"System.Numerics.BigInteger\"></xref> value are not equal.","nodes":[{"pos":[0,137],"content":"Returns a value that indicates whether a 64-bit signed integer and a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value are not equal.","source":"Returns a value that indicates whether a 64-bit signed integer and a <xref href=\"System.Numerics.BigInteger\"></xref> value are not equal."}],"pos":[267029,267167],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]\n [!code-vb[System.Numerics.BigInteger.Operators#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]  \n  \n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \n  \n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method and reversing its value.  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.","nodes":[{"pos":[0,195],"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,195],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Inequality%2A&gt;</ph> method defines the operation of the inequality operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,156],"source":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[157,195]}]}]},{"pos":[202,527],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#25<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#25<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]\n [!code-vb[System.Numerics.BigInteger.Operators#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]"},{"pos":[534,646],"content":"Languages that do not support custom operators can test for inequality by using one of the following techniques:","nodes":[{"content":"Languages that do not support custom operators can test for inequality by using one of the following techniques:","pos":[0,112]}]},{"pos":[656,881],"content":"Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> instance method, which indicates the relationship between a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> and a signed long integer value.","pos":[0,225],"source":"Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value."}]},{"pos":[891,1027],"content":"Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method and reversing its value.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName&gt;</ph> instance method and reversing its value.","pos":[0,136],"source":"Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method and reversing its value."}]},{"pos":[1034,1276],"content":"If <ph id=\"ph1\">`left`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."}],"pos":[267178,268468],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[268646,268674],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[268748,268777],"yaml":true},{"content":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are not equal; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`."}],"pos":[268835,268923],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and a 64-bit signed integer are not equal.","nodes":[{"pos":[0,137],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value and a 64-bit signed integer are not equal.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and a 64-bit signed integer are not equal."}],"pos":[270577,270715],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]\n [!code-vb[System.Numerics.BigInteger.Operators#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]  \n  \n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \n  \n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> method and reversing its value.  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,195],"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,195],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Inequality%2A&gt;</ph> method defines the operation of the inequality operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,156],"source":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[157,195]}]}]},{"pos":[202,527],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#26<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#26<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]\n [!code-vb[System.Numerics.BigInteger.Operators#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]"},{"pos":[534,646],"content":"Languages that do not support custom operators can test for inequality by using one of the following techniques:","nodes":[{"content":"Languages that do not support custom operators can test for inequality by using one of the following techniques:","pos":[0,112]}]},{"pos":[656,872],"content":"Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> method, which indicates the relationship between a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> and a signed long integer value.","pos":[0,216],"source":"Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value."}]},{"pos":[882,1009],"content":"Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> method and reversing its value.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName&gt;</ph> method and reversing its value.","pos":[0,127],"source":"Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> method and reversing its value."}]},{"pos":[1016,1259],"content":"If <ph id=\"ph1\">`right`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[1266,1395],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,129],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[270726,272137],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[272329,272357],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[272417,272446],"yaml":true},{"content":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are not equal; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`."}],"pos":[272504,272592],"yaml":true},{"content":"Returns a value that indicates whether two <xref href=\"System.Numerics.BigInteger\"></xref> objects have different values.","nodes":[{"pos":[0,121],"content":"Returns a value that indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> objects have different values.","source":"Returns a value that indicates whether two <xref href=\"System.Numerics.BigInteger\"></xref> objects have different values."}],"pos":[274319,274441],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]\n [!code-vb[System.Numeric.BigInteger.Class#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]  \n  \n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects.  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> method and reversing its value.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"pos":[0,195],"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,195],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Inequality%2A&gt;</ph> method defines the operation of the inequality operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,156],"source":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[157,195]}]}]},{"pos":[202,527],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#26<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#26<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]\n [!code-vb[System.Numeric.BigInteger.Class#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]"},{"pos":[534,646],"content":"Languages that do not support custom operators can test for inequality by using one of the following techniques:","nodes":[{"content":"Languages that do not support custom operators can test for inequality by using one of the following techniques:","pos":[0,112]}]},{"pos":[656,833],"content":"Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName&gt;</ph> method, which indicates the relationship between two <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> objects.","pos":[0,177],"source":"Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects."}]},{"pos":[843,984],"content":"Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> method and reversing its value.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph> method and reversing its value.","pos":[0,141],"source":"Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> method and reversing its value."}]},{"pos":[991,1161],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph>","pos":[0,170],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"}]}],"pos":[274452,275627],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[275841,275869],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[275943,275972],"yaml":true},{"content":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are not equal; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`."}],"pos":[276030,276118],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and a 64-bit unsigned integer are not equal.","nodes":[{"pos":[0,139],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value and a 64-bit unsigned integer are not equal.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and a 64-bit unsigned integer are not equal."}],"pos":[277778,277918],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]\n [!code-vb[System.Numerics.BigInteger.Operators#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]  \n  \n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \n  \n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> method and reversing its value.","nodes":[{"pos":[0,195],"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,195],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Inequality%2A&gt;</ph> method defines the operation of the inequality operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,156],"source":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[157,195]}]}]},{"pos":[202,527],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#27<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#27<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]\n [!code-vb[System.Numerics.BigInteger.Operators#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]"},{"pos":[534,646],"content":"Languages that do not support custom operators can test for inequality by using one of the following techniques:","nodes":[{"content":"Languages that do not support custom operators can test for inequality by using one of the following techniques:","pos":[0,112]}]},{"pos":[656,876],"content":"Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method, which indicates the relationship between a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> and an unsigned long integer value.","pos":[0,220],"source":"Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value."}]},{"pos":[886,1014],"content":"Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> method and reversing its value.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName&gt;</ph> method and reversing its value.","pos":[0,128],"source":"Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> method and reversing its value."}]}],"pos":[277929,278955],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[279193,279221],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[279282,279311],"yaml":true},{"content":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are not equal; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`."}],"pos":[279369,279457],"yaml":true},{"content":"Returns a value that indicates whether a 64-bit unsigned integer and a <xref href=\"System.Numerics.BigInteger\"></xref> value are not equal.","nodes":[{"pos":[0,139],"content":"Returns a value that indicates whether a 64-bit unsigned integer and a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value are not equal.","source":"Returns a value that indicates whether a 64-bit unsigned integer and a <xref href=\"System.Numerics.BigInteger\"></xref> value are not equal."}],"pos":[281170,281310],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]\n [!code-vb[System.Numerics.BigInteger.Operators#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]  \n  \n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \n  \n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> method and reversing its value.","nodes":[{"pos":[0,195],"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,195],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Inequality%2A&gt;</ph> method defines the operation of the inequality operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,156],"source":"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[157,195]}]}]},{"pos":[202,527],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#28<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#28<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]\n [!code-vb[System.Numerics.BigInteger.Operators#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]"},{"pos":[534,646],"content":"Languages that do not support custom operators can test for inequality by using one of the following techniques:","nodes":[{"content":"Languages that do not support custom operators can test for inequality by using one of the following techniques:","pos":[0,112]}]},{"pos":[656,876],"content":"Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method, which indicates the relationship between a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> and an unsigned long integer value.","pos":[0,220],"source":"Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value."}]},{"pos":[886,1014],"content":"Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> method and reversing its value.","nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName&gt;</ph> method and reversing its value.","pos":[0,128],"source":"Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> method and reversing its value."}]}],"pos":[281321,282347],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[282572,282600],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[282674,282703],"yaml":true},{"content":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept> are not equal; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`."}],"pos":[282761,282849],"yaml":true},{"content":"Shifts a <xref href=\"System.Numerics.BigInteger\"></xref> value a specified number of bits to the left.","nodes":[{"pos":[0,102],"content":"Shifts a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value a specified number of bits to the left.","source":"Shifts a <xref href=\"System.Numerics.BigInteger\"></xref> value a specified number of bits to the left."}],"pos":[284550,284653],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]\n [!code-vb[System.Numerics.BigInteger.Operators#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]  \n  \n> [!NOTE]\n>  Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value.  \n  \n Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`. The following example shows that the results are identical to the results of using this operator.  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]\n [!code-vb[System.Numerics.BigInteger.Operators#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]","nodes":[{"pos":[0,202],"content":"The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,202],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LeftShift%2A&gt;</ph> method defines the operation of the bitwise left-shift operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,163],"source":"The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[164,202]}]}]},{"pos":[209,534],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#29<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#29<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]\n [!code-vb[System.Numerics.BigInteger.Operators#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]"},{"pos":[542,754],"content":"[!NOTE]\n Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value.","leadings":["","> "],"nodes":[{"content":"Unlike the bitwise left-shift operation with integer primitives, the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LeftShift%2A&gt;</ph> method preserves the sign of the original <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[9,210],"source":" Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value."}]},{"pos":[761,1002],"content":"Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`. The following example shows that the results are identical to the results of using this operator.","nodes":[{"content":"Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying <ph id=\"ph1\">`value`</ph> by <ph id=\"ph2\">`BigInteger.Pow(2, shift)`</ph>.","pos":[0,143],"source":"Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`."},{"content":"The following example shows that the results are identical to the results of using this operator.","pos":[144,241]}]},{"pos":[1009,1334],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#30<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#30<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]\n [!code-vb[System.Numerics.BigInteger.Operators#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]"}],"pos":[284664,286012],"yaml":true,"extradata":"MT"},{"content":"The value whose bits are to be shifted.","nodes":[{"pos":[0,39],"content":"The value whose bits are to be shifted.","nodes":[{"content":"The value whose bits are to be shifted.","pos":[0,39]}]}],"pos":[286226,286266],"yaml":true},{"content":"The number of bits to shift <code>value</code> to the left.","nodes":[{"pos":[0,59],"content":"The number of bits to shift <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the left.","source":"The number of bits to shift <code>value</code> to the left."}],"pos":[286326,286386],"yaml":true},{"content":"A value that has been shifted to the left by the specified number of bits.","nodes":[{"pos":[0,74],"content":"A value that has been shifted to the left by the specified number of bits.","nodes":[{"content":"A value that has been shifted to the left by the specified number of bits.","pos":[0,74]}]}],"pos":[286456,286531],"yaml":true},{"content":"Returns a value that indicates whether a 64-bit unsigned integer is less than a <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,134],"content":"Returns a value that indicates whether a 64-bit unsigned integer is less than a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a 64-bit unsigned integer is less than a <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[288178,288313],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]\n [!code-vb[System.Numerics.BigInteger.Operators#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"pos":[0,192],"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,192],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThan%2A&gt;</ph> method defines the operation of the less than operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,153],"source":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[154,192]}]}]},{"pos":[199,524],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#37<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#37<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]\n [!code-vb[System.Numerics.BigInteger.Operators#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]"},{"pos":[531,860],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,329],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,163],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead."},{"content":"They can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[164,329],"source":" They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[867,1029],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#38<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]"},{"pos":[1036,1166],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph>","pos":[0,130],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"}]}],"pos":[288324,289502],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[289725,289753],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[289827,289856],"yaml":true},{"content":"`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`."}],"pos":[289914,289997],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than a 64-bit unsigned integer.","nodes":[{"pos":[0,134],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is less than a 64-bit unsigned integer.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than a 64-bit unsigned integer."}],"pos":[291696,291831],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]\n [!code-vb[System.Numerics.BigInteger.Operators#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"pos":[0,192],"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,192],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThan%2A&gt;</ph> method defines the operation of the less than operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,153],"source":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[154,192]}]}]},{"pos":[199,524],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#35<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#35<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]\n [!code-vb[System.Numerics.BigInteger.Operators#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]"},{"pos":[531,860],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.","pos":[0,329],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,163],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead."},{"content":"They can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29&gt;</ph> method directly, as the following example shows.","pos":[164,329],"source":" They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows."}]}]},{"pos":[867,1029],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#36<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]"},{"pos":[1036,1166],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph>","pos":[0,130],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"}]}],"pos":[291842,293020],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[293256,293284],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[293345,293374],"yaml":true},{"content":"`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`."}],"pos":[293432,293515],"yaml":true},{"content":"Returns a value that indicates whether a 64-bit signed integer is less than a <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,132],"content":"Returns a value that indicates whether a 64-bit signed integer is less than a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a 64-bit signed integer is less than a <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[295208,295341],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]\n [!code-vb[System.Numerics.BigInteger.Operators#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,192],"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,192],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThan%2A&gt;</ph> method defines the operation of the less than operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,153],"source":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[154,192]}]}]},{"pos":[199,524],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#31<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#31<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]\n [!code-vb[System.Numerics.BigInteger.Operators#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]"},{"pos":[531,868],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,337],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,162],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[163,337],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[875,1037],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#32<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]"},{"pos":[1044,1286],"content":"If <ph id=\"ph1\">`left`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[1293,1422],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,129],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[295352,296788],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[296964,296992],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[297066,297095],"yaml":true},{"content":"`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`."}],"pos":[297153,297236],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than a 64-bit signed integer.","nodes":[{"pos":[0,132],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is less than a 64-bit signed integer.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than a 64-bit signed integer."}],"pos":[298876,299009],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]\n [!code-vb[System.Numerics.BigInteger.Operators#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,192],"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,192],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThan%2A&gt;</ph> method defines the operation of the less than operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,153],"source":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[154,192]}]}]},{"pos":[199,524],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#33<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#33<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]\n [!code-vb[System.Numerics.BigInteger.Operators#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]"},{"pos":[531,868],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.","pos":[0,337],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,162],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29&gt;</ph> method directly, as the following example shows.","pos":[163,337],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows."}]}]},{"pos":[875,1037],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#34<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]"},{"pos":[1044,1287],"content":"If <ph id=\"ph1\">`right`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[1294,1423],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,129],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[299020,300457],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[300647,300675],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[300735,300764],"yaml":true},{"content":"`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`."}],"pos":[300822,300905],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than another <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,170],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is less than another <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than another <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[302618,302789],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]\n [!code-vb[System.Numeric.BigInteger.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numeric.BigInteger.Class#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"pos":[0,192],"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,192],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThan%2A&gt;</ph> method defines the operation of the less than operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,153],"source":"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[154,192]}]}]},{"pos":[199,524],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#27<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#27<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]\n [!code-vb[System.Numeric.BigInteger.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]"},{"pos":[531,865],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,334],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,145],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead."},{"content":"Some languages can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[146,334],"source":" Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[872,1034],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#28<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numeric.BigInteger.Class#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]"},{"pos":[1041,1211],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph>","pos":[0,170],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"}]}],"pos":[302800,304023],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[304235,304263],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[304337,304366],"yaml":true},{"content":"`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`."}],"pos":[304424,304507],"yaml":true},{"content":"Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,144],"content":"Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[306189,306334],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]\n [!code-vb[System.Numerics.BigInteger.Operators#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,211],"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,211],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A&gt;</ph> method defines the operation of the less than or equal to operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,172],"source":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[173,211]}]}]},{"pos":[218,543],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#39<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#39<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]\n [!code-vb[System.Numerics.BigInteger.Operators#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]"},{"pos":[550,884],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,334],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,162],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead."},{"content":"They can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[163,334],"source":" They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[891,1053],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#40<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]"},{"pos":[1060,1302],"content":"If <ph id=\"ph1\">`left`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[1309,1438],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,129],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[306345,307797],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[307980,308008],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[308082,308111],"yaml":true},{"content":"`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than or equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`."}],"pos":[308169,308264],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than or equal to a 64-bit signed integer.","nodes":[{"pos":[0,144],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is less than or equal to a 64-bit signed integer.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than or equal to a 64-bit signed integer."}],"pos":[309953,310098],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]\n [!code-vb[System.Numerics.BigInteger.Operators#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"pos":[0,211],"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,211],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A&gt;</ph> method defines the operation of the less than or equal to operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,172],"source":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[173,211]}]}]},{"pos":[218,543],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#41<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#41<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]\n [!code-vb[System.Numerics.BigInteger.Operators#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]"},{"pos":[550,884],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.","pos":[0,334],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,162],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead."},{"content":"They can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29&gt;</ph> method directly, as the following example shows.","pos":[163,334],"source":" They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows."}]}]},{"pos":[891,1053],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#42<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]"},{"pos":[1060,1303],"content":"If <ph id=\"ph1\">`right`</ph> is a <ph id=\"ph2\">&lt;xref:System.Byte&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Int16&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Int32&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.SByte&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.UInt16&gt;</ph>, or <ph id=\"ph7\">&lt;xref:System.UInt32&gt;</ph> value, it is implicitly converted to an <ph id=\"ph8\">&lt;xref:System.Int64&gt;</ph> value when the operation is performed.","source":"If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."},{"pos":[1310,1439],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName&gt;</ph>","pos":[0,129],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"}]}],"pos":[310109,311562],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[311759,311787],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[311847,311876],"yaml":true},{"content":"`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than or equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`."}],"pos":[311934,312029],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than or equal to another <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,182],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is less than or equal to another <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than or equal to another <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[313791,313974],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]\n [!code-vb[System.Numeric.BigInteger.Class#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numeric.BigInteger.Class#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"pos":[0,211],"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,211],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A&gt;</ph> method defines the operation of the less than or equal to operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,172],"source":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[173,211]}]}]},{"pos":[218,543],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#29<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#29<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]\n [!code-vb[System.Numeric.BigInteger.Class#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]"},{"pos":[550,856],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,306],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Compare%2A&gt;</ph> method instead.","pos":[0,120],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead."},{"content":"They can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[121,306],"source":" They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[863,1025],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#30<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numeric.BigInteger.Class#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]"},{"pos":[1032,1202],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph>","pos":[0,170],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"}]}],"pos":[313985,315199],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[315418,315446],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[315520,315549],"yaml":true},{"content":"`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than or equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`."}],"pos":[315607,315702],"yaml":true},{"content":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than or equal to a 64-bit unsigned integer.","nodes":[{"pos":[0,146],"content":"Returns a value that indicates whether a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value is less than or equal to a 64-bit unsigned integer.","source":"Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than or equal to a 64-bit unsigned integer."}],"pos":[317397,317544],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]\n [!code-vb[System.Numerics.BigInteger.Operators#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"pos":[0,211],"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,211],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A&gt;</ph> method defines the operation of the less than or equal to operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,172],"source":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[173,211]}]}]},{"pos":[218,543],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#43<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#43<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]\n [!code-vb[System.Numerics.BigInteger.Operators#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]"},{"pos":[550,886],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.","pos":[0,336],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,163],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead."},{"content":"They can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29&gt;</ph> method directly, as the following example shows.","pos":[164,336],"source":" They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows."}]}]},{"pos":[893,1055],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#44<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]"},{"pos":[1062,1192],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph>","pos":[0,130],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"}]}],"pos":[317555,318759],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[319002,319030],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[319091,319120],"yaml":true},{"content":"`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than or equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`."}],"pos":[319178,319273],"yaml":true},{"content":"Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,146],"content":"Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[321021,321168],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]\n [!code-vb[System.Numerics.BigInteger.Operators#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"pos":[0,211],"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,211],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A&gt;</ph> method defines the operation of the less than or equal to operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,172],"source":"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[173,211]}]}]},{"pos":[218,543],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#45<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#45<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]\n [!code-vb[System.Numerics.BigInteger.Operators#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]"},{"pos":[550,886],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","nodes":[{"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.","pos":[0,336],"nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph> method instead.","pos":[0,163],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead."},{"content":"They can also call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29&gt;</ph> method directly, as the following example shows.","pos":[164,336],"source":" They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows."}]}]},{"pos":[893,1055],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#46<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.Operators#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]"},{"pos":[1062,1192],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName&gt;</ph>","pos":[0,130],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"}]}],"pos":[321179,322383],"yaml":true,"extradata":"MT"},{"content":"The first value to compare.","nodes":[{"pos":[0,27],"content":"The first value to compare.","nodes":[{"content":"The first value to compare.","pos":[0,27]}]}],"pos":[322613,322641],"yaml":true},{"content":"The second value to compare.","nodes":[{"pos":[0,28],"content":"The second value to compare.","nodes":[{"content":"The second value to compare.","pos":[0,28]}]}],"pos":[322715,322744],"yaml":true},{"content":"`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than or equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`."}],"pos":[322802,322897],"yaml":true},{"content":"Returns the remainder that results from division with two specified <xref href=\"System.Numerics.BigInteger\"></xref> values.","nodes":[{"pos":[0,123],"content":"Returns the remainder that results from division with two specified <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values.","source":"Returns the remainder that results from division with two specified <xref href=\"System.Numerics.BigInteger\"></xref> values."}],"pos":[324664,324788],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]\n [!code-vb[System.Numeric.BigInteger.Class#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=fullName> method instead.  \n  \n The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result. The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"pos":[0,189],"content":"The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,189],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Modulus%2A&gt;</ph> method defines the operation of the modulus operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,150],"source":"The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[151,189]}]}]},{"pos":[196,521],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#31<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#31<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]\n [!code-vb[System.Numeric.BigInteger.Class#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]"},{"pos":[528,675],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=fullName> method instead.","nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,147],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=fullName> method instead."}]},{"pos":[682,1065],"content":"The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result. The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types.","nodes":[{"content":"The sign of the value returned by the modulus operation depends on the sign of <ph id=\"ph1\">`dividend`</ph>: If <ph id=\"ph2\">`dividend`</ph> is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result.","pos":[0,234],"source":"The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result."},{"content":"The behavior of the modulus operation with <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values is identical to the modulus operation with other integral types.","pos":[235,383],"source":" The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types."}]},{"pos":[1072,1244],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph>","pos":[0,172],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"}]}],"pos":[324799,326055],"yaml":true,"extradata":"MT"},{"content":"The value to be divided.","nodes":[{"pos":[0,24],"content":"The value to be divided.","nodes":[{"content":"The value to be divided.","pos":[0,24]}]}],"pos":[326298,326323],"yaml":true},{"content":"The value to divide by.","nodes":[{"pos":[0,23],"content":"The value to divide by.","nodes":[{"content":"The value to divide by.","pos":[0,23]}]}],"pos":[326399,326423],"yaml":true},{"content":"The remainder that results from the division.","nodes":[{"pos":[0,45],"content":"The remainder that results from the division.","nodes":[{"content":"The remainder that results from the division.","pos":[0,45]}]}],"pos":[326493,326539],"yaml":true},{"content":"<code>divisor</code> is 0 (zero).","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;divisor&lt;/code&gt;</ph> is 0 (zero).","source":"<code>divisor</code> is 0 (zero)."}],"pos":[326706,326740],"yaml":true},{"content":"Multiplies two specified <xref href=\"System.Numerics.BigInteger\"></xref> values.","nodes":[{"pos":[0,80],"content":"Multiplies two specified <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values.","source":"Multiplies two specified <xref href=\"System.Numerics.BigInteger\"></xref> values."}],"pos":[328384,328465],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]\n [!code-vb[System.Numeric.BigInteger.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]  \n  \n The equivalent method for this operator is <xref:System.Numeric%2A> s .BigInteger.Multiply(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False","nodes":[{"pos":[0,197],"content":"The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,197],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Multiply%2A&gt;</ph> method defines the operation of the multiplication operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,158],"source":"The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[159,197]}]}]},{"pos":[204,529],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#11<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#11<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]\n [!code-vb[System.Numeric.BigInteger.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]"},{"pos":[536,720],"content":"The equivalent method for this operator is <xref:System.Numeric%2A> s .BigInteger.Multiply(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numeric%2A&gt;</ph> s .BigInteger.Multiply(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&amp;autoUpgrade=False","pos":[0,184],"source":"The equivalent method for this operator is <xref:System.Numeric%2A> s .BigInteger.Multiply(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False"}]}],"pos":[328476,329204],"yaml":true,"extradata":"MT"},{"content":"The first value to multiply.","nodes":[{"pos":[0,28],"content":"The first value to multiply.","nodes":[{"content":"The first value to multiply.","pos":[0,28]}]}],"pos":[329438,329467],"yaml":true},{"content":"The second value to multiply.","nodes":[{"pos":[0,29],"content":"The second value to multiply.","nodes":[{"content":"The second value to multiply.","pos":[0,29]}]}],"pos":[329541,329571],"yaml":true},{"content":"The product of <code>left</code> and <code>right</code>.","nodes":[{"pos":[0,56],"content":"The product of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The product of <code>left</code> and <code>right</code>."}],"pos":[329641,329698],"yaml":true},{"content":"Returns the bitwise one's complement of a <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,96],"content":"Returns the bitwise one's complement of a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Returns the bitwise one's complement of a <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[331314,331411],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values. The bitwise one's complement operator reverses each bit in a numeric value. That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result. The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]  \n  \n Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation. For example:  \n  \n [!code-vb[System.Numerics.BigInteger.OnesComplement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]","nodes":[{"pos":[0,464],"content":"The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values. The bitwise one's complement operator reverses each bit in a numeric value. That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result. The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_OnesComplement%2A&gt;</ph> method defines the operation of the bitwise one's complement operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,174],"source":"The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values."},{"content":"The bitwise one's complement operator reverses each bit in a numeric value.","pos":[175,250]},{"content":"That is, bits in <ph id=\"ph1\">`value`</ph> that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result.","pos":[251,362],"source":" That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_OnesComplement%2A&gt;</ph> method enables code such as the following:","pos":[363,464],"source":" The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:"}]},{"pos":[471,824],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.OnesComplement#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.OnesComplement#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]"},{"pos":[831,1034],"content":"Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation. For example:","nodes":[{"content":"Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation. For example:","pos":[0,203],"nodes":[{"content":"Languages that do not support custom operators may be able to call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_OnesComplement%2A&gt;</ph> method directly to perform a bitwise one's complement operation.","pos":[0,190],"source":"Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation."},{"content":"For example:","pos":[191,203]}]}]},{"pos":[1041,1217],"content":"<bpt id=\"p1\">[!code-vb</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.OnesComplement#2<ept id=\"p2\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)</ept><ept id=\"p1\">]</ept>","source":"[!code-vb[System.Numerics.BigInteger.OnesComplement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]"}],"pos":[331422,332649],"yaml":true,"extradata":"MT"},{"content":"An integer value.","nodes":[{"pos":[0,17],"content":"An integer value.","nodes":[{"content":"An integer value.","pos":[0,17]}]}],"pos":[332857,332875],"yaml":true},{"content":"The bitwise one's complement of <code>value</code>.","nodes":[{"pos":[0,51],"content":"The bitwise one's complement of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The bitwise one's complement of <code>value</code>."}],"pos":[332945,332997],"yaml":true},{"content":"Shifts a <xref href=\"System.Numerics.BigInteger\"></xref> value a specified number of bits to the right.","nodes":[{"pos":[0,103],"content":"Shifts a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value a specified number of bits to the right.","source":"Shifts a <xref href=\"System.Numerics.BigInteger\"></xref> value a specified number of bits to the right."}],"pos":[334655,334759],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]\n [!code-vb[System.Numerics.BigInteger.Operators#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]  \n  \n Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values. The following example shows that the results are identical to the results of using this operator.  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]\n [!code-vb[System.Numerics.BigInteger.Operators#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]  \n  \n If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>. If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=fullName>.","nodes":[{"pos":[0,204],"content":"The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,204],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_RightShift%2A&gt;</ph> method defines the operation of the bitwise right-shift operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,165],"source":"The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[166,204]}]}]},{"pos":[211,538],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#47<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#47<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]\n [!code-vb[System.Numerics.BigInteger.Operators#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]"},{"pos":[545,836],"content":"Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values. The following example shows that the results are identical to the results of using this operator.","nodes":[{"content":"Languages that do not support custom operators can perform a bitwise right-shift operation by dividing <ph id=\"ph1\">`value`</ph> by <ph id=\"ph2\">`BigInteger.Pow(2, shift)`</ph> and subtracting 1 times <ph id=\"ph3\">`shift`</ph> for negative values.","pos":[0,193],"source":"Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values."},{"content":"The following example shows that the results are identical to the results of using this operator.","pos":[194,291]}]},{"pos":[843,1170],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Operators#48<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Operators#48<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Operators#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]\n [!code-vb[System.Numerics.BigInteger.Operators#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]"},{"pos":[1177,1616],"content":"If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>. If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=fullName>.","nodes":[{"content":"If <ph id=\"ph1\">`shift`</ph> is greater than or equal to the number of bits in a positive <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value, the result of the right-shift operation is <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName&gt;</ph>.","pos":[0,223],"source":"If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>."},{"content":"If <ph id=\"ph1\">`shift`</ph> is greater than the number of bits in a negative <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value, the result of the right-shift operation is <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=fullName&gt;</ph>.","pos":[224,439],"source":" If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=fullName>."}]}],"pos":[334770,336399],"yaml":true,"extradata":"MT"},{"content":"The value whose bits are to be shifted.","nodes":[{"pos":[0,39],"content":"The value whose bits are to be shifted.","nodes":[{"content":"The value whose bits are to be shifted.","pos":[0,39]}]}],"pos":[336614,336654],"yaml":true},{"content":"The number of bits to shift <code>value</code> to the right.","nodes":[{"pos":[0,60],"content":"The number of bits to shift <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the right.","source":"The number of bits to shift <code>value</code> to the right."}],"pos":[336714,336775],"yaml":true},{"content":"A value that has been shifted to the right by the specified number of bits.","nodes":[{"pos":[0,75],"content":"A value that has been shifted to the right by the specified number of bits.","nodes":[{"content":"A value that has been shifted to the right by the specified number of bits.","pos":[0,75]}]}],"pos":[336845,336921],"yaml":true},{"content":"Subtracts a <xref href=\"System.Numerics.BigInteger\"></xref> value from another <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,133],"content":"Subtracts a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value from another <ph id=\"ph2\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"Subtracts a <xref href=\"System.Numerics.BigInteger\"></xref> value from another <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[338654,338788],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]\n [!code-vb[System.Numeric.BigInteger.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=fullName> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"pos":[0,197],"content":"The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:","pos":[0,197],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_Subtraction%2A&gt;</ph> method defines the operation of the subtraction operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,158],"source":"The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values."},{"content":"It enables code such as the following:","pos":[159,197]}]}]},{"pos":[204,529],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numeric.BigInteger.Class#14<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numeric.BigInteger.Class#14<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numeric.BigInteger.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]\n [!code-vb[System.Numeric.BigInteger.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]"},{"pos":[536,682],"content":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=fullName> method instead.","nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=fullName&gt;</ph> method instead.","pos":[0,146],"source":"Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=fullName> method instead."}]},{"pos":[689,860],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph>","pos":[0,171],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"}]}],"pos":[338799,339669],"yaml":true,"extradata":"MT"},{"content":"The value to subtract from (the minuend).","nodes":[{"pos":[0,41],"content":"The value to subtract from (the minuend).","nodes":[{"content":"The value to subtract from (the minuend).","pos":[0,41]}]}],"pos":[339906,339948],"yaml":true},{"content":"The value to subtract (the subtrahend).","nodes":[{"pos":[0,39],"content":"The value to subtract (the subtrahend).","nodes":[{"content":"The value to subtract (the subtrahend).","pos":[0,39]}]}],"pos":[340022,340062],"yaml":true},{"content":"The result of subtracting <code>right</code> from <code>left</code>.","nodes":[{"pos":[0,68],"content":"The result of subtracting <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">right</ph><ept id=\"p1\">&lt;/code&gt;</ept> from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of subtracting <code>right</code> from <code>left</code>."}],"pos":[340132,340201],"yaml":true},{"content":"Negates a specified BigInteger value.","nodes":[{"pos":[0,37],"content":"Negates a specified BigInteger value.","nodes":[{"content":"Negates a specified BigInteger value.","pos":[0,37]}]}],"pos":[341830,341868],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values. The operation produces a value that results in 0 (zero) when it is added to the original number. Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"pos":[0,415],"content":"The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values. The operation produces a value that results in 0 (zero) when it is added to the original number. Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.","nodes":[{"content":"The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values. The operation produces a value that results in 0 (zero) when it is added to the original number. Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.","pos":[0,415],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_UnaryNegation%2A&gt;</ph> method defines the operation of the unary negation operator (or the additive inverse operator) for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,198],"source":"The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values."},{"content":"The operation produces a value that results in 0 (zero) when it is added to the original number.","pos":[199,295]},{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Negate%2A&gt;</ph> method instead.","pos":[296,415],"source":" Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead."}]}]},{"pos":[422,562],"content":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=fullName&gt;</ph>","pos":[0,140],"source":"The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=fullName>"}]}],"pos":[341879,342446],"yaml":true,"extradata":"MT"},{"content":"The value to negate.","nodes":[{"pos":[0,20],"content":"The value to negate.","nodes":[{"content":"The value to negate.","pos":[0,20]}]}],"pos":[343127,343148],"yaml":true},{"content":"The result of the <code>value</code> parameter multiplied by negative one (-1).","nodes":[{"pos":[0,79],"content":"The result of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter multiplied by negative one (-1).","source":"The result of the <code>value</code> parameter multiplied by negative one (-1)."}],"pos":[343218,343298],"yaml":true},{"content":"Returns the value of the <xref href=\"System.Numerics.BigInteger\"></xref> operand. (The sign of the operand is unchanged.)","nodes":[{"pos":[0,121],"content":"Returns the value of the <xref href=\"System.Numerics.BigInteger\"></xref> operand. (The sign of the operand is unchanged.)","nodes":[{"content":"Returns the value of the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> operand.","pos":[0,81],"source":"Returns the value of the <xref href=\"System.Numerics.BigInteger\"></xref> operand."},{"content":"(The sign of the operand is unchanged.)","pos":[82,121]}]}],"pos":[344905,345027],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values.","nodes":[{"pos":[0,159],"content":"The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.op_UnaryPlus%2A&gt;</ph> method defines the operation of the unary positive operator for <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,159],"source":"The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values."}]}],"pos":[345038,345198],"yaml":true,"extradata":"MT"},{"content":"An integer value.","nodes":[{"pos":[0,17],"content":"An integer value.","nodes":[{"content":"An integer value.","pos":[0,17]}]}],"pos":[345401,345419],"yaml":true},{"content":"The value of the <code>value</code> operand.","nodes":[{"pos":[0,44],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> operand.","source":"The value of the <code>value</code> operand."}],"pos":[345489,345534],"yaml":true},{"content":"Converts the string representation of a number in a specified style and culture-specific format to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent.","nodes":[{"pos":[0,162],"content":"Converts the string representation of a number in a specified style and culture-specific format to its <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> equivalent.","source":"Converts the string representation of a number in a specified style and culture-specific format to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent."}],"pos":[347290,347453],"yaml":true},{"content":"The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed. `styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.  \n  \n Depending on the value of `style`, the `value` parameter may include the following elements:  \n  \n [*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \n  \n If `style` includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the `value` parameter may include the following elements:  \n  \n [*ws*]*hexdigits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the culture indicated by the `provider` parameter. The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*|A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.|  \n|*,*|A culture-specific group separator symbol. The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.  \n  \n|NumberStyles value|Elements permitted in value in addition to digits|  \n|------------------------|-------------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles.None>|The *digits* element only.|  \n|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|The decimal point (.) and *fractional-digits* elements.|  \n|<xref:System.Globalization.NumberStyles.AllowExponent>|The \"e\" or \"E\" character, which indicates exponential notation. along with *exponential_digits*.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|The *ws* element at the start of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|The *ws* element at the end of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|The *sign* element at the start of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|The *sign* element at the end of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowParentheses>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles.AllowThousands>|The group separator (,) element.|  \n|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|The currency ($) element.|  \n|<xref:System.Globalization.NumberStyles.Currency>|All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Float>|The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol. The `value` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Number>|The `ws`, `sign`, group separator (,), and decimal point (.) elements.|  \n|<xref:System.Globalization.NumberStyles.Any>|All elements. However, `value` cannot represent a hexadecimal number.|  \n  \n> [!IMPORTANT]\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \n  \n Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)  \n  \n> [!NOTE]\n>  If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \n  \n If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  \n  \n [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`. Typically, `provider` can be any one of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \n  \n-   A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.","nodes":[{"pos":[0,646],"content":"The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed. `styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.","nodes":[{"content":"The <ph id=\"ph1\">`style`</ph> parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the <ph id=\"ph2\">`value`</ph> parameter for the parse operation to succeed.","pos":[0,243],"source":"The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed."},{"content":"<ph id=\"ph1\">`styles`</ph> must be a combination of bit flags from the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration.","pos":[244,350],"source":"`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration."},{"content":"The <ph id=\"ph1\">`style`</ph> parameter makes this method overload useful when <ph id=\"ph2\">`value`</ph> contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by <ph id=\"ph3\">`value`</ph> is known only at run time, or when you want to disallow white space or a sign symbol in <ph id=\"ph4\">`value`</ph>.","pos":[351,646],"source":" The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`."}]},{"pos":[653,745],"content":"Depending on the value of <ph id=\"ph1\">`style`</ph>, the <ph id=\"ph2\">`value`</ph> parameter may include the following elements:","source":"Depending on the value of `style`, the `value` parameter may include the following elements:"},{"pos":[752,849],"content":"[<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>][<bpt id=\"p2\">*</bpt><ph id=\"ph1\">$</ph><ept id=\"p2\">*</ept>][<bpt id=\"p3\">*</bpt>sign<ept id=\"p3\">*</ept>][<bpt id=\"p4\">*</bpt>digits<ept id=\"p4\">*</ept>,]<bpt id=\"p5\">*</bpt>digits<ept id=\"p5\">*</ept>[<bpt id=\"p6\">*</bpt>.fractional_digits<ept id=\"p6\">*</ept>][E[<bpt id=\"p7\">*</bpt>sign<ept id=\"p7\">*</ept>]<bpt id=\"p8\">*</bpt>exponential_digits<ept id=\"p8\">*</ept>][<bpt id=\"p9\">*</bpt>ws<ept id=\"p9\">*</ept>]","source":"[*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]"},{"pos":[856,1000],"content":"If <ph id=\"ph1\">`style`</ph> includes <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph>, the <ph id=\"ph3\">`value`</ph> parameter may include the following elements:","source":"If `style` includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the `value` parameter may include the following elements:"},{"pos":[1007,1030],"content":"[<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>]<bpt id=\"p2\">*</bpt>hexdigits<ept id=\"p2\">*</ept>[<bpt id=\"p3\">*</bpt>ws<ept id=\"p3\">*</ept>]","source":"[*ws*]*hexdigits*[*ws*]"},{"pos":[1037,1132],"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","pos":[0,95],"nodes":[{"content":"Elements in square brackets ([ and ]) are optional.","pos":[0,51]},{"content":"The following table describes each element.","pos":[52,95]}]}]},{"pos":[1139,1146],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1147,1158],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[1199,1203],"content":"<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>","source":"*ws*"},{"pos":[1204,1504],"content":"Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"Optional white space.","pos":[0,21]},{"content":"White space can appear at the start of <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag, and it can appear at the end of <ph id=\"ph4\">`value`</ph> if <ph id=\"ph5\">`style`</ph> includes the <ph id=\"ph6\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[22,300],"source":" White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[1513,2012],"content":"A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the culture indicated by the `provider` parameter. The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"A culture-specific currency symbol.","pos":[0,35]},{"content":"Its position in the string is defined by the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName&gt;</ph> properties of the culture indicated by the <ph id=\"ph3\">`provider`</ph> parameter.","pos":[36,343],"source":" Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the culture indicated by the `provider` parameter."},{"content":"The current culture's currency symbol can appear in <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[344,499],"source":" The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[2017,2023],"content":"<bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept>","source":"*sign*"},{"pos":[2024,2477],"content":"An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"An optional sign.","pos":[0,17]},{"content":"The sign can appear at the start of <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag, and it can appear at the end of <ph id=\"ph4\">`value`</ph> if <ph id=\"ph5\">`style`</ph> includes the <ph id=\"ph6\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[18,293],"source":" The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."},{"content":"Parentheses can be used in <ph id=\"ph1\">`value`</ph> to indicate a negative value if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[294,453],"source":" Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[2482,2555],"content":"*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*","nodes":[{"content":"<bpt id=\"p1\">*</bpt>digits<ept id=\"p1\">*</ept>","pos":[0,8],"source":"*digits*"},{"content":"<bpt id=\"p1\">*</bpt>fractional_digits<ept id=\"p1\">*</ept>","pos":[21,40],"source":"*fractional_digits*"},{"content":"<bpt id=\"p1\">*</bpt>exponential_digits<ept id=\"p1\">*</ept>","pos":[53,73],"source":"*exponential_digits*"}]},{"pos":[2556,2646],"content":"A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.","nodes":[{"content":"A sequence of digits from 0 through 9.","pos":[0,38]},{"content":"For <bpt id=\"p1\">*</bpt>fractional_digits<ept id=\"p1\">*</ept>, only the digit 0 is valid.","pos":[39,90],"source":" For *fractional_digits*, only the digit 0 is valid."}]},{"pos":[2651,2654],"content":"<bpt id=\"p1\">*</bpt>,<ept id=\"p1\">*</ept>","source":"*,*"},{"pos":[2655,2881],"content":"A culture-specific group separator symbol. The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"A culture-specific group separator symbol.","pos":[0,42]},{"content":"The group separator symbol of the culture specified by <ph id=\"ph1\">`provider`</ph> can appear in <ph id=\"ph2\">`value`</ph> if <ph id=\"ph3\">`style`</ph> includes the <ph id=\"ph4\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[43,226],"source":" The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[2886,2889],"content":"<bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","source":"*.*"},{"pos":[2890,3291],"content":"A culture-specific decimal point symbol. The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.","nodes":[{"content":"A culture-specific decimal point symbol.","pos":[0,40]},{"content":"The decimal point symbol of the culture designated by <ph id=\"ph1\">`provider`</ph> can appear in <ph id=\"ph2\">`value`</ph> if <ph id=\"ph3\">`style`</ph> includes the <ph id=\"ph4\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[41,223],"source":" The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."},{"content":"Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if <bpt id=\"p1\">*</bpt>fractional_digits<ept id=\"p1\">*</ept> includes any other digit, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[224,401],"source":" Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown."}]},{"pos":[3296,3297],"content":"E","nodes":[{"content":"E","pos":[0,1]}]},{"pos":[3298,3572],"content":"The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation.","pos":[0,109]},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can represent a number in exponential notation if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[110,274],"source":" The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[3577,3588],"content":"<bpt id=\"p1\">*</bpt>hexdigits<ept id=\"p1\">*</ept>","source":"*hexdigits*"},{"pos":[3589,3655],"content":"A sequence of hexadecimal digits from 0 through f, or 0 through F.","nodes":[{"content":"A sequence of hexadecimal digits from 0 through f, or 0 through F.","pos":[0,66]}]},{"pos":[3663,4127],"content":"A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.","nodes":[{"content":"A string with digits only (which corresponds to the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style) always parses successfully.","pos":[0,152],"source":"A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully."},{"content":"Most of the remaining <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members control elements that may be present, but are not required to be present, in the input string.","pos":[153,318],"source":" Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string."},{"content":"The following table indicates how individual <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members affect the elements that may be present in <ph id=\"ph2\">`value`</ph>.","pos":[319,464],"source":" The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`."}]},{"pos":[4134,4152],"content":"NumberStyles value","nodes":[{"content":"NumberStyles value","pos":[0,18]}]},{"pos":[4153,4202],"content":"Elements permitted in value in addition to digits","nodes":[{"content":"Elements permitted in value in addition to digits","pos":[0,49]}]},{"pos":[4292,4337],"content":"<xref:System.Globalization.NumberStyles.None>","nodes":[]},{"pos":[4338,4364],"content":"The <bpt id=\"p1\">*</bpt>digits<ept id=\"p1\">*</ept> element only.","source":"The *digits* element only."},{"pos":[4369,4427],"content":"<xref:System.Globalization.NumberStyles.AllowDecimalPoint>","nodes":[]},{"pos":[4428,4483],"content":"The decimal point (.) and <bpt id=\"p1\">*</bpt>fractional-digits<ept id=\"p1\">*</ept> elements.","source":"The decimal point (.) and *fractional-digits* elements."},{"pos":[4488,4542],"content":"<xref:System.Globalization.NumberStyles.AllowExponent>","nodes":[]},{"pos":[4543,4639],"content":"The \"e\" or \"E\" character, which indicates exponential notation. along with *exponential_digits*.","nodes":[{"content":"The \"e\" or \"E\" character, which indicates exponential notation.","pos":[0,63]},{"content":"along with <bpt id=\"p1\">*</bpt>exponential_digits<ept id=\"p1\">*</ept>.","pos":[64,96],"source":" along with *exponential_digits*."}]},{"pos":[4644,4702],"content":"<xref:System.Globalization.NumberStyles.AllowLeadingWhite>","nodes":[]},{"pos":[4703,4744],"content":"The <bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept> element at the start of <ph id=\"ph1\">`value`</ph>.","source":"The *ws* element at the start of `value`."},{"pos":[4749,4808],"content":"<xref:System.Globalization.NumberStyles.AllowTrailingWhite>","nodes":[]},{"pos":[4809,4848],"content":"The <bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept> element at the end of <ph id=\"ph1\">`value`</ph>.","source":"The *ws* element at the end of `value`."},{"pos":[4853,4910],"content":"<xref:System.Globalization.NumberStyles.AllowLeadingSign>","nodes":[]},{"pos":[4911,4954],"content":"The <bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept> element at the start of <ph id=\"ph1\">`value`</ph>.","source":"The *sign* element at the start of `value`."},{"pos":[4959,5017],"content":"<xref:System.Globalization.NumberStyles.AllowTrailingSign>","nodes":[]},{"pos":[5018,5059],"content":"The <bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept> element at the end of <ph id=\"ph1\">`value`</ph>.","source":"The *sign* element at the end of `value`."},{"pos":[5064,5121],"content":"<xref:System.Globalization.NumberStyles.AllowParentheses>","nodes":[]},{"pos":[5122,5196],"content":"The <bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept> element in the form of parentheses enclosing the numeric value.","source":"The *sign* element in the form of parentheses enclosing the numeric value."},{"pos":[5201,5256],"content":"<xref:System.Globalization.NumberStyles.AllowThousands>","nodes":[]},{"pos":[5257,5289],"content":"The group separator (,) element.","nodes":[{"content":"The group separator (,) element.","pos":[0,32]}]},{"pos":[5294,5354],"content":"<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>","nodes":[]},{"pos":[5355,5380],"content":"The currency ($) element.","nodes":[{"content":"The currency ($) element.","pos":[0,25]}]},{"pos":[5385,5434],"content":"<xref:System.Globalization.NumberStyles.Currency>","nodes":[]},{"pos":[5435,5540],"content":"All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.","nodes":[{"content":"All elements.","pos":[0,13]},{"content":"However, <ph id=\"ph1\">`value`</ph> cannot represent a hexadecimal number or a number in exponential notation.","pos":[14,105],"source":" However, `value` cannot represent a hexadecimal number or a number in exponential notation."}]},{"pos":[5545,5591],"content":"<xref:System.Globalization.NumberStyles.Float>","nodes":[]},{"pos":[5592,5763],"content":"The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol. The `value` parameter can also use exponential notation.","nodes":[{"content":"The <bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept> element at the start or end of <ph id=\"ph1\">`value`</ph>, <bpt id=\"p2\">*</bpt>sign<ept id=\"p2\">*</ept> at the start of <ph id=\"ph2\">`value`</ph>, and the decimal point (.) symbol.","pos":[0,114],"source":"The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol."},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can also use exponential notation.","pos":[115,171],"source":" The `value` parameter can also use exponential notation."}]},{"pos":[5768,5815],"content":"<xref:System.Globalization.NumberStyles.Number>","nodes":[]},{"pos":[5816,5886],"content":"The <ph id=\"ph1\">`ws`</ph>, <ph id=\"ph2\">`sign`</ph>, group separator (,), and decimal point (.) elements.","source":"The `ws`, `sign`, group separator (,), and decimal point (.) elements."},{"pos":[5891,5935],"content":"<xref:System.Globalization.NumberStyles.Any>","nodes":[]},{"pos":[5936,6005],"content":"All elements. However, `value` cannot represent a hexadecimal number.","nodes":[{"content":"All elements.","pos":[0,13]},{"content":"However, <ph id=\"ph1\">`value`</ph> cannot represent a hexadecimal number.","pos":[14,69],"source":" However, `value` cannot represent a hexadecimal number."}]},{"pos":[6014,6776],"content":"[!IMPORTANT]\n If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","leadings":["","> "],"nodes":[{"content":" If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","pos":[13,760],"nodes":[{"content":"If you use the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Parse%2A&gt;</ph> method to round-trip the string representation of a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that was output by the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> method, you should use the <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName&gt;</ph> method with the \"R\" format specifier to generate the string representation of the <ph id=\"ph5\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[1,456],"source":" If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value."},{"content":"Otherwise, the string representation of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Parse%2A&gt;</ph> method to restore the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[457,747],"source":" Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value."}]}]},{"pos":[6783,7571],"content":"Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)","nodes":[{"content":"Unlike the other <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> values, which allow for but do not require the presence of particular style elements in <ph id=\"ph2\">`value`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style value means that the individual numeric characters in <ph id=\"ph4\">`value`</ph> are always interpreted as hexadecimal characters.","pos":[0,342],"source":"Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters."},{"content":"Valid hexadecimal characters are 0-9, A-F, and a-f.","pos":[343,394]},{"content":"The only other flags that can be combined with the <ph id=\"ph1\">`style`</ph> parameter are <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph>.","pos":[395,604],"source":" The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>."},{"content":"(The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration includes a composite number style, <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles.HexNumber&gt;</ph>, that includes both white-space flags.)","pos":[605,788],"source":" (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)"}]},{"pos":[7579,7801],"content":"[!NOTE]\n If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.","leadings":["","> "],"nodes":[{"content":" If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.","pos":[8,220],"nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as <ph id=\"ph2\">`0x`</ph> or <ph id=\"ph3\">`&amp;h`</ph>) that differentiates it as a hexadecimal number.","pos":[1,176],"source":" If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number."},{"content":"This causes the conversion to fail.","pos":[177,212]}]}]},{"pos":[7808,8607],"content":"If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is a hexadecimal string, the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29&gt;</ph> method interprets <ph id=\"ph3\">`value`</ph> as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to <ph id=\"ph4\">`0x80`</ph>.","pos":[0,302],"source":"If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`."},{"content":"In other words, the method interprets the highest-order bit of the first byte in <ph id=\"ph1\">`value`</ph> as the sign bit.","pos":[303,408],"source":" In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit."},{"content":"To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in <ph id=\"ph1\">`value`</ph> must have a value of zero.","pos":[409,548],"source":" To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero."},{"content":"For example, the method interprets <ph id=\"ph1\">`0x80`</ph> as a negative value, but it interprets either <ph id=\"ph2\">`0x080`</ph> or <ph id=\"ph3\">`0x0080`</ph> as a positive value.","pos":[549,677],"source":" For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value."},{"content":"The following example illustrates the difference between hexadecimal strings that represent negative and positive values.","pos":[678,799]}]},{"pos":[8614,8919],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Parse#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Parse#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]"},{"pos":[8926,9245],"content":"The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`. Typically, `provider` can be any one of the following:","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation.","pos":[0,76],"source":"The `provider` parameter is an <xref:System.IFormatProvider> implementation."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific information about the format of <ph id=\"ph3\">`value`</ph>.","pos":[77,264],"source":" Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`."},{"content":"Typically, <ph id=\"ph1\">`provider`</ph> can be any one of the following:","pos":[265,319],"source":" Typically, `provider` can be any one of the following:"}]},{"pos":[9255,9551],"content":"A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.","nodes":[{"content":"A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.","pos":[0,296],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the culture that provides numeric formatting information.","pos":[0,122],"source":"A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.GetFormat%2A&gt;</ph> method returns the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides numeric formatting information.","pos":[123,296],"source":" Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information."}]}]},{"pos":[9561,9755],"content":"A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)","nodes":[{"content":"A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)","pos":[0,194],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides formatting information.","pos":[0,91],"source":"A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information."},{"content":"(Its implementation of <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.GetFormat%2A&gt;</ph> just returns itself.)","pos":[92,194],"source":" (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)"}]}]},{"pos":[9765,10024],"content":"A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.","nodes":[{"content":"A custom object that implements <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph> and uses the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo.GetFormat%2A&gt;</ph> method to instantiate and return the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides formatting information.","pos":[0,259],"source":"A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information."}]},{"pos":[10031,10144],"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture is used.","source":"If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."}],"pos":[347464,357684],"yaml":true,"extradata":"MT"},{"content":"A string that contains a number to convert.","nodes":[{"pos":[0,43],"content":"A string that contains a number to convert.","nodes":[{"content":"A string that contains a number to convert.","pos":[0,43]}]}],"pos":[359096,359140],"yaml":true},{"content":"A bitwise combination of the enumeration values that specify the permitted format of <code>value</code>.","nodes":[{"pos":[0,104],"content":"A bitwise combination of the enumeration values that specify the permitted format of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A bitwise combination of the enumeration values that specify the permitted format of <code>value</code>."}],"pos":[359221,359326],"yaml":true},{"content":"An object that provides culture-specific formatting information about <code>value</code>.","nodes":[{"pos":[0,89],"content":"An object that provides culture-specific formatting information about <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An object that provides culture-specific formatting information about <code>value</code>."}],"pos":[359399,359489],"yaml":true},{"content":"A value that is equivalent to the number specified in the <code>value</code> parameter.","nodes":[{"pos":[0,87],"content":"A value that is equivalent to the number specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A value that is equivalent to the number specified in the <code>value</code> parameter."}],"pos":[359559,359647],"yaml":true},{"content":"<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\"></xref> flag along with another value.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;code&gt;style&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Globalization.NumberStyles\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,310],"content":"<ph id=\"ph1\">&lt;code&gt;style&lt;/code&gt;</ph> includes the <ph id=\"ph2\">&lt;xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Globalization.NumberStyles.HexNumber\"&gt;&lt;/xref&gt;</ph> flag along with another value.","source":"<code>style</code> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\"></xref> flag along with another value."}],"pos":[359801,360124],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[360226,360256],"yaml":true},{"content":"<code>value</code> does not comply with the input pattern specified by <code>style</code>.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not comply with the input pattern specified by <ph id=\"ph2\">&lt;code&gt;style&lt;/code&gt;</ph>.","source":"<code>value</code> does not comply with the input pattern specified by <code>style</code>."}],"pos":[360346,360437],"yaml":true},{"content":"Converts the string representation of a number in a specified culture-specific format to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent.","nodes":[{"pos":[0,152],"content":"Converts the string representation of a number in a specified culture-specific format to its <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> equivalent.","source":"Converts the string representation of a number in a specified culture-specific format to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent."}],"pos":[361979,362132],"yaml":true},{"content":"The `value` parameter should be the string representation of a number in the following form:  \n  \n [*ws*][*sign*]*digits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method.|  \n|*digits*|A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.|  \n  \n> [!NOTE]\n>  The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  \n  \n> [!IMPORTANT]\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information. When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter. There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:  \n  \n-   You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \n  \n-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \n  \n-   You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If `provider` is `null`, the formatting of `value` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.","nodes":[{"pos":[0,92],"content":"The <ph id=\"ph1\">`value`</ph> parameter should be the string representation of a number in the following form:","source":"The `value` parameter should be the string representation of a number in the following form:"},{"pos":[99,127],"content":"[<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>][<bpt id=\"p2\">*</bpt>sign<ept id=\"p2\">*</ept>]<bpt id=\"p3\">*</bpt>digits<ept id=\"p3\">*</ept>[<bpt id=\"p4\">*</bpt>ws<ept id=\"p4\">*</ept>]","source":"[*ws*][*sign*]*digits*[*ws*]"},{"pos":[134,229],"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","pos":[0,95],"nodes":[{"content":"Elements in square brackets ([ and ]) are optional.","pos":[0,51]},{"content":"The following table describes each element.","pos":[52,95]}]}]},{"pos":[236,243],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[244,255],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[296,300],"content":"<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>","source":"*ws*"},{"pos":[301,322],"content":"Optional white space.","nodes":[{"content":"Optional white space.","pos":[0,21]}]},{"pos":[327,333],"content":"<bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept>","source":"*sign*"},{"pos":[334,736],"content":"An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method.","nodes":[{"content":"An optional sign.","pos":[0,17]},{"content":"Valid sign characters are determined by the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName&gt;</ph> properties of the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that is returned by the <ph id=\"ph4\">`provider`</ph> object's <ph id=\"ph5\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method.","pos":[18,402],"source":" Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method."}]},{"pos":[741,749],"content":"<bpt id=\"p1\">*</bpt>digits<ept id=\"p1\">*</ept>","source":"*digits*"},{"pos":[750,822],"content":"A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.","nodes":[{"content":"A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.","pos":[0,72],"nodes":[{"content":"A sequence of digits ranging from 0 to 9.","pos":[0,41]},{"content":"Any leading zeros are ignored.","pos":[42,72]}]}]},{"pos":[831,1084],"content":"[!NOTE]\n The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.","leadings":["","> "],"nodes":[{"content":" The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.","pos":[8,251],"nodes":[{"content":"The string specified by the <ph id=\"ph1\">`value`</ph> parameter is interpreted using the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style.","pos":[1,144],"source":" The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style."},{"content":"It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.","pos":[145,243]}]}]},{"pos":[1092,1854],"content":"[!IMPORTANT]\n If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","leadings":["","> "],"nodes":[{"content":" If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","pos":[13,760],"nodes":[{"content":"If you use the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Parse%2A&gt;</ph> method to round-trip the string representation of a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that was output by the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> method, you should use the <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName&gt;</ph> method with the \"R\" format specifier to generate the string representation of the <ph id=\"ph5\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[1,456],"source":" If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value."},{"content":"Otherwise, the string representation of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Parse%2A&gt;</ph> method to restore the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[457,747],"source":" Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value."}]}]},{"pos":[1861,2729],"content":"The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information. When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter. There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation whose <ph id=\"ph3\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns a <ph id=\"ph4\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific formatting information.","pos":[0,248],"source":"The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method is invoked, it calls the <ph id=\"ph2\">`provider`</ph> parameter's <ph id=\"ph3\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method and passes it a <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph> object that represents the <ph id=\"ph5\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> type.","pos":[249,559],"source":" When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method then returns the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides information about the format of the <ph id=\"ph3\">`value`</ph> parameter.","pos":[560,751],"source":" The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter."},{"content":"There are three ways to use the <ph id=\"ph1\">`provider`</ph> parameter to supply custom formatting information to the parse operation:","pos":[752,868],"source":" There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:"}]},{"pos":[2739,3057],"content":"You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.","nodes":[{"content":"You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.","pos":[0,318],"nodes":[{"content":"You can pass a <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the culture that supplies formatting information.","pos":[0,127],"source":"You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.GetFormat%2A&gt;</ph> method returns the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides numeric formatting information for that culture.","pos":[128,318],"source":" Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture."}]}]},{"pos":[3067,3291],"content":"You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)","nodes":[{"content":"You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)","pos":[0,224],"nodes":[{"content":"You can pass the actual <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides numeric formatting information.","pos":[0,121],"source":"You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information."},{"content":"(Its implementation of <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.GetFormat%2A&gt;</ph> just returns itself.)","pos":[122,224],"source":" (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)"}]}]},{"pos":[3301,3549],"content":"You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.","nodes":[{"content":"You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.","pos":[0,248],"nodes":[{"content":"You can pass a custom object that implements <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph>.","pos":[0,75],"source":"You can pass a custom object that implements <xref:System.IFormatProvider>."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method instantiates and returns the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides formatting information.","pos":[76,248],"source":" Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information."}]}]},{"pos":[3556,3710],"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the formatting of <ph id=\"ph3\">`value`</ph> is interpreted based on the <ph id=\"ph4\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object of the current culture.","source":"If `provider` is `null`, the formatting of `value` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture."}],"pos":[362143,365884],"yaml":true,"extradata":"MT"},{"content":"A string that contains a number to convert.","nodes":[{"pos":[0,43],"content":"A string that contains a number to convert.","nodes":[{"content":"A string that contains a number to convert.","pos":[0,43]}]}],"pos":[368175,368219],"yaml":true},{"content":"An object that provides culture-specific formatting information about <code>value</code>.","nodes":[{"pos":[0,89],"content":"An object that provides culture-specific formatting information about <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An object that provides culture-specific formatting information about <code>value</code>."}],"pos":[368292,368382],"yaml":true},{"content":"A value that is equivalent to the number specified in the <code>value</code> parameter.","nodes":[{"pos":[0,87],"content":"A value that is equivalent to the number specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A value that is equivalent to the number specified in the <code>value</code> parameter."}],"pos":[368452,368540],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[368702,368732],"yaml":true},{"content":"<code>value</code> is not in the correct format.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in the correct format.","source":"<code>value</code> is not in the correct format."}],"pos":[368822,368871],"yaml":true},{"content":"Converts the string representation of a number in a specified style to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent.","nodes":[{"pos":[0,134],"content":"Converts the string representation of a number in a specified style to its <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> equivalent.","source":"Converts the string representation of a number in a specified style to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent."}],"pos":[370437,370572],"yaml":true},{"content":"The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed. `styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.  \n  \n Depending on the value of `style`, the `value` parameter may include the following elements:  \n  \n [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \n  \n If `style` includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the `value` parameter may contain the following elements:  \n  \n [*ws*]*hexdigits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the current culture. The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*|A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.|  \n|*,*|A culture-specific group separator symbol. The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.  \n  \n|`NumberStyles` value|Elements permitted in `value` in addition to digits|  \n|--------------------------|---------------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles.None>|The *digits* element only.|  \n|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|The decimal point (.) and *fractional-digits* elements.|  \n|<xref:System.Globalization.NumberStyles.AllowExponent>|The \"e\" or \"E\" character, which indicates exponential notation, along with *exponential_digits*.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|The *ws* element at the start of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|The *ws* element at the end of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|The *sign* element at the start of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|The *sign* element at the end of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowParentheses>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles.AllowThousands>|The group separator (,) element.|  \n|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|The currency ($) element.|  \n|<xref:System.Globalization.NumberStyles.Currency>|All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Float>|The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol. The `value` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Number>|The `ws`, `sign`, group separator (*,*), and decimal point (*.*) elements.|  \n|<xref:System.Globalization.NumberStyles.Any>|All elements. However, `value` cannot represent a hexadecimal number.|  \n  \n> [!IMPORTANT]\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \n  \n Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)  \n  \n> [!NOTE]\n>  If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \n  \n If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  \n  \n [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  \n  \n The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.","nodes":[{"pos":[0,646],"content":"The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed. `styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.","nodes":[{"content":"The <ph id=\"ph1\">`style`</ph> parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the <ph id=\"ph2\">`value`</ph> parameter for the parse operation to succeed.","pos":[0,243],"source":"The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed."},{"content":"<ph id=\"ph1\">`styles`</ph> must be a combination of bit flags from the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration.","pos":[244,350],"source":"`styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration."},{"content":"The <ph id=\"ph1\">`style`</ph> parameter makes this method overload useful when <ph id=\"ph2\">`value`</ph> contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by <ph id=\"ph3\">`value`</ph> is known only at run time, or when you want to disallow white space or a sign symbol in <ph id=\"ph4\">`value`</ph>.","pos":[351,646],"source":" The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`."}]},{"pos":[653,745],"content":"Depending on the value of <ph id=\"ph1\">`style`</ph>, the <ph id=\"ph2\">`value`</ph> parameter may include the following elements:","source":"Depending on the value of `style`, the `value` parameter may include the following elements:"},{"pos":[752,849],"content":"[<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>][<bpt id=\"p2\">*</bpt><ph id=\"ph1\">$</ph><ept id=\"p2\">*</ept>][<bpt id=\"p3\">*</bpt>sign<ept id=\"p3\">*</ept>][<bpt id=\"p4\">*</bpt>digits<ept id=\"p4\">*</ept>,]<bpt id=\"p5\">*</bpt>digits<ept id=\"p5\">*</ept>[.<bpt id=\"p6\">*</bpt>fractional_digits<ept id=\"p6\">*</ept>][E[<bpt id=\"p7\">*</bpt>sign<ept id=\"p7\">*</ept>]<bpt id=\"p8\">*</bpt>exponential_digits<ept id=\"p8\">*</ept>][<bpt id=\"p9\">*</bpt>ws<ept id=\"p9\">*</ept>]","source":"[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]"},{"pos":[856,1000],"content":"If <ph id=\"ph1\">`style`</ph> includes <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph>, the <ph id=\"ph3\">`value`</ph> parameter may contain the following elements:","source":"If `style` includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the `value` parameter may contain the following elements:"},{"pos":[1007,1030],"content":"[<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>]<bpt id=\"p2\">*</bpt>hexdigits<ept id=\"p2\">*</ept>[<bpt id=\"p3\">*</bpt>ws<ept id=\"p3\">*</ept>]","source":"[*ws*]*hexdigits*[*ws*]"},{"pos":[1037,1132],"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","pos":[0,95],"nodes":[{"content":"Elements in square brackets ([ and ]) are optional.","pos":[0,51]},{"content":"The following table describes each element.","pos":[52,95]}]}]},{"pos":[1139,1146],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1147,1158],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[1199,1203],"content":"<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>","source":"*ws*"},{"pos":[1204,1504],"content":"Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"Optional white space.","pos":[0,21]},{"content":"White space can appear at the start of <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag, and it can appear at the end of <ph id=\"ph4\">`value`</ph> if <ph id=\"ph5\">`style`</ph> includes the <ph id=\"ph6\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[22,300],"source":" White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[1513,1982],"content":"A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the current culture. The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"A culture-specific currency symbol.","pos":[0,35]},{"content":"Its position in the string is defined by the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName&gt;</ph> properties of the current culture.","pos":[36,313],"source":" Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the current culture."},{"content":"The current culture's currency symbol can appear in <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[314,469],"source":" The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[1987,1993],"content":"<bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept>","source":"*sign*"},{"pos":[1994,2447],"content":"An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"An optional sign.","pos":[0,17]},{"content":"The sign can appear at the start of <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag, and it can appear at the end of <ph id=\"ph4\">`value`</ph> if <ph id=\"ph5\">`style`</ph> includes the <ph id=\"ph6\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[18,293],"source":" The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."},{"content":"Parentheses can be used in <ph id=\"ph1\">`value`</ph> to indicate a negative value if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[294,453],"source":" Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[2452,2525],"content":"*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*","nodes":[{"content":"<bpt id=\"p1\">*</bpt>digits<ept id=\"p1\">*</ept>","pos":[0,8],"source":"*digits*"},{"content":"<bpt id=\"p1\">*</bpt>fractional_digits<ept id=\"p1\">*</ept>","pos":[21,40],"source":"*fractional_digits*"},{"content":"<bpt id=\"p1\">*</bpt>exponential_digits<ept id=\"p1\">*</ept>","pos":[53,73],"source":"*exponential_digits*"}]},{"pos":[2526,2616],"content":"A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.","nodes":[{"content":"A sequence of digits from 0 through 9.","pos":[0,38]},{"content":"For <bpt id=\"p1\">*</bpt>fractional_digits<ept id=\"p1\">*</ept>, only the digit 0 is valid.","pos":[39,90],"source":" For *fractional_digits*, only the digit 0 is valid."}]},{"pos":[2621,2624],"content":"<bpt id=\"p1\">*</bpt>,<ept id=\"p1\">*</ept>","source":"*,*"},{"pos":[2625,2823],"content":"A culture-specific group separator symbol. The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"A culture-specific group separator symbol.","pos":[0,42]},{"content":"The current culture's group separator can appear in <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[43,198],"source":" The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[2828,2831],"content":"<bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","source":"*.*"},{"pos":[2832,3211],"content":"A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.","nodes":[{"content":"A culture-specific decimal point symbol.","pos":[0,40]},{"content":"The current culture's decimal point symbol can appear in <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[41,201],"source":" The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."},{"content":"Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if <bpt id=\"p1\">*</bpt>fractional_digits<ept id=\"p1\">*</ept> includes any other digit, a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> is thrown.","pos":[202,379],"source":" Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown."}]},{"pos":[3216,3217],"content":"E","nodes":[{"content":"E","pos":[0,1]}]},{"pos":[3218,3492],"content":"The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation.","pos":[0,109]},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can represent a number in exponential notation if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[110,274],"source":" The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[3497,3508],"content":"<bpt id=\"p1\">*</bpt>hexdigits<ept id=\"p1\">*</ept>","source":"*hexdigits*"},{"pos":[3509,3575],"content":"A sequence of hexadecimal digits from 0 through f, or 0 through F.","nodes":[{"content":"A sequence of hexadecimal digits from 0 through f, or 0 through F.","pos":[0,66]}]},{"pos":[3583,4047],"content":"A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.","nodes":[{"content":"A string with digits only (which corresponds to the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style) always parses successfully.","pos":[0,152],"source":"A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully."},{"content":"Most of the remaining <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members control elements that may be present, but are not required to be present, in the input string.","pos":[153,318],"source":" Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string."},{"content":"The following table indicates how individual <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members affect the elements that may be present in <ph id=\"ph2\">`value`</ph>.","pos":[319,464],"source":" The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`."}]},{"pos":[4054,4074],"content":"<ph id=\"ph1\">`NumberStyles`</ph> value","source":"`NumberStyles` value"},{"pos":[4075,4126],"content":"Elements permitted in <ph id=\"ph1\">`value`</ph> in addition to digits","source":"Elements permitted in `value` in addition to digits"},{"pos":[4220,4265],"content":"<xref:System.Globalization.NumberStyles.None>","nodes":[]},{"pos":[4266,4292],"content":"The <bpt id=\"p1\">*</bpt>digits<ept id=\"p1\">*</ept> element only.","source":"The *digits* element only."},{"pos":[4297,4355],"content":"<xref:System.Globalization.NumberStyles.AllowDecimalPoint>","nodes":[]},{"pos":[4356,4411],"content":"The decimal point (.) and <bpt id=\"p1\">*</bpt>fractional-digits<ept id=\"p1\">*</ept> elements.","source":"The decimal point (.) and *fractional-digits* elements."},{"pos":[4416,4470],"content":"<xref:System.Globalization.NumberStyles.AllowExponent>","nodes":[]},{"pos":[4471,4567],"content":"The \"e\" or \"E\" character, which indicates exponential notation, along with <bpt id=\"p1\">*</bpt>exponential_digits<ept id=\"p1\">*</ept>.","source":"The \"e\" or \"E\" character, which indicates exponential notation, along with *exponential_digits*."},{"pos":[4572,4630],"content":"<xref:System.Globalization.NumberStyles.AllowLeadingWhite>","nodes":[]},{"pos":[4631,4672],"content":"The <bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept> element at the start of <ph id=\"ph1\">`value`</ph>.","source":"The *ws* element at the start of `value`."},{"pos":[4677,4736],"content":"<xref:System.Globalization.NumberStyles.AllowTrailingWhite>","nodes":[]},{"pos":[4737,4776],"content":"The <bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept> element at the end of <ph id=\"ph1\">`value`</ph>.","source":"The *ws* element at the end of `value`."},{"pos":[4781,4838],"content":"<xref:System.Globalization.NumberStyles.AllowLeadingSign>","nodes":[]},{"pos":[4839,4882],"content":"The <bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept> element at the start of <ph id=\"ph1\">`value`</ph>.","source":"The *sign* element at the start of `value`."},{"pos":[4887,4945],"content":"<xref:System.Globalization.NumberStyles.AllowTrailingSign>","nodes":[]},{"pos":[4946,4987],"content":"The <bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept> element at the end of <ph id=\"ph1\">`value`</ph>.","source":"The *sign* element at the end of `value`."},{"pos":[4992,5049],"content":"<xref:System.Globalization.NumberStyles.AllowParentheses>","nodes":[]},{"pos":[5050,5124],"content":"The <bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept> element in the form of parentheses enclosing the numeric value.","source":"The *sign* element in the form of parentheses enclosing the numeric value."},{"pos":[5129,5184],"content":"<xref:System.Globalization.NumberStyles.AllowThousands>","nodes":[]},{"pos":[5185,5217],"content":"The group separator (,) element.","nodes":[{"content":"The group separator (,) element.","pos":[0,32]}]},{"pos":[5222,5282],"content":"<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>","nodes":[]},{"pos":[5283,5308],"content":"The currency ($) element.","nodes":[{"content":"The currency ($) element.","pos":[0,25]}]},{"pos":[5313,5362],"content":"<xref:System.Globalization.NumberStyles.Currency>","nodes":[]},{"pos":[5363,5468],"content":"All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.","nodes":[{"content":"All elements.","pos":[0,13]},{"content":"However, <ph id=\"ph1\">`value`</ph> cannot represent a hexadecimal number or a number in exponential notation.","pos":[14,105],"source":" However, `value` cannot represent a hexadecimal number or a number in exponential notation."}]},{"pos":[5473,5519],"content":"<xref:System.Globalization.NumberStyles.Float>","nodes":[]},{"pos":[5520,5693],"content":"The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol. The `value` parameter can also use exponential notation.","nodes":[{"content":"The <bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept> element at the start or end of <ph id=\"ph1\">`value`</ph>, <bpt id=\"p2\">*</bpt>sign<ept id=\"p2\">*</ept> at the start of <ph id=\"ph2\">`value`</ph>, and the decimal point (<bpt id=\"p3\">*</bpt>.<ept id=\"p3\">*</ept>) symbol.","pos":[0,116],"source":"The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol."},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can also use exponential notation.","pos":[117,173],"source":" The `value` parameter can also use exponential notation."}]},{"pos":[5698,5745],"content":"<xref:System.Globalization.NumberStyles.Number>","nodes":[]},{"pos":[5746,5820],"content":"The <ph id=\"ph1\">`ws`</ph>, <ph id=\"ph2\">`sign`</ph>, group separator (<bpt id=\"p1\">*</bpt>,<ept id=\"p1\">*</ept>), and decimal point (<bpt id=\"p2\">*</bpt>.<ept id=\"p2\">*</ept>) elements.","source":"The `ws`, `sign`, group separator (*,*), and decimal point (*.*) elements."},{"pos":[5825,5869],"content":"<xref:System.Globalization.NumberStyles.Any>","nodes":[]},{"pos":[5870,5939],"content":"All elements. However, `value` cannot represent a hexadecimal number.","nodes":[{"content":"All elements.","pos":[0,13]},{"content":"However, <ph id=\"ph1\">`value`</ph> cannot represent a hexadecimal number.","pos":[14,69],"source":" However, `value` cannot represent a hexadecimal number."}]},{"pos":[5948,6710],"content":"[!IMPORTANT]\n If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","leadings":["","> "],"nodes":[{"content":" If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","pos":[13,760],"nodes":[{"content":"If you use the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Parse%2A&gt;</ph> method to round-trip the string representation of a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that was output by the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> method, you should use the <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName&gt;</ph> method with the \"R\" format specifier to generate the string representation of the <ph id=\"ph5\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[1,456],"source":" If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value."},{"content":"Otherwise, the string representation of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Parse%2A&gt;</ph> method to restore the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[457,747],"source":" Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value."}]}]},{"pos":[6717,7507],"content":"Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)","nodes":[{"content":"Unlike the other <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> values, which allow for, but do not require, the presence of particular style elements in <ph id=\"ph2\">`value`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style value means that the individual numeric characters in <ph id=\"ph4\">`value`</ph> are always interpreted as hexadecimal characters.","pos":[0,344],"source":"Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters."},{"content":"Valid hexadecimal characters are 0-9, A-F, and a-f.","pos":[345,396]},{"content":"The only other flags that can be combined with the <ph id=\"ph1\">`style`</ph> parameter are <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph>.","pos":[397,606],"source":" The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>."},{"content":"(The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration includes a composite number style, <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles.HexNumber&gt;</ph>, that includes both white-space flags.)","pos":[607,790],"source":" (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)"}]},{"pos":[7515,7737],"content":"[!NOTE]\n If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.","leadings":["","> "],"nodes":[{"content":" If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.","pos":[8,220],"nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as <ph id=\"ph2\">`0x`</ph> or <ph id=\"ph3\">`&amp;h`</ph>) that differentiates it as a hexadecimal number.","pos":[1,176],"source":" If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number."},{"content":"This causes the conversion to fail.","pos":[177,212]}]}]},{"pos":[7744,8543],"content":"If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is a hexadecimal string, the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29&gt;</ph> method interprets <ph id=\"ph3\">`value`</ph> as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to <ph id=\"ph4\">`0x80`</ph>.","pos":[0,302],"source":"If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`."},{"content":"In other words, the method interprets the highest-order bit of the first byte in <ph id=\"ph1\">`value`</ph> as the sign bit.","pos":[303,408],"source":" In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit."},{"content":"To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in <ph id=\"ph1\">`value`</ph> must have a value of zero.","pos":[409,548],"source":" To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero."},{"content":"For example, the method interprets <ph id=\"ph1\">`0x80`</ph> as a negative value, but it interprets either <ph id=\"ph2\">`0x080`</ph> or <ph id=\"ph3\">`0x0080`</ph> as a positive value.","pos":[549,677],"source":" For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value."},{"content":"The following example illustrates the difference between hexadecimal strings that represent negative and positive values.","pos":[678,799]}]},{"pos":[8550,8855],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.Parse#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.Parse#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]"},{"pos":[8862,9262],"content":"The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.","nodes":[{"content":"The <ph id=\"ph1\">`value`</ph> parameter is parsed by using the formatting information in a <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that is initialized for the current system culture.","pos":[0,176],"source":"The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture."},{"content":"To specify the culture whose formatting information is used for the parse operation, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29&gt;</ph> overload.","pos":[177,400],"source":" To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload."}]}],"pos":[370583,379913],"yaml":true,"extradata":"MT"},{"content":"A string that contains a number to convert.","nodes":[{"pos":[0,43],"content":"A string that contains a number to convert.","nodes":[{"content":"A string that contains a number to convert.","pos":[0,43]}]}],"pos":[380804,380848],"yaml":true},{"content":"A bitwise combination of the enumeration values that specify the permitted format of <code>value</code>.","nodes":[{"pos":[0,104],"content":"A bitwise combination of the enumeration values that specify the permitted format of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A bitwise combination of the enumeration values that specify the permitted format of <code>value</code>."}],"pos":[380929,381034],"yaml":true},{"content":"A value that is equivalent to the number specified in the <code>value</code> parameter.","nodes":[{"pos":[0,87],"content":"A value that is equivalent to the number specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A value that is equivalent to the number specified in the <code>value</code> parameter."}],"pos":[381104,381192],"yaml":true},{"content":"<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\"></xref> flag along with another value.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;code&gt;style&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Globalization.NumberStyles\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,310],"content":"<ph id=\"ph1\">&lt;code&gt;style&lt;/code&gt;</ph> includes the <ph id=\"ph2\">&lt;xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Globalization.NumberStyles.HexNumber\"&gt;&lt;/xref&gt;</ph> flag along with another value.","source":"<code>style</code> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\"></xref> flag along with another value."}],"pos":[381346,381669],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[381771,381801],"yaml":true},{"content":"<code>value</code> does not comply with the input pattern specified by <xref href=\"System.Globalization.NumberStyles\"></xref>.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> does not comply with the input pattern specified by <ph id=\"ph2\">&lt;xref href=\"System.Globalization.NumberStyles\"&gt;&lt;/xref&gt;</ph>.","source":"<code>value</code> does not comply with the input pattern specified by <xref href=\"System.Globalization.NumberStyles\"></xref>."}],"pos":[381891,382018],"yaml":true},{"content":"Converts the string representation of a number to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent.","nodes":[{"pos":[0,113],"content":"Converts the string representation of a number to its <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> equivalent.","source":"Converts the string representation of a number to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent."}],"pos":[383456,383570],"yaml":true},{"content":"The `value` parameter should be the string representation of a number in the following form.  \n  \n [*ws*][*sign*]*digits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.|  \n|*digits*|A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.|  \n  \n> [!NOTE]\n>  The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  \n  \n The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=fullName> object that is initialized for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>. To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method.  \n  \n> [!IMPORTANT]\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","nodes":[{"pos":[0,92],"content":"The <ph id=\"ph1\">`value`</ph> parameter should be the string representation of a number in the following form.","source":"The `value` parameter should be the string representation of a number in the following form."},{"pos":[99,127],"content":"[<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>][<bpt id=\"p2\">*</bpt>sign<ept id=\"p2\">*</ept>]<bpt id=\"p3\">*</bpt>digits<ept id=\"p3\">*</ept>[<bpt id=\"p4\">*</bpt>ws<ept id=\"p4\">*</ept>]","source":"[*ws*][*sign*]*digits*[*ws*]"},{"pos":[134,229],"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","pos":[0,95],"nodes":[{"content":"Elements in square brackets ([ and ]) are optional.","pos":[0,51]},{"content":"The following table describes each element.","pos":[52,95]}]}]},{"pos":[236,243],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[244,255],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[296,300],"content":"<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>","source":"*ws*"},{"pos":[301,322],"content":"Optional white space.","nodes":[{"content":"Optional white space.","pos":[0,21]}]},{"pos":[327,333],"content":"<bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept>","source":"*sign*"},{"pos":[334,606],"content":"An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.","nodes":[{"content":"An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.","pos":[0,272],"nodes":[{"content":"An optional sign.","pos":[0,17]},{"content":"Valid sign characters are determined by the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName&gt;</ph> properties of the current culture.","pos":[18,272],"source":" Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture."}]}]},{"pos":[611,619],"content":"<bpt id=\"p1\">*</bpt>digits<ept id=\"p1\">*</ept>","source":"*digits*"},{"pos":[620,692],"content":"A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.","nodes":[{"content":"A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.","pos":[0,72],"nodes":[{"content":"A sequence of digits ranging from 0 to 9.","pos":[0,41]},{"content":"Any leading zeros are ignored.","pos":[42,72]}]}]},{"pos":[701,957],"content":"[!NOTE]\n The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.","leadings":["","> "],"nodes":[{"content":" The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.","pos":[8,254],"nodes":[{"content":"The string specified by the <ph id=\"ph1\">`value`</ph> parameter is interpreted by using the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style.","pos":[1,147],"source":" The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style."},{"content":"It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.","pos":[148,246]}]}]},{"pos":[964,1454],"content":"The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=fullName> object that is initialized for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>. To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method.","nodes":[{"content":"The <ph id=\"ph1\">`value`</ph> parameter is parsed by using the formatting information in a <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo?displayProperty=fullName&gt;</ph> object that is initialized for the current system culture.","pos":[0,201],"source":"The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=fullName> object that is initialized for the current system culture."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName&gt;</ph>.","pos":[202,313],"source":" For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>."},{"content":"To parse a string by using the formatting information of a specific culture, use the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method.","pos":[314,490],"source":" To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method."}]},{"pos":[1462,2224],"content":"[!IMPORTANT]\n If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","leadings":["","> "],"nodes":[{"content":" If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","pos":[13,760],"nodes":[{"content":"If you use the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Parse%2A&gt;</ph> method to round-trip the string representation of a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that was output by the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> method, you should use the <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName&gt;</ph> method with the \"R\" format specifier to generate the string representation of the <ph id=\"ph5\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[1,456],"source":" If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value."},{"content":"Otherwise, the string representation of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Parse%2A&gt;</ph> method to restore the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[457,747],"source":" Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value."}]}]}],"pos":[383581,385828],"yaml":true,"extradata":"MT"},{"content":"A string that contains the number to convert.","nodes":[{"pos":[0,45],"content":"A string that contains the number to convert.","nodes":[{"content":"A string that contains the number to convert.","pos":[0,45]}]}],"pos":[386645,386691],"yaml":true},{"content":"A value that is equivalent to the number specified in the <code>value</code> parameter.","nodes":[{"pos":[0,87],"content":"A value that is equivalent to the number specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"A value that is equivalent to the number specified in the <code>value</code> parameter."}],"pos":[386761,386849],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[387011,387041],"yaml":true},{"content":"<code>value</code> is not in the correct format.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is not in the correct format.","source":"<code>value</code> is not in the correct format."}],"pos":[387131,387180],"yaml":true},{"content":"Raises a <xref href=\"System.Numerics.BigInteger\"></xref> value to the power of a specified value.","nodes":[{"pos":[0,97],"content":"Raises a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value to the power of a specified value.","source":"Raises a <xref href=\"System.Numerics.BigInteger\"></xref> value to the power of a specified value."}],"pos":[388717,388815],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0. If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`. If `value` is negative, the method returns a negative result.  \n  \n This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=fullName> method for primitive numeric types.","nodes":[{"pos":[0,327],"content":"The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0. If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`. If `value` is negative, the method returns a negative result.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Pow%2A&gt;</ph> method returns 1 if the value of the exponent parameter is 0, or if the values of both the <ph id=\"ph2\">`value`</ph> and <ph id=\"ph3\">`exponent`</ph> parameters are 0.","pos":[0,176],"source":"The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0."},{"content":"If <ph id=\"ph1\">`exponent`</ph> is 1, the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Pow%2A&gt;</ph> method returns <ph id=\"ph3\">`value`</ph>.","pos":[177,265],"source":" If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`."},{"content":"If <ph id=\"ph1\">`value`</ph> is negative, the method returns a negative result.","pos":[266,327],"source":" If `value` is negative, the method returns a negative result."}]},{"pos":[334,451],"content":"This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=fullName> method for primitive numeric types.","nodes":[{"content":"This method corresponds to the <ph id=\"ph1\">&lt;xref:System.Math.Pow%2A?displayProperty=fullName&gt;</ph> method for primitive numeric types.","pos":[0,117],"source":"This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=fullName> method for primitive numeric types."}]}],"pos":[388826,389282],"yaml":true,"extradata":"MT"},{"content":"The number to raise to the <code>exponent</code> power.","nodes":[{"pos":[0,55],"content":"The number to raise to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">exponent</ph><ept id=\"p1\">&lt;/code&gt;</ept> power.","source":"The number to raise to the <code>exponent</code> power."}],"pos":[389988,390044],"yaml":true},{"content":"The exponent to raise <code>value</code> by.","nodes":[{"pos":[0,44],"content":"The exponent to raise <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> by.","source":"The exponent to raise <code>value</code> by."}],"pos":[390107,390152],"yaml":true},{"content":"The result of raising <code>value</code> to the <code>exponent</code> power.","nodes":[{"pos":[0,76],"content":"The result of raising <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> to the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">exponent</ph><ept id=\"p2\">&lt;/code&gt;</ept> power.","source":"The result of raising <code>value</code> to the <code>exponent</code> power."}],"pos":[390222,390299],"yaml":true},{"content":"The value of the <code>exponent</code> parameter is negative.","nodes":[{"pos":[0,61],"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">exponent</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is negative.","source":"The value of the <code>exponent</code> parameter is negative."}],"pos":[390471,390533],"yaml":true},{"content":"Performs integer division on two <xref href=\"System.Numerics.BigInteger\"></xref> values and returns the remainder.","nodes":[{"pos":[0,114],"content":"Performs integer division on two <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> values and returns the remainder.","source":"Performs integer division on two <xref href=\"System.Numerics.BigInteger\"></xref> values and returns the remainder."}],"pos":[392147,392262],"yaml":true},{"content":"The sign of the remainder is the sign of the `dividend` parameter.  \n  \n The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to division using the modulus operator.  \n  \n If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation.","nodes":[{"pos":[0,66],"content":"The sign of the remainder is the sign of the <ph id=\"ph1\">`dividend`</ph> parameter.","source":"The sign of the remainder is the sign of the `dividend` parameter."},{"pos":[73,263],"content":"The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to division using the modulus operator.","nodes":[{"content":"The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to division using the modulus operator.","pos":[0,190],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Remainder%2A&gt;</ph> method is implemented for languages that do not support custom operators.","pos":[0,124],"source":"The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators."},{"content":"Its behavior is identical to division using the modulus operator.","pos":[125,190]}]}]},{"pos":[270,448],"content":"If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation.","nodes":[{"content":"If necessary, the method automatically performs implicit conversion of other integral types to <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> objects before it performs the modulus operation.","pos":[0,178],"source":"If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation."}]}],"pos":[392273,392728],"yaml":true,"extradata":"MT"},{"content":"The value to be divided.","nodes":[{"pos":[0,24],"content":"The value to be divided.","nodes":[{"content":"The value to be divided.","pos":[0,24]}]}],"pos":[393580,393605],"yaml":true},{"content":"The value to divide by.","nodes":[{"pos":[0,23],"content":"The value to divide by.","nodes":[{"content":"The value to divide by.","pos":[0,23]}]}],"pos":[393681,393705],"yaml":true},{"content":"The remainder after dividing <code>dividend</code> by <code>divisor</code>.","nodes":[{"pos":[0,75],"content":"The remainder after dividing <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">dividend</ph><ept id=\"p1\">&lt;/code&gt;</ept> by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">divisor</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The remainder after dividing <code>dividend</code> by <code>divisor</code>."}],"pos":[393775,393851],"yaml":true},{"content":"<code>divisor</code> is 0 (zero).","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;divisor&lt;/code&gt;</ph> is 0 (zero).","source":"<code>divisor</code> is 0 (zero)."}],"pos":[394017,394051],"yaml":true},{"content":"Gets a number that indicates the sign (negative, positive, or zero) of the current <xref href=\"System.Numerics.BigInteger\"></xref> object.","nodes":[{"pos":[0,138],"content":"Gets a number that indicates the sign (negative, positive, or zero) of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets a number that indicates the sign (negative, positive, or zero) of the current <xref href=\"System.Numerics.BigInteger\"></xref> object."}],"pos":[395416,395555],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=fullName> method for the primitive numeric types.","nodes":[{"pos":[0,167],"content":"The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=fullName> method for the primitive numeric types.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Sign%2A&gt;</ph> property is equivalent to the <ph id=\"ph2\">&lt;xref:System.Math.Sign%2A?displayProperty=fullName&gt;</ph> method for the primitive numeric types.","pos":[0,167],"source":"The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=fullName> method for the primitive numeric types."}]}],"pos":[395566,395734],"yaml":true,"extradata":"MT"},{"content":"A number that indicates the sign of the <xref href=\"System.Numerics.BigInteger\"></xref> object, as shown in the following table.  \n  \n <table><thead><tr><th> Number  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td> The value of this object is negative.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td> The value of this object is 0 (zero).  \n  \n </td></tr><tr><td> 1  \n  \n </td><td> The value of this object is positive.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,128],"content":"A number that indicates the sign of the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object, as shown in the following table.","source":"A number that indicates the sign of the <xref href=\"System.Numerics.BigInteger\"></xref> object, as shown in the following table."},{"pos":[135,485],"content":"<table><thead><tr><th> Number  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td> The value of this object is negative.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td> The value of this object is 0 (zero).  \n  \n </td></tr><tr><td> 1  \n  \n </td><td> The value of this object is positive.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Number","pos":[23,34],"source":" Number  \n  \n "},{"content":"Description","pos":[46,62],"source":" Description  \n  \n "},{"content":"-1","pos":[98,105],"source":" -1  \n  \n "},{"content":" The value of this object is negative.  \n  \n ","pos":[116,161],"nodes":[{"content":"The value of this object is negative.","pos":[1,38]}]},{"content":"0","pos":[180,186],"source":" 0  \n  \n "},{"content":" The value of this object is 0 (zero).  \n  \n ","pos":[197,242],"nodes":[{"content":"The value of this object is 0 (zero).","pos":[1,38]}]},{"content":"1","pos":[261,267],"source":" 1  \n  \n "},{"content":" The value of this object is positive.  \n  \n ","pos":[278,323],"nodes":[{"content":"The value of this object is positive.","pos":[1,38]}]}]}],"pos":[395838,396345],"yaml":true},{"content":"Subtracts one <xref href=\"System.Numerics.BigInteger\"></xref> value from another and returns the result.","nodes":[{"pos":[0,104],"content":"Subtracts one <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value from another and returns the result.","source":"Subtracts one <xref href=\"System.Numerics.BigInteger\"></xref> value from another and returns the result."}],"pos":[398015,398120],"yaml":true},{"content":"Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values.  \n  \n The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example.  \n  \n [!code-csharp[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]","nodes":[{"pos":[0,182],"content":"Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values.","nodes":[{"content":"Languages that do not support custom operators can use the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Subtract%2A&gt;</ph> method to perform subtraction using <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> values.","pos":[0,182],"source":"Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values."}]},{"pos":[189,458],"content":"The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.Subtract%2A&gt;</ph> method is a useful substitute for the subtraction operator when instantiating a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> variable by assigning it the difference that results from subtraction, as shown in the following example.","pos":[0,269],"source":"The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example."}]},{"pos":[465,814],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.OperationMethods#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.OperationMethods#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]"}],"pos":[398131,398953],"yaml":true,"extradata":"MT"},{"content":"The value to subtract from (the minuend).","nodes":[{"pos":[0,41],"content":"The value to subtract from (the minuend).","nodes":[{"content":"The value to subtract from (the minuend).","pos":[0,41]}]}],"pos":[399184,399226],"yaml":true},{"content":"The value to subtract (the subtrahend).","nodes":[{"pos":[0,39],"content":"The value to subtract (the subtrahend).","nodes":[{"content":"The value to subtract (the subtrahend).","pos":[0,39]}]}],"pos":[399300,399340],"yaml":true},{"content":"The result of subtracting <code>right</code> from <code>left</code>.","nodes":[{"pos":[0,68],"content":"The result of subtracting <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">right</ph><ept id=\"p1\">&lt;/code&gt;</ept> from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The result of subtracting <code>right</code> from <code>left</code>."}],"pos":[399410,399479],"yaml":true},{"content":"Converts a <xref href=\"System.Numerics.BigInteger\"></xref> value to a byte array.","nodes":[{"pos":[0,81],"content":"Converts a <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value to a byte array.","source":"Converts a <xref href=\"System.Numerics.BigInteger\"></xref> value to a byte array."}],"pos":[400940,401022],"yaml":true},{"content":"The individual bytes in the array returned by this method appear in little-endian order. That is, the lower-order bytes of the value precede the higher-order bytes. The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on. For example, the value 1024, or 0x0400, is stored as the following array of two bytes:  \n  \n|Element|Byte value|  \n|-------------|----------------|  \n|0|0x00|  \n|1|0x04|  \n  \n Negative values are written to the array using two's complement representation in the most compact form possible. For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`.  \n  \n Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=fullName>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set. For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`. However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`.  \n  \n You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.  \n  \n> [!CAUTION]\n>  If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit. For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.","nodes":[{"pos":[0,414],"content":"The individual bytes in the array returned by this method appear in little-endian order. That is, the lower-order bytes of the value precede the higher-order bytes. The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on. For example, the value 1024, or 0x0400, is stored as the following array of two bytes:","nodes":[{"content":"The individual bytes in the array returned by this method appear in little-endian order. That is, the lower-order bytes of the value precede the higher-order bytes. The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on. For example, the value 1024, or 0x0400, is stored as the following array of two bytes:","pos":[0,414],"nodes":[{"content":"The individual bytes in the array returned by this method appear in little-endian order.","pos":[0,88]},{"content":"That is, the lower-order bytes of the value precede the higher-order bytes.","pos":[89,164]},{"content":"The first byte of the array reflects the first eight bits of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value, the second byte reflects the next eight bits, and so on.","pos":[165,327],"source":" The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on."},{"content":"For example, the value 1024, or 0x0400, is stored as the following array of two bytes:","pos":[328,414]}]}]},{"pos":[421,428],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[429,439],"content":"Byte value","nodes":[{"content":"Byte value","pos":[0,10]}]},{"pos":[479,480],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[481,485],"content":"0x00","nodes":[{"content":"0x00","pos":[0,4]}]},{"pos":[490,491],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[492,496],"content":"0x04","nodes":[{"content":"0x04","pos":[0,4]}]},{"pos":[504,792],"content":"Negative values are written to the array using two's complement representation in the most compact form possible. For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`.","nodes":[{"content":"Negative values are written to the array using two's complement representation in the most compact form possible.","pos":[0,113]},{"content":"For example, -1 is represented as a single byte whose value is <ph id=\"ph1\">`0xFF`</ph> instead of as an array with multiple elements, such as <ph id=\"ph2\">`0xFF`</ph>, <ph id=\"ph3\">`0xFF`</ph> or <ph id=\"ph4\">`0xFF`</ph>, <ph id=\"ph5\">`0xFF`</ph>, <ph id=\"ph6\">`0xFF`</ph>, <ph id=\"ph7\">`0xFF`</ph>.","pos":[114,288],"source":" For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`."}]},{"pos":[799,1342],"content":"Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=fullName>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set. For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`. However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`.","nodes":[{"content":"Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <ph id=\"ph1\">&lt;xref:System.Array.Length%2A?displayProperty=fullName&gt;</ph><ph id=\"ph2\">`- 1`</ph>) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set.","pos":[0,382],"source":"Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=fullName>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set."},{"content":"For example, the value 120 or <ph id=\"ph1\">`0x78`</ph> is represented as a single-byte array: <ph id=\"ph2\">`0x78`</ph>.","pos":[383,466],"source":" For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`."},{"content":"However, 128, or <ph id=\"ph1\">`0x80`</ph>, is represented as a two-byte array: <ph id=\"ph2\">`0x80`</ph>, <ph id=\"ph3\">`0x00`</ph>.","pos":[467,543],"source":" However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`."}]},{"pos":[1349,1549],"content":"You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.","nodes":[{"content":"You can round-trip a <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value by storing it to a byte array and then restoring it using the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29&gt;</ph> constructor.","pos":[0,200],"source":"You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor."}]},{"pos":[1557,1971],"content":"[!CAUTION]\n If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit. For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.","leadings":["","> "],"nodes":[{"content":" If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit. For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.","pos":[11,412],"nodes":[{"content":"If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit.","pos":[1,191]},{"content":"For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.","pos":[192,401]}]}]}],"pos":[401033,403021],"yaml":true,"extradata":"MT"},{"content":"The value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object converted to an array of bytes.","nodes":[{"pos":[0,111],"content":"The value of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object converted to an array of bytes.","source":"The value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object converted to an array of bytes."}],"pos":[403628,403740],"yaml":true},{"content":"Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation.","nodes":[{"pos":[0,137],"content":"Converts the numeric value of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object to its equivalent string representation.","source":"Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation."}],"pos":[405202,405340],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the \"R\", or round-trip, format of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Round-trip (\"R\") format|A specific culture|<xref:System.Numerics.BigInteger.ToString%2A>|  \n|A specific format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  \n|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros. The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.","nodes":[{"pos":[0,312],"content":"The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the \"R\", or round-trip, format of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the \"R\", or round-trip, format of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:","pos":[0,312],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString&gt;</ph> method formats a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value in the \"R\", or round-trip, format of the current culture.","pos":[0,161],"source":"The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the \"R\", or round-trip, format of the current culture."},{"content":"If you want to specify a different format or culture, use the other overloads of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> method, as follows:","pos":[162,312],"source":" If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:"}]}]},{"pos":[319,332],"content":"To use format","nodes":[{"content":"To use format","pos":[0,13]}]},{"pos":[333,344],"content":"For culture","nodes":[{"content":"For culture","pos":[0,11]}]},{"pos":[345,361],"content":"Use the overload","nodes":[{"content":"Use the overload","pos":[0,16]}]},{"pos":[431,454],"content":"Round-trip (\"R\") format","nodes":[{"content":"Round-trip (\"R\") format","pos":[0,23]}]},{"pos":[455,473],"content":"A specific culture","nodes":[{"content":"A specific culture","pos":[0,18]}]},{"pos":[474,519],"content":"<xref:System.Numerics.BigInteger.ToString%2A>","nodes":[]},{"pos":[524,541],"content":"A specific format","nodes":[{"content":"A specific format","pos":[0,17]}]},{"pos":[542,567],"content":"Default (current) culture","nodes":[{"content":"Default (current) culture","pos":[0,25]}]},{"pos":[568,629],"content":"<xref:System.Numerics.BigInteger.ToString%28System.String%29>","nodes":[]},{"pos":[634,651],"content":"A specific format","nodes":[{"content":"A specific format","pos":[0,17]}]},{"pos":[652,670],"content":"A specific culture","nodes":[{"content":"A specific culture","pos":[0,18]}]},{"pos":[671,757],"content":"<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>","nodes":[]},{"pos":[765,1069],"content":"The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros. The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.","nodes":[{"content":"The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros. The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.","pos":[0,304],"nodes":[{"content":"The string representation of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros.","pos":[0,191],"source":"The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros."},{"content":"The negative sign is defined by the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture.","pos":[192,304],"source":" The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture."}]}]}],"pos":[405351,406435],"yaml":true,"extradata":"MT"},{"content":"The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value.","nodes":[{"pos":[0,95],"content":"The string representation of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value.","source":"The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value."}],"pos":[407289,407385],"yaml":true},{"content":"Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation by using the specified culture-specific formatting information.","nodes":[{"pos":[0,200],"content":"Converts the numeric value of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object to its equivalent string representation by using the specified culture-specific formatting information.","source":"Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation by using the specified culture-specific formatting information."}],"pos":[408945,409146],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the \"R\", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Round-trip (\"R\") format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString>|  \n|A specific format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  \n|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture. The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>, which defines the character that represents the negative sign.  \n  \n The `provider` parameter can be one of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.  \n  \n-   The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.  \n  \n-   A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.","nodes":[{"pos":[0,417],"content":"The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the \"R\", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the \"R\", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:","pos":[0,417],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29&gt;</ph> method formats a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value in the \"R\", or round-trip, format by using the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object of a specified culture.","pos":[0,254],"source":"The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the \"R\", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture."},{"content":"If you want to specify a different format or the current culture, use the other overloads of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> method, as follows:","pos":[255,417],"source":" If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:"}]}]},{"pos":[424,437],"content":"To use format","nodes":[{"content":"To use format","pos":[0,13]}]},{"pos":[438,449],"content":"For culture","nodes":[{"content":"For culture","pos":[0,11]}]},{"pos":[450,466],"content":"Use the overload","nodes":[{"content":"Use the overload","pos":[0,16]}]},{"pos":[536,559],"content":"Round-trip (\"R\") format","nodes":[{"content":"Round-trip (\"R\") format","pos":[0,23]}]},{"pos":[560,585],"content":"Default (current) culture","nodes":[{"content":"Default (current) culture","pos":[0,25]}]},{"pos":[586,628],"content":"<xref:System.Numerics.BigInteger.ToString>","nodes":[]},{"pos":[633,650],"content":"A specific format","nodes":[{"content":"A specific format","pos":[0,17]}]},{"pos":[651,676],"content":"Default (current) culture","nodes":[{"content":"Default (current) culture","pos":[0,25]}]},{"pos":[677,738],"content":"<xref:System.Numerics.BigInteger.ToString%28System.String%29>","nodes":[]},{"pos":[743,760],"content":"A specific format","nodes":[{"content":"A specific format","pos":[0,17]}]},{"pos":[761,779],"content":"A specific culture","nodes":[{"content":"A specific culture","pos":[0,18]}]},{"pos":[780,866],"content":"<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>","nodes":[]},{"pos":[874,1685],"content":"The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture. The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>, which defines the character that represents the negative sign.","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation.","pos":[0,76],"source":"The `provider` parameter is an <xref:System.IFormatProvider> implementation."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific information about the format of the string returned by this method.","pos":[77,291],"source":" Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method."},{"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value is formatted using the <ph id=\"ph4\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object of the current culture.","pos":[292,459],"source":" If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture."},{"content":"The only property of the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that controls the string representation of the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value using the general format specifier is <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName&gt;</ph>, which defines the character that represents the negative sign.","pos":[460,811],"source":" The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>, which defines the character that represents the negative sign."}]},{"pos":[1692,1745],"content":"The <ph id=\"ph1\">`provider`</ph> parameter can be one of the following:","source":"The `provider` parameter can be one of the following:"},{"pos":[1755,1869],"content":"A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the culture that supplies formatting information.","pos":[0,114],"source":"A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information."}]},{"pos":[1879,1972],"content":"The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that supplies formatting information.","pos":[0,93],"source":"The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information."}]},{"pos":[1982,2200],"content":"A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.","nodes":[{"content":"A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.","pos":[0,218],"nodes":[{"content":"A custom object that implements <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph>.","pos":[0,62],"source":"A custom object that implements <xref:System.IFormatProvider>."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that supplies formatting information.","pos":[63,218],"source":" Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information."}]}]}],"pos":[409157,411380],"yaml":true,"extradata":"MT"},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[412294,412359],"yaml":true},{"content":"The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value in the format specified by the <code>provider</code> parameter.","nodes":[{"pos":[0,158],"content":"The string representation of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value in the format specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">provider</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value in the format specified by the <code>provider</code> parameter."}],"pos":[412416,412575],"yaml":true},{"content":"Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation by using the specified format.","nodes":[{"pos":[0,167],"content":"Converts the numeric value of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object to its equivalent string representation by using the specified format.","source":"Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation by using the specified format."}],"pos":[414081,414249],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture. If you want to use the \"R\", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Round-trip (\"R\") format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString>|  \n|Round-trip (\"R\") format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  \n|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md). If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier (\"R\"). If `format` is any other value, the method throws a <xref:System.FormatException>.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture. Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload.","nodes":[{"pos":[0,442],"content":"The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture. If you want to use the \"R\", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture. If you want to use the \"R\", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:","pos":[0,442],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString%28System.String%29&gt;</ph> method formats a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value in a specified format by using a <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that represents the conventions of the current culture.","pos":[0,263],"source":"The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture."},{"content":"If you want to use the \"R\", or round-trip, format or specify a different culture, use the other overloads of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> method, as follows:","pos":[264,442],"source":" If you want to use the \"R\", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:"}]}]},{"pos":[449,462],"content":"To use format","nodes":[{"content":"To use format","pos":[0,13]}]},{"pos":[463,474],"content":"For culture","nodes":[{"content":"For culture","pos":[0,11]}]},{"pos":[475,491],"content":"Use the overload","nodes":[{"content":"Use the overload","pos":[0,16]}]},{"pos":[561,584],"content":"Round-trip (\"R\") format","nodes":[{"content":"Round-trip (\"R\") format","pos":[0,23]}]},{"pos":[585,610],"content":"Default (current) culture","nodes":[{"content":"Default (current) culture","pos":[0,25]}]},{"pos":[611,653],"content":"<xref:System.Numerics.BigInteger.ToString>","nodes":[]},{"pos":[658,681],"content":"Round-trip (\"R\") format","nodes":[{"content":"Round-trip (\"R\") format","pos":[0,23]}]},{"pos":[682,700],"content":"A specific culture","nodes":[{"content":"A specific culture","pos":[0,18]}]},{"pos":[701,771],"content":"<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>","nodes":[]},{"pos":[776,793],"content":"A specific format","nodes":[{"content":"A specific format","pos":[0,17]}]},{"pos":[794,812],"content":"A specific culture","nodes":[{"content":"A specific culture","pos":[0,18]}]},{"pos":[813,899],"content":"<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>","nodes":[]},{"pos":[907,1455],"content":"The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md). If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier (\"R\"). If `format` is any other value, the method throws a <xref:System.FormatException>.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter can be any valid <bpt id=\"p1\">[</bpt>standard numeric string<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>, or any combination of <bpt id=\"p2\">[</bpt>custom numeric format strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[0,245],"source":"The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"If <ph id=\"ph1\">`format`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph> or is <ph id=\"ph3\">`null`</ph>, the return value of the current <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object is formatted with the round-trip format specifier (\"R\").","pos":[246,465],"source":" If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier (\"R\")."},{"content":"If <ph id=\"ph1\">`format`</ph> is any other value, the method throws a <ph id=\"ph2\">&lt;xref:System.FormatException&gt;</ph>.","pos":[466,548],"source":" If `format` is any other value, the method throws a <xref:System.FormatException>."}]},{"pos":[1462,1592],"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:","nodes":[{"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[0,130]}]},{"pos":[1602,1854],"content":"For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","source":"For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"pos":[1864,2008],"content":"For more information about support for formatting in the .NET Framework, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/docs/standard/base-types/formatting-types.md)</ept>.","source":"For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md)."},{"pos":[2015,2496],"content":"The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture. Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload.","nodes":[{"content":"The format of the returned string is determined by the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture.","pos":[0,131],"source":"The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture."},{"content":"Depending on the <ph id=\"ph1\">`format`</ph> parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string.","pos":[132,296],"source":" Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string."},{"content":"To provide formatting information for cultures other than the current culture, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29&gt;</ph> overload.","pos":[297,481],"source":" To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload."}]}],"pos":[414260,416783],"yaml":true,"extradata":"MT"},{"content":"A standard or custom numeric format string.","nodes":[{"pos":[0,43],"content":"A standard or custom numeric format string.","nodes":[{"content":"A standard or custom numeric format string.","pos":[0,43]}]}],"pos":[417429,417473],"yaml":true},{"content":"The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value in the format specified by the <code>format</code> parameter.","nodes":[{"pos":[0,156],"content":"The string representation of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value in the format specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value in the format specified by the <code>format</code> parameter."}],"pos":[417530,417687],"yaml":true},{"content":"<code>format</code> is not a valid format string.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid format string.","source":"<code>format</code> is not a valid format string."}],"pos":[417840,417890],"yaml":true},{"content":"Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation by using the specified format and culture-specific format information.","nodes":[{"pos":[0,207],"content":"Converts the numeric value of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> object to its equivalent string representation by using the specified format and culture-specific format information.","source":"Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation by using the specified format and culture-specific format information."}],"pos":[419450,419658],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Round-trip (\"R\") format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString>|  \n|Round-trip (\"R\") format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  \n|A specific format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  \n  \n The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md). If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier (\"R\"). If `format` is any other value, the method throws a <xref:System.FormatException>.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol. There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:  \n  \n-   You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \n  \n-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \n  \n-   You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If `provider` is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.","nodes":[{"pos":[0,425],"content":"The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:","nodes":[{"content":"The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:","pos":[0,425],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method formats a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value in a specified format by using the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object of a specified culture.","pos":[0,258],"source":"The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture."},{"content":"If you want to use the round-trip format or default culture settings, use the other overloads of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> method, as follows:","pos":[259,425],"source":" If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:"}]}]},{"pos":[432,445],"content":"To use format","nodes":[{"content":"To use format","pos":[0,13]}]},{"pos":[446,457],"content":"For culture","nodes":[{"content":"For culture","pos":[0,11]}]},{"pos":[458,474],"content":"Use the overload","nodes":[{"content":"Use the overload","pos":[0,16]}]},{"pos":[544,567],"content":"Round-trip (\"R\") format","nodes":[{"content":"Round-trip (\"R\") format","pos":[0,23]}]},{"pos":[568,593],"content":"Default (current) culture","nodes":[{"content":"Default (current) culture","pos":[0,25]}]},{"pos":[594,636],"content":"<xref:System.Numerics.BigInteger.ToString>","nodes":[]},{"pos":[641,664],"content":"Round-trip (\"R\") format","nodes":[{"content":"Round-trip (\"R\") format","pos":[0,23]}]},{"pos":[665,683],"content":"A specific culture","nodes":[{"content":"A specific culture","pos":[0,18]}]},{"pos":[684,754],"content":"<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>","nodes":[]},{"pos":[759,776],"content":"A specific format","nodes":[{"content":"A specific format","pos":[0,17]}]},{"pos":[777,802],"content":"Default (current) culture","nodes":[{"content":"Default (current) culture","pos":[0,25]}]},{"pos":[803,864],"content":"<xref:System.Numerics.BigInteger.ToString%28System.String%29>","nodes":[]},{"pos":[872,1421],"content":"The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md). If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier (\"R\"). If `format` is any other value, the method throws a <xref:System.FormatException>.","nodes":[{"content":"The <ph id=\"ph1\">`format`</ph> parameter can be any valid  <bpt id=\"p1\">[</bpt>standard numeric string<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>, or any combination of <bpt id=\"p2\">[</bpt>custom numeric format strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","pos":[0,246],"source":"The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"content":"If <ph id=\"ph1\">`format`</ph> is equal to <ph id=\"ph2\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph> or is <ph id=\"ph3\">`null`</ph>, the return value of the current <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object is formatted with the round-trip format specifier (\"R\").","pos":[247,466],"source":" If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier (\"R\")."},{"content":"If <ph id=\"ph1\">`format`</ph> is any other value, the method throws a <ph id=\"ph2\">&lt;xref:System.FormatException&gt;</ph>.","pos":[467,549],"source":" If `format` is any other value, the method throws a <xref:System.FormatException>."}]},{"pos":[1428,1558],"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:","nodes":[{"content":"The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:","pos":[0,130]}]},{"pos":[1568,1820],"content":"For more information about numeric format specifiers, see <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id=\"p2\">[</bpt>Custom Numeric Format Strings<ept id=\"p2\">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.","source":"For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)."},{"pos":[1830,1974],"content":"For more information about support for formatting in the .NET Framework, see <bpt id=\"p1\">[</bpt>Formatting Types<ept id=\"p1\">](~/docs/standard/base-types/formatting-types.md)</ept>.","source":"For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md)."},{"pos":[1981,3052],"content":"The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol. There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation.","pos":[0,76],"source":"The `provider` parameter is an <xref:System.IFormatProvider> implementation."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific information about the format of the string returned by this method.","pos":[77,291],"source":" Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method."},{"content":"When the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method is invoked, it calls the <ph id=\"ph2\">`provider`</ph> parameter's <ph id=\"ph3\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method and passes it a <ph id=\"ph4\">&lt;xref:System.Type&gt;</ph> object that represents the <ph id=\"ph5\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> type.","pos":[292,605],"source":" When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method then returns the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides information for formatting the <ph id=\"ph3\">`value`</ph> parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol.","pos":[606,883],"source":" The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol."},{"content":"There are three ways to use the <ph id=\"ph1\">`provider`</ph> parameter to supply formatting information to the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method:","pos":[884,1071],"source":" There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:"}]},{"pos":[3062,3380],"content":"You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.","nodes":[{"content":"You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.","pos":[0,318],"nodes":[{"content":"You can pass a <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the culture that supplies formatting information.","pos":[0,127],"source":"You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.GetFormat%2A&gt;</ph> method returns the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides numeric formatting information for that culture.","pos":[128,318],"source":" Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture."}]}]},{"pos":[3390,3614],"content":"You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)","nodes":[{"content":"You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)","pos":[0,224],"nodes":[{"content":"You can pass the actual <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides numeric formatting information.","pos":[0,121],"source":"You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information."},{"content":"(Its implementation of <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.GetFormat%2A&gt;</ph> just returns itself.)","pos":[122,224],"source":" (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)"}]}]},{"pos":[3624,3872],"content":"You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.","nodes":[{"content":"You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.","pos":[0,248],"nodes":[{"content":"You can pass a custom object that implements <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph>.","pos":[0,75],"source":"You can pass a custom object that implements <xref:System.IFormatProvider>."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method instantiates and returns the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides formatting information.","pos":[76,248],"source":" Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information."}]}]},{"pos":[3879,4033],"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the formatting of the returned string is based on the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object of the current culture.","source":"If `provider` is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture."}],"pos":[419669,423735],"yaml":true,"extradata":"MT"},{"content":"A standard or custom numeric format string.","nodes":[{"pos":[0,43],"content":"A standard or custom numeric format string.","nodes":[{"content":"A standard or custom numeric format string.","pos":[0,43]}]}],"pos":[424490,424534],"yaml":true},{"content":"An object that supplies culture-specific formatting information.","nodes":[{"pos":[0,64],"content":"An object that supplies culture-specific formatting information.","nodes":[{"content":"An object that supplies culture-specific formatting information.","pos":[0,64]}]}],"pos":[424607,424672],"yaml":true},{"content":"The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value as specified by the <code>format</code> and <code>provider</code> parameters.","nodes":[{"pos":[0,172],"content":"The string representation of the current <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> value as specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">format</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">provider</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameters.","source":"The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value as specified by the <code>format</code> and <code>provider</code> parameters."}],"pos":[424729,424902],"yaml":true},{"content":"<code>format</code> is not a valid format string.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;format&lt;/code&gt;</ph> is not a valid format string.","source":"<code>format</code> is not a valid format string."}],"pos":[425055,425105],"yaml":true},{"content":"Tries to convert the string representation of a number in a specified style and culture-specific format to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.","nodes":[{"pos":[0,239],"content":"Tries to convert the string representation of a number in a specified style and culture-specific format to its <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> equivalent, and returns a value that indicates whether the conversion succeeded.","source":"Tries to convert the string representation of a number in a specified style and culture-specific format to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded."}],"pos":[426929,427169],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.  \n  \n The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. Depending on the value of `style`, the `value` parameter may include the following elements:  \n  \n [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \n  \n If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:  \n  \n [*ws*]*hexdigits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter. The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*digits*|A sequence of digits from 0 through 9.|  \n|*,*|A culture-specific group separator. The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*fractional_digits*|One or more occurrences of the digit 0. Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*exponential_digits*|A sequence of digits from 0 through 9. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.  \n  \n|Non-composite `NumberStyles` values|Elements permitted in value in addition to digits|  \n|------------------------------------------|-------------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles.None>|Decimal digits only.|  \n|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|The decimal point (*.*) and *fractional_digits* elements. However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.|  \n|<xref:System.Globalization.NumberStyles.AllowExponent>|The \"e\" or \"E\" character, which indicates exponential notation, along with *exponential_digits*. If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|The *ws* element at the start of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|The *ws* element at the end of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|The *sign* element before *digits*.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|The *sign* element after *digits*.|  \n|<xref:System.Globalization.NumberStyles.AllowParentheses>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles.AllowThousands>|The group separator (*,*) element.|  \n|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|The currency (*$*) element.|  \n|<xref:System.Globalization.NumberStyles.Currency>|All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Float>|The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol. The `value` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Number>|The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.|  \n|<xref:System.Globalization.NumberStyles.Any>|All elements. However, `value` cannot represent a hexadecimal number.|  \n  \n> [!IMPORTANT]\n>  If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \n  \n If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used, `value` must be a hexadecimal value. The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)  \n  \n> [!NOTE]\n>  If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \n  \n If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  \n  \n [!code-csharp[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`. The `provider` parameter can be any one of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \n  \n-   A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.","nodes":[{"pos":[0,532],"content":"The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29&gt;</ph> method is like the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29&gt;</ph> method, except that it does not throw an exception if the conversion fails.","pos":[0,373],"source":"The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails."},{"content":"This method eliminates the need to use exception handling to test for a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> if <ph id=\"ph2\">`value`</ph> is invalid and cannot be parsed successfully.","pos":[374,532],"source":" This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully."}]},{"pos":[539,912],"content":"The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. Depending on the value of `style`, the `value` parameter may include the following elements:","nodes":[{"content":"The <ph id=\"ph1\">`style`</ph> parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the <ph id=\"ph2\">`value`</ph> parameter for the parse operation to succeed.","pos":[0,179],"source":"The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed."},{"content":"It must be a combination of bit flags from the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration.","pos":[180,280],"source":" It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration."},{"content":"Depending on the value of <ph id=\"ph1\">`style`</ph>, the <ph id=\"ph2\">`value`</ph> parameter may include the following elements:","pos":[281,373],"source":" Depending on the value of `style`, the `value` parameter may include the following elements:"}]},{"pos":[919,1016],"content":"[<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>][<bpt id=\"p2\">*</bpt><ph id=\"ph1\">$</ph><ept id=\"p2\">*</ept>][<bpt id=\"p3\">*</bpt>sign<ept id=\"p3\">*</ept>][<bpt id=\"p4\">*</bpt>digits<ept id=\"p4\">*</ept>,]<bpt id=\"p5\">*</bpt>digits<ept id=\"p5\">*</ept>[.<bpt id=\"p6\">*</bpt>fractional_digits<ept id=\"p6\">*</ept>][E[<bpt id=\"p7\">*</bpt>sign<ept id=\"p7\">*</ept>]<bpt id=\"p8\">*</bpt>exponential_digits<ept id=\"p8\">*</ept>][<bpt id=\"p9\">*</bpt>ws<ept id=\"p9\">*</ept>]","source":"[*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]"},{"pos":[1023,1174],"content":"If the <ph id=\"ph1\">`style`</ph> parameter includes <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles.AllowHexSpecifier&gt;</ph>, the <ph id=\"ph3\">`value`</ph> parameter may include the following elements:","source":"If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:"},{"pos":[1181,1204],"content":"[<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>]<bpt id=\"p2\">*</bpt>hexdigits<ept id=\"p2\">*</ept>[<bpt id=\"p3\">*</bpt>ws<ept id=\"p3\">*</ept>]","source":"[*ws*]*hexdigits*[*ws*]"},{"pos":[1211,1306],"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","pos":[0,95],"nodes":[{"content":"Elements in square brackets ([ and ]) are optional.","pos":[0,51]},{"content":"The following table describes each element.","pos":[52,95]}]}]},{"pos":[1313,1320],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[1321,1332],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[1373,1377],"content":"<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>","source":"*ws*"},{"pos":[1378,1663],"content":"Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"Optional white space.","pos":[0,21]},{"content":"White space can appear at the start of <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag, or at the end of <ph id=\"ph4\">`value`</ph> if <ph id=\"ph5\">`style`</ph> includes the <ph id=\"ph6\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[22,285],"source":" White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[1672,2125],"content":"A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter. The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"A culture-specific currency symbol.","pos":[0,35]},{"content":"Its position in the string is defined by the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object returned by the <ph id=\"ph3\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method of the <ph id=\"ph4\">`provider`</ph> parameter.","pos":[36,315],"source":" Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter."},{"content":"The currency symbol can appear in <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[316,453],"source":" The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[2130,2136],"content":"<bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept>","source":"*sign*"},{"pos":[2137,2590],"content":"An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"An optional sign.","pos":[0,17]},{"content":"The sign can appear at the start of <ph id=\"ph1\">`value`</ph> if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag, and it can appear at the end of <ph id=\"ph4\">`value`</ph> if <ph id=\"ph5\">`style`</ph> includes the <ph id=\"ph6\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[18,293],"source":" The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."},{"content":"Parentheses can be used in <ph id=\"ph1\">`value`</ph> to indicate a negative value if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[294,453],"source":" Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[2595,2603],"content":"<bpt id=\"p1\">*</bpt>digits<ept id=\"p1\">*</ept>","source":"*digits*"},{"pos":[2604,2642],"content":"A sequence of digits from 0 through 9.","nodes":[{"content":"A sequence of digits from 0 through 9.","pos":[0,38]}]},{"pos":[2647,2650],"content":"<bpt id=\"p1\">*</bpt>,<ept id=\"p1\">*</ept>","source":"*,*"},{"pos":[2651,2863],"content":"A culture-specific group separator. The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"A culture-specific group separator.","pos":[0,35]},{"content":"The group separator of the culture specified by <ph id=\"ph1\">`provider`</ph> can appear in <ph id=\"ph2\">`value`</ph> if <ph id=\"ph3\">`style`</ph> includes the <ph id=\"ph4\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[36,212],"source":" The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[2868,2871],"content":"<bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>","source":"*.*"},{"pos":[2872,3094],"content":"A culture-specific decimal point symbol. The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"A culture-specific decimal point symbol.","pos":[0,40]},{"content":"The decimal point symbol of the culture specified by <ph id=\"ph1\">`provider`</ph> can appear in <ph id=\"ph2\">`value`</ph> if <ph id=\"ph3\">`style`</ph> includes the <ph id=\"ph4\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[41,222],"source":" The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[3099,3118],"content":"<bpt id=\"p1\">*</bpt>fractional_digits<ept id=\"p1\">*</ept>","source":"*fractional_digits*"},{"pos":[3119,3299],"content":"One or more occurrences of the digit 0. Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"One or more occurrences of the digit 0.","pos":[0,39]},{"content":"Fractional digits can appear in <ph id=\"ph1\">`value`</ph> only if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[40,180],"source":" Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[3304,3305],"content":"E","nodes":[{"content":"E","pos":[0,1]}]},{"pos":[3306,3580],"content":"The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation.","pos":[0,109]},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can represent a number in exponential notation if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[110,274],"source":" The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[3585,3605],"content":"<bpt id=\"p1\">*</bpt>exponential_digits<ept id=\"p1\">*</ept>","source":"*exponential_digits*"},{"pos":[3606,3809],"content":"A sequence of digits from 0 through 9. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.","nodes":[{"content":"A sequence of digits from 0 through 9.","pos":[0,38]},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can represent a number in exponential notation if <ph id=\"ph2\">`style`</ph> includes the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag.","pos":[39,203],"source":" The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag."}]},{"pos":[3814,3825],"content":"<bpt id=\"p1\">*</bpt>hexdigits<ept id=\"p1\">*</ept>","source":"*hexdigits*"},{"pos":[3826,3892],"content":"A sequence of hexadecimal digits from 0 through f, or 0 through F.","nodes":[{"content":"A sequence of hexadecimal digits from 0 through f, or 0 through F.","pos":[0,66]}]},{"pos":[3900,4372],"content":"A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.","nodes":[{"content":"A string with decimal digits only (which corresponds to the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag) always parses successfully.","pos":[0,159],"source":"A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag) always parses successfully."},{"content":"Most of the remaining <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members control elements that may be present, but are not required to be present, in this input string.","pos":[160,326],"source":" Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string."},{"content":"The following table indicates how individual <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members affect the elements that may be present in <ph id=\"ph2\">`value`</ph>.","pos":[327,472],"source":" The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`."}]},{"pos":[4379,4414],"content":"Non-composite <ph id=\"ph1\">`NumberStyles`</ph> values","source":"Non-composite `NumberStyles` values"},{"pos":[4415,4464],"content":"Elements permitted in value in addition to digits","nodes":[{"content":"Elements permitted in value in addition to digits","pos":[0,49]}]},{"pos":[4572,4617],"content":"<xref:System.Globalization.NumberStyles.None>","nodes":[]},{"pos":[4618,4638],"content":"Decimal digits only.","nodes":[{"content":"Decimal digits only.","pos":[0,20]}]},{"pos":[4643,4701],"content":"<xref:System.Globalization.NumberStyles.AllowDecimalPoint>","nodes":[]},{"pos":[4702,4862],"content":"The decimal point (*.*) and *fractional_digits* elements. However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.","nodes":[{"content":"The decimal point (<bpt id=\"p1\">*</bpt>.<ept id=\"p1\">*</ept>) and <bpt id=\"p2\">*</bpt>fractional_digits<ept id=\"p2\">*</ept> elements.","pos":[0,57],"source":"The decimal point (*.*) and *fractional_digits* elements."},{"content":"However, <bpt id=\"p1\">*</bpt>fractional_digits<ept id=\"p1\">*</ept> must consist of only one or more 0 digits, or the method returns <ph id=\"ph1\">`false`</ph>.","pos":[58,160],"source":" However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`."}]},{"pos":[4867,4921],"content":"<xref:System.Globalization.NumberStyles.AllowExponent>","nodes":[]},{"pos":[4922,5123],"content":"The \"e\" or \"E\" character, which indicates exponential notation, along with *exponential_digits*. If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.","nodes":[{"content":"The \"e\" or \"E\" character, which indicates exponential notation, along with <bpt id=\"p1\">*</bpt>exponential_digits<ept id=\"p1\">*</ept>.","pos":[0,96],"source":"The \"e\" or \"E\" character, which indicates exponential notation, along with *exponential_digits*."},{"content":"If <ph id=\"ph1\">`value`</ph> represents a number in exponential notation, it cannot have a non-zero, fractional component.","pos":[97,201],"source":" If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component."}]},{"pos":[5128,5186],"content":"<xref:System.Globalization.NumberStyles.AllowLeadingWhite>","nodes":[]},{"pos":[5187,5228],"content":"The <bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept> element at the start of <ph id=\"ph1\">`value`</ph>.","source":"The *ws* element at the start of `value`."},{"pos":[5233,5292],"content":"<xref:System.Globalization.NumberStyles.AllowTrailingWhite>","nodes":[]},{"pos":[5293,5332],"content":"The <bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept> element at the end of <ph id=\"ph1\">`value`</ph>.","source":"The *ws* element at the end of `value`."},{"pos":[5337,5394],"content":"<xref:System.Globalization.NumberStyles.AllowLeadingSign>","nodes":[]},{"pos":[5395,5430],"content":"The <bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept> element before <bpt id=\"p2\">*</bpt>digits<ept id=\"p2\">*</ept>.","source":"The *sign* element before *digits*."},{"pos":[5435,5493],"content":"<xref:System.Globalization.NumberStyles.AllowTrailingSign>","nodes":[]},{"pos":[5494,5528],"content":"The <bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept> element after <bpt id=\"p2\">*</bpt>digits<ept id=\"p2\">*</ept>.","source":"The *sign* element after *digits*."},{"pos":[5533,5590],"content":"<xref:System.Globalization.NumberStyles.AllowParentheses>","nodes":[]},{"pos":[5591,5665],"content":"The <bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept> element in the form of parentheses enclosing the numeric value.","source":"The *sign* element in the form of parentheses enclosing the numeric value."},{"pos":[5670,5725],"content":"<xref:System.Globalization.NumberStyles.AllowThousands>","nodes":[]},{"pos":[5726,5760],"content":"The group separator (<bpt id=\"p1\">*</bpt>,<ept id=\"p1\">*</ept>) element.","source":"The group separator (*,*) element."},{"pos":[5765,5825],"content":"<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>","nodes":[]},{"pos":[5826,5853],"content":"The currency (<bpt id=\"p1\">*</bpt><ph id=\"ph1\">$</ph><ept id=\"p1\">*</ept>) element.","source":"The currency (*$*) element."},{"pos":[5858,5907],"content":"<xref:System.Globalization.NumberStyles.Currency>","nodes":[]},{"pos":[5908,6013],"content":"All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.","nodes":[{"content":"All elements.","pos":[0,13]},{"content":"However, <ph id=\"ph1\">`value`</ph> cannot represent a hexadecimal number or a number in exponential notation.","pos":[14,105],"source":" However, `value` cannot represent a hexadecimal number or a number in exponential notation."}]},{"pos":[6018,6064],"content":"<xref:System.Globalization.NumberStyles.Float>","nodes":[]},{"pos":[6065,6238],"content":"The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol. The `value` parameter can also use exponential notation.","nodes":[{"content":"The <bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept> element at the start or end of <ph id=\"ph1\">`value`</ph>, <bpt id=\"p2\">*</bpt>sign<ept id=\"p2\">*</ept> at the start of <ph id=\"ph2\">`value`</ph>, and the decimal point (<bpt id=\"p3\">*</bpt>.<ept id=\"p3\">*</ept>) symbol.","pos":[0,116],"source":"The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol."},{"content":"The <ph id=\"ph1\">`value`</ph> parameter can also use exponential notation.","pos":[117,173],"source":" The `value` parameter can also use exponential notation."}]},{"pos":[6243,6290],"content":"<xref:System.Globalization.NumberStyles.Number>","nodes":[]},{"pos":[6291,6365],"content":"The <bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>sign<ept id=\"p2\">*</ept>, group separator (<bpt id=\"p3\">*</bpt>,<ept id=\"p3\">*</ept>), and decimal point (<bpt id=\"p4\">*</bpt>.<ept id=\"p4\">*</ept>) elements.","source":"The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements."},{"pos":[6370,6414],"content":"<xref:System.Globalization.NumberStyles.Any>","nodes":[]},{"pos":[6415,6484],"content":"All elements. However, `value` cannot represent a hexadecimal number.","nodes":[{"content":"All elements.","pos":[0,13]},{"content":"However, <ph id=\"ph1\">`value`</ph> cannot represent a hexadecimal number.","pos":[14,69],"source":" However, `value` cannot represent a hexadecimal number."}]},{"pos":[6493,7261],"content":"[!IMPORTANT]\n If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","leadings":["","> "],"nodes":[{"content":" If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.","pos":[13,766],"nodes":[{"content":"If you use the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.TryParse%2A&gt;</ph> method to round-trip the string representation of a <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value that was output by the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger.ToString%2A&gt;</ph> method, you should use the <ph id=\"ph4\">&lt;xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName&gt;</ph> method with the \"R\" format specifier to generate the string representation of the <ph id=\"ph5\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[1,459],"source":" If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value."},{"content":"Otherwise, the string representation of the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.TryParse%2A&gt;</ph> method to restore the <ph id=\"ph3\">&lt;xref:System.Numerics.BigInteger&gt;</ph> value.","pos":[460,753],"source":" Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value."}]}]},{"pos":[7268,7756],"content":"If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used, `value` must be a hexadecimal value. The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> flag is used, <ph id=\"ph2\">`value`</ph> must be a hexadecimal value.","pos":[0,123],"source":"If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used, `value` must be a hexadecimal value."},{"content":"The only other flags that can be present in <ph id=\"ph1\">`style`</ph> are <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph>.","pos":[124,316],"source":" The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>."},{"content":"(The <ph id=\"ph1\">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration has a composite style, <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles.HexNumber&gt;</ph>, that includes both white-space flags.)","pos":[317,488],"source":" (The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)"}]},{"pos":[7764,7986],"content":"[!NOTE]\n If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.","leadings":["","> "],"nodes":[{"content":" If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.","pos":[8,220],"nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as <ph id=\"ph2\">`0x`</ph> or <ph id=\"ph3\">`&amp;h`</ph>) that differentiates it as a hexadecimal number.","pos":[1,176],"source":" If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number."},{"content":"This causes the conversion to fail.","pos":[177,212]}]}]},{"pos":[7993,8852],"content":"If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.","nodes":[{"content":"If <ph id=\"ph1\">`value`</ph> is a hexadecimal string, the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29&gt;</ph> method interprets <ph id=\"ph3\">`value`</ph> as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to <ph id=\"ph4\">`0x80`</ph>.","pos":[0,362],"source":"If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`."},{"content":"In other words, the method interprets the highest-order bit of the first byte in <ph id=\"ph1\">`value`</ph> as the sign bit.","pos":[363,468],"source":" In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit."},{"content":"To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in <ph id=\"ph1\">`value`</ph> must have a value of zero.","pos":[469,608],"source":" To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero."},{"content":"For example, the method interprets <ph id=\"ph1\">`0x80`</ph> as a negative value, but it interprets either <ph id=\"ph2\">`0x080`</ph> or <ph id=\"ph3\">`0x0080`</ph> as a positive value.","pos":[609,737],"source":" For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value."},{"content":"The following example illustrates the difference between hexadecimal strings that represent negative and positive values.","pos":[738,859]}]},{"pos":[8859,9182],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Numerics.BigInteger.TryParse#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Numerics.BigInteger.TryParse#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]"},{"pos":[9189,9511],"content":"The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`. The `provider` parameter can be any one of the following:","nodes":[{"content":"The <ph id=\"ph1\">`provider`</ph> parameter is an <ph id=\"ph2\">&lt;xref:System.IFormatProvider&gt;</ph> implementation.","pos":[0,76],"source":"The `provider` parameter is an <xref:System.IFormatProvider> implementation."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns a <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides culture-specific information about the format of <ph id=\"ph3\">`value`</ph>.","pos":[77,264],"source":" Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`."},{"content":"The <ph id=\"ph1\">`provider`</ph> parameter can be any one of the following:","pos":[265,322],"source":" The `provider` parameter can be any one of the following:"}]},{"pos":[9521,9826],"content":"A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.","nodes":[{"content":"A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.","pos":[0,305],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that represents the culture that supplies formatting information.","pos":[0,114],"source":"A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.GetFormat%2A&gt;</ph> method returns the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides numeric formatting information for that culture.","pos":[115,305],"source":" Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture."}]}]},{"pos":[9836,10038],"content":"A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)","nodes":[{"content":"A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)","pos":[0,202],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides numeric formatting information.","pos":[0,99],"source":"A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information."},{"content":"(Its implementation of <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.GetFormat%2A&gt;</ph> just returns itself.)","pos":[100,202],"source":" (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)"}]}]},{"pos":[10048,10283],"content":"A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.","nodes":[{"content":"A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.","pos":[0,235],"nodes":[{"content":"A custom object that implements <ph id=\"ph1\">&lt;xref:System.IFormatProvider&gt;</ph>.","pos":[0,62],"source":"A custom object that implements <xref:System.IFormatProvider>."},{"content":"Its <ph id=\"ph1\">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method instantiates and returns the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that provides formatting information.","pos":[63,235],"source":" Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information."}]}]},{"pos":[10290,10403],"content":"If <ph id=\"ph1\">`provider`</ph> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture is used.","source":"If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."}],"pos":[427180,437661],"yaml":true,"extradata":"MT"},{"content":"The string representation of a number. The string is interpreted using the style specified by <code>style</code>.","nodes":[{"pos":[0,113],"content":"The string representation of a number. The string is interpreted using the style specified by <code>style</code>.","nodes":[{"content":"The string representation of a number.","pos":[0,38]},{"content":"The string is interpreted using the style specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">style</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[39,113],"source":" The string is interpreted using the style specified by <code>style</code>."}]}],"pos":[439196,439310],"yaml":true},{"content":"A bitwise combination of enumeration values that indicates the style elements that can be present in <code>value</code>. A typical value to specify is <xref href=\"System.Globalization.NumberStyles.Integer\"></xref>.","nodes":[{"pos":[0,214],"content":"A bitwise combination of enumeration values that indicates the style elements that can be present in <code>value</code>. A typical value to specify is <xref href=\"System.Globalization.NumberStyles.Integer\"></xref>.","nodes":[{"content":"A bitwise combination of enumeration values that indicates the style elements that can be present in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,120],"source":"A bitwise combination of enumeration values that indicates the style elements that can be present in <code>value</code>."},{"content":"A typical value to specify is <ph id=\"ph1\">&lt;xref href=\"System.Globalization.NumberStyles.Integer\"&gt;&lt;/xref&gt;</ph>.","pos":[121,214],"source":" A typical value to specify is <xref href=\"System.Globalization.NumberStyles.Integer\"></xref>."}]}],"pos":[439391,439606],"yaml":true},{"content":"An object that supplies culture-specific formatting information about <code>value</code>.","nodes":[{"pos":[0,89],"content":"An object that supplies culture-specific formatting information about <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An object that supplies culture-specific formatting information about <code>value</code>."}],"pos":[439679,439769],"yaml":true},{"content":"When this method returns, contains the <xref href=\"System.Numerics.BigInteger\"></xref> equivalent to the number that is contained in <code>value</code>, or <xref href=\"System.Numerics.BigInteger.Zero\"></xref> if the conversion failed. The conversion fails if the <code>value</code> parameter is `null` or is not in a format that is compliant with <code>style</code>. This parameter is passed uninitialized.","nodes":[{"pos":[0,406],"content":"When this method returns, contains the <xref href=\"System.Numerics.BigInteger\"></xref> equivalent to the number that is contained in <code>value</code>, or <xref href=\"System.Numerics.BigInteger.Zero\"></xref> if the conversion failed. The conversion fails if the <code>value</code> parameter is `null` or is not in a format that is compliant with <code>style</code>. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> equivalent to the number that is contained in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph3\">&lt;xref href=\"System.Numerics.BigInteger.Zero\"&gt;&lt;/xref&gt;</ph> if the conversion failed.","pos":[0,234],"source":"When this method returns, contains the <xref href=\"System.Numerics.BigInteger\"></xref> equivalent to the number that is contained in <code>value</code>, or <xref href=\"System.Numerics.BigInteger.Zero\"></xref> if the conversion failed."},{"content":"The conversion fails if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> or is not in a format that is compliant with <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">style</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[235,366],"source":" The conversion fails if the <code>value</code> parameter is `null` or is not in a format that is compliant with <code>style</code>."},{"content":"This parameter is passed uninitialized.","pos":[367,406]}]}],"pos":[439844,440251],"yaml":true},{"content":"`true` if the <code>value</code> parameter was converted successfully; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was converted successfully; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <code>value</code> parameter was converted successfully; otherwise, `false`."}],"pos":[440309,440402],"yaml":true},{"content":"<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\"></xref> flag along with another value.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;code&gt;style&lt;/code&gt;</ph> is not a <ph id=\"ph2\">&lt;xref href=\"System.Globalization.NumberStyles\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,310],"content":"<ph id=\"ph1\">&lt;code&gt;style&lt;/code&gt;</ph> includes the <ph id=\"ph2\">&lt;xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph3\">&lt;xref href=\"System.Globalization.NumberStyles.HexNumber\"&gt;&lt;/xref&gt;</ph> flag along with another value.","source":"<code>style</code> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\"></xref> flag along with another value."}],"pos":[440559,440882],"yaml":true},{"content":"Tries to convert the string representation of a number to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.","nodes":[{"pos":[0,190],"content":"Tries to convert the string representation of a number to its <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> equivalent, and returns a value that indicates whether the conversion succeeded.","source":"Tries to convert the string representation of a number to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded."}],"pos":[442442,442633],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed.  \n  \n The `value` parameter should be the string representation of a decimal number in the following form:  \n  \n [*ws*][*sign*]*digits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.|  \n|*digits*|A sequence of decimal digits ranging from 0 to 9.|  \n  \n> [!NOTE]\n>  The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  \n  \n The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed. To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method.  \n  \n The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>.  \n  \n This overload interprets all digits in the `value` parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead.","nodes":[{"pos":[0,410],"content":"The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29&gt;</ph> method is like the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.Parse%28System.String%29&gt;</ph> method, except that it does not throw an exception if the conversion fails.","pos":[0,251],"source":"The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails."},{"content":"This method eliminates the need to use exception handling to test for a <ph id=\"ph1\">&lt;xref:System.FormatException&gt;</ph> if <ph id=\"ph2\">`value`</ph> is invalid and cannot be successfully parsed.","pos":[252,410],"source":" This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed."}]},{"pos":[417,517],"content":"The <ph id=\"ph1\">`value`</ph> parameter should be the string representation of a decimal number in the following form:","source":"The `value` parameter should be the string representation of a decimal number in the following form:"},{"pos":[524,552],"content":"[<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>][<bpt id=\"p2\">*</bpt>sign<ept id=\"p2\">*</ept>]<bpt id=\"p3\">*</bpt>digits<ept id=\"p3\">*</ept>[<bpt id=\"p4\">*</bpt>ws<ept id=\"p4\">*</ept>]","source":"[*ws*][*sign*]*digits*[*ws*]"},{"pos":[559,654],"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","nodes":[{"content":"Elements in square brackets ([ and ]) are optional. The following table describes each element.","pos":[0,95],"nodes":[{"content":"Elements in square brackets ([ and ]) are optional.","pos":[0,51]},{"content":"The following table describes each element.","pos":[52,95]}]}]},{"pos":[661,668],"content":"Element","nodes":[{"content":"Element","pos":[0,7]}]},{"pos":[669,680],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[721,725],"content":"<bpt id=\"p1\">*</bpt>ws<ept id=\"p1\">*</ept>","source":"*ws*"},{"pos":[726,747],"content":"Optional white space.","nodes":[{"content":"Optional white space.","pos":[0,21]}]},{"pos":[752,758],"content":"<bpt id=\"p1\">*</bpt>sign<ept id=\"p1\">*</ept>","source":"*sign*"},{"pos":[759,1031],"content":"An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.","nodes":[{"content":"An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.","pos":[0,272],"nodes":[{"content":"An optional sign.","pos":[0,17]},{"content":"Valid sign characters are determined by the <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName&gt;</ph> properties of the current culture.","pos":[18,272],"source":" Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture."}]}]},{"pos":[1036,1044],"content":"<bpt id=\"p1\">*</bpt>digits<ept id=\"p1\">*</ept>","source":"*digits*"},{"pos":[1045,1094],"content":"A sequence of decimal digits ranging from 0 to 9.","nodes":[{"content":"A sequence of decimal digits ranging from 0 to 9.","pos":[0,49]}]},{"pos":[1103,1255],"content":"[!NOTE]\n The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.","leadings":["","> "],"nodes":[{"content":"The string specified by the <ph id=\"ph1\">`value`</ph> parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.","pos":[9,150],"source":" The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion."}]},{"pos":[1262,1778],"content":"The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed. To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method.","nodes":[{"content":"The <ph id=\"ph1\">`value`</ph> parameter is interpreted by using the <ph id=\"ph2\">&lt;xref:System.Globalization.NumberStyles?displayProperty=fullName&gt;</ph> style.","pos":[0,122],"source":"The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style."},{"content":"In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed.","pos":[123,223]},{"content":"To explicitly define the style elements with the culture-specific formatting information that can be present in <ph id=\"ph1\">`value`</ph>, call the <ph id=\"ph2\">&lt;xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29&gt;</ph> method.","pos":[224,516],"source":" To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method."}]},{"pos":[1785,2046],"content":"The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>.","nodes":[{"content":"The <ph id=\"ph1\">`value`</ph> parameter is parsed by using the formatting information in a <ph id=\"ph2\">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture.","pos":[0,149],"source":"The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName&gt;</ph>.","pos":[150,261],"source":" For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>."}]},{"pos":[2053,2374],"content":"This overload interprets all digits in the `value` parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead.","nodes":[{"content":"This overload interprets all digits in the <ph id=\"ph1\">`value`</ph> parameter as decimal digits.","pos":[0,79],"source":"This overload interprets all digits in the `value` parameter as decimal digits."},{"content":"To parse the string representation of a hexadecimal number, call the <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29&gt;</ph> overload instead.","pos":[80,321],"source":" To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead."}]}],"pos":[442644,445042],"yaml":true,"extradata":"MT"},{"content":"The string representation of a number.","nodes":[{"pos":[0,38],"content":"The string representation of a number.","nodes":[{"content":"The string representation of a number.","pos":[0,38]}]}],"pos":[446007,446046],"yaml":true},{"content":"When this method returns, contains the <xref href=\"System.Numerics.BigInteger\"></xref> equivalent to the number that is contained in <code>value</code>, or zero (0) if the conversion fails. The conversion fails if the <code>value</code> parameter is `null` or is not of the correct format. This parameter is passed uninitialized.","nodes":[{"pos":[0,329],"content":"When this method returns, contains the <xref href=\"System.Numerics.BigInteger\"></xref> equivalent to the number that is contained in <code>value</code>, or zero (0) if the conversion fails. The conversion fails if the <code>value</code> parameter is `null` or is not of the correct format. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the <ph id=\"ph1\">&lt;xref href=\"System.Numerics.BigInteger\"&gt;&lt;/xref&gt;</ph> equivalent to the number that is contained in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or zero (0) if the conversion fails.","pos":[0,189],"source":"When this method returns, contains the <xref href=\"System.Numerics.BigInteger\"></xref> equivalent to the number that is contained in <code>value</code>, or zero (0) if the conversion fails."},{"content":"The conversion fails if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph> or is not of the correct format.","pos":[190,289],"source":" The conversion fails if the <code>value</code> parameter is `null` or is not of the correct format."},{"content":"This parameter is passed uninitialized.","pos":[290,329]}]}],"pos":[446121,446451],"yaml":true},{"content":"`true` if <code>value</code> was converted successfully; otherwise, `false`.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> was converted successfully; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> was converted successfully; otherwise, `false`."}],"pos":[446509,446588],"yaml":true},{"content":"<code>value</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[446753,446783],"yaml":true},{"content":"Gets a value that represents the number 0 (zero).","nodes":[{"pos":[0,49],"content":"Gets a value that represents the number 0 (zero).","nodes":[{"content":"Gets a value that represents the number 0 (zero).","pos":[0,49]}]}],"pos":[448148,448198],"yaml":true},{"content":"The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.","nodes":[{"pos":[0,155],"content":"The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Numerics.BigInteger&gt;</ph> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.","pos":[0,155],"source":"The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons."}]}],"pos":[448209,448365],"yaml":true,"extradata":"MT"},{"content":"An integer whose value is 0 (zero).","nodes":[{"pos":[0,35],"content":"An integer whose value is 0 (zero).","nodes":[{"content":"An integer whose value is 0 (zero).","pos":[0,35]}]}],"pos":[448513,448549],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Numerics.BigInteger\n  commentId: T:System.Numerics.BigInteger\n  id: BigInteger\n  children:\n  - System.Numerics.BigInteger.#ctor(System.Byte[])\n  - System.Numerics.BigInteger.#ctor(System.Decimal)\n  - System.Numerics.BigInteger.#ctor(System.Double)\n  - System.Numerics.BigInteger.#ctor(System.Int32)\n  - System.Numerics.BigInteger.#ctor(System.Int64)\n  - System.Numerics.BigInteger.#ctor(System.Single)\n  - System.Numerics.BigInteger.#ctor(System.UInt32)\n  - System.Numerics.BigInteger.#ctor(System.UInt64)\n  - System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.CompareTo(System.UInt64)\n  - System.Numerics.BigInteger.CompareTo(System.Object)\n  - System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.CompareTo(System.Int64)\n  - System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  - System.Numerics.BigInteger.Equals(System.Int64)\n  - System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Equals(System.Object)\n  - System.Numerics.BigInteger.Equals(System.UInt64)\n  - System.Numerics.BigInteger.GetHashCode\n  - System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.IsEven\n  - System.Numerics.BigInteger.IsOne\n  - System.Numerics.BigInteger.IsPowerOfTwo\n  - System.Numerics.BigInteger.IsZero\n  - System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)\n  - System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.MinusOne\n  - System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.One\n  - System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Explicit(System.Single to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt32)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt16)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Single)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.SByte)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int64)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt64)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int16)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Double)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Decimal)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Byte)\n  - System.Numerics.BigInteger.op_Explicit(System.Double to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int32)\n  - System.Numerics.BigInteger.op_Explicit(System.Decimal to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_Implicit(System.UInt32 to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Implicit(System.UInt16 to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Implicit(System.SByte to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Implicit(System.UInt64 to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Implicit(System.Int32 to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Implicit(System.Int16 to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Implicit(System.Byte to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Implicit(System.Int64 to System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\n  - System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  - System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)\n  - System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  - System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)\n  - System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)\n  - System.Numerics.BigInteger.Parse(System.String)\n  - System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\n  - System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.Sign\n  - System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  - System.Numerics.BigInteger.ToByteArray\n  - System.Numerics.BigInteger.ToString\n  - System.Numerics.BigInteger.ToString(System.IFormatProvider)\n  - System.Numerics.BigInteger.ToString(System.String)\n  - System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\n  - System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  - System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)\n  - System.Numerics.BigInteger.Zero\n  - System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)\n  langs:\n  - csharp\n  name: BigInteger\n  nameWithType: BigInteger\n  fullName: System.Numerics.BigInteger\n  type: Struct\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Represents an arbitrarily large signed integer.\n  remarks: \"The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds. The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types). This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties.  \\n  \\n> [!NOTE]\\n>  Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large.  \\n  \\n## Instantiating a BigInteger Object  \\n You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:  \\n  \\n-   You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor. (Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values.  \\n  \\n     [!code-csharp[System.Numerics.BigInteger.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]\\n     [!code-vb[System.Numerics.BigInteger.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]  \\n  \\n-   You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type. The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.  \\n  \\n     [!code-csharp[System.Numerics.BigInteger.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]\\n     [!code-vb[System.Numerics.BigInteger.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]  \\n  \\n-   You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first. The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.  \\n  \\n     [!code-csharp[System.Numerics.BigInteger.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]\\n     [!code-vb[System.Numerics.BigInteger.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]  \\n  \\n These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only. You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:  \\n  \\n-   You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=fullName> constructor. For example:  \\n  \\n     [!code-csharp[System.Numerics.BigInteger.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]\\n     [!code-vb[System.Numerics.BigInteger.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]  \\n  \\n-   You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>. For example:  \\n  \\n     [!code-csharp[System.Numerics.BigInteger.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]\\n     [!code-vb[System.Numerics.BigInteger.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]  \\n  \\n-   You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result. The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=fullName> and assigning the result to a <xref:System.Numerics.BigInteger>.  \\n  \\n     [!code-csharp[System.Numerics.BigInteger.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]\\n     [!code-vb[System.Numerics.BigInteger.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]  \\n  \\n The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>.  \\n  \\n## Performing Operations on BigInteger Values  \\n You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type. <xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation. You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other. Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators. For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations. These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others.  \\n  \\n Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types. In addition, <xref:System.Numerics.BigInteger> adds members such as the following:  \\n  \\n-   <xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value.  \\n  \\n-   <xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value.  \\n  \\n-   <xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation.  \\n  \\n-   <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values.  \\n  \\n Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types.  \\n  \\n<a name=\\\"mutability\\\"></a>   \\n## Mutability and the BigInteger Structure  \\n The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]  \\n  \\n Although this example appears to modify the value of the existing object, this is not the case. <xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value. This new object is then returned to the caller.  \\n  \\n> [!NOTE]\\n>  The other numeric types in the .NET Framework are also immutable. However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.  \\n  \\n Although this process is transparent to the caller, it does incur a performance penalty. In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant. For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]\\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]  \\n  \\n In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable. The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits. The following example provides an illustration.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]  \\n  \\n## Working with Byte Arrays and Hexadecimal Strings  \\n If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes. The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes). You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]  \\n  \\n To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor. The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]\\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]  \\n  \\n The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation. Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit. To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0. For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296. Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000. To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor. The following example illustrates this.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]  \\n  \\n Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte. Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]\\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]  \\n  \\n However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=fullName>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=fullName>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=fullName>).  \\n  \\n When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation. For example, both \\\"FF01\\\" and \\\"F01\\\" represent the decimal value -255. To differentiate positive from negative values, positive values should include a leading zero. The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the \\\"X\\\" format string, add a leading zero to the returned hexadecimal string for positive values. This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]\\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]  \\n  \\n However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived. Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic. The following example provides one possible implementation.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]\\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]\"\n  syntax:\n    content: 'public struct BigInteger : IComparable, IComparable<System.Numerics.BigInteger>, IEquatable<System.Numerics.BigInteger>, IFormattable'\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.IComparable\n  - System.IComparable{System.Numerics.BigInteger}\n  - System.IEquatable{System.Numerics.BigInteger}\n  - System.IFormattable\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.#ctor(System.Byte[])\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: BigInteger(Byte[])\n  nameWithType: BigInteger.BigInteger(Byte[])\n  fullName: BigInteger.BigInteger(Byte[])\n  type: Constructor\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using the values in a byte array.\n  remarks: \"The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte. For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:  \\n  \\n|||  \\n|-|-|  \\n|Hexadecimal string|E8D4A51000|  \\n|Byte array (lowest index first)|00 10 A5 D4 E8 00|  \\n  \\n Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> and <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName>, return byte arrays in little-endian order.  \\n  \\n The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation. In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative. Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value. Byte arrays are typically generated in the following ways:  \\n  \\n-   By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> method. Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative. Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.  \\n  \\n-   By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it a signed integer as a parameter. Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.  \\n  \\n-   By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it an unsigned integer as a parameter. Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values. To prevent this misinterpretation, you can add a zero-byte value to the end of the array. The example in the next section provides an illustration.  \\n  \\n-   By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array. To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.  \\n  \\n If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>. If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>.\"\n  example:\n  - \"The following example instantiates a <xref:System.Numerics.BigInteger> object from a 5-element byte array whose value is {5, 4, 3, 2, 1}. It then displays the <xref:System.Numerics.BigInteger> value, represented as both decimal and hexadecimal numbers, to the console. A comparison of the input array with the text output makes it clear why this overload of the <xref:System.Numerics.BigInteger> class constructor creates a <xref:System.Numerics.BigInteger> object whose value is 4328719365 (or 0x102030405). The first element of the byte array, whose value is 5, defines the value of the lowest-order byte of the <xref:System.Numerics.BigInteger> object, which is 0x05. The second element of the byte array, whose value is 4, defines the value of the second byte of the <xref:System.Numerics.BigInteger> object, which is 0x04, and so on.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#1)]  \\n  \\n The following example instantiates a positive and a negative <xref:System.Numerics.BigInteger> value, passes them to the <xref:System.Numerics.BigInteger.ToByteArray%2A> method, and then restores the original <xref:System.Numerics.BigInteger> values from the resulting byte array. Note that the two values are represented by identical byte arrays. The only difference between them is in the most significant bit of the last element in the byte array. This bit is set (the value of the byte is 0xFF) if the array is created from a negative <xref:System.Numerics.BigInteger> value. The bit is not set (the value of the byte is zero), if the array is created from a positive <xref:System.Numerics.BigInteger> value.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#2)]\\n [!code-vb[System.Numerics.BigInteger.ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#2)]  \\n  \\n The following example illustrates how to make sure that a positive value is not incorrectly instantiated as a negative value by adding a byte whose value is zero to the end of the array.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#3)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public BigInteger (byte[] value);\n    parameters:\n    - id: value\n      type: System.Byte[]\n      description: An array of byte values in little-endian order.\n  overload: System.Numerics.BigInteger.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.#ctor(System.Decimal)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Decimal)\n  id: '#ctor(System.Decimal)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: BigInteger(Decimal)\n  nameWithType: BigInteger.BigInteger(Decimal)\n  fullName: BigInteger.BigInteger(Decimal)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a <xref href=\"System.Decimal\"></xref> value.\n  remarks: \"The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable.  \\n  \\n Calling this constructor can cause data loss; any fractional part of `value` is truncated when instantiating a <xref:System.Numerics.BigInteger> object.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object. It defines an array of <xref:System.Decimal> values, and then passes each value to the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor. Note that the <xref:System.Decimal> value is truncated instead of rounded when it is assigned to the <xref:System.Numerics.BigInteger> object.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#4)]\\n [!code-vb[System.Numerics.BigInteger.ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#4)]\"\n  syntax:\n    content: public BigInteger (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: A decimal number.\n  overload: System.Numerics.BigInteger.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.#ctor(System.Double)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Double)\n  id: '#ctor(System.Double)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: BigInteger(Double)\n  nameWithType: BigInteger.BigInteger(Double)\n  fullName: BigInteger.BigInteger(Double)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a double-precision floating-point value.\n  remarks: \"Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.  \\n  \\n Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss.  \\n  \\n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object. It also illustrates the loss of precision that may occur when you use the <xref:System.Double> data type. A <xref:System.Double> is assigned a large value, which is then assigned to a <xref:System.Numerics.BigInteger> object. As the output shows, this assignment involves a loss of precision. Both values are then incremented by one. The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Double> object does not.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#5)]\\n [!code-vb[System.Numerics.BigInteger.ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#5)]\"\n  syntax:\n    content: public BigInteger (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: A double-precision floating-point value.\n  overload: System.Numerics.BigInteger.#ctor*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"The value of <code>value</code> is <xref href=\\\"System.Double.NaN\\\"></xref>.  \\n  \\n -or-  \\n  \\n The value of <code>value</code> is <xref href=\\\"System.Double.NegativeInfinity\\\"></xref>.  \\n  \\n -or-  \\n  \\n The value of <code>value</code> is <xref href=\\\"System.Double.PositiveInfinity\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.#ctor(System.Int32)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: BigInteger(Int32)\n  nameWithType: BigInteger.BigInteger(Int32)\n  fullName: BigInteger.BigInteger(Int32)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a 32-bit signed integer value.\n  remarks: \"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.  \\n  \\n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>.  \\n  \\n The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>. However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers. As a result, this constructor is called if `value` is any one of these four integral types.\"\n  example:\n  - \"The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 32-bit integers. It also uses implicit conversion to assign each 32-bit integer value to a <xref:System.Numerics.BigInteger> variable. It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ctors#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#6)]\\n [!code-vb[System.Numerics.BigInteger.ctors#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#6)]\"\n  syntax:\n    content: public BigInteger (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: A 32-bit signed integer.\n  overload: System.Numerics.BigInteger.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.#ctor(System.Int64)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Int64)\n  id: '#ctor(System.Int64)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: BigInteger(Int64)\n  nameWithType: BigInteger.BigInteger(Int64)\n  fullName: BigInteger.BigInteger(Int64)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a 64-bit signed integer value.\n  remarks: \"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.  \\n  \\n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>.\"\n  example:\n  - \"The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 64-bit integers. It also uses implicit conversion to assign each 64-bit integer value to a <xref:System.Numerics.BigInteger> variable. It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ctors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#7)]\\n [!code-vb[System.Numerics.BigInteger.ctors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#7)]\"\n  syntax:\n    content: public BigInteger (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: A 64-bit signed integer.\n  overload: System.Numerics.BigInteger.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.#ctor(System.Single)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.Single)\n  id: '#ctor(System.Single)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: BigInteger(Single)\n  nameWithType: BigInteger.BigInteger(Single)\n  fullName: BigInteger.BigInteger(Single)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using a single-precision floating-point value.\n  remarks: \"Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.  \\n  \\n Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss.  \\n  \\n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>.\"\n  example:\n  - \"The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object. It also illustrates the loss of precision that may occur when you use the <xref:System.Single> data type. A <xref:System.Single> is assigned a large negative value, which is then assigned to a <xref:System.Numerics.BigInteger> object. As the output shows, this assignment involves a loss of precision. Both values are then incremented by one. The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Single> object does not.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ctors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#8)]\\n [!code-vb[System.Numerics.BigInteger.ctors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#8)]\"\n  syntax:\n    content: public BigInteger (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: A single-precision floating-point value.\n  overload: System.Numerics.BigInteger.#ctor*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"The value of <code>value</code> is <xref href=\\\"System.Single.NaN\\\"></xref>.  \\n  \\n -or-  \\n  \\n The value of <code>value</code> is <xref href=\\\"System.Single.NegativeInfinity\\\"></xref>.  \\n  \\n -or-  \\n  \\n The value of <code>value</code> is <xref href=\\\"System.Single.PositiveInfinity\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.#ctor(System.UInt32)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.UInt32)\n  id: '#ctor(System.UInt32)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: BigInteger(UInt32)\n  nameWithType: BigInteger.BigInteger(UInt32)\n  fullName: BigInteger.BigInteger(UInt32)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure using an unsigned 32-bit integer value.\n  remarks: \"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.  \\n  \\n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>.\"\n  example:\n  - \"The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> constructor and an assignment statement to initialize <xref:System.Numerics.BigInteger> values from an array of unsigned 32-bit integers. It then compares the two values to demonstrate that the two methods of initializing a <xref:System.Numerics.BigInteger> value produce identical results.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ctors#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#9)]\\n [!code-vb[System.Numerics.BigInteger.ctors#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#9)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public BigInteger (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: An unsigned 32-bit integer value.\n  overload: System.Numerics.BigInteger.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Numerics.BigInteger.#ctor(System.Int64)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.#ctor(System.UInt64)\n  commentId: M:System.Numerics.BigInteger.#ctor(System.UInt64)\n  id: '#ctor(System.UInt64)'\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: BigInteger(UInt64)\n  nameWithType: BigInteger.BigInteger(UInt64)\n  fullName: BigInteger.BigInteger(UInt64)\n  type: Constructor\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Initializes a new instance of the <xref href=\"System.Numerics.BigInteger\"></xref> structure with an unsigned 64-bit integer value.\n  remarks: \"There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.  \\n  \\n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>.\"\n  example:\n  - \"The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object whose value is equal to <xref:System.UInt64.MaxValue>.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ctors#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#10)]\\n [!code-vb[System.Numerics.BigInteger.ctors#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#10)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public BigInteger (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: An unsigned 64-bit integer.\n  overload: System.Numerics.BigInteger.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Numerics.BigInteger.#ctor(System.Double)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)\n  id: Abs(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Abs(BigInteger)\n  nameWithType: BigInteger.Abs(BigInteger)\n  fullName: BigInteger.Abs(BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Gets the absolute value of a <xref href=\"System.Numerics.BigInteger\"></xref> object.\n  remarks: \"The absolute value of a number is that number without its sign, as shown in the following table.  \\n  \\n|`value` parameter|Return value|  \\n|-----------------------|------------------|  \\n|`value` >= 0|`value`|  \\n|`value` < 0|`value` * -1|  \\n  \\n The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=fullName> method for the primitive numeric types.\"\n  example:\n  - \"The following example uses the <xref:System.Numerics.BigInteger.Abs%2A> method to convert a <xref:System.Numerics.BigInteger> value from two's complement representation to sign-and-magnitude representation before serializing it to a file. Data in the file is then deserialized and assigned to a new <xref:System.Numerics.BigInteger> object.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/cs/Abs1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/vb/Abs1.vb#1)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Abs (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: A number.\n    return:\n      type: System.Numerics.BigInteger\n      description: The absolute value of <code>value</code>.\n  overload: System.Numerics.BigInteger.Abs*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Add(BigInteger, BigInteger)\n  nameWithType: BigInteger.Add(BigInteger, BigInteger)\n  fullName: BigInteger.Add(BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Adds two <xref href=\"System.Numerics.BigInteger\"></xref> values and returns the result.\n  remarks: \"Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values.  \\n  \\n The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]\\n [!code-vb[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Add (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to add.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to add.\n    return:\n      type: System.Numerics.BigInteger\n      description: The sum of <code>left</code> and <code>right</code>.\n  overload: System.Numerics.BigInteger.Add*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Compare(BigInteger, BigInteger)\n  nameWithType: BigInteger.Compare(BigInteger, BigInteger)\n  fullName: BigInteger.Compare(BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Compares two <xref href=\"System.Numerics.BigInteger\"></xref> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.\n  remarks: \"Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers. The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits. The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]\"\n  syntax:\n    content: public static int Compare (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Int32\n      description: \"A signed integer that indicates the relative values of <code>left</code> and <code>right</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>left</code> is less than <code>right</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>left</code> equals <code>right</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>left</code> is greater than <code>right</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Numerics.BigInteger.Compare*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.CompareTo(System.UInt64)\n  commentId: M:System.Numerics.BigInteger.CompareTo(System.UInt64)\n  id: CompareTo(System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: CompareTo(UInt64)\n  nameWithType: BigInteger.CompareTo(UInt64)\n  fullName: BigInteger.CompareTo(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public int CompareTo (ulong other);\n    parameters:\n    - id: other\n      type: System.UInt64\n      description: The unsigned 64-bit integer to compare.\n    return:\n      type: System.Int32\n      description: \"A signed integer that indicates the relative value of this instance and <code>other</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Description  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> The current instance is less than <code>other</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> The current instance equals <code>other</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> The current instance is greater than <code>other</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Numerics.BigInteger.CompareTo*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.CompareTo(System.Object)\n  commentId: M:System.Numerics.BigInteger.CompareTo(System.Object)\n  id: CompareTo(System.Object)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: CompareTo(Object)\n  nameWithType: BigInteger.CompareTo(Object)\n  fullName: BigInteger.CompareTo(Object)\n  type: Method\n  assemblies:\n  - System.Numerics\n  - netstandard\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.\n  remarks: \"This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> method. It is used by non-generic collection objects to order the items in the collection.  \\n  \\n The `obj` parameter must be one of the following:  \\n  \\n-   An object whose run-time type is <xref:System.Numerics.BigInteger>.  \\n  \\n-   An <xref:System.Object> variable whose value is `null`. If the value of the `obj` parameter is `null`, the method returns 1, which indicates that that the current instance is greater than `obj`.\"\n  example:\n  - \"The following example calls the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method to compare a <xref:System.Numerics.BigInteger> value with each element in an object array  \\n  \\n [!code-csharp[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]\\n [!code-vb[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]\"\n  syntax:\n    content: public int CompareTo (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare.\n    return:\n      type: System.Int32\n      description: \"A signed integer that indicates the relationship of the current instance to the <code>obj</code> parameter, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Description  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> The current instance is less than <code>obj</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> The current instance equals <code>obj</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> The current instance is greater than <code>obj</code>, or the <code>obj</code> parameter is `null`.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Numerics.BigInteger.CompareTo*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>obj</code> is not a <xref href=\"System.Numerics.BigInteger\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\n  id: CompareTo(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: CompareTo(BigInteger)\n  nameWithType: BigInteger.CompareTo(BigInteger)\n  fullName: BigInteger.CompareTo(BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Compares this instance to a second <xref href=\"System.Numerics.BigInteger\"></xref> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.\n  remarks: This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> method. It is used by generic collection objects to order the items in the collection.\n  example:\n  - \"The following example illustrates the use of the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> method to order a list of `StarInfo` objects. Each `StarInfo` object provides information about a star's name and its distance from the Earth in miles. `StarInfo` implements the <xref:System.IComparable%601> interface, which enables `StarInfo` objects to be sorted by generic collection classes. Its <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> implementation just wraps a call to <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#1)]  \\n  \\n The following code then instantiates four `StarInfo` objects and stores them in a generic <xref:System.Collections.Generic.List%601> object. After the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName> method is called, `StarInfo` objects are displayed in order of their distance from the Earth.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#2)]\\n [!code-vb[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#2)]\"\n  syntax:\n    content: public int CompareTo (System.Numerics.BigInteger other);\n    parameters:\n    - id: other\n      type: System.Numerics.BigInteger\n      description: The object to compare.\n    return:\n      type: System.Int32\n      description: \"A signed integer value that indicates the relationship of this instance to <code>other</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Description  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> The current instance is less than <code>other</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> The current instance equals <code>other</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> The current instance is greater than <code>other</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Numerics.BigInteger.CompareTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.CompareTo(System.Int64)\n  commentId: M:System.Numerics.BigInteger.CompareTo(System.Int64)\n  id: CompareTo(System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: CompareTo(Int64)\n  nameWithType: BigInteger.CompareTo(Int64)\n  fullName: BigInteger.CompareTo(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.\n  remarks: If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method is called.\n  example:\n  - \"The following example illustrates the result of calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method with integral values.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#3)]\"\n  syntax:\n    content: public int CompareTo (long other);\n    parameters:\n    - id: other\n      type: System.Int64\n      description: The signed 64-bit integer to compare.\n    return:\n      type: System.Int32\n      description: \"A signed integer value that indicates the relationship of this instance to <code>other</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Return value  \\n  \\n </th><th> Description  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td> The current instance is less than <code>other</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td> The current instance equals <code>other</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td> The current instance is greater than <code>other</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Numerics.BigInteger.CompareTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Divide(BigInteger, BigInteger)\n  nameWithType: BigInteger.Divide(BigInteger, BigInteger)\n  fullName: BigInteger.Divide(BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Divides one <xref href=\"System.Numerics.BigInteger\"></xref> value by another and returns the result.\n  remarks: \"The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded. To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method. To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.  \\n  \\n The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading. Its behavior is identical to division using the division operator.\"\n  example:\n  - \"The following example creates an array of <xref:System.Numerics.BigInteger> values. It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Divide (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);\n    parameters:\n    - id: dividend\n      type: System.Numerics.BigInteger\n      description: The value to be divided.\n    - id: divisor\n      type: System.Numerics.BigInteger\n      description: The value to divide by.\n    return:\n      type: System.Numerics.BigInteger\n      description: The quotient of the division.\n  overload: System.Numerics.BigInteger.Divide*\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: <code>divisor</code> is 0 (zero).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  id: DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: DivRem(BigInteger, BigInteger, BigInteger)\n  nameWithType: BigInteger.DivRem(BigInteger, BigInteger, BigInteger)\n  fullName: BigInteger.DivRem(BigInteger, BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Divides one <xref href=\"System.Numerics.BigInteger\"></xref> value by another, returns the result, and returns the remainder in an output parameter.\n  remarks: \"This method preserves both the quotient and the remainder that results from integer division. If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.  \\n  \\n The sign of the returned `remainder` value is the same as the sign of the `dividend` parameter.  \\n  \\n The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following example creates an array of <xref:System.Numerics.BigInteger> values. It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger DivRem (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder);\n    parameters:\n    - id: dividend\n      type: System.Numerics.BigInteger\n      description: The value to be divided.\n    - id: divisor\n      type: System.Numerics.BigInteger\n      description: The value to divide by.\n    - id: remainder\n      type: System.Numerics.BigInteger\n      description: When this method returns, contains a <xref href=\"System.Numerics.BigInteger\"></xref> value that represents the remainder from the division. This parameter is passed uninitialized.\n    return:\n      type: System.Numerics.BigInteger\n      description: The quotient of the division.\n  overload: System.Numerics.BigInteger.DivRem*\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: <code>divisor</code> is 0 (zero).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Equals(System.Int64)\n  commentId: M:System.Numerics.BigInteger.Equals(System.Int64)\n  id: Equals(System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Equals(Int64)\n  nameWithType: BigInteger.Equals(Int64)\n  fullName: BigInteger.Equals(Int64)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.\n  remarks: \"If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the method is called.  \\n  \\n To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method.\"\n  example:\n  - \"The following example instantiates a <xref:System.Numerics.BigInteger> object from each integral type except <xref:System.UInt64>. It then calls the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> method to compare the <xref:System.Numerics.BigInteger> value with the original integer value that was passed to the <xref:System.Numerics.BigInteger> constructor. As the output shows, the values are equal in each case.  \\n  \\n [!code-cpp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals.cpp#1)]\\n [!code-csharp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#1)]\"\n  syntax:\n    content: public bool Equals (long other);\n    parameters:\n    - id: other\n      type: System.Int64\n      description: The signed 64-bit integer value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the signed 64-bit integer and the current instance have the same value; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\n  id: Equals(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Equals(BigInteger)\n  nameWithType: BigInteger.Equals(BigInteger)\n  fullName: BigInteger.Equals(BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether the current instance and a specified <xref href=\"System.Numerics.BigInteger\"></xref> object have the same value.\n  remarks: \"This method implements the <xref:System.IEquatable%601> interface and performs slightly better than <xref:System.Numerics.BigInteger.Equals%28System.Object%29> because it does not have to convert the `other` parameter to a <xref:System.Numerics.BigInteger> object.  \\n  \\n To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=fullName> method.\"\n  example:\n  - \"The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal. The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.  \\n  \\n [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]\\n [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]\\n [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]\"\n  syntax:\n    content: public bool Equals (System.Numerics.BigInteger other);\n    parameters:\n    - id: other\n      type: System.Numerics.BigInteger\n      description: The object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if this <xref href=\"System.Numerics.BigInteger\"></xref> object and <code>other</code> have the same value; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Equals(System.Object)\n  commentId: M:System.Numerics.BigInteger.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: BigInteger.Equals(Object)\n  fullName: BigInteger.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether the current instance and a specified object have the same value.\n  remarks: \"If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`. The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.  \\n  \\n To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method.\"\n  example:\n  - \"The following example defines parallel <xref:System.Object> and <xref:System.Numerics.BigInteger> arrays. Each element of one array has the same value as the corresponding element of the second array. As the output from the example shows, the instance in the <xref:System.Numerics.BigInteger> array is considered to be equal to the instance in the <xref:System.Object> array only if the latter is a <xref:System.Numerics.BigInteger> and their values are equal.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/Equals_Obj1.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/Equals_Obj1.vb#3)]\"\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>obj</code> argument is a <xref href=\"System.Numerics.BigInteger\"></xref> object, and its value is equal to the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> instance; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Equals(System.UInt64)\n  commentId: M:System.Numerics.BigInteger.Equals(System.UInt64)\n  id: Equals(System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Equals(UInt64)\n  nameWithType: BigInteger.Equals(UInt64)\n  fullName: BigInteger.Equals(UInt64)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.\n  remarks: To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method.\n  example:\n  - \"The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal. The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.  \\n  \\n [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]\\n [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]\\n [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public bool Equals (ulong other);\n    parameters:\n    - id: other\n      type: System.UInt64\n      description: The unsigned 64-bit integer to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the current instance and the unsigned 64-bit integer have the same value; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.Equals*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.GetHashCode\n  commentId: M:System.Numerics.BigInteger.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: BigInteger.GetHashCode()\n  fullName: BigInteger.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Returns the hash code for the current <xref href=\"System.Numerics.BigInteger\"></xref> object.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Numerics.BigInteger.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: GreatestCommonDivisor(BigInteger, BigInteger)\n  nameWithType: BigInteger.GreatestCommonDivisor(BigInteger, BigInteger)\n  fullName: BigInteger.GreatestCommonDivisor(BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Finds the greatest common divisor of two <xref href=\"System.Numerics.BigInteger\"></xref> values.\n  remarks: \"The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder.  \\n  \\n If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1. If either parameter is zero, the method returns the absolute value of the non-zero parameter. If both values are zero, the method returns zero.  \\n  \\n> [!NOTE]\\n>  Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation.  \\n  \\n The value returned by the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method is always positive regardless of the sign of the `left` and `right` parameters.\"\n  example:\n  - \"The following example illustrates a call to the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method and the exception handling necessary to provide useful information about an <xref:System.ArgumentOutOfRangeException>. The result indicates that the greatest common divisor of these two numbers is 1.  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#10)]\\n [!code-vb[System.Numeric.BigInteger.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#10)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger GreatestCommonDivisor (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value.\n    return:\n      type: System.Numerics.BigInteger\n      description: The greatest common divisor of <code>left</code> and <code>right</code>.\n  overload: System.Numerics.BigInteger.GreatestCommonDivisor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.IsEven\n  commentId: P:System.Numerics.BigInteger.IsEven\n  id: IsEven\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: IsEven\n  nameWithType: BigInteger.IsEven\n  fullName: BigInteger.IsEven\n  type: Property\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is an even number.\n  remarks: \"This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two. It is equivalent to the following expression:  \\n  \\n```csharp  \\nvalue % 2 == 0;  \\n```  \\n  \\n```vb  \\nvalue Mod 2 = 0  \\n```  \\n  \\n If the value of the current <xref:System.Numerics.BigInteger> object is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>, the property returns `true`.\"\n  syntax:\n    content: public bool IsEven { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is an even number; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.IsEven*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.IsOne\n  commentId: P:System.Numerics.BigInteger.IsOne\n  id: IsOne\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: IsOne\n  nameWithType: BigInteger.IsOne\n  fullName: BigInteger.IsOne\n  type: Property\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.One\"></xref>.\n  remarks: This property offers significantly better performance than other comparisons with one, such as `thisBigInteger.Equals(BigInteger.One)`.\n  syntax:\n    content: public bool IsOne { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.One\"></xref>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.IsOne*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.IsPowerOfTwo\n  commentId: P:System.Numerics.BigInteger.IsPowerOfTwo\n  id: IsPowerOfTwo\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: IsPowerOfTwo\n  nameWithType: BigInteger.IsPowerOfTwo\n  fullName: BigInteger.IsPowerOfTwo\n  type: Property\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is a power of two.\n  remarks: This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set. This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two. It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0.\n  syntax:\n    content: public bool IsPowerOfTwo { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is a power of two; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.IsPowerOfTwo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.IsZero\n  commentId: P:System.Numerics.BigInteger.IsZero\n  id: IsZero\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: IsZero\n  nameWithType: BigInteger.IsZero\n  fullName: BigInteger.IsZero\n  type: Property\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Indicates whether the value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.Zero\"></xref>.\n  remarks: This property offers significantly better performance than `BigInteger.Equals(BigInteger.Zero)`.\n  syntax:\n    content: public bool IsZero { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the value of the <xref href=\"System.Numerics.BigInteger\"></xref> object is <xref href=\"System.Numerics.BigInteger.Zero\"></xref>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.IsZero*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\n  id: Log(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Log(BigInteger)\n  nameWithType: BigInteger.Log(BigInteger)\n  fullName: BigInteger.Log(BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns the natural (base `e`) logarithm of a specified number.\n  remarks: \"The `value` parameter is specified as a base 10 number.  \\n  \\n The precise return value of this method depends on the sign of `value`, as the following table shows.  \\n  \\n|Sign of `value` parameter|Return value|  \\n|-------------------------------|------------------|  \\n|Positive|The natural logarithm of `value`; that is, ln `value`, or log e`value`.|  \\n|Zero|<xref:System.Double.NegativeInfinity>.|  \\n|Negative|<xref:System.Double.NaN>.|  \\n  \\n To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method. To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.  \\n  \\n You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=fullName> method. Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=fullName> if the result is greater than <xref:System.Double.MaxValue?displayProperty=fullName>. The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)] \\n [!code-vb[System.Numerics.BigInteger.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]   \\n  \\n This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=fullName> method for the primitive numeric types.\"\n  syntax:\n    content: public static double Log (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: The number whose logarithm is to be found.\n    return:\n      type: System.Double\n      description: The natural (base `e`) logarithm of <code>value</code>, as shown in the table in the Remarks section.\n  overload: System.Numerics.BigInteger.Log*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The natural log of <code>value</code> is out of range of the <xref href=\"System.Double\"></xref> data type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)\n  commentId: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)\n  id: Log(System.Numerics.BigInteger,System.Double)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Log(BigInteger, Double)\n  nameWithType: BigInteger.Log(BigInteger, Double)\n  fullName: BigInteger.Log(BigInteger, Double)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns the logarithm of a specified number in a specified base.\n  remarks: \"The `value` and `baseValue` parameters are specified as base 10 numbers.  \\n  \\n The precise return value of the method depends on the sign of `value` and on the sign and value of `baseValue`, as the following table shows.  \\n  \\n|`value` parameter|`baseValue` parameter|Return value|  \\n|-----------------------|---------------------------|------------------|  \\n|`value` > 0|(0 < `baseValue` < 1) -or-(`baseValue` > 1)|logbaseValue(`value`)|  \\n|`value` < 0|(any value)|<xref:System.Double?displayProperty=fullName>|  \\n|(any value)|`baseValue` < 0|<xref:System.Double?displayProperty=fullName>|  \\n|`value` != 1|`baseValue` = 0|<xref:System.Double?displayProperty=fullName>|  \\n|`value` != 1|`baseValue` = <xref:System.Double?displayProperty=fullName>|<xref:System.Double?displayProperty=fullName>|  \\n|(any value)|`baseValue` = <xref:System.Double?displayProperty=fullName>|<xref:System.Double?displayProperty=fullName>|  \\n|(any value)|`baseValue` = 1|<xref:System.Double?displayProperty=fullName>|  \\n|`value` = 0|0 < `baseValue` < 1|<xref:System.Double?displayProperty=fullName>|  \\n|`value` = 0|`baseValue` > 1|<xref:System.Double.PositiveInfinity?displayProperty=fullName>|  \\n|`value` = 1|`baseValue` = 0|0|  \\n|`value` = 1|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=fullName>|0|  \\n  \\n To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method. To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.  \\n  \\n This method corresponds to the <xref:System.Math.Log%2A?displayProperty=fullName> method for the primitive numeric types.\"\n  syntax:\n    content: public static double Log (System.Numerics.BigInteger value, double baseValue);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: A number whose logarithm is to be found.\n    - id: baseValue\n      type: System.Double\n      description: The base of the logarithm.\n    return:\n      type: System.Double\n      description: The base <code>baseValue</code> logarithm of <code>value</code>, as shown in the table in the Remarks section.\n  overload: System.Numerics.BigInteger.Log*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The log of <code>value</code> is out of range of the <xref href=\"System.Double\"></xref> data type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n  id: Log10(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Log10(BigInteger)\n  nameWithType: BigInteger.Log10(BigInteger)\n  fullName: BigInteger.Log10(BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns the base 10 logarithm of a specified number.\n  remarks: \"The `value` parameter is specified as a base 10 number.  \\n  \\n The precise return value of the method depends on the sign of `value`, as the following table shows.  \\n  \\n|Sign of value parameter|Return value|  \\n|-----------------------------|------------------|  \\n|Positive|The base 10 log of `value`; that is, log10`value`.|  \\n|Zero|<xref:System.Double?displayProperty=fullName>.|  \\n|Negative|<xref:System.Double?displayProperty=fullName>.|  \\n  \\n To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=fullName> method. To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=fullName> method.  \\n  \\n This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=fullName> method for the primitive numeric types.\"\n  syntax:\n    content: public static double Log10 (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: A number whose logarithm is to be found.\n    return:\n      type: System.Double\n      description: The base 10 logarithm of <code>value</code>, as shown in the table in the Remarks section.\n  overload: System.Numerics.BigInteger.Log10*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The base 10 log of <code>value</code> is out of range of the <xref href=\"System.Double\"></xref> data type.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Max(BigInteger, BigInteger)\n  nameWithType: BigInteger.Max(BigInteger, BigInteger)\n  fullName: BigInteger.Max(BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns the larger of two <xref href=\"System.Numerics.BigInteger\"></xref> values.\n  remarks: This method corresponds to the <xref:System.Math.Max%2A?displayProperty=fullName> method for primitive numeric types.\n  example:\n  - \"The following example uses the <xref:System.Numerics.BigInteger.Max%2A> method to select the largest number in an array of <xref:System.Numerics.BigInteger> values.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/cs/Max1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/vb/Max1.vb#1)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Max (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Numerics.BigInteger\n      description: The <code>left</code> or <code>right</code> parameter, whichever is larger.\n  overload: System.Numerics.BigInteger.Max*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Min(BigInteger, BigInteger)\n  nameWithType: BigInteger.Min(BigInteger, BigInteger)\n  fullName: BigInteger.Min(BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns the smaller of two <xref href=\"System.Numerics.BigInteger\"></xref> values.\n  remarks: This method corresponds to the <xref:System.Math.Min%2A?displayProperty=fullName> method for primitive numeric types.\n  example:\n  - \"The following example uses the <xref:System.Numerics.BigInteger.Min%2A> method to select the smallest number in an array of <xref:System.Numerics.BigInteger> values.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/cs/Min1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/vb/Min1.vb#1)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Min (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Numerics.BigInteger\n      description: The <code>left</code> or <code>right</code> parameter, whichever is smaller.\n  overload: System.Numerics.BigInteger.Min*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.MinusOne\n  commentId: P:System.Numerics.BigInteger.MinusOne\n  id: MinusOne\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: MinusOne\n  nameWithType: BigInteger.MinusOne\n  fullName: BigInteger.MinusOne\n  type: Property\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Gets a value that represents the number negative one (-1).\n  remarks: The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object.\n  syntax:\n    content: public static System.Numerics.BigInteger MinusOne { get; }\n    return:\n      type: System.Numerics.BigInteger\n      description: An integer whose value is negative one (-1).\n  overload: System.Numerics.BigInteger.MinusOne*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: ModPow(BigInteger, BigInteger, BigInteger)\n  nameWithType: BigInteger.ModPow(BigInteger, BigInteger, BigInteger)\n  fullName: BigInteger.ModPow(BigInteger, BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Performs modulus division on a number raised to the power of another number.\n  remarks: \"The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:  \\n  \\n (baseValue ^ exponent) Mod modulus  \\n  \\n To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method.\"\n  example:\n  - \"The following example provides a simple illustration of calling the <xref:System.Numerics.BigInteger.ModPow%2A> method.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/cs/ModPow1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/vb/ModPow1.vb#1)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger ModPow (System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: The number to raise to the <code>exponent</code> power.\n    - id: exponent\n      type: System.Numerics.BigInteger\n      description: The exponent to raise <code>value</code> by.\n    - id: modulus\n      type: System.Numerics.BigInteger\n      description: The number by which to divide <code>value</code> raised to the <code>exponent</code> power.\n    return:\n      type: System.Numerics.BigInteger\n      description: The remainder after dividing <code>value</code><sup>exponent</sup> by <code>modulus</code>.\n  overload: System.Numerics.BigInteger.ModPow*\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: <code>modulus</code> is zero.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>exponent</code> is negative.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Multiply(BigInteger, BigInteger)\n  nameWithType: BigInteger.Multiply(BigInteger, BigInteger)\n  fullName: BigInteger.Multiply(BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns the product of two <xref href=\"System.Numerics.BigInteger\"></xref> values.\n  remarks: \"The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading. Its behavior is identical to multiplication using the multiplication operator. In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]  \\n  \\n If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects. This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values.\"\n  example:\n  - \"The following example tries to perform multiplication with two long integers. Because the result exceeds the range of a long integer, an <xref:System.OverflowException> is thrown, and the <xref:System.Numerics.BigInteger.Multiply%2A> method is called to handle the multiplication. Note that C# requires that you use either the `checked` keyword (as in this example) or the `/checked+` compiler option to make sure an exception is thrown on a numeric overflow.  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#7)]\\n [!code-vb[System.Numeric.BigInteger.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#7)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first number to multiply.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second number to multiply.\n    return:\n      type: System.Numerics.BigInteger\n      description: The product of the <code>left</code> and <code>right</code> parameters.\n  overload: System.Numerics.BigInteger.Multiply*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\n  id: Negate(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Negate(BigInteger)\n  nameWithType: BigInteger.Negate(BigInteger)\n  fullName: BigInteger.Negate(BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Negates a specified <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"Negation obtains the additive inverse of a number. The additive inverse of a number is a number that produces a value of zero when it is added to the original number.  \\n  \\n The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to negation using the unary negation operator. In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]\\n [!code-vb[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]\"\n  example:\n  - \"The following example illustrates three ways to negate the value of a <xref:System.Numerics.BigInteger> object.  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]\\n [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Negate (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: The value to negate.\n    return:\n      type: System.Numerics.BigInteger\n      description: The result of the <code>value</code> parameter multiplied by negative one (-1).\n  overload: System.Numerics.BigInteger.Negate*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.One\n  commentId: P:System.Numerics.BigInteger.One\n  id: One\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: One\n  nameWithType: BigInteger.One\n  fullName: BigInteger.One\n  type: Property\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Gets a value that represents the number one (1).\n  remarks: The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object.\n  syntax:\n    content: public static System.Numerics.BigInteger One { get; }\n    return:\n      type: System.Numerics.BigInteger\n      description: An object whose value is one (1).\n  overload: System.Numerics.BigInteger.One*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Addition(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Addition(BigInteger, BigInteger)\n  fullName: BigInteger.op_Addition(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Adds the values of two specified <xref href=\"System.Numerics.BigInteger\"></xref> objects.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]\\n [!code-vb[System.Numeric.BigInteger.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead.\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_Addition (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to add.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to add.\n    return:\n      type: System.Numerics.BigInteger\n      description: The sum of <code>left</code> and <code>right</code>.\n  overload: System.Numerics.BigInteger.op_Addition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_BitwiseAnd(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_BitwiseAnd(BigInteger, BigInteger)\n  fullName: BigInteger.op_BitwiseAnd(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Performs a bitwise `And` operation on two <xref href=\"System.Numerics.BigInteger\"></xref> values.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values. The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table.  \\n  \\n|Bit in `left`|Bit in `right`|Bit in result|  \\n|-------------------|--------------------|-------------------|  \\n|0|0|0|  \\n|1|0|0|  \\n|1|1|1|  \\n|0|1|0|  \\n  \\n The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]  \\n  \\n The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method performs the bitwise `And` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_BitwiseAnd (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value.\n    return:\n      type: System.Numerics.BigInteger\n      description: The result of the bitwise `And` operation.\n  overload: System.Numerics.BigInteger.op_BitwiseAnd*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_BitwiseOr(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_BitwiseOr(BigInteger, BigInteger)\n  fullName: BigInteger.op_BitwiseOr(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Performs a bitwise `Or` operation on two <xref href=\"System.Numerics.BigInteger\"></xref> values.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values. The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table.  \\n  \\n|Bit in `left`|Bit in `right`|Bit in result|  \\n|-------------------|--------------------|-------------------|  \\n|0|0|0|  \\n|1|0|1|  \\n|1|1|1|  \\n|0|1|1|  \\n  \\n The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]\\n [!code-vb[System.Numerics.BigInteger.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]  \\n  \\n The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method performs the bitwise `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_BitwiseOr (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value.\n    return:\n      type: System.Numerics.BigInteger\n      description: The result of the bitwise `Or` operation.\n  overload: System.Numerics.BigInteger.op_BitwiseOr*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\n  id: op_Decrement(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Decrement(BigInteger)\n  nameWithType: BigInteger.op_Decrement(BigInteger)\n  fullName: BigInteger.op_Decrement(BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Decrements a <xref href=\"System.Numerics.BigInteger\"></xref> value by 1.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead. For example:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]  \\n  \\n Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`. This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_Decrement (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: The value to decrement.\n    return:\n      type: System.Numerics.BigInteger\n      description: The value of the <code>value</code> parameter decremented by 1.\n  overload: System.Numerics.BigInteger.op_Decrement*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Division(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Division(BigInteger, BigInteger)\n  fullName: BigInteger.op_Division(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Divides a specified <xref href=\"System.Numerics.BigInteger\"></xref> value by another specified <xref href=\"System.Numerics.BigInteger\"></xref> value by using integer division.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]\\n [!code-vb[System.Numeric.BigInteger.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]  \\n  \\n Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>\"\n  example:\n  - \"The following example creates an array of <xref:System.Numerics.BigInteger> values. It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_Division (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);\n    parameters:\n    - id: dividend\n      type: System.Numerics.BigInteger\n      description: The value to be divided.\n    - id: divisor\n      type: System.Numerics.BigInteger\n      description: The value to divide by.\n    return:\n      type: System.Numerics.BigInteger\n      description: The integral result of the division.\n  overload: System.Numerics.BigInteger.op_Division*\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: <code>divisor</code> is 0 (zero).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  id: op_Equality(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Equality(Int64, BigInteger)\n  nameWithType: BigInteger.op_Equality(Int64, BigInteger)\n  fullName: BigInteger.op_Equality(Int64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a signed long integer value and a <xref href=\"System.Numerics.BigInteger\"></xref> value are equal.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]\\n [!code-vb[System.Numerics.BigInteger.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method instead.  \\n  \\n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_Equality (long left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Int64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_Equality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)\n  id: op_Equality(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Equality(BigInteger, Int64)\n  nameWithType: BigInteger.op_Equality(BigInteger, Int64)\n  fullName: BigInteger.op_Equality(BigInteger, Int64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and a signed long integer value are equal.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]\\n [!code-vb[System.Numerics.BigInteger.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method instead.  \\n  \\n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_Equality (System.Numerics.BigInteger left, long right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Int64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_Equality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Equality(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Equality(BigInteger, BigInteger)\n  fullName: BigInteger.op_Equality(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether the values of two <xref href=\"System.Numerics.BigInteger\"></xref> objects are equal.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]\\n [!code-vb[System.Numeric.BigInteger.Class#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> instance method instead.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_Equality (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_Equality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)\n  id: op_Equality(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Equality(BigInteger, UInt64)\n  nameWithType: BigInteger.op_Equality(BigInteger, UInt64)\n  fullName: BigInteger.op_Equality(BigInteger, UInt64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and an unsigned long integer value are equal.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]\\n [!code-vb[System.Numerics.BigInteger.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> instance method instead.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_Equality (System.Numerics.BigInteger left, ulong right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.UInt64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_Equality*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)\n  id: op_Equality(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Equality(UInt64, BigInteger)\n  nameWithType: BigInteger.op_Equality(UInt64, BigInteger)\n  fullName: BigInteger.op_Equality(UInt64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether an unsigned long integer value and a <xref href=\"System.Numerics.BigInteger\"></xref> value are equal.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]\\n [!code-vb[System.Numerics.BigInteger.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> instance method instead.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_Equality (ulong left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_Equality*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_ExclusiveOr(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_ExclusiveOr(BigInteger, BigInteger)\n  fullName: BigInteger.op_ExclusiveOr(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Performs a bitwise exclusive `Or` (`XOr`) operation on two <xref href=\"System.Numerics.BigInteger\"></xref> values.\n  remarks: \"The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`. The following table illustrates the exclusive `Or` operation.  \\n  \\n|Bit x in `left`|Bit x in `right`|Return value|  \\n|---------------------|----------------------|------------------|  \\n|0|0|0|  \\n|0|1|1|  \\n|1|0|1|  \\n|1|1|0|  \\n  \\n The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]\\n [!code-vb[System.Numerics.BigInteger.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]  \\n  \\n The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method performs the bitwise exclusive `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension.\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_ExclusiveOr (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value.\n    return:\n      type: System.Numerics.BigInteger\n      description: The result of the bitwise `Or` operation.\n  overload: System.Numerics.BigInteger.op_ExclusiveOr*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Explicit(System.Single to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger\n  id: op_Explicit(System.Single to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(Single to BigInteger)\n  nameWithType: BigInteger.op_Explicit(Single to BigInteger)\n  fullName: BigInteger.op_Explicit(Single to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static System.Numerics.BigInteger op_Explicit (float value);\n    parameters:\n    - id: value\n      type: System.Single\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt32)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32\n  id: op_Explicit(System.Numerics.BigInteger to System.UInt32)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to UInt32)\n  nameWithType: BigInteger.op_Explicit(BigInteger to UInt32)\n  fullName: BigInteger.op_Explicit(BigInteger to UInt32)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static uint op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.UInt32\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt16)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16\n  id: op_Explicit(System.Numerics.BigInteger to System.UInt16)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to UInt16)\n  nameWithType: BigInteger.op_Explicit(BigInteger to UInt16)\n  fullName: BigInteger.op_Explicit(BigInteger to UInt16)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ushort op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.UInt16\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Single)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single\n  id: op_Explicit(System.Numerics.BigInteger to System.Single)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to Single)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Single)\n  fullName: BigInteger.op_Explicit(BigInteger to Single)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static float op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.Single\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.SByte)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte\n  id: op_Explicit(System.Numerics.BigInteger to System.SByte)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to SByte)\n  nameWithType: BigInteger.op_Explicit(BigInteger to SByte)\n  fullName: BigInteger.op_Explicit(BigInteger to SByte)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static sbyte op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.SByte\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64\n  id: op_Explicit(System.Numerics.BigInteger to System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to Int64)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Int64)\n  fullName: BigInteger.op_Explicit(BigInteger to Int64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  syntax:\n    content: public static long op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.Int64\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64\n  id: op_Explicit(System.Numerics.BigInteger to System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to UInt64)\n  nameWithType: BigInteger.op_Explicit(BigInteger to UInt64)\n  fullName: BigInteger.op_Explicit(BigInteger to UInt64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static ulong op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.UInt64\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int16)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16\n  id: op_Explicit(System.Numerics.BigInteger to System.Int16)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to Int16)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Int16)\n  fullName: BigInteger.op_Explicit(BigInteger to Int16)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static short op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.Int16\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Double)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double\n  id: op_Explicit(System.Numerics.BigInteger to System.Double)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to Double)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Double)\n  fullName: BigInteger.op_Explicit(BigInteger to Double)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  syntax:\n    content: public static double op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.Double\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Decimal)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal\n  id: op_Explicit(System.Numerics.BigInteger to System.Decimal)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to Decimal)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Decimal)\n  fullName: BigInteger.op_Explicit(BigInteger to Decimal)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static decimal op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.Decimal\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Byte)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte\n  id: op_Explicit(System.Numerics.BigInteger to System.Byte)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to Byte)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Byte)\n  fullName: BigInteger.op_Explicit(BigInteger to Byte)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static byte op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.Byte\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Double to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger\n  id: op_Explicit(System.Double to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(Double to BigInteger)\n  nameWithType: BigInteger.op_Explicit(Double to BigInteger)\n  fullName: BigInteger.op_Explicit(Double to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static System.Numerics.BigInteger op_Explicit (double value);\n    parameters:\n    - id: value\n      type: System.Double\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int32)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32\n  id: op_Explicit(System.Numerics.BigInteger to System.Int32)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(BigInteger to Int32)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Int32)\n  fullName: BigInteger.op_Explicit(BigInteger to Int32)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  syntax:\n    content: public static int op_Explicit (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit(System.Decimal to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger\n  id: op_Explicit(System.Decimal to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Explicit(Decimal to BigInteger)\n  nameWithType: BigInteger.op_Explicit(Decimal to BigInteger)\n  fullName: BigInteger.op_Explicit(Decimal to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static System.Numerics.BigInteger op_Explicit (decimal value);\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  id: op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_GreaterThan(Int64, BigInteger)\n  nameWithType: BigInteger.op_GreaterThan(Int64, BigInteger)\n  fullName: BigInteger.op_GreaterThan(Int64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a 64-bit signed integer is greater than a <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]\\n [!code-vb[System.Numerics.BigInteger.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]  \\n  \\n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_GreaterThan (long left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Int64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_GreaterThan*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)\n  id: op_GreaterThan(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_GreaterThan(BigInteger, Int64)\n  nameWithType: BigInteger.op_GreaterThan(BigInteger, Int64)\n  fullName: BigInteger.op_GreaterThan(BigInteger, Int64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> is greater than a 64-bit signed integer value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]\\n [!code-vb[System.Numerics.BigInteger.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]  \\n  \\n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_GreaterThan (System.Numerics.BigInteger left, long right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Int64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_GreaterThan*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_GreaterThan(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_GreaterThan(BigInteger, BigInteger)\n  fullName: BigInteger.op_GreaterThan(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than another <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]\\n [!code-vb[System.Numeric.BigInteger.Class#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numeric.BigInteger.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False\"\n  syntax:\n    content: public static bool op_GreaterThan (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_GreaterThan*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)\n  id: op_GreaterThan(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_GreaterThan(BigInteger, UInt64)\n  nameWithType: BigInteger.op_GreaterThan(BigInteger, UInt64)\n  fullName: BigInteger.op_GreaterThan(BigInteger, UInt64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than a 64-bit unsigned integer.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]\\n [!code-vb[System.Numerics.BigInteger.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_GreaterThan (System.Numerics.BigInteger left, ulong right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.UInt64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_GreaterThan*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\n  id: op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_GreaterThan(UInt64, BigInteger)\n  nameWithType: BigInteger.op_GreaterThan(UInt64, BigInteger)\n  fullName: BigInteger.op_GreaterThan(UInt64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than a 64-bit unsigned integer.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]\\n [!code-vb[System.Numerics.BigInteger.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_GreaterThan (ulong left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_GreaterThan*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_GreaterThanOrEqual(BigInteger, UInt64)\n  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, UInt64)\n  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, UInt64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than or equal to a 64-bit unsigned integer value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]\\n [!code-vb[System.Numerics.BigInteger.Operators#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, ulong right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.UInt64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_GreaterThanOrEqual*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_GreaterThanOrEqual(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, BigInteger)\n  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than or equal to another <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]\\n [!code-vb[System.Numeric.BigInteger.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numeric.BigInteger.Class#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False\"\n  syntax:\n    content: public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_GreaterThanOrEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  id: op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_GreaterThanOrEqual(UInt64, BigInteger)\n  nameWithType: BigInteger.op_GreaterThanOrEqual(UInt64, BigInteger)\n  fullName: BigInteger.op_GreaterThanOrEqual(UInt64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]\\n [!code-vb[System.Numerics.BigInteger.Operators#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_GreaterThanOrEqual (ulong left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_GreaterThanOrEqual*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  id: op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_GreaterThanOrEqual(Int64, BigInteger)\n  nameWithType: BigInteger.op_GreaterThanOrEqual(Int64, BigInteger)\n  fullName: BigInteger.op_GreaterThanOrEqual(Int64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]\\n [!code-vb[System.Numerics.BigInteger.Operators#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]  \\n  \\n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_GreaterThanOrEqual (long left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Int64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_GreaterThanOrEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_GreaterThanOrEqual(BigInteger, Int64)\n  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, Int64)\n  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, Int64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is greater than or equal to a 64-bit signed integer value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]\\n [!code-vb[System.Numerics.BigInteger.Operators#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]  \\n  \\n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, long right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Int64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_GreaterThanOrEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Implicit(System.UInt32 to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger\n  id: op_Implicit(System.UInt32 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Implicit(UInt32 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(UInt32 to BigInteger)\n  fullName: BigInteger.op_Implicit(UInt32 to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static System.Numerics.BigInteger op_Implicit (uint value);\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Implicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Implicit(System.UInt16 to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger\n  id: op_Implicit(System.UInt16 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Implicit(UInt16 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(UInt16 to BigInteger)\n  fullName: BigInteger.op_Implicit(UInt16 to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static System.Numerics.BigInteger op_Implicit (ushort value);\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Implicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Implicit(System.SByte to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger\n  id: op_Implicit(System.SByte to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Implicit(SByte to BigInteger)\n  nameWithType: BigInteger.op_Implicit(SByte to BigInteger)\n  fullName: BigInteger.op_Implicit(SByte to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static System.Numerics.BigInteger op_Implicit (sbyte value);\n    parameters:\n    - id: value\n      type: System.SByte\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Implicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Implicit(System.UInt64 to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger\n  id: op_Implicit(System.UInt64 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Implicit(UInt64 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(UInt64 to BigInteger)\n  fullName: BigInteger.op_Implicit(UInt64 to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static System.Numerics.BigInteger op_Implicit (ulong value);\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Implicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Implicit(System.Int32 to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger\n  id: op_Implicit(System.Int32 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Implicit(Int32 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(Int32 to BigInteger)\n  fullName: BigInteger.op_Implicit(Int32 to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static System.Numerics.BigInteger op_Implicit (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Implicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Implicit(System.Int16 to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger\n  id: op_Implicit(System.Int16 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Implicit(Int16 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(Int16 to BigInteger)\n  fullName: BigInteger.op_Implicit(Int16 to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static System.Numerics.BigInteger op_Implicit (short value);\n    parameters:\n    - id: value\n      type: System.Int16\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Implicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Implicit(System.Byte to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger\n  id: op_Implicit(System.Byte to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Implicit(Byte to BigInteger)\n  nameWithType: BigInteger.op_Implicit(Byte to BigInteger)\n  fullName: BigInteger.op_Implicit(Byte to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static System.Numerics.BigInteger op_Implicit (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Implicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Implicit(System.Int64 to System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger\n  id: op_Implicit(System.Int64 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Implicit(Int64 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(Int64 to BigInteger)\n  fullName: BigInteger.op_Implicit(Int64 to BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  syntax:\n    content: public static System.Numerics.BigInteger op_Implicit (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: ''\n    return:\n      type: System.Numerics.BigInteger\n      description: ''\n  overload: System.Numerics.BigInteger.op_Implicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\n  id: op_Increment(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Increment(BigInteger)\n  nameWithType: BigInteger.op_Increment(BigInteger)\n  fullName: BigInteger.op_Increment(BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Increments a <xref href=\"System.Numerics.BigInteger\"></xref> value by 1.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]  \\n  \\n Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numeric.BigInteger.Class#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]  \\n  \\n Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`. Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_Increment (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: The value to increment.\n    return:\n      type: System.Numerics.BigInteger\n      description: The value of the <code>value</code> parameter incremented by 1.\n  overload: System.Numerics.BigInteger.op_Increment*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  id: op_Inequality(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Inequality(Int64, BigInteger)\n  nameWithType: BigInteger.op_Inequality(Int64, BigInteger)\n  fullName: BigInteger.op_Inequality(Int64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a 64-bit signed integer and a <xref href=\"System.Numerics.BigInteger\"></xref> value are not equal.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]\\n [!code-vb[System.Numerics.BigInteger.Operators#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]  \\n  \\n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \\n  \\n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.  \\n  \\n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method and reversing its value.  \\n  \\n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.\"\n  syntax:\n    content: public static bool op_Inequality (long left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Int64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)\n  id: op_Inequality(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Inequality(BigInteger, Int64)\n  nameWithType: BigInteger.op_Inequality(BigInteger, Int64)\n  fullName: BigInteger.op_Inequality(BigInteger, Int64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and a 64-bit signed integer are not equal.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]\\n [!code-vb[System.Numerics.BigInteger.Operators#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]  \\n  \\n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \\n  \\n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.  \\n  \\n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> method and reversing its value.  \\n  \\n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_Inequality (System.Numerics.BigInteger left, long right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Int64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Inequality(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Inequality(BigInteger, BigInteger)\n  fullName: BigInteger.op_Inequality(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether two <xref href=\"System.Numerics.BigInteger\"></xref> objects have different values.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]\\n [!code-vb[System.Numeric.BigInteger.Class#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]  \\n  \\n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \\n  \\n-   Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects.  \\n  \\n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> method and reversing its value.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_Inequality (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)\n  id: op_Inequality(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Inequality(BigInteger, UInt64)\n  nameWithType: BigInteger.op_Inequality(BigInteger, UInt64)\n  fullName: BigInteger.op_Inequality(BigInteger, UInt64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value and a 64-bit unsigned integer are not equal.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]\\n [!code-vb[System.Numerics.BigInteger.Operators#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]  \\n  \\n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \\n  \\n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.  \\n  \\n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> method and reversing its value.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_Inequality (System.Numerics.BigInteger left, ulong right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.UInt64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_Inequality*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)\n  id: op_Inequality(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Inequality(UInt64, BigInteger)\n  nameWithType: BigInteger.op_Inequality(UInt64, BigInteger)\n  fullName: BigInteger.op_Inequality(UInt64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a 64-bit unsigned integer and a <xref href=\"System.Numerics.BigInteger\"></xref> value are not equal.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]\\n [!code-vb[System.Numerics.BigInteger.Operators#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]  \\n  \\n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \\n  \\n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.  \\n  \\n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> method and reversing its value.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_Inequality (ulong left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_Inequality*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\n  commentId: M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\n  id: op_LeftShift(System.Numerics.BigInteger,System.Int32)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LeftShift(BigInteger, Int32)\n  nameWithType: BigInteger.op_LeftShift(BigInteger, Int32)\n  fullName: BigInteger.op_LeftShift(BigInteger, Int32)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Shifts a <xref href=\"System.Numerics.BigInteger\"></xref> value a specified number of bits to the left.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]\\n [!code-vb[System.Numerics.BigInteger.Operators#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]  \\n  \\n> [!NOTE]\\n>  Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value.  \\n  \\n Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`. The following example shows that the results are identical to the results of using this operator.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]\\n [!code-vb[System.Numerics.BigInteger.Operators#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_LeftShift (System.Numerics.BigInteger value, int shift);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: The value whose bits are to be shifted.\n    - id: shift\n      type: System.Int32\n      description: The number of bits to shift <code>value</code> to the left.\n    return:\n      type: System.Numerics.BigInteger\n      description: A value that has been shifted to the left by the specified number of bits.\n  overload: System.Numerics.BigInteger.op_LeftShift*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)\n  id: op_LessThan(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LessThan(UInt64, BigInteger)\n  nameWithType: BigInteger.op_LessThan(UInt64, BigInteger)\n  fullName: BigInteger.op_LessThan(UInt64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a 64-bit unsigned integer is less than a <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]\\n [!code-vb[System.Numerics.BigInteger.Operators#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_LessThan (ulong left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_LessThan*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)\n  id: op_LessThan(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LessThan(BigInteger, UInt64)\n  nameWithType: BigInteger.op_LessThan(BigInteger, UInt64)\n  fullName: BigInteger.op_LessThan(BigInteger, UInt64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than a 64-bit unsigned integer.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]\\n [!code-vb[System.Numerics.BigInteger.Operators#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_LessThan (System.Numerics.BigInteger left, ulong right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.UInt64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_LessThan*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  id: op_LessThan(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LessThan(Int64, BigInteger)\n  nameWithType: BigInteger.op_LessThan(Int64, BigInteger)\n  fullName: BigInteger.op_LessThan(Int64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a 64-bit signed integer is less than a <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]\\n [!code-vb[System.Numerics.BigInteger.Operators#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]  \\n  \\n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_LessThan (long left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Int64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_LessThan*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)\n  id: op_LessThan(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LessThan(BigInteger, Int64)\n  nameWithType: BigInteger.op_LessThan(BigInteger, Int64)\n  fullName: BigInteger.op_LessThan(BigInteger, Int64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than a 64-bit signed integer.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]\\n [!code-vb[System.Numerics.BigInteger.Operators#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]  \\n  \\n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_LessThan (System.Numerics.BigInteger left, long right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Int64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_LessThan*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LessThan(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_LessThan(BigInteger, BigInteger)\n  fullName: BigInteger.op_LessThan(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than another <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]\\n [!code-vb[System.Numeric.BigInteger.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numeric.BigInteger.Class#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_LessThan (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_LessThan*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  id: op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LessThanOrEqual(Int64, BigInteger)\n  nameWithType: BigInteger.op_LessThanOrEqual(Int64, BigInteger)\n  fullName: BigInteger.op_LessThanOrEqual(Int64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]\\n [!code-vb[System.Numerics.BigInteger.Operators#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]  \\n  \\n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_LessThanOrEqual (long left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Int64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_LessThanOrEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LessThanOrEqual(BigInteger, Int64)\n  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, Int64)\n  fullName: BigInteger.op_LessThanOrEqual(BigInteger, Int64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than or equal to a 64-bit signed integer.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]\\n [!code-vb[System.Numerics.BigInteger.Operators#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]  \\n  \\n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, long right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Int64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_LessThanOrEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LessThanOrEqual(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, BigInteger)\n  fullName: BigInteger.op_LessThanOrEqual(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than or equal to another <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]\\n [!code-vb[System.Numeric.BigInteger.Class#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numeric.BigInteger.Class#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>\"\n  syntax:\n    content: public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_LessThanOrEqual*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LessThanOrEqual(BigInteger, UInt64)\n  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, UInt64)\n  fullName: BigInteger.op_LessThanOrEqual(BigInteger, UInt64)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a <xref href=\"System.Numerics.BigInteger\"></xref> value is less than or equal to a 64-bit unsigned integer.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]\\n [!code-vb[System.Numerics.BigInteger.Operators#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, ulong right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to compare.\n    - id: right\n      type: System.UInt64\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_LessThanOrEqual*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  id: op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_LessThanOrEqual(UInt64, BigInteger)\n  nameWithType: BigInteger.op_LessThanOrEqual(UInt64, BigInteger)\n  fullName: BigInteger.op_LessThanOrEqual(UInt64, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]\\n [!code-vb[System.Numerics.BigInteger.Operators#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \\n  \\n [!code-vb[System.Numerics.BigInteger.Operators#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static bool op_LessThanOrEqual (ulong left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.UInt64\n      description: The first value to compare.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.op_LessThanOrEqual*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Modulus(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Modulus(BigInteger, BigInteger)\n  fullName: BigInteger.op_Modulus(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Returns the remainder that results from division with two specified <xref href=\"System.Numerics.BigInteger\"></xref> values.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]\\n [!code-vb[System.Numeric.BigInteger.Class#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=fullName> method instead.  \\n  \\n The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result. The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_Modulus (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);\n    parameters:\n    - id: dividend\n      type: System.Numerics.BigInteger\n      description: The value to be divided.\n    - id: divisor\n      type: System.Numerics.BigInteger\n      description: The value to divide by.\n    return:\n      type: System.Numerics.BigInteger\n      description: The remainder that results from the division.\n  overload: System.Numerics.BigInteger.op_Modulus*\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: <code>divisor</code> is 0 (zero).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Multiply(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Multiply(BigInteger, BigInteger)\n  fullName: BigInteger.op_Multiply(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Multiplies two specified <xref href=\"System.Numerics.BigInteger\"></xref> values.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]\\n [!code-vb[System.Numeric.BigInteger.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]  \\n  \\n The equivalent method for this operator is <xref:System.Numeric%2A> s .BigInteger.Multiply(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The first value to multiply.\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The second value to multiply.\n    return:\n      type: System.Numerics.BigInteger\n      description: The product of <code>left</code> and <code>right</code>.\n  overload: System.Numerics.BigInteger.op_Multiply*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)\n  id: op_OnesComplement(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_OnesComplement(BigInteger)\n  nameWithType: BigInteger.op_OnesComplement(BigInteger)\n  fullName: BigInteger.op_OnesComplement(BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Returns the bitwise one's complement of a <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values. The bitwise one's complement operator reverses each bit in a numeric value. That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result. The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]  \\n  \\n Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation. For example:  \\n  \\n [!code-vb[System.Numerics.BigInteger.OnesComplement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_OnesComplement (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: An integer value.\n    return:\n      type: System.Numerics.BigInteger\n      description: The bitwise one's complement of <code>value</code>.\n  overload: System.Numerics.BigInteger.op_OnesComplement*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)\n  commentId: M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)\n  id: op_RightShift(System.Numerics.BigInteger,System.Int32)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_RightShift(BigInteger, Int32)\n  nameWithType: BigInteger.op_RightShift(BigInteger, Int32)\n  fullName: BigInteger.op_RightShift(BigInteger, Int32)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Shifts a <xref href=\"System.Numerics.BigInteger\"></xref> value a specified number of bits to the right.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]\\n [!code-vb[System.Numerics.BigInteger.Operators#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]  \\n  \\n Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values. The following example shows that the results are identical to the results of using this operator.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Operators#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]\\n [!code-vb[System.Numerics.BigInteger.Operators#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]  \\n  \\n If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>. If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_RightShift (System.Numerics.BigInteger value, int shift);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: The value whose bits are to be shifted.\n    - id: shift\n      type: System.Int32\n      description: The number of bits to shift <code>value</code> to the right.\n    return:\n      type: System.Numerics.BigInteger\n      description: A value that has been shifted to the right by the specified number of bits.\n  overload: System.Numerics.BigInteger.op_RightShift*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_Subtraction(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Subtraction(BigInteger, BigInteger)\n  fullName: BigInteger.op_Subtraction(BigInteger, BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Subtracts a <xref href=\"System.Numerics.BigInteger\"></xref> value from another <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]\\n [!code-vb[System.Numeric.BigInteger.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=fullName> method instead.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_Subtraction (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The value to subtract from (the minuend).\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The value to subtract (the subtrahend).\n    return:\n      type: System.Numerics.BigInteger\n      description: The result of subtracting <code>right</code> from <code>left</code>.\n  overload: System.Numerics.BigInteger.op_Subtraction*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)\n  id: op_UnaryNegation(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_UnaryNegation(BigInteger)\n  nameWithType: BigInteger.op_UnaryNegation(BigInteger)\n  fullName: BigInteger.op_UnaryNegation(BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Negates a specified BigInteger value.\n  remarks: \"The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values. The operation produces a value that results in 0 (zero) when it is added to the original number. Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.  \\n  \\n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=fullName>\"\n  example:\n  - \"The following example illustrates three different ways to negate the value of a <xref:System.Numerics.BigInteger> object.  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]\\n [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger op_UnaryNegation (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: The value to negate.\n    return:\n      type: System.Numerics.BigInteger\n      description: The result of the <code>value</code> parameter multiplied by negative one (-1).\n  overload: System.Numerics.BigInteger.op_UnaryNegation*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)\n  id: op_UnaryPlus(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: op_UnaryPlus(BigInteger)\n  nameWithType: BigInteger.op_UnaryPlus(BigInteger)\n  fullName: BigInteger.op_UnaryPlus(BigInteger)\n  type: Operator\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Returns the value of the <xref href=\"System.Numerics.BigInteger\"></xref> operand. (The sign of the operand is unchanged.)\n  remarks: The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values.\n  syntax:\n    content: public static System.Numerics.BigInteger op_UnaryPlus (System.Numerics.BigInteger value);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: An integer value.\n    return:\n      type: System.Numerics.BigInteger\n      description: The value of the <code>value</code> operand.\n  overload: System.Numerics.BigInteger.op_UnaryPlus*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Parse(String, NumberStyles, IFormatProvider)\n  nameWithType: BigInteger.Parse(String, NumberStyles, IFormatProvider)\n  fullName: BigInteger.Parse(String, NumberStyles, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Converts the string representation of a number in a specified style and culture-specific format to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent.\n  remarks: \"The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed. `styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.  \\n  \\n Depending on the value of `style`, the `value` parameter may include the following elements:  \\n  \\n [*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \\n  \\n If `style` includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the `value` parameter may include the following elements:  \\n  \\n [*ws*]*hexdigits*[*ws*]  \\n  \\n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*ws*|Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the culture indicated by the `provider` parameter. The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*sign*|An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*|A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.|  \\n|*,*|A culture-specific group separator symbol. The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*.*|A culture-specific decimal point symbol. The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.|  \\n|E|The \\\"e\\\" or \\\"E\\\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \\n  \\n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.  \\n  \\n|NumberStyles value|Elements permitted in value in addition to digits|  \\n|------------------------|-------------------------------------------------------|  \\n|<xref:System.Globalization.NumberStyles.None>|The *digits* element only.|  \\n|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|The decimal point (.) and *fractional-digits* elements.|  \\n|<xref:System.Globalization.NumberStyles.AllowExponent>|The \\\"e\\\" or \\\"E\\\" character, which indicates exponential notation. along with *exponential_digits*.|  \\n|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|The *ws* element at the start of `value`.|  \\n|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|The *ws* element at the end of `value`.|  \\n|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|The *sign* element at the start of `value`.|  \\n|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|The *sign* element at the end of `value`.|  \\n|<xref:System.Globalization.NumberStyles.AllowParentheses>|The *sign* element in the form of parentheses enclosing the numeric value.|  \\n|<xref:System.Globalization.NumberStyles.AllowThousands>|The group separator (,) element.|  \\n|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|The currency ($) element.|  \\n|<xref:System.Globalization.NumberStyles.Currency>|All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.|  \\n|<xref:System.Globalization.NumberStyles.Float>|The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol. The `value` parameter can also use exponential notation.|  \\n|<xref:System.Globalization.NumberStyles.Number>|The `ws`, `sign`, group separator (,), and decimal point (.) elements.|  \\n|<xref:System.Globalization.NumberStyles.Any>|All elements. However, `value` cannot represent a hexadecimal number.|  \\n  \\n> [!IMPORTANT]\\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \\\"R\\\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \\n  \\n Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)  \\n  \\n> [!NOTE]\\n>  If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \\n  \\n If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  \\n  \\n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`. Typically, `provider` can be any one of the following:  \\n  \\n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.  \\n  \\n-   A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \\n  \\n-   A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \\n  \\n If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.\"\n  example:\n  - \"The following example makes several calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method using various combinations of values for the `style` and `provider` parameters.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#2)]\\n [!code-vb[System.Numerics.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#2)]  \\n  \\n A number of the individual calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#4)]\\n [!code-vb[System.Numerics.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#4)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains a number to convert.\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: A bitwise combination of the enumeration values that specify the permitted format of <code>value</code>.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information about <code>value</code>.\n    return:\n      type: System.Numerics.BigInteger\n      description: A value that is equivalent to the number specified in the <code>value</code> parameter.\n  overload: System.Numerics.BigInteger.Parse*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>style</code> is not a <xref href=\\\"System.Globalization.NumberStyles\\\"></xref> value.  \\n  \\n -or-  \\n  \\n <code>style</code> includes the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\"></xref> or <xref href=\\\"System.Globalization.NumberStyles.HexNumber\\\"></xref> flag along with another value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not comply with the input pattern specified by <code>style</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)\n  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)\n  id: Parse(System.String,System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Parse(String, IFormatProvider)\n  nameWithType: BigInteger.Parse(String, IFormatProvider)\n  fullName: BigInteger.Parse(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Converts the string representation of a number in a specified culture-specific format to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent.\n  remarks: \"The `value` parameter should be the string representation of a number in the following form:  \\n  \\n [*ws*][*sign*]*digits*[*ws*]  \\n  \\n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*ws*|Optional white space.|  \\n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method.|  \\n|*digits*|A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.|  \\n  \\n> [!NOTE]\\n>  The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  \\n  \\n> [!IMPORTANT]\\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \\\"R\\\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \\n  \\n The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information. When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter. There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:  \\n  \\n-   You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \\n  \\n-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \\n  \\n-   You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \\n  \\n If `provider` is `null`, the formatting of `value` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.\"\n  example:\n  - \"The following examples show two ways to define the tilde (~) as a negative sign for formatting <xref:System.Numerics.BigInteger> values. Note that to display the <xref:System.Numerics.BigInteger> values in the same format as the original strings, your code must call the <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=fullName> method and pass it the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \\n  \\n The first example defines a class that implements <xref:System.IFormatProvider> and uses the <xref:System.IFormatProvider.GetFormat%2A> method to return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#2)]\\n [!code-vb[System.Numeric.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#2)]  \\n  \\n A <xref:System.Numerics.BigInteger> object can then be instantiated with the following code:  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#3)]\\n [!code-vb[System.Numeric.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#3)]  \\n  \\n The second example is more straightforward. It passes the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information to the `provider` parameter.  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#4)]\\n [!code-vb[System.Numeric.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#4)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Parse (string value, IFormatProvider provider);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains a number to convert.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that provides culture-specific formatting information about <code>value</code>.\n    return:\n      type: System.Numerics.BigInteger\n      description: A value that is equivalent to the number specified in the <code>value</code> parameter.\n  overload: System.Numerics.BigInteger.Parse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in the correct format.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)\n  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)\n  id: Parse(System.String,System.Globalization.NumberStyles)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Parse(String, NumberStyles)\n  nameWithType: BigInteger.Parse(String, NumberStyles)\n  fullName: BigInteger.Parse(String, NumberStyles)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Converts the string representation of a number in a specified style to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent.\n  remarks: \"The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed. `styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.  \\n  \\n Depending on the value of `style`, the `value` parameter may include the following elements:  \\n  \\n [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \\n  \\n If `style` includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the `value` parameter may contain the following elements:  \\n  \\n [*ws*]*hexdigits*[*ws*]  \\n  \\n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*ws*|Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the current culture. The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*sign*|An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*|A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.|  \\n|*,*|A culture-specific group separator symbol. The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*.*|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.|  \\n|E|The \\\"e\\\" or \\\"E\\\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \\n  \\n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.  \\n  \\n|`NumberStyles` value|Elements permitted in `value` in addition to digits|  \\n|--------------------------|---------------------------------------------------------|  \\n|<xref:System.Globalization.NumberStyles.None>|The *digits* element only.|  \\n|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|The decimal point (.) and *fractional-digits* elements.|  \\n|<xref:System.Globalization.NumberStyles.AllowExponent>|The \\\"e\\\" or \\\"E\\\" character, which indicates exponential notation, along with *exponential_digits*.|  \\n|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|The *ws* element at the start of `value`.|  \\n|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|The *ws* element at the end of `value`.|  \\n|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|The *sign* element at the start of `value`.|  \\n|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|The *sign* element at the end of `value`.|  \\n|<xref:System.Globalization.NumberStyles.AllowParentheses>|The *sign* element in the form of parentheses enclosing the numeric value.|  \\n|<xref:System.Globalization.NumberStyles.AllowThousands>|The group separator (,) element.|  \\n|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|The currency ($) element.|  \\n|<xref:System.Globalization.NumberStyles.Currency>|All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.|  \\n|<xref:System.Globalization.NumberStyles.Float>|The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol. The `value` parameter can also use exponential notation.|  \\n|<xref:System.Globalization.NumberStyles.Number>|The `ws`, `sign`, group separator (*,*), and decimal point (*.*) elements.|  \\n|<xref:System.Globalization.NumberStyles.Any>|All elements. However, `value` cannot represent a hexadecimal number.|  \\n  \\n> [!IMPORTANT]\\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \\\"R\\\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \\n  \\n Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)  \\n  \\n> [!NOTE]\\n>  If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \\n  \\n If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  \\n  \\n The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.\"\n  example:\n  - \"The following example illustrates calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method with several possible values for the `style` parameter. It illustrates how to interpret a string as a hexadecimal value, and how to disallow spaces and sign symbols.  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#5)]\\n [!code-vb[System.Numeric.BigInteger.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#5)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains a number to convert.\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: A bitwise combination of the enumeration values that specify the permitted format of <code>value</code>.\n    return:\n      type: System.Numerics.BigInteger\n      description: A value that is equivalent to the number specified in the <code>value</code> parameter.\n  overload: System.Numerics.BigInteger.Parse*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>style</code> is not a <xref href=\\\"System.Globalization.NumberStyles\\\"></xref> value.  \\n  \\n -or-  \\n  \\n <code>style</code> includes the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\"></xref> or <xref href=\\\"System.Globalization.NumberStyles.HexNumber\\\"></xref> flag along with another value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> does not comply with the input pattern specified by <xref href=\"System.Globalization.NumberStyles\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Parse(System.String)\n  commentId: M:System.Numerics.BigInteger.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Parse(String)\n  nameWithType: BigInteger.Parse(String)\n  fullName: BigInteger.Parse(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Converts the string representation of a number to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent.\n  remarks: \"The `value` parameter should be the string representation of a number in the following form.  \\n  \\n [*ws*][*sign*]*digits*[*ws*]  \\n  \\n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*ws*|Optional white space.|  \\n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.|  \\n|*digits*|A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.|  \\n  \\n> [!NOTE]\\n>  The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  \\n  \\n The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=fullName> object that is initialized for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>. To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method.  \\n  \\n> [!IMPORTANT]\\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \\\"R\\\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.\"\n  example:\n  - \"The following example uses the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method to instantiate two <xref:System.Numerics.BigInteger> objects. It multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two values.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#1)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Parse (string value);\n    parameters:\n    - id: value\n      type: System.String\n      description: A string that contains the number to convert.\n    return:\n      type: System.Numerics.BigInteger\n      description: A value that is equivalent to the number specified in the <code>value</code> parameter.\n  overload: System.Numerics.BigInteger.Parse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>value</code> is not in the correct format.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\n  commentId: M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\n  id: Pow(System.Numerics.BigInteger,System.Int32)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Pow(BigInteger, Int32)\n  nameWithType: BigInteger.Pow(BigInteger, Int32)\n  fullName: BigInteger.Pow(BigInteger, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Raises a <xref href=\"System.Numerics.BigInteger\"></xref> value to the power of a specified value.\n  remarks: \"The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0. If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`. If `value` is negative, the method returns a negative result.  \\n  \\n This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=fullName> method for primitive numeric types.\"\n  example:\n  - \"The following example illustrates exponentiation using a <xref:System.Numerics.BigInteger> value and an exponent whose value ranges from 0 to 10.  \\n  \\n [!code-csharp[System.Numeric.BigInteger.Class#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#32)]\\n [!code-vb[System.Numeric.BigInteger.Class#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#32)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Pow (System.Numerics.BigInteger value, int exponent);\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: The number to raise to the <code>exponent</code> power.\n    - id: exponent\n      type: System.Int32\n      description: The exponent to raise <code>value</code> by.\n    return:\n      type: System.Numerics.BigInteger\n      description: The result of raising <code>value</code> to the <code>exponent</code> power.\n  overload: System.Numerics.BigInteger.Pow*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value of the <code>exponent</code> parameter is negative.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Remainder(BigInteger, BigInteger)\n  nameWithType: BigInteger.Remainder(BigInteger, BigInteger)\n  fullName: BigInteger.Remainder(BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Performs integer division on two <xref href=\"System.Numerics.BigInteger\"></xref> values and returns the remainder.\n  remarks: \"The sign of the remainder is the sign of the `dividend` parameter.  \\n  \\n The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to division using the modulus operator.  \\n  \\n If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation.\"\n  example:\n  - \"The following example compares the remainder from the <xref:System.Numerics.BigInteger.DivRem%2A> method with the remainder returned by the <xref:System.Numerics.BigInteger.Remainder%2A> method to establish that the two methods calculate identical remainders.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/cs/Remainder1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/vb/Remainder1.vb#1)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Remainder (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);\n    parameters:\n    - id: dividend\n      type: System.Numerics.BigInteger\n      description: The value to be divided.\n    - id: divisor\n      type: System.Numerics.BigInteger\n      description: The value to divide by.\n    return:\n      type: System.Numerics.BigInteger\n      description: The remainder after dividing <code>dividend</code> by <code>divisor</code>.\n  overload: System.Numerics.BigInteger.Remainder*\n  exceptions:\n  - type: System.DivideByZeroException\n    commentId: T:System.DivideByZeroException\n    description: <code>divisor</code> is 0 (zero).\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Sign\n  commentId: P:System.Numerics.BigInteger.Sign\n  id: Sign\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Sign\n  nameWithType: BigInteger.Sign\n  fullName: BigInteger.Sign\n  type: Property\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Gets a number that indicates the sign (negative, positive, or zero) of the current <xref href=\"System.Numerics.BigInteger\"></xref> object.\n  remarks: The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=fullName> method for the primitive numeric types.\n  syntax:\n    content: public int Sign { get; }\n    return:\n      type: System.Int32\n      description: \"A number that indicates the sign of the <xref href=\\\"System.Numerics.BigInteger\\\"></xref> object, as shown in the following table.  \\n  \\n <table><thead><tr><th> Number  \\n  \\n </th><th> Description  \\n  \\n </th></tr></thead><tbody><tr><td> -1  \\n  \\n </td><td> The value of this object is negative.  \\n  \\n </td></tr><tr><td> 0  \\n  \\n </td><td> The value of this object is 0 (zero).  \\n  \\n </td></tr><tr><td> 1  \\n  \\n </td><td> The value of this object is positive.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Numerics.BigInteger.Sign*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  commentId: M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  id: Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Subtract(BigInteger, BigInteger)\n  nameWithType: BigInteger.Subtract(BigInteger, BigInteger)\n  fullName: BigInteger.Subtract(BigInteger, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Subtracts one <xref href=\"System.Numerics.BigInteger\"></xref> value from another and returns the result.\n  remarks: \"Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values.  \\n  \\n The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]\"\n  syntax:\n    content: public static System.Numerics.BigInteger Subtract (System.Numerics.BigInteger left, System.Numerics.BigInteger right);\n    parameters:\n    - id: left\n      type: System.Numerics.BigInteger\n      description: The value to subtract from (the minuend).\n    - id: right\n      type: System.Numerics.BigInteger\n      description: The value to subtract (the subtrahend).\n    return:\n      type: System.Numerics.BigInteger\n      description: The result of subtracting <code>right</code> from <code>left</code>.\n  overload: System.Numerics.BigInteger.Subtract*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.ToByteArray\n  commentId: M:System.Numerics.BigInteger.ToByteArray\n  id: ToByteArray\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: ToByteArray()\n  nameWithType: BigInteger.ToByteArray()\n  fullName: BigInteger.ToByteArray()\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Converts a <xref href=\"System.Numerics.BigInteger\"></xref> value to a byte array.\n  remarks: \"The individual bytes in the array returned by this method appear in little-endian order. That is, the lower-order bytes of the value precede the higher-order bytes. The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on. For example, the value 1024, or 0x0400, is stored as the following array of two bytes:  \\n  \\n|Element|Byte value|  \\n|-------------|----------------|  \\n|0|0x00|  \\n|1|0x04|  \\n  \\n Negative values are written to the array using two's complement representation in the most compact form possible. For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`.  \\n  \\n Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=fullName>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set. For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`. However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`.  \\n  \\n You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.  \\n  \\n> [!CAUTION]\\n>  If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit. For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array.\"\n  example:\n  - \"The following example illustrates how some <xref:System.Numerics.BigInteger> values are represented in byte arrays.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/cs/ToByteArray1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/vb/ToByteArray1.vb#1)]\"\n  syntax:\n    content: public byte[] ToByteArray ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: The value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object converted to an array of bytes.\n  overload: System.Numerics.BigInteger.ToByteArray*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.ToString\n  commentId: M:System.Numerics.BigInteger.ToString\n  id: ToString\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: BigInteger.ToString()\n  fullName: BigInteger.ToString()\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation.\n  remarks: \"The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the \\\"R\\\", or round-trip, format of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \\n  \\n|To use format|For culture|Use the overload|  \\n|-------------------|-----------------|----------------------|  \\n|Round-trip (\\\"R\\\") format|A specific culture|<xref:System.Numerics.BigInteger.ToString%2A>|  \\n|A specific format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  \\n|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  \\n  \\n The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros. The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture.\"\n  example:\n  - \"The following example displays a <xref:System.Numerics.BigInteger> value by using the default <xref:System.Numerics.BigInteger.ToString> method. It also displays the string representations of the <xref:System.Numerics.BigInteger> value that results from using some standard format specifiers. The examples are displayed using the formatting conventions of the en-US culture.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#1)]\"\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value.\n  overload: System.Numerics.BigInteger.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.ToString(System.IFormatProvider)\n  commentId: M:System.Numerics.BigInteger.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: ToString(IFormatProvider)\n  nameWithType: BigInteger.ToString(IFormatProvider)\n  fullName: BigInteger.ToString(IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation by using the specified culture-specific formatting information.\n  remarks: \"The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the \\\"R\\\", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \\n  \\n|To use format|For culture|Use the overload|  \\n|-------------------|-----------------|----------------------|  \\n|Round-trip (\\\"R\\\") format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString>|  \\n|A specific format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  \\n|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  \\n  \\n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture. The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>, which defines the character that represents the negative sign.  \\n  \\n The `provider` parameter can be one of the following:  \\n  \\n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.  \\n  \\n-   The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.  \\n  \\n-   A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.\"\n  example:\n  - \"The following example instantiates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign. The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method then uses the custom <xref:System.Globalization.NumberFormatInfo> object to display a negative <xref:System.Numerics.BigInteger> value.  \\n  \\n [!code-csharp[System.Numeric.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/cs/System.Numeric.BigInteger.ToString.cs#1)]\\n [!code-vb[System.Numeric.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/vb/System.Numeric.BigInteger.ToString.vb#1)]\"\n  syntax:\n    content: public string ToString (IFormatProvider provider);\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value in the format specified by the <code>provider</code> parameter.\n  overload: System.Numerics.BigInteger.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.ToString(System.String)\n  commentId: M:System.Numerics.BigInteger.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: ToString(String)\n  nameWithType: BigInteger.ToString(String)\n  fullName: BigInteger.ToString(String)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation by using the specified format.\n  remarks: \"The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture. If you want to use the \\\"R\\\", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \\n  \\n|To use format|For culture|Use the overload|  \\n|-------------------|-----------------|----------------------|  \\n|Round-trip (\\\"R\\\") format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString>|  \\n|Round-trip (\\\"R\\\") format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  \\n|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  \\n  \\n The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md). If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier (\\\"R\\\"). If `format` is any other value, the method throws a <xref:System.FormatException>.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \\n  \\n-   For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \\n  \\n The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture. Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload.\"\n  example:\n  - \"The following example initializes a <xref:System.Numerics.BigInteger> value and displays it by using each standard format string and some custom format strings.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#3)]\"\n  syntax:\n    content: public string ToString (string format);\n    parameters:\n    - id: format\n      type: System.String\n      description: A standard or custom numeric format string.\n    return:\n      type: System.String\n      description: The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value in the format specified by the <code>format</code> parameter.\n  overload: System.Numerics.BigInteger.ToString*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>format</code> is not a valid format string.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: ToString(String, IFormatProvider)\n  nameWithType: BigInteger.ToString(String, IFormatProvider)\n  fullName: BigInteger.ToString(String, IFormatProvider)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Converts the numeric value of the current <xref href=\"System.Numerics.BigInteger\"></xref> object to its equivalent string representation by using the specified format and culture-specific format information.\n  remarks: \"The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \\n  \\n|To use format|For culture|Use the overload|  \\n|-------------------|-----------------|----------------------|  \\n|Round-trip (\\\"R\\\") format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString>|  \\n|Round-trip (\\\"R\\\") format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  \\n|A specific format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  \\n  \\n The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md). If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier (\\\"R\\\"). If `format` is any other value, the method throws a <xref:System.FormatException>.  \\n  \\n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \\n  \\n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \\n  \\n-   For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \\n  \\n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol. There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:  \\n  \\n-   You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \\n  \\n-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \\n  \\n-   You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \\n  \\n If `provider` is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.\"\n  example:\n  - \"The following example initializes a <xref:System.Numerics.BigInteger> value, and displays it to the console using a standard format string and a <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#4)]\\n [!code-vb[System.Numerics.BigInteger.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#4)]\"\n  syntax:\n    content: public string ToString (string format, IFormatProvider provider);\n    parameters:\n    - id: format\n      type: System.String\n      description: A standard or custom numeric format string.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information.\n    return:\n      type: System.String\n      description: The string representation of the current <xref href=\"System.Numerics.BigInteger\"></xref> value as specified by the <code>format</code> and <code>provider</code> parameters.\n  overload: System.Numerics.BigInteger.ToString*\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>format</code> is not a valid format string.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: TryParse(String, NumberStyles, IFormatProvider, BigInteger)\n  nameWithType: BigInteger.TryParse(String, NumberStyles, IFormatProvider, BigInteger)\n  fullName: BigInteger.TryParse(String, NumberStyles, IFormatProvider, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Tries to convert the string representation of a number in a specified style and culture-specific format to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.\n  remarks: \"The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.  \\n  \\n The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. Depending on the value of `style`, the `value` parameter may include the following elements:  \\n  \\n [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \\n  \\n If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:  \\n  \\n [*ws*]*hexdigits*[*ws*]  \\n  \\n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*ws*|Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter. The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*sign*|An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*digits*|A sequence of digits from 0 through 9.|  \\n|*,*|A culture-specific group separator. The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*.*|A culture-specific decimal point symbol. The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*fractional_digits*|One or more occurrences of the digit 0. Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|E|The \\\"e\\\" or \\\"E\\\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*exponential_digits*|A sequence of digits from 0 through 9. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \\n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \\n  \\n A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.  \\n  \\n|Non-composite `NumberStyles` values|Elements permitted in value in addition to digits|  \\n|------------------------------------------|-------------------------------------------------------|  \\n|<xref:System.Globalization.NumberStyles.None>|Decimal digits only.|  \\n|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|The decimal point (*.*) and *fractional_digits* elements. However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.|  \\n|<xref:System.Globalization.NumberStyles.AllowExponent>|The \\\"e\\\" or \\\"E\\\" character, which indicates exponential notation, along with *exponential_digits*. If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.|  \\n|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|The *ws* element at the start of `value`.|  \\n|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|The *ws* element at the end of `value`.|  \\n|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|The *sign* element before *digits*.|  \\n|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|The *sign* element after *digits*.|  \\n|<xref:System.Globalization.NumberStyles.AllowParentheses>|The *sign* element in the form of parentheses enclosing the numeric value.|  \\n|<xref:System.Globalization.NumberStyles.AllowThousands>|The group separator (*,*) element.|  \\n|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|The currency (*$*) element.|  \\n|<xref:System.Globalization.NumberStyles.Currency>|All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.|  \\n|<xref:System.Globalization.NumberStyles.Float>|The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol. The `value` parameter can also use exponential notation.|  \\n|<xref:System.Globalization.NumberStyles.Number>|The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.|  \\n|<xref:System.Globalization.NumberStyles.Any>|All elements. However, `value` cannot represent a hexadecimal number.|  \\n  \\n> [!IMPORTANT]\\n>  If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \\\"R\\\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \\n  \\n If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used, `value` must be a hexadecimal value. The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)  \\n  \\n> [!NOTE]\\n>  If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \\n  \\n If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]\\n [!code-vb[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]  \\n  \\n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`. The `provider` parameter can be any one of the following:  \\n  \\n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \\n  \\n-   A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \\n  \\n-   A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \\n  \\n If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.\"\n  example:\n  - \"The following example makes some calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method using various combinations of values for the `style` and `provider` parameters.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#2)]\\n [!code-vb[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#2)]  \\n  \\n A number of the individual calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.  \\n  \\n [!code-csharp[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#3)]\\n [!code-vb[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#3)]\"\n  syntax:\n    content: public static bool TryParse (string value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string representation of a number. The string is interpreted using the style specified by <code>style</code>.\n    - id: style\n      type: System.Globalization.NumberStyles\n      description: A bitwise combination of enumeration values that indicates the style elements that can be present in <code>value</code>. A typical value to specify is <xref href=\"System.Globalization.NumberStyles.Integer\"></xref>.\n    - id: provider\n      type: System.IFormatProvider\n      description: An object that supplies culture-specific formatting information about <code>value</code>.\n    - id: result\n      type: System.Numerics.BigInteger\n      description: When this method returns, contains the <xref href=\"System.Numerics.BigInteger\"></xref> equivalent to the number that is contained in <code>value</code>, or <xref href=\"System.Numerics.BigInteger.Zero\"></xref> if the conversion failed. The conversion fails if the <code>value</code> parameter is `null` or is not in a format that is compliant with <code>style</code>. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>value</code> parameter was converted successfully; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.TryParse*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>style</code> is not a <xref href=\\\"System.Globalization.NumberStyles\\\"></xref> value.  \\n  \\n -or-  \\n  \\n <code>style</code> includes the <xref href=\\\"System.Globalization.NumberStyles.AllowHexSpecifier\\\"></xref> or <xref href=\\\"System.Globalization.NumberStyles.HexNumber\\\"></xref> flag along with another value.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)\n  commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)\n  id: TryParse(System.String,System.Numerics.BigInteger@)\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: TryParse(String, BigInteger)\n  nameWithType: BigInteger.TryParse(String, BigInteger)\n  fullName: BigInteger.TryParse(String, BigInteger)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  namespace: System.Numerics\n  summary: Tries to convert the string representation of a number to its <xref href=\"System.Numerics.BigInteger\"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.\n  remarks: \"The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed.  \\n  \\n The `value` parameter should be the string representation of a decimal number in the following form:  \\n  \\n [*ws*][*sign*]*digits*[*ws*]  \\n  \\n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \\n  \\n|Element|Description|  \\n|-------------|-----------------|  \\n|*ws*|Optional white space.|  \\n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.|  \\n|*digits*|A sequence of decimal digits ranging from 0 to 9.|  \\n  \\n> [!NOTE]\\n>  The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  \\n  \\n The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed. To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method.  \\n  \\n The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>.  \\n  \\n This overload interprets all digits in the `value` parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead.\"\n  example:\n  - \"The following example uses the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method to instantiate two <xref:System.Numerics.BigInteger> objects. If the conversions succeed, it multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two objects.  \\n  \\n [!code-csharp[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/cs/System.Numeric.BigInteger.TryParse.cs#1)]\\n [!code-vb[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/vb/System.Numeric.BigInteger.TryParse.vb#1)]\"\n  syntax:\n    content: public static bool TryParse (string value, out System.Numerics.BigInteger result);\n    parameters:\n    - id: value\n      type: System.String\n      description: The string representation of a number.\n    - id: result\n      type: System.Numerics.BigInteger\n      description: When this method returns, contains the <xref href=\"System.Numerics.BigInteger\"></xref> equivalent to the number that is contained in <code>value</code>, or zero (0) if the conversion fails. The conversion fails if the <code>value</code> parameter is `null` or is not of the correct format. This parameter is passed uninitialized.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> was converted successfully; otherwise, `false`.'\n  overload: System.Numerics.BigInteger.TryParse*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>value</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.Zero\n  commentId: P:System.Numerics.BigInteger.Zero\n  id: Zero\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: Zero\n  nameWithType: BigInteger.Zero\n  fullName: BigInteger.Zero\n  type: Property\n  assemblies:\n  - System.Runtime.Numerics\n  - System.Numerics\n  - netstandard\n  - FSharp.Core\n  namespace: System.Numerics\n  summary: Gets a value that represents the number 0 (zero).\n  remarks: The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.\n  syntax:\n    content: public static System.Numerics.BigInteger Zero { get; }\n    return:\n      type: System.Numerics.BigInteger\n      description: An integer whose value is 0 (zero).\n  overload: System.Numerics.BigInteger.Zero*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)\n  commentId: M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)\n  id: System#IComparable#CompareTo(System.Object)\n  isEii: true\n  parent: System.Numerics.BigInteger\n  langs:\n  - csharp\n  name: IComparable.CompareTo(Object)\n  nameWithType: BigInteger.IComparable.CompareTo(Object)\n  fullName: BigInteger.IComparable.CompareTo(Object)\n  type: Method\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  syntax:\n    content: int IComparable.CompareTo (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Numerics.BigInteger.System#IComparable#CompareTo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\nreferences:\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.OverflowException\n  parent: System\n  isExternal: false\n  name: OverflowException\n  nameWithType: OverflowException\n  fullName: System.OverflowException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.DivideByZeroException\n  parent: System\n  isExternal: false\n  name: DivideByZeroException\n  nameWithType: DivideByZeroException\n  fullName: System.DivideByZeroException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.Numerics.BigInteger.#ctor(System.Byte[])\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: BigInteger(Byte[])\n  nameWithType: BigInteger.BigInteger(Byte[])\n  fullName: BigInteger.BigInteger(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Numerics.BigInteger.#ctor(System.Decimal)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: BigInteger(Decimal)\n  nameWithType: BigInteger.BigInteger(Decimal)\n  fullName: BigInteger.BigInteger(Decimal)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  nameWithType: Decimal\n  fullName: System.Decimal\n- uid: System.Numerics.BigInteger.#ctor(System.Double)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: BigInteger(Double)\n  nameWithType: BigInteger.BigInteger(Double)\n  fullName: BigInteger.BigInteger(Double)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Numerics.BigInteger.#ctor(System.Int32)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: BigInteger(Int32)\n  nameWithType: BigInteger.BigInteger(Int32)\n  fullName: BigInteger.BigInteger(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Numerics.BigInteger.#ctor(System.Int64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: BigInteger(Int64)\n  nameWithType: BigInteger.BigInteger(Int64)\n  fullName: BigInteger.BigInteger(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Numerics.BigInteger.#ctor(System.Single)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: BigInteger(Single)\n  nameWithType: BigInteger.BigInteger(Single)\n  fullName: BigInteger.BigInteger(Single)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  nameWithType: Single\n  fullName: System.Single\n- uid: System.Numerics.BigInteger.#ctor(System.UInt32)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: BigInteger(UInt32)\n  nameWithType: BigInteger.BigInteger(UInt32)\n  fullName: BigInteger.BigInteger(UInt32)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Numerics.BigInteger.#ctor(System.UInt64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: BigInteger(UInt64)\n  nameWithType: BigInteger.BigInteger(UInt64)\n  fullName: BigInteger.BigInteger(UInt64)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  nameWithType: UInt64\n  fullName: System.UInt64\n- uid: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Abs(BigInteger)\n  nameWithType: BigInteger.Abs(BigInteger)\n  fullName: BigInteger.Abs(BigInteger)\n- uid: System.Numerics.BigInteger\n  parent: System.Numerics\n  isExternal: false\n  name: BigInteger\n  nameWithType: BigInteger\n  fullName: System.Numerics.BigInteger\n- uid: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Add(BigInteger, BigInteger)\n  nameWithType: BigInteger.Add(BigInteger, BigInteger)\n  fullName: BigInteger.Add(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Compare(BigInteger, BigInteger)\n  nameWithType: BigInteger.Compare(BigInteger, BigInteger)\n  fullName: BigInteger.Compare(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.CompareTo(System.UInt64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: CompareTo(UInt64)\n  nameWithType: BigInteger.CompareTo(UInt64)\n  fullName: BigInteger.CompareTo(UInt64)\n- uid: System.Numerics.BigInteger.CompareTo(System.Object)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: CompareTo(Object)\n  nameWithType: BigInteger.CompareTo(Object)\n  fullName: BigInteger.CompareTo(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: CompareTo(BigInteger)\n  nameWithType: BigInteger.CompareTo(BigInteger)\n  fullName: BigInteger.CompareTo(BigInteger)\n- uid: System.Numerics.BigInteger.CompareTo(System.Int64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: CompareTo(Int64)\n  nameWithType: BigInteger.CompareTo(Int64)\n  fullName: BigInteger.CompareTo(Int64)\n- uid: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Divide(BigInteger, BigInteger)\n  nameWithType: BigInteger.Divide(BigInteger, BigInteger)\n  fullName: BigInteger.Divide(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: DivRem(BigInteger, BigInteger, BigInteger)\n  nameWithType: BigInteger.DivRem(BigInteger, BigInteger, BigInteger)\n  fullName: BigInteger.DivRem(BigInteger, BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Equals(System.Int64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Equals(Int64)\n  nameWithType: BigInteger.Equals(Int64)\n  fullName: BigInteger.Equals(Int64)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Equals(BigInteger)\n  nameWithType: BigInteger.Equals(BigInteger)\n  fullName: BigInteger.Equals(BigInteger)\n- uid: System.Numerics.BigInteger.Equals(System.Object)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: BigInteger.Equals(Object)\n  fullName: BigInteger.Equals(Object)\n- uid: System.Numerics.BigInteger.Equals(System.UInt64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Equals(UInt64)\n  nameWithType: BigInteger.Equals(UInt64)\n  fullName: BigInteger.Equals(UInt64)\n- uid: System.Numerics.BigInteger.GetHashCode\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: BigInteger.GetHashCode()\n  fullName: BigInteger.GetHashCode()\n- uid: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: GreatestCommonDivisor(BigInteger, BigInteger)\n  nameWithType: BigInteger.GreatestCommonDivisor(BigInteger, BigInteger)\n  fullName: BigInteger.GreatestCommonDivisor(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.IsEven\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: IsEven\n  nameWithType: BigInteger.IsEven\n  fullName: BigInteger.IsEven\n- uid: System.Numerics.BigInteger.IsOne\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: IsOne\n  nameWithType: BigInteger.IsOne\n  fullName: BigInteger.IsOne\n- uid: System.Numerics.BigInteger.IsPowerOfTwo\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: IsPowerOfTwo\n  nameWithType: BigInteger.IsPowerOfTwo\n  fullName: BigInteger.IsPowerOfTwo\n- uid: System.Numerics.BigInteger.IsZero\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: IsZero\n  nameWithType: BigInteger.IsZero\n  fullName: BigInteger.IsZero\n- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Log(BigInteger)\n  nameWithType: BigInteger.Log(BigInteger)\n  fullName: BigInteger.Log(BigInteger)\n- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Log(BigInteger, Double)\n  nameWithType: BigInteger.Log(BigInteger, Double)\n  fullName: BigInteger.Log(BigInteger, Double)\n- uid: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Log10(BigInteger)\n  nameWithType: BigInteger.Log10(BigInteger)\n  fullName: BigInteger.Log10(BigInteger)\n- uid: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Max(BigInteger, BigInteger)\n  nameWithType: BigInteger.Max(BigInteger, BigInteger)\n  fullName: BigInteger.Max(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Min(BigInteger, BigInteger)\n  nameWithType: BigInteger.Min(BigInteger, BigInteger)\n  fullName: BigInteger.Min(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.MinusOne\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: MinusOne\n  nameWithType: BigInteger.MinusOne\n  fullName: BigInteger.MinusOne\n- uid: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: ModPow(BigInteger, BigInteger, BigInteger)\n  nameWithType: BigInteger.ModPow(BigInteger, BigInteger, BigInteger)\n  fullName: BigInteger.ModPow(BigInteger, BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Multiply(BigInteger, BigInteger)\n  nameWithType: BigInteger.Multiply(BigInteger, BigInteger)\n  fullName: BigInteger.Multiply(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Negate(BigInteger)\n  nameWithType: BigInteger.Negate(BigInteger)\n  fullName: BigInteger.Negate(BigInteger)\n- uid: System.Numerics.BigInteger.One\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: One\n  nameWithType: BigInteger.One\n  fullName: BigInteger.One\n- uid: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Addition(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Addition(BigInteger, BigInteger)\n  fullName: BigInteger.op_Addition(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_BitwiseAnd(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_BitwiseAnd(BigInteger, BigInteger)\n  fullName: BigInteger.op_BitwiseAnd(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_BitwiseOr(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_BitwiseOr(BigInteger, BigInteger)\n  fullName: BigInteger.op_BitwiseOr(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Decrement(BigInteger)\n  nameWithType: BigInteger.op_Decrement(BigInteger)\n  fullName: BigInteger.op_Decrement(BigInteger)\n- uid: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Division(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Division(BigInteger, BigInteger)\n  fullName: BigInteger.op_Division(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Equality(Int64, BigInteger)\n  nameWithType: BigInteger.op_Equality(Int64, BigInteger)\n  fullName: BigInteger.op_Equality(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Equality(BigInteger, Int64)\n  nameWithType: BigInteger.op_Equality(BigInteger, Int64)\n  fullName: BigInteger.op_Equality(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Equality(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Equality(BigInteger, BigInteger)\n  fullName: BigInteger.op_Equality(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Equality(BigInteger, UInt64)\n  nameWithType: BigInteger.op_Equality(BigInteger, UInt64)\n  fullName: BigInteger.op_Equality(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Equality(UInt64, BigInteger)\n  nameWithType: BigInteger.op_Equality(UInt64, BigInteger)\n  fullName: BigInteger.op_Equality(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_ExclusiveOr(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_ExclusiveOr(BigInteger, BigInteger)\n  fullName: BigInteger.op_ExclusiveOr(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Single to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(Single to BigInteger)\n  nameWithType: BigInteger.op_Explicit(Single to BigInteger)\n  fullName: BigInteger.op_Explicit(Single to BigInteger)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt32)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to UInt32)\n  nameWithType: BigInteger.op_Explicit(BigInteger to UInt32)\n  fullName: BigInteger.op_Explicit(BigInteger to UInt32)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt16)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to UInt16)\n  nameWithType: BigInteger.op_Explicit(BigInteger to UInt16)\n  fullName: BigInteger.op_Explicit(BigInteger to UInt16)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  nameWithType: UInt16\n  fullName: System.UInt16\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Single)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to Single)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Single)\n  fullName: BigInteger.op_Explicit(BigInteger to Single)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.SByte)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to SByte)\n  nameWithType: BigInteger.op_Explicit(BigInteger to SByte)\n  fullName: BigInteger.op_Explicit(BigInteger to SByte)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  nameWithType: SByte\n  fullName: System.SByte\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to Int64)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Int64)\n  fullName: BigInteger.op_Explicit(BigInteger to Int64)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to UInt64)\n  nameWithType: BigInteger.op_Explicit(BigInteger to UInt64)\n  fullName: BigInteger.op_Explicit(BigInteger to UInt64)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int16)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to Int16)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Int16)\n  fullName: BigInteger.op_Explicit(BigInteger to Int16)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Double)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to Double)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Double)\n  fullName: BigInteger.op_Explicit(BigInteger to Double)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Decimal)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to Decimal)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Decimal)\n  fullName: BigInteger.op_Explicit(BigInteger to Decimal)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Byte)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to Byte)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Byte)\n  fullName: BigInteger.op_Explicit(BigInteger to Byte)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Double to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(Double to BigInteger)\n  nameWithType: BigInteger.op_Explicit(Double to BigInteger)\n  fullName: BigInteger.op_Explicit(Double to BigInteger)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int32)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(BigInteger to Int32)\n  nameWithType: BigInteger.op_Explicit(BigInteger to Int32)\n  fullName: BigInteger.op_Explicit(BigInteger to Int32)\n- uid: System.Numerics.BigInteger.op_Explicit(System.Decimal to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit(Decimal to BigInteger)\n  nameWithType: BigInteger.op_Explicit(Decimal to BigInteger)\n  fullName: BigInteger.op_Explicit(Decimal to BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThan(Int64, BigInteger)\n  nameWithType: BigInteger.op_GreaterThan(Int64, BigInteger)\n  fullName: BigInteger.op_GreaterThan(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThan(BigInteger, Int64)\n  nameWithType: BigInteger.op_GreaterThan(BigInteger, Int64)\n  fullName: BigInteger.op_GreaterThan(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThan(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_GreaterThan(BigInteger, BigInteger)\n  fullName: BigInteger.op_GreaterThan(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThan(BigInteger, UInt64)\n  nameWithType: BigInteger.op_GreaterThan(BigInteger, UInt64)\n  fullName: BigInteger.op_GreaterThan(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThan(UInt64, BigInteger)\n  nameWithType: BigInteger.op_GreaterThan(UInt64, BigInteger)\n  fullName: BigInteger.op_GreaterThan(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThanOrEqual(BigInteger, UInt64)\n  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, UInt64)\n  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThanOrEqual(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, BigInteger)\n  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThanOrEqual(UInt64, BigInteger)\n  nameWithType: BigInteger.op_GreaterThanOrEqual(UInt64, BigInteger)\n  fullName: BigInteger.op_GreaterThanOrEqual(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThanOrEqual(Int64, BigInteger)\n  nameWithType: BigInteger.op_GreaterThanOrEqual(Int64, BigInteger)\n  fullName: BigInteger.op_GreaterThanOrEqual(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThanOrEqual(BigInteger, Int64)\n  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, Int64)\n  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_Implicit(System.UInt32 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Implicit(UInt32 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(UInt32 to BigInteger)\n  fullName: BigInteger.op_Implicit(UInt32 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.UInt16 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Implicit(UInt16 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(UInt16 to BigInteger)\n  fullName: BigInteger.op_Implicit(UInt16 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.SByte to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Implicit(SByte to BigInteger)\n  nameWithType: BigInteger.op_Implicit(SByte to BigInteger)\n  fullName: BigInteger.op_Implicit(SByte to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.UInt64 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Implicit(UInt64 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(UInt64 to BigInteger)\n  fullName: BigInteger.op_Implicit(UInt64 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.Int32 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Implicit(Int32 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(Int32 to BigInteger)\n  fullName: BigInteger.op_Implicit(Int32 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.Int16 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Implicit(Int16 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(Int16 to BigInteger)\n  fullName: BigInteger.op_Implicit(Int16 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.Byte to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Implicit(Byte to BigInteger)\n  nameWithType: BigInteger.op_Implicit(Byte to BigInteger)\n  fullName: BigInteger.op_Implicit(Byte to BigInteger)\n- uid: System.Numerics.BigInteger.op_Implicit(System.Int64 to System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Implicit(Int64 to BigInteger)\n  nameWithType: BigInteger.op_Implicit(Int64 to BigInteger)\n  fullName: BigInteger.op_Implicit(Int64 to BigInteger)\n- uid: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Increment(BigInteger)\n  nameWithType: BigInteger.op_Increment(BigInteger)\n  fullName: BigInteger.op_Increment(BigInteger)\n- uid: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Inequality(Int64, BigInteger)\n  nameWithType: BigInteger.op_Inequality(Int64, BigInteger)\n  fullName: BigInteger.op_Inequality(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Inequality(BigInteger, Int64)\n  nameWithType: BigInteger.op_Inequality(BigInteger, Int64)\n  fullName: BigInteger.op_Inequality(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Inequality(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Inequality(BigInteger, BigInteger)\n  fullName: BigInteger.op_Inequality(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Inequality(BigInteger, UInt64)\n  nameWithType: BigInteger.op_Inequality(BigInteger, UInt64)\n  fullName: BigInteger.op_Inequality(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Inequality(UInt64, BigInteger)\n  nameWithType: BigInteger.op_Inequality(UInt64, BigInteger)\n  fullName: BigInteger.op_Inequality(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LeftShift(BigInteger, Int32)\n  nameWithType: BigInteger.op_LeftShift(BigInteger, Int32)\n  fullName: BigInteger.op_LeftShift(BigInteger, Int32)\n- uid: System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThan(UInt64, BigInteger)\n  nameWithType: BigInteger.op_LessThan(UInt64, BigInteger)\n  fullName: BigInteger.op_LessThan(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThan(BigInteger, UInt64)\n  nameWithType: BigInteger.op_LessThan(BigInteger, UInt64)\n  fullName: BigInteger.op_LessThan(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThan(Int64, BigInteger)\n  nameWithType: BigInteger.op_LessThan(Int64, BigInteger)\n  fullName: BigInteger.op_LessThan(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThan(BigInteger, Int64)\n  nameWithType: BigInteger.op_LessThan(BigInteger, Int64)\n  fullName: BigInteger.op_LessThan(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThan(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_LessThan(BigInteger, BigInteger)\n  fullName: BigInteger.op_LessThan(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThanOrEqual(Int64, BigInteger)\n  nameWithType: BigInteger.op_LessThanOrEqual(Int64, BigInteger)\n  fullName: BigInteger.op_LessThanOrEqual(Int64, BigInteger)\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThanOrEqual(BigInteger, Int64)\n  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, Int64)\n  fullName: BigInteger.op_LessThanOrEqual(BigInteger, Int64)\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThanOrEqual(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, BigInteger)\n  fullName: BigInteger.op_LessThanOrEqual(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThanOrEqual(BigInteger, UInt64)\n  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, UInt64)\n  fullName: BigInteger.op_LessThanOrEqual(BigInteger, UInt64)\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThanOrEqual(UInt64, BigInteger)\n  nameWithType: BigInteger.op_LessThanOrEqual(UInt64, BigInteger)\n  fullName: BigInteger.op_LessThanOrEqual(UInt64, BigInteger)\n- uid: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Modulus(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Modulus(BigInteger, BigInteger)\n  fullName: BigInteger.op_Modulus(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Multiply(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Multiply(BigInteger, BigInteger)\n  fullName: BigInteger.op_Multiply(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_OnesComplement(BigInteger)\n  nameWithType: BigInteger.op_OnesComplement(BigInteger)\n  fullName: BigInteger.op_OnesComplement(BigInteger)\n- uid: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_RightShift(BigInteger, Int32)\n  nameWithType: BigInteger.op_RightShift(BigInteger, Int32)\n  fullName: BigInteger.op_RightShift(BigInteger, Int32)\n- uid: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Subtraction(BigInteger, BigInteger)\n  nameWithType: BigInteger.op_Subtraction(BigInteger, BigInteger)\n  fullName: BigInteger.op_Subtraction(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_UnaryNegation(BigInteger)\n  nameWithType: BigInteger.op_UnaryNegation(BigInteger)\n  fullName: BigInteger.op_UnaryNegation(BigInteger)\n- uid: System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_UnaryPlus(BigInteger)\n  nameWithType: BigInteger.op_UnaryPlus(BigInteger)\n  fullName: BigInteger.op_UnaryPlus(BigInteger)\n- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Parse(String, NumberStyles, IFormatProvider)\n  nameWithType: BigInteger.Parse(String, NumberStyles, IFormatProvider)\n  fullName: BigInteger.Parse(String, NumberStyles, IFormatProvider)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Globalization.NumberStyles\n  parent: System.Globalization\n  isExternal: false\n  name: NumberStyles\n  nameWithType: NumberStyles\n  fullName: System.Globalization.NumberStyles\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  nameWithType: IFormatProvider\n  fullName: System.IFormatProvider\n- uid: System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Parse(String, IFormatProvider)\n  nameWithType: BigInteger.Parse(String, IFormatProvider)\n  fullName: BigInteger.Parse(String, IFormatProvider)\n- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Parse(String, NumberStyles)\n  nameWithType: BigInteger.Parse(String, NumberStyles)\n  fullName: BigInteger.Parse(String, NumberStyles)\n- uid: System.Numerics.BigInteger.Parse(System.String)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Parse(String)\n  nameWithType: BigInteger.Parse(String)\n  fullName: BigInteger.Parse(String)\n- uid: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Pow(BigInteger, Int32)\n  nameWithType: BigInteger.Pow(BigInteger, Int32)\n  fullName: BigInteger.Pow(BigInteger, Int32)\n- uid: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Remainder(BigInteger, BigInteger)\n  nameWithType: BigInteger.Remainder(BigInteger, BigInteger)\n  fullName: BigInteger.Remainder(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.Sign\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Sign\n  nameWithType: BigInteger.Sign\n  fullName: BigInteger.Sign\n- uid: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Subtract(BigInteger, BigInteger)\n  nameWithType: BigInteger.Subtract(BigInteger, BigInteger)\n  fullName: BigInteger.Subtract(BigInteger, BigInteger)\n- uid: System.Numerics.BigInteger.ToByteArray\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: ToByteArray()\n  nameWithType: BigInteger.ToByteArray()\n  fullName: BigInteger.ToByteArray()\n- uid: System.Numerics.BigInteger.ToString\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: ToString()\n  nameWithType: BigInteger.ToString()\n  fullName: BigInteger.ToString()\n- uid: System.Numerics.BigInteger.ToString(System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: ToString(IFormatProvider)\n  nameWithType: BigInteger.ToString(IFormatProvider)\n  fullName: BigInteger.ToString(IFormatProvider)\n- uid: System.Numerics.BigInteger.ToString(System.String)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: ToString(String)\n  nameWithType: BigInteger.ToString(String)\n  fullName: BigInteger.ToString(String)\n- uid: System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: ToString(String, IFormatProvider)\n  nameWithType: BigInteger.ToString(String, IFormatProvider)\n  fullName: BigInteger.ToString(String, IFormatProvider)\n- uid: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: TryParse(String, NumberStyles, IFormatProvider, BigInteger)\n  nameWithType: BigInteger.TryParse(String, NumberStyles, IFormatProvider, BigInteger)\n  fullName: BigInteger.TryParse(String, NumberStyles, IFormatProvider, BigInteger)\n- uid: System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: TryParse(String, BigInteger)\n  nameWithType: BigInteger.TryParse(String, BigInteger)\n  fullName: BigInteger.TryParse(String, BigInteger)\n- uid: System.Numerics.BigInteger.Zero\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Zero\n  nameWithType: BigInteger.Zero\n  fullName: BigInteger.Zero\n- uid: System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: IComparable.CompareTo(Object)\n  nameWithType: BigInteger.IComparable.CompareTo(Object)\n  fullName: BigInteger.IComparable.CompareTo(Object)\n- uid: System.Numerics.BigInteger.#ctor*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: BigInteger\n  nameWithType: BigInteger.BigInteger\n  fullName: BigInteger.BigInteger\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Abs*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Abs\n  nameWithType: BigInteger.Abs\n  fullName: BigInteger.Abs\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Add*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Add\n  nameWithType: BigInteger.Add\n  fullName: BigInteger.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Compare*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Compare\n  nameWithType: BigInteger.Compare\n  fullName: BigInteger.Compare\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.CompareTo*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: CompareTo\n  nameWithType: BigInteger.CompareTo\n  fullName: BigInteger.CompareTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Divide*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Divide\n  nameWithType: BigInteger.Divide\n  fullName: BigInteger.Divide\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.DivRem*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: DivRem\n  nameWithType: BigInteger.DivRem\n  fullName: BigInteger.DivRem\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Equals*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Equals\n  nameWithType: BigInteger.Equals\n  fullName: BigInteger.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.GetHashCode*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: GetHashCode\n  nameWithType: BigInteger.GetHashCode\n  fullName: BigInteger.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.GreatestCommonDivisor*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: GreatestCommonDivisor\n  nameWithType: BigInteger.GreatestCommonDivisor\n  fullName: BigInteger.GreatestCommonDivisor\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.IsEven*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: IsEven\n  nameWithType: BigInteger.IsEven\n  fullName: BigInteger.IsEven\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.IsOne*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: IsOne\n  nameWithType: BigInteger.IsOne\n  fullName: BigInteger.IsOne\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.IsPowerOfTwo*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: IsPowerOfTwo\n  nameWithType: BigInteger.IsPowerOfTwo\n  fullName: BigInteger.IsPowerOfTwo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.IsZero*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: IsZero\n  nameWithType: BigInteger.IsZero\n  fullName: BigInteger.IsZero\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Log*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Log\n  nameWithType: BigInteger.Log\n  fullName: BigInteger.Log\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Log10*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Log10\n  nameWithType: BigInteger.Log10\n  fullName: BigInteger.Log10\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Max*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Max\n  nameWithType: BigInteger.Max\n  fullName: BigInteger.Max\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Min*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Min\n  nameWithType: BigInteger.Min\n  fullName: BigInteger.Min\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.MinusOne*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: MinusOne\n  nameWithType: BigInteger.MinusOne\n  fullName: BigInteger.MinusOne\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.ModPow*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: ModPow\n  nameWithType: BigInteger.ModPow\n  fullName: BigInteger.ModPow\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Multiply*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Multiply\n  nameWithType: BigInteger.Multiply\n  fullName: BigInteger.Multiply\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Negate*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Negate\n  nameWithType: BigInteger.Negate\n  fullName: BigInteger.Negate\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.One*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: One\n  nameWithType: BigInteger.One\n  fullName: BigInteger.One\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Addition*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Addition\n  nameWithType: BigInteger.op_Addition\n  fullName: BigInteger.op_Addition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_BitwiseAnd*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_BitwiseAnd\n  nameWithType: BigInteger.op_BitwiseAnd\n  fullName: BigInteger.op_BitwiseAnd\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_BitwiseOr*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_BitwiseOr\n  nameWithType: BigInteger.op_BitwiseOr\n  fullName: BigInteger.op_BitwiseOr\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Decrement*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Decrement\n  nameWithType: BigInteger.op_Decrement\n  fullName: BigInteger.op_Decrement\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Division*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Division\n  nameWithType: BigInteger.op_Division\n  fullName: BigInteger.op_Division\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Equality*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Equality\n  nameWithType: BigInteger.op_Equality\n  fullName: BigInteger.op_Equality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_ExclusiveOr*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_ExclusiveOr\n  nameWithType: BigInteger.op_ExclusiveOr\n  fullName: BigInteger.op_ExclusiveOr\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Explicit*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Explicit\n  nameWithType: BigInteger.op_Explicit\n  fullName: BigInteger.op_Explicit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_GreaterThan*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThan\n  nameWithType: BigInteger.op_GreaterThan\n  fullName: BigInteger.op_GreaterThan\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_GreaterThanOrEqual\n  nameWithType: BigInteger.op_GreaterThanOrEqual\n  fullName: BigInteger.op_GreaterThanOrEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Implicit*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Implicit\n  nameWithType: BigInteger.op_Implicit\n  fullName: BigInteger.op_Implicit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Increment*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Increment\n  nameWithType: BigInteger.op_Increment\n  fullName: BigInteger.op_Increment\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Inequality*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Inequality\n  nameWithType: BigInteger.op_Inequality\n  fullName: BigInteger.op_Inequality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_LeftShift*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LeftShift\n  nameWithType: BigInteger.op_LeftShift\n  fullName: BigInteger.op_LeftShift\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_LessThan*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThan\n  nameWithType: BigInteger.op_LessThan\n  fullName: BigInteger.op_LessThan\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_LessThanOrEqual*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_LessThanOrEqual\n  nameWithType: BigInteger.op_LessThanOrEqual\n  fullName: BigInteger.op_LessThanOrEqual\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Modulus*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Modulus\n  nameWithType: BigInteger.op_Modulus\n  fullName: BigInteger.op_Modulus\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Multiply*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Multiply\n  nameWithType: BigInteger.op_Multiply\n  fullName: BigInteger.op_Multiply\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_OnesComplement*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_OnesComplement\n  nameWithType: BigInteger.op_OnesComplement\n  fullName: BigInteger.op_OnesComplement\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_RightShift*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_RightShift\n  nameWithType: BigInteger.op_RightShift\n  fullName: BigInteger.op_RightShift\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_Subtraction*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_Subtraction\n  nameWithType: BigInteger.op_Subtraction\n  fullName: BigInteger.op_Subtraction\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_UnaryNegation*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_UnaryNegation\n  nameWithType: BigInteger.op_UnaryNegation\n  fullName: BigInteger.op_UnaryNegation\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.op_UnaryPlus*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: op_UnaryPlus\n  nameWithType: BigInteger.op_UnaryPlus\n  fullName: BigInteger.op_UnaryPlus\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Parse*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Parse\n  nameWithType: BigInteger.Parse\n  fullName: BigInteger.Parse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Pow*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Pow\n  nameWithType: BigInteger.Pow\n  fullName: BigInteger.Pow\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Remainder*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Remainder\n  nameWithType: BigInteger.Remainder\n  fullName: BigInteger.Remainder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Sign*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Sign\n  nameWithType: BigInteger.Sign\n  fullName: BigInteger.Sign\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Subtract*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Subtract\n  nameWithType: BigInteger.Subtract\n  fullName: BigInteger.Subtract\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.ToByteArray*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: ToByteArray\n  nameWithType: BigInteger.ToByteArray\n  fullName: BigInteger.ToByteArray\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.ToString*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: ToString\n  nameWithType: BigInteger.ToString\n  fullName: BigInteger.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.TryParse*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: TryParse\n  nameWithType: BigInteger.TryParse\n  fullName: BigInteger.TryParse\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.Zero*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: Zero\n  nameWithType: BigInteger.Zero\n  fullName: BigInteger.Zero\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.Numerics.BigInteger.System#IComparable#CompareTo*\n  parent: System.Numerics.BigInteger\n  isExternal: false\n  name: System.IComparable.CompareTo\n  nameWithType: BigInteger.System.IComparable.CompareTo\n  fullName: BigInteger.System.IComparable.CompareTo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  nameWithType: IComparable\n  fullName: System.IComparable\n- uid: System.IComparable`1\n  name: IComparable<T>\n  nameWithType: IComparable<T>\n  fullName: System.IComparable<T>\n- uid: System.IComparable{System.Numerics.BigInteger}\n  parent: System\n  isExternal: false\n  name: IComparable<BigInteger>\n  nameWithType: IComparable<BigInteger>\n  fullName: System.IComparable<System.Numerics.BigInteger>\n  spec.csharp:\n  - uid: System.IComparable`1\n    name: IComparable\n    nameWithType: IComparable\n    fullName: System.IComparable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Numerics.BigInteger\n    name: BigInteger\n    nameWithType: BigInteger\n    fullName: System.Numerics.BigInteger\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IEquatable`1\n  name: IEquatable<T>\n  nameWithType: IEquatable<T>\n  fullName: System.IEquatable<T>\n- uid: System.IEquatable{System.Numerics.BigInteger}\n  parent: System\n  isExternal: false\n  name: IEquatable<BigInteger>\n  nameWithType: IEquatable<BigInteger>\n  fullName: System.IEquatable<System.Numerics.BigInteger>\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Numerics.BigInteger\n    name: BigInteger\n    nameWithType: BigInteger\n    fullName: System.Numerics.BigInteger\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  nameWithType: IFormattable\n  fullName: System.IFormattable\n"}