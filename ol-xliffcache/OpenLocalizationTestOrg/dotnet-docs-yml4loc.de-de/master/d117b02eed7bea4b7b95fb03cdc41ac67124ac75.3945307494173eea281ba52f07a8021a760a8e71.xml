{"nodes":[{"content":"Provides credential settings for a secure conversation service.","nodes":[{"pos":[0,63],"content":"Provides credential settings for a secure conversation service.","nodes":[{"content":"Provides credential settings for a secure conversation service.","pos":[0,63]}]}],"pos":[725,789],"yaml":true},{"content":"Secure conversations involve the exchange of multiple messages and use a Security Context Token (SCT) to ensure security. The SCT is shared among the communicating parties for the lifetime of a communications session. A service can issue two different kinds of SCTs:  \n  \n-   The first is a session-based SCT that contains a unique id. Messages carry only the id, and the service maintains a state-mapping cache that maps between the SCT ids and contents (such as claims, security keys, and so on). A well-behaved client must send an SCT cancellation to help the service optimize the cache resources. If you instantiate this class by calling <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> with the `requireCancellation` parameter equal to `true`, the SCT is issued in this manner.  \n  \n-   The second is a self-contained SCT that resides in a cookie on the client. This SCT contains the entire state information, so requires neither state management from the service nor SCT cancellation from the client. This is sometimes called a \"cookie-mode\" SCT. Because the SCT contains the entire state information, its size is larger than in the session-based case. With session-based SCTs, the service stores much of the state information. However, because it is self-contained, it can be used across service lifetime and persists across service shutdown and restart.","nodes":[{"pos":[0,266],"content":"Secure conversations involve the exchange of multiple messages and use a Security Context Token (SCT) to ensure security. The SCT is shared among the communicating parties for the lifetime of a communications session. A service can issue two different kinds of SCTs:","nodes":[{"content":"Secure conversations involve the exchange of multiple messages and use a Security Context Token (SCT) to ensure security. The SCT is shared among the communicating parties for the lifetime of a communications session. A service can issue two different kinds of SCTs:","pos":[0,266],"nodes":[{"content":"Secure conversations involve the exchange of multiple messages and use a Security Context Token (SCT) to ensure security.","pos":[0,121]},{"content":"The SCT is shared among the communicating parties for the lifetime of a communications session.","pos":[122,217]},{"content":"A service can issue two different kinds of SCTs:","pos":[218,266]}]}]},{"pos":[276,834],"content":"The first is a session-based SCT that contains a unique id. Messages carry only the id, and the service maintains a state-mapping cache that maps between the SCT ids and contents (such as claims, security keys, and so on). A well-behaved client must send an SCT cancellation to help the service optimize the cache resources. If you instantiate this class by calling <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> with the `requireCancellation` parameter equal to `true`, the SCT is issued in this manner.","nodes":[{"content":"The first is a session-based SCT that contains a unique id.","pos":[0,59]},{"content":"Messages carry only the id, and the service maintains a state-mapping cache that maps between the SCT ids and contents (such as claims, security keys, and so on).","pos":[60,222]},{"content":"A well-behaved client must send an SCT cancellation to help the service optimize the cache resources.","pos":[223,324]},{"content":"If you instantiate this class by calling <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A&gt;</ph> with the <ph id=\"ph2\">`requireCancellation`</ph> parameter equal to <ph id=\"ph3\">`true`</ph>, the SCT is issued in this manner.","pos":[325,558],"source":" If you instantiate this class by calling <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> with the `requireCancellation` parameter equal to `true`, the SCT is issued in this manner."}]},{"pos":[844,1413],"content":"The second is a self-contained SCT that resides in a cookie on the client. This SCT contains the entire state information, so requires neither state management from the service nor SCT cancellation from the client. This is sometimes called a \"cookie-mode\" SCT. Because the SCT contains the entire state information, its size is larger than in the session-based case. With session-based SCTs, the service stores much of the state information. However, because it is self-contained, it can be used across service lifetime and persists across service shutdown and restart.","nodes":[{"content":"The second is a self-contained SCT that resides in a cookie on the client. This SCT contains the entire state information, so requires neither state management from the service nor SCT cancellation from the client. This is sometimes called a \"cookie-mode\" SCT. Because the SCT contains the entire state information, its size is larger than in the session-based case. With session-based SCTs, the service stores much of the state information. However, because it is self-contained, it can be used across service lifetime and persists across service shutdown and restart.","pos":[0,569],"nodes":[{"content":"The second is a self-contained SCT that resides in a cookie on the client.","pos":[0,74]},{"content":"This SCT contains the entire state information, so requires neither state management from the service nor SCT cancellation from the client.","pos":[75,214]},{"content":"This is sometimes called a \"cookie-mode\" SCT.","pos":[215,260]},{"content":"Because the SCT contains the entire state information, its size is larger than in the session-based case.","pos":[261,366]},{"content":"With session-based SCTs, the service stores much of the state information.","pos":[367,441]},{"content":"However, because it is self-contained, it can be used across service lifetime and persists across service shutdown and restart.","pos":[442,569]}]}]}],"pos":[800,2222],"yaml":true,"extradata":"MT"},{"content":"Gets a collection of the <xref href=\"System.Type\"></xref> claims for cookie serialization.","nodes":[{"pos":[0,90],"content":"Gets a collection of the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> claims for cookie serialization.","source":"Gets a collection of the <xref href=\"System.Type\"></xref> claims for cookie serialization."}],"pos":[3793,3884],"yaml":true},{"content":"To serialize claims into SCT cookies, [!INCLUDE[indigo1](~/includes/indigo1-md.md)] uses <xref:System.Runtime.Serialization.DataContractSerializer> as the default. Because the Claim resource is extensible, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] allows you to provide a list of known resource types. This assists the <xref:System.Runtime.Serialization.DataContractSerializer> during deserialization of the claims in the cookie so that it can return the original strongly-typed objects.","nodes":[{"pos":[0,491],"content":"To serialize claims into SCT cookies, [!INCLUDE[indigo1](~/includes/indigo1-md.md)] uses <xref:System.Runtime.Serialization.DataContractSerializer> as the default. Because the Claim resource is extensible, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] allows you to provide a list of known resource types. This assists the <xref:System.Runtime.Serialization.DataContractSerializer> during deserialization of the claims in the cookie so that it can return the original strongly-typed objects.","nodes":[{"content":"To serialize claims into SCT cookies, <ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> uses <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> as the default.","pos":[0,163],"source":"To serialize claims into SCT cookies, [!INCLUDE[indigo1](~/includes/indigo1-md.md)] uses <xref:System.Runtime.Serialization.DataContractSerializer> as the default."},{"content":"Because the Claim resource is extensible, <ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> allows you to provide a list of known resource types.","pos":[164,305],"source":" Because the Claim resource is extensible, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] allows you to provide a list of known resource types."},{"content":"This assists the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.DataContractSerializer&gt;</ph> during deserialization of the claims in the cookie so that it can return the original strongly-typed objects.","pos":[306,491],"source":" This assists the <xref:System.Runtime.Serialization.DataContractSerializer> during deserialization of the claims in the cookie so that it can return the original strongly-typed objects."}]}],"pos":[3895,4387],"yaml":true,"extradata":"MT"},{"content":"A collection of the <xref href=\"System.Type\"></xref> claims for cookie serialization.","nodes":[{"pos":[0,85],"content":"A collection of the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> claims for cookie serialization.","source":"A collection of the <xref href=\"System.Type\"></xref> claims for cookie serialization."}],"pos":[4832,4918],"yaml":true},{"content":"Gets or sets a customized <xref href=\"System.ServiceModel.Security.SecurityStateEncoder\"></xref> for encoding and decoding cookie serialization.","nodes":[{"pos":[0,144],"content":"Gets or sets a customized <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Security.SecurityStateEncoder\"&gt;&lt;/xref&gt;</ph> for encoding and decoding cookie serialization.","source":"Gets or sets a customized <xref href=\"System.ServiceModel.Security.SecurityStateEncoder\"></xref> for encoding and decoding cookie serialization."}],"pos":[6157,6302],"yaml":true},{"content":"In \"cookie mode\", a service issues the client a security context token (SCT) in the form of a cookie to the client so that it does not have to maintain any security state. The client sends the cookie back in the request message so that the service knows how to unprotect and verify the request message. Because the SCT is often transmitted over a non-secure network, it must be protected.  \n  \n By default, [!INCLUDE[indigo1](~/includes/indigo1-md.md)] uses the <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> class to protect the cookie using the Data Protection API (DPAPI). For DPAPI to work in a Web farm environment, all the backend services must run as the same domain user account. In other words, if the service is Web hosted, then the Internet Information Services (IIS) worker process must be configured to run as a domain user.  \n  \n This property enables you to use a customized <xref:System.ServiceModel.Security.SecurityStateEncoder> to encrypt and decrypt the cookie and not depend on DPAPI.","nodes":[{"pos":[0,388],"content":"In \"cookie mode\", a service issues the client a security context token (SCT) in the form of a cookie to the client so that it does not have to maintain any security state. The client sends the cookie back in the request message so that the service knows how to unprotect and verify the request message. Because the SCT is often transmitted over a non-secure network, it must be protected.","nodes":[{"content":"In \"cookie mode\", a service issues the client a security context token (SCT) in the form of a cookie to the client so that it does not have to maintain any security state. The client sends the cookie back in the request message so that the service knows how to unprotect and verify the request message. Because the SCT is often transmitted over a non-secure network, it must be protected.","pos":[0,388],"nodes":[{"content":"In \"cookie mode\", a service issues the client a security context token (SCT) in the form of a cookie to the client so that it does not have to maintain any security state.","pos":[0,171]},{"content":"The client sends the cookie back in the request message so that the service knows how to unprotect and verify the request message.","pos":[172,302]},{"content":"Because the SCT is often transmitted over a non-secure network, it must be protected.","pos":[303,388]}]}]},{"pos":[395,861],"content":"By default, [!INCLUDE[indigo1](~/includes/indigo1-md.md)] uses the <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> class to protect the cookie using the Data Protection API (DPAPI). For DPAPI to work in a Web farm environment, all the backend services must run as the same domain user account. In other words, if the service is Web hosted, then the Internet Information Services (IIS) worker process must be configured to run as a domain user.","nodes":[{"content":"By default, <ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> uses the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder&gt;</ph> class to protect the cookie using the Data Protection API (DPAPI).","pos":[0,204],"source":"By default, [!INCLUDE[indigo1](~/includes/indigo1-md.md)] uses the <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> class to protect the cookie using the Data Protection API (DPAPI)."},{"content":"For DPAPI to work in a Web farm environment, all the backend services must run as the same domain user account.","pos":[205,316]},{"content":"In other words, if the service is Web hosted, then the Internet Information Services (IIS) worker process must be configured to run as a domain user.","pos":[317,466]}]},{"pos":[868,1029],"content":"This property enables you to use a customized <xref:System.ServiceModel.Security.SecurityStateEncoder> to encrypt and decrypt the cookie and not depend on DPAPI.","nodes":[{"content":"This property enables you to use a customized <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.SecurityStateEncoder&gt;</ph> to encrypt and decrypt the cookie and not depend on DPAPI.","pos":[0,161],"source":"This property enables you to use a customized <xref:System.ServiceModel.Security.SecurityStateEncoder> to encrypt and decrypt the cookie and not depend on DPAPI."}]}],"pos":[6313,7351],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ServiceModel.Security.SecurityStateEncoder\"></xref> object, which is a customization of <xref href=\"System.ServiceModel.Security.DataProtectionSecurityStateEncoder\"></xref>.","nodes":[{"pos":[0,194],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Security.SecurityStateEncoder\"&gt;&lt;/xref&gt;</ph> object, which is a customization of <ph id=\"ph2\">&lt;xref href=\"System.ServiceModel.Security.DataProtectionSecurityStateEncoder\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.ServiceModel.Security.SecurityStateEncoder\"></xref> object, which is a customization of <xref href=\"System.ServiceModel.Security.DataProtectionSecurityStateEncoder\"></xref>."}],"pos":[7793,7988],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Security.SecureConversationServiceCredential\n  commentId: T:System.ServiceModel.Security.SecureConversationServiceCredential\n  id: SecureConversationServiceCredential\n  children:\n  - System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes\n  - System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder\n  langs:\n  - csharp\n  name: SecureConversationServiceCredential\n  nameWithType: SecureConversationServiceCredential\n  fullName: System.ServiceModel.Security.SecureConversationServiceCredential\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Provides credential settings for a secure conversation service.\n  remarks: \"Secure conversations involve the exchange of multiple messages and use a Security Context Token (SCT) to ensure security. The SCT is shared among the communicating parties for the lifetime of a communications session. A service can issue two different kinds of SCTs:  \\n  \\n-   The first is a session-based SCT that contains a unique id. Messages carry only the id, and the service maintains a state-mapping cache that maps between the SCT ids and contents (such as claims, security keys, and so on). A well-behaved client must send an SCT cancellation to help the service optimize the cache resources. If you instantiate this class by calling <xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A> with the `requireCancellation` parameter equal to `true`, the SCT is issued in this manner.  \\n  \\n-   The second is a self-contained SCT that resides in a cookie on the client. This SCT contains the entire state information, so requires neither state management from the service nor SCT cancellation from the client. This is sometimes called a \\\"cookie-mode\\\" SCT. Because the SCT contains the entire state information, its size is larger than in the session-based case. With session-based SCTs, the service stores much of the state information. However, because it is self-contained, it can be used across service lifetime and persists across service shutdown and restart.\"\n  syntax:\n    content: public sealed class SecureConversationServiceCredential\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/SecureConversationServiceCredential.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes\n  commentId: P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes\n  id: SecurityContextClaimTypes\n  parent: System.ServiceModel.Security.SecureConversationServiceCredential\n  langs:\n  - csharp\n  name: SecurityContextClaimTypes\n  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes\n  fullName: SecureConversationServiceCredential.SecurityContextClaimTypes\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets a collection of the <xref href=\"System.Type\"></xref> claims for cookie serialization.\n  remarks: To serialize claims into SCT cookies, [!INCLUDE[indigo1](~/includes/indigo1-md.md)] uses <xref:System.Runtime.Serialization.DataContractSerializer> as the default. Because the Claim resource is extensible, [!INCLUDE[indigo2](~/includes/indigo2-md.md)] allows you to provide a list of known resource types. This assists the <xref:System.Runtime.Serialization.DataContractSerializer> during deserialization of the claims in the cookie so that it can return the original strongly-typed objects.\n  example:\n  - \"The following code shows how to get this property.  \\n  \\n [!code-csharp[S_UE_SecureConversationServiceCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#2)]\"\n  syntax:\n    content: public System.Collections.ObjectModel.Collection<Type> SecurityContextClaimTypes { get; }\n    return:\n      type: System.Collections.ObjectModel.Collection{System.Type}\n      description: A collection of the <xref href=\"System.Type\"></xref> claims for cookie serialization.\n  overload: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/SecureConversationServiceCredential.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder\n  commentId: P:System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder\n  id: SecurityStateEncoder\n  parent: System.ServiceModel.Security.SecureConversationServiceCredential\n  langs:\n  - csharp\n  name: SecurityStateEncoder\n  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder\n  fullName: SecureConversationServiceCredential.SecurityStateEncoder\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets or sets a customized <xref href=\"System.ServiceModel.Security.SecurityStateEncoder\"></xref> for encoding and decoding cookie serialization.\n  remarks: \"In \\\"cookie mode\\\", a service issues the client a security context token (SCT) in the form of a cookie to the client so that it does not have to maintain any security state. The client sends the cookie back in the request message so that the service knows how to unprotect and verify the request message. Because the SCT is often transmitted over a non-secure network, it must be protected.  \\n  \\n By default, [!INCLUDE[indigo1](~/includes/indigo1-md.md)] uses the <xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> class to protect the cookie using the Data Protection API (DPAPI). For DPAPI to work in a Web farm environment, all the backend services must run as the same domain user account. In other words, if the service is Web hosted, then the Internet Information Services (IIS) worker process must be configured to run as a domain user.  \\n  \\n This property enables you to use a customized <xref:System.ServiceModel.Security.SecurityStateEncoder> to encrypt and decrypt the cookie and not depend on DPAPI.\"\n  example:\n  - \"The following code shows how to set this property.  \\n  \\n [!code-csharp[S_UE_SecureConversationServiceCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_secureconversationservicecredential/cs/source.cs#1)]\"\n  syntax:\n    content: public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }\n    return:\n      type: System.ServiceModel.Security.SecurityStateEncoder\n      description: A <xref href=\"System.ServiceModel.Security.SecurityStateEncoder\"></xref> object, which is a customization of <xref href=\"System.ServiceModel.Security.DataProtectionSecurityStateEncoder\"></xref>.\n  overload: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/SecureConversationServiceCredential.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes\n  parent: System.ServiceModel.Security.SecureConversationServiceCredential\n  isExternal: false\n  name: SecurityContextClaimTypes\n  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes\n  fullName: SecureConversationServiceCredential.SecurityContextClaimTypes\n- uid: System.Collections.ObjectModel.Collection`1\n  name: Collection<T>\n  nameWithType: Collection<T>\n  fullName: System.Collections.ObjectModel.Collection<T>\n- uid: System.Type\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.ObjectModel.Collection{System.Type}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: Collection<Type>\n  nameWithType: Collection<Type>\n  fullName: System.Collections.ObjectModel.Collection<System.Type>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.Collection`1\n    name: Collection\n    nameWithType: Collection\n    fullName: System.Collections.ObjectModel.Collection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder\n  parent: System.ServiceModel.Security.SecureConversationServiceCredential\n  isExternal: false\n  name: SecurityStateEncoder\n  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder\n  fullName: SecureConversationServiceCredential.SecurityStateEncoder\n- uid: System.ServiceModel.Security.SecurityStateEncoder\n  parent: System.ServiceModel.Security\n  isExternal: false\n  name: SecurityStateEncoder\n  nameWithType: SecurityStateEncoder\n  fullName: System.ServiceModel.Security.SecurityStateEncoder\n- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes*\n  parent: System.ServiceModel.Security.SecureConversationServiceCredential\n  isExternal: false\n  name: SecurityContextClaimTypes\n  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes\n  fullName: SecureConversationServiceCredential.SecurityContextClaimTypes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/SecureConversationServiceCredential.xml\n- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder*\n  parent: System.ServiceModel.Security.SecureConversationServiceCredential\n  isExternal: false\n  name: SecurityStateEncoder\n  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder\n  fullName: SecureConversationServiceCredential.SecurityStateEncoder\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/SecureConversationServiceCredential.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}