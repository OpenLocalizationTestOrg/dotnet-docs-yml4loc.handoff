{"nodes":[{"content":"Represents the method that will handle the <xref href=\"System.Windows.Forms.ToolBar.ButtonClick\"></xref> event of a <xref href=\"System.Windows.Forms.ToolBar\"></xref>.","nodes":[{"pos":[0,166],"content":"Represents the method that will handle the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.ToolBar.ButtonClick\"&gt;&lt;/xref&gt;</ph> event of a <ph id=\"ph2\">&lt;xref href=\"System.Windows.Forms.ToolBar\"&gt;&lt;/xref&gt;</ph>.","source":"Represents the method that will handle the <xref href=\"System.Windows.Forms.ToolBar.ButtonClick\"></xref> event of a <xref href=\"System.Windows.Forms.ToolBar\"></xref>."}],"pos":[470,637],"yaml":true},{"content":"When you create a <xref:System.Windows.Forms.ToolBarButtonClickEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f).","nodes":[{"pos":[0,464],"content":"When you create a <xref:System.Windows.Forms.ToolBarButtonClickEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f).","nodes":[{"content":"When you create a <ph id=\"ph1\">&lt;xref:System.Windows.Forms.ToolBarButtonClickEventHandler&gt;</ph> delegate, you identify the method that will handle the event.","pos":[0,138],"source":"When you create a <xref:System.Windows.Forms.ToolBarButtonClickEventHandler> delegate, you identify the method that will handle the event."},{"content":"To associate the event with your event handler, add an instance of the delegate to the event.","pos":[139,232]},{"content":"The event handler is called whenever the event occurs, unless you remove the delegate.","pos":[233,319]},{"content":"For more information about handling events with delegates, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.","pos":[320,464],"source":" For more information about handling events with delegates, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)."}]}],"pos":[648,1113],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.ToolBarButtonClickEventHandler\n  commentId: T:System.Windows.Forms.ToolBarButtonClickEventHandler\n  id: ToolBarButtonClickEventHandler\n  langs:\n  - csharp\n  name: ToolBarButtonClickEventHandler\n  nameWithType: ToolBarButtonClickEventHandler\n  fullName: System.Windows.Forms.ToolBarButtonClickEventHandler\n  type: Delegate\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Represents the method that will handle the <xref href=\"System.Windows.Forms.ToolBar.ButtonClick\"></xref> event of a <xref href=\"System.Windows.Forms.ToolBar\"></xref>.\n  remarks: When you create a <xref:System.Windows.Forms.ToolBarButtonClickEventHandler> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f).\n  example:\n  - \"The following example instantiates a <xref:System.Windows.Forms.ToolBar> and three <xref:System.Windows.Forms.ToolBarButton> controls. The toolbar buttons are assigned to the button collection, the collection is assigned to the toolbar, and the toolbar is added to the form. On the <xref:System.Windows.Forms.ToolBar.ButtonClick> event of the toolbar, the <xref:System.Windows.Forms.ToolBarButtonClickEventArgs.Button%2A> property of the <xref:System.Windows.Forms.ToolBarButtonClickEventArgs> is evaluated, and the appropriate dialog opened. This code assumes that a <xref:System.Windows.Forms.Form>, an <xref:System.Windows.Forms.OpenFileDialog>, a <xref:System.Windows.Forms.SaveFileDialog>, and a <xref:System.Windows.Forms.PrintDialog> have been instantiated.  \\n  \\n [!code-cpp[Classic ToolBar.ToolBar Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBar Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ToolBar.ToolBar Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBar Example/CS/source.cs#1)]\\n [!code-vb[Classic ToolBar.ToolBar Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBar Example/VB/source.vb#1)]\"\n  syntax:\n    content: public delegate void ToolBarButtonClickEventHandler(object sender, ToolBarButtonClickEventArgs e);\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/ToolBarButtonClickEventHandler.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}