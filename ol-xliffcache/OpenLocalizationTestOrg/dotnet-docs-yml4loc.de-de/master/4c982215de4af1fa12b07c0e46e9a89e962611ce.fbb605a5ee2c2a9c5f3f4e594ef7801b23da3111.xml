{"nodes":[{"content":"Provides a property and methods for writing event and exception information to the application's log listeners.","nodes":[{"pos":[0,111],"content":"Provides a property and methods for writing event and exception information to the application's log listeners.","nodes":[{"content":"Provides a property and methods for writing event and exception information to the application's log listeners.","pos":[0,111]}]}],"pos":[1241,1353],"yaml":true},{"content":"The `My.Application.Log` object provides a straightforward entry point from which to access the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]'s logging services. The `WriteEntry` and `WriteException` methods write messages to the application's log listeners. The listeners can be configured by the application's configuration file. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) and [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n The `My.Application.Log` object is available only for client applications. For Web applications, use `My.Log`. For more information, see <xref:Microsoft.VisualBasic.Logging.AspLog>.  \n  \n The following table lists examples of tasks involving the `My.Application.Log` object.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \n|Write exception information to the application's log listeners|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \n|Determine where `My.Application.Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|","nodes":[{"pos":[0,687],"content":"The `My.Application.Log` object provides a straightforward entry point from which to access the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]'s logging services. The `WriteEntry` and `WriteException` methods write messages to the application's log listeners. The listeners can be configured by the application's configuration file. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) and [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).","nodes":[{"content":"The <ph id=\"ph1\">`My.Application.Log`</ph> object provides a straightforward entry point from which to access the <ph id=\"ph2\">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph>'s logging services.","pos":[0,169],"source":"The `My.Application.Log` object provides a straightforward entry point from which to access the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]'s logging services."},{"content":"The <ph id=\"ph1\">`WriteEntry`</ph> and <ph id=\"ph2\">`WriteException`</ph> methods write messages to the application's log listeners.","pos":[170,266],"source":" The `WriteEntry` and `WriteException` methods write messages to the application's log listeners."},{"content":"The listeners can be configured by the application's configuration file.","pos":[267,339]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Walkthrough: Changing Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)</ept> and <bpt id=\"p2\">[</bpt>Working with Application Logs<ept id=\"p2\">](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)</ept>.","pos":[340,687],"source":" For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) and [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)."}]},{"pos":[694,875],"content":"The `My.Application.Log` object is available only for client applications. For Web applications, use `My.Log`. For more information, see <xref:Microsoft.VisualBasic.Logging.AspLog>.","nodes":[{"content":"The <ph id=\"ph1\">`My.Application.Log`</ph> object is available only for client applications.","pos":[0,74],"source":"The `My.Application.Log` object is available only for client applications."},{"content":"For Web applications, use <ph id=\"ph1\">`My.Log`</ph>.","pos":[75,110],"source":" For Web applications, use `My.Log`."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.AspLog&gt;</ph>.","pos":[111,181],"source":" For more information, see <xref:Microsoft.VisualBasic.Logging.AspLog>."}]},{"pos":[882,968],"content":"The following table lists examples of tasks involving the <ph id=\"ph1\">`My.Application.Log`</ph> object.","source":"The following table lists examples of tasks involving the `My.Application.Log` object."},{"pos":[975,977],"content":"To","nodes":[{"content":"To","pos":[0,2]}]},{"pos":[978,981],"content":"See","nodes":[{"content":"See","pos":[0,3]}]},{"pos":[1009,1067],"content":"Write event information to the application's log listeners","nodes":[{"content":"Write event information to the application's log listeners","pos":[0,58]}]},{"pos":[1068,1183],"content":"<bpt id=\"p1\">[</bpt>How to: Write Log Messages<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)</ept>","source":"[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)"},{"pos":[1188,1250],"content":"Write exception information to the application's log listeners","nodes":[{"content":"Write exception information to the application's log listeners","pos":[0,62]}]},{"pos":[1251,1358],"content":"<bpt id=\"p1\">[</bpt>How to: Log Exceptions<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)</ept>","source":"[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)"},{"pos":[1363,1418],"content":"Determine where <ph id=\"ph1\">`My.Application.Log`</ph> writes information","source":"Determine where `My.Application.Log` writes information"},{"pos":[1419,1618],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>","source":"[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)"}],"pos":[1364,2996],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.Log\"></xref> class.","nodes":[{"pos":[0,95],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.Log\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.Log\"></xref> class."}],"pos":[4691,4787],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.Log\"></xref> class.","nodes":[{"pos":[0,95],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.Log\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.Log\"></xref> class."}],"pos":[5846,5942],"yaml":true},{"content":"<xref href=\"System.String\"></xref>. The name to give to the <xref href=\"Microsoft.VisualBasic.Logging.Log.TraceSource\"></xref> property object.","nodes":[{"pos":[0,143],"content":"<xref href=\"System.String\"></xref>. The name to give to the <xref href=\"Microsoft.VisualBasic.Logging.Log.TraceSource\"></xref> property object.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph>.","pos":[0,35],"source":"<xref href=\"System.String\"></xref>."},{"content":"The name to give to the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.Log.TraceSource\"&gt;&lt;/xref&gt;</ph> property object.","pos":[36,143],"source":" The name to give to the <xref href=\"Microsoft.VisualBasic.Logging.Log.TraceSource\"></xref> property object."}]}],"pos":[6067,6211],"yaml":true},{"content":"Gets the file the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object that underlies the `Log` object.","nodes":[{"pos":[0,129],"content":"Gets the file the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"&gt;&lt;/xref&gt;</ph> object that underlies the <ph id=\"ph2\">`Log`</ph> object.","source":"Gets the file the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object that underlies the `Log` object."}],"pos":[7235,7365],"yaml":true},{"content":"You can use this property to determine the current configuration of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.","nodes":[{"pos":[0,137],"content":"You can use this property to determine the current configuration of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object.","nodes":[{"content":"You can use this property to determine the current configuration of the <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> object.","pos":[0,137],"source":"You can use this property to determine the current configuration of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object."}]},{"pos":[144,318],"content":"In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.","nodes":[{"content":"In client applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Application.Log`</ph> object.","pos":[0,94],"source":"In client applications, the `Log` object is available through the `My.Application.Log` object."},{"content":"In Web applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Log`</ph> object.","pos":[95,174],"source":" In Web applications, the `Log` object is available through the `My.Log` object."}]}],"pos":[7376,7699],"yaml":true,"extradata":"MT"},{"content":"Returns the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object that underlies the `Log` object.","nodes":[{"pos":[0,123],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"&gt;&lt;/xref&gt;</ph> object that underlies the <ph id=\"ph2\">`Log`</ph> object.","source":"Returns the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object that underlies the `Log` object."}],"pos":[7964,8088],"yaml":true},{"content":"Creates a new <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object and adds it to the <xref href=\"System.Diagnostics.TraceSource.Listeners\"></xref> collection.","nodes":[{"pos":[0,185],"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"&gt;&lt;/xref&gt;</ph> object and adds it to the <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.TraceSource.Listeners\"&gt;&lt;/xref&gt;</ph> collection.","source":"Creates a new <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object and adds it to the <xref href=\"System.Diagnostics.TraceSource.Listeners\"></xref> collection."}],"pos":[9308,9494],"yaml":true},{"content":"This method creates a new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, sets its name to `FileLog`, and configures it to log messages with severity level <xref:System.Diagnostics.SourceLevels.Information> and greater. The new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object is then added to the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.  \n  \n The <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> calls the method if the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> property has not been configured. The trace source can be configured in the application's configuration file.","nodes":[{"pos":[0,387],"content":"This method creates a new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, sets its name to `FileLog`, and configures it to log messages with severity level <xref:System.Diagnostics.SourceLevels.Information> and greater. The new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object is then added to the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.","nodes":[{"content":"This method creates a new <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph>, sets its name to <ph id=\"ph2\">`FileLog`</ph>, and configures it to log messages with severity level <ph id=\"ph3\">&lt;xref:System.Diagnostics.SourceLevels.Information&gt;</ph> and greater.","pos":[0,230],"source":"This method creates a new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, sets its name to `FileLog`, and configures it to log messages with severity level <xref:System.Diagnostics.SourceLevels.Information> and greater."},{"content":"The new <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.FileLogTraceListener&gt;</ph> object is then added to the <ph id=\"ph2\">&lt;xref:System.Diagnostics.TraceSource.Listeners%2A&gt;</ph> collection.","pos":[231,387],"source":" The new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object is then added to the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection."}]},{"pos":[394,639],"content":"The <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> calls the method if the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> property has not been configured. The trace source can be configured in the application's configuration file.","nodes":[{"content":"The <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> calls the method if the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> property has not been configured. The trace source can be configured in the application's configuration file.","pos":[0,245],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A&gt;</ph> calls the method if the <ph id=\"ph2\">&lt;xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A&gt;</ph> property has not been configured.","pos":[0,169],"source":"The <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> calls the method if the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> property has not been configured."},{"content":"The trace source can be configured in the application's configuration file.","pos":[170,245]}]}]}],"pos":[9505,10149],"yaml":true,"extradata":"MT"},{"content":"Gets to the <xref href=\"System.Diagnostics.TraceSource\"></xref> object that underlies the `Log` object.","nodes":[{"pos":[0,103],"content":"Gets to the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceSource\"&gt;&lt;/xref&gt;</ph> object that underlies the <ph id=\"ph2\">`Log`</ph> object.","source":"Gets to the <xref href=\"System.Diagnostics.TraceSource\"></xref> object that underlies the `Log` object."}],"pos":[11266,11370],"yaml":true},{"content":"You can use this property to determine the current configuration of the `Log` object.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n This is an advanced member; it does not show in IntelliSense unless you select the **All** tab.  \n  \n The following table lists an example of a task involving the `TraceSource` property.  \n  \n|To|See|  \n|--------|---------|  \n|Get information for each of the `Log` object's log listeners.|[Troubleshooting: Log Listeners](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|","nodes":[{"pos":[0,85],"content":"You can use this property to determine the current configuration of the <ph id=\"ph1\">`Log`</ph> object.","source":"You can use this property to determine the current configuration of the `Log` object."},{"pos":[92,266],"content":"In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.","nodes":[{"content":"In client applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Application.Log`</ph> object.","pos":[0,94],"source":"In client applications, the `Log` object is available through the `My.Application.Log` object."},{"content":"In Web applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Log`</ph> object.","pos":[95,174],"source":" In Web applications, the `Log` object is available through the `My.Log` object."}]},{"pos":[273,368],"content":"This is an advanced member; it does not show in IntelliSense unless you select the <bpt id=\"p1\">**</bpt>All<ept id=\"p1\">**</ept> tab.","source":"This is an advanced member; it does not show in IntelliSense unless you select the **All** tab."},{"pos":[375,459],"content":"The following table lists an example of a task involving the <ph id=\"ph1\">`TraceSource`</ph> property.","source":"The following table lists an example of a task involving the `TraceSource` property."},{"pos":[466,468],"content":"To","nodes":[{"content":"To","pos":[0,2]}]},{"pos":[469,472],"content":"See","nodes":[{"content":"See","pos":[0,3]}]},{"pos":[500,561],"content":"Get information for each of the <ph id=\"ph1\">`Log`</ph> object's log listeners.","source":"Get information for each of the `Log` object's log listeners."},{"pos":[562,685],"content":"<bpt id=\"p1\">[</bpt>Troubleshooting: Log Listeners<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)</ept>","source":"[Troubleshooting: Log Listeners](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)"},{"pos":[695,723],"content":"Availability by Project Type","linkify":"Availability by Project Type","nodes":[{"content":"Availability by Project Type","pos":[0,28]}]},{"pos":[730,742],"content":"Project type","nodes":[{"content":"Project type","pos":[0,12]}]},{"pos":[743,752],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[796,815],"content":"Windows Application","nodes":[{"content":"Windows Application","pos":[0,19]}]},{"pos":[816,823],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[828,841],"content":"Class Library","nodes":[{"content":"Class Library","pos":[0,13]}]},{"pos":[842,849],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[854,873],"content":"Console Application","nodes":[{"content":"Console Application","pos":[0,19]}]},{"pos":[874,881],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[886,909],"content":"Windows Control Library","nodes":[{"content":"Windows Control Library","pos":[0,23]}]},{"pos":[910,917],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[922,941],"content":"Web Control Library","nodes":[{"content":"Web Control Library","pos":[0,19]}]},{"pos":[942,944],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[949,964],"content":"Windows Service","nodes":[{"content":"Windows Service","pos":[0,15]}]},{"pos":[965,972],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[977,985],"content":"Web Site","nodes":[{"content":"Web Site","pos":[0,8]}]},{"pos":[986,993],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"}],"pos":[11381,12400],"yaml":true,"extradata":"MT"},{"content":"Returns the <xref href=\"System.Diagnostics.TraceSource\"></xref> object that underlies the `Log` object.","nodes":[{"pos":[0,103],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceSource\"&gt;&lt;/xref&gt;</ph> object that underlies the <ph id=\"ph2\">`Log`</ph> object.","source":"Returns the <xref href=\"System.Diagnostics.TraceSource\"></xref> object that underlies the `Log` object."}],"pos":[12556,12660],"yaml":true},{"content":"Writes a message to the application's log listeners.","nodes":[{"pos":[0,52],"content":"Writes a message to the application's log listeners.","nodes":[{"content":"Writes a message to the application's log listeners.","pos":[0,52]}]}],"pos":[13697,13750],"yaml":true},{"content":"The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|","nodes":[{"pos":[0,82],"content":"The <ph id=\"ph1\">`WriteEntry`</ph> method writes a message to the application's event log listeners.","source":"The `WriteEntry` method writes a message to the application's event log listeners."},{"pos":[89,263],"content":"In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.","nodes":[{"content":"In client applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Application.Log`</ph> object.","pos":[0,94],"source":"In client applications, the `Log` object is available through the `My.Application.Log` object."},{"content":"In Web applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Log`</ph> object.","pos":[95,174],"source":" In Web applications, the `Log` object is available through the `My.Log` object."}]},{"pos":[270,735],"content":"To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).","nodes":[{"content":"To learn which log listeners receive the <ph id=\"ph1\">`WriteEntry`</ph> method's messages, see <bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>.","pos":[0,277],"source":"To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)."},{"content":"You can change default log listeners.","pos":[278,315]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with Application Logs<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)</ept>.","pos":[316,465],"source":" For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)."}]},{"pos":[742,854],"content":"For overloads that do not take the <ph id=\"ph1\">`id`</ph> argument, the <ph id=\"ph2\">`id`</ph> written to the log is defined by the following table.","source":"For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table."},{"pos":[872,884],"content":"Default <ph id=\"ph1\">`id`</ph>","source":"Default `id`"},{"pos":[929,981],"content":"<xref:System.Diagnostics.TraceEventType.Information>","nodes":[]},{"pos":[982,983],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[988,1036],"content":"<xref:System.Diagnostics.TraceEventType.Warning>","nodes":[]},{"pos":[1037,1038],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[1043,1089],"content":"<xref:System.Diagnostics.TraceEventType.Error>","nodes":[]},{"pos":[1090,1091],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[1096,1145],"content":"<xref:System.Diagnostics.TraceEventType.Critical>","nodes":[]},{"pos":[1146,1147],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[1152,1198],"content":"<xref:System.Diagnostics.TraceEventType.Start>","nodes":[]},{"pos":[1199,1200],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[1205,1250],"content":"<xref:System.Diagnostics.TraceEventType.Stop>","nodes":[]},{"pos":[1251,1252],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[1257,1305],"content":"<xref:System.Diagnostics.TraceEventType.Suspend>","nodes":[]},{"pos":[1306,1307],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[1312,1359],"content":"<xref:System.Diagnostics.TraceEventType.Resume>","nodes":[]},{"pos":[1360,1361],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[1366,1414],"content":"<xref:System.Diagnostics.TraceEventType.Verbose>","nodes":[]},{"pos":[1415,1416],"content":"8","nodes":[{"content":"8","pos":[0,1]}]},{"pos":[1421,1470],"content":"<xref:System.Diagnostics.TraceEventType.Transfer>","nodes":[]},{"pos":[1471,1472],"content":"9","nodes":[{"content":"9","pos":[0,1]}]},{"pos":[1480,1558],"content":"The following table lists examples of tasks involving the <ph id=\"ph1\">`WriteEntry`</ph> method.","source":"The following table lists examples of tasks involving the `WriteEntry` method."},{"pos":[1565,1567],"content":"To","nodes":[{"content":"To","pos":[0,2]}]},{"pos":[1568,1571],"content":"See","nodes":[{"content":"See","pos":[0,3]}]},{"pos":[1599,1657],"content":"Write event information to the application's log listeners","nodes":[{"content":"Write event information to the application's log listeners","pos":[0,58]}]},{"pos":[1658,1773],"content":"<bpt id=\"p1\">[</bpt>How to: Write Log Messages<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)</ept>","source":"[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)"},{"pos":[1778,1818],"content":"Determine where <ph id=\"ph1\">`Log`</ph> writes information","source":"Determine where `Log` writes information"},{"pos":[1819,2018],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>","source":"[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)"},{"pos":[2028,2056],"content":"Availability by Project Type","linkify":"Availability by Project Type","nodes":[{"content":"Availability by Project Type","pos":[0,28]}]},{"pos":[2063,2075],"content":"Project type","nodes":[{"content":"Project type","pos":[0,12]}]},{"pos":[2076,2085],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2129,2148],"content":"Windows Application","nodes":[{"content":"Windows Application","pos":[0,19]}]},{"pos":[2149,2156],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2161,2174],"content":"Class Library","nodes":[{"content":"Class Library","pos":[0,13]}]},{"pos":[2175,2182],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2187,2206],"content":"Console Application","nodes":[{"content":"Console Application","pos":[0,19]}]},{"pos":[2207,2214],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2219,2242],"content":"Windows Control Library","nodes":[{"content":"Windows Control Library","pos":[0,23]}]},{"pos":[2243,2250],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2255,2274],"content":"Web Control Library","nodes":[{"content":"Web Control Library","pos":[0,19]}]},{"pos":[2275,2277],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2282,2297],"content":"Windows Service","nodes":[{"content":"Windows Service","pos":[0,15]}]},{"pos":[2298,2305],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2310,2318],"content":"Web Site","nodes":[{"content":"Web Site","pos":[0,8]}]},{"pos":[2319,2326],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"}],"pos":[13761,16129],"yaml":true,"extradata":"MT"},{"content":"Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.","nodes":[{"pos":[0,92],"content":"Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"The message to log.","pos":[10,29]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">message</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`Nothing`</ph>, an empty string is used.","pos":[30,92],"source":" If <code>message</code> is `Nothing`, an empty string is used."}]}],"pos":[16824,16917],"yaml":true},{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"pos":[0,103],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]}],"pos":[17101,17205],"yaml":true},{"content":"Writes a message to the application's log listeners.","nodes":[{"pos":[0,52],"content":"Writes a message to the application's log listeners.","nodes":[{"content":"Writes a message to the application's log listeners.","pos":[0,52]}]}],"pos":[18299,18352],"yaml":true},{"content":"The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|","nodes":[{"pos":[0,82],"content":"The <ph id=\"ph1\">`WriteEntry`</ph> method writes a message to the application's event log listeners.","source":"The `WriteEntry` method writes a message to the application's event log listeners."},{"pos":[89,263],"content":"In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.","nodes":[{"content":"In client applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Application.Log`</ph> object.","pos":[0,94],"source":"In client applications, the `Log` object is available through the `My.Application.Log` object."},{"content":"In Web applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Log`</ph> object.","pos":[95,174],"source":" In Web applications, the `Log` object is available through the `My.Log` object."}]},{"pos":[270,735],"content":"To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).","nodes":[{"content":"To learn which log listeners receive the <ph id=\"ph1\">`WriteEntry`</ph> method's messages, see <bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>.","pos":[0,277],"source":"To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)."},{"content":"You can change default log listeners.","pos":[278,315]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with Application Logs<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)</ept>.","pos":[316,465],"source":" For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)."}]},{"pos":[742,854],"content":"For overloads that do not take the <ph id=\"ph1\">`id`</ph> argument, the <ph id=\"ph2\">`id`</ph> written to the log is defined by the following table.","source":"For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table."},{"pos":[872,884],"content":"Default <ph id=\"ph1\">`id`</ph>","source":"Default `id`"},{"pos":[929,981],"content":"<xref:System.Diagnostics.TraceEventType.Information>","nodes":[]},{"pos":[982,983],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[988,1036],"content":"<xref:System.Diagnostics.TraceEventType.Warning>","nodes":[]},{"pos":[1037,1038],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[1043,1089],"content":"<xref:System.Diagnostics.TraceEventType.Error>","nodes":[]},{"pos":[1090,1091],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[1096,1145],"content":"<xref:System.Diagnostics.TraceEventType.Critical>","nodes":[]},{"pos":[1146,1147],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[1152,1198],"content":"<xref:System.Diagnostics.TraceEventType.Start>","nodes":[]},{"pos":[1199,1200],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[1205,1250],"content":"<xref:System.Diagnostics.TraceEventType.Stop>","nodes":[]},{"pos":[1251,1252],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[1257,1305],"content":"<xref:System.Diagnostics.TraceEventType.Suspend>","nodes":[]},{"pos":[1306,1307],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[1312,1359],"content":"<xref:System.Diagnostics.TraceEventType.Resume>","nodes":[]},{"pos":[1360,1361],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[1366,1414],"content":"<xref:System.Diagnostics.TraceEventType.Verbose>","nodes":[]},{"pos":[1415,1416],"content":"8","nodes":[{"content":"8","pos":[0,1]}]},{"pos":[1421,1470],"content":"<xref:System.Diagnostics.TraceEventType.Transfer>","nodes":[]},{"pos":[1471,1472],"content":"9","nodes":[{"content":"9","pos":[0,1]}]},{"pos":[1480,1558],"content":"The following table lists examples of tasks involving the <ph id=\"ph1\">`WriteEntry`</ph> method.","source":"The following table lists examples of tasks involving the `WriteEntry` method."},{"pos":[1565,1567],"content":"To","nodes":[{"content":"To","pos":[0,2]}]},{"pos":[1568,1571],"content":"See","nodes":[{"content":"See","pos":[0,3]}]},{"pos":[1599,1657],"content":"Write event information to the application's log listeners","nodes":[{"content":"Write event information to the application's log listeners","pos":[0,58]}]},{"pos":[1658,1773],"content":"<bpt id=\"p1\">[</bpt>How to: Write Log Messages<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)</ept>","source":"[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)"},{"pos":[1778,1818],"content":"Determine where <ph id=\"ph1\">`Log`</ph> writes information","source":"Determine where `Log` writes information"},{"pos":[1819,2018],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>","source":"[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)"},{"pos":[2028,2056],"content":"Availability by Project Type","linkify":"Availability by Project Type","nodes":[{"content":"Availability by Project Type","pos":[0,28]}]},{"pos":[2063,2075],"content":"Project type","nodes":[{"content":"Project type","pos":[0,12]}]},{"pos":[2076,2085],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2129,2148],"content":"Windows Application","nodes":[{"content":"Windows Application","pos":[0,19]}]},{"pos":[2149,2156],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2161,2174],"content":"Class Library","nodes":[{"content":"Class Library","pos":[0,13]}]},{"pos":[2175,2182],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2187,2206],"content":"Console Application","nodes":[{"content":"Console Application","pos":[0,19]}]},{"pos":[2207,2214],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2219,2242],"content":"Windows Control Library","nodes":[{"content":"Windows Control Library","pos":[0,23]}]},{"pos":[2243,2250],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2255,2274],"content":"Web Control Library","nodes":[{"content":"Web Control Library","pos":[0,19]}]},{"pos":[2275,2277],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2282,2297],"content":"Windows Service","nodes":[{"content":"Windows Service","pos":[0,15]}]},{"pos":[2298,2305],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2310,2318],"content":"Web Site","nodes":[{"content":"Web Site","pos":[0,8]}]},{"pos":[2319,2326],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"}],"pos":[18363,20731],"yaml":true,"extradata":"MT"},{"content":"Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.","nodes":[{"pos":[0,92],"content":"Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"The message to log.","pos":[10,29]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">message</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`Nothing`</ph>, an empty string is used.","pos":[30,92],"source":" If <code>message</code> is `Nothing`, an empty string is used."}]}],"pos":[21470,21563],"yaml":true},{"content":"The type of message. By default, `TraceEventType.Information`.","nodes":[{"pos":[0,62],"content":"The type of message. By default, `TraceEventType.Information`.","nodes":[{"content":"The type of message.","pos":[0,20]},{"content":"By default, <ph id=\"ph1\">`TraceEventType.Information`</ph>.","pos":[21,62],"source":" By default, `TraceEventType.Information`."}]}],"pos":[21647,21710],"yaml":true},{"content":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.","nodes":[{"pos":[0,109],"content":"The message type is not one of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."}],"pos":[21928,22038],"yaml":true},{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"pos":[0,103],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]}],"pos":[22150,22254],"yaml":true},{"content":"Writes a message to the application's log listeners.","nodes":[{"pos":[0,52],"content":"Writes a message to the application's log listeners.","nodes":[{"content":"Writes a message to the application's log listeners.","pos":[0,52]}]}],"pos":[23408,23461],"yaml":true},{"content":"The `WriteEntry` method writes a message to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteEntry` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|","nodes":[{"pos":[0,82],"content":"The <ph id=\"ph1\">`WriteEntry`</ph> method writes a message to the application's event log listeners.","source":"The `WriteEntry` method writes a message to the application's event log listeners."},{"pos":[89,263],"content":"In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.","nodes":[{"content":"In client applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Application.Log`</ph> object.","pos":[0,94],"source":"In client applications, the `Log` object is available through the `My.Application.Log` object."},{"content":"In Web applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Log`</ph> object.","pos":[95,174],"source":" In Web applications, the `Log` object is available through the `My.Log` object."}]},{"pos":[270,735],"content":"To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).","nodes":[{"content":"To learn which log listeners receive the <ph id=\"ph1\">`WriteEntry`</ph> method's messages, see <bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>.","pos":[0,277],"source":"To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)."},{"content":"You can change default log listeners.","pos":[278,315]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with Application Logs<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)</ept>.","pos":[316,465],"source":" For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)."}]},{"pos":[742,854],"content":"For overloads that do not take the <ph id=\"ph1\">`id`</ph> argument, the <ph id=\"ph2\">`id`</ph> written to the log is defined by the following table.","source":"For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table."},{"pos":[872,884],"content":"Default <ph id=\"ph1\">`id`</ph>","source":"Default `id`"},{"pos":[929,981],"content":"<xref:System.Diagnostics.TraceEventType.Information>","nodes":[]},{"pos":[982,983],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[988,1036],"content":"<xref:System.Diagnostics.TraceEventType.Warning>","nodes":[]},{"pos":[1037,1038],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[1043,1089],"content":"<xref:System.Diagnostics.TraceEventType.Error>","nodes":[]},{"pos":[1090,1091],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[1096,1145],"content":"<xref:System.Diagnostics.TraceEventType.Critical>","nodes":[]},{"pos":[1146,1147],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[1152,1198],"content":"<xref:System.Diagnostics.TraceEventType.Start>","nodes":[]},{"pos":[1199,1200],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[1205,1250],"content":"<xref:System.Diagnostics.TraceEventType.Stop>","nodes":[]},{"pos":[1251,1252],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[1257,1305],"content":"<xref:System.Diagnostics.TraceEventType.Suspend>","nodes":[]},{"pos":[1306,1307],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[1312,1359],"content":"<xref:System.Diagnostics.TraceEventType.Resume>","nodes":[]},{"pos":[1360,1361],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[1366,1414],"content":"<xref:System.Diagnostics.TraceEventType.Verbose>","nodes":[]},{"pos":[1415,1416],"content":"8","nodes":[{"content":"8","pos":[0,1]}]},{"pos":[1421,1470],"content":"<xref:System.Diagnostics.TraceEventType.Transfer>","nodes":[]},{"pos":[1471,1472],"content":"9","nodes":[{"content":"9","pos":[0,1]}]},{"pos":[1480,1558],"content":"The following table lists examples of tasks involving the <ph id=\"ph1\">`WriteEntry`</ph> method.","source":"The following table lists examples of tasks involving the `WriteEntry` method."},{"pos":[1565,1567],"content":"To","nodes":[{"content":"To","pos":[0,2]}]},{"pos":[1568,1571],"content":"See","nodes":[{"content":"See","pos":[0,3]}]},{"pos":[1599,1657],"content":"Write event information to the application's log listeners","nodes":[{"content":"Write event information to the application's log listeners","pos":[0,58]}]},{"pos":[1658,1773],"content":"<bpt id=\"p1\">[</bpt>How to: Write Log Messages<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)</ept>","source":"[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)"},{"pos":[1778,1818],"content":"Determine where <ph id=\"ph1\">`Log`</ph> writes information","source":"Determine where `Log` writes information"},{"pos":[1819,2018],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>","source":"[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)"},{"pos":[2028,2056],"content":"Availability by Project Type","linkify":"Availability by Project Type","nodes":[{"content":"Availability by Project Type","pos":[0,28]}]},{"pos":[2063,2075],"content":"Project type","nodes":[{"content":"Project type","pos":[0,12]}]},{"pos":[2076,2085],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2129,2148],"content":"Windows Application","nodes":[{"content":"Windows Application","pos":[0,19]}]},{"pos":[2149,2156],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2161,2174],"content":"Class Library","nodes":[{"content":"Class Library","pos":[0,13]}]},{"pos":[2175,2182],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2187,2206],"content":"Console Application","nodes":[{"content":"Console Application","pos":[0,19]}]},{"pos":[2207,2214],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2219,2242],"content":"Windows Control Library","nodes":[{"content":"Windows Control Library","pos":[0,23]}]},{"pos":[2243,2250],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2255,2274],"content":"Web Control Library","nodes":[{"content":"Web Control Library","pos":[0,19]}]},{"pos":[2275,2277],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2282,2297],"content":"Windows Service","nodes":[{"content":"Windows Service","pos":[0,15]}]},{"pos":[2298,2305],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2310,2318],"content":"Web Site","nodes":[{"content":"Web Site","pos":[0,8]}]},{"pos":[2319,2326],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"}],"pos":[23472,25840],"yaml":true,"extradata":"MT"},{"content":"Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.","nodes":[{"pos":[0,92],"content":"Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.","nodes":[{"content":"Required.","pos":[0,9]},{"content":"The message to log.","pos":[10,29]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">message</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`Nothing`</ph>, an empty string is used.","pos":[30,92],"source":" If <code>message</code> is `Nothing`, an empty string is used."}]}],"pos":[26587,26680],"yaml":true},{"content":"The type of message. By default, `TraceEventType.Information`.","nodes":[{"pos":[0,62],"content":"The type of message. By default, `TraceEventType.Information`.","nodes":[{"content":"The type of message.","pos":[0,20]},{"content":"By default, <ph id=\"ph1\">`TraceEventType.Information`</ph>.","pos":[21,62],"source":" By default, `TraceEventType.Information`."}]}],"pos":[26764,26827],"yaml":true},{"content":"Message identifier, typically used for correlation. By default, related to <code>entryType</code> as described in the table.","nodes":[{"pos":[0,124],"content":"Message identifier, typically used for correlation. By default, related to <code>entryType</code> as described in the table.","nodes":[{"content":"Message identifier, typically used for correlation.","pos":[0,51]},{"content":"By default, related to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">entryType</ph><ept id=\"p1\">&lt;/code&gt;</ept> as described in the table.","pos":[52,124],"source":" By default, related to <code>entryType</code> as described in the table."}]}],"pos":[26884,27009],"yaml":true},{"content":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.","nodes":[{"pos":[0,109],"content":"The message type is not one of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."}],"pos":[27227,27337],"yaml":true},{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"pos":[0,103],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]}],"pos":[27449,27553],"yaml":true},{"content":"Writes exception information to the application's log listeners.","nodes":[{"pos":[0,64],"content":"Writes exception information to the application's log listeners.","nodes":[{"content":"Writes exception information to the application's log listeners.","pos":[0,64]}]}],"pos":[28539,28604],"yaml":true},{"content":"The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|","nodes":[{"pos":[0,118],"content":"The <ph id=\"ph1\">`WriteException`</ph> method writes the information contained in an exception to the application's event log listeners.","source":"The `WriteException` method writes the information contained in an exception to the application's event log listeners."},{"pos":[125,299],"content":"In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.","nodes":[{"content":"In client applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Application.Log`</ph> object.","pos":[0,94],"source":"In client applications, the `Log` object is available through the `My.Application.Log` object."},{"content":"In Web applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Log`</ph> object.","pos":[95,174],"source":" In Web applications, the `Log` object is available through the `My.Log` object."}]},{"pos":[306,775],"content":"To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).","nodes":[{"content":"To learn which log listeners receive the <ph id=\"ph1\">`WriteException`</ph> method's messages, see <bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>.","pos":[0,281],"source":"To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)."},{"content":"You can change default log listeners.","pos":[282,319]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with Application Logs<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)</ept>.","pos":[320,469],"source":" For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)."}]},{"pos":[782,900],"content":"For overloads that do not take the <ph id=\"ph1\">`id`</ph> argument, the identifier written to the log is defined by the following table.","source":"For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table."},{"pos":[918,930],"content":"Default <ph id=\"ph1\">`id`</ph>","source":"Default `id`"},{"pos":[975,1027],"content":"<xref:System.Diagnostics.TraceEventType.Information>","nodes":[]},{"pos":[1028,1029],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[1034,1082],"content":"<xref:System.Diagnostics.TraceEventType.Warning>","nodes":[]},{"pos":[1083,1084],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[1089,1135],"content":"<xref:System.Diagnostics.TraceEventType.Error>","nodes":[]},{"pos":[1136,1137],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[1142,1191],"content":"<xref:System.Diagnostics.TraceEventType.Critical>","nodes":[]},{"pos":[1192,1193],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[1198,1244],"content":"<xref:System.Diagnostics.TraceEventType.Start>","nodes":[]},{"pos":[1245,1246],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[1251,1296],"content":"<xref:System.Diagnostics.TraceEventType.Stop>","nodes":[]},{"pos":[1297,1298],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[1303,1351],"content":"<xref:System.Diagnostics.TraceEventType.Suspend>","nodes":[]},{"pos":[1352,1353],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[1358,1405],"content":"<xref:System.Diagnostics.TraceEventType.Resume>","nodes":[]},{"pos":[1406,1407],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[1412,1460],"content":"<xref:System.Diagnostics.TraceEventType.Verbose>","nodes":[]},{"pos":[1461,1462],"content":"8","nodes":[{"content":"8","pos":[0,1]}]},{"pos":[1467,1516],"content":"<xref:System.Diagnostics.TraceEventType.Transfer>","nodes":[]},{"pos":[1517,1518],"content":"9","nodes":[{"content":"9","pos":[0,1]}]},{"pos":[1526,1608],"content":"The following table lists examples of tasks involving the <ph id=\"ph1\">`WriteException`</ph> method.","source":"The following table lists examples of tasks involving the `WriteException` method."},{"pos":[1615,1617],"content":"To","nodes":[{"content":"To","pos":[0,2]}]},{"pos":[1618,1621],"content":"See","nodes":[{"content":"See","pos":[0,3]}]},{"pos":[1649,1718],"content":"Write exception information to the application's event log listeners.","nodes":[{"content":"Write exception information to the application's event log listeners.","pos":[0,69]}]},{"pos":[1719,1826],"content":"<bpt id=\"p1\">[</bpt>How to: Log Exceptions<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)</ept>","source":"[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)"},{"pos":[1831,1872],"content":"Determine where <ph id=\"ph1\">`Log`</ph> writes information.","source":"Determine where `Log` writes information."},{"pos":[1873,2072],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>","source":"[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)"},{"pos":[2082,2110],"content":"Availability by Project Type","linkify":"Availability by Project Type","nodes":[{"content":"Availability by Project Type","pos":[0,28]}]},{"pos":[2117,2129],"content":"Project type","nodes":[{"content":"Project type","pos":[0,12]}]},{"pos":[2130,2139],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2183,2202],"content":"Windows Application","nodes":[{"content":"Windows Application","pos":[0,19]}]},{"pos":[2203,2210],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2215,2228],"content":"Class Library","nodes":[{"content":"Class Library","pos":[0,13]}]},{"pos":[2229,2236],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2241,2260],"content":"Console Application","nodes":[{"content":"Console Application","pos":[0,19]}]},{"pos":[2261,2268],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2273,2296],"content":"Windows Control Library","nodes":[{"content":"Windows Control Library","pos":[0,23]}]},{"pos":[2297,2304],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2309,2328],"content":"Web Control Library","nodes":[{"content":"Web Control Library","pos":[0,19]}]},{"pos":[2329,2331],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2336,2351],"content":"Windows Service","nodes":[{"content":"Windows Service","pos":[0,15]}]},{"pos":[2352,2359],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2364,2372],"content":"Web Site","nodes":[{"content":"Web Site","pos":[0,8]}]},{"pos":[2373,2380],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"}],"pos":[28615,31037],"yaml":true,"extradata":"MT"},{"content":"Required. Exception to log.","nodes":[{"pos":[0,27],"content":"Required. Exception to log.","nodes":[{"content":"Required. Exception to log.","pos":[0,27],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Exception to log.","pos":[10,27]}]}]}],"pos":[31825,31853],"yaml":true},{"content":"<code>ex</code> is `Nothing`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;ex&lt;/code&gt;</ph> is <ph id=\"ph2\">`Nothing`</ph>.","source":"<code>ex</code> is `Nothing`."}],"pos":[32031,32061],"yaml":true},{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"pos":[0,103],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]}],"pos":[32173,32277],"yaml":true},{"content":"Writes exception information to the application's log listeners.","nodes":[{"pos":[0,64],"content":"Writes exception information to the application's log listeners.","nodes":[{"content":"Writes exception information to the application's log listeners.","pos":[0,64]}]}],"pos":[33479,33544],"yaml":true},{"content":"The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|","nodes":[{"pos":[0,118],"content":"The <ph id=\"ph1\">`WriteException`</ph> method writes the information contained in an exception to the application's event log listeners.","source":"The `WriteException` method writes the information contained in an exception to the application's event log listeners."},{"pos":[125,299],"content":"In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.","nodes":[{"content":"In client applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Application.Log`</ph> object.","pos":[0,94],"source":"In client applications, the `Log` object is available through the `My.Application.Log` object."},{"content":"In Web applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Log`</ph> object.","pos":[95,174],"source":" In Web applications, the `Log` object is available through the `My.Log` object."}]},{"pos":[306,775],"content":"To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).","nodes":[{"content":"To learn which log listeners receive the <ph id=\"ph1\">`WriteException`</ph> method's messages, see <bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>.","pos":[0,281],"source":"To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)."},{"content":"You can change default log listeners.","pos":[282,319]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with Application Logs<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)</ept>.","pos":[320,469],"source":" For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)."}]},{"pos":[782,900],"content":"For overloads that do not take the <ph id=\"ph1\">`id`</ph> argument, the identifier written to the log is defined by the following table.","source":"For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table."},{"pos":[918,930],"content":"Default <ph id=\"ph1\">`id`</ph>","source":"Default `id`"},{"pos":[975,1027],"content":"<xref:System.Diagnostics.TraceEventType.Information>","nodes":[]},{"pos":[1028,1029],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[1034,1082],"content":"<xref:System.Diagnostics.TraceEventType.Warning>","nodes":[]},{"pos":[1083,1084],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[1089,1135],"content":"<xref:System.Diagnostics.TraceEventType.Error>","nodes":[]},{"pos":[1136,1137],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[1142,1191],"content":"<xref:System.Diagnostics.TraceEventType.Critical>","nodes":[]},{"pos":[1192,1193],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[1198,1244],"content":"<xref:System.Diagnostics.TraceEventType.Start>","nodes":[]},{"pos":[1245,1246],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[1251,1296],"content":"<xref:System.Diagnostics.TraceEventType.Stop>","nodes":[]},{"pos":[1297,1298],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[1303,1351],"content":"<xref:System.Diagnostics.TraceEventType.Suspend>","nodes":[]},{"pos":[1352,1353],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[1358,1405],"content":"<xref:System.Diagnostics.TraceEventType.Resume>","nodes":[]},{"pos":[1406,1407],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[1412,1460],"content":"<xref:System.Diagnostics.TraceEventType.Verbose>","nodes":[]},{"pos":[1461,1462],"content":"8","nodes":[{"content":"8","pos":[0,1]}]},{"pos":[1467,1516],"content":"<xref:System.Diagnostics.TraceEventType.Transfer>","nodes":[]},{"pos":[1517,1518],"content":"9","nodes":[{"content":"9","pos":[0,1]}]},{"pos":[1526,1608],"content":"The following table lists examples of tasks involving the <ph id=\"ph1\">`WriteException`</ph> method.","source":"The following table lists examples of tasks involving the `WriteException` method."},{"pos":[1615,1617],"content":"To","nodes":[{"content":"To","pos":[0,2]}]},{"pos":[1618,1621],"content":"See","nodes":[{"content":"See","pos":[0,3]}]},{"pos":[1649,1718],"content":"Write exception information to the application's event log listeners.","nodes":[{"content":"Write exception information to the application's event log listeners.","pos":[0,69]}]},{"pos":[1719,1826],"content":"<bpt id=\"p1\">[</bpt>How to: Log Exceptions<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)</ept>","source":"[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)"},{"pos":[1831,1872],"content":"Determine where <ph id=\"ph1\">`Log`</ph> writes information.","source":"Determine where `Log` writes information."},{"pos":[1873,2072],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>","source":"[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)"},{"pos":[2082,2110],"content":"Availability by Project Type","linkify":"Availability by Project Type","nodes":[{"content":"Availability by Project Type","pos":[0,28]}]},{"pos":[2117,2129],"content":"Project type","nodes":[{"content":"Project type","pos":[0,12]}]},{"pos":[2130,2139],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2183,2202],"content":"Windows Application","nodes":[{"content":"Windows Application","pos":[0,19]}]},{"pos":[2203,2210],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2215,2228],"content":"Class Library","nodes":[{"content":"Class Library","pos":[0,13]}]},{"pos":[2229,2236],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2241,2260],"content":"Console Application","nodes":[{"content":"Console Application","pos":[0,19]}]},{"pos":[2261,2268],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2273,2296],"content":"Windows Control Library","nodes":[{"content":"Windows Control Library","pos":[0,23]}]},{"pos":[2297,2304],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2309,2328],"content":"Web Control Library","nodes":[{"content":"Web Control Library","pos":[0,19]}]},{"pos":[2329,2331],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2336,2351],"content":"Windows Service","nodes":[{"content":"Windows Service","pos":[0,15]}]},{"pos":[2352,2359],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2364,2372],"content":"Web Site","nodes":[{"content":"Web Site","pos":[0,8]}]},{"pos":[2373,2380],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"}],"pos":[33555,35977],"yaml":true,"extradata":"MT"},{"content":"Required. Exception to log.","nodes":[{"pos":[0,27],"content":"Required. Exception to log.","nodes":[{"content":"Required. Exception to log.","pos":[0,27],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Exception to log.","pos":[10,27]}]}]}],"pos":[36832,36860],"yaml":true},{"content":"The type of message. By default, <xref href=\"System.Diagnostics.TraceEventType.Error\"></xref>.","nodes":[{"pos":[0,94],"content":"The type of message. By default, <xref href=\"System.Diagnostics.TraceEventType.Error\"></xref>.","nodes":[{"content":"The type of message.","pos":[0,20]},{"content":"By default, <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType.Error\"&gt;&lt;/xref&gt;</ph>.","pos":[21,94],"source":" By default, <xref href=\"System.Diagnostics.TraceEventType.Error\"></xref>."}]}],"pos":[36944,37039],"yaml":true},{"content":"String to append to the message. By default, this is an empty string.","nodes":[{"pos":[0,69],"content":"String to append to the message. By default, this is an empty string.","nodes":[{"content":"String to append to the message. By default, this is an empty string.","pos":[0,69],"nodes":[{"content":"String to append to the message.","pos":[0,32]},{"content":"By default, this is an empty string.","pos":[33,69]}]}]}],"pos":[37109,37179],"yaml":true},{"content":"<code>ex</code> is `Nothing`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;ex&lt;/code&gt;</ph> is <ph id=\"ph2\">`Nothing`</ph>.","source":"<code>ex</code> is `Nothing`."}],"pos":[37357,37387],"yaml":true},{"content":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.","nodes":[{"pos":[0,109],"content":"The message type is not one of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."}],"pos":[37533,37643],"yaml":true},{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"pos":[0,103],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]}],"pos":[37755,37859],"yaml":true},{"content":"Writes exception information to the application's log listeners.","nodes":[{"pos":[0,64],"content":"Writes exception information to the application's log listeners.","nodes":[{"content":"Writes exception information to the application's log listeners.","pos":[0,64]}]}],"pos":[39121,39186],"yaml":true},{"content":"The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \n  \n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \n  \n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \n  \n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \n  \n|`severity`|Default `id`|  \n|----------------|------------------|  \n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \n  \n The following table lists examples of tasks involving the `WriteException` method.  \n  \n|To|See|  \n|--------|---------|  \n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \n  \n## Availability by Project Type  \n  \n|Project type|Available|  \n|------------------|---------------|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|No|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|","nodes":[{"pos":[0,118],"content":"The <ph id=\"ph1\">`WriteException`</ph> method writes the information contained in an exception to the application's event log listeners.","source":"The `WriteException` method writes the information contained in an exception to the application's event log listeners."},{"pos":[125,299],"content":"In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.","nodes":[{"content":"In client applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Application.Log`</ph> object.","pos":[0,94],"source":"In client applications, the `Log` object is available through the `My.Application.Log` object."},{"content":"In Web applications, the <ph id=\"ph1\">`Log`</ph> object is available through the <ph id=\"ph2\">`My.Log`</ph> object.","pos":[95,174],"source":" In Web applications, the `Log` object is available through the `My.Log` object."}]},{"pos":[306,775],"content":"To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).","nodes":[{"content":"To learn which log listeners receive the <ph id=\"ph1\">`WriteException`</ph> method's messages, see <bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>.","pos":[0,281],"source":"To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)."},{"content":"You can change default log listeners.","pos":[282,319]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Working with Application Logs<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)</ept>.","pos":[320,469],"source":" For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md)."}]},{"pos":[782,900],"content":"For overloads that do not take the <ph id=\"ph1\">`id`</ph> argument, the identifier written to the log is defined by the following table.","source":"For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table."},{"pos":[918,930],"content":"Default <ph id=\"ph1\">`id`</ph>","source":"Default `id`"},{"pos":[975,1027],"content":"<xref:System.Diagnostics.TraceEventType.Information>","nodes":[]},{"pos":[1028,1029],"content":"0","nodes":[{"content":"0","pos":[0,1]}]},{"pos":[1034,1082],"content":"<xref:System.Diagnostics.TraceEventType.Warning>","nodes":[]},{"pos":[1083,1084],"content":"1","nodes":[{"content":"1","pos":[0,1]}]},{"pos":[1089,1135],"content":"<xref:System.Diagnostics.TraceEventType.Error>","nodes":[]},{"pos":[1136,1137],"content":"2","nodes":[{"content":"2","pos":[0,1]}]},{"pos":[1142,1191],"content":"<xref:System.Diagnostics.TraceEventType.Critical>","nodes":[]},{"pos":[1192,1193],"content":"3","nodes":[{"content":"3","pos":[0,1]}]},{"pos":[1198,1244],"content":"<xref:System.Diagnostics.TraceEventType.Start>","nodes":[]},{"pos":[1245,1246],"content":"4","nodes":[{"content":"4","pos":[0,1]}]},{"pos":[1251,1296],"content":"<xref:System.Diagnostics.TraceEventType.Stop>","nodes":[]},{"pos":[1297,1298],"content":"5","nodes":[{"content":"5","pos":[0,1]}]},{"pos":[1303,1351],"content":"<xref:System.Diagnostics.TraceEventType.Suspend>","nodes":[]},{"pos":[1352,1353],"content":"6","nodes":[{"content":"6","pos":[0,1]}]},{"pos":[1358,1405],"content":"<xref:System.Diagnostics.TraceEventType.Resume>","nodes":[]},{"pos":[1406,1407],"content":"7","nodes":[{"content":"7","pos":[0,1]}]},{"pos":[1412,1460],"content":"<xref:System.Diagnostics.TraceEventType.Verbose>","nodes":[]},{"pos":[1461,1462],"content":"8","nodes":[{"content":"8","pos":[0,1]}]},{"pos":[1467,1516],"content":"<xref:System.Diagnostics.TraceEventType.Transfer>","nodes":[]},{"pos":[1517,1518],"content":"9","nodes":[{"content":"9","pos":[0,1]}]},{"pos":[1526,1608],"content":"The following table lists examples of tasks involving the <ph id=\"ph1\">`WriteException`</ph> method.","source":"The following table lists examples of tasks involving the `WriteException` method."},{"pos":[1615,1617],"content":"To","nodes":[{"content":"To","pos":[0,2]}]},{"pos":[1618,1621],"content":"See","nodes":[{"content":"See","pos":[0,3]}]},{"pos":[1649,1718],"content":"Write exception information to the application's event log listeners.","nodes":[{"content":"Write exception information to the application's event log listeners.","pos":[0,69]}]},{"pos":[1719,1826],"content":"<bpt id=\"p1\">[</bpt>How to: Log Exceptions<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)</ept>","source":"[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)"},{"pos":[1831,1872],"content":"Determine where <ph id=\"ph1\">`Log`</ph> writes information.","source":"Determine where `Log` writes information."},{"pos":[1873,2072],"content":"<bpt id=\"p1\">[</bpt>Walkthrough: Determining Where My.Application.Log Writes Information<ept id=\"p1\">](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)</ept>","source":"[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)"},{"pos":[2082,2110],"content":"Availability by Project Type","linkify":"Availability by Project Type","nodes":[{"content":"Availability by Project Type","pos":[0,28]}]},{"pos":[2117,2129],"content":"Project type","nodes":[{"content":"Project type","pos":[0,12]}]},{"pos":[2130,2139],"content":"Available","nodes":[{"content":"Available","pos":[0,9]}]},{"pos":[2183,2202],"content":"Windows Application","nodes":[{"content":"Windows Application","pos":[0,19]}]},{"pos":[2203,2210],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2215,2228],"content":"Class Library","nodes":[{"content":"Class Library","pos":[0,13]}]},{"pos":[2229,2236],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2241,2260],"content":"Console Application","nodes":[{"content":"Console Application","pos":[0,19]}]},{"pos":[2261,2268],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2273,2296],"content":"Windows Control Library","nodes":[{"content":"Windows Control Library","pos":[0,23]}]},{"pos":[2297,2304],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2309,2328],"content":"Web Control Library","nodes":[{"content":"Web Control Library","pos":[0,19]}]},{"pos":[2329,2331],"content":"No","nodes":[{"content":"No","pos":[0,2]}]},{"pos":[2336,2351],"content":"Windows Service","nodes":[{"content":"Windows Service","pos":[0,15]}]},{"pos":[2352,2359],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"},{"pos":[2364,2372],"content":"Web Site","nodes":[{"content":"Web Site","pos":[0,8]}]},{"pos":[2373,2380],"content":"<bpt id=\"p1\">**</bpt>Yes<ept id=\"p1\">**</ept>","source":"**Yes**"}],"pos":[39197,41619],"yaml":true,"extradata":"MT"},{"content":"Required. Exception to log.","nodes":[{"pos":[0,27],"content":"Required. Exception to log.","nodes":[{"content":"Required. Exception to log.","pos":[0,27],"nodes":[{"content":"Required.","pos":[0,9]},{"content":"Exception to log.","pos":[10,27]}]}]}],"pos":[42482,42510],"yaml":true},{"content":"The type of message. By default, <xref href=\"System.Diagnostics.TraceEventType.Error\"></xref>.","nodes":[{"pos":[0,94],"content":"The type of message. By default, <xref href=\"System.Diagnostics.TraceEventType.Error\"></xref>.","nodes":[{"content":"The type of message.","pos":[0,20]},{"content":"By default, <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType.Error\"&gt;&lt;/xref&gt;</ph>.","pos":[21,94],"source":" By default, <xref href=\"System.Diagnostics.TraceEventType.Error\"></xref>."}]}],"pos":[42594,42689],"yaml":true},{"content":"String to append to the message. By default, this is an empty string.","nodes":[{"pos":[0,69],"content":"String to append to the message. By default, this is an empty string.","nodes":[{"content":"String to append to the message. By default, this is an empty string.","pos":[0,69],"nodes":[{"content":"String to append to the message.","pos":[0,32]},{"content":"By default, this is an empty string.","pos":[33,69]}]}]}],"pos":[42759,42829],"yaml":true},{"content":"Message identifier, typically used for correlation. By default, related to <code>entryType</code> as described in the table in the Remarks section.","nodes":[{"pos":[0,147],"content":"Message identifier, typically used for correlation. By default, related to <code>entryType</code> as described in the table in the Remarks section.","nodes":[{"content":"Message identifier, typically used for correlation.","pos":[0,51]},{"content":"By default, related to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">entryType</ph><ept id=\"p1\">&lt;/code&gt;</ept> as described in the table in the Remarks section.","pos":[52,147],"source":" By default, related to <code>entryType</code> as described in the table in the Remarks section."}]}],"pos":[42886,43034],"yaml":true},{"content":"<code>ex</code> is `Nothing`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;ex&lt;/code&gt;</ph> is <ph id=\"ph2\">`Nothing`</ph>.","source":"<code>ex</code> is `Nothing`."}],"pos":[43212,43242],"yaml":true},{"content":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.","nodes":[{"pos":[0,109],"content":"The message type is not one of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.TraceEventType\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values."}],"pos":[43388,43498],"yaml":true},{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"pos":[0,103],"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","nodes":[{"content":"Code with partial trust calls the method, but writes to an event log listener that requires full trust.","pos":[0,103]}]}],"pos":[43610,43714],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualBasic.Logging.Log\n  commentId: T:Microsoft.VisualBasic.Logging.Log\n  id: Log\n  children:\n  - Microsoft.VisualBasic.Logging.Log.#ctor\n  - Microsoft.VisualBasic.Logging.Log.#ctor(System.String)\n  - Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  - Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists\n  - Microsoft.VisualBasic.Logging.Log.TraceSource\n  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)\n  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  - Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)\n  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  - Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  langs:\n  - csharp\n  name: Log\n  nameWithType: Log\n  fullName: Microsoft.VisualBasic.Logging.Log\n  type: Class\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Provides a property and methods for writing event and exception information to the application's log listeners.\n  remarks: \"The `My.Application.Log` object provides a straightforward entry point from which to access the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]'s logging services. The `WriteEntry` and `WriteException` methods write messages to the application's log listeners. The listeners can be configured by the application's configuration file. For more information, see [Walkthrough: Changing Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) and [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \\n  \\n The `My.Application.Log` object is available only for client applications. For Web applications, use `My.Log`. For more information, see <xref:Microsoft.VisualBasic.Logging.AspLog>.  \\n  \\n The following table lists examples of tasks involving the `My.Application.Log` object.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \\n|Write exception information to the application's log listeners|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \\n|Determine where `My.Application.Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]\"\n  syntax:\n    content: public class Log\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - Microsoft.VisualBasic.Logging.AspLog\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor\n  commentId: M:Microsoft.VisualBasic.Logging.Log.#ctor\n  id: '#ctor'\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: Log()\n  nameWithType: Log.Log()\n  fullName: Log.Log()\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.Log\"></xref> class.\n  syntax:\n    content: public Log ();\n    parameters: []\n  overload: Microsoft.VisualBasic.Logging.Log.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)\n  commentId: M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: Log(String)\n  nameWithType: Log.Log(String)\n  fullName: Log.Log(String)\n  type: Constructor\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Initializes a new instance of the <xref href=\"Microsoft.VisualBasic.Logging.Log\"></xref> class.\n  syntax:\n    content: public Log (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: <xref href=\"System.String\"></xref>. The name to give to the <xref href=\"Microsoft.VisualBasic.Logging.Log.TraceSource\"></xref> property object.\n  overload: Microsoft.VisualBasic.Logging.Log.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  commentId: P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  id: DefaultFileLogWriter\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: DefaultFileLogWriter\n  nameWithType: Log.DefaultFileLogWriter\n  fullName: Log.DefaultFileLogWriter\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets the file the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object that underlies the `Log` object.\n  remarks: \"You can use this property to determine the current configuration of the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }\n    return:\n      type: Microsoft.VisualBasic.Logging.FileLogTraceListener\n      description: Returns the <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object that underlies the `Log` object.\n  overload: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists\n  commentId: M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists\n  id: InitializeWithDefaultsSinceNoConfigExists\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: InitializeWithDefaultsSinceNoConfigExists()\n  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()\n  fullName: Log.InitializeWithDefaultsSinceNoConfigExists()\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Creates a new <xref href=\"Microsoft.VisualBasic.Logging.FileLogTraceListener\"></xref> object and adds it to the <xref href=\"System.Diagnostics.TraceSource.Listeners\"></xref> collection.\n  remarks: \"This method creates a new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, sets its name to `FileLog`, and configures it to log messages with severity level <xref:System.Diagnostics.SourceLevels.Information> and greater. The new <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> object is then added to the <xref:System.Diagnostics.TraceSource.Listeners%2A> collection.  \\n  \\n The <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> calls the method if the <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> property has not been configured. The trace source can be configured in the application's configuration file.\"\n  syntax:\n    content: protected virtual void InitializeWithDefaultsSinceNoConfigExists ();\n    parameters: []\n  overload: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.TraceSource\n  commentId: P:Microsoft.VisualBasic.Logging.Log.TraceSource\n  id: TraceSource\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: TraceSource\n  nameWithType: Log.TraceSource\n  fullName: Log.TraceSource\n  type: Property\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Gets to the <xref href=\"System.Diagnostics.TraceSource\"></xref> object that underlies the `Log` object.\n  remarks: \"You can use this property to determine the current configuration of the `Log` object.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n This is an advanced member; it does not show in IntelliSense unless you select the **All** tab.  \\n  \\n The following table lists an example of a task involving the `TraceSource` property.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Get information for each of the `Log` object's log listeners.|[Troubleshooting: Log Listeners](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  syntax:\n    content: public System.Diagnostics.TraceSource TraceSource { get; }\n    return:\n      type: System.Diagnostics.TraceSource\n      description: Returns the <xref href=\"System.Diagnostics.TraceSource\"></xref> object that underlies the `Log` object.\n  overload: Microsoft.VisualBasic.Logging.Log.TraceSource*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)\n  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)\n  id: WriteEntry(System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteEntry(String)\n  nameWithType: Log.WriteEntry(String)\n  fullName: Log.WriteEntry(String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes a message to the application's log listeners.\n  remarks: \"The `WriteEntry` method writes a message to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \\n  \\n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \\n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \\n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \\n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \\n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \\n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \\n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \\n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \\n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \\n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteEntry` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \\n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications.\"\n  syntax:\n    content: public void WriteEntry (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  id: WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteEntry(String, TraceEventType)\n  nameWithType: Log.WriteEntry(String, TraceEventType)\n  fullName: Log.WriteEntry(String, TraceEventType)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes a message to the application's log listeners.\n  remarks: \"The `WriteEntry` method writes a message to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \\n  \\n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \\n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \\n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \\n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \\n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \\n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \\n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \\n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \\n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \\n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteEntry` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \\n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications.\"\n  syntax:\n    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);\n    parameters:\n    - id: message\n      type: System.String\n      description: Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: The type of message. By default, `TraceEventType.Information`.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  id: WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteEntry(String, TraceEventType, Int32)\n  nameWithType: Log.WriteEntry(String, TraceEventType, Int32)\n  fullName: Log.WriteEntry(String, TraceEventType, Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes a message to the application's log listeners.\n  remarks: \"The `WriteEntry` method writes a message to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteEntry` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \\n  \\n For overloads that do not take the `id` argument, the `id` written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \\n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \\n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \\n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \\n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \\n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \\n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \\n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \\n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \\n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteEntry` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write event information to the application's log listeners|[How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  \\n|Determine where `Log` writes information|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteEntry` method to log tracing information. For more information, see [How to: Write Log Messages](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteEntry` to `My.Log.WriteEntry` for Web applications.\"\n  syntax:\n    content: public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);\n    parameters:\n    - id: message\n      type: System.String\n      description: Required. The message to log. If <code>message</code> is `Nothing`, an empty string is used.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: The type of message. By default, `TraceEventType.Information`.\n    - id: id\n      type: System.Int32\n      description: Message identifier, typically used for correlation. By default, related to <code>entryType</code> as described in the table.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)\n  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)\n  id: WriteException(System.Exception)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteException(Exception)\n  nameWithType: Log.WriteException(Exception)\n  fullName: Log.WriteException(Exception)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes exception information to the application's log listeners.\n  remarks: \"The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \\n  \\n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \\n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \\n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \\n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \\n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \\n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \\n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \\n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \\n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \\n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteException` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \\n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications.\"\n  syntax:\n    content: public void WriteException (Exception ex);\n    parameters:\n    - id: ex\n      type: System.Exception\n      description: Required. Exception to log.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteException*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ex</code> is `Nothing`.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteException(Exception, TraceEventType, String)\n  nameWithType: Log.WriteException(Exception, TraceEventType, String)\n  fullName: Log.WriteException(Exception, TraceEventType, String)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes exception information to the application's log listeners.\n  remarks: \"The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \\n  \\n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \\n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \\n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \\n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \\n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \\n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \\n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \\n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \\n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \\n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteException` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \\n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications.\"\n  syntax:\n    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);\n    parameters:\n    - id: ex\n      type: System.Exception\n      description: Required. Exception to log.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: The type of message. By default, <xref href=\"System.Diagnostics.TraceEventType.Error\"></xref>.\n    - id: additionalInfo\n      type: System.String\n      description: String to append to the message. By default, this is an empty string.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteException*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ex</code> is `Nothing`.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  commentId: M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  id: WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  langs:\n  - csharp\n  name: WriteException(Exception, TraceEventType, String, Int32)\n  nameWithType: Log.WriteException(Exception, TraceEventType, String, Int32)\n  fullName: Log.WriteException(Exception, TraceEventType, String, Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualBasic\n  namespace: Microsoft.VisualBasic.Logging\n  summary: Writes exception information to the application's log listeners.\n  remarks: \"The `WriteException` method writes the information contained in an exception to the application's event log listeners.  \\n  \\n In client applications, the `Log` object is available through the `My.Application.Log` object. In Web applications, the `Log` object is available through the `My.Log` object.  \\n  \\n To learn which log listeners receive the `WriteException` method's messages, see [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). You can change default log listeners. For more information, see [Working with Application Logs](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  \\n  \\n For overloads that do not take the `id` argument, the identifier written to the log is defined by the following table.  \\n  \\n|`severity`|Default `id`|  \\n|----------------|------------------|  \\n|<xref:System.Diagnostics.TraceEventType.Information>|0|  \\n|<xref:System.Diagnostics.TraceEventType.Warning>|1|  \\n|<xref:System.Diagnostics.TraceEventType.Error>|2|  \\n|<xref:System.Diagnostics.TraceEventType.Critical>|3|  \\n|<xref:System.Diagnostics.TraceEventType.Start>|4|  \\n|<xref:System.Diagnostics.TraceEventType.Stop>|5|  \\n|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  \\n|<xref:System.Diagnostics.TraceEventType.Resume>|7|  \\n|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  \\n|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  \\n  \\n The following table lists examples of tasks involving the `WriteException` method.  \\n  \\n|To|See|  \\n|--------|---------|  \\n|Write exception information to the application's event log listeners.|[How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  \\n|Determine where `Log` writes information.|[Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  \\n  \\n## Availability by Project Type  \\n  \\n|Project type|Available|  \\n|------------------|---------------|  \\n|Windows Application|**Yes**|  \\n|Class Library|**Yes**|  \\n|Console Application|**Yes**|  \\n|Windows Control Library|**Yes**|  \\n|Web Control Library|No|  \\n|Windows Service|**Yes**|  \\n|Web Site|**Yes**|\"\n  example:\n  - \"This example shows how to use the `My.Application.Log.WriteException` method to log exceptions. Uncomment the `Dim` and `MsgBox` lines to cause a <xref:System.NullReferenceException> exception. For more information, see [How to: Log Exceptions](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  \\n  \\n [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  \\n  \\n This code example can run only within a client application. Change `My.Application.Log.WriteException` to `My.Log.WriteException` for Web applications.\"\n  syntax:\n    content: public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);\n    parameters:\n    - id: ex\n      type: System.Exception\n      description: Required. Exception to log.\n    - id: severity\n      type: System.Diagnostics.TraceEventType\n      description: The type of message. By default, <xref href=\"System.Diagnostics.TraceEventType.Error\"></xref>.\n    - id: additionalInfo\n      type: System.String\n      description: String to append to the message. By default, this is an empty string.\n    - id: id\n      type: System.Int32\n      description: Message identifier, typically used for correlation. By default, related to <code>entryType</code> as described in the table in the Remarks section.\n  overload: Microsoft.VisualBasic.Logging.Log.WriteException*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>ex</code> is `Nothing`.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The message type is not one of the <xref href=\"System.Diagnostics.TraceEventType\"></xref> enumeration values.\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: Code with partial trust calls the method, but writes to an event log listener that requires full trust.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: Log()\n  nameWithType: Log.Log()\n  fullName: Log.Log()\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor(System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: Log(String)\n  nameWithType: Log.Log(String)\n  fullName: Log.Log(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: DefaultFileLogWriter\n  nameWithType: Log.DefaultFileLogWriter\n  fullName: Log.DefaultFileLogWriter\n- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener\n  parent: Microsoft.VisualBasic.Logging\n  isExternal: false\n  name: FileLogTraceListener\n  nameWithType: FileLogTraceListener\n  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener\n- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: InitializeWithDefaultsSinceNoConfigExists()\n  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists()\n  fullName: Log.InitializeWithDefaultsSinceNoConfigExists()\n- uid: Microsoft.VisualBasic.Logging.Log.TraceSource\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: TraceSource\n  nameWithType: Log.TraceSource\n  fullName: Log.TraceSource\n- uid: System.Diagnostics.TraceSource\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceSource\n  nameWithType: TraceSource\n  fullName: System.Diagnostics.TraceSource\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry(String)\n  nameWithType: Log.WriteEntry(String)\n  fullName: Log.WriteEntry(String)\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry(String, TraceEventType)\n  nameWithType: Log.WriteEntry(String, TraceEventType)\n  fullName: Log.WriteEntry(String, TraceEventType)\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  nameWithType: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry(String, TraceEventType, Int32)\n  nameWithType: Log.WriteEntry(String, TraceEventType, Int32)\n  fullName: Log.WriteEntry(String, TraceEventType, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException(Exception)\n  nameWithType: Log.WriteException(Exception)\n  fullName: Log.WriteException(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException(Exception, TraceEventType, String)\n  nameWithType: Log.WriteException(Exception, TraceEventType, String)\n  fullName: Log.WriteException(Exception, TraceEventType, String)\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException(Exception, TraceEventType, String, Int32)\n  nameWithType: Log.WriteException(Exception, TraceEventType, String, Int32)\n  fullName: Log.WriteException(Exception, TraceEventType, String, Int32)\n- uid: Microsoft.VisualBasic.Logging.Log.#ctor*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: Log\n  nameWithType: Log.Log\n  fullName: Log.Log\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n- uid: Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: DefaultFileLogWriter\n  nameWithType: Log.DefaultFileLogWriter\n  fullName: Log.DefaultFileLogWriter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n- uid: Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: InitializeWithDefaultsSinceNoConfigExists\n  nameWithType: Log.InitializeWithDefaultsSinceNoConfigExists\n  fullName: Log.InitializeWithDefaultsSinceNoConfigExists\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n- uid: Microsoft.VisualBasic.Logging.Log.TraceSource*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: TraceSource\n  nameWithType: Log.TraceSource\n  fullName: Log.TraceSource\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n- uid: Microsoft.VisualBasic.Logging.Log.WriteEntry*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteEntry\n  nameWithType: Log.WriteEntry\n  fullName: Log.WriteEntry\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n- uid: Microsoft.VisualBasic.Logging.Log.WriteException*\n  parent: Microsoft.VisualBasic.Logging.Log\n  isExternal: false\n  name: WriteException\n  nameWithType: Log.WriteException\n  fullName: Log.WriteException\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualBasic.Logging/Log.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}