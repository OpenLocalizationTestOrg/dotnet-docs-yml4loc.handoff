{"nodes":[{"content":"Represents a compound Access Control Entry (ACE).","nodes":[{"pos":[0,49],"content":"Represents a compound Access Control Entry (ACE).","nodes":[{"content":"Represents a compound Access Control Entry (ACE).","pos":[0,49]}]}],"pos":[828,878],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> class.","nodes":[{"pos":[0,103],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CompoundAce\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> class."}],"pos":[4136,4240],"yaml":true},{"content":"Contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).","nodes":[{"pos":[0,151],"content":"Contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).","nodes":[{"content":"Contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).","pos":[0,151]}]}],"pos":[4561,4713],"yaml":true},{"content":"The access mask for the ACE.","nodes":[{"pos":[0,28],"content":"The access mask for the ACE.","nodes":[{"content":"The access mask for the ACE.","pos":[0,28]}]}],"pos":[4778,4807],"yaml":true},{"content":"A value from the <xref href=\"System.Security.AccessControl.CompoundAceType\"></xref> enumeration.","nodes":[{"pos":[0,96],"content":"A value from the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CompoundAceType\"&gt;&lt;/xref&gt;</ph> enumeration.","source":"A value from the <xref href=\"System.Security.AccessControl.CompoundAceType\"></xref> enumeration."}],"pos":[4910,5007],"yaml":true},{"content":"The <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> associated with the new ACE.","nodes":[{"pos":[0,98],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph> associated with the new ACE.","source":"The <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> associated with the new ACE."}],"pos":[5097,5196],"yaml":true},{"content":"Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\"System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)\"></xref> method.","nodes":[{"pos":[0,336],"content":"Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\"System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)\"></xref> method.","nodes":[{"content":"Gets the length, in bytes, of the binary representation of the current <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CompoundAce\"&gt;&lt;/xref&gt;</ph> object.","pos":[0,141],"source":"Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object."},{"content":"This length should be used before marshaling the ACL into a binary array with the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)\"&gt;&lt;/xref&gt;</ph> method.","pos":[142,336],"source":" This length should be used before marshaling the ACL into a binary array with the <xref href=\"System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)\"></xref> method."}]}],"pos":[6487,6824],"yaml":true},{"content":"The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object.","nodes":[{"pos":[0,136],"content":"The length, in bytes, of the binary representation of the current <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CompoundAce\"&gt;&lt;/xref&gt;</ph> object.","source":"The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object."}],"pos":[6945,7082],"yaml":true},{"content":"Gets or sets the type of this <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object.","nodes":[{"pos":[0,100],"content":"Gets or sets the type of this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CompoundAce\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets or sets the type of this <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object."}],"pos":[8398,8499],"yaml":true},{"content":"The type of this <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object.","nodes":[{"pos":[0,87],"content":"The type of this <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CompoundAce\"&gt;&lt;/xref&gt;</ph> object.","source":"The type of this <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object."}],"pos":[8694,8782],"yaml":true},{"content":"Marshals the contents of the <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object into the specified byte array beginning at the specified offset.","nodes":[{"pos":[0,163],"content":"Marshals the contents of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CompoundAce\"&gt;&lt;/xref&gt;</ph> object into the specified byte array beginning at the specified offset.","source":"Marshals the contents of the <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object into the specified byte array beginning at the specified offset."}],"pos":[10216,10380],"yaml":true},{"content":"The byte array into which the contents of the <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> is marshaled.","nodes":[{"pos":[0,122],"content":"The byte array into which the contents of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.CompoundAce\"&gt;&lt;/xref&gt;</ph> is marshaled.","source":"The byte array into which the contents of the <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> is marshaled."}],"pos":[10553,10676],"yaml":true},{"content":"The offset at which to start marshaling.","nodes":[{"pos":[0,40],"content":"The offset at which to start marshaling.","nodes":[{"content":"The offset at which to start marshaling.","pos":[0,40]}]}],"pos":[10737,10778],"yaml":true},{"content":"<code>offset</code> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> to be copied into <code>array</code>.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">&lt;code&gt;offset&lt;/code&gt;</ph> is negative or too high to allow the entire <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.CompoundAce\"&gt;&lt;/xref&gt;</ph> to be copied into <ph id=\"ph3\">&lt;code&gt;array&lt;/code&gt;</ph>.","source":"<code>offset</code> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> to be copied into <code>array</code>."}],"pos":[10975,11140],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.CompoundAce\n  commentId: T:System.Security.AccessControl.CompoundAce\n  id: CompoundAce\n  children:\n  - System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)\n  - System.Security.AccessControl.CompoundAce.BinaryLength\n  - System.Security.AccessControl.CompoundAce.CompoundAceType\n  - System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)\n  langs:\n  - csharp\n  name: CompoundAce\n  nameWithType: CompoundAce\n  fullName: System.Security.AccessControl.CompoundAce\n  type: Class\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Represents a compound Access Control Entry (ACE).\n  syntax:\n    content: 'public sealed class CompoundAce : System.Security.AccessControl.KnownAce'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAce\n  - System.Security.AccessControl.KnownAce\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.AccessControl.GenericAce.AceFlags\n  - System.Security.AccessControl.GenericAce.AceType\n  - System.Security.AccessControl.GenericAce.AuditFlags\n  - System.Security.AccessControl.GenericAce.Copy\n  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.Equals(System.Object)\n  - System.Security.AccessControl.GenericAce.GetHashCode\n  - System.Security.AccessControl.GenericAce.InheritanceFlags\n  - System.Security.AccessControl.GenericAce.IsInherited\n  - System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  - System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  - System.Security.AccessControl.GenericAce.PropagationFlags\n  - System.Security.AccessControl.KnownAce.AccessMask\n  - System.Security.AccessControl.KnownAce.SecurityIdentifier\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CompoundAce.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)\n  id: '#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)'\n  parent: System.Security.AccessControl.CompoundAce\n  langs:\n  - csharp\n  name: CompoundAce(AceFlags, Int32, CompoundAceType, SecurityIdentifier)\n  nameWithType: CompoundAce.CompoundAce(AceFlags, Int32, CompoundAceType, SecurityIdentifier)\n  fullName: CompoundAce.CompoundAce(AceFlags, Int32, CompoundAceType, SecurityIdentifier)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> class.\n  syntax:\n    content: public CompoundAce (System.Security.AccessControl.AceFlags flags, int accessMask, System.Security.AccessControl.CompoundAceType compoundAceType, System.Security.Principal.SecurityIdentifier sid);\n    parameters:\n    - id: flags\n      type: System.Security.AccessControl.AceFlags\n      description: Contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).\n    - id: accessMask\n      type: System.Int32\n      description: The access mask for the ACE.\n    - id: compoundAceType\n      type: System.Security.AccessControl.CompoundAceType\n      description: A value from the <xref href=\"System.Security.AccessControl.CompoundAceType\"></xref> enumeration.\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: The <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> associated with the new ACE.\n  overload: System.Security.AccessControl.CompoundAce.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CompoundAce.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CompoundAce.BinaryLength\n  commentId: P:System.Security.AccessControl.CompoundAce.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.CompoundAce\n  langs:\n  - csharp\n  name: BinaryLength\n  nameWithType: CompoundAce.BinaryLength\n  fullName: CompoundAce.BinaryLength\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\"System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)\"></xref> method.\n  syntax:\n    content: public override int BinaryLength { get; }\n    return:\n      type: System.Int32\n      description: The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object.\n  overload: System.Security.AccessControl.CompoundAce.BinaryLength*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CompoundAce.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CompoundAce.CompoundAceType\n  commentId: P:System.Security.AccessControl.CompoundAce.CompoundAceType\n  id: CompoundAceType\n  parent: System.Security.AccessControl.CompoundAce\n  langs:\n  - csharp\n  name: CompoundAceType\n  nameWithType: CompoundAce.CompoundAceType\n  fullName: CompoundAce.CompoundAceType\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets or sets the type of this <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object.\n  syntax:\n    content: public System.Security.AccessControl.CompoundAceType CompoundAceType { get; set; }\n    return:\n      type: System.Security.AccessControl.CompoundAceType\n      description: The type of this <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object.\n  overload: System.Security.AccessControl.CompoundAce.CompoundAceType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CompoundAce.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CompoundAce\n  langs:\n  - csharp\n  name: GetBinaryForm(Byte[], Int32)\n  nameWithType: CompoundAce.GetBinaryForm(Byte[], Int32)\n  fullName: CompoundAce.GetBinaryForm(Byte[], Int32)\n  type: Method\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Marshals the contents of the <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> object into the specified byte array beginning at the specified offset.\n  syntax:\n    content: public override void GetBinaryForm (byte[] binaryForm, int offset);\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: The byte array into which the contents of the <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> is marshaled.\n    - id: offset\n      type: System.Int32\n      description: The offset at which to start marshaling.\n  overload: System.Security.AccessControl.CompoundAce.GetBinaryForm*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>offset</code> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.CompoundAce\"></xref> to be copied into <code>array</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CompoundAce.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.AccessControl.KnownAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: KnownAce\n  nameWithType: KnownAce\n  fullName: System.Security.AccessControl.KnownAce\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CompoundAce\n  isExternal: false\n  name: CompoundAce(AceFlags, Int32, CompoundAceType, SecurityIdentifier)\n  nameWithType: CompoundAce.CompoundAce(AceFlags, Int32, CompoundAceType, SecurityIdentifier)\n  fullName: CompoundAce.CompoundAce(AceFlags, Int32, CompoundAceType, SecurityIdentifier)\n- uid: System.Security.AccessControl.AceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceFlags\n  nameWithType: AceFlags\n  fullName: System.Security.AccessControl.AceFlags\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.AccessControl.CompoundAceType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: CompoundAceType\n  nameWithType: CompoundAceType\n  fullName: System.Security.AccessControl.CompoundAceType\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  nameWithType: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n- uid: System.Security.AccessControl.CompoundAce.BinaryLength\n  parent: System.Security.AccessControl.CompoundAce\n  isExternal: false\n  name: BinaryLength\n  nameWithType: CompoundAce.BinaryLength\n  fullName: CompoundAce.BinaryLength\n- uid: System.Security.AccessControl.CompoundAce.CompoundAceType\n  parent: System.Security.AccessControl.CompoundAce\n  isExternal: false\n  name: CompoundAceType\n  nameWithType: CompoundAce.CompoundAceType\n  fullName: CompoundAce.CompoundAceType\n- uid: System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CompoundAce\n  isExternal: false\n  name: GetBinaryForm(Byte[], Int32)\n  nameWithType: CompoundAce.GetBinaryForm(Byte[], Int32)\n  fullName: CompoundAce.GetBinaryForm(Byte[], Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.AccessControl.CompoundAce.#ctor*\n  parent: System.Security.AccessControl.CompoundAce\n  isExternal: false\n  name: CompoundAce\n  nameWithType: CompoundAce.CompoundAce\n  fullName: CompoundAce.CompoundAce\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CompoundAce.xml\n- uid: System.Security.AccessControl.CompoundAce.BinaryLength*\n  parent: System.Security.AccessControl.CompoundAce\n  isExternal: false\n  name: BinaryLength\n  nameWithType: CompoundAce.BinaryLength\n  fullName: CompoundAce.BinaryLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CompoundAce.xml\n- uid: System.Security.AccessControl.CompoundAce.CompoundAceType*\n  parent: System.Security.AccessControl.CompoundAce\n  isExternal: false\n  name: CompoundAceType\n  nameWithType: CompoundAce.CompoundAceType\n  fullName: CompoundAce.CompoundAceType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CompoundAce.xml\n- uid: System.Security.AccessControl.CompoundAce.GetBinaryForm*\n  parent: System.Security.AccessControl.CompoundAce\n  isExternal: false\n  name: GetBinaryForm\n  nameWithType: CompoundAce.GetBinaryForm\n  fullName: CompoundAce.GetBinaryForm\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/CompoundAce.xml\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: GenericAce.Equals(Object)\n  fullName: GenericAce.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: GenericAce.GetHashCode()\n  fullName: GenericAce.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceFlags\n  nameWithType: GenericAce.AceFlags\n  fullName: GenericAce.AceFlags\n- uid: System.Security.AccessControl.GenericAce.AceType\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AceType\n  nameWithType: GenericAce.AceType\n  fullName: GenericAce.AceType\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: AuditFlags\n  nameWithType: GenericAce.AuditFlags\n  fullName: GenericAce.AuditFlags\n- uid: System.Security.AccessControl.GenericAce.Copy\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: Copy()\n  nameWithType: GenericAce.Copy()\n  fullName: GenericAce.Copy()\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: CreateFromBinaryForm(Byte[], Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[], Int32)\n  fullName: GenericAce.CreateFromBinaryForm(Byte[], Int32)\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: GenericAce.InheritanceFlags\n  fullName: GenericAce.InheritanceFlags\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: IsInherited\n  nameWithType: GenericAce.IsInherited\n  fullName: GenericAce.IsInherited\n- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: op_Equality(GenericAce, GenericAce)\n  nameWithType: GenericAce.op_Equality(GenericAce, GenericAce)\n  fullName: GenericAce.op_Equality(GenericAce, GenericAce)\n- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: op_Inequality(GenericAce, GenericAce)\n  nameWithType: GenericAce.op_Inequality(GenericAce, GenericAce)\n  fullName: GenericAce.op_Inequality(GenericAce, GenericAce)\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: GenericAce.PropagationFlags\n  fullName: GenericAce.PropagationFlags\n- uid: System.Security.AccessControl.KnownAce.AccessMask\n  parent: System.Security.AccessControl.KnownAce\n  isExternal: false\n  name: AccessMask\n  nameWithType: KnownAce.AccessMask\n  fullName: KnownAce.AccessMask\n- uid: System.Security.AccessControl.KnownAce.SecurityIdentifier\n  parent: System.Security.AccessControl.KnownAce\n  isExternal: false\n  name: SecurityIdentifier\n  nameWithType: KnownAce.SecurityIdentifier\n  fullName: KnownAce.SecurityIdentifier\n"}