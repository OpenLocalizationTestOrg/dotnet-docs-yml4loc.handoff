{"nodes":[{"content":"Represents an asynchronous operation that can return a value.","nodes":[{"pos":[0,61],"content":"Represents an asynchronous operation that can return a value.","nodes":[{"content":"Represents an asynchronous operation that can return a value.","pos":[0,61]}]}],"pos":[4669,4731],"yaml":true},{"content":"The <xref:System.Threading.Tasks.Task%601> class represents a single operation that returns a value and that usually executes asynchronously. <xref:System.Threading.Tasks.Task%601> objects are one of the central components of the  first introduced in the .NET Framework 4. Because the work performed by a <xref:System.Threading.Tasks.Task%601> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.  \n  \n <xref:System.Threading.Tasks.Task%601> instances may be created in a variety of ways. The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> or <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. These methods provide a simple way to start a task by using default values and without acquiring additional parameters. The following example uses the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> method to start a task that loops and then displays the number of loop iterations:  \n  \n [!code-csharp[System.Threading.Tasks.Task\\`1#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/run1.cs#6)]\n [!code-vb[System.Threading.Tasks.Task\\`1#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/run1.vb#6)]  \n  \n An alternative, and the most common way to start a task in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is to call the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method. The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory> object, and the <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory%601> object. Overloads of their `StartNew` method let you pass arguments, define task creation options, and specify a task scheduler. The following example uses the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> method to start a task. It is functionally equivalent to the code in the previous example.  \n  \n [!code-csharp[System.Threading.Tasks.Task\\`1#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/startnew1.cs#7)]\n [!code-vb[System.Threading.Tasks.Task\\`1#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/startnew1.vb#7)]  \n  \n For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).  \n  \n The <xref:System.Threading.Tasks.Task%601> class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> and `Task.Factory.StartNew` methods are the preferred mechanisms for creating and scheduling computational tasks, but for scenarios where task creation and scheduling must be separated, the constructors may be used, and the task's <xref:System.Threading.Tasks.Task.Start%2A> method may then be used to schedule the task for execution at a later time.  \n  \n Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context. That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread. For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes. For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref:System.Globalization.CultureInfo> topic. Note that Store apps follow the Windows Runtime in setting and getting the default culture.  \n  \nFor operations that do not return a value, you use the <xref:System.Threading.Tasks.Task> class. If you're developing with C# 7, for a more lightweight task that is a value type rather than a reference type, use the <xref:System.Threading.Tasks.ValueTask?displayProperty=fullName> structure; it is supported starting with C# 7.","nodes":[{"pos":[0,845],"content":"The <xref:System.Threading.Tasks.Task%601> class represents a single operation that returns a value and that usually executes asynchronously. <xref:System.Threading.Tasks.Task%601> objects are one of the central components of the  first introduced in the .NET Framework 4. Because the work performed by a <xref:System.Threading.Tasks.Task%601> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.","nodes":[{"content":"The <xref:System.Threading.Tasks.Task%601> class represents a single operation that returns a value and that usually executes asynchronously. <xref:System.Threading.Tasks.Task%601> objects are one of the central components of the  first introduced in the .NET Framework 4. Because the work performed by a <xref:System.Threading.Tasks.Task%601> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.","pos":[0,845],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class represents a single operation that returns a value and that usually executes asynchronously.","pos":[0,141],"source":"The <xref:System.Threading.Tasks.Task%601> class represents a single operation that returns a value and that usually executes asynchronously."},{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objects are one of the central components of the  first introduced in the .NET Framework 4.","pos":[142,272],"source":" <xref:System.Threading.Tasks.Task%601> objects are one of the central components of the  first introduced in the .NET Framework 4."},{"content":"Because the work performed by a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Status%2A&gt;</ph> property, as well as the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.IsCanceled%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.Task.IsCompleted%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Threading.Tasks.Task.IsFaulted%2A&gt;</ph> properties, to determine the   state of a task.","pos":[273,753],"source":" Because the work performed by a <xref:System.Threading.Tasks.Task%601> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task."},{"content":"Most commonly, a lambda expression is used to specify the work that the task is to perform.","pos":[754,845]}]}]},{"pos":[852,1654],"content":"<xref:System.Threading.Tasks.Task%601> instances may be created in a variety of ways. The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> or <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. These methods provide a simple way to start a task by using default values and without acquiring additional parameters. The following example uses the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> method to start a task that loops and then displays the number of loop iterations:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> instances may be created in a variety of ways.","pos":[0,85],"source":"<xref:System.Threading.Tasks.Task%601> instances may be created in a variety of ways."},{"content":"The most common approach, which is available starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, is to call the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> method.","pos":[86,467],"source":" The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> or <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method."},{"content":"These methods provide a simple way to start a task by using default values and without acquiring additional parameters.","pos":[468,587]},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName&gt;</ph> method to start a task that loops and then displays the number of loop iterations:","pos":[588,802],"source":" The following example uses the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> method to start a task that loops and then displays the number of loop iterations:"}]},{"pos":[1661,1946],"content":"<bpt id=\"p1\">[</bpt>!code-csharp<bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task<ph id=\"ph1\">\\`</ph>1#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/run1.cs#6)</ept>] [!code-vb[System.Threading.Tasks.Task<ph id=\"ph2\">\\`</ph>1#6<ept id=\"p1\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/run1.vb#6)</ept>]","source":"[!code-csharp[System.Threading.Tasks.Task\\`1#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/run1.cs#6)]\n [!code-vb[System.Threading.Tasks.Task\\`1#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/run1.vb#6)]"},{"pos":[1953,2919],"content":"An alternative, and the most common way to start a task in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is to call the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method. The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory> object, and the <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory%601> object. Overloads of their `StartNew` method let you pass arguments, define task creation options, and specify a task scheduler. The following example uses the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> method to start a task. It is functionally equivalent to the code in the previous example.","nodes":[{"content":"An alternative, and the most common way to start a task in the <ph id=\"ph1\">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, is to call the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,316],"source":"An alternative, and the most common way to start a task in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is to call the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName&gt;</ph> property returns a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory&gt;</ph> object, and the <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName&gt;</ph> property returns a <ph id=\"ph4\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> object.","pos":[317,616],"source":" The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory> object, and the <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory%601> object."},{"content":"Overloads of their <ph id=\"ph1\">`StartNew`</ph> method let you pass arguments, define task creation options, and specify a task scheduler.","pos":[617,737],"source":" Overloads of their `StartNew` method let you pass arguments, define task creation options, and specify a task scheduler."},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName&gt;</ph> method to start a task.","pos":[738,899],"source":" The following example uses the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> method to start a task."},{"content":"It is functionally equivalent to the code in the previous example.","pos":[900,966]}]},{"pos":[2926,3221],"content":"<bpt id=\"p1\">[</bpt>!code-csharp<bpt id=\"p2\">[</bpt>System.Threading.Tasks.Task<ph id=\"ph1\">\\`</ph>1#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/startnew1.cs#7)</ept>] [!code-vb[System.Threading.Tasks.Task<ph id=\"ph2\">\\`</ph>1#7<ept id=\"p1\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/startnew1.vb#7)</ept>]","source":"[!code-csharp[System.Threading.Tasks.Task\\`1#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/startnew1.cs#7)]\n [!code-vb[System.Threading.Tasks.Task\\`1#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/startnew1.vb#7)]"},{"pos":[3228,3375],"content":"For more complete examples, see <bpt id=\"p1\">[</bpt>Task-based Asynchronous Programming<ept id=\"p1\">](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)</ept>.","source":"For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)."},{"pos":[3382,3972],"content":"The <xref:System.Threading.Tasks.Task%601> class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> and `Task.Factory.StartNew` methods are the preferred mechanisms for creating and scheduling computational tasks, but for scenarios where task creation and scheduling must be separated, the constructors may be used, and the task's <xref:System.Threading.Tasks.Task.Start%2A> method may then be used to schedule the task for execution at a later time.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> class also provides constructors that initialize the task but that do not schedule it for execution.","pos":[0,143],"source":"The <xref:System.Threading.Tasks.Task%601> class also provides constructors that initialize the task but that do not schedule it for execution."},{"content":"For performance reasons, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">`Task.Factory.StartNew`</ph> methods are the preferred mechanisms for creating and scheduling computational tasks, but for scenarios where task creation and scheduling must be separated, the constructors may be used, and the task's <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task.Start%2A&gt;</ph> method may then be used to schedule the task for execution at a later time.","pos":[144,590],"source":" For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> and `Task.Factory.StartNew` methods are the preferred mechanisms for creating and scheduling computational tasks, but for scenarios where task creation and scheduling must be separated, the constructors may be used, and the task's <xref:System.Threading.Tasks.Task.Start%2A> method may then be used to schedule the task for execution at a later time."}]},{"pos":[3979,4745],"content":"Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context. That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread. For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes. For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref:System.Globalization.CultureInfo> topic. Note that Store apps follow the Windows Runtime in setting and getting the default culture.","nodes":[{"content":"Starting with desktop apps that target the <ph id=\"ph1\">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, the culture of the thread that creates and invokes a task becomes part of the thread's context.","pos":[0,185],"source":"Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context."},{"content":"That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.","pos":[186,340]},{"content":"For apps that target versions of the .NET Framework prior to the <ph id=\"ph1\">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]</ph>, the culture of the task is the culture of the thread on which the task executes.","pos":[341,533],"source":" For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes."},{"content":"For more information, see the \"Culture and task-based asynchronous operations\" section in the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> topic.","pos":[534,674],"source":" For more information, see the \"Culture and task-based asynchronous operations\" section in the <xref:System.Globalization.CultureInfo> topic."},{"content":"Note that Store apps follow the Windows Runtime in setting and getting the default culture.","pos":[675,766]}]},{"pos":[4751,5078],"content":"For operations that do not return a value, you use the <xref:System.Threading.Tasks.Task> class. If you're developing with C# 7, for a more lightweight task that is a value type rather than a reference type, use the <xref:System.Threading.Tasks.ValueTask?displayProperty=fullName> structure; it is supported starting with C# 7.","nodes":[{"content":"For operations that do not return a value, you use the <xref:System.Threading.Tasks.Task> class. If you're developing with C# 7, for a more lightweight task that is a value type rather than a reference type, use the <xref:System.Threading.Tasks.ValueTask?displayProperty=fullName> structure; it is supported starting with C# 7.","pos":[0,327],"nodes":[{"content":"For operations that do not return a value, you use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> class.","pos":[0,96],"source":"For operations that do not return a value, you use the <xref:System.Threading.Tasks.Task> class."},{"content":"If you're developing with C# 7, for a more lightweight task that is a value type rather than a reference type, use the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.ValueTask?displayProperty=fullName&gt;</ph> structure; it is supported starting with C# 7.","pos":[97,327],"source":" If you're developing with C# 7, for a more lightweight task that is a value type rather than a reference type, use the <xref:System.Threading.Tasks.ValueTask?displayProperty=fullName> structure; it is supported starting with C# 7."}]}]}],"pos":[4742,9847],"yaml":true,"extradata":"MT"},{"content":"The type of the result produced by this <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,91],"content":"The type of the result produced by this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"The type of the result produced by this <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[9986,10078],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function.","nodes":[{"pos":[0,97],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> with the specified function.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function."}],"pos":[19949,20047],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,508],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,508],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName&gt;</ph> methods.","pos":[0,384],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> methods."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[385,508]}]}]}],"pos":[20058,20567],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"pos":[0,228],"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]},{"content":"When the function has completed, the task's <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property will be set to return the result value of the function.","pos":[62,228],"source":" When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function."}]}],"pos":[22061,22290],"yaml":true},{"content":"The <code>function</code> argument is null.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>function</code> argument is null."}],"pos":[22455,22499],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function and state.","nodes":[{"pos":[0,107],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> with the specified function and state.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function and state."}],"pos":[24184,24292],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,434],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,434],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=fullName&gt;</ph> method.","pos":[0,310],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[311,434]}]}]}],"pos":[24303,24738],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"pos":[0,228],"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]},{"content":"When the function has completed, the task's <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property will be set to return the result value of the function.","pos":[62,228],"source":" When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function."}]}],"pos":[24921,25150],"yaml":true},{"content":"An object representing data to be used by the action.","nodes":[{"pos":[0,53],"content":"An object representing data to be used by the action.","nodes":[{"content":"An object representing data to be used by the action.","pos":[0,53]}]}],"pos":[25211,25265],"yaml":true},{"content":"The <code>function</code> argument is null.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>function</code> argument is null."}],"pos":[25430,25474],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function.","nodes":[{"pos":[0,97],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> with the specified function.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function."}],"pos":[27192,27290],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,582],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,582],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> methods.","pos":[0,458],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[459,582]}]}]}],"pos":[27301,27884],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"pos":[0,228],"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]},{"content":"When the function has completed, the task's <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property will be set to return the result value of the function.","pos":[62,228],"source":" When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function."}]}],"pos":[28079,28308],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> to be assigned to this task.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> to be assigned to this task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> to be assigned to this task."}],"pos":[28402,28491],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,136],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[28660,28797],"yaml":true},{"content":"The <code>function</code> argument is null.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>function</code> argument is null."}],"pos":[28899,28943],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function and creation options.","nodes":[{"pos":[0,118],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> with the specified function and creation options.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function and creation options."}],"pos":[30691,30810],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,447],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,447],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName&gt;</ph> method.","pos":[0,323],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[324,447]}]}]}],"pos":[30821,31269],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"pos":[0,228],"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]},{"content":"When the function has completed, the task's <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property will be set to return the result value of the function.","pos":[62,228],"source":" When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function."}]}],"pos":[31470,31699],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> used to customize the task's behavior.","source":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior."}],"pos":[31799,31906],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.","nodes":[{"pos":[0,137],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>."}],"pos":[32083,32221],"yaml":true},{"content":"The <code>function</code> argument is null.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>function</code> argument is null."}],"pos":[32323,32367],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified action, state, and options.","nodes":[{"pos":[0,115],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> with the specified action, state, and options.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified action, state, and options."}],"pos":[34214,34330],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,471],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,471],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName&gt;</ph> method.","pos":[0,347],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[348,471]}]}]}],"pos":[34341,34813],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"pos":[0,228],"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]},{"content":"When the function has completed, the task's <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property will be set to return the result value of the function.","pos":[62,228],"source":" When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function."}]}],"pos":[35050,35279],"yaml":true},{"content":"An object representing data to be used by the function.","nodes":[{"pos":[0,55],"content":"An object representing data to be used by the function.","nodes":[{"content":"An object representing data to be used by the function.","pos":[0,55]}]}],"pos":[35340,35396],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> to be assigned to the new task.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> to be assigned to the new task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> to be assigned to the new task."}],"pos":[35490,35582],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,136],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[35751,35888],"yaml":true},{"content":"The <code>function</code> argument is null.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>function</code> argument is null."}],"pos":[35990,36034],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified action, state, and options.","nodes":[{"pos":[0,115],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> with the specified action, state, and options.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified action, state, and options."}],"pos":[37911,38027],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,479],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,479],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName&gt;</ph> method.","pos":[0,355],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[356,479]}]}]}],"pos":[38038,38518],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"pos":[0,228],"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]},{"content":"When the function has completed, the task's <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property will be set to return the result value of the function.","pos":[62,228],"source":" When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function."}]}],"pos":[38761,38990],"yaml":true},{"content":"An object representing data to be used by the function.","nodes":[{"pos":[0,55],"content":"An object representing data to be used by the function.","nodes":[{"content":"An object representing data to be used by the function.","pos":[0,55]}]}],"pos":[39051,39107],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> used to customize the task's behavior.","source":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior."}],"pos":[39207,39314],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.","nodes":[{"pos":[0,137],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>."}],"pos":[39491,39629],"yaml":true},{"content":"The <code>function</code> argument is null.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>function</code> argument is null."}],"pos":[39731,39775],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function and creation options.","nodes":[{"pos":[0,118],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> with the specified function and creation options.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function and creation options."}],"pos":[41685,41804],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method.  The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,530],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method.  The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method.  The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,530],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName&gt;</ph> method.","pos":[0,405],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[407,530]}]}]}],"pos":[41815,42346],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"pos":[0,228],"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]},{"content":"When the function has completed, the task's <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property will be set to return the result value of the function.","pos":[62,228],"source":" When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function."}]}],"pos":[42601,42830],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task.","nodes":[{"pos":[0,98],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task."}],"pos":[42924,43023],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> used to customize the task's behavior.","source":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior."}],"pos":[43123,43230],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,136],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[43399,43536],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.","nodes":[{"pos":[0,137],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>."}],"pos":[43650,43788],"yaml":true},{"content":"The <code>function</code> argument is null.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>function</code> argument is null."}],"pos":[43890,43934],"yaml":true},{"content":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified action, state, and options.","nodes":[{"pos":[0,115],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> with the specified action, state, and options.","source":"Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified action, state, and options."}],"pos":[45973,46089],"yaml":true},{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"pos":[0,555],"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[0,555],"nodes":[{"content":"Rather than calling this constructor, the most common way to instantiate a <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object and launch a task is by calling the static <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName&gt;</ph> method.","pos":[0,431],"source":"Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method."},{"content":"The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.","pos":[432,555]}]}]}],"pos":[46100,46656],"yaml":true,"extradata":"MT"},{"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"pos":[0,228],"content":"The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.","nodes":[{"content":"The delegate that represents the code to execute in the task.","pos":[0,61]},{"content":"When the function has completed, the task's <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property will be set to return the result value of the function.","pos":[62,228],"source":" When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function."}]}],"pos":[46953,47182],"yaml":true},{"content":"An object representing data to be used by the function.","nodes":[{"pos":[0,55],"content":"An object representing data to be used by the function.","nodes":[{"content":"An object representing data to be used by the function.","pos":[0,55]}]}],"pos":[47243,47299],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> to be assigned to the new task.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> to be assigned to the new task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> to be assigned to the new task."}],"pos":[47393,47485],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.","nodes":[{"pos":[0,106],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph> used to customize the task's behavior.","source":"The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior."}],"pos":[47585,47692],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,136],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[47861,47998],"yaml":true},{"content":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.","nodes":[{"pos":[0,137],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">creationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCreationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>."}],"pos":[48112,48250],"yaml":true},{"content":"The <code>function</code> argument is null.","nodes":[{"pos":[0,43],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">function</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>function</code> argument is null."}],"pos":[48352,48396],"yaml":true},{"content":"Configures an awaiter used to await this <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,92],"content":"Configures an awaiter used to await this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Configures an awaiter used to await this <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[49954,50047],"yaml":true},{"content":"true to attempt to marshal the continuation back to the original context captured; otherwise, false.","nodes":[{"pos":[0,100],"content":"true to attempt to marshal the continuation back to the original context captured; otherwise, false.","nodes":[{"content":"true to attempt to marshal the continuation back to the original context captured; otherwise, false.","pos":[0,100]}]}],"pos":[50289,50390],"yaml":true},{"content":"An object used to await this task.","nodes":[{"pos":[0,34],"content":"An object used to await this task.","nodes":[{"content":"An object used to await this task.","pos":[0,34]}]}],"pos":[50491,50526],"yaml":true},{"content":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,114],"content":"Creates a continuation that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[52948,53063],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed. If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"pos":[0,267],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed. If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has  completed.","pos":[0,122],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed."},{"content":"If the criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter  are not met, the continuation task will be canceled instead of scheduled.","pos":[123,267],"source":" If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled."}]}],"pos":[53074,53342],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,196],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,87],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[88,196]}]}],"pos":[53813,54010],"yaml":true},{"content":"An object representing data to be used by the continuation action.","nodes":[{"pos":[0,66],"content":"An object representing data to be used by the continuation action.","nodes":[{"content":"An object representing data to be used by the continuation action.","pos":[0,66]}]}],"pos":[54071,54138],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[54232,54344],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as  well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,311],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as  well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as  well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,311],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as  well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[54452,54764],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its  execution.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its  execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its  execution."}],"pos":[54852,54985],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[55056,55125],"yaml":true},{"content":"The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[55297,55342],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[55456,55602],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[55708,55804],"yaml":true},{"content":"Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.","nodes":[{"pos":[0,107],"content":"Creates a continuation that executes according the condition specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Creates a continuation that executes according the condition specified in <code>continuationOptions</code>."}],"pos":[58022,58130],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled. For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).","nodes":[{"pos":[0,421],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled. For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.","pos":[0,121],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed."},{"content":"If the criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.","pos":[122,265],"source":" If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Chaining Tasks by Using Continuation Tasks<ept id=\"p1\">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept>.","pos":[266,421],"source":" For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)."}]}],"pos":[58141,58563],"yaml":true,"extradata":"MT"},{"content":"An action to run according the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,160],"content":"An action to run according the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"An action to run according the condition specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,87],"source":"An action to run according the condition specified in <code>continuationOptions</code>."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[88,160]}]}],"pos":[58999,59160],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[59254,59366],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[59474,59785],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[59873,60005],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[60076,60145],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed."},{"pos":[80,84],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[91,227],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[60321,60559],"yaml":true},{"content":"The <code>continuationAction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationAction</code> argument is null."},{"pos":[60,64],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[71,115],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[60661,60783],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[60897,61043],"yaml":true},{"content":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,114],"content":"Creates a continuation that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[63012,63127],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,269],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,269],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[63138,63408],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,195],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,87],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","pos":[88,195]}]}],"pos":[63757,63953],"yaml":true},{"content":"An object representing data to be used by the continuation action.","nodes":[{"pos":[0,66],"content":"An object representing data to be used by the continuation action.","nodes":[{"content":"An object representing data to be used by the continuation action.","pos":[0,66]}]}],"pos":[64014,64081],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[64169,64301],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[64372,64441],"yaml":true},{"content":"The <code>scheduler</code> argument is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>scheduler</code> argument is `null`."}],"pos":[64613,64660],"yaml":true},{"content":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,114],"content":"Creates a continuation that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[66635,66750],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,271],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","pos":[0,271],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled."}]}],"pos":[66761,67033],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,196],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,87],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[88,196]}]}],"pos":[67388,67585],"yaml":true},{"content":"An object representing data to be used by the continuation action.","nodes":[{"pos":[0,66],"content":"An object representing data to be used by the continuation action.","nodes":[{"content":"An object representing data to be used by the continuation action.","pos":[0,66]}]}],"pos":[67646,67713],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.","nodes":[{"pos":[0,111],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new continuation task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task."}],"pos":[67807,67919],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[67990,68059],"yaml":true},{"content":"The <code>continuationAction</code> argument is null.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationAction</code> argument is null."}],"pos":[68231,68285],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[68391,68487],"yaml":true},{"content":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,114],"content":"Creates a continuation that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[70516,70631],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"pos":[0,278],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.","pos":[0,121],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed."},{"content":"If the continuation criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.","pos":[122,278],"source":" If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled."}]}],"pos":[70642,70921],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,196],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,87],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[88,196]}]}],"pos":[71290,71487],"yaml":true},{"content":"An object representing data to be used by the continuation action.","nodes":[{"pos":[0,66],"content":"An object representing data to be used by the continuation action.","nodes":[{"content":"An object representing data to be used by the continuation action.","pos":[0,66]}]}],"pos":[71548,71615],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such  as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,311],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such  as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such  as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,311],"source":" This includes criteria, such  as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[71723,72035],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[72106,72175],"yaml":true},{"content":"The <code>continuationAction</code> argument is null.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationAction</code> argument is null."}],"pos":[72347,72401],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[72515,72661],"yaml":true},{"content":"Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.","nodes":[{"pos":[0,107],"content":"Creates a continuation that executes according the condition specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Creates a continuation that executes according the condition specified in <code>continuationOptions</code>."}],"pos":[74561,74669],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.  \n  \n For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).","nodes":[{"pos":[0,278],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed.","pos":[0,121],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed."},{"content":"If the continuation criteria specified through the <ph id=\"ph1\">`continuationOptions`</ph> parameter are not met, the continuation task will be canceled instead of scheduled.","pos":[122,278],"source":" If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled."}]},{"pos":[285,440],"content":"For more information, see <bpt id=\"p1\">[</bpt>Chaining Tasks by Using Continuation Tasks<ept id=\"p1\">](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)</ept>.","source":"For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)."}],"pos":[74680,75125],"yaml":true,"extradata":"MT"},{"content":"An action to according the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,156],"content":"An action to according the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"An action to according the condition specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,83],"source":"An action to according the condition specified in <code>continuationOptions</code>."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[84,156]}]}],"pos":[75459,75616],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[75724,76035],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[76106,76175],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed."}],"pos":[76351,76425],"yaml":true},{"content":"The <code>continuationAction</code> argument is null.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationAction</code> argument is null."}],"pos":[76527,76581],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[76695,76841],"yaml":true},{"content":"Creates a cancelable continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,140],"content":"Creates a cancelable continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a cancelable continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[78687,78828],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,269],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,269],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[78839,79109],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate is passed the completed task as an argument.","nodes":[{"pos":[0,155],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate is passed the completed task as an argument.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,87],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate is passed the completed task as an argument.","pos":[88,155]}]}],"pos":[80952,81108],"yaml":true},{"content":"The cancellation token that is passed to the new continuation task.","nodes":[{"pos":[0,67],"content":"The cancellation token that is passed to the new continuation task.","nodes":[{"content":"The cancellation token that is passed to the new continuation task.","pos":[0,67]}]}],"pos":[81202,81270],"yaml":true},{"content":"A new continuation task.","nodes":[{"pos":[0,24],"content":"A new continuation task.","nodes":[{"content":"A new continuation task.","pos":[0,24]}]}],"pos":[81341,81366],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed."},{"pos":[80,84],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[91,219],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has been disposed."}],"pos":[81542,81772],"yaml":true},{"content":"The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[81874,81930],"yaml":true},{"content":"Creates a continuation that that is passed state information and that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,156],"content":"Creates a continuation that that is passed state information and that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that that is passed state information and that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[83743,83900],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,269],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,269],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[83911,84181],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,192],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,87],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.","pos":[88,192]}]}],"pos":[85229,85422],"yaml":true},{"content":"An object representing data to be used by the continuation action.","nodes":[{"pos":[0,66],"content":"An object representing data to be used by the continuation action.","nodes":[{"content":"An object representing data to be used by the continuation action.","pos":[0,66]}]}],"pos":[85483,85550],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[85621,85690],"yaml":true},{"content":"The <code>continuationAction</code> argument is null.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationAction</code> argument is null."}],"pos":[85862,85916],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target task completes.","nodes":[{"pos":[0,83],"content":"Creates a continuation that executes asynchronously when the target task completes.","nodes":[{"content":"Creates a continuation that executes asynchronously when the target task completes.","pos":[0,83]}]}],"pos":[87600,87684],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to being canceled.","nodes":[{"pos":[0,265],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to being canceled.","pos":[0,265],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to being canceled."}]}],"pos":[87695,87961],"yaml":true,"extradata":"MT"},{"content":"An action to run when the antecedent <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,171],"content":"An action to run when the antecedent <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"An action to run when the antecedent <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,98],"source":"An action to run when the antecedent <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[99,171]}]}],"pos":[89132,89304],"yaml":true},{"content":"A new continuation task.","nodes":[{"pos":[0,24],"content":"A new continuation task.","nodes":[{"content":"A new continuation task.","pos":[0,24]}]}],"pos":[89375,89400],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed."}],"pos":[89576,89650],"yaml":true},{"content":"The <code>continuationAction</code> argument is `null`.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is <ph id=\"ph2\">`null`</ph>.","source":"The <code>continuationAction</code> argument is `null`."}],"pos":[89752,89808],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,129],"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[91648,91778],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,269],"content":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,269],"source":"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[91789,92059],"yaml":true,"extradata":"MT"},{"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,160],"content":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"An action to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,87],"source":"An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[88,160]}]}],"pos":[92373,92534],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[92622,92754],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.","nodes":[{"pos":[0,68],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>."}],"pos":[92825,92894],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed."}],"pos":[93070,93144],"yaml":true},{"content":"The <code>continuationAction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,53],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationAction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationAction</code> argument is null."},{"pos":[60,64],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[71,115],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[93246,93368],"yaml":true},{"content":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,114],"content":"Creates a continuation that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[95793,95908],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.  \n  \n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>. This task's completion state will be transferred to the task returned from the <xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=fullName> call.","nodes":[{"pos":[0,275],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","pos":[0,275],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled."}]},{"pos":[282,545],"content":"The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>. This task's completion state will be transferred to the task returned from the <xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=fullName> call.","nodes":[{"content":"The <ph id=\"ph1\">`continuationFunction`</ph>, when executed, should return a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","pos":[0,98],"source":"The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>."},{"content":"This task's completion state will be transferred to the task returned from the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=fullName&gt;</ph> call.","pos":[99,263],"source":" This task's completion state will be transferred to the task returned from the <xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=fullName> call."}]}],"pos":[95919,96469],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,197],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,88],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[89,197]}]}],"pos":[96986,97184],"yaml":true},{"content":"An object representing data to be used by the continuation function.","nodes":[{"pos":[0,68],"content":"An object representing data to be used by the continuation function.","nodes":[{"content":"An object representing data to be used by the continuation function.","pos":[0,68]}]}],"pos":[97245,97314],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task.","nodes":[{"pos":[0,98],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task."}],"pos":[97408,97507],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[97615,97926],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[98014,98146],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[98206,98259],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[98342,98413],"yaml":true},{"content":"The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[98588,98633],"yaml":true},{"content":"The  <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,146],"content":"The  <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The  <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[98747,98894],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[99000,99096],"yaml":true},{"content":"Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.","nodes":[{"pos":[0,107],"content":"Creates a continuation that executes according the condition specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Creates a continuation that executes according the condition specified in <code>continuationOptions</code>."}],"pos":[101392,101500],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.  \n  \n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>.","nodes":[{"pos":[0,273],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,273],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]},{"pos":[280,378],"content":"The <ph id=\"ph1\">`continuationFunction`</ph>, when executed, should return a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","source":"The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>."}],"pos":[101511,101894],"yaml":true,"extradata":"MT"},{"content":"A function to run according the condition specified in <code>continuationOptions</code>.  \n  \n When run, the delegate will be passed as an argument this completed task.","nodes":[{"pos":[0,88],"content":"A function to run according the condition specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A function to run according the condition specified in <code>continuationOptions</code>."},{"pos":[95,168],"content":"When run, the delegate will be passed as an argument this completed task.","nodes":[{"content":"When run, the delegate will be passed as an argument this completed task.","pos":[0,73]}]}],"pos":[102376,102549],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task.","nodes":[{"pos":[0,98],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task."}],"pos":[102643,102742],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[102850,103161],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[103249,103381],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[103441,103494],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[103577,103648],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed."},{"pos":[80,84],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[91,227],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[103827,104065],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,117],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[104167,104291],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[104405,104551],"yaml":true},{"content":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,114],"content":"Creates a continuation that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[106598,106713],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,275],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.","pos":[0,275],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled."}]}],"pos":[106724,107000],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,196],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,88],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","pos":[89,196]}]}],"pos":[107395,107592],"yaml":true},{"content":"An object representing data to be used by the continuation function.","nodes":[{"pos":[0,68],"content":"An object representing data to be used by the continuation function.","nodes":[{"content":"An object representing data to be used by the continuation function.","pos":[0,68]}]}],"pos":[107653,107722],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[107810,107942],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[108002,108055],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[108138,108209],"yaml":true},{"content":"The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[108384,108429],"yaml":true},{"content":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,114],"content":"Creates a continuation that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[110536,110651],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.  \n  \n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>. This task's completion state will be transferred to the task returned from the ContinueWith call.","nodes":[{"pos":[0,275],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.","pos":[0,275],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled."}]},{"pos":[282,478],"content":"The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>. This task's completion state will be transferred to the task returned from the ContinueWith call.","nodes":[{"content":"The <ph id=\"ph1\">`continuationFunction`</ph>, when executed, should return a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.","pos":[0,98],"source":"The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>."},{"content":"This task's completion state will be transferred to the task returned from the ContinueWith call.","pos":[99,196]}]}],"pos":[110662,111145],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,197],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,88],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.","pos":[89,197]}]}],"pos":[111560,111758],"yaml":true},{"content":"An object representing data to be used by the continuation function.","nodes":[{"pos":[0,68],"content":"An object representing data to be used by the continuation function.","nodes":[{"content":"An object representing data to be used by the continuation function.","pos":[0,68]}]}],"pos":[111819,111888],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[111996,112307],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[112367,112420],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[112503,112574],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."}],"pos":[112749,112805],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[112919,113065],"yaml":true},{"content":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,114],"content":"Creates a continuation that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[115118,115233],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,275],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.","pos":[0,275],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[115244,115520],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,196],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,88],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","pos":[89,196]}]}],"pos":[115921,116118],"yaml":true},{"content":"An object representing data to be used by the continuation function.","nodes":[{"pos":[0,68],"content":"An object representing data to be used by the continuation function.","nodes":[{"content":"An object representing data to be used by the continuation function.","pos":[0,68]}]}],"pos":[116179,116248],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task.","nodes":[{"pos":[0,98],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task."}],"pos":[116342,116441],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[116501,116554],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[116637,116708],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."}],"pos":[116883,116939],"yaml":true},{"content":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.","nodes":[{"pos":[0,95],"content":"The provided <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> has already been disposed.","source":"The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed."}],"pos":[117045,117141],"yaml":true},{"content":"Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.","nodes":[{"pos":[0,107],"content":"Creates a continuation that executes according the condition specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Creates a continuation that executes according the condition specified in <code>continuationOptions</code>."}],"pos":[119119,119227],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.  \n  \n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>..","nodes":[{"pos":[0,273],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,273],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]},{"pos":[280,379],"content":"The <ph id=\"ph1\">`continuationFunction`</ph>, when executed, should return a <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>..","source":"The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>.."}],"pos":[119238,119622],"yaml":true,"extradata":"MT"},{"content":"A function to run according the condition specified in <code>continuationOptions</code>.  \n  \n When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,88],"content":"A function to run according the condition specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"A function to run according the condition specified in <code>continuationOptions</code>."},{"pos":[95,167],"content":"When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[0,72]}]}],"pos":[120002,120174],"yaml":true},{"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"pos":[0,310],"content":"Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.","nodes":[{"content":"Options for when the continuation is scheduled and how it behaves.","pos":[0,66]},{"content":"This includes criteria, such as <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"&gt;&lt;/xref&gt;</ph>, as well as execution options, such as <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"&gt;&lt;/xref&gt;</ph>.","pos":[67,310],"source":" This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>."}]}],"pos":[120282,120593],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[120653,120706],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[120789,120860],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed."}],"pos":[121039,121113],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."}],"pos":[121215,121271],"yaml":true},{"content":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.","nodes":[{"pos":[0,145],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationOptions</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument specifies an invalid value for <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskContinuationOptions\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>."}],"pos":[121385,121531],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,129],"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[123455,123585],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,273],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,273],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[123596,123870],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,161],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,88],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[89,161]}]}],"pos":[124236,124398],"yaml":true},{"content":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task.","nodes":[{"pos":[0,98],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken\"&gt;&lt;/xref&gt;</ph> that will be assigned to the new task.","source":"The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task."}],"pos":[124492,124591],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[124651,124704],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[124787,124858],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed."},{"pos":[80,84],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[91,227],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationTokenSource\"&gt;&lt;/xref&gt;</ph> that created <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">cancellationToken</ph><ept id=\"p1\">&lt;/code&gt;</ept> has already been disposed.","source":"The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."}],"pos":[125037,125275],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."}],"pos":[125377,125433],"yaml":true},{"content":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,114],"content":"Creates a continuation that executes when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[127324,127439],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,275],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.","pos":[0,275],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[127450,127726],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"pos":[0,196],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,88],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.","pos":[89,196]}]}],"pos":[129000,129197],"yaml":true},{"content":"An object representing data to be used by the continuation function.","nodes":[{"pos":[0,68],"content":"An object representing data to be used by the continuation function.","nodes":[{"content":"An object representing data to be used by the continuation function.","pos":[0,68]}]}],"pos":[129258,129327],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[129387,129440],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[129523,129594],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."}],"pos":[129769,129825],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,129],"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[131587,131717],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,273],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,273],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[131728,132002],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,161],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,88],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[89,161]}]}],"pos":[132314,132476],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[132536,132589],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[132672,132743],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed."}],"pos":[132922,132996],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."}],"pos":[133098,133154],"yaml":true},{"content":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.","nodes":[{"pos":[0,129],"content":"Creates a continuation that executes asynchronously when the target <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","source":"Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."}],"pos":[135072,135202],"yaml":true},{"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"pos":[0,273],"content":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","nodes":[{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.","pos":[0,273],"source":"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled."}]}],"pos":[135213,135487],"yaml":true,"extradata":"MT"},{"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"pos":[0,161],"content":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.","nodes":[{"content":"A function to run when the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> completes.","pos":[0,88],"source":"A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes."},{"content":"When run, the delegate will be passed the completed task as an argument.","pos":[89,161]}]}],"pos":[135847,136009],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.TaskScheduler\"&gt;&lt;/xref&gt;</ph> to associate with the continuation task and to use for its execution.","source":"The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution."}],"pos":[136097,136229],"yaml":true},{"content":"The type of the result produced by the continuation.","nodes":[{"pos":[0,52],"content":"The type of the result produced by the continuation.","nodes":[{"content":"The type of the result produced by the continuation.","pos":[0,52]}]}],"pos":[136289,136342],"yaml":true},{"content":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,70],"content":"A new continuation <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[136425,136496],"yaml":true},{"content":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.","nodes":[{"pos":[0,73],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> has been disposed.","source":"The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed."}],"pos":[136675,136749],"yaml":true},{"content":"The <code>continuationFunction</code> argument is null.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">continuationFunction</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>continuationFunction</code> argument is null."},{"pos":[62,66],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[73,117],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">scheduler</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>scheduler</code> argument is null."}],"pos":[136851,136975],"yaml":true},{"content":"Provides access to factory methods for creating and configuring <xref href=\"System.Threading.Tasks.Task`1\"></xref> instances.","nodes":[{"pos":[0,125],"content":"Provides access to factory methods for creating and configuring <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> instances.","source":"Provides access to factory methods for creating and configuring <xref href=\"System.Threading.Tasks.Task`1\"></xref> instances."}],"pos":[138418,138544],"yaml":true},{"content":"This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory%601> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=fullName> constructor. It has the following property values:  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Threading.Tasks.TaskFactory%601.CancellationToken%2A?displayProperty=fullName>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory%601.ContinuationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskContinuationOptions?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory%601.CreationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>|  \n|<xref:System.Threading.Tasks.TaskFactory%601.Scheduler%2A?displayProperty=fullName>|`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=fullName>|  \n  \n The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a <xref:System.Threading.Tasks.Task%601> object with default configuration values.  \n  \n The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make three calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method. The first starts a `Task<Int32>` object, which executes a lambda expression that returns 1. The second starts a `Task<Test>` object, which executes a lambda expression that instantiates a new `Test` instance. The third starts a `Task<String[]>` object, which enumerates the files in the C:\\Users\\Public\\Pictures\\Sample Pictures\\ directory. (Note that successful execution of the example requires that the directory exist and that it contain files.  \n  \n [!code-csharp[TPL#10](~/samples/snippets/csharp/VS_Snippets_Misc/tpl/cs/returnavalue10.cs#10)]\n [!code-vb[TPL#10](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl/vb/10_returnavalue.vb#10)]","nodes":[{"pos":[0,295],"content":"This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory%601> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=fullName> constructor. It has the following property values:","nodes":[{"content":"This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory%601> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=fullName> constructor. It has the following property values:","pos":[0,295],"nodes":[{"content":"This property returns a default instance of the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601&gt;</ph> class that is identical to the one created by calling the parameterless <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=fullName&gt;</ph> constructor.","pos":[0,257],"source":"This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory%601> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=fullName> constructor."},{"content":"It has the following property values:","pos":[258,295]}]}]},{"pos":[302,310],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[311,316],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[352,443],"content":"<xref:System.Threading.Tasks.TaskFactory%601.CancellationToken%2A?displayProperty=fullName>","nodes":[]},{"pos":[444,518],"content":"<xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>","nodes":[]},{"pos":[523,616],"content":"<xref:System.Threading.Tasks.TaskFactory%601.ContinuationOptions%2A?displayProperty=fullName>","nodes":[]},{"pos":[617,695],"content":"<xref:System.Threading.Tasks.TaskContinuationOptions?displayProperty=fullName>","nodes":[]},{"pos":[700,789],"content":"<xref:System.Threading.Tasks.TaskFactory%601.CreationOptions%2A?displayProperty=fullName>","nodes":[]},{"pos":[790,864],"content":"<xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>","nodes":[]},{"pos":[869,952],"content":"<xref:System.Threading.Tasks.TaskFactory%601.Scheduler%2A?displayProperty=fullName>","nodes":[]},{"pos":[953,1043],"content":"<ph id=\"ph1\">`null`</ph>, or <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=fullName&gt;</ph>","source":"`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=fullName>"},{"pos":[1051,1236],"content":"The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method.","nodes":[{"content":"The most common use of this property is to create and start a new task in a single call to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,185],"source":"The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method."}]},{"pos":[1244,1515],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a <xref:System.Threading.Tasks.Task%601> object with default configuration values.","leadings":["","> "],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName&gt;</ph> method provides the easiest way to create a <ph id=\"ph3\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object with default configuration values.","pos":[9,269],"source":" Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a <xref:System.Threading.Tasks.Task%601> object with default configuration values."}]},{"pos":[1522,2184],"content":"The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make three calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method. The first starts a `Task<Int32>` object, which executes a lambda expression that returns 1. The second starts a `Task<Test>` object, which executes a lambda expression that instantiates a new `Test` instance. The third starts a `Task<String[]>` object, which enumerates the files in the C:\\Users\\Public\\Pictures\\Sample Pictures\\ directory. (Note that successful execution of the example requires that the directory exist and that it contain files.","nodes":[{"content":"The following example uses the static <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Factory%2A&gt;</ph> property to make three calls to the <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,214],"source":"The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make three calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method."},{"content":"The first starts a <ph id=\"ph1\">`Task&lt;Int32&gt;`</ph> object, which executes a lambda expression that returns 1.","pos":[215,306],"source":" The first starts a `Task<Int32>` object, which executes a lambda expression that returns 1."},{"content":"The second starts a <ph id=\"ph1\">`Task&lt;Test&gt;`</ph> object, which executes a lambda expression that instantiates a new <ph id=\"ph2\">`Test`</ph> instance.","pos":[307,423],"source":" The second starts a `Task<Test>` object, which executes a lambda expression that instantiates a new `Test` instance."},{"content":"The third starts a <ph id=\"ph1\">`Task&lt;String[]&gt;`</ph> object, which enumerates the files in the C:\\Users\\Public\\Pictures\\Sample Pictures\\ directory.","pos":[424,554],"source":" The third starts a `Task<String[]>` object, which enumerates the files in the C:\\Users\\Public\\Pictures\\Sample Pictures\\ directory."},{"content":"(Note that successful execution of the example requires that the directory exist and that it contain files.","pos":[555,662]}]},{"pos":[2191,2383],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>TPL#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_Misc/tpl/cs/returnavalue10.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>TPL#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl/vb/10_returnavalue.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[TPL#10](~/samples/snippets/csharp/VS_Snippets_Misc/tpl/cs/returnavalue10.cs#10)]\n [!code-vb[TPL#10](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl/vb/10_returnavalue.vb#10)]"}],"pos":[138555,140963],"yaml":true,"extradata":"MT"},{"content":"A factory object that can create a variety of <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects.","nodes":[{"pos":[0,105],"content":"A factory object that can create a variety of <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph> objects.","source":"A factory object that can create a variety of <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects."}],"pos":[141141,141247],"yaml":true},{"content":"Gets an awaiter used to await this <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,86],"content":"Gets an awaiter used to await this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Gets an awaiter used to await this <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[142780,142867],"yaml":true},{"content":"This method is intended for compiler user rather than use directly in code.","nodes":[{"pos":[0,75],"content":"This method is intended for compiler user rather than use directly in code.","nodes":[{"content":"This method is intended for compiler user rather than use directly in code.","pos":[0,75]}]}],"pos":[142878,142954],"yaml":true,"extradata":"MT"},{"content":"An awaiter instance.","nodes":[{"pos":[0,20],"content":"An awaiter instance.","nodes":[{"content":"An awaiter instance.","pos":[0,20]}]}],"pos":[143160,143181],"yaml":true},{"content":"Gets the result value of this <xref href=\"System.Threading.Tasks.Task`1\"></xref>.","nodes":[{"pos":[0,81],"content":"Gets the result value of this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the result value of this <xref href=\"System.Threading.Tasks.Task`1\"></xref>."}],"pos":[144689,144771],"yaml":true},{"content":"Accessing the property's get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the <xref:System.Threading.Tasks.Task.Wait%2A> method.  \n  \n Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <xref:System.Threading.Tasks.Task%601.Result%2A> property. Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the <xref:System.Threading.Tasks.Task%601.Result%2A> property does not return a value. Instead, attempting to access the property value throws an <xref:System.AggregateException> exception.","nodes":[{"pos":[0,192],"content":"Accessing the property's get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the <xref:System.Threading.Tasks.Task.Wait%2A> method.","nodes":[{"content":"Accessing the property's get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Wait%2A&gt;</ph> method.","pos":[0,192],"source":"Accessing the property's get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the <xref:System.Threading.Tasks.Task.Wait%2A> method."}]},{"pos":[199,666],"content":"Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <xref:System.Threading.Tasks.Task%601.Result%2A> property. Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the <xref:System.Threading.Tasks.Task%601.Result%2A> property does not return a value. Instead, attempting to access the property value throws an <xref:System.AggregateException> exception.","nodes":[{"content":"Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <xref:System.Threading.Tasks.Task%601.Result%2A> property. Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the <xref:System.Threading.Tasks.Task%601.Result%2A> property does not return a value. Instead, attempting to access the property value throws an <xref:System.AggregateException> exception.","pos":[0,467],"nodes":[{"content":"Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property.","pos":[0,172],"source":"Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <xref:System.Threading.Tasks.Task%601.Result%2A> property."},{"content":"Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt;</ph> property does not return a value.","pos":[173,364],"source":" Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the <xref:System.Threading.Tasks.Task%601.Result%2A> property does not return a value."},{"content":"Instead, attempting to access the property value throws an <ph id=\"ph1\">&lt;xref:System.AggregateException&gt;</ph> exception.","pos":[365,467],"source":" Instead, attempting to access the property value throws an <xref:System.AggregateException> exception."}]}]}],"pos":[144782,145453],"yaml":true,"extradata":"MT"},{"content":"The result value of this <xref href=\"System.Threading.Tasks.Task`1\"></xref>, which is the same type as the task's type parameter.","nodes":[{"pos":[0,129],"content":"The result value of this <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>, which is the same type as the task's type parameter.","source":"The result value of this <xref href=\"System.Threading.Tasks.Task`1\"></xref>, which is the same type as the task's type parameter."}],"pos":[146723,146853],"yaml":true},{"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.  \n  \n -or-  \n  \n An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"pos":[0,185],"content":"The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object.","nodes":[{"content":"The task was canceled.","pos":[0,22]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains a <ph id=\"ph2\">&lt;xref href=\"System.Threading.Tasks.TaskCanceledException\"&gt;&lt;/xref&gt;</ph> object.","pos":[23,185],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\"></xref> object."}]},{"pos":[192,196],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[203,394],"content":"An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions.","nodes":[{"content":"An exception was thrown during the execution of the task.","pos":[0,57]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.AggregateException.InnerExceptions\"&gt;&lt;/xref&gt;</ph> collection contains information about the exception or exceptions.","pos":[58,191],"source":" The <xref href=\"System.AggregateException.InnerExceptions\"></xref> collection contains information about the exception or exceptions."}]}],"pos":[147013,147420],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.Tasks.Task`1\n  commentId: T:System.Threading.Tasks.Task`1\n  id: Task`1\n  children:\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0})\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})\n  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})\n  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task`1.Factory\n  - System.Threading.Tasks.Task`1.GetAwaiter\n  - System.Threading.Tasks.Task`1.Result\n  langs:\n  - csharp\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  type: Class\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Represents an asynchronous operation that can return a value.\n  remarks: \"The <xref:System.Threading.Tasks.Task%601> class represents a single operation that returns a value and that usually executes asynchronously. <xref:System.Threading.Tasks.Task%601> objects are one of the central components of the  first introduced in the .NET Framework 4. Because the work performed by a <xref:System.Threading.Tasks.Task%601> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task. Most commonly, a lambda expression is used to specify the work that the task is to perform.  \\n  \\n <xref:System.Threading.Tasks.Task%601> instances may be created in a variety of ways. The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> or <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. These methods provide a simple way to start a task by using default values and without acquiring additional parameters. The following example uses the <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> method to start a task that loops and then displays the number of loop iterations:  \\n  \\n [!code-csharp[System.Threading.Tasks.Task\\\\`1#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/run1.cs#6)]\\n [!code-vb[System.Threading.Tasks.Task\\\\`1#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/run1.vb#6)]  \\n  \\n An alternative, and the most common way to start a task in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is to call the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=fullName> or <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method. The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory> object, and the <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a <xref:System.Threading.Tasks.TaskFactory%601> object. Overloads of their `StartNew` method let you pass arguments, define task creation options, and specify a task scheduler. The following example uses the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> method to start a task. It is functionally equivalent to the code in the previous example.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task\\\\`1#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1/cs/startnew1.cs#7)]\\n [!code-vb[System.Threading.Tasks.Task\\\\`1#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1/vb/startnew1.vb#7)]  \\n  \\n For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).  \\n  \\n The <xref:System.Threading.Tasks.Task%601> class also provides constructors that initialize the task but that do not schedule it for execution. For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> and `Task.Factory.StartNew` methods are the preferred mechanisms for creating and scheduling computational tasks, but for scenarios where task creation and scheduling must be separated, the constructors may be used, and the task's <xref:System.Threading.Tasks.Task.Start%2A> method may then be used to schedule the task for execution at a later time.  \\n  \\n Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context. That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread. For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes. For more information, see the \\\"Culture and task-based asynchronous operations\\\" section in the <xref:System.Globalization.CultureInfo> topic. Note that Store apps follow the Windows Runtime in setting and getting the default culture.  \\n  \\nFor operations that do not return a value, you use the <xref:System.Threading.Tasks.Task> class. If you're developing with C# 7, for a more lightweight task that is a value type rather than a reference type, use the <xref:System.Threading.Tasks.ValueTask?displayProperty=fullName> structure; it is supported starting with C# 7.\"\n  syntax:\n    content: 'public class Task<TResult> : System.Threading.Tasks.Task'\n    typeParameters:\n    - id: TResult\n      description: The type of the result produced by this <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  inheritance:\n  - System.Object\n  - System.Threading.Tasks.Task\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Threading.Tasks.Task.AsyncState\n  - System.Threading.Tasks.Task.CompletedTask\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.CreationOptions\n  - System.Threading.Tasks.Task.CurrentId\n  - System.Threading.Tasks.Task.Delay(System.Int32)\n  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Dispose\n  - System.Threading.Tasks.Task.Dispose(System.Boolean)\n  - System.Threading.Tasks.Task.Exception\n  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.FromException(System.Exception)\n  - System.Threading.Tasks.Task.FromException``1(System.Exception)\n  - System.Threading.Tasks.Task.FromResult``1(``0)\n  - System.Threading.Tasks.Task.Id\n  - System.Threading.Tasks.Task.IsCanceled\n  - System.Threading.Tasks.Task.IsCompleted\n  - System.Threading.Tasks.Task.IsCompletedSuccessfully\n  - System.Threading.Tasks.Task.IsFaulted\n  - System.Threading.Tasks.Task.Run(System.Action)\n  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  - System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.RunSynchronously\n  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.Start\n  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.Status\n  - System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  - System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  - System.Threading.Tasks.Task.Wait\n  - System.Threading.Tasks.Task.Wait(System.Int32)\n  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  - System.Threading.Tasks.Task.Yield\n  extensionMethods:\n  - System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  - System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task)\n  - System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task,System.TimeSpan)\n  - System.Windows.Threading.TaskExtensions.IsDispatcherOperationTask(System.Threading.Tasks.Task)\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0})\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})\n  id: '#ctor(System.Func{`0})'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: Task<TResult>(Func<TResult>)\n  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>)\n  fullName: Task<TResult>.Task<TResult>(Func<TResult>)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  example:\n  - \"The following example counts the approximate number of words in text files that represent published books. Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression. The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29?displayProperty=fullName> method is called to ensure that all tasks have completed before displaying the word count of each book to the console.  \\n  \\n Object instantiation is separated from object execution in this example so that the example can ensure that each file exists. If they do not,  it displays the name of the missing file. Otherwise, it calls the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=fullName> method to launch each task.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run3.cs#2)]\\n [!code-vb[System.Threading.Tasks.Task.ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run3.vb#2)]  \\n  \\n The regular expression pattern `\\\\p{P}*\\\\s+` matches zero, one, or more punctuation characters followed by one or more whitespace characters. It assumes that the total number of matches equals the approximate word count.\"\n  syntax:\n    content: public Task (Func<TResult> function);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.\n  overload: System.Threading.Tasks.Task`1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)\n  id: '#ctor(System.Func{System.Object,`0},System.Object)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: Task<TResult>(Func<Object,TResult>, Object)\n  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object)\n  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function and state.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Func<object,TResult> function, object state);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the action.\n  overload: System.Threading.Tasks.Task`1.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)\n  id: '#ctor(System.Func{`0},System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: Task<TResult>(Func<TResult>, CancellationToken)\n  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken)\n  fullName: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> and <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> methods. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Func<TResult> function, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> to be assigned to this task.\n  overload: System.Threading.Tasks.Task`1.#ctor*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: Task<TResult>(Func<TResult>, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, TaskCreationOptions)\n  fullName: Task<TResult>.Task<TResult>(Func<TResult>, TaskCreationOptions)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function and creation options.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7B%600%7D%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.\n  overload: System.Threading.Tasks.Task`1.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: Task<TResult>(Func<Object,TResult>, Object, CancellationToken)\n  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken)\n  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified action, state, and options.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the function.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> to be assigned to the new task.\n  overload: System.Threading.Tasks.Task`1.#ctor*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified action, state, and options.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the function.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.\n  overload: System.Threading.Tasks.Task`1.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)\n  fullName: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified function and creation options.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%60%601%28System.Func%7B%60%600%7D%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method.  The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: function\n      type: System.Func`1\n      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.\n  overload: System.Threading.Tasks.Task`1.#ctor*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)\n  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)\n  type: Constructor\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Initializes a new <xref href=\"System.Threading.Tasks.Task`1\"></xref> with the specified action, state, and options.\n  remarks: Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task%601> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory%601.StartNew%28System.Func%7BSystem.Object%2C%600%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=fullName> method. The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.\n  syntax:\n    content: public Task (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);\n    parameters:\n    - id: function\n      type: System.Func{System.Object,TResult}\n      description: The delegate that represents the code to execute in the task. When the function has completed, the task's <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property will be set to return the result value of the function.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the function.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> to be assigned to the new task.\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: The <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref> used to customize the task's behavior.\n  overload: System.Threading.Tasks.Task`1.#ctor*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>creationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>function</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)\n  commentId: M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)\n  id: ConfigureAwait(System.Boolean)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ConfigureAwait(Boolean)\n  nameWithType: Task<TResult>.ConfigureAwait(Boolean)\n  fullName: Task<TResult>.ConfigureAwait(Boolean)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Configures an awaiter used to await this <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  syntax:\n    content: public System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait (bool continueOnCapturedContext);\n    parameters:\n    - id: continueOnCapturedContext\n      type: System.Boolean\n      description: true to attempt to marshal the continuation back to the original context captured; otherwise, false.\n    return:\n      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1\n      description: An object used to await this task.\n  overload: System.Threading.Tasks.Task`1.ConfigureAwait*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed. If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation action.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as  well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its  execution.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>scheduler</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled. For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TResult}}\n      description: An action to run according the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref> has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>continuationAction</code> argument is null.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation action.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>scheduler</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation action.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new continuation task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is null.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation action.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such  as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.\n  remarks: \"The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed. If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.  \\n  \\n For more information, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).\"\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TResult}}\n      description: An action to according the condition specified in <code>continuationOptions</code>. When run, the delegate will be passed the completed task as an argument.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task<TResult>>, CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a cancelable continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  example:\n  - \"The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user. An array is used to hold information about the prime numbers. The array index represents the number, and the element's value indicates whether that number is composite (its value is `true`) or prime (its value is `false`). This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.  \\n  \\n A cancellation token is passed to both the antecedent and the continuation task. A <xref:System.Timers.Timer?displayProperty=fullName> object is used to define a timeout value of 100 milliseconds. If the event fires, the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=fullName> method is called, and the cancellation token is used to request cancellation of the tasks.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task\\\\`1.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continue1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task\\\\`1.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continue1.vb#1)]  \\n  \\n Typically, supplying a value of about 100,000 causes the timeout interval to expire and the <xref:System.Timers.Timer.Elapsed?displayProperty=fullName> event to fire, and the cancellation request to be set.\"\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TResult}}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate is passed the completed task as an argument.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token that is passed to the new continuation task.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation task.\n  overload: System.Threading.Tasks.Task`1.ContinueWith*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref> has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task<TResult>,Object>, Object)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that that is passed state information and that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  example:\n  - \"The following example creates a task that is passed an integer between 2 and 20 and returns an array that contains the first ten exponents (from n<sup>1</sup> to n<sup>10</sup>) of that number. A continuation task is then responsible for displaying the exponents. It is passed both the antecedent and the original number whose exponents the antecedent generates.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task\\\\`1.ContinueWith#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continuewith3.cs#3)]\\n [!code-vb[System.Threading.Tasks.Task\\\\`1.ContinueWith#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continuewith3.vb#3)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate is   passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation action.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task<TResult>>)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target task completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to being canceled.\n  example:\n  - \"The following example creates an antecedent task that uses the Sieve of Eratosthenes to calculate the prime numbers between 1 and a value entered by the user. An array is used to hold information about the prime numbers. The array index represents the number, and the element's value indicates whether that number is composite (its value is `true`) or prime (its value is `false`). This task is then passed to a continuation task, which is responsible for extracting the prime numbers from the integer array and displaying them.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task\\\\`1.ContinueWith#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/cs/continue2.cs#2)]\\n [!code-vb[System.Threading.Tasks.Task\\\\`1.ContinueWith#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task`1.continuewith/vb/continue2.vb#2)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TResult}}\n      description: An action to run when the antecedent <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation task.\n  overload: System.Threading.Tasks.Task`1.ContinueWith*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationAction</code> argument is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith(Action<Task<TResult>>, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{TResult}}\n      description: An action to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>continuationAction</code> argument is null.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: \"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.  \\n  \\n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>. This task's completion state will be transferred to the task returned from the <xref:System.Threading.Tasks.Task%601.ContinueWith%2A?displayProperty=fullName> call.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation function.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    typeParameters:\n    - id: TNewResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task{TNewResult}\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>scheduler</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The  <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.\n  remarks: \"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.  \\n  \\n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}\n      description: \"A function to run according the condition specified in <code>continuationOptions</code>.  \\n  \\n When run, the delegate will be passed as an argument this completed task.\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    typeParameters:\n    - id: TNewResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task{TNewResult}\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref> has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>continuationFunction</code> argument is null.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is null.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation function.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    typeParameters:\n    - id: TNewResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task{TNewResult}\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>scheduler</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: \"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.  \\n  \\n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>. This task's completion state will be transferred to the task returned from the ContinueWith call.\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation function.\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    typeParameters:\n    - id: TNewResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task{TNewResult}\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation function.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task.\n    typeParameters:\n    - id: TNewResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task{TNewResult}\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is null.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The provided <xref href=\"System.Threading.CancellationToken\"></xref> has already been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes according the condition specified in <code>continuationOptions</code>.\n  remarks: \"The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.  \\n  \\n The `continuationFunction`, when executed, should return a <xref:System.Threading.Tasks.Task%601>..\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}\n      description: \"A function to run according the condition specified in <code>continuationOptions</code>.  \\n  \\n When run, the delegate will be passed the completed task as an argument.\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\"></xref>.\n    typeParameters:\n    - id: TNewResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task{TNewResult}\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>continuationOptions</code> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The <xref href=\"System.Threading.CancellationToken\"></xref> that will be assigned to the new task.\n    typeParameters:\n    - id: TNewResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task{TNewResult}\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"The <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref> has been disposed.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Threading.CancellationTokenSource\\\"></xref> that created <code>cancellationToken</code> has already been disposed.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current  task has completed, whether it completes due to running to completion successfully, faulting due  to an unhandled exception, or exiting out early due to being canceled.\n  example:\n  - \"The following example creates a chain of continuation tasks. Each task provides the current time, a <xref:System.DateTime> object, for the state argument of the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%2CSystem.Object%7D%2CSystem.Object%29> method. Each <xref:System.DateTime> value represents the time at which the continue task is created. Each task produces as its result a second <xref:System.DateTime> value that represents the time at which the task finishes. After all tasks finish, the example displays the date and times at which each continuation task starts and finishes.  \\n  \\n [!code-csharp[TPL_ContinuationState#1](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_continuationstate/cs/continuationstate.cs#1)]\\n [!code-vb[TPL_ContinuationState#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_continuationstate/vb/continuationstate.vb#1)]\"\n  syntax:\n    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.\n    - id: state\n      type: System.Object\n      description: An object representing data to be used by the continuation function.\n    typeParameters:\n    - id: TNewResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task{TNewResult}\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    typeParameters:\n    - id: TNewResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task{TNewResult}\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>continuationFunction</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes.\n  remarks: The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.\n  syntax:\n    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}\n      description: A function to run when the <xref href=\"System.Threading.Tasks.Task`1\"></xref> completes. When run, the delegate will be passed the completed task as an argument.\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: The <xref href=\"System.Threading.Tasks.TaskScheduler\"></xref> to associate with the continuation task and to use for its execution.\n    typeParameters:\n    - id: TNewResult\n      description: The type of the result produced by the continuation.\n    return:\n      type: System.Threading.Tasks.Task{TNewResult}\n      description: A new continuation <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  overload: System.Threading.Tasks.Task`1.ContinueWith``1*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The <xref href=\"System.Threading.Tasks.Task`1\"></xref> has been disposed.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"The <code>continuationFunction</code> argument is null.  \\n  \\n -or-  \\n  \\n The <code>scheduler</code> argument is null.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.Factory\n  commentId: P:System.Threading.Tasks.Task`1.Factory\n  id: Factory\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: Factory\n  nameWithType: Task<TResult>.Factory\n  fullName: Task<TResult>.Factory\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Provides access to factory methods for creating and configuring <xref href=\"System.Threading.Tasks.Task`1\"></xref> instances.\n  remarks: \"This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory%601> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory%601.%23ctor?displayProperty=fullName> constructor. It has the following property values:  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Threading.Tasks.TaskFactory%601.CancellationToken%2A?displayProperty=fullName>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=fullName>|  \\n|<xref:System.Threading.Tasks.TaskFactory%601.ContinuationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskContinuationOptions?displayProperty=fullName>|  \\n|<xref:System.Threading.Tasks.TaskFactory%601.CreationOptions%2A?displayProperty=fullName>|<xref:System.Threading.Tasks.TaskCreationOptions?displayProperty=fullName>|  \\n|<xref:System.Threading.Tasks.TaskFactory%601.Scheduler%2A?displayProperty=fullName>|`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=fullName>|  \\n  \\n The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a <xref:System.Threading.Tasks.Task%601> object with default configuration values.  \\n  \\n The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make three calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method. The first starts a `Task<Int32>` object, which executes a lambda expression that returns 1. The second starts a `Task<Test>` object, which executes a lambda expression that instantiates a new `Test` instance. The third starts a `Task<String[]>` object, which enumerates the files in the C:\\\\Users\\\\Public\\\\Pictures\\\\Sample Pictures\\\\ directory. (Note that successful execution of the example requires that the directory exist and that it contain files.  \\n  \\n [!code-csharp[TPL#10](~/samples/snippets/csharp/VS_Snippets_Misc/tpl/cs/returnavalue10.cs#10)]\\n [!code-vb[TPL#10](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl/vb/10_returnavalue.vb#10)]\"\n  syntax:\n    content: public static System.Threading.Tasks.TaskFactory<TResult> Factory { get; }\n    return:\n      type: System.Threading.Tasks.TaskFactory`1\n      description: A factory object that can create a variety of <xref href=\"System.Threading.Tasks.Task`1\"></xref> objects.\n  overload: System.Threading.Tasks.Task`1.Factory*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.GetAwaiter\n  commentId: M:System.Threading.Tasks.Task`1.GetAwaiter\n  id: GetAwaiter\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: GetAwaiter()\n  nameWithType: Task<TResult>.GetAwaiter()\n  fullName: Task<TResult>.GetAwaiter()\n  type: Method\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets an awaiter used to await this <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  remarks: This method is intended for compiler user rather than use directly in code.\n  syntax:\n    content: public System.Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter ();\n    parameters: []\n    return:\n      type: System.Runtime.CompilerServices.TaskAwaiter`1\n      description: An awaiter instance.\n  overload: System.Threading.Tasks.Task`1.GetAwaiter*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.Tasks.Task`1.Result\n  commentId: P:System.Threading.Tasks.Task`1.Result\n  id: Result\n  parent: System.Threading.Tasks.Task`1\n  langs:\n  - csharp\n  name: Result\n  nameWithType: Task<TResult>.Result\n  fullName: Task<TResult>.Result\n  type: Property\n  assemblies:\n  - System.Threading.Tasks\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading.Tasks\n  summary: Gets the result value of this <xref href=\"System.Threading.Tasks.Task`1\"></xref>.\n  remarks: \"Accessing the property's get accessor blocks the calling thread until the asynchronous operation is complete; it is equivalent to calling the <xref:System.Threading.Tasks.Task.Wait%2A> method.  \\n  \\n Once the result of an operation is available, it is stored and is returned immediately on subsequent calls to the <xref:System.Threading.Tasks.Task%601.Result%2A> property. Note that, if an exception occurred during the operation of the task, or if the task has been cancelled, the <xref:System.Threading.Tasks.Task%601.Result%2A> property does not return a value. Instead, attempting to access the property value throws an <xref:System.AggregateException> exception.\"\n  example:\n  - \"The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument. If the directory contains files, it executes a lambda expression that instantiates a <xref:System.IO.FileStream> object for each file in the directory and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=fullName> property. If a directory contains no files, it simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=fullName> property is zero (0). When the tasks finish, the total number of bytes in all a directory's files is available from the <xref:System.Threading.Tasks.Task%601.Result%2A> property.  \\n  \\n [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]\\n [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]\"\n  syntax:\n    content: public TResult Result { get; }\n    return:\n      type: TResult\n      description: The result value of this <xref href=\"System.Threading.Tasks.Task`1\"></xref>, which is the same type as the task's type parameter.\n  overload: System.Threading.Tasks.Task`1.Result*\n  exceptions:\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\"></xref> object.  \\n  \\n -or-  \\n  \\n An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\"></xref> collection contains information about the exception or exceptions.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.AggregateException\n  parent: System\n  isExternal: false\n  name: AggregateException\n  nameWithType: AggregateException\n  fullName: System.AggregateException\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0})\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>(Func<TResult>)\n  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>)\n  fullName: Task<TResult>.Task<TResult>(Func<TResult>)\n- uid: System.Func`1\n  parent: System\n  isExternal: false\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>(Func<Object,TResult>, Object)\n  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object)\n  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object)\n- uid: System.Func`2\n  name: Func<T,TResult>\n  nameWithType: Func<T,TResult>\n  fullName: System.Func<T,TResult>\n- uid: System.Object\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: TResult\n  name: TResult\n  nameWithType: TResult\n  fullName: TResult\n- uid: System.Func{System.Object,TResult}\n  parent: System\n  isExternal: false\n  name: Func<Object,TResult>\n  nameWithType: Func<Object,TResult>\n  fullName: System.Func<System.Object,TResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>(Func<TResult>, CancellationToken)\n  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken)\n  fullName: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken)\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>(Func<TResult>, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, TaskCreationOptions)\n  fullName: Task<TResult>.Task<TResult>(Func<TResult>, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskCreationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCreationOptions\n  nameWithType: TaskCreationOptions\n  fullName: System.Threading.Tasks.TaskCreationOptions\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>(Func<Object,TResult>, Object, CancellationToken)\n  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken)\n  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken)\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)\n  fullName: Task<TResult>.Task<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)\n  nameWithType: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)\n  fullName: Task<TResult>.Task<TResult>(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ConfigureAwait(Boolean)\n  nameWithType: Task<TResult>.ConfigureAwait(Boolean)\n  fullName: Task<TResult>.ConfigureAwait(Boolean)\n- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: ConfiguredTaskAwaitable<TResult>\n  nameWithType: ConfiguredTaskAwaitable<TResult>\n  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult>\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Action`2\n  name: Action<T1,T2>\n  nameWithType: Action<T1,T2>\n  fullName: System.Action<T1,T2>\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Action{System.Threading.Tasks.Task{TResult},System.Object}\n  parent: System\n  isExternal: false\n  name: Action<Task<TResult>,Object>\n  nameWithType: Action<Task<TResult>,Object>\n  fullName: System.Action<System.Threading.Tasks.Task<TResult>,System.Object>\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskContinuationOptions\n  nameWithType: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  nameWithType: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Action`1\n  name: Action<T>\n  nameWithType: Action<T>\n  fullName: System.Action<T>\n- uid: System.Action{System.Threading.Tasks.Task{TResult}}\n  parent: System\n  isExternal: false\n  name: Action<Task<TResult>>\n  nameWithType: Action<Task<TResult>>\n  fullName: System.Action<System.Threading.Tasks.Task<TResult>>\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    nameWithType: Action\n    fullName: System.Action\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, CancellationToken)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith(Action<Task<TResult>>, CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, CancellationToken)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith(Action<Task<TResult>,Object>, Object)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>, Object)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith(Action<Task<TResult>>)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>)\n- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith(Action<Task<TResult>>, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith(Action<Task<TResult>>, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: TNewResult\n  name: TNewResult\n  nameWithType: TNewResult\n  fullName: TNewResult\n- uid: System.Threading.Tasks.Task{TNewResult}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<TNewResult>\n  nameWithType: Task<TNewResult>\n  fullName: System.Threading.Tasks.Task<TNewResult>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TNewResult\n    name: TNewResult\n    nameWithType: TNewResult\n    fullName: TNewResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Func`3\n  name: Func<T1,T2,TResult>\n  nameWithType: Func<T1,T2,TResult>\n  fullName: System.Func<T1,T2,TResult>\n- uid: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}\n  parent: System\n  isExternal: false\n  name: Func<Task<TResult>,Object,TNewResult>\n  nameWithType: Func<Task<TResult>,Object,TNewResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TResult>,System.Object,TNewResult>\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TNewResult\n    name: TNewResult\n    nameWithType: TNewResult\n    fullName: TNewResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}\n  parent: System\n  isExternal: false\n  name: Func<Task<TResult>,TNewResult>\n  nameWithType: Func<Task<TResult>,TNewResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TResult>,TNewResult>\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TResult\n    name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TNewResult\n    name: TNewResult\n    nameWithType: TNewResult\n    fullName: TNewResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object, CancellationToken)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, CancellationToken)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,Object,TNewResult>, Object)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>)\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)\n  fullName: Task<TResult>.ContinueWith<TNewResult>(Func<Task<TResult>,TNewResult>, TaskScheduler)\n- uid: System.Threading.Tasks.Task`1.Factory\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Factory\n  nameWithType: Task<TResult>.Factory\n  fullName: Task<TResult>.Factory\n- uid: System.Threading.Tasks.TaskFactory`1\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskFactory<TResult>\n  nameWithType: TaskFactory<TResult>\n  fullName: System.Threading.Tasks.TaskFactory<TResult>\n- uid: System.Threading.Tasks.Task`1.GetAwaiter\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: GetAwaiter()\n  nameWithType: Task<TResult>.GetAwaiter()\n  fullName: Task<TResult>.GetAwaiter()\n- uid: System.Runtime.CompilerServices.TaskAwaiter`1\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: TaskAwaiter<TResult>\n  nameWithType: TaskAwaiter<TResult>\n  fullName: System.Runtime.CompilerServices.TaskAwaiter<TResult>\n- uid: System.Threading.Tasks.Task`1.Result\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Result\n  nameWithType: Task<TResult>.Result\n  fullName: Task<TResult>.Result\n- uid: System.Threading.Tasks.Task`1.#ctor*\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  nameWithType: Task<TResult>.Task<TResult>\n  fullName: Task<TResult>.Task<TResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n- uid: System.Threading.Tasks.Task`1.ConfigureAwait*\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ConfigureAwait\n  nameWithType: Task<TResult>.ConfigureAwait\n  fullName: Task<TResult>.ConfigureAwait\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n- uid: System.Threading.Tasks.Task`1.ContinueWith*\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith\n  nameWithType: Task<TResult>.ContinueWith\n  fullName: Task<TResult>.ContinueWith\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n- uid: System.Threading.Tasks.Task`1.ContinueWith``1*\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: ContinueWith<TNewResult>\n  nameWithType: Task<TResult>.ContinueWith<TNewResult>\n  fullName: Task<TResult>.ContinueWith<TNewResult>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n- uid: System.Threading.Tasks.Task`1.Factory*\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Factory\n  nameWithType: Task<TResult>.Factory\n  fullName: Task<TResult>.Factory\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n- uid: System.Threading.Tasks.Task`1.GetAwaiter*\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: GetAwaiter\n  nameWithType: Task<TResult>.GetAwaiter\n  fullName: Task<TResult>.GetAwaiter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n- uid: System.Threading.Tasks.Task`1.Result*\n  parent: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Result\n  nameWithType: Task<TResult>.Result\n  fullName: Task<TResult>.Result\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/Task`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Threading.Tasks.Task.AsyncState\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: AsyncState\n  nameWithType: Task.AsyncState\n  fullName: Task.AsyncState\n- uid: System.Threading.Tasks.Task.CompletedTask\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CompletedTask\n  nameWithType: Task.CompletedTask\n  fullName: Task.CompletedTask\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task,Object>, Object, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task,Object>, Object, CancellationToken)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object, CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task,Object>, Object)\n  nameWithType: Task.ContinueWith(Action<Task,Object>, Object)\n  fullName: Task.ContinueWith(Action<Task,Object>, Object)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task>, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith(Action<Task>, TaskContinuationOptions)\n  fullName: Task.ContinueWith(Action<Task>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task>, CancellationToken)\n  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken)\n  fullName: Task.ContinueWith(Action<Task>, CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task>)\n  nameWithType: Task.ContinueWith(Action<Task>)\n  fullName: Task.ContinueWith(Action<Task>)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith(Action<Task>, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task>, TaskScheduler)\n  fullName: Task.ContinueWith(Action<Task>, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object, CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,Object,TResult>, Object)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object)\n  fullName: Task.ContinueWith<TResult>(Func<Task,Object,TResult>, Object)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,TResult>)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)\n  fullName: Task.ContinueWith<TResult>(Func<Task,TResult>, TaskScheduler)\n- uid: System.Threading.Tasks.Task.CreationOptions\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CreationOptions\n  nameWithType: Task.CreationOptions\n  fullName: Task.CreationOptions\n- uid: System.Threading.Tasks.Task.CurrentId\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: CurrentId\n  nameWithType: Task.CurrentId\n  fullName: Task.CurrentId\n- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Delay(TimeSpan, CancellationToken)\n  nameWithType: Task.Delay(TimeSpan, CancellationToken)\n  fullName: Task.Delay(TimeSpan, CancellationToken)\n- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Delay(Int32, CancellationToken)\n  nameWithType: Task.Delay(Int32, CancellationToken)\n  fullName: Task.Delay(Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.Delay(System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Delay(Int32)\n  nameWithType: Task.Delay(Int32)\n  fullName: Task.Delay(Int32)\n- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Delay(TimeSpan)\n  nameWithType: Task.Delay(TimeSpan)\n  fullName: Task.Delay(TimeSpan)\n- uid: System.Threading.Tasks.Task.Dispose\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Dispose()\n  nameWithType: Task.Dispose()\n  fullName: Task.Dispose()\n- uid: System.Threading.Tasks.Task.Dispose(System.Boolean)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: Task.Dispose(Boolean)\n  fullName: Task.Dispose(Boolean)\n- uid: System.Threading.Tasks.Task.Exception\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Exception\n  nameWithType: Task.Exception\n  fullName: Task.Exception\n- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromCanceled(CancellationToken)\n  nameWithType: Task.FromCanceled(CancellationToken)\n  fullName: Task.FromCanceled(CancellationToken)\n- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromCanceled<TResult>(CancellationToken)\n  nameWithType: Task.FromCanceled<TResult>(CancellationToken)\n  fullName: Task.FromCanceled<TResult>(CancellationToken)\n- uid: System.Threading.Tasks.Task.FromException(System.Exception)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromException(Exception)\n  nameWithType: Task.FromException(Exception)\n  fullName: Task.FromException(Exception)\n- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromException<TResult>(Exception)\n  nameWithType: Task.FromException<TResult>(Exception)\n  fullName: Task.FromException<TResult>(Exception)\n- uid: System.Threading.Tasks.Task.FromResult``1(``0)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: FromResult<TResult>(TResult)\n  nameWithType: Task.FromResult<TResult>(TResult)\n  fullName: Task.FromResult<TResult>(TResult)\n- uid: System.Threading.Tasks.Task.Id\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Id\n  nameWithType: Task.Id\n  fullName: Task.Id\n- uid: System.Threading.Tasks.Task.IsCanceled\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCanceled\n  nameWithType: Task.IsCanceled\n  fullName: Task.IsCanceled\n- uid: System.Threading.Tasks.Task.IsCompleted\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCompleted\n  nameWithType: Task.IsCompleted\n  fullName: Task.IsCompleted\n- uid: System.Threading.Tasks.Task.IsCompletedSuccessfully\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsCompletedSuccessfully\n  nameWithType: Task.IsCompletedSuccessfully\n  fullName: Task.IsCompletedSuccessfully\n- uid: System.Threading.Tasks.Task.IsFaulted\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IsFaulted\n  nameWithType: Task.IsFaulted\n  fullName: Task.IsFaulted\n- uid: System.Threading.Tasks.Task.Run(System.Action)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run(Action)\n  nameWithType: Task.Run(Action)\n  fullName: Task.Run(Action)\n- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run(Func<Task>)\n  nameWithType: Task.Run(Func<Task>)\n  fullName: Task.Run(Func<Task>)\n- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run(Action, CancellationToken)\n  nameWithType: Task.Run(Action, CancellationToken)\n  fullName: Task.Run(Action, CancellationToken)\n- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run(Func<Task>, CancellationToken)\n  nameWithType: Task.Run(Func<Task>, CancellationToken)\n  fullName: Task.Run(Func<Task>, CancellationToken)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run<TResult>(Func<TResult>, CancellationToken)\n  nameWithType: Task.Run<TResult>(Func<TResult>, CancellationToken)\n  fullName: Task.Run<TResult>(Func<TResult>, CancellationToken)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  fullName: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run<TResult>(Func<Task<TResult>>)\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>)\n  fullName: Task.Run<TResult>(Func<Task<TResult>>)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Run<TResult>(Func<TResult>)\n  nameWithType: Task.Run<TResult>(Func<TResult>)\n  fullName: Task.Run<TResult>(Func<TResult>)\n- uid: System.Threading.Tasks.Task.RunSynchronously\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: RunSynchronously()\n  nameWithType: Task.RunSynchronously()\n  fullName: Task.RunSynchronously()\n- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: RunSynchronously(TaskScheduler)\n  nameWithType: Task.RunSynchronously(TaskScheduler)\n  fullName: Task.RunSynchronously(TaskScheduler)\n- uid: System.Threading.Tasks.Task.Start\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Start()\n  nameWithType: Task.Start()\n  fullName: Task.Start()\n- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Start(TaskScheduler)\n  nameWithType: Task.Start(TaskScheduler)\n  fullName: Task.Start(TaskScheduler)\n- uid: System.Threading.Tasks.Task.Status\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Status\n  nameWithType: Task.Status\n  fullName: Task.Status\n- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait(TimeSpan)\n  nameWithType: Task.Wait(TimeSpan)\n  fullName: Task.Wait(TimeSpan)\n- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait(Int32, CancellationToken)\n  nameWithType: Task.Wait(Int32, CancellationToken)\n  fullName: Task.Wait(Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait(CancellationToken)\n  nameWithType: Task.Wait(CancellationToken)\n  fullName: Task.Wait(CancellationToken)\n- uid: System.Threading.Tasks.Task.Wait(System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait(Int32)\n  nameWithType: Task.Wait(Int32)\n  fullName: Task.Wait(Int32)\n- uid: System.Threading.Tasks.Task.Wait\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Wait()\n  nameWithType: Task.Wait()\n  fullName: Task.Wait()\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[])\n  nameWithType: Task.WaitAll(Task[])\n  fullName: Task.WaitAll(Task[])\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[], Int32)\n  nameWithType: Task.WaitAll(Task[], Int32)\n  fullName: Task.WaitAll(Task[], Int32)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[], CancellationToken)\n  nameWithType: Task.WaitAll(Task[], CancellationToken)\n  fullName: Task.WaitAll(Task[], CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[], TimeSpan)\n  nameWithType: Task.WaitAll(Task[], TimeSpan)\n  fullName: Task.WaitAll(Task[], TimeSpan)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAll(Task[], Int32, CancellationToken)\n  nameWithType: Task.WaitAll(Task[], Int32, CancellationToken)\n  fullName: Task.WaitAll(Task[], Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[], Int32, CancellationToken)\n  nameWithType: Task.WaitAny(Task[], Int32, CancellationToken)\n  fullName: Task.WaitAny(Task[], Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[], TimeSpan)\n  nameWithType: Task.WaitAny(Task[], TimeSpan)\n  fullName: Task.WaitAny(Task[], TimeSpan)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[], Int32)\n  nameWithType: Task.WaitAny(Task[], Int32)\n  fullName: Task.WaitAny(Task[], Int32)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[], CancellationToken)\n  nameWithType: Task.WaitAny(Task[], CancellationToken)\n  fullName: Task.WaitAny(Task[], CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WaitAny(Task[])\n  nameWithType: Task.WaitAny(Task[])\n  fullName: Task.WaitAny(Task[])\n- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll(IEnumerable<Task>)\n  nameWithType: Task.WhenAll(IEnumerable<Task>)\n  fullName: Task.WhenAll(IEnumerable<Task>)\n- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll(Task[])\n  nameWithType: Task.WhenAll(Task[])\n  fullName: Task.WhenAll(Task[])\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  fullName: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAll<TResult>(Task<TResult>[])\n  nameWithType: Task.WhenAll<TResult>(Task<TResult>[])\n  fullName: Task.WhenAll<TResult>(Task<TResult>[])\n- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny(IEnumerable<Task>)\n  nameWithType: Task.WhenAny(IEnumerable<Task>)\n  fullName: Task.WhenAny(IEnumerable<Task>)\n- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny(Task[])\n  nameWithType: Task.WhenAny(Task[])\n  fullName: Task.WhenAny(Task[])\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny<TResult>(Task<TResult>[])\n  nameWithType: Task.WhenAny<TResult>(Task<TResult>[])\n  fullName: Task.WhenAny<TResult>(Task<TResult>[])\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  fullName: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)\n- uid: System.Threading.Tasks.Task.Yield\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: Yield()\n  nameWithType: Task.Yield()\n  fullName: Task.Yield()\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IAsyncResult.AsyncWaitHandle\n  nameWithType: Task.IAsyncResult.AsyncWaitHandle\n  fullName: Task.IAsyncResult.AsyncWaitHandle\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  parent: System.Threading.Tasks.Task\n  isExternal: false\n  name: IAsyncResult.CompletedSynchronously\n  nameWithType: Task.IAsyncResult.CompletedSynchronously\n  fullName: Task.IAsyncResult.CompletedSynchronously\n- uid: System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.TaskExtensions\n  isExternal: false\n  name: Unwrap(Task<Task>)\n  nameWithType: TaskExtensions.Unwrap(Task<Task>)\n  fullName: TaskExtensions.Unwrap(Task<Task>)\n- uid: System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.TaskExtensions\n  isExternal: false\n  name: Unwrap<TResult>(Task<Task<TResult>>)\n  nameWithType: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)\n  fullName: TaskExtensions.Unwrap<TResult>(Task<Task<TResult>>)\n- uid: System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task)\n  parent: System.Windows.Threading.TaskExtensions\n  isExternal: false\n  name: DispatcherOperationWait(Task)\n  nameWithType: TaskExtensions.DispatcherOperationWait(Task)\n  fullName: TaskExtensions.DispatcherOperationWait(Task)\n- uid: System.Windows.Threading.TaskExtensions.DispatcherOperationWait(System.Threading.Tasks.Task,System.TimeSpan)\n  parent: System.Windows.Threading.TaskExtensions\n  isExternal: false\n  name: DispatcherOperationWait(Task, TimeSpan)\n  nameWithType: TaskExtensions.DispatcherOperationWait(Task, TimeSpan)\n  fullName: TaskExtensions.DispatcherOperationWait(Task, TimeSpan)\n- uid: System.Windows.Threading.TaskExtensions.IsDispatcherOperationTask(System.Threading.Tasks.Task)\n  parent: System.Windows.Threading.TaskExtensions\n  isExternal: false\n  name: IsDispatcherOperationTask(Task)\n  nameWithType: TaskExtensions.IsDispatcherOperationTask(Task)\n  fullName: TaskExtensions.IsDispatcherOperationTask(Task)\n"}