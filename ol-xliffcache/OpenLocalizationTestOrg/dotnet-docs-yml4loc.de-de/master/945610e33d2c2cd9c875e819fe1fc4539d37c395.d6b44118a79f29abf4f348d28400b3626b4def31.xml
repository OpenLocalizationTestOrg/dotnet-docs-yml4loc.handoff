{"nodes":[{"content":"Represents a file object in a virtual file or resource space.","nodes":[{"pos":[0,61],"content":"Represents a file object in a virtual file or resource space.","nodes":[{"content":"Represents a file object in a virtual file or resource space.","pos":[0,61]}]}],"pos":[490,552],"yaml":true},{"content":"The <xref:System.Web.Hosting.VirtualFile> class is the base class for objects that represent files in a virtual file system. Typically, you would implement a descendent of the <xref:System.Web.Hosting.VirtualFile> class for each <xref:System.Web.Hosting.VirtualPathProvider> object descendent in your Web application.","nodes":[{"pos":[0,317],"content":"The <xref:System.Web.Hosting.VirtualFile> class is the base class for objects that represent files in a virtual file system. Typically, you would implement a descendent of the <xref:System.Web.Hosting.VirtualFile> class for each <xref:System.Web.Hosting.VirtualPathProvider> object descendent in your Web application.","nodes":[{"content":"The <xref:System.Web.Hosting.VirtualFile> class is the base class for objects that represent files in a virtual file system. Typically, you would implement a descendent of the <xref:System.Web.Hosting.VirtualFile> class for each <xref:System.Web.Hosting.VirtualPathProvider> object descendent in your Web application.","pos":[0,317],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Hosting.VirtualFile&gt;</ph> class is the base class for objects that represent files in a virtual file system.","pos":[0,124],"source":"The <xref:System.Web.Hosting.VirtualFile> class is the base class for objects that represent files in a virtual file system."},{"content":"Typically, you would implement a descendent of the <ph id=\"ph1\">&lt;xref:System.Web.Hosting.VirtualFile&gt;</ph> class for each <ph id=\"ph2\">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> object descendent in your Web application.","pos":[125,317],"source":" Typically, you would implement a descendent of the <xref:System.Web.Hosting.VirtualFile> class for each <xref:System.Web.Hosting.VirtualPathProvider> object descendent in your Web application."}]}]}],"pos":[563,881],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Web.Hosting.VirtualFile\"></xref> class.","nodes":[{"pos":[0,92],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Web.Hosting.VirtualFile\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Web.Hosting.VirtualFile\"></xref> class."}],"pos":[7350,7443],"yaml":true},{"content":"The virtual path to the resource represented by this instance.","nodes":[{"pos":[0,62],"content":"The virtual path to the resource represented by this instance.","nodes":[{"content":"The virtual path to the resource represented by this instance.","pos":[0,62]}]}],"pos":[8379,8442],"yaml":true},{"content":"Gets a value that indicates that this is a virtual resource that should be treated as a file.","nodes":[{"pos":[0,93],"content":"Gets a value that indicates that this is a virtual resource that should be treated as a file.","nodes":[{"content":"Gets a value that indicates that this is a virtual resource that should be treated as a file.","pos":[0,93]}]}],"pos":[9392,9486],"yaml":true},{"content":"Always `false`.","nodes":[{"pos":[0,15],"content":"Always <ph id=\"ph1\">`false`</ph>.","source":"Always `false`."}],"pos":[9609,9625],"yaml":true},{"content":"When overridden in a derived class, returns a read-only stream to the virtual resource.","nodes":[{"pos":[0,87],"content":"When overridden in a derived class, returns a read-only stream to the virtual resource.","nodes":[{"content":"When overridden in a derived class, returns a read-only stream to the virtual resource.","pos":[0,87]}]}],"pos":[10543,10631],"yaml":true},{"content":"The <xref:System.Web.Hosting.VirtualFile.Open%2A> method returns a stream containing the data treated as a file by the <xref:System.Web.Hosting.VirtualPathProvider> class. The stream is read-only and is seekable (the <xref:System.IO.Stream.CanSeek%2A> property is true).","nodes":[{"pos":[0,270],"content":"The <xref:System.Web.Hosting.VirtualFile.Open%2A> method returns a stream containing the data treated as a file by the <xref:System.Web.Hosting.VirtualPathProvider> class. The stream is read-only and is seekable (the <xref:System.IO.Stream.CanSeek%2A> property is true).","nodes":[{"content":"The <xref:System.Web.Hosting.VirtualFile.Open%2A> method returns a stream containing the data treated as a file by the <xref:System.Web.Hosting.VirtualPathProvider> class. The stream is read-only and is seekable (the <xref:System.IO.Stream.CanSeek%2A> property is true).","pos":[0,270],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.Hosting.VirtualFile.Open%2A&gt;</ph> method returns a stream containing the data treated as a file by the <ph id=\"ph2\">&lt;xref:System.Web.Hosting.VirtualPathProvider&gt;</ph> class.","pos":[0,171],"source":"The <xref:System.Web.Hosting.VirtualFile.Open%2A> method returns a stream containing the data treated as a file by the <xref:System.Web.Hosting.VirtualPathProvider> class."},{"content":"The stream is read-only and is seekable (the <ph id=\"ph1\">&lt;xref:System.IO.Stream.CanSeek%2A&gt;</ph> property is true).","pos":[172,270],"source":" The stream is read-only and is seekable (the <xref:System.IO.Stream.CanSeek%2A> property is true)."}]}]}],"pos":[10642,10913],"yaml":true,"extradata":"MT"},{"content":"A read-only stream to the virtual file.","nodes":[{"pos":[0,39],"content":"A read-only stream to the virtual file.","nodes":[{"content":"A read-only stream to the virtual file.","pos":[0,39]}]}],"pos":[11892,11932],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.Hosting.VirtualFile\n  commentId: T:System.Web.Hosting.VirtualFile\n  id: VirtualFile\n  children:\n  - System.Web.Hosting.VirtualFile.#ctor(System.String)\n  - System.Web.Hosting.VirtualFile.IsDirectory\n  - System.Web.Hosting.VirtualFile.Open\n  langs:\n  - csharp\n  name: VirtualFile\n  nameWithType: VirtualFile\n  fullName: System.Web.Hosting.VirtualFile\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Represents a file object in a virtual file or resource space.\n  remarks: The <xref:System.Web.Hosting.VirtualFile> class is the base class for objects that represent files in a virtual file system. Typically, you would implement a descendent of the <xref:System.Web.Hosting.VirtualFile> class for each <xref:System.Web.Hosting.VirtualPathProvider> object descendent in your Web application.\n  example:\n  - \"The following code example is a <xref:System.Web.Hosting.VirtualFile> class implementation that combines information stored in a <xref:System.Data.DataSet> object with a template file to return HTML data. This code example works with the code examples for the <xref:System.Web.Hosting.VirtualPathProvider> and <xref:System.Web.Hosting.VirtualDirectory> classes to provide virtual resources from a data store that is loaded into a <xref:System.Data.DataSet> object. For the complete instructions for compiling and running the example, see the Example section of the <xref:System.Web.Hosting.VirtualPathProvider> class overview.  \\n  \\n This example has three parts: the <xref:System.Web.Hosting.VirtualFile> class implementation, an XML data file used to populate the <xref:System.Data.DataSet> object, and the page template file.  \\n  \\n The first code example is an implementation of the <xref:System.Web.Hosting.VirtualFile> class. Its constructor uses a method on a custom <xref:System.Web.Hosting.VirtualPathProvider> object to return a <xref:System.Data.DataSet> object. It then searches the <xref:System.Data.DataSet> object to retrieve the information associated with the virtual file path provided. In the <xref:System.Web.Hosting.VirtualFile.Open%2A> method, it combines the information from the <xref:System.Data.DataSet> object with a template file and returns the combination as a <xref:System.IO.Stream> object.  \\n  \\n [!code-csharp[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#40)]\\n [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#40)]  \\n  \\n The second example is the XML data file used to populate the <xref:System.Data.DataSet> object returned by the custom <xref:System.Web.Hosting.VirtualPathProvider> object. This XML data is used to demonstrate using the <xref:System.Web.Hosting.VirtualPathProvider>, <xref:System.Web.Hosting.VirtualFile>, and <xref:System.Web.Hosting.VirtualDirectory> classes to retrieve data from external data, and is not intended to represent a production-quality data store.  \\n  \\n```  \\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>  \\n<resource type=\\\"dir\\\"   \\n          path=\\\"/vrDir\\\"   \\n          parentPath=\\\"\\\"   \\n          content=\\\"\\\">  \\n  <resource type=\\\"file\\\"   \\n            path=\\\"/vrDir/Level1FileA.vrf\\\"  \\n            parentPath=\\\"/vrDir\\\"   \\n            content=\\\"This is the content of file Level1FileA.\\\">  \\n  </resource>  \\n  <resource type=\\\"file\\\"   \\n            path=\\\"/vrDir/Level1FileB.vrf\\\"  \\n            parentPath=\\\"/vrDir\\\"   \\n            content=\\\"This is the content of file Level1FileB.\\\">  \\n  </resource>  \\n  <resource type=\\\"dir\\\"   \\n            path=\\\"/vrDir/Level2DirA\\\"   \\n            parentPath=\\\"/vrDir\\\"   \\n            content=\\\"\\\">  \\n    <resource type=\\\"file\\\"   \\n              path=\\\"/vrDir/Level2DirA/Level2FileA.vrf\\\"   \\n              parentPath=\\\"/vrDir/Level2DirA\\\"   \\n              content=\\\"This is the content of file Level2FileA.\\\">  \\n    </resource>  \\n    <resource type=\\\"file\\\"   \\n              path=\\\"/vrDir/Level2DirA/Level2FileB.vrf\\\"  \\n              parentPath=\\\"/vrDir/Level2DirA\\\"   \\n              content=\\\"This is the content of file Level2FileB.\\\">  \\n    </resource>  \\n  </resource>  \\n  <resource type=\\\"dir\\\"   \\n            path=\\\"/vrDir/Level2DirB\\\"   \\n            parentPath=\\\"/vrDir\\\"   \\n            content=\\\"\\\">  \\n    <resource type=\\\"file\\\"   \\n              path=\\\"/vrDir/Level2DirB/Level2FileA.vrf\\\"   \\n              parentPath=\\\"/vrDir/Level2DirB\\\"   \\n              content=\\\"This is the content of file Level2FileA.\\\">  \\n    </resource>  \\n    <resource type=\\\"file\\\"   \\n              path=\\\"/vrDir/Level2DirB/Level2FileB.vrf\\\"  \\n              parentPath=\\\"/vrDir/Level2DirB\\\"   \\n              content=\\\"This is the content of file Level2FileB.\\\">  \\n    </resource>  \\n  </resource>  \\n</resource>  \\n```  \\n  \\n The third example is the text file used as a template for the virtual file. Placeholders in the file are represented by text between percent (%) marks, such as `%file%` and `%content%`. Timestamps are used to monitor changes to cached virtual file data.  \\n  \\n```  \\n<html>  \\n  <head>  \\n    <title>File name: %file%</title>  \\n  </head>  \\n  \\n  <body>  \\n    <h1>%file%</h1>  \\n    <p>%content%</p>  \\n    <p>Page timestamp: %pageTimestamp%<br>  \\n       Data timestamp: %dataTimestamp%<br>  \\n       Template timestamp: %templateTimestamp%</p>  \\n  </body>  \\n</html>  \\n```\"\n  syntax:\n    content: 'public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.Web.Hosting.VirtualFileBase\n  implements: []\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Web.Hosting.VirtualFileBase.InitializeLifetimeService\n  - System.Web.Hosting.VirtualFileBase.Name\n  - System.Web.Hosting.VirtualFileBase.VirtualPath\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/VirtualFile.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.Hosting.VirtualFile.#ctor(System.String)\n  commentId: M:System.Web.Hosting.VirtualFile.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Web.Hosting.VirtualFile\n  langs:\n  - csharp\n  name: VirtualFile(String)\n  nameWithType: VirtualFile.VirtualFile(String)\n  fullName: VirtualFile.VirtualFile(String)\n  type: Constructor\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Initializes a new instance of the <xref href=\"System.Web.Hosting.VirtualFile\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following code example is an implementation of the <xref:System.Web.Hosting.VirtualFile.%23ctor%2A> constructor that retrieves virtual file information from a <xref:System.Data.DataSet> object provided by a custom <xref:System.Web.Hosting.VirtualPathProvider> object. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualFile> class overview.  \\n  \\n [!code-csharp[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#41)]\\n [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#41)]\"\n  syntax:\n    content: protected VirtualFile (string virtualPath);\n    parameters:\n    - id: virtualPath\n      type: System.String\n      description: The virtual path to the resource represented by this instance.\n  overload: System.Web.Hosting.VirtualFile.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/VirtualFile.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.Hosting.VirtualFile.IsDirectory\n  commentId: P:System.Web.Hosting.VirtualFile.IsDirectory\n  id: IsDirectory\n  parent: System.Web.Hosting.VirtualFile\n  langs:\n  - csharp\n  name: IsDirectory\n  nameWithType: VirtualFile.IsDirectory\n  fullName: VirtualFile.IsDirectory\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: Gets a value that indicates that this is a virtual resource that should be treated as a file.\n  syntax:\n    content: public override bool IsDirectory { get; }\n    return:\n      type: System.Boolean\n      description: Always `false`.\n  overload: System.Web.Hosting.VirtualFile.IsDirectory*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/VirtualFile.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.Hosting.VirtualFile.Open\n  commentId: M:System.Web.Hosting.VirtualFile.Open\n  id: Open\n  parent: System.Web.Hosting.VirtualFile\n  langs:\n  - csharp\n  name: Open()\n  nameWithType: VirtualFile.Open()\n  fullName: VirtualFile.Open()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.Hosting\n  summary: When overridden in a derived class, returns a read-only stream to the virtual resource.\n  remarks: The <xref:System.Web.Hosting.VirtualFile.Open%2A> method returns a stream containing the data treated as a file by the <xref:System.Web.Hosting.VirtualPathProvider> class. The stream is read-only and is seekable (the <xref:System.IO.Stream.CanSeek%2A> property is true).\n  example:\n  - \"The following code example is an implementation of the <xref:System.Web.Hosting.VirtualFile.Open%2A> method that combines virtual-file-specific information with a template file and then returns the combination. The template file is cached to reduce the overhead of reading the file system multiple times to retrieve the template file. For the full code required to run the example, see the Example section of the <xref:System.Web.Hosting.VirtualFile> class overview.  \\n  \\n [!code-csharp[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#42)]\\n [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#42)]\"\n  syntax:\n    content: public abstract System.IO.Stream Open ();\n    parameters: []\n    return:\n      type: System.IO.Stream\n      description: A read-only stream to the virtual file.\n  overload: System.Web.Hosting.VirtualFile.Open*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/VirtualFile.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\nreferences:\n- uid: System.Web.Hosting.VirtualFileBase\n  parent: System.Web.Hosting\n  isExternal: false\n  name: VirtualFileBase\n  nameWithType: VirtualFileBase\n  fullName: System.Web.Hosting.VirtualFileBase\n- uid: System.Web.Hosting.VirtualFile.#ctor(System.String)\n  parent: System.Web.Hosting.VirtualFile\n  isExternal: false\n  name: VirtualFile(String)\n  nameWithType: VirtualFile.VirtualFile(String)\n  fullName: VirtualFile.VirtualFile(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.Hosting.VirtualFile.IsDirectory\n  parent: System.Web.Hosting.VirtualFile\n  isExternal: false\n  name: IsDirectory\n  nameWithType: VirtualFile.IsDirectory\n  fullName: VirtualFile.IsDirectory\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.Hosting.VirtualFile.Open\n  parent: System.Web.Hosting.VirtualFile\n  isExternal: false\n  name: Open()\n  nameWithType: VirtualFile.Open()\n  fullName: VirtualFile.Open()\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Web.Hosting.VirtualFile.#ctor*\n  parent: System.Web.Hosting.VirtualFile\n  isExternal: false\n  name: VirtualFile\n  nameWithType: VirtualFile.VirtualFile\n  fullName: VirtualFile.VirtualFile\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/VirtualFile.xml\n- uid: System.Web.Hosting.VirtualFile.IsDirectory*\n  parent: System.Web.Hosting.VirtualFile\n  isExternal: false\n  name: IsDirectory\n  nameWithType: VirtualFile.IsDirectory\n  fullName: VirtualFile.IsDirectory\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/VirtualFile.xml\n- uid: System.Web.Hosting.VirtualFile.Open*\n  parent: System.Web.Hosting.VirtualFile\n  isExternal: false\n  name: Open\n  nameWithType: VirtualFile.Open\n  fullName: VirtualFile.Open\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Hosting/VirtualFile.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.Web.Hosting.VirtualFileBase.InitializeLifetimeService\n  parent: System.Web.Hosting.VirtualFileBase\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: VirtualFileBase.InitializeLifetimeService()\n  fullName: VirtualFileBase.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.Web.Hosting.VirtualFileBase.Name\n  parent: System.Web.Hosting.VirtualFileBase\n  isExternal: false\n  name: Name\n  nameWithType: VirtualFileBase.Name\n  fullName: VirtualFileBase.Name\n- uid: System.Web.Hosting.VirtualFileBase.VirtualPath\n  parent: System.Web.Hosting.VirtualFileBase\n  isExternal: false\n  name: VirtualPath\n  nameWithType: VirtualFileBase.VirtualPath\n  fullName: VirtualFileBase.VirtualPath\n"}