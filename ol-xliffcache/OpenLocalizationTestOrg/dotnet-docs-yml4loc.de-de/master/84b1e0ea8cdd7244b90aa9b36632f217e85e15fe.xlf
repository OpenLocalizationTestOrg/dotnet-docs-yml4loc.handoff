<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">84b1e0ea8cdd7244b90aa9b36632f217e85e15fe</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.CodeDom.Compiler.CodeDomProvider.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f71cbc40c65964e018af7bc6520dfb63c8c681b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21bd34f290bb2f8de867cea8527a14088397f44d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a base class for <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> implementations.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class is abstract.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> can be used to create and retrieve instances of code generators and code compilers.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, the methods made available in the code generator and code compiler are available directly from the code provider.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You do not need to call <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> to access the methods, and those methods are marked as obsolete.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This applies to preexisting as well as new code provider implementations.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation typically provides code generation and/or code compilation interfaces for generating code and managing compilation for a single programming language.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>Several languages are supported by <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations that ship with the <ph id="ph2">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>These languages include C#, Visual Basic, C++, and JScript.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Developers or compiler vendors can implement the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> and <ph id="ph2">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> interfaces and provide a <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> that extends CodeDOM support to other programming languages.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;system.codedom<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) provides a mechanism for developers and compiler vendors to add configuration settings for additional <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class provides static methods to discover and enumerate the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method returns the settings for all <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> method returns the settings for a specific <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation, based on the programming language name.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns an instance of a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for a specific language.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more details on language provider settings in the configuration file, see <bpt id="p1">[</bpt>Compiler and Language Provider Settings Schema<ept id="p1">](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class makes a link demand and an inheritance demand at the class level.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown if either the immediate caller or the derived class does not have full trust permission.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept> and <bpt id="p2">[</bpt>Inheritance Demands<ept id="p2">](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Compiles an assembly based on the <ph id="ph1">&lt;xref href="System.CodeDom"&gt;&lt;/xref&gt;</ph> trees contained in the specified array of <ph id="ph2">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph> objects, using the specified compiler settings.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;&lt;/xref&gt;</ph> object that indicates the settings for the compilation.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph> that indicates the code to compile.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;&lt;/xref&gt;</ph> object that indicates the results of the compilation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateCompiler"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;&lt;/xref&gt;</ph> object that indicates the settings for the compilation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>An array of the names of the files to compile.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;&lt;/xref&gt;</ph> object that indicates the results of compilation.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateCompiler"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CompilerParameters"&gt;&lt;/xref&gt;</ph> object that indicates the compiler settings for this compilation.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>An array of source code strings to compile.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CompilerResults"&gt;&lt;/xref&gt;</ph> object that indicates the results of compilation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateCompiler"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code compiler.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> methods that are directly available in the code provider.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.ICodeCompiler"&gt;&lt;/xref&gt;</ph> that can be used for compilation of <ph id="ph2">&lt;xref href="System.CodeDom"&gt;&lt;/xref&gt;</ph> based source code representations.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Creates an escaped identifier for the specified value.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A&gt;</ph> tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is referred to an escaped identifier.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>The escaped identifier contains the same <ph id="ph1">`value`</ph> but has escape-code formatting added to differentiate the identifier from the keyword.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two implementation examples are preceding the <ph id="ph1">`value`</ph> with "@" or bracketing the <ph id="ph2">`value`</ph> with "[" and "]".</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The string for which to create an escaped identifier.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The escaped identifier for the value.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code generator.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> methods that are directly available in the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;&lt;/xref&gt;</ph> that can be used to generate <ph id="ph2">&lt;xref href="System.CodeDom"&gt;&lt;/xref&gt;</ph> based source code representations.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code generator using the specified <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> for output.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the specified <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> for output.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method supports more optimized code generation that incrementally updates the source code.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base class implementation calls the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> and results in a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> if an <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> object is not returned.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to use to output.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;&lt;/xref&gt;</ph> that can be used to generate <ph id="ph2">&lt;xref href="System.CodeDom"&gt;&lt;/xref&gt;</ph> based source code representations.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code generator using the specified file name for output.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method uses the specified file name for output.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base class implementation calls the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> and results in a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> if an <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> object is not returned.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The file name to output to.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.ICodeGenerator"&gt;&lt;/xref&gt;</ph> that can be used to generate <ph id="ph2">&lt;xref href="System.CodeDom"&gt;&lt;/xref&gt;</ph> based source code representations.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a new code parser.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.ICodeParser"&gt;&lt;/xref&gt;</ph> that can be used to parse source code.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The base implementation always returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> instance for the specified language.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> allows you to specify at run time the code provider you wish to instantiate.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you know at design time which code provider is to be used, you should create an instance of that code provider rather than use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> instance for a specific language name; it is similar to calling the <ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method with the language provider type.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> when you want to dynamically find a configured provider implementation for a language name.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>If more than one provider implementation is configured for the language name, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> returns a provider instance for the last matching configuration element.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=fullName&gt;</ph> method overload when you want a specific language provider implementation.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method to get a provider instance that supports the language name <ph id="ph2">`"CSharp"`</ph>; use the <ph id="ph3">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=fullName&gt;</ph> method overload to get a provider instance specifically for the <ph id="ph4">&lt;xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=fullName&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use the [<ph id="ph1">\]</ph>, CultureInfo, Object<ph id="ph2">\&lt;</ph>xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt; method if you have multiple code providers for a language and you desire to instantiate a specific code provider.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method checks whether at least one provider implementation supports a specific language.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can validate a language name using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you pass an unsupported language name to <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> a <ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=fullName&gt;</ph> is thrown.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method can be used to determine all <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer, including additional implementations provided by developers and compiler vendors that are identified in the <bpt id="p1">[</bpt><ph id="ph3">\&amp;</ph>lt;system.codedom<ph id="ph4">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns an instance of a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for a specific language.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>Language names are case-insensitive.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The language name.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A CodeDOM provider that is implemented for the specified language name.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> does not have a configured provider on this computer.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> instance for the specified language and provider options.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> enables you to specify at run time the version of the code provider you want to instantiate.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> when you want to dynamically find a configured provider implementation for a specific language and options.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>Language names are case-insensitive.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about supported provider options, see the specific CodeDOM provider documentation.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>The language name.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A collection of provider options from the configuration file.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>A CodeDOM provider that is implemented for the specified language name and options.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Creates a valid identifier for the specified value.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A&gt;</ph> tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore ("_") character.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The string for which to generate a valid identifier.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>A valid identifier for the specified value.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Gets the default file name extension to use for source code files in the current language.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A file name extension corresponding to the extension of the source files of the current language.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The base implementation always returns <ph id="ph1">&lt;xref href="System.String.Empty"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph> for which to generate code.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to which the output code is sent.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeExpression"&gt;&lt;/xref&gt;</ph> object that indicates the expression for which to generate code.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to which output code is sent.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The base class implementation throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=fullName&gt;</ph> for documentation describing an implementation of this method.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeMember"&gt;&lt;/xref&gt;</ph> object that indicates the member for which to generate code.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to which output code is sent.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>This method is not overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeNamespace"&gt;&lt;/xref&gt;</ph> object that indicates the namespace for which to generate code.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to which output code is sent.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeStatement"&gt;&lt;/xref&gt;</ph> containing the CodeDOM elements for which to generate code.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to which output code is sent.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;&lt;/xref&gt;</ph> object that indicates the type for which to generate code.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to which output code is sent.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Returns the language provider and compiler configuration settings for this computer.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method to enumerate the language provider settings on a computer.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, the default language providers supplied by the .NET Framework are not specified in the <bpt id="p1">[</bpt><ph id="ph2">\&amp;</ph>lt;system.codedom<ph id="ph3">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> compiler configuration section and cannot be removed, so this method returns information about the default providers and any specified in the configuration file.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CompilerInfo"&gt;&lt;/xref&gt;</ph> representing the settings of all configured <ph id="ph2">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> implementations.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Returns the language provider and compiler configuration settings for the specified language.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;system.codedom<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>For information about machine configuration files, see the Machine Configuration Files section in <bpt id="p1">[</bpt>Configuring Apps<ept id="p1">](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> method searches each provider configuration element for the specified language name.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> instance contains the configured language provider and compiler settings.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method checks whether at least one provider implementation supports a specific language.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can validate a language name using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>This prevents throwing a <ph id="ph1">&lt;xref:System.Configuration.ConfigurationException?displayProperty=fullName&gt;</ph> when you access the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> instance for an unsupported language name.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>If more than one provider implementation is configured for the input language name, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> returns the settings from the last matching provider configuration element.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>Language names are case-insensitive.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A language name.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CompilerInfo"&gt;&lt;/xref&gt;</ph> object populated with settings of the configured <ph id="ph2">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> does not have a configured provider on this computer.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;&lt;/xref&gt;</ph> for the specified data type.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>A derived class can override this method to provide specific types of type converters for specific data types.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The type of object to retrieve a type converter for.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.TypeConverter"&gt;&lt;/xref&gt;</ph> for the specified type, or <ph id="ph2">`null`</ph> if a <ph id="ph3">&lt;xref href="System.ComponentModel.TypeConverter"&gt;&lt;/xref&gt;</ph> for the specified type cannot be found.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Returns a language name associated with the specified file name extension, as configured in the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> compiler configuration section.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;system.codedom<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> method searches each provider configuration element for the specified file name extension.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> method checks whether at least one provider implementation supports a specific file name extension.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can validate a file name extension using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>This prevents <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> from throwing a <ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=fullName&gt;</ph> for an unsupported file name extension.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a provider implementation supports the input file name extension, and there are multiple supported languages configured for that provider, then <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> returns the first language name for that provider.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>If more than one provider implementation is configured for the input file name extension, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> returns the language name from the last matching provider configuration element.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>Language names and file name extensions are case-insensitive.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A file name extension.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A language name associated with the file name extension, as configured in the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> compiler configuration settings.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">extension</ph><ept id="p1">&lt;/code&gt;</ept> does not have a configured language provider on this computer.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">extension</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Gets the type indicated by the specified <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> that indicates the type to return.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>A text representation of the specified type, formatted for the language in which code is generated by this code generator.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>In Visual Basic, for example, passing in a <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> for the <ph id="ph2">&lt;xref href="System.Int32"&gt;&lt;/xref&gt;</ph> type will return "Integer".</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Tests whether a file name extension has an associated <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> implementation configured on the computer.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;system.codedom<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> method searches the provider configuration elements for the specified file name extension.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>File name extensions are case-insensitive.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>A file name extension.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a <ph id="ph2">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> implementation is configured for the specified file name extension; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">extension</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Tests whether a language has a <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> implementation configured on the computer.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">\&amp;</ph>lt;system.codedom<ph id="ph2">\&amp;</ph>gt; Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method searches the provider configuration elements for the specified language name.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>Language names are case-insensitive.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The language name.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a <ph id="ph2">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider"&gt;&lt;/xref&gt;</ph> implementation is configured for the specified language; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">language</ph><ept id="p1">&lt;/code&gt;</ept> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The caller does not have the required permission.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the specified value is a valid identifier for the current language.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method tests whether an identifier is valid.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A&gt;</ph> method is provider specific.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifiers that are valid for one provider might not be valid for other providers.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`value`</ph> contains characters outside of the ASCII character range, check the identifier for all the languages that might be used to compile the code.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The value to verify as a valid identifier.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> parameter is a valid identifier; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Gets a language features identifier.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.LanguageOptions"&gt;&lt;/xref&gt;</ph> that indicates special features of the language.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Compiles the code read from the specified text stream into a <ph id="ph1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.TextReader"&gt;&lt;/xref&gt;</ph> object that is used to read the code to be parsed.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph> that contains a representation of the parsed code.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Returns a value indicating whether the specified code generation support is provided.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called with a number of <ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary <ph id="ph2">`OR`</ph> operator (&amp;#124;).</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified code generation support is provided; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Neither this method nor the <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeDomProvider.CreateGenerator"&gt;&lt;/xref&gt;</ph> method is overridden in a derived class.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>