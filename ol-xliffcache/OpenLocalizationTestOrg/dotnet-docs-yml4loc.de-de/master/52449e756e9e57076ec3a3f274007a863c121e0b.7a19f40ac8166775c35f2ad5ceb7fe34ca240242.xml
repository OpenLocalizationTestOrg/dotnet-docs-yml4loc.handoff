{"nodes":[{"content":"Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback throws an exception if an input character cannot be converted to an output byte sequence. This class cannot be inherited.","nodes":[{"pos":[0,268],"content":"Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback throws an exception if an input character cannot be converted to an output byte sequence. This class cannot be inherited.","nodes":[{"content":"Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback throws an exception if an input character cannot be converted to an output byte sequence. This class cannot be inherited.","pos":[0,268],"nodes":[{"content":"Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence.","pos":[0,133]},{"content":"The fallback throws an exception if an input character cannot be converted to an output byte sequence.","pos":[134,236]},{"content":"This class cannot be inherited.","pos":[237,268]}]}]}],"pos":[734,1003],"yaml":true},{"content":"An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link. Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <xref:System.Text.Encoding> class. Specifically, the encoding type's `GetBytes` method encodes a character to a byte sequence, and the `GetChars` method decodes a byte sequence to a character.  \n  \n An encoding operation can fail if the input character cannot be represented by the encoding. For example, a <xref:System.Text.ASCIIEncoding> object cannot encode a character that yields a Unicode code point value that is outside the range U+0000 to U+007F.  \n  \n In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback. Your application can use the predefined .NET Framework encoder fallback, or it can create a custom encoder fallback derived from the <xref:System.Text.EncoderFallback> and <xref:System.Text.EncoderFallbackBuffer> classes.  \n  \n The .NET Framework provides two predefined classes that implement different fallback strategies for handling encoding conversion failures. The <xref:System.Text.EncoderReplacementFallback> class substitutes a string provided for any input character that cannot be converted. The substitute string is encoded in place of the invalid character, and then the encoding operation continues converting the remainder of the input. In contrast, the <xref:System.Text.EncoderExceptionFallback> class throws a <xref:System.Text.EncoderFallbackException> when an invalid character is encountered.","nodes":[{"pos":[0,479],"content":"An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link. Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <xref:System.Text.Encoding> class. Specifically, the encoding type's `GetBytes` method encodes a character to a byte sequence, and the `GetChars` method decodes a byte sequence to a character.","nodes":[{"content":"An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link.","pos":[0,176]},{"content":"Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <ph id=\"ph1\">&lt;xref:System.Text.Encoding&gt;</ph> class.","pos":[177,321],"source":" Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <xref:System.Text.Encoding> class."},{"content":"Specifically, the encoding type's <ph id=\"ph1\">`GetBytes`</ph> method encodes a character to a byte sequence, and the <ph id=\"ph2\">`GetChars`</ph> method decodes a byte sequence to a character.","pos":[322,479],"source":" Specifically, the encoding type's `GetBytes` method encodes a character to a byte sequence, and the `GetChars` method decodes a byte sequence to a character."}]},{"pos":[486,742],"content":"An encoding operation can fail if the input character cannot be represented by the encoding. For example, a <xref:System.Text.ASCIIEncoding> object cannot encode a character that yields a Unicode code point value that is outside the range U+0000 to U+007F.","nodes":[{"content":"An encoding operation can fail if the input character cannot be represented by the encoding. For example, a <xref:System.Text.ASCIIEncoding> object cannot encode a character that yields a Unicode code point value that is outside the range U+0000 to U+007F.","pos":[0,256],"nodes":[{"content":"An encoding operation can fail if the input character cannot be represented by the encoding.","pos":[0,92]},{"content":"For example, a <ph id=\"ph1\">&lt;xref:System.Text.ASCIIEncoding&gt;</ph> object cannot encode a character that yields a Unicode code point value that is outside the range U+0000 to U+007F.","pos":[93,256],"source":" For example, a <xref:System.Text.ASCIIEncoding> object cannot encode a character that yields a Unicode code point value that is outside the range U+0000 to U+007F."}]}]},{"pos":[749,1117],"content":"In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback. Your application can use the predefined .NET Framework encoder fallback, or it can create a custom encoder fallback derived from the <xref:System.Text.EncoderFallback> and <xref:System.Text.EncoderFallbackBuffer> classes.","nodes":[{"content":"In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback. Your application can use the predefined .NET Framework encoder fallback, or it can create a custom encoder fallback derived from the <xref:System.Text.EncoderFallback> and <xref:System.Text.EncoderFallbackBuffer> classes.","pos":[0,368],"nodes":[{"content":"In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback.","pos":[0,146]},{"content":"Your application can use the predefined .NET Framework encoder fallback, or it can create a custom encoder fallback derived from the <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallback&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> classes.","pos":[147,368],"source":" Your application can use the predefined .NET Framework encoder fallback, or it can create a custom encoder fallback derived from the <xref:System.Text.EncoderFallback> and <xref:System.Text.EncoderFallbackBuffer> classes."}]}]},{"pos":[1124,1709],"content":"The .NET Framework provides two predefined classes that implement different fallback strategies for handling encoding conversion failures. The <xref:System.Text.EncoderReplacementFallback> class substitutes a string provided for any input character that cannot be converted. The substitute string is encoded in place of the invalid character, and then the encoding operation continues converting the remainder of the input. In contrast, the <xref:System.Text.EncoderExceptionFallback> class throws a <xref:System.Text.EncoderFallbackException> when an invalid character is encountered.","nodes":[{"content":"The .NET Framework provides two predefined classes that implement different fallback strategies for handling encoding conversion failures. The <xref:System.Text.EncoderReplacementFallback> class substitutes a string provided for any input character that cannot be converted. The substitute string is encoded in place of the invalid character, and then the encoding operation continues converting the remainder of the input. In contrast, the <xref:System.Text.EncoderExceptionFallback> class throws a <xref:System.Text.EncoderFallbackException> when an invalid character is encountered.","pos":[0,585],"nodes":[{"content":"The .NET Framework provides two predefined classes that implement different fallback strategies for handling encoding conversion failures.","pos":[0,138]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.EncoderReplacementFallback&gt;</ph> class substitutes a string provided for any input character that cannot be converted.","pos":[139,274],"source":" The <xref:System.Text.EncoderReplacementFallback> class substitutes a string provided for any input character that cannot be converted."},{"content":"The substitute string is encoded in place of the invalid character, and then the encoding operation continues converting the remainder of the input.","pos":[275,423]},{"content":"In contrast, the <ph id=\"ph1\">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> class throws a <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> when an invalid character is encountered.","pos":[424,585],"source":" In contrast, the <xref:System.Text.EncoderExceptionFallback> class throws a <xref:System.Text.EncoderFallbackException> when an invalid character is encountered."}]}]}],"pos":[1014,2732],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.EncoderExceptionFallback\"></xref> class.","nodes":[{"pos":[0,98],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Text.EncoderExceptionFallback\"></xref> class."}],"pos":[5205,5304],"yaml":true},{"content":"Returns an encoder fallback buffer that throws an exception if it cannot convert a character sequence to a byte sequence.","nodes":[{"pos":[0,121],"content":"Returns an encoder fallback buffer that throws an exception if it cannot convert a character sequence to a byte sequence.","nodes":[{"content":"Returns an encoder fallback buffer that throws an exception if it cannot convert a character sequence to a byte sequence.","pos":[0,121]}]}],"pos":[6897,7019],"yaml":true},{"content":"An encoder fallback buffer is responsible for receiving and handling characters that an encoder cannot convert to a byte sequence. This method returns an instance of the <xref:System.Text.EncoderExceptionFallbackBuffer> class, which is a subclass of  the <xref:System.Text.EncoderFallbackBuffer> class. An <xref:System.Text.EncoderExceptionFallbackBuffer> object throws an <xref:System.Text.EncoderFallbackException> exception whenever characters are passed to its <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,559],"content":"An encoder fallback buffer is responsible for receiving and handling characters that an encoder cannot convert to a byte sequence. This method returns an instance of the <xref:System.Text.EncoderExceptionFallbackBuffer> class, which is a subclass of  the <xref:System.Text.EncoderFallbackBuffer> class. An <xref:System.Text.EncoderExceptionFallbackBuffer> object throws an <xref:System.Text.EncoderFallbackException> exception whenever characters are passed to its <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=fullName> method.","nodes":[{"content":"An encoder fallback buffer is responsible for receiving and handling characters that an encoder cannot convert to a byte sequence. This method returns an instance of the <xref:System.Text.EncoderExceptionFallbackBuffer> class, which is a subclass of  the <xref:System.Text.EncoderFallbackBuffer> class. An <xref:System.Text.EncoderExceptionFallbackBuffer> object throws an <xref:System.Text.EncoderFallbackException> exception whenever characters are passed to its <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=fullName> method.","pos":[0,559],"nodes":[{"content":"An encoder fallback buffer is responsible for receiving and handling characters that an encoder cannot convert to a byte sequence.","pos":[0,130]},{"content":"This method returns an instance of the <ph id=\"ph1\">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> class, which is a subclass of  the <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallbackBuffer&gt;</ph> class.","pos":[131,302],"source":" This method returns an instance of the <xref:System.Text.EncoderExceptionFallbackBuffer> class, which is a subclass of  the <xref:System.Text.EncoderFallbackBuffer> class."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Text.EncoderExceptionFallbackBuffer&gt;</ph> object throws an <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallbackException&gt;</ph> exception whenever characters are passed to its <ph id=\"ph3\">&lt;xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=fullName&gt;</ph> method.","pos":[303,559],"source":" An <xref:System.Text.EncoderExceptionFallbackBuffer> object throws an <xref:System.Text.EncoderFallbackException> exception whenever characters are passed to its <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=fullName> method."}]}]}],"pos":[7030,7590],"yaml":true,"extradata":"MT"},{"content":"An encoder fallback buffer that throws an exception when it cannot encode a character sequence.","nodes":[{"pos":[0,95],"content":"An encoder fallback buffer that throws an exception when it cannot encode a character sequence.","nodes":[{"content":"An encoder fallback buffer that throws an exception when it cannot encode a character sequence.","pos":[0,95]}]}],"pos":[7784,7880],"yaml":true},{"content":"Indicates whether the current <xref href=\"System.Text.EncoderExceptionFallback\"></xref> object and a specified object are equal.","nodes":[{"pos":[0,128],"content":"Indicates whether the current <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph> object and a specified object are equal.","source":"Indicates whether the current <xref href=\"System.Text.EncoderExceptionFallback\"></xref> object and a specified object are equal."}],"pos":[9389,9518],"yaml":true},{"content":"An object that derives from the <xref href=\"System.Text.EncoderExceptionFallback\"></xref> class.","nodes":[{"pos":[0,96],"content":"An object that derives from the <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph> class.","source":"An object that derives from the <xref href=\"System.Text.EncoderExceptionFallback\"></xref> class."}],"pos":[9662,9759],"yaml":true},{"content":"`true` if <code>value</code> is not `null` (`Nothing` in Visual Basic .NET) and is a <xref href=\"System.Text.EncoderExceptionFallback\"></xref> object; otherwise, `false`.","nodes":[{"pos":[0,170],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not <ph id=\"ph3\">`null`</ph> (<ph id=\"ph4\">`Nothing`</ph> in Visual Basic .NET) and is a <ph id=\"ph5\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph> object; otherwise, <ph id=\"ph6\">`false`</ph>.","source":"`true` if <code>value</code> is not `null` (`Nothing` in Visual Basic .NET) and is a <xref href=\"System.Text.EncoderExceptionFallback\"></xref> object; otherwise, `false`."}],"pos":[9817,9990],"yaml":true},{"content":"Retrieves the hash code for this instance.","nodes":[{"pos":[0,42],"content":"Retrieves the hash code for this instance.","nodes":[{"content":"Retrieves the hash code for this instance.","pos":[0,42]}]}],"pos":[11452,11495],"yaml":true},{"content":"Because the <xref:System.Text.EncoderExceptionFallback.GetHashCode%2A> method always returns the same value, the application should not use this value to distinguish one instance of the <xref:System.Text.EncoderExceptionFallback> class from another.","nodes":[{"pos":[0,249],"content":"Because the <xref:System.Text.EncoderExceptionFallback.GetHashCode%2A> method always returns the same value, the application should not use this value to distinguish one instance of the <xref:System.Text.EncoderExceptionFallback> class from another.","nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Text.EncoderExceptionFallback.GetHashCode%2A&gt;</ph> method always returns the same value, the application should not use this value to distinguish one instance of the <ph id=\"ph2\">&lt;xref:System.Text.EncoderExceptionFallback&gt;</ph> class from another.","pos":[0,249],"source":"Because the <xref:System.Text.EncoderExceptionFallback.GetHashCode%2A> method always returns the same value, the application should not use this value to distinguish one instance of the <xref:System.Text.EncoderExceptionFallback> class from another."}]}],"pos":[11506,11756],"yaml":true,"extradata":"MT"},{"content":"The return value is always the same arbitrary value, and has no special significance.","nodes":[{"pos":[0,85],"content":"The return value is always the same arbitrary value, and has no special significance.","nodes":[{"content":"The return value is always the same arbitrary value, and has no special significance.","pos":[0,85]}]}],"pos":[11890,11976],"yaml":true},{"content":"Gets the maximum number of characters this instance can return.","nodes":[{"pos":[0,63],"content":"Gets the maximum number of characters this instance can return.","nodes":[{"content":"Gets the maximum number of characters this instance can return.","pos":[0,63]}]}],"pos":[13445,13509],"yaml":true},{"content":"The return value is always zero.","nodes":[{"pos":[0,32],"content":"The return value is always zero.","nodes":[{"content":"The return value is always zero.","pos":[0,32]}]}],"pos":[13630,13663],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.EncoderExceptionFallback\n  commentId: T:System.Text.EncoderExceptionFallback\n  id: EncoderExceptionFallback\n  children:\n  - System.Text.EncoderExceptionFallback.#ctor\n  - System.Text.EncoderExceptionFallback.CreateFallbackBuffer\n  - System.Text.EncoderExceptionFallback.Equals(System.Object)\n  - System.Text.EncoderExceptionFallback.GetHashCode\n  - System.Text.EncoderExceptionFallback.MaxCharCount\n  langs:\n  - csharp\n  name: EncoderExceptionFallback\n  nameWithType: EncoderExceptionFallback\n  fullName: System.Text.EncoderExceptionFallback\n  type: Class\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Provides a failure-handling mechanism, called a fallback, for an input character that cannot be converted to an output byte sequence. The fallback throws an exception if an input character cannot be converted to an output byte sequence. This class cannot be inherited.\n  remarks: \"An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link. Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <xref:System.Text.Encoding> class. Specifically, the encoding type's `GetBytes` method encodes a character to a byte sequence, and the `GetChars` method decodes a byte sequence to a character.  \\n  \\n An encoding operation can fail if the input character cannot be represented by the encoding. For example, a <xref:System.Text.ASCIIEncoding> object cannot encode a character that yields a Unicode code point value that is outside the range U+0000 to U+007F.  \\n  \\n In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback. Your application can use the predefined .NET Framework encoder fallback, or it can create a custom encoder fallback derived from the <xref:System.Text.EncoderFallback> and <xref:System.Text.EncoderFallbackBuffer> classes.  \\n  \\n The .NET Framework provides two predefined classes that implement different fallback strategies for handling encoding conversion failures. The <xref:System.Text.EncoderReplacementFallback> class substitutes a string provided for any input character that cannot be converted. The substitute string is encoded in place of the invalid character, and then the encoding operation continues converting the remainder of the input. In contrast, the <xref:System.Text.EncoderExceptionFallback> class throws a <xref:System.Text.EncoderFallbackException> when an invalid character is encountered.\"\n  example:\n  - \"The following code example demonstrates the <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.EncoderFallbackException> classes.  \\n  \\n [!code-cpp[sys.txt.fallbackEncExc#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.txt.fallbackEncExc/cpp/fallEncExc.cpp#1)]\\n [!code-csharp[sys.txt.fallbackEncExc#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.fallbackEncExc/cs/fallEncExc.cs#1)]\\n [!code-vb[sys.txt.fallbackEncExc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.fallbackEncExc/vb/fallEncExc.vb#1)]\"\n  syntax:\n    content: 'public sealed class EncoderExceptionFallback : System.Text.EncoderFallback'\n  inheritance:\n  - System.Object\n  - System.Text.EncoderFallback\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Text.EncoderFallback.ExceptionFallback\n  - System.Text.EncoderFallback.ReplacementFallback\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderExceptionFallback.#ctor\n  commentId: M:System.Text.EncoderExceptionFallback.#ctor\n  id: '#ctor'\n  parent: System.Text.EncoderExceptionFallback\n  langs:\n  - csharp\n  name: EncoderExceptionFallback()\n  nameWithType: EncoderExceptionFallback.EncoderExceptionFallback()\n  fullName: EncoderExceptionFallback.EncoderExceptionFallback()\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.EncoderExceptionFallback\"></xref> class.\n  syntax:\n    content: public EncoderExceptionFallback ();\n    parameters: []\n  overload: System.Text.EncoderExceptionFallback.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderExceptionFallback.CreateFallbackBuffer\n  commentId: M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer\n  id: CreateFallbackBuffer\n  parent: System.Text.EncoderExceptionFallback\n  langs:\n  - csharp\n  name: CreateFallbackBuffer()\n  nameWithType: EncoderExceptionFallback.CreateFallbackBuffer()\n  fullName: EncoderExceptionFallback.CreateFallbackBuffer()\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Returns an encoder fallback buffer that throws an exception if it cannot convert a character sequence to a byte sequence.\n  remarks: An encoder fallback buffer is responsible for receiving and handling characters that an encoder cannot convert to a byte sequence. This method returns an instance of the <xref:System.Text.EncoderExceptionFallbackBuffer> class, which is a subclass of  the <xref:System.Text.EncoderFallbackBuffer> class. An <xref:System.Text.EncoderExceptionFallbackBuffer> object throws an <xref:System.Text.EncoderFallbackException> exception whenever characters are passed to its <xref:System.Text.EncoderExceptionFallbackBuffer.Fallback%2A?displayProperty=fullName> method.\n  syntax:\n    content: public override System.Text.EncoderFallbackBuffer CreateFallbackBuffer ();\n    parameters: []\n    return:\n      type: System.Text.EncoderFallbackBuffer\n      description: An encoder fallback buffer that throws an exception when it cannot encode a character sequence.\n  overload: System.Text.EncoderExceptionFallback.CreateFallbackBuffer*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderExceptionFallback.Equals(System.Object)\n  commentId: M:System.Text.EncoderExceptionFallback.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Text.EncoderExceptionFallback\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: EncoderExceptionFallback.Equals(Object)\n  fullName: EncoderExceptionFallback.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Indicates whether the current <xref href=\"System.Text.EncoderExceptionFallback\"></xref> object and a specified object are equal.\n  syntax:\n    content: public override bool Equals (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: An object that derives from the <xref href=\"System.Text.EncoderExceptionFallback\"></xref> class.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is not `null` (`Nothing` in Visual Basic .NET) and is a <xref href=\"System.Text.EncoderExceptionFallback\"></xref> object; otherwise, `false`.'\n  overload: System.Text.EncoderExceptionFallback.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderExceptionFallback.GetHashCode\n  commentId: M:System.Text.EncoderExceptionFallback.GetHashCode\n  id: GetHashCode\n  parent: System.Text.EncoderExceptionFallback\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: EncoderExceptionFallback.GetHashCode()\n  fullName: EncoderExceptionFallback.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Retrieves the hash code for this instance.\n  remarks: Because the <xref:System.Text.EncoderExceptionFallback.GetHashCode%2A> method always returns the same value, the application should not use this value to distinguish one instance of the <xref:System.Text.EncoderExceptionFallback> class from another.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The return value is always the same arbitrary value, and has no special significance.\n  overload: System.Text.EncoderExceptionFallback.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.EncoderExceptionFallback.MaxCharCount\n  commentId: P:System.Text.EncoderExceptionFallback.MaxCharCount\n  id: MaxCharCount\n  parent: System.Text.EncoderExceptionFallback\n  langs:\n  - csharp\n  name: MaxCharCount\n  nameWithType: EncoderExceptionFallback.MaxCharCount\n  fullName: EncoderExceptionFallback.MaxCharCount\n  type: Property\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Gets the maximum number of characters this instance can return.\n  syntax:\n    content: public override int MaxCharCount { get; }\n    return:\n      type: System.Int32\n      description: The return value is always zero.\n  overload: System.Text.EncoderExceptionFallback.MaxCharCount*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Text.EncoderFallback\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallback\n  nameWithType: EncoderFallback\n  fullName: System.Text.EncoderFallback\n- uid: System.Text.EncoderExceptionFallback.#ctor\n  parent: System.Text.EncoderExceptionFallback\n  isExternal: false\n  name: EncoderExceptionFallback()\n  nameWithType: EncoderExceptionFallback.EncoderExceptionFallback()\n  fullName: EncoderExceptionFallback.EncoderExceptionFallback()\n- uid: System.Text.EncoderExceptionFallback.CreateFallbackBuffer\n  parent: System.Text.EncoderExceptionFallback\n  isExternal: false\n  name: CreateFallbackBuffer()\n  nameWithType: EncoderExceptionFallback.CreateFallbackBuffer()\n  fullName: EncoderExceptionFallback.CreateFallbackBuffer()\n- uid: System.Text.EncoderFallbackBuffer\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallbackBuffer\n  nameWithType: EncoderFallbackBuffer\n  fullName: System.Text.EncoderFallbackBuffer\n- uid: System.Text.EncoderExceptionFallback.Equals(System.Object)\n  parent: System.Text.EncoderExceptionFallback\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: EncoderExceptionFallback.Equals(Object)\n  fullName: EncoderExceptionFallback.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Text.EncoderExceptionFallback.GetHashCode\n  parent: System.Text.EncoderExceptionFallback\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: EncoderExceptionFallback.GetHashCode()\n  fullName: EncoderExceptionFallback.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Text.EncoderExceptionFallback.MaxCharCount\n  parent: System.Text.EncoderExceptionFallback\n  isExternal: false\n  name: MaxCharCount\n  nameWithType: EncoderExceptionFallback.MaxCharCount\n  fullName: EncoderExceptionFallback.MaxCharCount\n- uid: System.Text.EncoderExceptionFallback.#ctor*\n  parent: System.Text.EncoderExceptionFallback\n  isExternal: false\n  name: EncoderExceptionFallback\n  nameWithType: EncoderExceptionFallback.EncoderExceptionFallback\n  fullName: EncoderExceptionFallback.EncoderExceptionFallback\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n- uid: System.Text.EncoderExceptionFallback.CreateFallbackBuffer*\n  parent: System.Text.EncoderExceptionFallback\n  isExternal: false\n  name: CreateFallbackBuffer\n  nameWithType: EncoderExceptionFallback.CreateFallbackBuffer\n  fullName: EncoderExceptionFallback.CreateFallbackBuffer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n- uid: System.Text.EncoderExceptionFallback.Equals*\n  parent: System.Text.EncoderExceptionFallback\n  isExternal: false\n  name: Equals\n  nameWithType: EncoderExceptionFallback.Equals\n  fullName: EncoderExceptionFallback.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n- uid: System.Text.EncoderExceptionFallback.GetHashCode*\n  parent: System.Text.EncoderExceptionFallback\n  isExternal: false\n  name: GetHashCode\n  nameWithType: EncoderExceptionFallback.GetHashCode\n  fullName: EncoderExceptionFallback.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n- uid: System.Text.EncoderExceptionFallback.MaxCharCount*\n  parent: System.Text.EncoderExceptionFallback\n  isExternal: false\n  name: MaxCharCount\n  nameWithType: EncoderExceptionFallback.MaxCharCount\n  fullName: EncoderExceptionFallback.MaxCharCount\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/EncoderExceptionFallback.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Text.EncoderFallback.ExceptionFallback\n  parent: System.Text.EncoderFallback\n  isExternal: false\n  name: ExceptionFallback\n  nameWithType: EncoderFallback.ExceptionFallback\n  fullName: EncoderFallback.ExceptionFallback\n- uid: System.Text.EncoderFallback.ReplacementFallback\n  parent: System.Text.EncoderFallback\n  isExternal: false\n  name: ReplacementFallback\n  nameWithType: EncoderFallback.ReplacementFallback\n  fullName: EncoderFallback.ReplacementFallback\n"}