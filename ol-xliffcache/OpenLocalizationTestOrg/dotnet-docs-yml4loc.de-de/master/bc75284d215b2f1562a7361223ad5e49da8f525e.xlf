<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc75284d215b2f1562a7361223ad5e49da8f525e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.IO.FileMode.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa666d2eb9df6f453ab13cc7e774535fcb51ae17</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">404c8bd42e4f94a4041b411b33553b9d5ad0a0a4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies how the operating system should open a file.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of creating a file and writing text to a file, see <bpt id="p1">[</bpt>How to: Write Text to a File<ept id="p1">](~/docs/standard/io/how-to-write-text-to-a-file.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of reading text from a file, see <bpt id="p1">[</bpt>How to: Read Text from a File<ept id="p1">](~/docs/standard/io/how-to-read-text-from-a-file.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example of reading from and writing to a binary file, see <bpt id="p1">[</bpt>How to: Read and Write to a Newly Created Data File<ept id="p1">](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">`FileMode`</ph> parameter is specified in many of the constructors for <ph id="ph2">&lt;xref:System.IO.FileStream&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFileStream&gt;</ph>, and in the <ph id="ph4">`Open`</ph> methods of <ph id="ph5">&lt;xref:System.IO.File&gt;</ph> and <ph id="ph6">&lt;xref:System.IO.FileInfo&gt;</ph> to control how a file is opened.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">`FileMode`</ph> parameters control whether a file is overwritten, created, opened, or some combination thereof.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">`Open`</ph> to open an existing file.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>To append to a file, use <ph id="ph1">`Append`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>To truncate a file or create a file if it doesn't exist, use <ph id="ph1">`Create`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Opens the file if it exists and seeks to the end of the file, or creates a new file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This requires <ph id="ph1">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess.Append"&gt;&lt;/xref&gt;</ph> permission.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileMode.Append`</ph> can be used only in conjunction with <ph id="ph2">`FileAccess.Write`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Trying to seek to a position before the end of the file throws an <ph id="ph1">&lt;xref href="System.IO.IOException"&gt;&lt;/xref&gt;</ph> exception, and any attempt to read fails and throws a <ph id="ph2">&lt;xref href="System.NotSupportedException"&gt;&lt;/xref&gt;</ph> exception.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Specifies that the operating system should create a new file.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the file already exists, it will be overwritten.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This requires <ph id="ph1">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess.Write"&gt;&lt;/xref&gt;</ph> permission.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`FileMode.Create`</ph> is equivalent to requesting that if the file does not exist, use <ph id="ph2">&lt;xref href="System.IO.FileMode.CreateNew"&gt;&lt;/xref&gt;</ph>; otherwise, use <ph id="ph3">&lt;xref href="System.IO.FileMode.Truncate"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the file already exists but is a hidden file, an <ph id="ph1">&lt;xref href="System.UnauthorizedAccessException"&gt;&lt;/xref&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Specifies that the operating system should create a new file.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This requires <ph id="ph1">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess.Write"&gt;&lt;/xref&gt;</ph> permission.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the file already exists, an <ph id="ph1">&lt;xref href="System.IO.IOException"&gt;&lt;/xref&gt;</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Specifies that the operating system should open an existing file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The ability to open the file is dependent on the value specified by the <ph id="ph1">&lt;xref href="System.IO.FileAccess"&gt;&lt;/xref&gt;</ph> enumeration.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.IO.FileNotFoundException"&gt;&lt;/xref&gt;</ph> exception is thrown if the file does not exist.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specifies that the operating system should open a file if it exists; otherwise, a new file should be created.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the file is opened with <ph id="ph1">`FileAccess.Read`</ph>, <ph id="ph2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess.Read"&gt;&lt;/xref&gt;</ph> permission is required.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the file access is <ph id="ph1">`FileAccess.Write`</ph>, <ph id="ph2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess.Write"&gt;&lt;/xref&gt;</ph> permission is required.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If the file is opened with <ph id="ph1">`FileAccess.ReadWrite`</ph>, both <ph id="ph2">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess.Read"&gt;&lt;/xref&gt;</ph> and <ph id="ph3">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess.Write"&gt;&lt;/xref&gt;</ph> permissions are required.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specifies that the operating system should open an existing file.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When the file is opened, it should be truncated so that its size is zero bytes.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>This requires <ph id="ph1">&lt;xref href="System.Security.Permissions.FileIOPermissionAccess.Write"&gt;&lt;/xref&gt;</ph> permission.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Attempts to read from a file opened with <ph id="ph1">`FileMode.Truncate`</ph> cause an <ph id="ph2">&lt;xref href="System.ArgumentException"&gt;&lt;/xref&gt;</ph> exception.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>