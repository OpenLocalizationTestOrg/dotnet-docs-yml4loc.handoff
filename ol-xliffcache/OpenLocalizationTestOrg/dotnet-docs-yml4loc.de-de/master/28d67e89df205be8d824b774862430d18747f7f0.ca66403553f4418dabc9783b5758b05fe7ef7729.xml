{"nodes":[{"content":"Allows security actions for <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.","nodes":[{"pos":[0,175],"content":"Allows security actions for <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.","nodes":[{"content":"Allows security actions for <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> to be applied to code using declarative security.","pos":[0,143],"source":"Allows security actions for <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> to be applied to code using declarative security."},{"content":"This class cannot be inherited.","pos":[144,175]}]}],"pos":[1371,1547],"yaml":true},{"content":"Files and directories are specified using absolute paths. When accessing files, a security check is performed when the file is created or opened. The security check is not done again unless the file is closed and reopened. Checking permissions when the file is first accessed minimizes the impact of the security check on application performance because opening a file happens only once, while reading and writing can happen multiple times.  \n  \n The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \n  \n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \n  \n> [!CAUTION]\n>  `Unrestricted` <xref:System.Security.Permissions.FileIOPermission> grants permission for all paths within a file system, including multiple pathnames that can be used to access a single given file. To <xref:System.Security.CodeAccessPermission.Deny%2A> access to a file, you must `Deny` all possible paths to the file. For example, if \\\\\\server\\share is mapped to the network drive X, to `Deny` access to \\\\\\server\\share\\file, you must `Deny` \\\\\\server\\share\\file, X:\\file and any other path that you can use to access the file.","nodes":[{"pos":[0,440],"content":"Files and directories are specified using absolute paths. When accessing files, a security check is performed when the file is created or opened. The security check is not done again unless the file is closed and reopened. Checking permissions when the file is first accessed minimizes the impact of the security check on application performance because opening a file happens only once, while reading and writing can happen multiple times.","nodes":[{"content":"Files and directories are specified using absolute paths. When accessing files, a security check is performed when the file is created or opened. The security check is not done again unless the file is closed and reopened. Checking permissions when the file is first accessed minimizes the impact of the security check on application performance because opening a file happens only once, while reading and writing can happen multiple times.","pos":[0,440],"nodes":[{"content":"Files and directories are specified using absolute paths.","pos":[0,57]},{"content":"When accessing files, a security check is performed when the file is created or opened.","pos":[58,145]},{"content":"The security check is not done again unless the file is closed and reopened.","pos":[146,222]},{"content":"Checking permissions when the file is first accessed minimizes the impact of the security check on application performance because opening a file happens only once, while reading and writing can happen multiple times.","pos":[223,440]}]}]},{"pos":[447,570],"content":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.","nodes":[{"content":"The scope of the declaration that is allowed depends on the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.SecurityAction&gt;</ph> that is used.","pos":[0,123],"source":"The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used."}]},{"pos":[577,852],"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","nodes":[{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.","pos":[0,275],"nodes":[{"content":"The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time.","pos":[0,150]},{"content":"Security attributes are used only for declarative security.","pos":[151,210]},{"content":"For imperative security, use the corresponding permission class.","pos":[211,275]}]}]},{"pos":[860,1402],"content":"[!CAUTION]\n `Unrestricted` <xref:System.Security.Permissions.FileIOPermission> grants permission for all paths within a file system, including multiple pathnames that can be used to access a single given file. To <xref:System.Security.CodeAccessPermission.Deny%2A> access to a file, you must `Deny` all possible paths to the file. For example, if \\\\\\server\\share is mapped to the network drive X, to `Deny` access to \\\\\\server\\share\\file, you must `Deny` \\\\\\server\\share\\file, X:\\file and any other path that you can use to access the file.","leadings":["","> "],"nodes":[{"content":" `Unrestricted` <xref:System.Security.Permissions.FileIOPermission> grants permission for all paths within a file system, including multiple pathnames that can be used to access a single given file. To <xref:System.Security.CodeAccessPermission.Deny%2A> access to a file, you must `Deny` all possible paths to the file. For example, if \\\\\\server\\share is mapped to the network drive X, to `Deny` access to \\\\\\server\\share\\file, you must `Deny` \\\\\\server\\share\\file, X:\\file and any other path that you can use to access the file.","pos":[11,540],"nodes":[{"content":"<ph id=\"ph1\"> `Unrestricted`</ph> <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> grants permission for all paths within a file system, including multiple pathnames that can be used to access a single given file.","pos":[0,198],"source":" `Unrestricted` <xref:System.Security.Permissions.FileIOPermission> grants permission for all paths within a file system, including multiple pathnames that can be used to access a single given file."},{"content":"To <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> access to a file, you must <ph id=\"ph2\">`Deny`</ph> all possible paths to the file.","pos":[199,319],"source":" To <xref:System.Security.CodeAccessPermission.Deny%2A> access to a file, you must `Deny` all possible paths to the file."},{"content":"For example, if <ph id=\"ph1\">\\\\</ph>\\server\\share is mapped to the network drive X, to <ph id=\"ph2\">`Deny`</ph> access to <ph id=\"ph3\">\\\\</ph>\\server\\share\\file, you must <ph id=\"ph4\">`Deny`</ph> <ph id=\"ph5\">\\\\</ph>\\server\\share\\file, X:\\file and any other path that you can use to access the file.","pos":[320,529],"source":" For example, if \\\\\\server\\share is mapped to the network drive X, to `Deny` access to \\\\\\server\\share\\file, you must `Deny` \\\\\\server\\share\\file, X:\\file and any other path that you can use to access the file."}]}]}],"pos":[1558,2985],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.","nodes":[{"pos":[0,198],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAttribute\"&gt;&lt;/xref&gt;</ph> class with the specified <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>."}],"pos":[10457,10656],"yaml":true},{"content":"One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values.","nodes":[{"pos":[0,82],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values."}],"pos":[11716,11799],"yaml":true},{"content":"The <code>action</code> parameter is not a valid <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.","nodes":[{"pos":[0,113],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.SecurityAction\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>action</code> parameter is not a valid <xref href=\"System.Security.Permissions.SecurityAction\"></xref>."}],"pos":[11980,12094],"yaml":true},{"content":"Gets or sets full access for the file or directory that is specified by the string value.","nodes":[{"pos":[0,89],"content":"Gets or sets full access for the file or directory that is specified by the string value.","nodes":[{"content":"Gets or sets full access for the file or directory that is specified by the string value.","pos":[0,89]}]}],"pos":[13261,13351],"yaml":true},{"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","nodes":[{"pos":[0,128],"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","nodes":[{"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","pos":[0,128],"nodes":[{"content":"This property sets access for a single file or directory.","pos":[0,57]},{"content":"Use additional attributes to specify additional files and directories.","pos":[58,128]}]}]}],"pos":[13362,13491],"yaml":true,"extradata":"MT"},{"content":"The absolute path of the file or directory for full access.","nodes":[{"pos":[0,59],"content":"The absolute path of the file or directory for full access.","nodes":[{"content":"The absolute path of the file or directory for full access.","pos":[0,59]}]}],"pos":[14479,14539],"yaml":true},{"content":"The get method is not supported for this property.","nodes":[{"pos":[0,50],"content":"The get method is not supported for this property.","nodes":[{"content":"The get method is not supported for this property.","pos":[0,50]}]}],"pos":[14726,14777],"yaml":true},{"content":"Gets or sets the permitted access to all files.","nodes":[{"pos":[0,47],"content":"Gets or sets the permitted access to all files.","nodes":[{"content":"Gets or sets the permitted access to all files.","pos":[0,47]}]}],"pos":[16023,16071],"yaml":true},{"content":"This property gets or sets the permitted access to all files on the local computer and network drives.  \n  \n An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be determined by using a bitwise `AND` operation.","nodes":[{"pos":[0,102],"content":"This property gets or sets the permitted access to all files on the local computer and network drives.","nodes":[{"content":"This property gets or sets the permitted access to all files on the local computer and network drives.","pos":[0,102]}]},{"pos":[109,240],"content":"An individual <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph> value can be determined by using a bitwise <ph id=\"ph2\">`AND`</ph> operation.","source":"An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be determined by using a bitwise `AND` operation."}],"pos":[16082,16327],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents the permissions for all files. The default is <xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"></xref>.","nodes":[{"pos":[0,251],"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents the permissions for all files. The default is <xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"></xref>.","nodes":[{"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> values that represents the permissions for all files.","pos":[0,154],"source":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents the permissions for all files."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"&gt;&lt;/xref&gt;</ph>.","pos":[155,251],"source":" The default is <xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"></xref>."}]}],"pos":[16525,16777],"yaml":true},{"content":"Gets or sets the permitted access to all local files.","nodes":[{"pos":[0,53],"content":"Gets or sets the permitted access to all local files.","nodes":[{"content":"Gets or sets the permitted access to all local files.","pos":[0,53]}]}],"pos":[18097,18151],"yaml":true},{"content":"Local files are files contained on the local computer. Any files that are not accessed through a network drive are local files.  \n  \n An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be determined by using a bitwise `AND` operation.","nodes":[{"pos":[0,127],"content":"Local files are files contained on the local computer. Any files that are not accessed through a network drive are local files.","nodes":[{"content":"Local files are files contained on the local computer. Any files that are not accessed through a network drive are local files.","pos":[0,127],"nodes":[{"content":"Local files are files contained on the local computer.","pos":[0,54]},{"content":"Any files that are not accessed through a network drive are local files.","pos":[55,127]}]}]},{"pos":[134,265],"content":"An individual <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph> value can be determined by using a bitwise <ph id=\"ph2\">`AND`</ph> operation.","source":"An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be determined by using a bitwise `AND` operation."}],"pos":[18162,18432],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents the permissions for all local files. The default is <xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"></xref>.","nodes":[{"pos":[0,257],"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents the permissions for all local files. The default is <xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"></xref>.","nodes":[{"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> values that represents the permissions for all local files.","pos":[0,160],"source":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents the permissions for all local files."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"&gt;&lt;/xref&gt;</ph>.","pos":[161,257],"source":" The default is <xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"></xref>."}]}],"pos":[18635,18893],"yaml":true},{"content":"Gets or sets append access for the file or directory that is specified by the string value.","nodes":[{"pos":[0,91],"content":"Gets or sets append access for the file or directory that is specified by the string value.","nodes":[{"content":"Gets or sets append access for the file or directory that is specified by the string value.","pos":[0,91]}]}],"pos":[20176,20268],"yaml":true},{"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","nodes":[{"pos":[0,128],"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","nodes":[{"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","pos":[0,128],"nodes":[{"content":"This property sets access for a single file or directory.","pos":[0,57]},{"content":"Use additional attributes to specify additional files and directories.","pos":[58,128]}]}]}],"pos":[20279,20408],"yaml":true,"extradata":"MT"},{"content":"The absolute path of the file or directory for append access.","nodes":[{"pos":[0,61],"content":"The absolute path of the file or directory for append access.","nodes":[{"content":"The absolute path of the file or directory for append access.","pos":[0,61]}]}],"pos":[21413,21475],"yaml":true},{"content":"Gets or sets the file or directory in which access control information can be changed.","nodes":[{"pos":[0,86],"content":"Gets or sets the file or directory in which access control information can be changed.","nodes":[{"content":"Gets or sets the file or directory in which access control information can be changed.","pos":[0,86]}]}],"pos":[22829,22916],"yaml":true},{"content":"This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.  \n  \n> [!IMPORTANT]\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change an ACL is an important permission and should be granted with caution.","nodes":[{"pos":[0,197],"content":"This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.","nodes":[{"content":"This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.","pos":[0,197],"nodes":[{"content":"This property gets or sets access for a single file or directory.","pos":[0,65]},{"content":"Use additional <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute&gt;</ph> attributes to specify additional files and directories.","pos":[66,197],"source":" Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories."}]}]},{"pos":[205,465],"content":"[!IMPORTANT]\n An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change an ACL is an important permission and should be granted with caution.","leadings":["","> "],"nodes":[{"content":" An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change an ACL is an important permission and should be granted with caution.","pos":[13,258],"nodes":[{"content":"An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.","pos":[1,152]},{"content":"The ability to change an ACL is an important permission and should be granted with caution.","pos":[154,245]}]}]}],"pos":[22927,23398],"yaml":true,"extradata":"MT"},{"content":"The absolute path of the file or directory in which access control information can be changed.","nodes":[{"pos":[0,94],"content":"The absolute path of the file or directory in which access control information can be changed.","nodes":[{"content":"The absolute path of the file or directory in which access control information can be changed.","pos":[0,94]}]}],"pos":[23526,23621],"yaml":true},{"content":"Creates and returns a new <xref href=\"System.Security.Permissions.FileIOPermission\"></xref>.","nodes":[{"pos":[0,92],"content":"Creates and returns a new <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and returns a new <xref href=\"System.Security.Permissions.FileIOPermission\"></xref>."}],"pos":[24974,25067],"yaml":true},{"content":"This method should be called only by the security system, never by application code.  \n  \n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","nodes":[{"pos":[0,84],"content":"This method should be called only by the security system, never by application code.","nodes":[{"content":"This method should be called only by the security system, never by application code.","pos":[0,84]}]},{"pos":[91,312],"content":"At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","nodes":[{"content":"At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[0,221],"nodes":[{"content":"At compile time, attributes convert security declarations to a serialized form in metadata.","pos":[0,91]},{"content":"Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.","pos":[92,221]}]}]}],"pos":[25078,25395],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> that corresponds to this attribute.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> that corresponds to this attribute.","source":"A <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> that corresponds to this attribute."}],"pos":[25573,25677],"yaml":true},{"content":"The path information for a file or directory for which access is to be secured contains invalid characters or wildcard specifiers.","nodes":[{"pos":[0,130],"content":"The path information for a file or directory for which access is to be secured contains invalid characters or wildcard specifiers.","nodes":[{"content":"The path information for a file or directory for which access is to be secured contains invalid characters or wildcard specifiers.","pos":[0,130]}]}],"pos":[25869,26000],"yaml":true},{"content":"Gets or sets the file or directory to which to grant path discovery.","nodes":[{"pos":[0,68],"content":"Gets or sets the file or directory to which to grant path discovery.","nodes":[{"content":"Gets or sets the file or directory to which to grant path discovery.","pos":[0,68]}]}],"pos":[27227,27296],"yaml":true},{"content":"Path discovery controls access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.  \n  \n> [!NOTE]\n>  For performance reasons, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> should be granted only to directories, not to files. For example, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> permission should be granted to paths such as C:\\test and C:\\test\\\\, not to files such as C:\\test\\example.txt.  \n  \n This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","nodes":[{"pos":[0,296],"content":"Path discovery controls access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.","nodes":[{"content":"Path discovery controls access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.","pos":[0,296],"nodes":[{"content":"Path discovery controls access to the information in the path itself.","pos":[0,69]},{"content":"This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path.","pos":[70,218]},{"content":"This value does not grant access to files or folders represented by the path.","pos":[219,296]}]}]},{"pos":[304,672],"content":"[!NOTE]\n For performance reasons, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> should be granted only to directories, not to files. For example, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> permission should be granted to paths such as C:\\test and C:\\test\\\\, not to files such as C:\\test\\example.txt.","leadings":["","> "],"nodes":[{"content":" For performance reasons, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> should be granted only to directories, not to files. For example, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> permission should be granted to paths such as C:\\test and C:\\test\\\\, not to files such as C:\\test\\example.txt.","pos":[8,366],"nodes":[{"content":"For performance reasons, <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A&gt;</ph> should be granted only to directories, not to files.","pos":[1,156],"source":" For performance reasons, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> should be granted only to directories, not to files."},{"content":"For example, <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A&gt;</ph> permission should be granted to paths such as C:\\test and C:\\test<ph id=\"ph2\">\\\\</ph>, not to files such as C:\\test\\example.txt.","pos":[157,358],"source":" For example, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> permission should be granted to paths such as C:\\test and C:\\test\\\\, not to files such as C:\\test\\example.txt."}]}]},{"pos":[679,807],"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","nodes":[{"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","pos":[0,128],"nodes":[{"content":"This property sets access for a single file or directory.","pos":[0,57]},{"content":"Use additional attributes to specify additional files and directories.","pos":[58,128]}]}]}],"pos":[27307,28128],"yaml":true,"extradata":"MT"},{"content":"The absolute path of the file or directory.","nodes":[{"pos":[0,43],"content":"The absolute path of the file or directory.","nodes":[{"content":"The absolute path of the file or directory.","pos":[0,43]}]}],"pos":[29154,29198],"yaml":true},{"content":"Gets or sets read access for the file or directory specified by the string value.","nodes":[{"pos":[0,81],"content":"Gets or sets read access for the file or directory specified by the string value.","nodes":[{"content":"Gets or sets read access for the file or directory specified by the string value.","pos":[0,81]}]}],"pos":[30469,30551],"yaml":true},{"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","nodes":[{"pos":[0,128],"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","nodes":[{"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","pos":[0,128],"nodes":[{"content":"This property sets access for a single file or directory.","pos":[0,57]},{"content":"Use additional attributes to specify additional files and directories.","pos":[58,128]}]}]}],"pos":[30562,30691],"yaml":true,"extradata":"MT"},{"content":"The absolute path of the file or directory for read access.","nodes":[{"pos":[0,59],"content":"The absolute path of the file or directory for read access.","nodes":[{"content":"The absolute path of the file or directory for read access.","pos":[0,59]}]}],"pos":[31685,31745],"yaml":true},{"content":"Gets or sets the file or directory in which access control information can be viewed.","nodes":[{"pos":[0,85],"content":"Gets or sets the file or directory in which access control information can be viewed.","nodes":[{"content":"Gets or sets the file or directory in which access control information can be viewed.","pos":[0,85]}]}],"pos":[33085,33171],"yaml":true},{"content":"This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.  \n  \n> [!IMPORTANT]\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to view an ACL is an important permission and should be granted with caution.","nodes":[{"pos":[0,197],"content":"This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.","nodes":[{"content":"This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.","pos":[0,197],"nodes":[{"content":"This property gets or sets access for a single file or directory.","pos":[0,65]},{"content":"Use additional <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute&gt;</ph> attributes to specify additional files and directories.","pos":[66,197],"source":" Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories."}]}]},{"pos":[205,463],"content":"[!IMPORTANT]\n An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to view an ACL is an important permission and should be granted with caution.","leadings":["","> "],"nodes":[{"content":" An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to view an ACL is an important permission and should be granted with caution.","pos":[13,256],"nodes":[{"content":"An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.","pos":[1,152]},{"content":"The ability to view an ACL is an important permission and should be granted with caution.","pos":[154,243]}]}]}],"pos":[33182,33651],"yaml":true,"extradata":"MT"},{"content":"The absolute path of the file or directory in which access control information can be viewed.","nodes":[{"pos":[0,93],"content":"The absolute path of the file or directory in which access control information can be viewed.","nodes":[{"content":"The absolute path of the file or directory in which access control information can be viewed.","pos":[0,93]}]}],"pos":[33777,33871],"yaml":true},{"content":"Gets or sets the file or directory in which file data can be viewed and modified.","nodes":[{"pos":[0,81],"content":"Gets or sets the file or directory in which file data can be viewed and modified.","nodes":[{"content":"Gets or sets the file or directory in which file data can be viewed and modified.","pos":[0,81]}]}],"pos":[35200,35282],"yaml":true},{"content":"This property sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A>, and <xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A> properties for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories. The access rights are for file data only; they do not include the access control properties <xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A> and <xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A>.  \n  \n> [!NOTE]\n>  The `get` accessor is provided for C# compiler compatibility. The C# compiler requires attribute properties to be read/write.","nodes":[{"pos":[0,755],"content":"This property sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A>, and <xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A> properties for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories. The access rights are for file data only; they do not include the access control properties <xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A> and <xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A>.","nodes":[{"content":"This property sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A>, and <xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A> properties for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories. The access rights are for file data only; they do not include the access control properties <xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A> and <xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A>.","pos":[0,755],"nodes":[{"content":"This property sets the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A&gt;</ph> properties for a single file or directory.","pos":[0,360],"source":"This property sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A>, and <xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A> properties for a single file or directory."},{"content":"Use additional <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute&gt;</ph> attributes to specify additional files and directories.","pos":[361,492],"source":" Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories."},{"content":"The access rights are for file data only; they do not include the access control properties <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A&gt;</ph>.","pos":[493,755],"source":" The access rights are for file data only; they do not include the access control properties <xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A> and <xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A>."}]}]},{"pos":[763,899],"content":"[!NOTE]\n The `get` accessor is provided for C# compiler compatibility. The C# compiler requires attribute properties to be read/write.","leadings":["","> "],"nodes":[{"content":" The `get` accessor is provided for C# compiler compatibility. The C# compiler requires attribute properties to be read/write.","pos":[8,134],"nodes":[{"content":"The <ph id=\"ph1\">`get`</ph> accessor is provided for C# compiler compatibility.","pos":[1,62],"source":" The `get` accessor is provided for C# compiler compatibility."},{"content":"The C# compiler requires attribute properties to be read/write.","pos":[63,126]}]}]}],"pos":[35293,36198],"yaml":true,"extradata":"MT"},{"content":"The absolute path of the file or directory in which file data can be viewed and modified.","nodes":[{"pos":[0,89],"content":"The absolute path of the file or directory in which file data can be viewed and modified.","nodes":[{"content":"The absolute path of the file or directory in which file data can be viewed and modified.","pos":[0,89]}]}],"pos":[36320,36410],"yaml":true},{"content":"The `get` accessor is called. The accessor is provided only for C# compiler compatibility.","nodes":[{"pos":[0,90],"content":"The `get` accessor is called. The accessor is provided only for C# compiler compatibility.","nodes":[{"content":"The <ph id=\"ph1\">`get`</ph> accessor is called.","pos":[0,29],"source":"The `get` accessor is called."},{"content":"The accessor is provided only for C# compiler compatibility.","pos":[30,90]}]}],"pos":[36607,36698],"yaml":true},{"content":"Gets or sets write access for the file or directory specified by the string value.","nodes":[{"pos":[0,82],"content":"Gets or sets write access for the file or directory specified by the string value.","nodes":[{"content":"Gets or sets write access for the file or directory specified by the string value.","pos":[0,82]}]}],"pos":[37877,37960],"yaml":true},{"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","nodes":[{"pos":[0,128],"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","nodes":[{"content":"This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.","pos":[0,128],"nodes":[{"content":"This property sets access for a single file or directory.","pos":[0,57]},{"content":"Use additional attributes to specify additional files and directories.","pos":[58,128]}]}]}],"pos":[37971,38100],"yaml":true,"extradata":"MT"},{"content":"The absolute path of the file or directory for write access.","nodes":[{"pos":[0,60],"content":"The absolute path of the file or directory for write access.","nodes":[{"content":"The absolute path of the file or directory for write access.","pos":[0,60]}]}],"pos":[39097,39158],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.FileIOPermissionAttribute\n  commentId: T:System.Security.Permissions.FileIOPermissionAttribute\n  id: FileIOPermissionAttribute\n  children:\n  - System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  - System.Security.Permissions.FileIOPermissionAttribute.All\n  - System.Security.Permissions.FileIOPermissionAttribute.AllFiles\n  - System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles\n  - System.Security.Permissions.FileIOPermissionAttribute.Append\n  - System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl\n  - System.Security.Permissions.FileIOPermissionAttribute.CreatePermission\n  - System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery\n  - System.Security.Permissions.FileIOPermissionAttribute.Read\n  - System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl\n  - System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify\n  - System.Security.Permissions.FileIOPermissionAttribute.Write\n  langs:\n  - csharp\n  name: FileIOPermissionAttribute\n  nameWithType: FileIOPermissionAttribute\n  fullName: System.Security.Permissions.FileIOPermissionAttribute\n  type: Class\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Allows security actions for <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> to be applied to code using declarative security. This class cannot be inherited.\n  remarks: \"Files and directories are specified using absolute paths. When accessing files, a security check is performed when the file is created or opened. The security check is not done again unless the file is closed and reopened. Checking permissions when the file is first accessed minimizes the impact of the security check on application performance because opening a file happens only once, while reading and writing can happen multiple times.  \\n  \\n The scope of the declaration that is allowed depends on the <xref:System.Security.Permissions.SecurityAction> that is used.  \\n  \\n The security information declared by a security attribute is stored in the metadata of the attribute target and is accessed by the system at run time. Security attributes are used only for declarative security. For imperative security, use the corresponding permission class.  \\n  \\n> [!CAUTION]\\n>  `Unrestricted` <xref:System.Security.Permissions.FileIOPermission> grants permission for all paths within a file system, including multiple pathnames that can be used to access a single given file. To <xref:System.Security.CodeAccessPermission.Deny%2A> access to a file, you must `Deny` all possible paths to the file. For example, if \\\\\\\\\\\\server\\\\share is mapped to the network drive X, to `Deny` access to \\\\\\\\\\\\server\\\\share\\\\file, you must `Deny` \\\\\\\\\\\\server\\\\share\\\\file, X:\\\\file and any other path that you can use to access the file.\"\n  example:\n  - \"The following code example demonstrates how to request <xref:System.Security.Permissions.FileIOPermission> by using the <xref:System.Security.Permissions.FileIOPermissionAttribute> class, indicating the only permission that is to be granted to the code.  \\n  \\n [!code-cpp[Classic FileIOPermissionAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermissionAttribute Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FileIOPermissionAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermissionAttribute Example/CS/source.cs#1)]\\n [!code-vb[Classic FileIOPermissionAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermissionAttribute Example/VB/source.vb#1)]  \\n  \\n The following example shows how to demand that the calling code has unrestricted <xref:System.Security.Permissions.FileIOPermission>. You typically make demands in managed libraries (DLLs) to help protect methods or classes from potentially harmful code.  \\n  \\n [!code-cpp[Classic FileIOPermissionAttribute Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermissionAttribute Example/CPP/source.cpp#2)]\\n [!code-csharp[Classic FileIOPermissionAttribute Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermissionAttribute Example/CS/source.cs#2)]\\n [!code-vb[Classic FileIOPermissionAttribute Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermissionAttribute Example/VB/source.vb#2)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class FileIOPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  - System.Security.Permissions.SecurityAttribute\n  - System.Security.Permissions.CodeAccessSecurityAttribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetHashCode\n  - System.Attribute.IsDefaultAttribute\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.Permissions.SecurityAttribute.Action\n  - System.Security.Permissions.SecurityAttribute.Unrestricted\n  attributes:\n  - type: System.AttributeUsageAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  commentId: M:System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  id: '#ctor(System.Security.Permissions.SecurityAction)'\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: FileIOPermissionAttribute(SecurityAction)\n  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)\n  fullName: FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermissionAttribute\"></xref> class with the specified <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.\n  remarks: ''\n  example:\n  - \"The following code example creates several instances of the <xref:System.Security.Permissions.FileIOPermissionAttribute> class to set varying levels of file I/O permissions.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CPP/fileiopermissionattribute.cpp#1)]\\n [!code-csharp[System.Security.Permissions.FileIOPermissionAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CS/fileiopermissionattribute.cs#1)]\\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/VB/fileiopermissionattribute.vb#1)]\"\n  syntax:\n    content: public FileIOPermissionAttribute (System.Security.Permissions.SecurityAction action);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: One of the <xref href=\"System.Security.Permissions.SecurityAction\"></xref> values.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>action</code> parameter is not a valid <xref href=\"System.Security.Permissions.SecurityAction\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.All\n  commentId: P:System.Security.Permissions.FileIOPermissionAttribute.All\n  id: All\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: All\n  nameWithType: FileIOPermissionAttribute.All\n  fullName: FileIOPermissionAttribute.All\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets full access for the file or directory that is specified by the string value.\n  remarks: This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.\n  example:\n  - \"The following code example sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.All%2A> property to grant full access to the specified directory.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CPP/fileiopermissionattribute.cpp#6)]\\n [!code-csharp[System.Security.Permissions.FileIOPermissionAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CS/fileiopermissionattribute.cs#6)]\\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/VB/fileiopermissionattribute.vb#6)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"use newer properties\")]\n\n      public string All { get; set; }\n    return:\n      type: System.String\n      description: The absolute path of the file or directory for full access.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.All*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The get method is not supported for this property.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles\n  commentId: P:System.Security.Permissions.FileIOPermissionAttribute.AllFiles\n  id: AllFiles\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: AllFiles\n  nameWithType: FileIOPermissionAttribute.AllFiles\n  fullName: FileIOPermissionAttribute.AllFiles\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets the permitted access to all files.\n  remarks: \"This property gets or sets the permitted access to all files on the local computer and network drives.  \\n  \\n An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be determined by using a bitwise `AND` operation.\"\n  syntax:\n    content: public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }\n    return:\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents the permissions for all files. The default is <xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"></xref>.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.AllFiles*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles\n  commentId: P:System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles\n  id: AllLocalFiles\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: AllLocalFiles\n  nameWithType: FileIOPermissionAttribute.AllLocalFiles\n  fullName: FileIOPermissionAttribute.AllLocalFiles\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets the permitted access to all local files.\n  remarks: \"Local files are files contained on the local computer. Any files that are not accessed through a network drive are local files.  \\n  \\n An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be determined by using a bitwise `AND` operation.\"\n  syntax:\n    content: public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }\n    return:\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents the permissions for all local files. The default is <xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"></xref>.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.Append\n  commentId: P:System.Security.Permissions.FileIOPermissionAttribute.Append\n  id: Append\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: Append\n  nameWithType: FileIOPermissionAttribute.Append\n  fullName: FileIOPermissionAttribute.Append\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets append access for the file or directory that is specified by the string value.\n  remarks: This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.\n  example:\n  - \"The following code example sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A> property to grant <xref:System.Security.Permissions.FileIOPermissionAccess.Append> access to files in the specified directory.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CPP/fileiopermissionattribute.cpp#4)]\\n [!code-csharp[System.Security.Permissions.FileIOPermissionAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CS/fileiopermissionattribute.cs#4)]\\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/VB/fileiopermissionattribute.vb#4)]\"\n  syntax:\n    content: public string Append { get; set; }\n    return:\n      type: System.String\n      description: The absolute path of the file or directory for append access.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.Append*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl\n  commentId: P:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl\n  id: ChangeAccessControl\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: ChangeAccessControl\n  nameWithType: FileIOPermissionAttribute.ChangeAccessControl\n  fullName: FileIOPermissionAttribute.ChangeAccessControl\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets the file or directory in which access control information can be changed.\n  remarks: \"This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.  \\n  \\n> [!IMPORTANT]\\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change an ACL is an important permission and should be granted with caution.\"\n  syntax:\n    content: public string ChangeAccessControl { get; set; }\n    return:\n      type: System.String\n      description: The absolute path of the file or directory in which access control information can be changed.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission\n  commentId: M:System.Security.Permissions.FileIOPermissionAttribute.CreatePermission\n  id: CreatePermission\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: CreatePermission()\n  nameWithType: FileIOPermissionAttribute.CreatePermission()\n  fullName: FileIOPermissionAttribute.CreatePermission()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates and returns a new <xref href=\"System.Security.Permissions.FileIOPermission\"></xref>.\n  remarks: \"This method should be called only by the security system, never by application code.  \\n  \\n At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission that this method returns that corresponds to this attribute.\"\n  syntax:\n    content: public override System.Security.IPermission CreatePermission ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> that corresponds to this attribute.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The path information for a file or directory for which access is to be secured contains invalid characters or wildcard specifiers.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery\n  commentId: P:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery\n  id: PathDiscovery\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: PathDiscovery\n  nameWithType: FileIOPermissionAttribute.PathDiscovery\n  fullName: FileIOPermissionAttribute.PathDiscovery\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets the file or directory to which to grant path discovery.\n  remarks: \"Path discovery controls access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure revealed in the path. This value does not grant access to files or folders represented by the path.  \\n  \\n> [!NOTE]\\n>  For performance reasons, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> should be granted only to directories, not to files. For example, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> permission should be granted to paths such as C:\\\\test and C:\\\\test\\\\\\\\, not to files such as C:\\\\test\\\\example.txt.  \\n  \\n This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.\"\n  example:\n  - \"The following code example sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A> property to grant <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> access to files in the specified directory.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CPP/fileiopermissionattribute.cpp#3)]\\n [!code-csharp[System.Security.Permissions.FileIOPermissionAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CS/fileiopermissionattribute.cs#3)]\\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/VB/fileiopermissionattribute.vb#3)]\"\n  syntax:\n    content: public string PathDiscovery { get; set; }\n    return:\n      type: System.String\n      description: The absolute path of the file or directory.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.Read\n  commentId: P:System.Security.Permissions.FileIOPermissionAttribute.Read\n  id: Read\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: Read\n  nameWithType: FileIOPermissionAttribute.Read\n  fullName: FileIOPermissionAttribute.Read\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets read access for the file or directory specified by the string value.\n  remarks: This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.\n  example:\n  - \"The following example sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A> property to grant <xref:System.Security.Permissions.FileIOPermissionAccess.Read> access to files in the specified directory.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CPP/fileiopermissionattribute.cpp#2)]\\n [!code-csharp[System.Security.Permissions.FileIOPermissionAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CS/fileiopermissionattribute.cs#2)]\\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/VB/fileiopermissionattribute.vb#2)]\"\n  syntax:\n    content: public string Read { get; set; }\n    return:\n      type: System.String\n      description: The absolute path of the file or directory for read access.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.Read*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl\n  commentId: P:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl\n  id: ViewAccessControl\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: ViewAccessControl\n  nameWithType: FileIOPermissionAttribute.ViewAccessControl\n  fullName: FileIOPermissionAttribute.ViewAccessControl\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets the file or directory in which access control information can be viewed.\n  remarks: \"This property gets or sets access for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories.  \\n  \\n> [!IMPORTANT]\\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to view an ACL is an important permission and should be granted with caution.\"\n  syntax:\n    content: public string ViewAccessControl { get; set; }\n    return:\n      type: System.String\n      description: The absolute path of the file or directory in which access control information can be viewed.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify\n  commentId: P:System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify\n  id: ViewAndModify\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: ViewAndModify\n  nameWithType: FileIOPermissionAttribute.ViewAndModify\n  fullName: FileIOPermissionAttribute.ViewAndModify\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets the file or directory in which file data can be viewed and modified.\n  remarks: \"This property sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.Append%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery%2A>, <xref:System.Security.Permissions.FileIOPermissionAttribute.Read%2A>, and <xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A> properties for a single file or directory. Use additional <xref:System.Security.Permissions.FileIOPermissionAttribute> attributes to specify additional files and directories. The access rights are for file data only; they do not include the access control properties <xref:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl%2A> and <xref:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl%2A>.  \\n  \\n> [!NOTE]\\n>  The `get` accessor is provided for C# compiler compatibility. The C# compiler requires attribute properties to be read/write.\"\n  syntax:\n    content: public string ViewAndModify { get; set; }\n    return:\n      type: System.String\n      description: The absolute path of the file or directory in which file data can be viewed and modified.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The `get` accessor is called. The accessor is provided only for C# compiler compatibility.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermissionAttribute.Write\n  commentId: P:System.Security.Permissions.FileIOPermissionAttribute.Write\n  id: Write\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  langs:\n  - csharp\n  name: Write\n  nameWithType: FileIOPermissionAttribute.Write\n  fullName: FileIOPermissionAttribute.Write\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets write access for the file or directory specified by the string value.\n  remarks: This property sets access for a single file or directory. Use additional attributes to specify additional files and directories.\n  example:\n  - \"The following example sets the <xref:System.Security.Permissions.FileIOPermissionAttribute.Write%2A> property to grant <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access to files in the specified directory.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermissionAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CPP/fileiopermissionattribute.cpp#5)]\\n [!code-csharp[System.Security.Permissions.FileIOPermissionAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/CS/fileiopermissionattribute.cs#5)]\\n [!code-vb[System.Security.Permissions.FileIOPermissionAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermissionAttribute/VB/fileiopermissionattribute.vb#5)]\"\n  syntax:\n    content: public string Write { get; set; }\n    return:\n      type: System.String\n      description: The absolute path of the file or directory for write access.\n  overload: System.Security.Permissions.FileIOPermissionAttribute.Write*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.Permissions.CodeAccessSecurityAttribute\n  parent: System.Security.Permissions\n  isExternal: false\n  name: CodeAccessSecurityAttribute\n  nameWithType: CodeAccessSecurityAttribute\n  fullName: System.Security.Permissions.CodeAccessSecurityAttribute\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: FileIOPermissionAttribute(SecurityAction)\n  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)\n  fullName: FileIOPermissionAttribute.FileIOPermissionAttribute(SecurityAction)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.Permissions.FileIOPermissionAttribute.All\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: All\n  nameWithType: FileIOPermissionAttribute.All\n  fullName: FileIOPermissionAttribute.All\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: AllFiles\n  nameWithType: FileIOPermissionAttribute.AllFiles\n  fullName: FileIOPermissionAttribute.AllFiles\n- uid: System.Security.Permissions.FileIOPermissionAccess\n  parent: System.Security.Permissions\n  isExternal: false\n  name: FileIOPermissionAccess\n  nameWithType: FileIOPermissionAccess\n  fullName: System.Security.Permissions.FileIOPermissionAccess\n- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: AllLocalFiles\n  nameWithType: FileIOPermissionAttribute.AllLocalFiles\n  fullName: FileIOPermissionAttribute.AllLocalFiles\n- uid: System.Security.Permissions.FileIOPermissionAttribute.Append\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: Append\n  nameWithType: FileIOPermissionAttribute.Append\n  fullName: FileIOPermissionAttribute.Append\n- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: ChangeAccessControl\n  nameWithType: FileIOPermissionAttribute.ChangeAccessControl\n  fullName: FileIOPermissionAttribute.ChangeAccessControl\n- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: CreatePermission()\n  nameWithType: FileIOPermissionAttribute.CreatePermission()\n  fullName: FileIOPermissionAttribute.CreatePermission()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: PathDiscovery\n  nameWithType: FileIOPermissionAttribute.PathDiscovery\n  fullName: FileIOPermissionAttribute.PathDiscovery\n- uid: System.Security.Permissions.FileIOPermissionAttribute.Read\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: Read\n  nameWithType: FileIOPermissionAttribute.Read\n  fullName: FileIOPermissionAttribute.Read\n- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: ViewAccessControl\n  nameWithType: FileIOPermissionAttribute.ViewAccessControl\n  fullName: FileIOPermissionAttribute.ViewAccessControl\n- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: ViewAndModify\n  nameWithType: FileIOPermissionAttribute.ViewAndModify\n  fullName: FileIOPermissionAttribute.ViewAndModify\n- uid: System.Security.Permissions.FileIOPermissionAttribute.Write\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: Write\n  nameWithType: FileIOPermissionAttribute.Write\n  fullName: FileIOPermissionAttribute.Write\n- uid: System.Security.Permissions.FileIOPermissionAttribute.#ctor*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: FileIOPermissionAttribute\n  nameWithType: FileIOPermissionAttribute.FileIOPermissionAttribute\n  fullName: FileIOPermissionAttribute.FileIOPermissionAttribute\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.All*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: All\n  nameWithType: FileIOPermissionAttribute.All\n  fullName: FileIOPermissionAttribute.All\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.AllFiles*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: AllFiles\n  nameWithType: FileIOPermissionAttribute.AllFiles\n  fullName: FileIOPermissionAttribute.AllFiles\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: AllLocalFiles\n  nameWithType: FileIOPermissionAttribute.AllLocalFiles\n  fullName: FileIOPermissionAttribute.AllLocalFiles\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.Append*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: Append\n  nameWithType: FileIOPermissionAttribute.Append\n  fullName: FileIOPermissionAttribute.Append\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: ChangeAccessControl\n  nameWithType: FileIOPermissionAttribute.ChangeAccessControl\n  fullName: FileIOPermissionAttribute.ChangeAccessControl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.CreatePermission*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: CreatePermission\n  nameWithType: FileIOPermissionAttribute.CreatePermission\n  fullName: FileIOPermissionAttribute.CreatePermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: PathDiscovery\n  nameWithType: FileIOPermissionAttribute.PathDiscovery\n  fullName: FileIOPermissionAttribute.PathDiscovery\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.Read*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: Read\n  nameWithType: FileIOPermissionAttribute.Read\n  fullName: FileIOPermissionAttribute.Read\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: ViewAccessControl\n  nameWithType: FileIOPermissionAttribute.ViewAccessControl\n  fullName: FileIOPermissionAttribute.ViewAccessControl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: ViewAndModify\n  nameWithType: FileIOPermissionAttribute.ViewAndModify\n  fullName: FileIOPermissionAttribute.ViewAndModify\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Security.Permissions.FileIOPermissionAttribute.Write*\n  parent: System.Security.Permissions.FileIOPermissionAttribute\n  isExternal: false\n  name: Write\n  nameWithType: FileIOPermissionAttribute.Write\n  fullName: FileIOPermissionAttribute.Write\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermissionAttribute.xml\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Attribute.Equals(Object)\n  fullName: Attribute.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Attribute.GetHashCode()\n  fullName: Attribute.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefaultAttribute\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: Attribute.IsDefaultAttribute()\n  fullName: Attribute.IsDefaultAttribute()\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Security.Permissions.SecurityAttribute.Action\n  parent: System.Security.Permissions.SecurityAttribute\n  isExternal: false\n  name: Action\n  nameWithType: SecurityAttribute.Action\n  fullName: SecurityAttribute.Action\n- uid: System.Security.Permissions.SecurityAttribute.Unrestricted\n  parent: System.Security.Permissions.SecurityAttribute\n  isExternal: false\n  name: Unrestricted\n  nameWithType: SecurityAttribute.Unrestricted\n  fullName: SecurityAttribute.Unrestricted\n"}