{"nodes":[{"content":"The <xref href=\"System.Messaging\"></xref> namespace provides classes that allow you to connect to, monitor, and administer message queues on the network and send, receive, or peek messages.","nodes":[{"pos":[0,189],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging\"&gt;&lt;/xref&gt;</ph> namespace provides classes that allow you to connect to, monitor, and administer message queues on the network and send, receive, or peek messages.","source":"The <xref href=\"System.Messaging\"></xref> namespace provides classes that allow you to connect to, monitor, and administer message queues on the network and send, receive, or peek messages."}],"pos":[2292,2482],"yaml":true},{"content":"Members of the <xref:System.Messaging.MessageQueue> class include the following methods for reading and writing messages to the queue:  \n  \n-   The <xref:System.Messaging.MessageQueue.Send%2A> method enables your application to write messages to the queue. Overloads of the method enable you to specify whether to send your message using a <xref:System.Messaging.Message> (which provides detailed control over the information you send) or any other managed object, including application-specific classes. The method also supports sending messages as part of a transaction.  \n  \n-   The <xref:System.Messaging.MessageQueue.Receive%2A>, <xref:System.Messaging.MessageQueue.ReceiveById%2A>, and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods provide functionality for reading messages from a queue. Like the <xref:System.Messaging.MessageQueue.Send%2A> method, these methods provide overloads that support transactional queue processing. These methods also provide overloads with time-out.  \n  \n     Out parameters that enable processing to continue if the queue is empty. Because these methods are examples of synchronous processing, they interrupt the current thread until a message is available, unless you specify a time-out.  \n  \n-   The <xref:System.Messaging.MessageQueue.Peek%2A> method is similar to <xref:System.Messaging.MessageQueue.Receive%2A>, but it does not cause a message to be removed from the queue when it is read. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not change the queue contents, there are no overloads to support transactional processing. However, because <xref:System.Messaging.MessageQueue.Peek%2A>, like <xref:System.Messaging.MessageQueue.Receive%2A>, reads messages synchronously from the queue, overloads of the method do support specifying a time-out in order to prevent the thread from waiting indefinitely.  \n  \n-   The <xref:System.Messaging.MessageQueue.BeginPeek%2A>, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>, <xref:System.Messaging.MessageQueue.BeginReceive%2A>, and <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> methods provide ways to asynchronously read messages from the queue. They do not interrupt the current thread while waiting for a message to arrive in the queue.  \n  \n The following methods of the <xref:System.Messaging.MessageQueue> class provide functionality for retrieving lists of queues by specified criteria and determining if specific queues exist:  \n  \n-   <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29> enables the retrieval of the private queues on a computer.  \n  \n-   <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provide ways to retrieve public queues by common criteria. An overload of <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> provides even finer detail for selecting queues based on a number of search criteria.  \n  \n Other methods of the <xref:System.Messaging.MessageQueue> class provide the following functionality:  \n  \n-   Creating and deleting Message Queueing queues.  \n  \n-   Using a message enumerator to step through the messages in a queue.  \n  \n-   Using a queue enumerator for iterating through the queues on the system.  \n  \n-   Setting ACL-based access rights.  \n  \n-   Working with the connection cache.  \n  \n The <xref:System.Messaging.Message> class provides detailed control over the information you send to a queue, and is the object used when receiving or peeking messages from a queue. Besides the message body, the properties of the <xref:System.Messaging.Message> class include acknowledgment settings, formatter selection, identification, authentication and encryption information, timestamps, indications about using tracing, server journaling, and dead-letter queues, and transaction data.  \n  \n The <xref:System.Messaging.MessageQueue> component is associated with the following three formatters, which enable you to serialize and deserialize messages sent and received from queues:  \n  \n-   The <xref:System.Messaging.XmlMessageFormatter> provides loosely coupled messaging, enabling independent versioning of serialized types on the client and server.  \n  \n-   The <xref:System.Messaging.ActiveXMessageFormatter> is compatible with the MSMQ COM control. It allows you to send types that can be received by the control and to receive types that were sent by the control.  \n  \n-   The <xref:System.Messaging.BinaryMessageFormatter> provides a faster alternative to the <xref:System.Messaging.XmlMessageFormatter>, but without the benefit of loosely coupled messaging.  \n  \n Other classes in the `Messaging` namespace support code-access and ACL-based security, filtering <xref:System.Messaging.Message> properties when reading messages from a queue, and using transactions when sending and receiving messages.","nodes":[{"pos":[0,134],"content":"Members of the <xref:System.Messaging.MessageQueue> class include the following methods for reading and writing messages to the queue:","nodes":[{"content":"Members of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class include the following methods for reading and writing messages to the queue:","pos":[0,134],"source":"Members of the <xref:System.Messaging.MessageQueue> class include the following methods for reading and writing messages to the queue:"}]},{"pos":[144,572],"content":"The <xref:System.Messaging.MessageQueue.Send%2A> method enables your application to write messages to the queue. Overloads of the method enable you to specify whether to send your message using a <xref:System.Messaging.Message> (which provides detailed control over the information you send) or any other managed object, including application-specific classes. The method also supports sending messages as part of a transaction.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Send%2A> method enables your application to write messages to the queue. Overloads of the method enable you to specify whether to send your message using a <xref:System.Messaging.Message> (which provides detailed control over the information you send) or any other managed object, including application-specific classes. The method also supports sending messages as part of a transaction.","pos":[0,428],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;</ph> method enables your application to write messages to the queue.","pos":[0,112],"source":"The <xref:System.Messaging.MessageQueue.Send%2A> method enables your application to write messages to the queue."},{"content":"Overloads of the method enable you to specify whether to send your message using a <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> (which provides detailed control over the information you send) or any other managed object, including application-specific classes.","pos":[113,360],"source":" Overloads of the method enable you to specify whether to send your message using a <xref:System.Messaging.Message> (which provides detailed control over the information you send) or any other managed object, including application-specific classes."},{"content":"The method also supports sending messages as part of a transaction.","pos":[361,428]}]}]},{"pos":[582,1010],"content":"The <xref:System.Messaging.MessageQueue.Receive%2A>, <xref:System.Messaging.MessageQueue.ReceiveById%2A>, and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods provide functionality for reading messages from a queue. Like the <xref:System.Messaging.MessageQueue.Send%2A> method, these methods provide overloads that support transactional queue processing. These methods also provide overloads with time-out.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Receive%2A>, <xref:System.Messaging.MessageQueue.ReceiveById%2A>, and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods provide functionality for reading messages from a queue. Like the <xref:System.Messaging.MessageQueue.Send%2A> method, these methods provide overloads that support transactional queue processing. These methods also provide overloads with time-out.","pos":[0,428],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.ReceiveById%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A&gt;</ph> methods provide functionality for reading messages from a queue.","pos":[0,237],"source":"The <xref:System.Messaging.MessageQueue.Receive%2A>, <xref:System.Messaging.MessageQueue.ReceiveById%2A>, and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods provide functionality for reading messages from a queue."},{"content":"Like the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Send%2A&gt;</ph> method, these methods provide overloads that support transactional queue processing.","pos":[238,376],"source":" Like the <xref:System.Messaging.MessageQueue.Send%2A> method, these methods provide overloads that support transactional queue processing."},{"content":"These methods also provide overloads with time-out.","pos":[377,428]}]}]},{"pos":[1021,1250],"content":"Out parameters that enable processing to continue if the queue is empty. Because these methods are examples of synchronous processing, they interrupt the current thread until a message is available, unless you specify a time-out.","nodes":[{"content":"Out parameters that enable processing to continue if the queue is empty. Because these methods are examples of synchronous processing, they interrupt the current thread until a message is available, unless you specify a time-out.","pos":[0,229],"nodes":[{"content":"Out parameters that enable processing to continue if the queue is empty.","pos":[0,72]},{"content":"Because these methods are examples of synchronous processing, they interrupt the current thread until a message is available, unless you specify a time-out.","pos":[73,229]}]}]},{"pos":[1260,1882],"content":"The <xref:System.Messaging.MessageQueue.Peek%2A> method is similar to <xref:System.Messaging.MessageQueue.Receive%2A>, but it does not cause a message to be removed from the queue when it is read. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not change the queue contents, there are no overloads to support transactional processing. However, because <xref:System.Messaging.MessageQueue.Peek%2A>, like <xref:System.Messaging.MessageQueue.Receive%2A>, reads messages synchronously from the queue, overloads of the method do support specifying a time-out in order to prevent the thread from waiting indefinitely.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.Peek%2A> method is similar to <xref:System.Messaging.MessageQueue.Receive%2A>, but it does not cause a message to be removed from the queue when it is read. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not change the queue contents, there are no overloads to support transactional processing. However, because <xref:System.Messaging.MessageQueue.Peek%2A>, like <xref:System.Messaging.MessageQueue.Receive%2A>, reads messages synchronously from the queue, overloads of the method do support specifying a time-out in order to prevent the thread from waiting indefinitely.","pos":[0,622],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> method is similar to <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, but it does not cause a message to be removed from the queue when it is read.","pos":[0,196],"source":"The <xref:System.Messaging.MessageQueue.Peek%2A> method is similar to <xref:System.Messaging.MessageQueue.Receive%2A>, but it does not cause a message to be removed from the queue when it is read."},{"content":"Because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph> does not change the queue contents, there are no overloads to support transactional processing.","pos":[197,345],"source":" Because <xref:System.Messaging.MessageQueue.Peek%2A> does not change the queue contents, there are no overloads to support transactional processing."},{"content":"However, because <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.Peek%2A&gt;</ph>, like <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph>, reads messages synchronously from the queue, overloads of the method do support specifying a time-out in order to prevent the thread from waiting indefinitely.","pos":[346,622],"source":" However, because <xref:System.Messaging.MessageQueue.Peek%2A>, like <xref:System.Messaging.MessageQueue.Receive%2A>, reads messages synchronously from the queue, overloads of the method do support specifying a time-out in order to prevent the thread from waiting indefinitely."}]}]},{"pos":[1892,2310],"content":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A>, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>, <xref:System.Messaging.MessageQueue.BeginReceive%2A>, and <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> methods provide ways to asynchronously read messages from the queue. They do not interrupt the current thread while waiting for a message to arrive in the queue.","nodes":[{"content":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A>, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>, <xref:System.Messaging.MessageQueue.BeginReceive%2A>, and <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> methods provide ways to asynchronously read messages from the queue. They do not interrupt the current thread while waiting for a message to arrive in the queue.","pos":[0,418],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.BeginPeek%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.BeginReceive%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29&gt;</ph> methods provide ways to asynchronously read messages from the queue.","pos":[0,325],"source":"The <xref:System.Messaging.MessageQueue.BeginPeek%2A>, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>, <xref:System.Messaging.MessageQueue.BeginReceive%2A>, and <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> methods provide ways to asynchronously read messages from the queue."},{"content":"They do not interrupt the current thread while waiting for a message to arrive in the queue.","pos":[326,418]}]}]},{"pos":[2317,2505],"content":"The following methods of the <xref:System.Messaging.MessageQueue> class provide functionality for retrieving lists of queues by specified criteria and determining if specific queues exist:","nodes":[{"content":"The following methods of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class provide functionality for retrieving lists of queues by specified criteria and determining if specific queues exist:","pos":[0,188],"source":"The following methods of the <xref:System.Messaging.MessageQueue> class provide functionality for retrieving lists of queues by specified criteria and determining if specific queues exist:"}]},{"pos":[2515,2655],"content":"<xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29> enables the retrieval of the private queues on a computer.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29&gt;</ph> enables the retrieval of the private queues on a computer.","pos":[0,140],"source":"<xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29> enables the retrieval of the private queues on a computer."}]},{"pos":[2665,3126],"content":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provide ways to retrieve public queues by common criteria. An overload of <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> provides even finer detail for selecting queues based on a number of search criteria.","nodes":[{"content":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provide ways to retrieve public queues by common criteria. An overload of <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> provides even finer detail for selecting queues based on a number of search criteria.","pos":[0,461],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29&gt;</ph> provide ways to retrieve public queues by common criteria.","pos":[0,304],"source":"<xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provide ways to retrieve public queues by common criteria."},{"content":"An overload of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue.GetPublicQueues%2A&gt;</ph> provides even finer detail for selecting queues based on a number of search criteria.","pos":[305,461],"source":" An overload of <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> provides even finer detail for selecting queues based on a number of search criteria."}]}]},{"pos":[3133,3233],"content":"Other methods of the <xref:System.Messaging.MessageQueue> class provide the following functionality:","nodes":[{"content":"Other methods of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class provide the following functionality:","pos":[0,100],"source":"Other methods of the <xref:System.Messaging.MessageQueue> class provide the following functionality:"}]},{"pos":[3243,3289],"content":"Creating and deleting Message Queueing queues.","nodes":[{"content":"Creating and deleting Message Queueing queues.","pos":[0,46]}]},{"pos":[3299,3366],"content":"Using a message enumerator to step through the messages in a queue.","nodes":[{"content":"Using a message enumerator to step through the messages in a queue.","pos":[0,67]}]},{"pos":[3376,3448],"content":"Using a queue enumerator for iterating through the queues on the system.","nodes":[{"content":"Using a queue enumerator for iterating through the queues on the system.","pos":[0,72]}]},{"pos":[3458,3490],"content":"Setting ACL-based access rights.","nodes":[{"content":"Setting ACL-based access rights.","pos":[0,32]}]},{"pos":[3500,3534],"content":"Working with the connection cache.","nodes":[{"content":"Working with the connection cache.","pos":[0,34]}]},{"pos":[3541,4031],"content":"The <xref:System.Messaging.Message> class provides detailed control over the information you send to a queue, and is the object used when receiving or peeking messages from a queue. Besides the message body, the properties of the <xref:System.Messaging.Message> class include acknowledgment settings, formatter selection, identification, authentication and encryption information, timestamps, indications about using tracing, server journaling, and dead-letter queues, and transaction data.","nodes":[{"content":"The <xref:System.Messaging.Message> class provides detailed control over the information you send to a queue, and is the object used when receiving or peeking messages from a queue. Besides the message body, the properties of the <xref:System.Messaging.Message> class include acknowledgment settings, formatter selection, identification, authentication and encryption information, timestamps, indications about using tracing, server journaling, and dead-letter queues, and transaction data.","pos":[0,490],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> class provides detailed control over the information you send to a queue, and is the object used when receiving or peeking messages from a queue.","pos":[0,181],"source":"The <xref:System.Messaging.Message> class provides detailed control over the information you send to a queue, and is the object used when receiving or peeking messages from a queue."},{"content":"Besides the message body, the properties of the <ph id=\"ph1\">&lt;xref:System.Messaging.Message&gt;</ph> class include acknowledgment settings, formatter selection, identification, authentication and encryption information, timestamps, indications about using tracing, server journaling, and dead-letter queues, and transaction data.","pos":[182,490],"source":" Besides the message body, the properties of the <xref:System.Messaging.Message> class include acknowledgment settings, formatter selection, identification, authentication and encryption information, timestamps, indications about using tracing, server journaling, and dead-letter queues, and transaction data."}]}]},{"pos":[4038,4225],"content":"The <xref:System.Messaging.MessageQueue> component is associated with the following three formatters, which enable you to serialize and deserialize messages sent and received from queues:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> component is associated with the following three formatters, which enable you to serialize and deserialize messages sent and received from queues:","pos":[0,187],"source":"The <xref:System.Messaging.MessageQueue> component is associated with the following three formatters, which enable you to serialize and deserialize messages sent and received from queues:"}]},{"pos":[4235,4396],"content":"The <xref:System.Messaging.XmlMessageFormatter> provides loosely coupled messaging, enabling independent versioning of serialized types on the client and server.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph> provides loosely coupled messaging, enabling independent versioning of serialized types on the client and server.","pos":[0,161],"source":"The <xref:System.Messaging.XmlMessageFormatter> provides loosely coupled messaging, enabling independent versioning of serialized types on the client and server."}]},{"pos":[4406,4614],"content":"The <xref:System.Messaging.ActiveXMessageFormatter> is compatible with the MSMQ COM control. It allows you to send types that can be received by the control and to receive types that were sent by the control.","nodes":[{"content":"The <xref:System.Messaging.ActiveXMessageFormatter> is compatible with the MSMQ COM control. It allows you to send types that can be received by the control and to receive types that were sent by the control.","pos":[0,208],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.ActiveXMessageFormatter&gt;</ph> is compatible with the MSMQ COM control.","pos":[0,92],"source":"The <xref:System.Messaging.ActiveXMessageFormatter> is compatible with the MSMQ COM control."},{"content":"It allows you to send types that can be received by the control and to receive types that were sent by the control.","pos":[93,208]}]}]},{"pos":[4624,4810],"content":"The <xref:System.Messaging.BinaryMessageFormatter> provides a faster alternative to the <xref:System.Messaging.XmlMessageFormatter>, but without the benefit of loosely coupled messaging.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.BinaryMessageFormatter&gt;</ph> provides a faster alternative to the <ph id=\"ph2\">&lt;xref:System.Messaging.XmlMessageFormatter&gt;</ph>, but without the benefit of loosely coupled messaging.","pos":[0,186],"source":"The <xref:System.Messaging.BinaryMessageFormatter> provides a faster alternative to the <xref:System.Messaging.XmlMessageFormatter>, but without the benefit of loosely coupled messaging."}]},{"pos":[4817,5052],"content":"Other classes in the <ph id=\"ph1\">`Messaging`</ph> namespace support code-access and ACL-based security, filtering <ph id=\"ph2\">&lt;xref:System.Messaging.Message&gt;</ph> properties when reading messages from a queue, and using transactions when sending and receiving messages.","source":"Other classes in the `Messaging` namespace support code-access and ACL-based security, filtering <xref:System.Messaging.Message> properties when reading messages from a queue, and using transactions when sending and receiving messages."}],"pos":[2493,7588],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging\n  id: System.Messaging\n  children:\n  - System.Messaging.AccessControlEntry\n  - System.Messaging.AccessControlEntryType\n  - System.Messaging.AccessControlList\n  - System.Messaging.AcknowledgeTypes\n  - System.Messaging.Acknowledgment\n  - System.Messaging.ActiveXMessageFormatter\n  - System.Messaging.BinaryMessageFormatter\n  - System.Messaging.CryptographicProviderType\n  - System.Messaging.Cursor\n  - System.Messaging.DefaultPropertiesToSend\n  - System.Messaging.EncryptionAlgorithm\n  - System.Messaging.EncryptionRequired\n  - System.Messaging.GenericAccessRights\n  - System.Messaging.HashAlgorithm\n  - System.Messaging.IMessageFormatter\n  - System.Messaging.Message\n  - System.Messaging.MessageEnumerator\n  - System.Messaging.MessageLookupAction\n  - System.Messaging.MessagePriority\n  - System.Messaging.MessagePropertyFilter\n  - System.Messaging.MessageQueue\n  - System.Messaging.MessageQueueAccessControlEntry\n  - System.Messaging.MessageQueueAccessRights\n  - System.Messaging.MessageQueueCriteria\n  - System.Messaging.MessageQueueEnumerator\n  - System.Messaging.MessageQueueErrorCode\n  - System.Messaging.MessageQueueException\n  - System.Messaging.MessageQueueInstaller\n  - System.Messaging.MessageQueuePermission\n  - System.Messaging.MessageQueuePermissionAccess\n  - System.Messaging.MessageQueuePermissionAttribute\n  - System.Messaging.MessageQueuePermissionEntry\n  - System.Messaging.MessageQueuePermissionEntryCollection\n  - System.Messaging.MessageQueueTransaction\n  - System.Messaging.MessageQueueTransactionStatus\n  - System.Messaging.MessageQueueTransactionType\n  - System.Messaging.MessageType\n  - System.Messaging.MessagingDescriptionAttribute\n  - System.Messaging.PeekAction\n  - System.Messaging.PeekCompletedEventArgs\n  - System.Messaging.PeekCompletedEventHandler\n  - System.Messaging.QueueAccessMode\n  - System.Messaging.ReceiveCompletedEventArgs\n  - System.Messaging.ReceiveCompletedEventHandler\n  - System.Messaging.SecurityContext\n  - System.Messaging.StandardAccessRights\n  - System.Messaging.Trustee\n  - System.Messaging.TrusteeType\n  - System.Messaging.XmlMessageFormatter\n  langs:\n  - csharp\n  name: System.Messaging\n  nameWithType: System.Messaging\n  fullName: System.Messaging\n  type: Namespace\n  summary: The <xref href=\"System.Messaging\"></xref> namespace provides classes that allow you to connect to, monitor, and administer message queues on the network and send, receive, or peek messages.\n  remarks: \"Members of the <xref:System.Messaging.MessageQueue> class include the following methods for reading and writing messages to the queue:  \\n  \\n-   The <xref:System.Messaging.MessageQueue.Send%2A> method enables your application to write messages to the queue. Overloads of the method enable you to specify whether to send your message using a <xref:System.Messaging.Message> (which provides detailed control over the information you send) or any other managed object, including application-specific classes. The method also supports sending messages as part of a transaction.  \\n  \\n-   The <xref:System.Messaging.MessageQueue.Receive%2A>, <xref:System.Messaging.MessageQueue.ReceiveById%2A>, and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods provide functionality for reading messages from a queue. Like the <xref:System.Messaging.MessageQueue.Send%2A> method, these methods provide overloads that support transactional queue processing. These methods also provide overloads with time-out.  \\n  \\n     Out parameters that enable processing to continue if the queue is empty. Because these methods are examples of synchronous processing, they interrupt the current thread until a message is available, unless you specify a time-out.  \\n  \\n-   The <xref:System.Messaging.MessageQueue.Peek%2A> method is similar to <xref:System.Messaging.MessageQueue.Receive%2A>, but it does not cause a message to be removed from the queue when it is read. Because <xref:System.Messaging.MessageQueue.Peek%2A> does not change the queue contents, there are no overloads to support transactional processing. However, because <xref:System.Messaging.MessageQueue.Peek%2A>, like <xref:System.Messaging.MessageQueue.Receive%2A>, reads messages synchronously from the queue, overloads of the method do support specifying a time-out in order to prevent the thread from waiting indefinitely.  \\n  \\n-   The <xref:System.Messaging.MessageQueue.BeginPeek%2A>, <xref:System.Messaging.MessageQueue.EndPeek%28System.IAsyncResult%29>, <xref:System.Messaging.MessageQueue.BeginReceive%2A>, and <xref:System.Messaging.MessageQueue.EndReceive%28System.IAsyncResult%29> methods provide ways to asynchronously read messages from the queue. They do not interrupt the current thread while waiting for a message to arrive in the queue.  \\n  \\n The following methods of the <xref:System.Messaging.MessageQueue> class provide functionality for retrieving lists of queues by specified criteria and determining if specific queues exist:  \\n  \\n-   <xref:System.Messaging.MessageQueue.GetPrivateQueuesByMachine%28System.String%29> enables the retrieval of the private queues on a computer.  \\n  \\n-   <xref:System.Messaging.MessageQueue.GetPublicQueuesByCategory%28System.Guid%29>, <xref:System.Messaging.MessageQueue.GetPublicQueuesByLabel%28System.String%29>, and <xref:System.Messaging.MessageQueue.GetPublicQueuesByMachine%28System.String%29> provide ways to retrieve public queues by common criteria. An overload of <xref:System.Messaging.MessageQueue.GetPublicQueues%2A> provides even finer detail for selecting queues based on a number of search criteria.  \\n  \\n Other methods of the <xref:System.Messaging.MessageQueue> class provide the following functionality:  \\n  \\n-   Creating and deleting Message Queueing queues.  \\n  \\n-   Using a message enumerator to step through the messages in a queue.  \\n  \\n-   Using a queue enumerator for iterating through the queues on the system.  \\n  \\n-   Setting ACL-based access rights.  \\n  \\n-   Working with the connection cache.  \\n  \\n The <xref:System.Messaging.Message> class provides detailed control over the information you send to a queue, and is the object used when receiving or peeking messages from a queue. Besides the message body, the properties of the <xref:System.Messaging.Message> class include acknowledgment settings, formatter selection, identification, authentication and encryption information, timestamps, indications about using tracing, server journaling, and dead-letter queues, and transaction data.  \\n  \\n The <xref:System.Messaging.MessageQueue> component is associated with the following three formatters, which enable you to serialize and deserialize messages sent and received from queues:  \\n  \\n-   The <xref:System.Messaging.XmlMessageFormatter> provides loosely coupled messaging, enabling independent versioning of serialized types on the client and server.  \\n  \\n-   The <xref:System.Messaging.ActiveXMessageFormatter> is compatible with the MSMQ COM control. It allows you to send types that can be received by the control and to receive types that were sent by the control.  \\n  \\n-   The <xref:System.Messaging.BinaryMessageFormatter> provides a faster alternative to the <xref:System.Messaging.XmlMessageFormatter>, but without the benefit of loosely coupled messaging.  \\n  \\n Other classes in the `Messaging` namespace support code-access and ACL-based security, filtering <xref:System.Messaging.Message> properties when reading messages from a queue, and using transactions when sending and receiving messages.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/ns-System.Messaging.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\nreferences:\n- uid: System.Messaging.AccessControlEntry\n  parent: System.Messaging\n  isExternal: false\n  name: AccessControlEntry\n  nameWithType: AccessControlEntry\n  fullName: System.Messaging.AccessControlEntry\n- uid: System.Messaging.AccessControlEntryType\n  parent: System.Messaging\n  isExternal: false\n  name: AccessControlEntryType\n  nameWithType: AccessControlEntryType\n  fullName: System.Messaging.AccessControlEntryType\n- uid: System.Messaging.AccessControlList\n  parent: System.Messaging\n  isExternal: false\n  name: AccessControlList\n  nameWithType: AccessControlList\n  fullName: System.Messaging.AccessControlList\n- uid: System.Messaging.AcknowledgeTypes\n  parent: System.Messaging\n  isExternal: false\n  name: AcknowledgeTypes\n  nameWithType: AcknowledgeTypes\n  fullName: System.Messaging.AcknowledgeTypes\n- uid: System.Messaging.Acknowledgment\n  parent: System.Messaging\n  isExternal: false\n  name: Acknowledgment\n  nameWithType: Acknowledgment\n  fullName: System.Messaging.Acknowledgment\n- uid: System.Messaging.ActiveXMessageFormatter\n  parent: System.Messaging\n  isExternal: false\n  name: ActiveXMessageFormatter\n  nameWithType: ActiveXMessageFormatter\n  fullName: System.Messaging.ActiveXMessageFormatter\n- uid: System.Messaging.BinaryMessageFormatter\n  parent: System.Messaging\n  isExternal: false\n  name: BinaryMessageFormatter\n  nameWithType: BinaryMessageFormatter\n  fullName: System.Messaging.BinaryMessageFormatter\n- uid: System.Messaging.CryptographicProviderType\n  parent: System.Messaging\n  isExternal: false\n  name: CryptographicProviderType\n  nameWithType: CryptographicProviderType\n  fullName: System.Messaging.CryptographicProviderType\n- uid: System.Messaging.Cursor\n  parent: System.Messaging\n  isExternal: false\n  name: Cursor\n  nameWithType: Cursor\n  fullName: System.Messaging.Cursor\n- uid: System.Messaging.DefaultPropertiesToSend\n  parent: System.Messaging\n  isExternal: false\n  name: DefaultPropertiesToSend\n  nameWithType: DefaultPropertiesToSend\n  fullName: System.Messaging.DefaultPropertiesToSend\n- uid: System.Messaging.EncryptionAlgorithm\n  parent: System.Messaging\n  isExternal: false\n  name: EncryptionAlgorithm\n  nameWithType: EncryptionAlgorithm\n  fullName: System.Messaging.EncryptionAlgorithm\n- uid: System.Messaging.EncryptionRequired\n  parent: System.Messaging\n  isExternal: false\n  name: EncryptionRequired\n  nameWithType: EncryptionRequired\n  fullName: System.Messaging.EncryptionRequired\n- uid: System.Messaging.GenericAccessRights\n  parent: System.Messaging\n  isExternal: false\n  name: GenericAccessRights\n  nameWithType: GenericAccessRights\n  fullName: System.Messaging.GenericAccessRights\n- uid: System.Messaging.HashAlgorithm\n  parent: System.Messaging\n  isExternal: false\n  name: HashAlgorithm\n  nameWithType: HashAlgorithm\n  fullName: System.Messaging.HashAlgorithm\n- uid: System.Messaging.IMessageFormatter\n  parent: System.Messaging\n  isExternal: false\n  name: IMessageFormatter\n  nameWithType: IMessageFormatter\n  fullName: System.Messaging.IMessageFormatter\n- uid: System.Messaging.Message\n  parent: System.Messaging\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.Messaging.Message\n- uid: System.Messaging.MessageEnumerator\n  parent: System.Messaging\n  isExternal: false\n  name: MessageEnumerator\n  nameWithType: MessageEnumerator\n  fullName: System.Messaging.MessageEnumerator\n- uid: System.Messaging.MessageLookupAction\n  parent: System.Messaging\n  isExternal: false\n  name: MessageLookupAction\n  nameWithType: MessageLookupAction\n  fullName: System.Messaging.MessageLookupAction\n- uid: System.Messaging.MessagePriority\n  parent: System.Messaging\n  isExternal: false\n  name: MessagePriority\n  nameWithType: MessagePriority\n  fullName: System.Messaging.MessagePriority\n- uid: System.Messaging.MessagePropertyFilter\n  parent: System.Messaging\n  isExternal: false\n  name: MessagePropertyFilter\n  nameWithType: MessagePropertyFilter\n  fullName: System.Messaging.MessagePropertyFilter\n- uid: System.Messaging.MessageQueue\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueue\n  nameWithType: MessageQueue\n  fullName: System.Messaging.MessageQueue\n- uid: System.Messaging.MessageQueueAccessControlEntry\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueAccessControlEntry\n  nameWithType: MessageQueueAccessControlEntry\n  fullName: System.Messaging.MessageQueueAccessControlEntry\n- uid: System.Messaging.MessageQueueAccessRights\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueAccessRights\n  nameWithType: MessageQueueAccessRights\n  fullName: System.Messaging.MessageQueueAccessRights\n- uid: System.Messaging.MessageQueueCriteria\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueCriteria\n  nameWithType: MessageQueueCriteria\n  fullName: System.Messaging.MessageQueueCriteria\n- uid: System.Messaging.MessageQueueEnumerator\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueEnumerator\n  nameWithType: MessageQueueEnumerator\n  fullName: System.Messaging.MessageQueueEnumerator\n- uid: System.Messaging.MessageQueueErrorCode\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueErrorCode\n  nameWithType: MessageQueueErrorCode\n  fullName: System.Messaging.MessageQueueErrorCode\n- uid: System.Messaging.MessageQueueException\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueException\n  nameWithType: MessageQueueException\n  fullName: System.Messaging.MessageQueueException\n- uid: System.Messaging.MessageQueueInstaller\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueInstaller\n  nameWithType: MessageQueueInstaller\n  fullName: System.Messaging.MessageQueueInstaller\n- uid: System.Messaging.MessageQueuePermission\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueuePermission\n  nameWithType: MessageQueuePermission\n  fullName: System.Messaging.MessageQueuePermission\n- uid: System.Messaging.MessageQueuePermissionAccess\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueuePermissionAccess\n  nameWithType: MessageQueuePermissionAccess\n  fullName: System.Messaging.MessageQueuePermissionAccess\n- uid: System.Messaging.MessageQueuePermissionAttribute\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueuePermissionAttribute\n  nameWithType: MessageQueuePermissionAttribute\n  fullName: System.Messaging.MessageQueuePermissionAttribute\n- uid: System.Messaging.MessageQueuePermissionEntry\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueuePermissionEntry\n  nameWithType: MessageQueuePermissionEntry\n  fullName: System.Messaging.MessageQueuePermissionEntry\n- uid: System.Messaging.MessageQueuePermissionEntryCollection\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueuePermissionEntryCollection\n  nameWithType: MessageQueuePermissionEntryCollection\n  fullName: System.Messaging.MessageQueuePermissionEntryCollection\n- uid: System.Messaging.MessageQueueTransaction\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueTransaction\n  nameWithType: MessageQueueTransaction\n  fullName: System.Messaging.MessageQueueTransaction\n- uid: System.Messaging.MessageQueueTransactionStatus\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueTransactionStatus\n  nameWithType: MessageQueueTransactionStatus\n  fullName: System.Messaging.MessageQueueTransactionStatus\n- uid: System.Messaging.MessageQueueTransactionType\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueTransactionType\n  nameWithType: MessageQueueTransactionType\n  fullName: System.Messaging.MessageQueueTransactionType\n- uid: System.Messaging.MessageType\n  parent: System.Messaging\n  isExternal: false\n  name: MessageType\n  nameWithType: MessageType\n  fullName: System.Messaging.MessageType\n- uid: System.Messaging.MessagingDescriptionAttribute\n  parent: System.Messaging\n  isExternal: false\n  name: MessagingDescriptionAttribute\n  nameWithType: MessagingDescriptionAttribute\n  fullName: System.Messaging.MessagingDescriptionAttribute\n- uid: System.Messaging.PeekAction\n  parent: System.Messaging\n  isExternal: false\n  name: PeekAction\n  nameWithType: PeekAction\n  fullName: System.Messaging.PeekAction\n- uid: System.Messaging.PeekCompletedEventArgs\n  parent: System.Messaging\n  isExternal: false\n  name: PeekCompletedEventArgs\n  nameWithType: PeekCompletedEventArgs\n  fullName: System.Messaging.PeekCompletedEventArgs\n- uid: System.Messaging.PeekCompletedEventHandler\n  parent: System.Messaging\n  isExternal: false\n  name: PeekCompletedEventHandler\n  nameWithType: PeekCompletedEventHandler\n  fullName: System.Messaging.PeekCompletedEventHandler\n- uid: System.Messaging.QueueAccessMode\n  parent: System.Messaging\n  isExternal: false\n  name: QueueAccessMode\n  nameWithType: QueueAccessMode\n  fullName: System.Messaging.QueueAccessMode\n- uid: System.Messaging.ReceiveCompletedEventArgs\n  parent: System.Messaging\n  isExternal: false\n  name: ReceiveCompletedEventArgs\n  nameWithType: ReceiveCompletedEventArgs\n  fullName: System.Messaging.ReceiveCompletedEventArgs\n- uid: System.Messaging.ReceiveCompletedEventHandler\n  parent: System.Messaging\n  isExternal: false\n  name: ReceiveCompletedEventHandler\n  nameWithType: ReceiveCompletedEventHandler\n  fullName: System.Messaging.ReceiveCompletedEventHandler\n- uid: System.Messaging.SecurityContext\n  parent: System.Messaging\n  isExternal: false\n  name: SecurityContext\n  nameWithType: SecurityContext\n  fullName: System.Messaging.SecurityContext\n- uid: System.Messaging.StandardAccessRights\n  parent: System.Messaging\n  isExternal: false\n  name: StandardAccessRights\n  nameWithType: StandardAccessRights\n  fullName: System.Messaging.StandardAccessRights\n- uid: System.Messaging.Trustee\n  parent: System.Messaging\n  isExternal: false\n  name: Trustee\n  nameWithType: Trustee\n  fullName: System.Messaging.Trustee\n- uid: System.Messaging.TrusteeType\n  parent: System.Messaging\n  isExternal: false\n  name: TrusteeType\n  nameWithType: TrusteeType\n  fullName: System.Messaging.TrusteeType\n- uid: System.Messaging.XmlMessageFormatter\n  parent: System.Messaging\n  isExternal: false\n  name: XmlMessageFormatter\n  nameWithType: XmlMessageFormatter\n  fullName: System.Messaging.XmlMessageFormatter\n"}