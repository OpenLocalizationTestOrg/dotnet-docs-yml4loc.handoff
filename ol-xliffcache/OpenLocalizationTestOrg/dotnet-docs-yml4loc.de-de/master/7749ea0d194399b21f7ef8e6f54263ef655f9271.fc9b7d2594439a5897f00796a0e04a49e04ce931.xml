{"nodes":[{"content":"The `System.Collections.Concurrent` namespace provides several thread-safe collection classes that should be used in place of the corresponding types in the <xref href=\"System.Collections\"></xref> and <xref href=\"System.Collections.Generic\"></xref> namespaces whenever multiple threads are accessing the collection concurrently.  \n  \n However, members accessed through one of the interfaces the current collections implement, including extension methods, are not guaranteed to be thread safe and may need to be synchronized by the caller.","nodes":[{"pos":[0,328],"content":"The <ph id=\"ph1\">`System.Collections.Concurrent`</ph> namespace provides several thread-safe collection classes that should be used in place of the corresponding types in the <ph id=\"ph2\">&lt;xref href=\"System.Collections\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Collections.Generic\"&gt;&lt;/xref&gt;</ph> namespaces whenever multiple threads are accessing the collection concurrently.","source":"The `System.Collections.Concurrent` namespace provides several thread-safe collection classes that should be used in place of the corresponding types in the <xref href=\"System.Collections\"></xref> and <xref href=\"System.Collections.Generic\"></xref> namespaces whenever multiple threads are accessing the collection concurrently."},{"pos":[335,538],"content":"However, members accessed through one of the interfaces the current collections implement, including extension methods, are not guaranteed to be thread safe and may need to be synchronized by the caller.","nodes":[{"content":"However, members accessed through one of the interfaces the current collections implement, including extension methods, are not guaranteed to be thread safe and may need to be synchronized by the caller.","pos":[0,203]}]}],"pos":[840,1387],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Concurrent\n  id: System.Collections.Concurrent\n  children:\n  - System.Collections.Concurrent.BlockingCollection`1\n  - System.Collections.Concurrent.ConcurrentBag`1\n  - System.Collections.Concurrent.ConcurrentDictionary`2\n  - System.Collections.Concurrent.ConcurrentQueue`1\n  - System.Collections.Concurrent.ConcurrentStack`1\n  - System.Collections.Concurrent.EnumerablePartitionerOptions\n  - System.Collections.Concurrent.IProducerConsumerCollection`1\n  - System.Collections.Concurrent.OrderablePartitioner`1\n  - System.Collections.Concurrent.Partitioner\n  - System.Collections.Concurrent.Partitioner`1\n  langs:\n  - csharp\n  name: System.Collections.Concurrent\n  nameWithType: System.Collections.Concurrent\n  fullName: System.Collections.Concurrent\n  type: Namespace\n  summary: \"The `System.Collections.Concurrent` namespace provides several thread-safe collection classes that should be used in place of the corresponding types in the <xref href=\\\"System.Collections\\\"></xref> and <xref href=\\\"System.Collections.Generic\\\"></xref> namespaces whenever multiple threads are accessing the collection concurrently.  \\n  \\n However, members accessed through one of the interfaces the current collections implement, including extension methods, are not guaranteed to be thread safe and may need to be synchronized by the caller.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/ns-System.Collections.Concurrent.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Collections.Concurrent.BlockingCollection`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: BlockingCollection<T>\n  nameWithType: BlockingCollection<T>\n  fullName: System.Collections.Concurrent.BlockingCollection<T>\n- uid: System.Collections.Concurrent.ConcurrentBag`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: ConcurrentBag<T>\n  nameWithType: ConcurrentBag<T>\n  fullName: System.Collections.Concurrent.ConcurrentBag<T>\n- uid: System.Collections.Concurrent.ConcurrentDictionary`2\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: ConcurrentDictionary<TKey,TValue>\n  nameWithType: ConcurrentDictionary<TKey,TValue>\n  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>\n- uid: System.Collections.Concurrent.ConcurrentQueue`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: ConcurrentQueue<T>\n  nameWithType: ConcurrentQueue<T>\n  fullName: System.Collections.Concurrent.ConcurrentQueue<T>\n- uid: System.Collections.Concurrent.ConcurrentStack`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: ConcurrentStack<T>\n  nameWithType: ConcurrentStack<T>\n  fullName: System.Collections.Concurrent.ConcurrentStack<T>\n- uid: System.Collections.Concurrent.EnumerablePartitionerOptions\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: EnumerablePartitionerOptions\n  nameWithType: EnumerablePartitionerOptions\n  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions\n- uid: System.Collections.Concurrent.IProducerConsumerCollection`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: IProducerConsumerCollection<T>\n  nameWithType: IProducerConsumerCollection<T>\n  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>\n- uid: System.Collections.Concurrent.OrderablePartitioner`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: OrderablePartitioner<TSource>\n  nameWithType: OrderablePartitioner<TSource>\n  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>\n- uid: System.Collections.Concurrent.Partitioner\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: Partitioner\n  nameWithType: Partitioner\n  fullName: System.Collections.Concurrent.Partitioner\n- uid: System.Collections.Concurrent.Partitioner`1\n  parent: System.Collections.Concurrent\n  isExternal: false\n  name: Partitioner<TSource>\n  nameWithType: Partitioner<TSource>\n  fullName: System.Collections.Concurrent.Partitioner<TSource>\n"}