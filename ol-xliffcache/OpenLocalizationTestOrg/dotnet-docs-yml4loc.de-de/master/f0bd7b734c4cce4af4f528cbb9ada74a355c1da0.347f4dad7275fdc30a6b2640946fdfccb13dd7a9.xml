{"nodes":[{"content":"Represents the settings used by the client to validate the certificate presented by the service using SSL authentication. It also contains any certificate for the service that is explicitly configured on the client to use for encrypting messages to the service using message security.","nodes":[{"pos":[0,284],"content":"Represents the settings used by the client to validate the certificate presented by the service using SSL authentication. It also contains any certificate for the service that is explicitly configured on the client to use for encrypting messages to the service using message security.","nodes":[{"content":"Represents the settings used by the client to validate the certificate presented by the service using SSL authentication. It also contains any certificate for the service that is explicitly configured on the client to use for encrypting messages to the service using message security.","pos":[0,284],"nodes":[{"content":"Represents the settings used by the client to validate the certificate presented by the service using SSL authentication.","pos":[0,121]},{"content":"It also contains any certificate for the service that is explicitly configured on the client to use for encrypting messages to the service using message security.","pos":[122,284]}]}]}],"pos":[1994,2279],"yaml":true},{"content":"This class is used by the <xref:System.ServiceModel.Description.ClientCredentials.ServiceCertificate%2A> property in the <xref:System.ServiceModel.Description.ClientCredentials> class.","nodes":[{"pos":[0,184],"content":"This class is used by the <xref:System.ServiceModel.Description.ClientCredentials.ServiceCertificate%2A> property in the <xref:System.ServiceModel.Description.ClientCredentials> class.","nodes":[{"content":"This class is used by the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Description.ClientCredentials.ServiceCertificate%2A&gt;</ph> property in the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Description.ClientCredentials&gt;</ph> class.","pos":[0,184],"source":"This class is used by the <xref:System.ServiceModel.Description.ClientCredentials.ServiceCertificate%2A> property in the <xref:System.ServiceModel.Description.ClientCredentials> class."}]}],"pos":[2290,2475],"yaml":true,"extradata":"MT"},{"content":"Gets the settings used to validate the service certificate obtained using SSL authentication.","nodes":[{"pos":[0,93],"content":"Gets the settings used to validate the service certificate obtained using SSL authentication.","nodes":[{"content":"Gets the settings used to validate the service certificate obtained using SSL authentication.","pos":[0,93]}]}],"pos":[4469,4563],"yaml":true},{"content":"The <xref:System.ServiceModel.Security.X509ClientCertificateAuthentication> class represents the settings used by the client proxy to authenticate service certificates that are obtained using SSL/TLS negotiation.","nodes":[{"pos":[0,212],"content":"The <xref:System.ServiceModel.Security.X509ClientCertificateAuthentication> class represents the settings used by the client proxy to authenticate service certificates that are obtained using SSL/TLS negotiation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Security.X509ClientCertificateAuthentication&gt;</ph> class represents the settings used by the client proxy to authenticate service certificates that are obtained using SSL/TLS negotiation.","pos":[0,212],"source":"The <xref:System.ServiceModel.Security.X509ClientCertificateAuthentication> class represents the settings used by the client proxy to authenticate service certificates that are obtained using SSL/TLS negotiation."}]}],"pos":[4574,4787],"yaml":true,"extradata":"MT"},{"content":"The settings used to validate the service certificate obtained using SSL authentication.","nodes":[{"pos":[0,88],"content":"The settings used to validate the service certificate obtained using SSL authentication.","nodes":[{"content":"The settings used to validate the service certificate obtained using SSL authentication.","pos":[0,88]}]}],"pos":[5188,5277],"yaml":true},{"content":"Gets or sets the default certificate to use for the service.","nodes":[{"pos":[0,60],"content":"Gets or sets the default certificate to use for the service.","nodes":[{"content":"Gets or sets the default certificate to use for the service.","pos":[0,60]}]}],"pos":[6689,6750],"yaml":true},{"content":"For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","nodes":[{"pos":[0,194],"content":"For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","nodes":[{"content":"For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","pos":[0,194]}]}],"pos":[6761,6956],"yaml":true,"extradata":"MT"},{"content":"The default certificate to use for the service.","nodes":[{"pos":[0,47],"content":"The default certificate to use for the service.","nodes":[{"content":"The default certificate to use for the service.","pos":[0,47]}]}],"pos":[7360,7408],"yaml":true},{"content":"Attempted to set when the credential is read-only.","nodes":[{"pos":[0,50],"content":"Attempted to set when the credential is read-only.","nodes":[{"content":"Attempted to set when the credential is read-only.","pos":[0,50]}]}],"pos":[7634,7685],"yaml":true},{"content":"Gets a scoped certificate to use to represent the service that the client is communicating with.","nodes":[{"pos":[0,96],"content":"Gets a scoped certificate to use to represent the service that the client is communicating with.","nodes":[{"content":"Gets a scoped certificate to use to represent the service that the client is communicating with.","pos":[0,96]}]}],"pos":[8982,9079],"yaml":true},{"content":"This property enables the client to configure the service certificate to use based on the URL of the service it communicates with. This is especially useful in issued token scenarios where a client can be communicating to multiple services (the end service as well as intermediary security token services). For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service, and is expected to be used by the service for signing replies to the client.  \n  \n If a binding requires a certificate for the service and no specific certificate for the service URL is found in the `ScopedCertificates`, the default certificate is used.","nodes":[{"pos":[0,502],"content":"This property enables the client to configure the service certificate to use based on the URL of the service it communicates with. This is especially useful in issued token scenarios where a client can be communicating to multiple services (the end service as well as intermediary security token services). For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service, and is expected to be used by the service for signing replies to the client.","nodes":[{"content":"This property enables the client to configure the service certificate to use based on the URL of the service it communicates with. This is especially useful in issued token scenarios where a client can be communicating to multiple services (the end service as well as intermediary security token services). For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service, and is expected to be used by the service for signing replies to the client.","pos":[0,502],"nodes":[{"content":"This property enables the client to configure the service certificate to use based on the URL of the service it communicates with.","pos":[0,130]},{"content":"This is especially useful in issued token scenarios where a client can be communicating to multiple services (the end service as well as intermediary security token services).","pos":[131,306]},{"content":"For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service, and is expected to be used by the service for signing replies to the client.","pos":[307,502]}]}]},{"pos":[509,679],"content":"If a binding requires a certificate for the service and no specific certificate for the service URL is found in the <ph id=\"ph1\">`ScopedCertificates`</ph>, the default certificate is used.","source":"If a binding requires a certificate for the service and no specific certificate for the service URL is found in the `ScopedCertificates`, the default certificate is used."}],"pos":[9090,9774],"yaml":true,"extradata":"MT"},{"content":"A scoped certificate to use to represent the service that the client is communicating with.","nodes":[{"pos":[0,91],"content":"A scoped certificate to use to represent the service that the client is communicating with.","nodes":[{"content":"A scoped certificate to use to represent the service that the client is communicating with.","pos":[0,91]}]}],"pos":[10263,10355],"yaml":true},{"content":"Attempted to set when the credential is read-only.","nodes":[{"pos":[0,50],"content":"Attempted to set when the credential is read-only.","nodes":[{"content":"Attempted to set when the credential is read-only.","pos":[0,50]}]}],"pos":[10581,10632],"yaml":true},{"content":"Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","nodes":[{"pos":[0,252],"content":"Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","nodes":[{"content":"Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","pos":[0,252],"nodes":[{"content":"Specifies the default certificate to use for the service.","pos":[0,57]},{"content":"For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","pos":[58,252]}]}]}],"pos":[12440,12693],"yaml":true},{"content":"This method gets a certificate from the store in the specified location that matches the `subjectName` parameter.  \n  \n Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).  \n  \n If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \n  \n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.","nodes":[{"pos":[0,113],"content":"This method gets a certificate from the store in the specified location that matches the <ph id=\"ph1\">`subjectName`</ph> parameter.","source":"This method gets a certificate from the store in the specified location that matches the `subjectName` parameter."},{"pos":[120,246],"content":"Values for <ph id=\"ph1\">`storeLocation`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation&gt;</ph> enumeration:","source":"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:"},{"pos":[256,389],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>: the certificate store assigned to the local machine.","pos":[0,133],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine."}]},{"pos":[399,536],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>: the certificate store used by the current user (default).","pos":[0,137],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default)."}]},{"pos":[543,883],"content":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","nodes":[{"content":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","pos":[0,340],"nodes":[{"content":"If the application is running under a system account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>.","pos":[0,171],"source":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>."},{"content":"If the application is running under a user account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>.","pos":[172,340],"source":" If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>."}]}]},{"pos":[890,1008],"content":"Values for <ph id=\"ph1\">`storeName`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreName&gt;</ph> enumeration.","source":"Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration."}],"pos":[12704,13725],"yaml":true,"extradata":"MT"},{"content":"The subject distinguished name.","nodes":[{"pos":[0,31],"content":"The subject distinguished name.","nodes":[{"content":"The subject distinguished name.","pos":[0,31]}]}],"pos":[14232,14264],"yaml":true},{"content":"The location of the certificate store that the service uses to obtain the service certificate.","nodes":[{"pos":[0,94],"content":"The location of the certificate store that the service uses to obtain the service certificate.","nodes":[{"content":"The location of the certificate store that the service uses to obtain the service certificate.","pos":[0,94]}]}],"pos":[14379,14474],"yaml":true},{"content":"The name of the X.509 certificate store to open.","nodes":[{"pos":[0,48],"content":"The name of the X.509 certificate store to open.","nodes":[{"content":"The name of the X.509 certificate store to open.","pos":[0,48]}]}],"pos":[14581,14630],"yaml":true},{"content":"<code>subjectName</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;subjectName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>subjectName</code> is `null`."}],"pos":[14851,14887],"yaml":true},{"content":"Attempted to set when the credential is read-only.","nodes":[{"pos":[0,50],"content":"Attempted to set when the credential is read-only.","nodes":[{"content":"Attempted to set when the credential is read-only.","pos":[0,50]}]}],"pos":[14997,15048],"yaml":true},{"content":"Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","nodes":[{"pos":[0,252],"content":"Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","nodes":[{"content":"Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","pos":[0,252],"nodes":[{"content":"Specifies the default certificate to use for the service.","pos":[0,57]},{"content":"For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.","pos":[58,252]}]}]}],"pos":[17075,17328],"yaml":true},{"content":"This method gets a certificate from the store in the specified location that matches the `findType` and `findValue` parameters.  \n  \n Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).  \n  \n If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \n  \n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.  \n  \n Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration.  \n  \n The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"pos":[0,127],"content":"This method gets a certificate from the store in the specified location that matches the <ph id=\"ph1\">`findType`</ph> and <ph id=\"ph2\">`findValue`</ph> parameters.","source":"This method gets a certificate from the store in the specified location that matches the `findType` and `findValue` parameters."},{"pos":[134,260],"content":"Values for <ph id=\"ph1\">`storeLocation`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation&gt;</ph> enumeration:","source":"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:"},{"pos":[270,403],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>: the certificate store assigned to the local machine.","pos":[0,133],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine."}]},{"pos":[413,550],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>: the certificate store used by the current user (default).","pos":[0,137],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default)."}]},{"pos":[557,897],"content":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","nodes":[{"content":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","pos":[0,340],"nodes":[{"content":"If the application is running under a system account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>.","pos":[0,171],"source":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>."},{"content":"If the application is running under a user account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>.","pos":[172,340],"source":" If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>."}]}]},{"pos":[904,1022],"content":"Values for <ph id=\"ph1\">`storeName`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreName&gt;</ph> enumeration.","source":"Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration."},{"pos":[1029,1149],"content":"Values for <ph id=\"ph1\">`findType`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType&gt;</ph> enumeration.","source":"Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration."},{"pos":[1156,1541],"content":"The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"content":"The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown.","pos":[0,385],"nodes":[{"content":"The most commonly used enumeration is <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName&gt;</ph>, which does a case-insensitive search on the subject name of certificates in the specified store.","pos":[0,219],"source":"The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store."},{"content":"This can be an imprecise search.","pos":[220,252]},{"content":"If no certificates or multiple certificates that match the criteria are found, an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.","pos":[253,385],"source":" If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown."}]}]}],"pos":[17339,18897],"yaml":true,"extradata":"MT"},{"content":"The location of the certificate store the service uses to obtain the service certificate.","nodes":[{"pos":[0,89],"content":"The location of the certificate store the service uses to obtain the service certificate.","nodes":[{"content":"The location of the certificate store the service uses to obtain the service certificate.","pos":[0,89]}]}],"pos":[19519,19609],"yaml":true},{"content":"The name of the X.509 certificate store to open.","nodes":[{"pos":[0,48],"content":"The name of the X.509 certificate store to open.","nodes":[{"content":"The name of the X.509 certificate store to open.","pos":[0,48]}]}],"pos":[19716,19765],"yaml":true},{"content":"The type of X.509 search to be executed.","nodes":[{"pos":[0,40],"content":"The type of X.509 search to be executed.","nodes":[{"content":"The type of X.509 search to be executed.","pos":[0,40]}]}],"pos":[19874,19915],"yaml":true},{"content":"The value to search for in the X.509 certificate store.","nodes":[{"pos":[0,55],"content":"The value to search for in the X.509 certificate store.","nodes":[{"content":"The value to search for in the X.509 certificate store.","pos":[0,55]}]}],"pos":[19980,20036],"yaml":true},{"content":"<code>findValue</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;findValue&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>findValue</code> is `null`."}],"pos":[20257,20291],"yaml":true},{"content":"Attempted to set when the credential is read-only.","nodes":[{"pos":[0,50],"content":"Attempted to set when the credential is read-only.","nodes":[{"content":"Attempted to set when the credential is read-only.","pos":[0,50]}]}],"pos":[20401,20452],"yaml":true},{"content":"Sets a certificate by subject name, certificate store location, and certificate store name, and stores it in a collection to be used for the URL that sets the scope.","nodes":[{"pos":[0,165],"content":"Sets a certificate by subject name, certificate store location, and certificate store name, and stores it in a collection to be used for the URL that sets the scope.","nodes":[{"content":"Sets a certificate by subject name, certificate store location, and certificate store name, and stores it in a collection to be used for the URL that sets the scope.","pos":[0,165]}]}],"pos":[22302,22468],"yaml":true},{"content":"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).  \n  \n If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \n  \n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.","nodes":[{"pos":[0,126],"content":"Values for <ph id=\"ph1\">`storeLocation`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation&gt;</ph> enumeration:","source":"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:"},{"pos":[136,269],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>: the certificate store assigned to the local machine.","pos":[0,133],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine."}]},{"pos":[279,416],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>: the certificate store used by the current user (default).","pos":[0,137],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default)."}]},{"pos":[423,763],"content":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","nodes":[{"content":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","pos":[0,340],"nodes":[{"content":"If the application is running under a system account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>.","pos":[0,171],"source":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>."},{"content":"If the application is running under a user account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>.","pos":[172,340],"source":" If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>."}]}]},{"pos":[770,888],"content":"Values for <ph id=\"ph1\">`storeName`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreName&gt;</ph> enumeration.","source":"Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration."}],"pos":[22479,23378],"yaml":true,"extradata":"MT"},{"content":"The fully qualified subject name.","nodes":[{"pos":[0,33],"content":"The fully qualified subject name.","nodes":[{"content":"The fully qualified subject name.","pos":[0,33]}]}],"pos":[23868,23902],"yaml":true},{"content":"The location of the certificate store that the service uses to obtain the service certificate.","nodes":[{"pos":[0,94],"content":"The location of the certificate store that the service uses to obtain the service certificate.","nodes":[{"content":"The location of the certificate store that the service uses to obtain the service certificate.","pos":[0,94]}]}],"pos":[24017,24112],"yaml":true},{"content":"The name of the X.509 certificate store to open.","nodes":[{"pos":[0,48],"content":"The name of the X.509 certificate store to open.","nodes":[{"content":"The name of the X.509 certificate store to open.","pos":[0,48]}]}],"pos":[24219,24268],"yaml":true},{"content":"The URL that sets the scope.","nodes":[{"pos":[0,28],"content":"The URL that sets the scope.","nodes":[{"content":"The URL that sets the scope.","pos":[0,28]}]}],"pos":[24334,24363],"yaml":true},{"content":"<code>targetService</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;targetService&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetService</code> is `null`."}],"pos":[24583,24621],"yaml":true},{"content":"Attempted to set when the credential is read-only.","nodes":[{"pos":[0,50],"content":"Attempted to set when the credential is read-only.","nodes":[{"content":"Attempted to set when the credential is read-only.","pos":[0,50]}]}],"pos":[24731,24782],"yaml":true},{"content":"Sets a certificate by certificate store location, certificate store name, type of X.509 search, and value to search for, and stores it in a collection to be used for the URL that sets the scope.","nodes":[{"pos":[0,194],"content":"Sets a certificate by certificate store location, certificate store name, type of X.509 search, and value to search for, and stores it in a collection to be used for the URL that sets the scope.","nodes":[{"content":"Sets a certificate by certificate store location, certificate store name, type of X.509 search, and value to search for, and stores it in a collection to be used for the URL that sets the scope.","pos":[0,194]}]}],"pos":[26851,27046],"yaml":true},{"content":"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.  \n  \n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).  \n  \n If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \n  \n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.  \n  \n Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration.  \n  \n The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> will be thrown.","nodes":[{"pos":[0,126],"content":"Values for <ph id=\"ph1\">`storeLocation`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation&gt;</ph> enumeration:","source":"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:"},{"pos":[136,269],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>: the certificate store assigned to the local machine.","pos":[0,133],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine."}]},{"pos":[279,416],"content":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>: the certificate store used by the current user (default).","pos":[0,137],"source":"<xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default)."}]},{"pos":[423,763],"content":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","nodes":[{"content":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.","pos":[0,340],"nodes":[{"content":"If the application is running under a system account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine&gt;</ph>.","pos":[0,171],"source":"If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>."},{"content":"If the application is running under a user account, then the certificate is typically in <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser&gt;</ph>.","pos":[172,340],"source":" If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>."}]}]},{"pos":[770,888],"content":"Values for <ph id=\"ph1\">`storeName`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.StoreName&gt;</ph> enumeration.","source":"Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration."},{"pos":[895,1015],"content":"Values for <ph id=\"ph1\">`findType`</ph> are included in the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType&gt;</ph> enumeration.","source":"Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration."},{"pos":[1022,1412],"content":"The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> will be thrown.","nodes":[{"content":"The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> will be thrown.","pos":[0,390],"nodes":[{"content":"The most commonly used enumeration is <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName&gt;</ph>, which does a case-insensitive search on the subject name of certificates in the specified store.","pos":[0,219],"source":"The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store."},{"content":"This can be an imprecise search.","pos":[220,252]},{"content":"If no certificates or multiple certificates that match the criteria are found, an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown.","pos":[253,390],"source":" If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> will be thrown."}]}]}],"pos":[27057,28484],"yaml":true,"extradata":"MT"},{"content":"The location of the certificate store that the service uses to obtain the service certificate.","nodes":[{"pos":[0,94],"content":"The location of the certificate store that the service uses to obtain the service certificate.","nodes":[{"content":"The location of the certificate store that the service uses to obtain the service certificate.","pos":[0,94]}]}],"pos":[29194,29289],"yaml":true},{"content":"The name of the X.509 certificate store to open.","nodes":[{"pos":[0,48],"content":"The name of the X.509 certificate store to open.","nodes":[{"content":"The name of the X.509 certificate store to open.","pos":[0,48]}]}],"pos":[29396,29445],"yaml":true},{"content":"The type of X.509 search to be executed.","nodes":[{"pos":[0,40],"content":"The type of X.509 search to be executed.","nodes":[{"content":"The type of X.509 search to be executed.","pos":[0,40]}]}],"pos":[29554,29595],"yaml":true},{"content":"The value to search for in the X.509 certificate store.","nodes":[{"pos":[0,55],"content":"The value to search for in the X.509 certificate store.","nodes":[{"content":"The value to search for in the X.509 certificate store.","pos":[0,55]}]}],"pos":[29660,29716],"yaml":true},{"content":"The URL that sets the scope.","nodes":[{"pos":[0,28],"content":"The URL that sets the scope.","nodes":[{"content":"The URL that sets the scope.","pos":[0,28]}]}],"pos":[29782,29811],"yaml":true},{"content":"<code>targetService</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;targetService&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>targetService</code> is `null`."}],"pos":[30031,30069],"yaml":true},{"content":"Attempted to set when the credential is read-only.","nodes":[{"pos":[0,50],"content":"Attempted to set when the credential is read-only.","nodes":[{"content":"Attempted to set when the credential is read-only.","pos":[0,50]}]}],"pos":[30179,30230],"yaml":true},{"content":"Gets or sets the SSL certificate validator to use.","nodes":[{"pos":[0,50],"content":"Gets or sets the SSL certificate validator to use.","nodes":[{"content":"Gets or sets the SSL certificate validator to use.","pos":[0,50]}]}],"pos":[31587,31638],"yaml":true},{"content":"This property allows you to use WCF X509CertificateValidator to validate a server certificate on a WCF client.","nodes":[{"pos":[0,110],"content":"This property allows you to use WCF X509CertificateValidator to validate a server certificate on a WCF client.","nodes":[{"content":"This property allows you to use WCF X509CertificateValidator to validate a server certificate on a WCF client.","pos":[0,110]}]}],"pos":[31649,31760],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ServiceModel.Security.X509ServiceCertificateAuthentication\"></xref> instance.","nodes":[{"pos":[0,98],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Security.X509ServiceCertificateAuthentication\"&gt;&lt;/xref&gt;</ph> instance.","source":"A <xref href=\"System.ServiceModel.Security.X509ServiceCertificateAuthentication\"></xref> instance."}],"pos":[32008,32107],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  commentId: T:System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  id: X509CertificateRecipientClientCredential\n  children:\n  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication\n  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate\n  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates\n  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)\n  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)\n  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)\n  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)\n  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication\n  langs:\n  - csharp\n  name: X509CertificateRecipientClientCredential\n  nameWithType: X509CertificateRecipientClientCredential\n  fullName: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Represents the settings used by the client to validate the certificate presented by the service using SSL authentication. It also contains any certificate for the service that is explicitly configured on the client to use for encrypting messages to the service using message security.\n  remarks: This class is used by the <xref:System.ServiceModel.Description.ClientCredentials.ServiceCertificate%2A> property in the <xref:System.ServiceModel.Description.ClientCredentials> class.\n  example:\n  - \"This code shows one way to create an instance of this class.  \\n  \\n [!code-csharp[c_CreateSTS#18](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#18)]\\n [!code-vb[c_CreateSTS#18](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_creatests/vb/source.vb#18)]\"\n  syntax:\n    content: public sealed class X509CertificateRecipientClientCredential\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication\n  commentId: P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication\n  id: Authentication\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  langs:\n  - csharp\n  name: Authentication\n  nameWithType: X509CertificateRecipientClientCredential.Authentication\n  fullName: X509CertificateRecipientClientCredential.Authentication\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets the settings used to validate the service certificate obtained using SSL authentication.\n  remarks: The <xref:System.ServiceModel.Security.X509ClientCertificateAuthentication> class represents the settings used by the client proxy to authenticate service certificates that are obtained using SSL/TLS negotiation.\n  example:\n  - \"This code shows how to access this property.  \\n  \\n [!code-csharp[c_CreateSTS#21](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#21)]\"\n  syntax:\n    content: public System.ServiceModel.Security.X509ServiceCertificateAuthentication Authentication { get; }\n    return:\n      type: System.ServiceModel.Security.X509ServiceCertificateAuthentication\n      description: The settings used to validate the service certificate obtained using SSL authentication.\n  overload: System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate\n  commentId: P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate\n  id: DefaultCertificate\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  langs:\n  - csharp\n  name: DefaultCertificate\n  nameWithType: X509CertificateRecipientClientCredential.DefaultCertificate\n  fullName: X509CertificateRecipientClientCredential.DefaultCertificate\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets or sets the default certificate to use for the service.\n  remarks: For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.\n  example:\n  - \"This code shows how to access this property.  \\n  \\n [!code-csharp[c_CreateSTS#24](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#24)]\"\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 DefaultCertificate { get; set; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The default certificate to use for the service.\n  overload: System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Attempted to set when the credential is read-only.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates\n  commentId: P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates\n  id: ScopedCertificates\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  langs:\n  - csharp\n  name: ScopedCertificates\n  nameWithType: X509CertificateRecipientClientCredential.ScopedCertificates\n  fullName: X509CertificateRecipientClientCredential.ScopedCertificates\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets a scoped certificate to use to represent the service that the client is communicating with.\n  remarks: \"This property enables the client to configure the service certificate to use based on the URL of the service it communicates with. This is especially useful in issued token scenarios where a client can be communicating to multiple services (the end service as well as intermediary security token services). For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service, and is expected to be used by the service for signing replies to the client.  \\n  \\n If a binding requires a certificate for the service and no specific certificate for the service URL is found in the `ScopedCertificates`, the default certificate is used.\"\n  example:\n  - \"This code shows how to set this property.  \\n  \\n [!code-csharp[c_CreateSTS#33](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#33)]\"\n  syntax:\n    content: public System.Collections.Generic.Dictionary<Uri,System.Security.Cryptography.X509Certificates.X509Certificate2> ScopedCertificates { get; }\n    return:\n      type: System.Collections.Generic.Dictionary{System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2}\n      description: A scoped certificate to use to represent the service that the client is communicating with.\n  overload: System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Attempted to set when the credential is read-only.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)\n  commentId: M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)\n  id: SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  langs:\n  - csharp\n  name: SetDefaultCertificate(String, StoreLocation, StoreName)\n  nameWithType: X509CertificateRecipientClientCredential.SetDefaultCertificate(String, StoreLocation, StoreName)\n  fullName: X509CertificateRecipientClientCredential.SetDefaultCertificate(String, StoreLocation, StoreName)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.\n  remarks: \"This method gets a certificate from the store in the specified location that matches the `subjectName` parameter.  \\n  \\n Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).  \\n  \\n If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \\n  \\n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.\"\n  example:\n  - \"The following code uses this method to specify an X.509 certificate to use.  \\n  \\n [!code-csharp[c_CreateSTS#23](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#23)]\"\n  syntax:\n    content: public void SetDefaultCertificate (string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName);\n    parameters:\n    - id: subjectName\n      type: System.String\n      description: The subject distinguished name.\n    - id: storeLocation\n      type: System.Security.Cryptography.X509Certificates.StoreLocation\n      description: The location of the certificate store that the service uses to obtain the service certificate.\n    - id: storeName\n      type: System.Security.Cryptography.X509Certificates.StoreName\n      description: The name of the X.509 certificate store to open.\n  overload: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>subjectName</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Attempted to set when the credential is read-only.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)\n  commentId: M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)\n  id: SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  langs:\n  - csharp\n  name: SetDefaultCertificate(StoreLocation, StoreName, X509FindType, Object)\n  nameWithType: X509CertificateRecipientClientCredential.SetDefaultCertificate(StoreLocation, StoreName, X509FindType, Object)\n  fullName: X509CertificateRecipientClientCredential.SetDefaultCertificate(StoreLocation, StoreName, X509FindType, Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.\n  remarks: \"This method gets a certificate from the store in the specified location that matches the `findType` and `findValue` parameters.  \\n  \\n Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).  \\n  \\n If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \\n  \\n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.  \\n  \\n Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration.  \\n  \\n The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> is thrown.\"\n  example:\n  - \"The following code uses this method to specify an X.509 certificate to use.  \\n  \\n [!code-csharp[c_CreateSTS#22](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#22)]\"\n  syntax:\n    content: public void SetDefaultCertificate (System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue);\n    parameters:\n    - id: storeLocation\n      type: System.Security.Cryptography.X509Certificates.StoreLocation\n      description: The location of the certificate store the service uses to obtain the service certificate.\n    - id: storeName\n      type: System.Security.Cryptography.X509Certificates.StoreName\n      description: The name of the X.509 certificate store to open.\n    - id: findType\n      type: System.Security.Cryptography.X509Certificates.X509FindType\n      description: The type of X.509 search to be executed.\n    - id: findValue\n      type: System.Object\n      description: The value to search for in the X.509 certificate store.\n  overload: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>findValue</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Attempted to set when the credential is read-only.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)\n  commentId: M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)\n  id: SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  langs:\n  - csharp\n  name: SetScopedCertificate(String, StoreLocation, StoreName, Uri)\n  nameWithType: X509CertificateRecipientClientCredential.SetScopedCertificate(String, StoreLocation, StoreName, Uri)\n  fullName: X509CertificateRecipientClientCredential.SetScopedCertificate(String, StoreLocation, StoreName, Uri)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Sets a certificate by subject name, certificate store location, and certificate store name, and stores it in a collection to be used for the URL that sets the scope.\n  remarks: \"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).  \\n  \\n If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \\n  \\n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.\"\n  example:\n  - \"This code shows how to call this method.  \\n  \\n [!code-csharp[c_CreateSTS#25](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#25)]\"\n  syntax:\n    content: public void SetScopedCertificate (string subjectName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, Uri targetService);\n    parameters:\n    - id: subjectName\n      type: System.String\n      description: The fully qualified subject name.\n    - id: storeLocation\n      type: System.Security.Cryptography.X509Certificates.StoreLocation\n      description: The location of the certificate store that the service uses to obtain the service certificate.\n    - id: storeName\n      type: System.Security.Cryptography.X509Certificates.StoreName\n      description: The name of the X.509 certificate store to open.\n    - id: targetService\n      type: System.Uri\n      description: The URL that sets the scope.\n  overload: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetService</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Attempted to set when the credential is read-only.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)\n  commentId: M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)\n  id: SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  langs:\n  - csharp\n  name: SetScopedCertificate(StoreLocation, StoreName, X509FindType, Object, Uri)\n  nameWithType: X509CertificateRecipientClientCredential.SetScopedCertificate(StoreLocation, StoreName, X509FindType, Object, Uri)\n  fullName: X509CertificateRecipientClientCredential.SetScopedCertificate(StoreLocation, StoreName, X509FindType, Object, Uri)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Sets a certificate by certificate store location, certificate store name, type of X.509 search, and value to search for, and stores it in a collection to be used for the URL that sets the scope.\n  remarks: \"Values for `storeLocation` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreLocation> enumeration:  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>: the certificate store assigned to the local machine.  \\n  \\n-   <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>: the certificate store used by the current user (default).  \\n  \\n If the application is running under a system account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine>. If the application is running under a user account, then the certificate is typically in <xref:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser>.  \\n  \\n Values for `storeName` are included in the <xref:System.Security.Cryptography.X509Certificates.StoreName> enumeration.  \\n  \\n Values for `findType` are included in the <xref:System.Security.Cryptography.X509Certificates.X509FindType> enumeration.  \\n  \\n The most commonly used enumeration is <xref:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName>, which does a case-insensitive search on the subject name of certificates in the specified store. This can be an imprecise search. If no certificates or multiple certificates that match the criteria are found, an <xref:System.InvalidOperationException> will be thrown.\"\n  example:\n  - \"This code shows how to call this method.  \\n  \\n [!code-csharp[c_CreateSTS#20](~/samples/snippets/csharp/VS_Snippets_CFX/c_creatests/cs/source.cs#20)]\\n [!code-vb[c_CreateSTS#20](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_creatests/vb/source.vb#20)]\"\n  syntax:\n    content: public void SetScopedCertificate (System.Security.Cryptography.X509Certificates.StoreLocation storeLocation, System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.X509FindType findType, object findValue, Uri targetService);\n    parameters:\n    - id: storeLocation\n      type: System.Security.Cryptography.X509Certificates.StoreLocation\n      description: The location of the certificate store that the service uses to obtain the service certificate.\n    - id: storeName\n      type: System.Security.Cryptography.X509Certificates.StoreName\n      description: The name of the X.509 certificate store to open.\n    - id: findType\n      type: System.Security.Cryptography.X509Certificates.X509FindType\n      description: The type of X.509 search to be executed.\n    - id: findValue\n      type: System.Object\n      description: The value to search for in the X.509 certificate store.\n    - id: targetService\n      type: System.Uri\n      description: The URL that sets the scope.\n  overload: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>targetService</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Attempted to set when the credential is read-only.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication\n  commentId: P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication\n  id: SslCertificateAuthentication\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  langs:\n  - csharp\n  name: SslCertificateAuthentication\n  nameWithType: X509CertificateRecipientClientCredential.SslCertificateAuthentication\n  fullName: X509CertificateRecipientClientCredential.SslCertificateAuthentication\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets or sets the SSL certificate validator to use.\n  remarks: This property allows you to use WCF X509CertificateValidator to validate a server certificate on a WCF client.\n  syntax:\n    content: public System.ServiceModel.Security.X509ServiceCertificateAuthentication SslCertificateAuthentication { get; set; }\n    return:\n      type: System.ServiceModel.Security.X509ServiceCertificateAuthentication\n      description: A <xref href=\"System.ServiceModel.Security.X509ServiceCertificateAuthentication\"></xref> instance.\n  overload: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: Authentication\n  nameWithType: X509CertificateRecipientClientCredential.Authentication\n  fullName: X509CertificateRecipientClientCredential.Authentication\n- uid: System.ServiceModel.Security.X509ServiceCertificateAuthentication\n  parent: System.ServiceModel.Security\n  isExternal: false\n  name: X509ServiceCertificateAuthentication\n  nameWithType: X509ServiceCertificateAuthentication\n  fullName: System.ServiceModel.Security.X509ServiceCertificateAuthentication\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: DefaultCertificate\n  nameWithType: X509CertificateRecipientClientCredential.DefaultCertificate\n  fullName: X509CertificateRecipientClientCredential.DefaultCertificate\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: ScopedCertificates\n  nameWithType: X509CertificateRecipientClientCredential.ScopedCertificates\n  fullName: X509CertificateRecipientClientCredential.ScopedCertificates\n- uid: System.Collections.Generic.Dictionary`2\n  name: Dictionary<TKey,TValue>\n  nameWithType: Dictionary<TKey,TValue>\n  fullName: System.Collections.Generic.Dictionary<TKey,TValue>\n- uid: System.Uri\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Collections.Generic.Dictionary{System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: Dictionary<Uri,X509Certificate2>\n  nameWithType: Dictionary<Uri,X509Certificate2>\n  fullName: System.Collections.Generic.Dictionary<System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2>\n  spec.csharp:\n  - uid: System.Collections.Generic.Dictionary`2\n    name: Dictionary\n    nameWithType: Dictionary\n    fullName: System.Collections.Generic.Dictionary\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Uri\n    name: Uri\n    nameWithType: Uri\n    fullName: System.Uri\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n    name: X509Certificate2\n    nameWithType: X509Certificate2\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: SetDefaultCertificate(String, StoreLocation, StoreName)\n  nameWithType: X509CertificateRecipientClientCredential.SetDefaultCertificate(String, StoreLocation, StoreName)\n  fullName: X509CertificateRecipientClientCredential.SetDefaultCertificate(String, StoreLocation, StoreName)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Cryptography.X509Certificates.StoreLocation\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: StoreLocation\n  nameWithType: StoreLocation\n  fullName: System.Security.Cryptography.X509Certificates.StoreLocation\n- uid: System.Security.Cryptography.X509Certificates.StoreName\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: StoreName\n  nameWithType: StoreName\n  fullName: System.Security.Cryptography.X509Certificates.StoreName\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: SetDefaultCertificate(StoreLocation, StoreName, X509FindType, Object)\n  nameWithType: X509CertificateRecipientClientCredential.SetDefaultCertificate(StoreLocation, StoreName, X509FindType, Object)\n  fullName: X509CertificateRecipientClientCredential.SetDefaultCertificate(StoreLocation, StoreName, X509FindType, Object)\n- uid: System.Security.Cryptography.X509Certificates.X509FindType\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509FindType\n  nameWithType: X509FindType\n  fullName: System.Security.Cryptography.X509Certificates.X509FindType\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: SetScopedCertificate(String, StoreLocation, StoreName, Uri)\n  nameWithType: X509CertificateRecipientClientCredential.SetScopedCertificate(String, StoreLocation, StoreName, Uri)\n  fullName: X509CertificateRecipientClientCredential.SetScopedCertificate(String, StoreLocation, StoreName, Uri)\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: SetScopedCertificate(StoreLocation, StoreName, X509FindType, Object, Uri)\n  nameWithType: X509CertificateRecipientClientCredential.SetScopedCertificate(StoreLocation, StoreName, X509FindType, Object, Uri)\n  fullName: X509CertificateRecipientClientCredential.SetScopedCertificate(StoreLocation, StoreName, X509FindType, Object, Uri)\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: SslCertificateAuthentication\n  nameWithType: X509CertificateRecipientClientCredential.SslCertificateAuthentication\n  fullName: X509CertificateRecipientClientCredential.SslCertificateAuthentication\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate*\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: SetDefaultCertificate\n  nameWithType: X509CertificateRecipientClientCredential.SetDefaultCertificate\n  fullName: X509CertificateRecipientClientCredential.SetDefaultCertificate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication*\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: Authentication\n  nameWithType: X509CertificateRecipientClientCredential.Authentication\n  fullName: X509CertificateRecipientClientCredential.Authentication\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate*\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: DefaultCertificate\n  nameWithType: X509CertificateRecipientClientCredential.DefaultCertificate\n  fullName: X509CertificateRecipientClientCredential.DefaultCertificate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates*\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: ScopedCertificates\n  nameWithType: X509CertificateRecipientClientCredential.ScopedCertificates\n  fullName: X509CertificateRecipientClientCredential.ScopedCertificates\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate*\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: SetScopedCertificate\n  nameWithType: X509CertificateRecipientClientCredential.SetScopedCertificate\n  fullName: X509CertificateRecipientClientCredential.SetScopedCertificate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication*\n  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential\n  isExternal: false\n  name: SslCertificateAuthentication\n  nameWithType: X509CertificateRecipientClientCredential.SslCertificateAuthentication\n  fullName: X509CertificateRecipientClientCredential.SslCertificateAuthentication\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/X509CertificateRecipientClientCredential.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}