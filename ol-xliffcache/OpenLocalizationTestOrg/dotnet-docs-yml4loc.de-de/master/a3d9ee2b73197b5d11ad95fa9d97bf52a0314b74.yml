### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  id: SafeAccessTokenHandle
  children:
  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)
  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle
  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid
  - Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle
  langs:
  - csharp
  name: SafeAccessTokenHandle
  nameWithType: SafeAccessTokenHandle
  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  type: Class
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: Provides a safe handle to a Windows thread or process access token. For more information see [Access Tokens](https://msdn.microsoft.com/library/windows/desktop/aa374909.aspx)
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public sealed class SafeAccessTokenHandle : System.Runtime.InteropServices.SafeHandle
  inheritance:
  - System.Object
  - System.Runtime.InteropServices.SafeHandle
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Runtime.InteropServices.SafeHandle.Close
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)
  commentId: M:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  langs:
  - csharp
  name: SafeAccessTokenHandle(IntPtr)
  nameWithType: SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)
  fullName: SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)
  type: Constructor
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: Initializes a new instance of the <xref href="Microsoft.Win32.SafeHandles.SafeAccessTokenHandle"></xref> class.
  syntax:
    content: public SafeAccessTokenHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: An <xref href="System.IntPtr"></xref> object that represents the pre-existing handle to use. Using <xref href="System.IntPtr.Zero"></xref> returns an invalid handle.
  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle
  commentId: P:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle
  id: InvalidHandle
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  langs:
  - csharp
  name: InvalidHandle
  nameWithType: SafeAccessTokenHandle.InvalidHandle
  fullName: SafeAccessTokenHandle.InvalidHandle
  type: Property
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: Returns an invalid handle by instantiating a <xref href="Microsoft.Win32.SafeHandles.SafeAccessTokenHandle"></xref> object with <xref href="System.IntPtr.Zero"></xref>.
  syntax:
    content: >-
      [get: System.Security.SecurityCritical]

      public static Microsoft.Win32.SafeHandles.SafeAccessTokenHandle InvalidHandle { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: Returns a <xref href="Microsoft.Win32.SafeHandles.SafeAccessTokenHandle"></xref> object.
  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle*
  exceptions: []
  attributes:
  - type: 'get: System.Security.SecurityCritical'
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid
  commentId: P:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid
  id: IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  langs:
  - csharp
  name: IsInvalid
  nameWithType: SafeAccessTokenHandle.IsInvalid
  fullName: SafeAccessTokenHandle.IsInvalid
  type: Property
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  summary: Gets a value that indicates whether the handle is invalid.
  syntax:
    content: >-
      [get: System.Security.SecurityCritical]

      public override bool IsInvalid { get; }
    return:
      type: System.Boolean
      description: '`true` if the handle is not valid; otherwise, `false`.'
  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid*
  exceptions: []
  attributes:
  - type: 'get: System.Security.SecurityCritical'
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle
  commentId: M:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: SafeAccessTokenHandle.ReleaseHandle()
  fullName: SafeAccessTokenHandle.ReleaseHandle()
  type: Method
  assemblies:
  - System.Security.Principal.Windows
  - mscorlib
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      protected override bool ReleaseHandle ();
    parameters: []
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle*
  exceptions: []
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml
references:
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor(System.IntPtr)
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  isExternal: false
  name: SafeAccessTokenHandle(IntPtr)
  nameWithType: SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)
  fullName: SafeAccessTokenHandle.SafeAccessTokenHandle(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  isExternal: false
  name: InvalidHandle
  nameWithType: SafeAccessTokenHandle.InvalidHandle
  fullName: SafeAccessTokenHandle.InvalidHandle
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeAccessTokenHandle
  nameWithType: SafeAccessTokenHandle
  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  isExternal: false
  name: IsInvalid
  nameWithType: SafeAccessTokenHandle.IsInvalid
  fullName: SafeAccessTokenHandle.IsInvalid
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  isExternal: false
  name: ReleaseHandle()
  nameWithType: SafeAccessTokenHandle.ReleaseHandle()
  fullName: SafeAccessTokenHandle.ReleaseHandle()
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.#ctor*
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  isExternal: false
  name: SafeAccessTokenHandle
  nameWithType: SafeAccessTokenHandle.SafeAccessTokenHandle
  fullName: SafeAccessTokenHandle.SafeAccessTokenHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.InvalidHandle*
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  isExternal: false
  name: InvalidHandle
  nameWithType: SafeAccessTokenHandle.InvalidHandle
  fullName: SafeAccessTokenHandle.InvalidHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.IsInvalid*
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  isExternal: false
  name: IsInvalid
  nameWithType: SafeAccessTokenHandle.IsInvalid
  fullName: SafeAccessTokenHandle.IsInvalid
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle.ReleaseHandle*
  parent: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  isExternal: false
  name: ReleaseHandle
  nameWithType: SafeAccessTokenHandle.ReleaseHandle
  fullName: SafeAccessTokenHandle.ReleaseHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeAccessTokenHandle.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Runtime.InteropServices.SafeHandle.Close
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Close()
  nameWithType: SafeHandle.Close()
  fullName: SafeHandle.Close()
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousAddRef(Boolean)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  fullName: SafeHandle.DangerousAddRef(Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousGetHandle()
  nameWithType: SafeHandle.DangerousGetHandle()
  fullName: SafeHandle.DangerousGetHandle()
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousRelease()
  nameWithType: SafeHandle.DangerousRelease()
  fullName: SafeHandle.DangerousRelease()
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose()
  nameWithType: SafeHandle.Dispose()
  fullName: SafeHandle.Dispose()
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
  fullName: SafeHandle.Dispose(Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: handle
  nameWithType: SafeHandle.handle
  fullName: SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: SafeHandle.IsClosed
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandle(IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
  fullName: SafeHandle.SetHandle(IntPtr)
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandleAsInvalid()
  nameWithType: SafeHandle.SetHandleAsInvalid()
  fullName: SafeHandle.SetHandleAsInvalid()
