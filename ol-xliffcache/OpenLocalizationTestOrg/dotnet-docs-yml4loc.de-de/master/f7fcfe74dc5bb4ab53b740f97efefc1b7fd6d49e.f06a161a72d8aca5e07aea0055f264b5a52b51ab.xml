{"nodes":[{"content":"Enables shared control of the message pump between Win32 and WPF in interoperation scenarios.","nodes":[{"pos":[0,93],"content":"Enables shared control of the message pump between Win32 and WPF in interoperation scenarios.","nodes":[{"content":"Enables shared control of the message pump between Win32 and WPF in interoperation scenarios.","pos":[0,93]}]}],"pos":[1132,1226],"yaml":true},{"content":"Although the class itself is static, all members of <xref:System.Windows.Interop.ComponentDispatcher> are specific to a particular thread. For example, if you examine the value of <xref:System.Windows.Interop.ComponentDispatcher.IsThreadModal%2A> on two different threads, you might get different values.  \n  \n The methods are static but they are backed by per-thread data structures.  The static methods allow singleton access but the <xref:System.Windows.Interop.ComponentDispatcher> is sorting out the appropriate per-thread operations.  \n  \n The owner of the message pump is defined by the code that calls the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] function  [GetMessage](http://msdn.microsoft.com/library/ms644936.aspx). The owner calls <xref:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage%2A> for every keyboard message. This method raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage> event with the messages contained in the event data. If that event is not handled, the owner raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage> event with the messages contained in the event argument.  \n  \n> [!NOTE]\n>  Only keyboard messages are supported.","nodes":[{"pos":[0,304],"content":"Although the class itself is static, all members of <xref:System.Windows.Interop.ComponentDispatcher> are specific to a particular thread. For example, if you examine the value of <xref:System.Windows.Interop.ComponentDispatcher.IsThreadModal%2A> on two different threads, you might get different values.","nodes":[{"content":"Although the class itself is static, all members of <xref:System.Windows.Interop.ComponentDispatcher> are specific to a particular thread. For example, if you examine the value of <xref:System.Windows.Interop.ComponentDispatcher.IsThreadModal%2A> on two different threads, you might get different values.","pos":[0,304],"nodes":[{"content":"Although the class itself is static, all members of <ph id=\"ph1\">&lt;xref:System.Windows.Interop.ComponentDispatcher&gt;</ph> are specific to a particular thread.","pos":[0,138],"source":"Although the class itself is static, all members of <xref:System.Windows.Interop.ComponentDispatcher> are specific to a particular thread."},{"content":"For example, if you examine the value of <ph id=\"ph1\">&lt;xref:System.Windows.Interop.ComponentDispatcher.IsThreadModal%2A&gt;</ph> on two different threads, you might get different values.","pos":[139,304],"source":" For example, if you examine the value of <xref:System.Windows.Interop.ComponentDispatcher.IsThreadModal%2A> on two different threads, you might get different values."}]}]},{"pos":[311,539],"content":"The methods are static but they are backed by per-thread data structures.  The static methods allow singleton access but the <xref:System.Windows.Interop.ComponentDispatcher> is sorting out the appropriate per-thread operations.","nodes":[{"content":"The methods are static but they are backed by per-thread data structures.  The static methods allow singleton access but the <xref:System.Windows.Interop.ComponentDispatcher> is sorting out the appropriate per-thread operations.","pos":[0,228],"nodes":[{"content":"The methods are static but they are backed by per-thread data structures.","pos":[0,73]},{"content":"The static methods allow singleton access but the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.ComponentDispatcher&gt;</ph> is sorting out the appropriate per-thread operations.","pos":[75,228],"source":"  The static methods allow singleton access but the <xref:System.Windows.Interop.ComponentDispatcher> is sorting out the appropriate per-thread operations."}]}]},{"pos":[546,1194],"content":"The owner of the message pump is defined by the code that calls the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] function  [GetMessage](http://msdn.microsoft.com/library/ms644936.aspx). The owner calls <xref:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage%2A> for every keyboard message. This method raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage> event with the messages contained in the event data. If that event is not handled, the owner raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage> event with the messages contained in the event argument.","nodes":[{"content":"The owner of the message pump is defined by the code that calls the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> function  <bpt id=\"p1\">[</bpt>GetMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/ms644936.aspx)</ept>.","pos":[0,204],"source":"The owner of the message pump is defined by the code that calls the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] function  [GetMessage](http://msdn.microsoft.com/library/ms644936.aspx)."},{"content":"The owner calls <ph id=\"ph1\">&lt;xref:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage%2A&gt;</ph> for every keyboard message.","pos":[205,320],"source":" The owner calls <xref:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage%2A> for every keyboard message."},{"content":"This method raises the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage&gt;</ph> event with the messages contained in the event data.","pos":[321,466],"source":" This method raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage> event with the messages contained in the event data."},{"content":"If that event is not handled, the owner raises the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage&gt;</ph> event with the messages contained in the event argument.","pos":[467,648],"source":" If that event is not handled, the owner raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage> event with the messages contained in the event argument."}]},{"pos":[1202,1250],"content":"[!NOTE]\n Only keyboard messages are supported.","leadings":["","> "],"nodes":[{"content":"Only keyboard messages are supported.","pos":[9,46]}]}],"pos":[1237,2497],"yaml":true,"extradata":"MT"},{"content":"Gets the last message that was raised.","nodes":[{"pos":[0,38],"content":"Gets the last message that was raised.","nodes":[{"content":"Gets the last message that was raised.","pos":[0,38]}]}],"pos":[3936,3975],"yaml":true},{"content":"The last message.","nodes":[{"pos":[0,17],"content":"The last message.","nodes":[{"content":"The last message.","pos":[0,17]}]}],"pos":[4197,4215],"yaml":true},{"content":"Occurs when a thread becomes modal.","nodes":[{"pos":[0,35],"content":"Occurs when a thread becomes modal.","nodes":[{"content":"Occurs when a thread becomes modal.","pos":[0,35]}]}],"pos":[5368,5404],"yaml":true},{"content":"Gets a value that indicates whether the thread is modal.","nodes":[{"pos":[0,56],"content":"Gets a value that indicates whether the thread is modal.","nodes":[{"content":"Gets a value that indicates whether the thread is modal.","pos":[0,56]}]}],"pos":[6762,6819],"yaml":true},{"content":"`true` if the thread is modal; otherwise, `false`.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">`true`</ph> if the thread is modal; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the thread is modal; otherwise, `false`."}],"pos":[6998,7051],"yaml":true},{"content":"Occurs when a modal thread becomes nonmodal.","nodes":[{"pos":[0,44],"content":"Occurs when a modal thread becomes nonmodal.","nodes":[{"content":"Occurs when a modal thread becomes nonmodal.","pos":[0,44]}]}],"pos":[8195,8240],"yaml":true},{"content":"Called to indicate that a modal thread is no longer modal.","nodes":[{"pos":[0,58],"content":"Called to indicate that a modal thread is no longer modal.","nodes":[{"content":"Called to indicate that a modal thread is no longer modal.","pos":[0,58]}]}],"pos":[9572,9631],"yaml":true},{"content":"Called to indicate that the thread is modal.","nodes":[{"pos":[0,44],"content":"Called to indicate that the thread is modal.","nodes":[{"content":"Called to indicate that the thread is modal.","pos":[0,44]}]}],"pos":[10840,10885],"yaml":true},{"content":"Called to indicate that a thread is idle.","nodes":[{"pos":[0,41],"content":"Called to indicate that a thread is idle.","nodes":[{"content":"Called to indicate that a thread is idle.","pos":[0,41]}]}],"pos":[12118,12160],"yaml":true},{"content":"Indicates that a new message is available for possible handling.","nodes":[{"pos":[0,64],"content":"Indicates that a new message is available for possible handling.","nodes":[{"content":"Indicates that a new message is available for possible handling.","pos":[0,64]}]}],"pos":[13543,13608],"yaml":true},{"content":"The owner of the message pump should call this method for every keyboard message.","nodes":[{"pos":[0,81],"content":"The owner of the message pump should call this method for every keyboard message.","nodes":[{"content":"The owner of the message pump should call this method for every keyboard message.","pos":[0,81]}]}],"pos":[13619,13701],"yaml":true,"extradata":"MT"},{"content":"The message and its associated data.","nodes":[{"pos":[0,36],"content":"The message and its associated data.","nodes":[{"content":"The message and its associated data.","pos":[0,36]}]}],"pos":[13939,13976],"yaml":true},{"content":"`true`, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. `false`, if the message was not processed. In this case, the owner of the message pump should call the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] function [TranslateMessage](http://msdn.microsoft.com/library/ms644955.aspx) followed by [DispatchMessage](http://msdn.microsoft.com/library/ms644934.aspx).","nodes":[{"pos":[0,463],"content":"`true`, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. `false`, if the message was not processed. In this case, the owner of the message pump should call the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] function [TranslateMessage](http://msdn.microsoft.com/library/ms644955.aspx) followed by [DispatchMessage](http://msdn.microsoft.com/library/ms644934.aspx).","nodes":[{"content":"<ph id=\"ph1\">`true`</ph>, if one of the modules listening to the message loop processed the message.","pos":[0,82],"source":"`true`, if one of the modules listening to the message loop processed the message."},{"content":"The owner of the message loop should ignore the message.","pos":[83,139]},{"content":"<ph id=\"ph1\">`false`</ph>, if the message was not processed.","pos":[140,182],"source":"`false`, if the message was not processed."},{"content":"In this case, the owner of the message pump should call the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> function <bpt id=\"p1\">[</bpt>TranslateMessage<ept id=\"p1\">](http://msdn.microsoft.com/library/ms644955.aspx)</ept> followed by <bpt id=\"p2\">[</bpt>DispatchMessage<ept id=\"p2\">](http://msdn.microsoft.com/library/ms644934.aspx)</ept>.","pos":[183,463],"source":" In this case, the owner of the message pump should call the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] function [TranslateMessage](http://msdn.microsoft.com/library/ms644955.aspx) followed by [DispatchMessage](http://msdn.microsoft.com/library/ms644934.aspx)."}]}],"pos":[14034,14500],"yaml":true},{"content":"Occurs when the message pump receives a keyboard message.","nodes":[{"pos":[0,57],"content":"Occurs when the message pump receives a keyboard message.","nodes":[{"content":"Occurs when the message pump receives a keyboard message.","pos":[0,57]}]}],"pos":[15647,15705],"yaml":true},{"content":"Occurs when the thread is idle.","nodes":[{"pos":[0,31],"content":"Occurs when the thread is idle.","nodes":[{"content":"Occurs when the thread is idle.","pos":[0,31]}]}],"pos":[17110,17142],"yaml":true},{"content":"If there are no messages in the queue, then the idle state announced by the <xref:System.Windows.Interop.ComponentDispatcher.ThreadIdle> event is an efficient time to do processing.","nodes":[{"pos":[0,181],"content":"If there are no messages in the queue, then the idle state announced by the <xref:System.Windows.Interop.ComponentDispatcher.ThreadIdle> event is an efficient time to do processing.","nodes":[{"content":"If there are no messages in the queue, then the idle state announced by the <ph id=\"ph1\">&lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadIdle&gt;</ph> event is an efficient time to do processing.","pos":[0,181],"source":"If there are no messages in the queue, then the idle state announced by the <xref:System.Windows.Interop.ComponentDispatcher.ThreadIdle> event is an efficient time to do processing."}]}],"pos":[17153,17335],"yaml":true,"extradata":"MT"},{"content":"Occurs when the message pump receives a keyboard message.","nodes":[{"pos":[0,57],"content":"Occurs when the message pump receives a keyboard message.","nodes":[{"content":"Occurs when the message pump receives a keyboard message.","pos":[0,57]}]}],"pos":[18744,18802],"yaml":true},{"content":"This event should be raised after <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage>, if that event is not handled.","nodes":[{"pos":[0,134],"content":"This event should be raised after <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage>, if that event is not handled.","nodes":[{"content":"This event should be raised after <ph id=\"ph1\">&lt;xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage&gt;</ph>, if that event is not handled.","pos":[0,134],"source":"This event should be raised after <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage>, if that event is not handled."}]}],"pos":[18813,18948],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Interop.ComponentDispatcher\n  commentId: T:System.Windows.Interop.ComponentDispatcher\n  id: ComponentDispatcher\n  children:\n  - System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage\n  - System.Windows.Interop.ComponentDispatcher.EnterThreadModal\n  - System.Windows.Interop.ComponentDispatcher.IsThreadModal\n  - System.Windows.Interop.ComponentDispatcher.LeaveThreadModal\n  - System.Windows.Interop.ComponentDispatcher.PopModal\n  - System.Windows.Interop.ComponentDispatcher.PushModal\n  - System.Windows.Interop.ComponentDispatcher.RaiseIdle\n  - System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)\n  - System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage\n  - System.Windows.Interop.ComponentDispatcher.ThreadIdle\n  - System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage\n  langs:\n  - csharp\n  name: ComponentDispatcher\n  nameWithType: ComponentDispatcher\n  fullName: System.Windows.Interop.ComponentDispatcher\n  type: Class\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Enables shared control of the message pump between Win32 and WPF in interoperation scenarios.\n  remarks: \"Although the class itself is static, all members of <xref:System.Windows.Interop.ComponentDispatcher> are specific to a particular thread. For example, if you examine the value of <xref:System.Windows.Interop.ComponentDispatcher.IsThreadModal%2A> on two different threads, you might get different values.  \\n  \\n The methods are static but they are backed by per-thread data structures.  The static methods allow singleton access but the <xref:System.Windows.Interop.ComponentDispatcher> is sorting out the appropriate per-thread operations.  \\n  \\n The owner of the message pump is defined by the code that calls the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] function  [GetMessage](http://msdn.microsoft.com/library/ms644936.aspx). The owner calls <xref:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage%2A> for every keyboard message. This method raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage> event with the messages contained in the event data. If that event is not handled, the owner raises the <xref:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage> event with the messages contained in the event argument.  \\n  \\n> [!NOTE]\\n>  Only keyboard messages are supported.\"\n  syntax:\n    content: public static class ComponentDispatcher\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage\n  commentId: P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage\n  id: CurrentKeyboardMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: CurrentKeyboardMessage\n  nameWithType: ComponentDispatcher.CurrentKeyboardMessage\n  fullName: ComponentDispatcher.CurrentKeyboardMessage\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Gets the last message that was raised.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public static System.Windows.Interop.MSG CurrentKeyboardMessage { get; }\n    return:\n      type: System.Windows.Interop.MSG\n      description: The last message.\n  overload: System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.ComponentDispatcher.EnterThreadModal\n  commentId: E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal\n  id: EnterThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: EnterThreadModal\n  nameWithType: ComponentDispatcher.EnterThreadModal\n  fullName: ComponentDispatcher.EnterThreadModal\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Occurs when a thread becomes modal.\n  syntax:\n    content: >-\n      [add: System.Security.SecurityCritical]\n\n      [remove: System.Security.SecurityCritical]\n\n      public static event EventHandler EnterThreadModal;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  attributes:\n  - type: 'add: System.Security.SecurityCritical'\n  - type: 'remove: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.ComponentDispatcher.IsThreadModal\n  commentId: P:System.Windows.Interop.ComponentDispatcher.IsThreadModal\n  id: IsThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: IsThreadModal\n  nameWithType: ComponentDispatcher.IsThreadModal\n  fullName: ComponentDispatcher.IsThreadModal\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Gets a value that indicates whether the thread is modal.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public static bool IsThreadModal { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the thread is modal; otherwise, `false`.'\n  overload: System.Windows.Interop.ComponentDispatcher.IsThreadModal*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.ComponentDispatcher.LeaveThreadModal\n  commentId: E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal\n  id: LeaveThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: LeaveThreadModal\n  nameWithType: ComponentDispatcher.LeaveThreadModal\n  fullName: ComponentDispatcher.LeaveThreadModal\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Occurs when a modal thread becomes nonmodal.\n  syntax:\n    content: >-\n      [add: System.Security.SecurityCritical]\n\n      [remove: System.Security.SecurityCritical]\n\n      public static event EventHandler LeaveThreadModal;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  attributes:\n  - type: 'add: System.Security.SecurityCritical'\n  - type: 'remove: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.ComponentDispatcher.PopModal\n  commentId: M:System.Windows.Interop.ComponentDispatcher.PopModal\n  id: PopModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: PopModal()\n  nameWithType: ComponentDispatcher.PopModal()\n  fullName: ComponentDispatcher.PopModal()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Called to indicate that a modal thread is no longer modal.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static void PopModal ();\n    parameters: []\n  overload: System.Windows.Interop.ComponentDispatcher.PopModal*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Interop.ComponentDispatcher.PushModal\n  commentId: M:System.Windows.Interop.ComponentDispatcher.PushModal\n  id: PushModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: PushModal()\n  nameWithType: ComponentDispatcher.PushModal()\n  fullName: ComponentDispatcher.PushModal()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Called to indicate that the thread is modal.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static void PushModal ();\n    parameters: []\n  overload: System.Windows.Interop.ComponentDispatcher.PushModal*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseIdle\n  commentId: M:System.Windows.Interop.ComponentDispatcher.RaiseIdle\n  id: RaiseIdle\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: RaiseIdle()\n  nameWithType: ComponentDispatcher.RaiseIdle()\n  fullName: ComponentDispatcher.RaiseIdle()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Called to indicate that a thread is idle.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static void RaiseIdle ();\n    parameters: []\n  overload: System.Windows.Interop.ComponentDispatcher.RaiseIdle*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)\n  commentId: M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)\n  id: RaiseThreadMessage(System.Windows.Interop.MSG@)\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: RaiseThreadMessage(MSG)\n  nameWithType: ComponentDispatcher.RaiseThreadMessage(MSG)\n  fullName: ComponentDispatcher.RaiseThreadMessage(MSG)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Indicates that a new message is available for possible handling.\n  remarks: The owner of the message pump should call this method for every keyboard message.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static bool RaiseThreadMessage (ref System.Windows.Interop.MSG msg);\n    parameters:\n    - id: msg\n      type: System.Windows.Interop.MSG\n      description: The message and its associated data.\n    return:\n      type: System.Boolean\n      description: '`true`, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. `false`, if the message was not processed. In this case, the owner of the message pump should call the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] function [TranslateMessage](http://msdn.microsoft.com/library/ms644955.aspx) followed by [DispatchMessage](http://msdn.microsoft.com/library/ms644934.aspx).'\n  overload: System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage\n  commentId: E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage\n  id: ThreadFilterMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: ThreadFilterMessage\n  nameWithType: ComponentDispatcher.ThreadFilterMessage\n  fullName: ComponentDispatcher.ThreadFilterMessage\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Occurs when the message pump receives a keyboard message.\n  syntax:\n    content: >-\n      [add: System.Security.SecurityCritical]\n\n      [remove: System.Security.SecurityCritical]\n\n      public static event System.Windows.Interop.ThreadMessageEventHandler ThreadFilterMessage;\n    return:\n      type: System.Windows.Interop.ThreadMessageEventHandler\n      description: ''\n  exceptions: []\n  attributes:\n  - type: 'add: System.Security.SecurityCritical'\n  - type: 'remove: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadIdle\n  commentId: E:System.Windows.Interop.ComponentDispatcher.ThreadIdle\n  id: ThreadIdle\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: ThreadIdle\n  nameWithType: ComponentDispatcher.ThreadIdle\n  fullName: ComponentDispatcher.ThreadIdle\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Occurs when the thread is idle.\n  remarks: If there are no messages in the queue, then the idle state announced by the <xref:System.Windows.Interop.ComponentDispatcher.ThreadIdle> event is an efficient time to do processing.\n  syntax:\n    content: >-\n      [add: System.Security.SecurityCritical]\n\n      [remove: System.Security.SecurityCritical]\n\n      public static event EventHandler ThreadIdle;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  attributes:\n  - type: 'add: System.Security.SecurityCritical'\n  - type: 'remove: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage\n  commentId: E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage\n  id: ThreadPreprocessMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  langs:\n  - csharp\n  name: ThreadPreprocessMessage\n  nameWithType: ComponentDispatcher.ThreadPreprocessMessage\n  fullName: ComponentDispatcher.ThreadPreprocessMessage\n  type: Event\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows.Interop\n  summary: Occurs when the message pump receives a keyboard message.\n  remarks: This event should be raised after <xref:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage>, if that event is not handled.\n  syntax:\n    content: >-\n      [add: System.Security.SecurityCritical]\n\n      [remove: System.Security.SecurityCritical]\n\n      public static event System.Windows.Interop.ThreadMessageEventHandler ThreadPreprocessMessage;\n    return:\n      type: System.Windows.Interop.ThreadMessageEventHandler\n      description: ''\n  exceptions: []\n  attributes:\n  - type: 'add: System.Security.SecurityCritical'\n  - type: 'remove: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: CurrentKeyboardMessage\n  nameWithType: ComponentDispatcher.CurrentKeyboardMessage\n  fullName: ComponentDispatcher.CurrentKeyboardMessage\n- uid: System.Windows.Interop.MSG\n  parent: System.Windows.Interop\n  isExternal: false\n  name: MSG\n  nameWithType: MSG\n  fullName: System.Windows.Interop.MSG\n- uid: System.Windows.Interop.ComponentDispatcher.EnterThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: EnterThreadModal\n  nameWithType: ComponentDispatcher.EnterThreadModal\n  fullName: ComponentDispatcher.EnterThreadModal\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Interop.ComponentDispatcher.IsThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: IsThreadModal\n  nameWithType: ComponentDispatcher.IsThreadModal\n  fullName: ComponentDispatcher.IsThreadModal\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Interop.ComponentDispatcher.LeaveThreadModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: LeaveThreadModal\n  nameWithType: ComponentDispatcher.LeaveThreadModal\n  fullName: ComponentDispatcher.LeaveThreadModal\n- uid: System.Windows.Interop.ComponentDispatcher.PopModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: PopModal()\n  nameWithType: ComponentDispatcher.PopModal()\n  fullName: ComponentDispatcher.PopModal()\n- uid: System.Windows.Interop.ComponentDispatcher.PushModal\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: PushModal()\n  nameWithType: ComponentDispatcher.PushModal()\n  fullName: ComponentDispatcher.PushModal()\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseIdle\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: RaiseIdle()\n  nameWithType: ComponentDispatcher.RaiseIdle()\n  fullName: ComponentDispatcher.RaiseIdle()\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: RaiseThreadMessage(MSG)\n  nameWithType: ComponentDispatcher.RaiseThreadMessage(MSG)\n  fullName: ComponentDispatcher.RaiseThreadMessage(MSG)\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: ThreadFilterMessage\n  nameWithType: ComponentDispatcher.ThreadFilterMessage\n  fullName: ComponentDispatcher.ThreadFilterMessage\n- uid: System.Windows.Interop.ThreadMessageEventHandler\n  parent: System.Windows.Interop\n  isExternal: false\n  name: ThreadMessageEventHandler\n  nameWithType: ThreadMessageEventHandler\n  fullName: System.Windows.Interop.ThreadMessageEventHandler\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadIdle\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: ThreadIdle\n  nameWithType: ComponentDispatcher.ThreadIdle\n  fullName: ComponentDispatcher.ThreadIdle\n- uid: System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: ThreadPreprocessMessage\n  nameWithType: ComponentDispatcher.ThreadPreprocessMessage\n  fullName: ComponentDispatcher.ThreadPreprocessMessage\n- uid: System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: CurrentKeyboardMessage\n  nameWithType: ComponentDispatcher.CurrentKeyboardMessage\n  fullName: ComponentDispatcher.CurrentKeyboardMessage\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n- uid: System.Windows.Interop.ComponentDispatcher.IsThreadModal*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: IsThreadModal\n  nameWithType: ComponentDispatcher.IsThreadModal\n  fullName: ComponentDispatcher.IsThreadModal\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n- uid: System.Windows.Interop.ComponentDispatcher.PopModal*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: PopModal\n  nameWithType: ComponentDispatcher.PopModal\n  fullName: ComponentDispatcher.PopModal\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n- uid: System.Windows.Interop.ComponentDispatcher.PushModal*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: PushModal\n  nameWithType: ComponentDispatcher.PushModal\n  fullName: ComponentDispatcher.PushModal\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseIdle*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: RaiseIdle\n  nameWithType: ComponentDispatcher.RaiseIdle\n  fullName: ComponentDispatcher.RaiseIdle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n- uid: System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage*\n  parent: System.Windows.Interop.ComponentDispatcher\n  isExternal: false\n  name: RaiseThreadMessage\n  nameWithType: ComponentDispatcher.RaiseThreadMessage\n  fullName: ComponentDispatcher.RaiseThreadMessage\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Interop/ComponentDispatcher.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}