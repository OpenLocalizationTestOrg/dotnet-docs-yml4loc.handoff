<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7f0f569a8c4f40950df4dbd36a01b0afcd10728e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ComponentModel.LicenseManager.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9cf61812a66fdb7200bd41c8104f6266faf5d9b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe425007d83863ae8c04aec04e39f159ccd8082c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides properties and methods to add a license to a component and to manage a <ph id="ph1">&lt;xref href="System.ComponentModel.LicenseProvider"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>This class cannot be inherited.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager&gt;</ph> class provides the following <ph id="ph2">`static`</ph> properties: <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.ComponentModel.LicenseManager.UsageMode%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The class also provides the following <ph id="ph1">`static`</ph> methods: <ph id="ph2">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create a component that you want to license, you must do the following:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Specify the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> by marking the component with a <ph id="ph2">&lt;xref:System.ComponentModel.LicenseProviderAttribute&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> in the constructor of the component.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> throws a <ph id="ph2">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when it tries to create an instance without a valid license.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> does not throw an exception.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> on any license that is granted when the component is disposed or finalized.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information on licensing, see <bpt id="p1">[</bpt>How to: License Components and Controls<ept id="p1">](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Creates an instance of the specified type, given a context in which you can use the licensed instance.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> you specify as the <ph id="ph2">`creationContext`</ph> parameter is used as the <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> for the life of this <ph id="ph4">&lt;xref:System.ComponentModel.License&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> method blocks all other threads in the <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> from modifying the <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph>, allowing <ph id="ph4">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> to behave as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that represents the type to create.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.LicenseContext"&gt;&lt;/xref&gt;</ph> that specifies when you can use the licensed instance.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An instance of the specified type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> you specify as the <ph id="ph2">`creationContext`</ph> parameter is used as the <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> for the life of this <ph id="ph4">&lt;xref:System.ComponentModel.License&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method blocks all other threads in the <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> from modifying the <ph id="ph2">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph>, allowing <ph id="ph3">&lt;xref:System.ComponentModel.LicenseManager.CreateWithContext%2A&gt;</ph> to behave as an atomic operation.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that represents the type to create.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.LicenseContext"&gt;&lt;/xref&gt;</ph> that specifies when you can use the licensed instance.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>An array of type <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> that represents the arguments for the type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An instance of the specified type with the given array of arguments.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets or sets the current <ph id="ph1">&lt;xref href="System.ComponentModel.LicenseContext"&gt;&lt;/xref&gt;</ph>, which specifies when you can use the licensed object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the user requests a valid <ph id="ph1">&lt;xref:System.ComponentModel.License&gt;</ph>, the user must give the context in which the <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> is valid to the <ph id="ph3">&lt;xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> returned by this property should be passed to all <ph id="ph2">&lt;xref:System.ComponentModel.LicenseProvider&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.LicenseContext"&gt;&lt;/xref&gt;</ph> that specifies when you can use the licensed object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ComponentModel.LicenseManager.CurrentContext"&gt;&lt;/xref&gt;</ph> property is currently locked and cannot be changed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns whether the given type has a valid license.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> to find a valid license for.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the given type is licensed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Determines whether a valid license can be granted for the specified type.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when the type is either not licensed, or is licensed and the license is valid.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not throw a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when it cannot grant a valid <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> method throws exceptions.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that represents the type of object that requests the <ph id="ph2">&lt;xref href="System.ComponentModel.License"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a valid license can be granted; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Determines whether a valid license can be granted for the specified instance of the type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This method creates a valid <ph id="ph1">&lt;xref href="System.ComponentModel.License"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method returns <ph id="ph2">`true`</ph> when the <ph id="ph3">`type`</ph> parameter is not licensed, or when it is licensed and the <ph id="ph4">`license`</ph> parameter is valid.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method does not throw a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when it cannot grant a valid <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.Validate%2A&gt;</ph> method throws exceptions.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">`license`</ph> parameter is not <ph id="ph2">`null`</ph> after this call, the object asking for a <ph id="ph3">&lt;xref:System.ComponentModel.License&gt;</ph> must dispose of the license by calling the <ph id="ph4">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> method when the object is disposed of or finalized.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that represents the type of object that requests the license.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An object of the specified type or a type derived from the specified type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.License"&gt;&lt;/xref&gt;</ph> that is a valid license, or <ph id="ph2">`null`</ph> if a valid license cannot be granted.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if a valid <ph id="ph2">&lt;xref href="System.ComponentModel.License"&gt;&lt;/xref&gt;</ph> can be granted; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Prevents changes being made to the current <ph id="ph1">&lt;xref href="System.ComponentModel.LicenseContext"&gt;&lt;/xref&gt;</ph> of the given object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> to get the <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> of an object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method locks the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph>, preventing the <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> from being retrieved.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The object whose current context you want to lock.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The context is already locked.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Allows changes to be made to the current <ph id="ph1">&lt;xref href="System.ComponentModel.LicenseContext"&gt;&lt;/xref&gt;</ph> of the given object.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph> to get the <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> of an object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method unlocks the <ph id="ph1">&lt;xref:System.ComponentModel.LicenseContext&gt;</ph>, allowing the <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> to be retrieved.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The object whose current context you want to unlock.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;contextUser&lt;/code&gt;</ph> represents a different user than the one specified in a previous call to <ph id="ph2">&lt;xref href="System.ComponentModel.LicenseManager.LockContext(System.Object)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.ComponentModel.LicenseUsageMode"&gt;&lt;/xref&gt;</ph> which specifies when you can use the licensed object for the <ph id="ph2">&lt;xref href="System.ComponentModel.LicenseManager.CurrentContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property cannot find a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.CurrentContext%2A&gt;</ph> value, it returns <ph id="ph2">&lt;xref:System.ComponentModel.LicenseUsageMode.Runtime&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.ComponentModel.LicenseUsageMode"&gt;&lt;/xref&gt;</ph> values, as specified in the <ph id="ph2">&lt;xref href="System.ComponentModel.LicenseManager.CurrentContext"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Determines whether a license can be granted for the specified type.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method throws a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when a valid <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> cannot be granted.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method does not throw an exception.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that represents the type of object that requests the license.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ComponentModel.License"&gt;&lt;/xref&gt;</ph> cannot be granted.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Determines whether a license can be granted for the instance of the specified type.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method throws a <ph id="ph1">&lt;xref:System.ComponentModel.LicenseException&gt;</ph> when a valid <ph id="ph2">&lt;xref:System.ComponentModel.License&gt;</ph> cannot be granted.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.LicenseManager.IsValid%2A&gt;</ph> method does not throw an exception.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>All objects asking for a <ph id="ph1">&lt;xref:System.ComponentModel.License&gt;</ph> must dispose of the license by calling the <ph id="ph2">&lt;xref:System.ComponentModel.License.Dispose%2A&gt;</ph> method when the object is disposed of or finalized.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Type"&gt;&lt;/xref&gt;</ph> that represents the type of object that requests the license.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> of the specified type or a type derived from the specified type.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A valid <ph id="ph1">&lt;xref href="System.ComponentModel.License"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The type is licensed, but a <ph id="ph1">&lt;xref href="System.ComponentModel.License"&gt;&lt;/xref&gt;</ph> cannot be granted.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>