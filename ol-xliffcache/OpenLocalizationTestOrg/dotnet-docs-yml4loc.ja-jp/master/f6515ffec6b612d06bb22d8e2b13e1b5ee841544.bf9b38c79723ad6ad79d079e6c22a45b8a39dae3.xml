{"nodes":[{"content":"Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.","nodes":[{"pos":[0,104],"content":"Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.","nodes":[{"content":"Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.","pos":[0,104],"nodes":[{"content":"Represents a set of access rights allowed or denied for a user or group.","pos":[0,72]},{"content":"This class cannot be inherited.","pos":[73,104]}]}]}],"pos":[982,1087],"yaml":true},{"content":"The <xref:System.Security.AccessControl.EventWaitHandleAccessRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on named system events. For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.EventWaitHandleSecurity>.  \n  \n> [!NOTE]\n>  Windows access control security is meaningful only for named system events. If an <xref:System.Threading.EventWaitHandle> object represents a local event, access control is irrelevant.  \n  \n To get a list of the rules currently applied to a named event, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> method to get an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> method to obtain a collection of <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects.  \n  \n <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all access rules for an event, the set contains the minimum number of rules currently required to express all the access control entries.  \n  \n> [!NOTE]\n>  The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you get the current list of rules, it might not look exactly like the list of all the rules you have added.  \n  \n Use <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects to specify the access rights to allow or deny to a user or group. An <xref:System.Security.AccessControl.EventWaitHandleAccessRule> object always represents either allowed access or denied access, never both.  \n  \n To apply a rule to a named system event, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. Modify the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object by using its methods to add the rule, and then use the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.  \n  \n> [!IMPORTANT]\n>  Changes you make to an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object do not affect the access levels of the named event until you call the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the named event.  \n  \n <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects are immutable. Security for an event is modified using the methods of the <xref:System.Security.AccessControl.EventWaitHandleSecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.  \n  \n> [!NOTE]\n>  Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.","nodes":[{"pos":[0,377],"content":"The <xref:System.Security.AccessControl.EventWaitHandleAccessRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on named system events. For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.EventWaitHandleSecurity>.","nodes":[{"content":"The <xref:System.Security.AccessControl.EventWaitHandleAccessRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on named system events. For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.EventWaitHandleSecurity>.","pos":[0,377],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on named system events.","pos":[0,201],"source":"The <xref:System.Security.AccessControl.EventWaitHandleAccessRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on named system events."},{"content":"For an overview of these classes, and their relationship to the underlying Windows access control structures, see <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph>.","pos":[202,377],"source":" For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.EventWaitHandleSecurity>."}]}]},{"pos":[385,580],"content":"[!NOTE]\n Windows access control security is meaningful only for named system events. If an <xref:System.Threading.EventWaitHandle> object represents a local event, access control is irrelevant.","leadings":["","> "],"nodes":[{"content":" Windows access control security is meaningful only for named system events. If an <xref:System.Threading.EventWaitHandle> object represents a local event, access control is irrelevant.","pos":[8,193],"nodes":[{"content":"Windows access control security is meaningful only for named system events.","pos":[1,76]},{"content":"If an <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object represents a local event, access control is irrelevant.","pos":[77,185],"source":" If an <xref:System.Threading.EventWaitHandle> object represents a local event, access control is irrelevant."}]}]},{"pos":[587,1026],"content":"To get a list of the rules currently applied to a named event, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> method to get an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> method to obtain a collection of <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects.","nodes":[{"content":"To get a list of the rules currently applied to a named event, use the <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName&gt;</ph> method to get an <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object, and then use its <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A&gt;</ph> method to obtain a collection of <ph id=\"ph4\">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph> objects.","pos":[0,439],"source":"To get a list of the rules currently applied to a named event, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> method to get an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> method to obtain a collection of <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects."}]},{"pos":[1033,1375],"content":"<xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all access rules for an event, the set contains the minimum number of rules currently required to express all the access control entries.","nodes":[{"content":"<xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all access rules for an event, the set contains the minimum number of rules currently required to express all the access control entries.","pos":[0,342],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL).","pos":[0,180],"source":"<xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL)."},{"content":"When you get the set of all access rules for an event, the set contains the minimum number of rules currently required to express all the access control entries.","pos":[181,342]}]}]},{"pos":[1383,1695],"content":"[!NOTE]\n The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you get the current list of rules, it might not look exactly like the list of all the rules you have added.","leadings":["","> "],"nodes":[{"content":" The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you get the current list of rules, it might not look exactly like the list of all the rules you have added.","pos":[8,310],"nodes":[{"content":"The underlying access control entries change as you apply and remove rules.","pos":[1,76]},{"content":"The information in rules is merged if possible, to maintain the smallest number of access control entries.","pos":[77,183]},{"content":"Thus, when you get the current list of rules, it might not look exactly like the list of all the rules you have added.","pos":[184,302]}]}]},{"pos":[1702,1985],"content":"Use <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects to specify the access rights to allow or deny to a user or group. An <xref:System.Security.AccessControl.EventWaitHandleAccessRule> object always represents either allowed access or denied access, never both.","nodes":[{"content":"Use <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects to specify the access rights to allow or deny to a user or group. An <xref:System.Security.AccessControl.EventWaitHandleAccessRule> object always represents either allowed access or denied access, never both.","pos":[0,283],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph> objects to specify the access rights to allow or deny to a user or group.","pos":[0,140],"source":"Use <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects to specify the access rights to allow or deny to a user or group."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph> object always represents either allowed access or denied access, never both.","pos":[141,283],"source":" An <xref:System.Security.AccessControl.EventWaitHandleAccessRule> object always represents either allowed access or denied access, never both."}]}]},{"pos":[1992,2471],"content":"To apply a rule to a named system event, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. Modify the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object by using its methods to add the rule, and then use the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.","nodes":[{"content":"To apply a rule to a named system event, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. Modify the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object by using its methods to add the rule, and then use the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.","pos":[0,479],"nodes":[{"content":"To apply a rule to a named system event, use the <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName&gt;</ph> method to get the <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object.","pos":[0,220],"source":"To apply a rule to a named system event, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object."},{"content":"Modify the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object by using its methods to add the rule, and then use the <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName&gt;</ph> method to reattach the security object.","pos":[221,479],"source":" Modify the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object by using its methods to add the rule, and then use the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object."}]}]},{"pos":[2479,2805],"content":"[!IMPORTANT]\n Changes you make to an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object do not affect the access levels of the named event until you call the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the named event.","leadings":["","> "],"nodes":[{"content":"Changes you make to an <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> object do not affect the access levels of the named event until you call the <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName&gt;</ph> method to assign the altered security object to the named event.","pos":[14,324],"source":" Changes you make to an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object do not affect the access levels of the named event until you call the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the named event."}]},{"pos":[2812,3115],"content":"<xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects are immutable. Security for an event is modified using the methods of the <xref:System.Security.AccessControl.EventWaitHandleSecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.","nodes":[{"content":"<xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects are immutable. Security for an event is modified using the methods of the <xref:System.Security.AccessControl.EventWaitHandleSecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.","pos":[0,303],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph> objects are immutable.","pos":[0,85],"source":"<xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects are immutable."},{"content":"Security for an event is modified using the methods of the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.EventWaitHandleSecurity&gt;</ph> class to add or remove rules; as you do this, the underlying access control entries are modified.","pos":[86,303],"source":" Security for an event is modified using the methods of the <xref:System.Security.AccessControl.EventWaitHandleSecurity> class to add or remove rules; as you do this, the underlying access control entries are modified."}]}]},{"pos":[3123,3232],"content":"[!NOTE]\n Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.","leadings":["","> "],"nodes":[{"content":"Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.","pos":[9,107]}]}],"pos":[1098,4355],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\"></xref> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.","nodes":[{"pos":[0,249],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\"&gt;&lt;/xref&gt;</ph> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\"></xref> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied."}],"pos":[8607,8857],"yaml":true},{"content":"To wait on an <xref:System.Threading.EventWaitHandle> (by calling the <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> or <xref:System.Threading.WaitHandle.WaitAll%2A> method), a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an event by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method, or to reset it to the unsignaled state by calling the <xref:System.Threading.EventWaitHandle.Reset%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an <xref:System.Threading.EventWaitHandle> object and then wait on it by calling the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> access.","nodes":[{"pos":[0,959],"content":"To wait on an <xref:System.Threading.EventWaitHandle> (by calling the <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> or <xref:System.Threading.WaitHandle.WaitAll%2A> method), a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an event by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method, or to reset it to the unsignaled state by calling the <xref:System.Threading.EventWaitHandle.Reset%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an <xref:System.Threading.EventWaitHandle> object and then wait on it by calling the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> access.","nodes":[{"content":"To wait on an <xref:System.Threading.EventWaitHandle> (by calling the <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> or <xref:System.Threading.WaitHandle.WaitAll%2A> method), a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an event by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method, or to reset it to the unsignaled state by calling the <xref:System.Threading.EventWaitHandle.Reset%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an <xref:System.Threading.EventWaitHandle> object and then wait on it by calling the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> access.","pos":[0,959],"nodes":[{"content":"To wait on an <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> (by calling the <ph id=\"ph2\">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method), a user must have <ph id=\"ph5\">&lt;xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName&gt;</ph> access.","pos":[0,329],"source":"To wait on an <xref:System.Threading.EventWaitHandle> (by calling the <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> or <xref:System.Threading.WaitHandle.WaitAll%2A> method), a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access."},{"content":"To signal an event by calling the <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, or to reset it to the unsignaled state by calling the <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method, a user must have <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName&gt;</ph> access.","pos":[330,638],"source":" To signal an event by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method, or to reset it to the unsignaled state by calling the <xref:System.Threading.EventWaitHandle.Reset%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access."},{"content":"To signal an <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object and then wait on it by calling the <ph id=\"ph2\">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method, a user must have <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify&gt;</ph> access.","pos":[639,959],"source":" To signal an <xref:System.Threading.EventWaitHandle> object and then wait on it by calling the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> access."}]}]}],"pos":[8868,9828],"yaml":true,"extradata":"MT"},{"content":"The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.","nodes":[{"pos":[0,292],"content":"The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.","nodes":[{"content":"The user or group the rule applies to.","pos":[0,38]},{"content":"Must be of type <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph> or a type such as <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;&lt;/xref&gt;</ph> that can be converted to type <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph>.","pos":[39,292],"source":" Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."}]}],"pos":[10169,10462],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\"></xref> values specifying the rights allowed or denied.","nodes":[{"pos":[0,145],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.EventWaitHandleRights\"&gt;&lt;/xref&gt;</ph> values specifying the rights allowed or denied.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\"></xref> values specifying the rights allowed or denied."}],"pos":[10567,10713],"yaml":true},{"content":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied.","nodes":[{"pos":[0,139],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;&lt;/xref&gt;</ph> values specifying whether the rights are allowed or denied.","source":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied."}],"pos":[10807,10947],"yaml":true},{"content":"<code>eventRights</code> specifies an invalid value.  \n  \n -or-  \n  \n <code>type</code> specifies an invalid value.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;eventRights&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>eventRights</code> specifies an invalid value."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,115],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>type</code> specifies an invalid value."}],"pos":[11150,11272],"yaml":true},{"content":"<code>identity</code> is `null`.  \n  \n -or-  \n  \n <code>eventRights</code> is zero.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>identity</code> is `null`."},{"pos":[39,43],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[50,83],"content":"<ph id=\"ph1\">&lt;code&gt;eventRights&lt;/code&gt;</ph> is zero.","source":"<code>eventRights</code> is zero."}],"pos":[11374,11464],"yaml":true},{"content":"<code>identity</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.","nodes":[{"pos":[0,282],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is neither of type <ph id=\"ph2\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph> nor of a type such as <ph id=\"ph3\">&lt;xref href=\"System.Security.Principal.NTAccount\"&gt;&lt;/xref&gt;</ph> that can be converted to type <ph id=\"ph4\">&lt;xref href=\"System.Security.Principal.SecurityIdentifier\"&gt;&lt;/xref&gt;</ph>.","source":"<code>identity</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>."}],"pos":[11558,11841],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.","nodes":[{"pos":[0,261],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\"&gt;&lt;/xref&gt;</ph> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied."}],"pos":[13657,13919],"yaml":true},{"content":"To wait on an <xref:System.Threading.EventWaitHandle> (by calling the <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> or <xref:System.Threading.WaitHandle.WaitAll%2A> method), a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an event by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method, or to reset it to the unsignaled state by calling the <xref:System.Threading.EventWaitHandle.Reset%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an <xref:System.Threading.EventWaitHandle> object and then wait on it by calling the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> access.  \n  \n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> constructor.","nodes":[{"pos":[0,959],"content":"To wait on an <xref:System.Threading.EventWaitHandle> (by calling the <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> or <xref:System.Threading.WaitHandle.WaitAll%2A> method), a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an event by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method, or to reset it to the unsignaled state by calling the <xref:System.Threading.EventWaitHandle.Reset%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an <xref:System.Threading.EventWaitHandle> object and then wait on it by calling the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> access.","nodes":[{"content":"To wait on an <xref:System.Threading.EventWaitHandle> (by calling the <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> or <xref:System.Threading.WaitHandle.WaitAll%2A> method), a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an event by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method, or to reset it to the unsignaled state by calling the <xref:System.Threading.EventWaitHandle.Reset%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an <xref:System.Threading.EventWaitHandle> object and then wait on it by calling the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> access.","pos":[0,959],"nodes":[{"content":"To wait on an <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> (by calling the <ph id=\"ph2\">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> method), a user must have <ph id=\"ph5\">&lt;xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName&gt;</ph> access.","pos":[0,329],"source":"To wait on an <xref:System.Threading.EventWaitHandle> (by calling the <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> or <xref:System.Threading.WaitHandle.WaitAll%2A> method), a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access."},{"content":"To signal an event by calling the <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, or to reset it to the unsignaled state by calling the <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> method, a user must have <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName&gt;</ph> access.","pos":[330,638],"source":" To signal an event by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method, or to reset it to the unsignaled state by calling the <xref:System.Threading.EventWaitHandle.Reset%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access."},{"content":"To signal an <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> object and then wait on it by calling the <ph id=\"ph2\">&lt;xref:System.Threading.WaitHandle.SignalAndWait%2A&gt;</ph> method, a user must have <ph id=\"ph3\">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Security.AccessControl.EventWaitHandleRights.Modify&gt;</ph> access.","pos":[639,959],"source":" To signal an <xref:System.Threading.EventWaitHandle> object and then wait on it by calling the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> access."}]}]},{"pos":[966,1523],"content":"This constructor is equivalent to creating an <ph id=\"ph1\">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> object, by passing <ph id=\"ph2\">`identity`</ph> to the <ph id=\"ph3\">&lt;xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName&gt;</ph> constructor, and passing the newly created <ph id=\"ph4\">&lt;xref:System.Security.Principal.NTAccount&gt;</ph> object to the <ph id=\"ph5\">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29&gt;</ph> constructor.","source":"This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> constructor."}],"pos":[13930,15458],"yaml":true,"extradata":"MT"},{"content":"The name of the user or group the rule applies to.","nodes":[{"pos":[0,50],"content":"The name of the user or group the rule applies to.","nodes":[{"content":"The name of the user or group the rule applies to.","pos":[0,50]}]}],"pos":[17106,17157],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\"></xref> values specifying the rights allowed or denied.","nodes":[{"pos":[0,145],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.EventWaitHandleRights\"&gt;&lt;/xref&gt;</ph> values specifying the rights allowed or denied.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\"></xref> values specifying the rights allowed or denied."}],"pos":[17262,17408],"yaml":true},{"content":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied.","nodes":[{"pos":[0,139],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlType\"&gt;&lt;/xref&gt;</ph> values specifying whether the rights are allowed or denied.","source":"One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied."}],"pos":[17502,17642],"yaml":true},{"content":"<code>eventRights</code> specifies an invalid value.  \n  \n -or-  \n  \n <code>type</code> specifies an invalid value.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;eventRights&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>eventRights</code> specifies an invalid value."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,115],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> specifies an invalid value.","source":"<code>type</code> specifies an invalid value."}],"pos":[17845,17967],"yaml":true},{"content":"<code>eventRights</code> is zero.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;eventRights&lt;/code&gt;</ph> is zero.","source":"<code>eventRights</code> is zero."}],"pos":[18069,18103],"yaml":true},{"content":"<code>identity</code> is `null`.  \n  \n -or-  \n  \n <code>identity</code> is a zero-length string.  \n  \n -or-  \n  \n <code>identity</code> is longer than 512 characters.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>identity</code> is `null`."},{"pos":[39,43],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[50,96],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is a zero-length string.","source":"<code>identity</code> is a zero-length string."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,166],"content":"<ph id=\"ph1\">&lt;code&gt;identity&lt;/code&gt;</ph> is longer than 512 characters.","source":"<code>identity</code> is longer than 512 characters."}],"pos":[18197,18374],"yaml":true},{"content":"Gets the rights allowed or denied by the access rule.","nodes":[{"pos":[0,53],"content":"Gets the rights allowed or denied by the access rule.","nodes":[{"content":"Gets the rights allowed or denied by the access rule.","pos":[0,53]}]}],"pos":[19726,19780],"yaml":true},{"content":"<xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects are immutable. You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule.","nodes":[{"pos":[0,285],"content":"<xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects are immutable. You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule.","nodes":[{"content":"<xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects are immutable. You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule.","pos":[0,285],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.AccessControl.EventWaitHandleAccessRule&gt;</ph> objects are immutable.","pos":[0,85],"source":"<xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects are immutable."},{"content":"You can create a new access rule representing a different user, different rights, or a different <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.AccessControlType&gt;</ph>, but you cannot modify an existing access rule.","pos":[86,285],"source":" You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule."}]}]}],"pos":[19791,20077],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\"></xref> values indicating the rights allowed or denied by the access rule.","nodes":[{"pos":[0,164],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.EventWaitHandleRights\"&gt;&lt;/xref&gt;</ph> values indicating the rights allowed or denied by the access rule.","source":"A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\"></xref> values indicating the rights allowed or denied by the access rule."}],"pos":[21788,21953],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.EventWaitHandleAccessRule\n  commentId: T:System.Security.AccessControl.EventWaitHandleAccessRule\n  id: EventWaitHandleAccessRule\n  children:\n  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights\n  langs:\n  - csharp\n  name: EventWaitHandleAccessRule\n  nameWithType: EventWaitHandleAccessRule\n  fullName: System.Security.AccessControl.EventWaitHandleAccessRule\n  type: Class\n  assemblies:\n  - System.Threading.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.\n  remarks: \"The <xref:System.Security.AccessControl.EventWaitHandleAccessRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on named system events. For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.EventWaitHandleSecurity>.  \\n  \\n> [!NOTE]\\n>  Windows access control security is meaningful only for named system events. If an <xref:System.Threading.EventWaitHandle> object represents a local event, access control is irrelevant.  \\n  \\n To get a list of the rules currently applied to a named event, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> method to get an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> method to obtain a collection of <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects.  \\n  \\n <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all access rules for an event, the set contains the minimum number of rules currently required to express all the access control entries.  \\n  \\n> [!NOTE]\\n>  The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you get the current list of rules, it might not look exactly like the list of all the rules you have added.  \\n  \\n Use <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects to specify the access rights to allow or deny to a user or group. An <xref:System.Security.AccessControl.EventWaitHandleAccessRule> object always represents either allowed access or denied access, never both.  \\n  \\n To apply a rule to a named system event, use the <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> method to get the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. Modify the <xref:System.Security.AccessControl.EventWaitHandleSecurity> object by using its methods to add the rule, and then use the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> method to reattach the security object.  \\n  \\n> [!IMPORTANT]\\n>  Changes you make to an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object do not affect the access levels of the named event until you call the <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName> method to assign the altered security object to the named event.  \\n  \\n <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects are immutable. Security for an event is modified using the methods of the <xref:System.Security.AccessControl.EventWaitHandleSecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.  \\n  \\n> [!NOTE]\\n>  Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.\"\n  example:\n  - \"The following code example demonstrates the creation and use of <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType.Allow>rule.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]\"\n  syntax:\n    content: 'public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AccessRule\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.AccessControl.AccessRule.AccessControlType\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/EventWaitHandleAccessRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.EventWaitHandleAccessRule\n  langs:\n  - csharp\n  name: EventWaitHandleAccessRule(IdentityReference, EventWaitHandleRights, AccessControlType)\n  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference, EventWaitHandleRights, AccessControlType)\n  fullName: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference, EventWaitHandleRights, AccessControlType)\n  type: Constructor\n  assemblies:\n  - System.Threading.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\"></xref> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.\n  remarks: To wait on an <xref:System.Threading.EventWaitHandle> (by calling the <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> or <xref:System.Threading.WaitHandle.WaitAll%2A> method), a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an event by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method, or to reset it to the unsignaled state by calling the <xref:System.Threading.EventWaitHandle.Reset%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an <xref:System.Threading.EventWaitHandle> object and then wait on it by calling the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> access.\n  syntax:\n    content: public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n    - id: eventRights\n      type: System.Security.AccessControl.EventWaitHandleRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\"></xref> values specifying the rights allowed or denied.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied.\n  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>eventRights</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>type</code> specifies an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>identity</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>eventRights</code> is zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>identity</code> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/EventWaitHandleAccessRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)\n  commentId: M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)\n  id: '#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)'\n  parent: System.Security.AccessControl.EventWaitHandleAccessRule\n  langs:\n  - csharp\n  name: EventWaitHandleAccessRule(String, EventWaitHandleRights, AccessControlType)\n  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String, EventWaitHandleRights, AccessControlType)\n  fullName: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String, EventWaitHandleRights, AccessControlType)\n  type: Constructor\n  assemblies:\n  - System.Threading.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.EventWaitHandleAccessRule\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.\n  remarks: \"To wait on an <xref:System.Threading.EventWaitHandle> (by calling the <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A> or <xref:System.Threading.WaitHandle.WaitAll%2A> method), a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an event by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method, or to reset it to the unsignaled state by calling the <xref:System.Threading.EventWaitHandle.Reset%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights?displayProperty=fullName> access. To signal an <xref:System.Threading.EventWaitHandle> object and then wait on it by calling the <xref:System.Threading.WaitHandle.SignalAndWait%2A> method, a user must have <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> and <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> access.  \\n  \\n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> constructor.\"\n  example:\n  - \"The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType.Allow>rule.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]\"\n  syntax:\n    content: public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);\n    parameters:\n    - id: identity\n      type: System.String\n      description: The name of the user or group the rule applies to.\n    - id: eventRights\n      type: System.Security.AccessControl.EventWaitHandleRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\"></xref> values specifying the rights allowed or denied.\n    - id: type\n      type: System.Security.AccessControl.AccessControlType\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlType\"></xref> values specifying whether the rights are allowed or denied.\n  overload: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>eventRights</code> specifies an invalid value.  \\n  \\n -or-  \\n  \\n <code>type</code> specifies an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>eventRights</code> is zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>identity</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>identity</code> is a zero-length string.  \\n  \\n -or-  \\n  \\n <code>identity</code> is longer than 512 characters.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/EventWaitHandleAccessRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights\n  commentId: P:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights\n  id: EventWaitHandleRights\n  parent: System.Security.AccessControl.EventWaitHandleAccessRule\n  langs:\n  - csharp\n  name: EventWaitHandleRights\n  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights\n  fullName: EventWaitHandleAccessRule.EventWaitHandleRights\n  type: Property\n  assemblies:\n  - System.Threading.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the rights allowed or denied by the access rule.\n  remarks: <xref:System.Security.AccessControl.EventWaitHandleAccessRule> objects are immutable. You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule.\n  example:\n  - \"The following code example demonstrates the use of the <xref:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights%2A> property to display the rights in the set of rules contained in an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object. The example creates an <xref:System.Security.AccessControl.EventWaitHandleSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType.Allow>rule.  \\n  \\n> [!NOTE]\\n>  This example does not attach the security object to a <xref:System.Threading.EventWaitHandle> object. Examples that attach security objects can be found in <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]\\n [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }\n    return:\n      type: System.Security.AccessControl.EventWaitHandleRights\n      description: A bitwise combination of <xref href=\"System.Security.AccessControl.EventWaitHandleRights\"></xref> values indicating the rights allowed or denied by the access rule.\n  overload: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/EventWaitHandleAccessRule.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.AccessControl.AccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessRule\n  nameWithType: AccessRule\n  fullName: System.Security.AccessControl.AccessRule\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.EventWaitHandleAccessRule\n  isExternal: false\n  name: EventWaitHandleAccessRule(IdentityReference, EventWaitHandleRights, AccessControlType)\n  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference, EventWaitHandleRights, AccessControlType)\n  fullName: EventWaitHandleAccessRule.EventWaitHandleAccessRule(IdentityReference, EventWaitHandleRights, AccessControlType)\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  nameWithType: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n- uid: System.Security.AccessControl.EventWaitHandleRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: EventWaitHandleRights\n  nameWithType: EventWaitHandleRights\n  fullName: System.Security.AccessControl.EventWaitHandleRights\n- uid: System.Security.AccessControl.AccessControlType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlType\n  nameWithType: AccessControlType\n  fullName: System.Security.AccessControl.AccessControlType\n- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.EventWaitHandleAccessRule\n  isExternal: false\n  name: EventWaitHandleAccessRule(String, EventWaitHandleRights, AccessControlType)\n  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String, EventWaitHandleRights, AccessControlType)\n  fullName: EventWaitHandleAccessRule.EventWaitHandleAccessRule(String, EventWaitHandleRights, AccessControlType)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights\n  parent: System.Security.AccessControl.EventWaitHandleAccessRule\n  isExternal: false\n  name: EventWaitHandleRights\n  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights\n  fullName: EventWaitHandleAccessRule.EventWaitHandleRights\n- uid: System.Security.AccessControl.EventWaitHandleAccessRule.#ctor*\n  parent: System.Security.AccessControl.EventWaitHandleAccessRule\n  isExternal: false\n  name: EventWaitHandleAccessRule\n  nameWithType: EventWaitHandleAccessRule.EventWaitHandleAccessRule\n  fullName: EventWaitHandleAccessRule.EventWaitHandleAccessRule\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/EventWaitHandleAccessRule.xml\n- uid: System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights*\n  parent: System.Security.AccessControl.EventWaitHandleAccessRule\n  isExternal: false\n  name: EventWaitHandleRights\n  nameWithType: EventWaitHandleAccessRule.EventWaitHandleRights\n  fullName: EventWaitHandleAccessRule.EventWaitHandleRights\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/EventWaitHandleAccessRule.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.AccessControl.AuthorizationRule.AccessMask\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: AccessMask\n  nameWithType: AuthorizationRule.AccessMask\n  fullName: AuthorizationRule.AccessMask\n- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IdentityReference\n  nameWithType: AuthorizationRule.IdentityReference\n  fullName: AuthorizationRule.IdentityReference\n- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: InheritanceFlags\n  nameWithType: AuthorizationRule.InheritanceFlags\n  fullName: AuthorizationRule.InheritanceFlags\n- uid: System.Security.AccessControl.AuthorizationRule.IsInherited\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IsInherited\n  nameWithType: AuthorizationRule.IsInherited\n  fullName: AuthorizationRule.IsInherited\n- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: PropagationFlags\n  nameWithType: AuthorizationRule.PropagationFlags\n  fullName: AuthorizationRule.PropagationFlags\n- uid: System.Security.AccessControl.AccessRule.AccessControlType\n  parent: System.Security.AccessControl.AccessRule\n  isExternal: false\n  name: AccessControlType\n  nameWithType: AccessRule.AccessControlType\n  fullName: AccessRule.AccessControlType\n"}