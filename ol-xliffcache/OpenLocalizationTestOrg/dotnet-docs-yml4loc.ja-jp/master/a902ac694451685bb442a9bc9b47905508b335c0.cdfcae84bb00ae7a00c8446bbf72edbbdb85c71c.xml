{"nodes":[{"content":"Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.","nodes":[{"pos":[0,113],"content":"Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.","nodes":[{"content":"Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.","pos":[0,113]}]}],"pos":[3474,3588],"yaml":true},{"content":"The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests. An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance. In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.  \n  \n The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients. An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).  \n  \n By default, <xref:System.Net.HttpWebRequest> will be used to send requests to the server. This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter. If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor. The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.  \n  \n If an app using <xref:System.Net.Http.HttpClient> and related classes in the  <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering. If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.  \n  \n The following methods are thread safe:  \n  \n1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  \n  \n2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  \n  \n3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  \n  \n4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  \n  \n5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  \n  \n6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  \n  \n7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  \n  \n8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  \n  \n9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  \n  \n <xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application. Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads. This will result in SocketException errors. Below is an example using HttpClient correctly.  \n  \n```csharp  \npublic class GoodController : ApiController  \n{  \n    // OK  \n    private static readonly HttpClient HttpClient;  \n  \n    static GoodController()  \n    {  \n        HttpClient = new HttpClient();  \n    }  \n}  \n  \n```","nodes":[{"pos":[0,410],"content":"The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests. An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance. In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.","nodes":[{"content":"The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests. An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance. In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.","pos":[0,410],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> class instance acts as a session to send HTTP requests.","pos":[0,93],"source":"The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests."},{"content":"An <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instance is a collection of settings applied to all requests executed by that instance.","pos":[94,218],"source":" An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance."},{"content":"In addition, every <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instance uses its own connection pool, isolating its requests from requests executed by other <ph id=\"ph2\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instances.","pos":[219,410],"source":" In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances."}]}]},{"pos":[417,654],"content":"The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients. An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).","nodes":[{"content":"The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients. An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).","pos":[0,237],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> also acts as a base class for more specific HTTP clients.","pos":[0,95],"source":"The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients."},{"content":"An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).","pos":[96,237]}]}]},{"pos":[661,1240],"content":"By default, <xref:System.Net.HttpWebRequest> will be used to send requests to the server. This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter. If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor. The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.","nodes":[{"content":"By default, <xref:System.Net.HttpWebRequest> will be used to send requests to the server. This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter. If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor. The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.","pos":[0,579],"nodes":[{"content":"By default, <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest&gt;</ph> will be used to send requests to the server.","pos":[0,89],"source":"By default, <xref:System.Net.HttpWebRequest> will be used to send requests to the server."},{"content":"This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph> instance as parameter.","pos":[90,263],"source":" This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter."},{"content":"If features like authentication or caching are required, <ph id=\"ph1\">&lt;xref:System.Net.Http.WebRequestHandler&gt;</ph> can be used to configure settings and the instance can be passed to the constructor.","pos":[264,446],"source":" If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor."},{"content":"The returned handler can be passed to one of the constructor overloads taking a <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph> parameter.","pos":[447,579],"source":" The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter."}]}]},{"pos":[1247,1639],"content":"If an app using <xref:System.Net.Http.HttpClient> and related classes in the  <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering. If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.","nodes":[{"content":"If an app using <xref:System.Net.Http.HttpClient> and related classes in the  <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering. If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.","pos":[0,392],"nodes":[{"content":"If an app using <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> and related classes in the  <ph id=\"ph2\">&lt;xref:System.Net.Http&gt;</ph> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering.","pos":[0,254],"source":"If an app using <xref:System.Net.Http.HttpClient> and related classes in the  <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering."},{"content":"If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.","pos":[255,392]}]}]},{"pos":[1646,1684],"content":"The following methods are thread safe:","nodes":[{"content":"The following methods are thread safe:","pos":[0,38]}]},{"pos":[1694,1752],"content":"<xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>","nodes":[]},{"pos":[1762,1810],"content":"<xref:System.Net.Http.HttpClient.DeleteAsync%2A>","nodes":[]},{"pos":[1820,1865],"content":"<xref:System.Net.Http.HttpClient.GetAsync%2A>","nodes":[]},{"pos":[1875,1929],"content":"<xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>","nodes":[]},{"pos":[1939,1990],"content":"<xref:System.Net.Http.HttpClient.GetStreamAsync%2A>","nodes":[]},{"pos":[2000,2051],"content":"<xref:System.Net.Http.HttpClient.GetStringAsync%2A>","nodes":[]},{"pos":[2061,2107],"content":"<xref:System.Net.Http.HttpClient.PostAsync%2A>","nodes":[]},{"pos":[2117,2162],"content":"<xref:System.Net.Http.HttpClient.PutAsync%2A>","nodes":[]},{"pos":[2171,2217],"content":"<xref:System.Net.Http.HttpClient.SendAsync%2A>","nodes":[]},{"pos":[2224,2552],"content":"<xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application. Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads. This will result in SocketException errors. Below is an example using HttpClient correctly.","nodes":[{"content":"<xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application. Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads. This will result in SocketException errors. Below is an example using HttpClient correctly.","pos":[0,328],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> is intended to be instantiated once and re-used throughout the life of an application.","pos":[0,120],"source":"<xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application."},{"content":"Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads.","pos":[121,236]},{"content":"This will result in SocketException errors.","pos":[237,280]},{"content":"Below is an example using HttpClient correctly.","pos":[281,328]}]}]}],"pos":[3599,6429],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\"></xref> class.","nodes":[{"pos":[0,88],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\"></xref> class."}],"pos":[8386,8475],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\"></xref> class with a specific handler.","nodes":[{"pos":[0,112],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> class with a specific handler.","source":"Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\"></xref> class with a specific handler."}],"pos":[10057,10170],"yaml":true},{"content":"If `null` is specified for `handler` parameter, the <xref:System.Net.Http.WebRequestHandler> is used as transport handler.","nodes":[{"pos":[0,122],"content":"If <ph id=\"ph1\">`null`</ph> is specified for <ph id=\"ph2\">`handler`</ph> parameter, the <ph id=\"ph3\">&lt;xref:System.Net.Http.WebRequestHandler&gt;</ph> is used as transport handler.","source":"If `null` is specified for `handler` parameter, the <xref:System.Net.Http.WebRequestHandler> is used as transport handler."}],"pos":[10181,10304],"yaml":true,"extradata":"MT"},{"content":"The HTTP handler stack to use for sending requests.","nodes":[{"pos":[0,51],"content":"The HTTP handler stack to use for sending requests.","nodes":[{"content":"The HTTP handler stack to use for sending requests.","pos":[0,51]}]}],"pos":[10491,10543],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\"></xref> class with a specific handler.","nodes":[{"pos":[0,112],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> class with a specific handler.","source":"Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\"></xref> class with a specific handler."}],"pos":[12133,12246],"yaml":true},{"content":"The <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> responsible for processing the HTTP response messages.","nodes":[{"pos":[0,114],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpMessageHandler\"&gt;&lt;/xref&gt;</ph> responsible for processing the HTTP response messages.","source":"The <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> responsible for processing the HTTP response messages."}],"pos":[12454,12569],"yaml":true},{"content":"`true` if the inner handler should be disposed of by Dispose(), `false` if you intend to reuse the inner handler.","nodes":[{"pos":[0,113],"content":"<ph id=\"ph1\">`true`</ph> if the inner handler should be disposed of by Dispose(), <ph id=\"ph2\">`false`</ph> if you intend to reuse the inner handler.","source":"`true` if the inner handler should be disposed of by Dispose(), `false` if you intend to reuse the inner handler."}],"pos":[12640,12756],"yaml":true},{"content":"Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.","nodes":[{"pos":[0,119],"content":"Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.","nodes":[{"content":"Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.","pos":[0,119]}]}],"pos":[14122,14242],"yaml":true},{"content":"When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.","nodes":[{"pos":[0,199],"content":"When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.","nodes":[{"content":"When sending a <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpRequestMessage&gt;</ph> with a relative Uri, the message Uri will be added to the <ph id=\"ph2\">&lt;xref:System.Net.Http.HttpClient.BaseAddress%2A&gt;</ph> property to create an absolute Uri.","pos":[0,199],"source":"When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri."}]}],"pos":[14253,14453],"yaml":true,"extradata":"MT"},{"content":"The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.","nodes":[{"pos":[0,106],"content":"The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.","nodes":[{"content":"The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.","pos":[0,106]}]}],"pos":[14567,14674],"yaml":true},{"content":"Cancel all pending requests on this instance.","nodes":[{"pos":[0,45],"content":"Cancel all pending requests on this instance.","nodes":[{"content":"Cancel all pending requests on this instance.","pos":[0,45]}]}],"pos":[16110,16156],"yaml":true},{"content":"After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.","nodes":[{"pos":[0,123],"content":"After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.","nodes":[{"content":"After calling this method, the <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instance can still be used to execute additional requests.","pos":[0,123],"source":"After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests."}]}],"pos":[16167,16291],"yaml":true,"extradata":"MT"},{"content":"Gets the headers which should be sent with each request.","nodes":[{"pos":[0,56],"content":"Gets the headers which should be sent with each request.","nodes":[{"content":"Gets the headers which should be sent with each request.","pos":[0,56]}]}],"pos":[17813,17870],"yaml":true},{"content":"Headers set on this property don't need to be set on request messages again.","nodes":[{"pos":[0,76],"content":"Headers set on this property don't need to be set on request messages again.","nodes":[{"content":"Headers set on this property don't need to be set on request messages again.","pos":[0,76]}]}],"pos":[17881,17958],"yaml":true,"extradata":"MT"},{"content":"The headers which should be sent with each request.","nodes":[{"pos":[0,51],"content":"The headers which should be sent with each request.","nodes":[{"content":"The headers which should be sent with each request.","pos":[0,51]}]}],"pos":[18148,18200],"yaml":true},{"content":"Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.","nodes":[{"pos":[0,98],"content":"Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.","nodes":[{"content":"Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.","pos":[0,98]}]}],"pos":[19811,19910],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[19921,20079],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[20343,20375],"yaml":true},{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"pos":[0,100],"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","pos":[0,100]}]}],"pos":[20469,20570],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[20678,20735],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[20903,20943],"yaml":true},{"content":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.","nodes":[{"pos":[0,101],"content":"The request message was already sent by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance."}],"pos":[21053,21155],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[21273,21404],"yaml":true},{"content":"Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.","nodes":[{"pos":[0,98],"content":"Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.","nodes":[{"content":"Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.","pos":[0,98]}]}],"pos":[22918,23017],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[23028,23186],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[23444,23476],"yaml":true},{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"pos":[0,100],"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","pos":[0,100]}]}],"pos":[23570,23671],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[23779,23836],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[24004,24044],"yaml":true},{"content":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.","nodes":[{"pos":[0,101],"content":"The request message was already sent by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance."}],"pos":[24154,24256],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[24374,24505],"yaml":true},{"content":"Send a DELETE request to the specified Uri as an asynchronous operation.","nodes":[{"pos":[0,72],"content":"Send a DELETE request to the specified Uri as an asynchronous operation.","nodes":[{"content":"Send a DELETE request to the specified Uri as an asynchronous operation.","pos":[0,72]}]}],"pos":[25875,25948],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[25959,26117],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[26327,26359],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[26467,26524],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[26692,26732],"yaml":true},{"content":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.","nodes":[{"pos":[0,101],"content":"The request message was already sent by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance."}],"pos":[26842,26944],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[27062,27193],"yaml":true},{"content":"Send a DELETE request to the specified Uri as an asynchronous operation.","nodes":[{"pos":[0,72],"content":"Send a DELETE request to the specified Uri as an asynchronous operation.","nodes":[{"content":"Send a DELETE request to the specified Uri as an asynchronous operation.","pos":[0,72]}]}],"pos":[28545,28618],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[28629,28787],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[28991,29023],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[29131,29188],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[29356,29396],"yaml":true},{"content":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.","nodes":[{"pos":[0,101],"content":"The request message was already sent by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance."}],"pos":[29506,29608],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[29726,29857],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpClient\"></xref> and optionally disposes of the managed resources.","nodes":[{"pos":[0,142],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> and optionally disposes of the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpClient\"></xref> and optionally disposes of the managed resources."}],"pos":[31209,31352],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references. This method invokes the `Dispose()` method of each referenced object.  \n  \n When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.","nodes":[{"pos":[0,293],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[210,293],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[300,530],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> references.","pos":[0,160],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[161,230],"source":" This method invokes the `Dispose()` method of each referenced object."}]},{"pos":[537,675],"content":"When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.","nodes":[{"content":"When this method is called, the <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient.CancelPendingRequests%2A&gt;</ph> method is called to abort all pending requests.","pos":[0,138],"source":"When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests."}]}],"pos":[31363,32045],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to releases only unmanaged resources.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to releases only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to releases only unmanaged resources."}],"pos":[32200,32304],"yaml":true},{"content":"Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.","nodes":[{"pos":[0,125],"content":"Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.","pos":[0,125]}]}],"pos":[34042,34168],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.","nodes":[{"pos":[0,212],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete based on the <ph id=\"ph2\">`completionOption`</ph> parameter after the part or all of the response (including content) is read.","pos":[31,212],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read."}]}],"pos":[34179,34392],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[34702,34734],"yaml":true},{"content":"An HTTP  completion option value that indicates when the operation should be considered completed.","nodes":[{"pos":[0,98],"content":"An HTTP  completion option value that indicates when the operation should be considered completed.","nodes":[{"content":"An HTTP  completion option value that indicates when the operation should be considered completed.","pos":[0,98]}]}],"pos":[34829,34928],"yaml":true},{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"pos":[0,100],"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","pos":[0,100]}]}],"pos":[35022,35123],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[35231,35288],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[35453,35493],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[35611,35742],"yaml":true},{"content":"Send a GET request to the specified Uri as an asynchronous operation.","nodes":[{"pos":[0,69],"content":"Send a GET request to the specified Uri as an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri as an asynchronous operation.","pos":[0,69]}]}],"pos":[37094,37164],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[37175,37333],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[37540,37572],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[37680,37737],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[37902,37942],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[38060,38191],"yaml":true},{"content":"Send a GET request to the specified Uri as an asynchronous operation.","nodes":[{"pos":[0,69],"content":"Send a GET request to the specified Uri as an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri as an asynchronous operation.","pos":[0,69]}]}],"pos":[39525,39595],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[39606,39764],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[39965,39997],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[40105,40162],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[40327,40367],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[40485,40616],"yaml":true},{"content":"Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.","nodes":[{"pos":[0,100],"content":"Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.","pos":[0,100]}]}],"pos":[42145,42246],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.","nodes":[{"pos":[0,212],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete based on the <ph id=\"ph2\">`completionOption`</ph> parameter after the part or all of the response (including content) is read.","pos":[31,212],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read."}]}],"pos":[42257,42470],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[42732,42764],"yaml":true},{"content":"An HTTP completion option value that indicates when the operation should be considered completed.","nodes":[{"pos":[0,97],"content":"An HTTP completion option value that indicates when the operation should be considered completed.","nodes":[{"content":"An HTTP completion option value that indicates when the operation should be considered completed.","pos":[0,97]}]}],"pos":[42859,42957],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[43065,43122],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[43287,43327],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[43445,43576],"yaml":true},{"content":"Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.","nodes":[{"pos":[0,95],"content":"Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.","pos":[0,95]}]}],"pos":[45090,45186],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[45197,45355],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[45616,45648],"yaml":true},{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"pos":[0,100],"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","pos":[0,100]}]}],"pos":[45742,45843],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[45951,46008],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[46173,46213],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[46331,46462],"yaml":true},{"content":"Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.","nodes":[{"pos":[0,100],"content":"Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.","pos":[0,100]}]}],"pos":[47973,48074],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.","nodes":[{"pos":[0,212],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete based on the <ph id=\"ph2\">`completionOption`</ph> parameter after the part or all of the response (including content) is read.","pos":[31,212],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read."}]}],"pos":[48085,48298],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[48554,48586],"yaml":true},{"content":"An HTTP completion option value that indicates when the operation should be considered completed.","nodes":[{"pos":[0,97],"content":"An HTTP completion option value that indicates when the operation should be considered completed.","nodes":[{"content":"An HTTP completion option value that indicates when the operation should be considered completed.","pos":[0,97]}]}],"pos":[48681,48779],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[48887,48944],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[49109,49149],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[49267,49398],"yaml":true},{"content":"Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.","nodes":[{"pos":[0,95],"content":"Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.","pos":[0,95]}]}],"pos":[50894,50990],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[51001,51159],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[51414,51446],"yaml":true},{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"pos":[0,100],"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","pos":[0,100]}]}],"pos":[51540,51641],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[51749,51806],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[51971,52011],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[52129,52260],"yaml":true},{"content":"Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.","nodes":[{"pos":[0,125],"content":"Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.","pos":[0,125]}]}],"pos":[53951,54077],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.","nodes":[{"pos":[0,212],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete based on the <ph id=\"ph2\">`completionOption`</ph> parameter after the part or all of the response (including content) is read.","pos":[31,212],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read."}]}],"pos":[54088,54301],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[54617,54649],"yaml":true},{"content":"An HTTP  completion option value that indicates when the operation should be considered completed.","nodes":[{"pos":[0,98],"content":"An HTTP  completion option value that indicates when the operation should be considered completed.","nodes":[{"content":"An HTTP  completion option value that indicates when the operation should be considered completed.","pos":[0,98]}]}],"pos":[54744,54843],"yaml":true},{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"pos":[0,100],"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","pos":[0,100]}]}],"pos":[54937,55038],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[55146,55203],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[55368,55408],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[55526,55657],"yaml":true},{"content":"Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.","nodes":[{"pos":[0,114],"content":"Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.","pos":[0,114]}]}],"pos":[57045,57160],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","nodes":[{"pos":[0,142],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","pos":[0,142],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response body is read.","pos":[31,142],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read."}]}]}],"pos":[57171,57314],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[57495,57527],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[57613,57670],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[57844,57884],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[58002,58133],"yaml":true},{"content":"Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.","nodes":[{"pos":[0,114],"content":"Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.","pos":[0,114]}]}],"pos":[59556,59671],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","nodes":[{"pos":[0,142],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","pos":[0,142],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response body is read.","pos":[31,142],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read."}]}]}],"pos":[59682,59825],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[60012,60044],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[60130,60187],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[60361,60401],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[60519,60650],"yaml":true},{"content":"Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.","nodes":[{"pos":[0,110],"content":"Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.","pos":[0,110]}]}],"pos":[62055,62166],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read. This method does not buffer the stream.","nodes":[{"pos":[0,182],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read. This method does not buffer the stream.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read. This method does not buffer the stream.","pos":[0,182],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response body is read.","pos":[31,142],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read."},{"content":"This method does not buffer the stream.","pos":[143,182]}]}]}],"pos":[62177,62360],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[62554,62586],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[62675,62732],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[62903,62943],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[63061,63192],"yaml":true},{"content":"Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.","nodes":[{"pos":[0,110],"content":"Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.","pos":[0,110]}]}],"pos":[64579,64690],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read. This method does not buffer the stream.","nodes":[{"pos":[0,182],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read. This method does not buffer the stream.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read. This method does not buffer the stream.","pos":[0,182],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response body is read.","pos":[31,142],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read."},{"content":"This method does not buffer the stream.","pos":[143,182]}]}]}],"pos":[64701,64884],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[65072,65104],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[65193,65250],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[65421,65461],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[65579,65710],"yaml":true},{"content":"Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.","nodes":[{"pos":[0,110],"content":"Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.","pos":[0,110]}]}],"pos":[67115,67226],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","nodes":[{"pos":[0,142],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","pos":[0,142],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response body is read.","pos":[31,142],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read."}]}]}],"pos":[67237,67380],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[67564,67596],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[67682,67739],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[67910,67950],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[68068,68199],"yaml":true},{"content":"Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.","nodes":[{"pos":[0,110],"content":"Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.","nodes":[{"content":"Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.","pos":[0,110]}]}],"pos":[69586,69697],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","nodes":[{"pos":[0,142],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.","pos":[0,142],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response body is read.","pos":[31,142],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read."}]}]}],"pos":[69708,69851],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[70029,70061],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[70147,70204],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[70375,70415],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[70533,70664],"yaml":true},{"content":"Gets or sets the maximum number of bytes to buffer when reading the response content.","nodes":[{"pos":[0,85],"content":"Gets or sets the maximum number of bytes to buffer when reading the response content.","nodes":[{"content":"Gets or sets the maximum number of bytes to buffer when reading the response content.","pos":[0,85]}]}],"pos":[72086,72172],"yaml":true},{"content":"An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response. If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.","nodes":[{"pos":[0,338],"content":"An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response. If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.","nodes":[{"content":"An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response. If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.","pos":[0,338],"nodes":[{"content":"An app can set the <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A&gt;</ph> property to a lower value to limit the size of the response to buffer when reading the response.","pos":[0,181],"source":"An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response."},{"content":"If the size of the response content is greater than the  <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A&gt;</ph> property, an exception is thrown.","pos":[182,338],"source":" If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown."}]}]}],"pos":[72183,72522],"yaml":true,"extradata":"MT"},{"content":"The maximum number of bytes to buffer when reading the response content. The default value for this property is 2 gigabytes.","nodes":[{"pos":[0,124],"content":"The maximum number of bytes to buffer when reading the response content. The default value for this property is 2 gigabytes.","nodes":[{"content":"The maximum number of bytes to buffer when reading the response content. The default value for this property is 2 gigabytes.","pos":[0,124],"nodes":[{"content":"The maximum number of bytes to buffer when reading the response content.","pos":[0,72]},{"content":"The default value for this property is 2 gigabytes.","pos":[73,124]}]}]}],"pos":[72656,72781],"yaml":true},{"content":"The size specified is less than or equal to zero.","nodes":[{"pos":[0,49],"content":"The size specified is less than or equal to zero.","nodes":[{"content":"The size specified is less than or equal to zero.","pos":[0,49]}]}],"pos":[72978,73028],"yaml":true},{"content":"An operation has already been started on the current instance.","nodes":[{"pos":[0,62],"content":"An operation has already been started on the current instance.","nodes":[{"content":"An operation has already been started on the current instance.","pos":[0,62]}]}],"pos":[73138,73201],"yaml":true},{"content":"The current instance has been disposed.","nodes":[{"pos":[0,39],"content":"The current instance has been disposed.","nodes":[{"content":"The current instance has been disposed.","pos":[0,39]}]}],"pos":[73307,73347],"yaml":true},{"content":"Send a POST request with a cancellation token as an asynchronous operation.","nodes":[{"pos":[0,75],"content":"Send a POST request with a cancellation token as an asynchronous operation.","nodes":[{"content":"Send a POST request with a cancellation token as an asynchronous operation.","pos":[0,75]}]}],"pos":[74990,75066],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[75077,75235],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[75534,75566],"yaml":true},{"content":"The HTTP request content sent to the server.","nodes":[{"pos":[0,44],"content":"The HTTP request content sent to the server.","nodes":[{"content":"The HTTP request content sent to the server.","pos":[0,44]}]}],"pos":[75643,75688],"yaml":true},{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"pos":[0,100],"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","pos":[0,100]}]}],"pos":[75782,75883],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[75991,76048],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[76214,76254],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[76372,76503],"yaml":true},{"content":"Send a POST request with a cancellation token as an asynchronous operation.","nodes":[{"pos":[0,75],"content":"Send a POST request with a cancellation token as an asynchronous operation.","nodes":[{"content":"Send a POST request with a cancellation token as an asynchronous operation.","pos":[0,75]}]}],"pos":[78128,78204],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[78215,78373],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[78666,78698],"yaml":true},{"content":"The HTTP request content sent to the server.","nodes":[{"pos":[0,44],"content":"The HTTP request content sent to the server.","nodes":[{"content":"The HTTP request content sent to the server.","pos":[0,44]}]}],"pos":[78775,78820],"yaml":true},{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"pos":[0,100],"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","pos":[0,100]}]}],"pos":[78914,79015],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[79123,79180],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[79346,79386],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[79504,79635],"yaml":true},{"content":"Send a POST request to the specified Uri as an asynchronous operation.","nodes":[{"pos":[0,70],"content":"Send a POST request to the specified Uri as an asynchronous operation.","nodes":[{"content":"Send a POST request to the specified Uri as an asynchronous operation.","pos":[0,70]}]}],"pos":[81116,81187],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[81198,81356],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[81601,81633],"yaml":true},{"content":"The HTTP request content sent to the server.","nodes":[{"pos":[0,44],"content":"The HTTP request content sent to the server.","nodes":[{"content":"The HTTP request content sent to the server.","pos":[0,44]}]}],"pos":[81710,81755],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[81863,81920],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[82086,82126],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[82244,82375],"yaml":true},{"content":"Send a POST request to the specified Uri as an asynchronous operation.","nodes":[{"pos":[0,70],"content":"Send a POST request to the specified Uri as an asynchronous operation.","nodes":[{"content":"Send a POST request to the specified Uri as an asynchronous operation.","pos":[0,70]}]}],"pos":[83838,83909],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[83920,84078],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[84317,84349],"yaml":true},{"content":"The HTTP request content sent to the server.","nodes":[{"pos":[0,44],"content":"The HTTP request content sent to the server.","nodes":[{"content":"The HTTP request content sent to the server.","pos":[0,44]}]}],"pos":[84426,84471],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[84579,84636],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[84802,84842],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[84960,85091],"yaml":true},{"content":"Send a PUT request to the specified Uri as an asynchronous operation.","nodes":[{"pos":[0,69],"content":"Send a PUT request to the specified Uri as an asynchronous operation.","nodes":[{"content":"Send a PUT request to the specified Uri as an asynchronous operation.","pos":[0,69]}]}],"pos":[86566,86636],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[86647,86805],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[87049,87081],"yaml":true},{"content":"The HTTP request content sent to the server.","nodes":[{"pos":[0,44],"content":"The HTTP request content sent to the server.","nodes":[{"content":"The HTTP request content sent to the server.","pos":[0,44]}]}],"pos":[87158,87203],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[87311,87368],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[87533,87573],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[87691,87822],"yaml":true},{"content":"Send a PUT request to the specified Uri as an asynchronous operation.","nodes":[{"pos":[0,69],"content":"Send a PUT request to the specified Uri as an asynchronous operation.","nodes":[{"content":"Send a PUT request to the specified Uri as an asynchronous operation.","pos":[0,69]}]}],"pos":[89279,89349],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[89360,89518],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[89756,89788],"yaml":true},{"content":"The HTTP request content sent to the server.","nodes":[{"pos":[0,44],"content":"The HTTP request content sent to the server.","nodes":[{"content":"The HTTP request content sent to the server.","pos":[0,44]}]}],"pos":[89865,89910],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[90018,90075],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[90240,90280],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[90398,90529],"yaml":true},{"content":"Send a PUT request with a cancellation token as an asynchronous operation.","nodes":[{"pos":[0,74],"content":"Send a PUT request with a cancellation token as an asynchronous operation.","nodes":[{"content":"Send a PUT request with a cancellation token as an asynchronous operation.","pos":[0,74]}]}],"pos":[92166,92241],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[92252,92410],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[92708,92740],"yaml":true},{"content":"The HTTP request content sent to the server.","nodes":[{"pos":[0,44],"content":"The HTTP request content sent to the server.","nodes":[{"content":"The HTTP request content sent to the server.","pos":[0,44]}]}],"pos":[92817,92862],"yaml":true},{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"pos":[0,100],"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","pos":[0,100]}]}],"pos":[92956,93057],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[93165,93222],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[93387,93427],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[93545,93676],"yaml":true},{"content":"Send a PUT request with a cancellation token as an asynchronous operation.","nodes":[{"pos":[0,74],"content":"Send a PUT request with a cancellation token as an asynchronous operation.","nodes":[{"content":"Send a PUT request with a cancellation token as an asynchronous operation.","pos":[0,74]}]}],"pos":[95295,95370],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"pos":[0,157],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.","pos":[0,157],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the whole response (including content) is read.","pos":[31,157],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read."}]}]}],"pos":[95381,95539],"yaml":true,"extradata":"MT"},{"content":"The Uri the request is sent to.","nodes":[{"pos":[0,31],"content":"The Uri the request is sent to.","nodes":[{"content":"The Uri the request is sent to.","pos":[0,31]}]}],"pos":[95831,95863],"yaml":true},{"content":"The HTTP request content sent to the server.","nodes":[{"pos":[0,44],"content":"The HTTP request content sent to the server.","nodes":[{"content":"The HTTP request content sent to the server.","pos":[0,44]}]}],"pos":[95940,95985],"yaml":true},{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"pos":[0,100],"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","nodes":[{"content":"A cancellation token that can be used by other objects or threads to receive notice of cancellation.","pos":[0,100]}]}],"pos":[96079,96180],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[96288,96345],"yaml":true},{"content":"The <code>requestUri</code> was `null`.","nodes":[{"pos":[0,39],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestUri</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>requestUri</code> was `null`."}],"pos":[96510,96550],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[96668,96799],"yaml":true},{"content":"Send an HTTP request as an asynchronous operation.","nodes":[{"pos":[0,50],"content":"Send an HTTP request as an asynchronous operation.","nodes":[{"content":"Send an HTTP request as an asynchronous operation.","pos":[0,50]}]}],"pos":[98595,98646],"yaml":true},{"content":"This operation will not block. Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.","nodes":[{"pos":[0,248],"content":"This operation will not block. Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"Depending on the value of the <ph id=\"ph1\">`completionOption`</ph> parameter, the returned <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete as soon as a response is available or the entire response including content is read.","pos":[31,248],"source":" Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read."}]}],"pos":[98657,98906],"yaml":true,"extradata":"MT"},{"content":"The HTTP request message to send.","nodes":[{"pos":[0,33],"content":"The HTTP request message to send.","nodes":[{"content":"The HTTP request message to send.","pos":[0,33]}]}],"pos":[99266,99300],"yaml":true},{"content":"When the operation should complete (as soon as a response is available or after reading the whole response content).","nodes":[{"pos":[0,116],"content":"When the operation should complete (as soon as a response is available or after reading the whole response content).","nodes":[{"content":"When the operation should complete (as soon as a response is available or after reading the whole response content).","pos":[0,116]}]}],"pos":[99395,99512],"yaml":true},{"content":"The cancellation token to cancel operation.","nodes":[{"pos":[0,43],"content":"The cancellation token to cancel operation.","nodes":[{"content":"The cancellation token to cancel operation.","pos":[0,43]}]}],"pos":[99606,99650],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[99758,99815],"yaml":true},{"content":"The <code>request</code> was `null`.","nodes":[{"pos":[0,36],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">request</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>request</code> was `null`."}],"pos":[99981,100018],"yaml":true},{"content":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.","nodes":[{"pos":[0,101],"content":"The request message was already sent by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance."}],"pos":[100128,100230],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[100348,100479],"yaml":true},{"content":"Send an HTTP request as an asynchronous operation.","nodes":[{"pos":[0,50],"content":"Send an HTTP request as an asynchronous operation.","nodes":[{"content":"Send an HTTP request as an asynchronous operation.","pos":[0,50]}]}],"pos":[101936,101987],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.","nodes":[{"pos":[0,155],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.","pos":[0,155],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete once the entire response including content is read.","pos":[31,155],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read."}]}]}],"pos":[101998,102154],"yaml":true,"extradata":"MT"},{"content":"The HTTP request message to send.","nodes":[{"pos":[0,33],"content":"The HTTP request message to send.","nodes":[{"content":"The HTTP request message to send.","pos":[0,33]}]}],"pos":[102405,102439],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[102547,102604],"yaml":true},{"content":"The <code>request</code> was `null`.","nodes":[{"pos":[0,36],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">request</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>request</code> was `null`."}],"pos":[102770,102807],"yaml":true},{"content":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.","nodes":[{"pos":[0,101],"content":"The request message was already sent by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance."}],"pos":[102917,103019],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[103137,103268],"yaml":true},{"content":"Send an HTTP request as an asynchronous operation.","nodes":[{"pos":[0,50],"content":"Send an HTTP request as an asynchronous operation.","nodes":[{"content":"Send an HTTP request as an asynchronous operation.","pos":[0,50]}]}],"pos":[104902,104953],"yaml":true},{"content":"This operation will not block. Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.","nodes":[{"pos":[0,248],"content":"This operation will not block. Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"Depending on the value of the <ph id=\"ph1\">`completionOption`</ph> parameter, the returned <ph id=\"ph2\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete as soon as a response is available or the entire response including content is read.","pos":[31,248],"source":" Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read."}]}],"pos":[104964,105213],"yaml":true,"extradata":"MT"},{"content":"The HTTP request message to send.","nodes":[{"pos":[0,33],"content":"The HTTP request message to send.","nodes":[{"content":"The HTTP request message to send.","pos":[0,33]}]}],"pos":[105519,105553],"yaml":true},{"content":"When the operation should complete (as soon as a response is available or after reading the whole response content).","nodes":[{"pos":[0,116],"content":"When the operation should complete (as soon as a response is available or after reading the whole response content).","nodes":[{"content":"When the operation should complete (as soon as a response is available or after reading the whole response content).","pos":[0,116]}]}],"pos":[105648,105765],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[105873,105930],"yaml":true},{"content":"The <code>request</code> was `null`.","nodes":[{"pos":[0,36],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">request</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>request</code> was `null`."}],"pos":[106096,106133],"yaml":true},{"content":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.","nodes":[{"pos":[0,101],"content":"The request message was already sent by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance."}],"pos":[106243,106345],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[106463,106594],"yaml":true},{"content":"Send an HTTP request as an asynchronous operation.","nodes":[{"pos":[0,50],"content":"Send an HTTP request as an asynchronous operation.","nodes":[{"content":"Send an HTTP request as an asynchronous operation.","pos":[0,50]}]}],"pos":[108213,108264],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.","nodes":[{"pos":[0,155],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.","pos":[0,155],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete once the entire response including content is read.","pos":[31,155],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read."}]}]}],"pos":[108275,108431],"yaml":true,"extradata":"MT"},{"content":"The HTTP request message to send.","nodes":[{"pos":[0,33],"content":"The HTTP request message to send.","nodes":[{"content":"The HTTP request message to send.","pos":[0,33]}]}],"pos":[108745,108779],"yaml":true},{"content":"The cancellation token to cancel operation.","nodes":[{"pos":[0,43],"content":"The cancellation token to cancel operation.","nodes":[{"content":"The cancellation token to cancel operation.","pos":[0,43]}]}],"pos":[108873,108917],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[109025,109082],"yaml":true},{"content":"The <code>request</code> was `null`.","nodes":[{"pos":[0,36],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">request</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>request</code> was `null`."}],"pos":[109248,109285],"yaml":true},{"content":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.","nodes":[{"pos":[0,101],"content":"The request message was already sent by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpClient\"&gt;&lt;/xref&gt;</ph> instance.","source":"The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance."}],"pos":[109395,109497],"yaml":true},{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"pos":[0,130],"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","nodes":[{"content":"The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.","pos":[0,130]}]}],"pos":[109615,109746],"yaml":true},{"content":"Gets or sets the timespan to wait before the request times out.","nodes":[{"pos":[0,63],"content":"Gets or sets the timespan to wait before the request times out.","nodes":[{"content":"Gets or sets the timespan to wait before the request times out.","pos":[0,63]}]}],"pos":[111025,111089],"yaml":true},{"content":"The default value is 100,000 milliseconds (100 seconds).  \n  \n To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.  \n  \n A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.  \n  \n The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.  You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task. Note that only the shorter of the two timeouts will apply.","nodes":[{"pos":[0,56],"content":"The default value is 100,000 milliseconds (100 seconds).","nodes":[{"content":"The default value is 100,000 milliseconds (100 seconds).","pos":[0,56]}]},{"pos":[63,166],"content":"To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.","nodes":[{"content":"To set an infinite timeout, set the property value to <ph id=\"ph1\">&lt;xref:System.Threading.Timeout.InfiniteTimeSpan&gt;</ph>.","pos":[0,103],"source":"To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>."}]},{"pos":[173,526],"content":"A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.","nodes":[{"content":"A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.","pos":[0,353],"nodes":[{"content":"A Domain Name System (DNS) query may take up to 15 seconds to return or time out.","pos":[0,81]},{"content":"If your request contains a host name that requires resolution and you set <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient.Timeout%2A&gt;</ph> to a value less than 15 seconds, it may take 15 seconds or more before a <ph id=\"ph2\">&lt;xref:System.Net.WebException&gt;</ph> is thrown to indicate a timeout on your request.","pos":[82,353],"source":" If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request."}]}]},{"pos":[533,819],"content":"The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.  You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task. Note that only the shorter of the two timeouts will apply.","nodes":[{"content":"The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.  You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task. Note that only the shorter of the two timeouts will apply.","pos":[0,286],"nodes":[{"content":"The same timeout will apply for all requests using this <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instance.","pos":[0,99],"source":"The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance."},{"content":"You may also set different timeouts for individual requests using a <ph id=\"ph1\">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> on a task.","pos":[101,227],"source":"  You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task."},{"content":"Note that only the shorter of the two timeouts will apply.","pos":[228,286]}]}]}],"pos":[111100,111928],"yaml":true,"extradata":"MT"},{"content":"The timespan to wait before the request times out.","nodes":[{"pos":[0,50],"content":"The timespan to wait before the request times out.","nodes":[{"content":"The timespan to wait before the request times out.","pos":[0,50]}]}],"pos":[112048,112099],"yaml":true},{"content":"The timeout specified is less than or equal to zero and is not <xref href=\"System.Threading.Timeout.InfiniteTimeSpan\"></xref>.","nodes":[{"pos":[0,126],"content":"The timeout specified is less than or equal to zero and is not <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.InfiniteTimeSpan\"&gt;&lt;/xref&gt;</ph>.","source":"The timeout specified is less than or equal to zero and is not <xref href=\"System.Threading.Timeout.InfiniteTimeSpan\"></xref>."}],"pos":[112275,112402],"yaml":true},{"content":"An operation has already been started on the current instance.","nodes":[{"pos":[0,62],"content":"An operation has already been started on the current instance.","nodes":[{"content":"An operation has already been started on the current instance.","pos":[0,62]}]}],"pos":[112512,112575],"yaml":true},{"content":"The current instance has been disposed.","nodes":[{"pos":[0,39],"content":"The current instance has been disposed.","nodes":[{"content":"The current instance has been disposed.","pos":[0,39]}]}],"pos":[112681,112721],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Http.HttpClient\n  commentId: T:System.Net.Http.HttpClient\n  id: HttpClient\n  children:\n  - System.Net.Http.HttpClient.#ctor\n  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)\n  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)\n  - System.Net.Http.HttpClient.BaseAddress\n  - System.Net.Http.HttpClient.CancelPendingRequests\n  - System.Net.Http.HttpClient.DefaultRequestHeaders\n  - System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.DeleteAsync(System.String)\n  - System.Net.Http.HttpClient.DeleteAsync(System.Uri)\n  - System.Net.Http.HttpClient.Dispose(System.Boolean)\n  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.GetAsync(System.String)\n  - System.Net.Http.HttpClient.GetAsync(System.Uri)\n  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)\n  - System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)\n  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)\n  - System.Net.Http.HttpClient.GetByteArrayAsync(System.String)\n  - System.Net.Http.HttpClient.GetStreamAsync(System.String)\n  - System.Net.Http.HttpClient.GetStreamAsync(System.Uri)\n  - System.Net.Http.HttpClient.GetStringAsync(System.String)\n  - System.Net.Http.HttpClient.GetStringAsync(System.Uri)\n  - System.Net.Http.HttpClient.MaxResponseContentBufferSize\n  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)\n  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)\n  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)\n  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)\n  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)\n  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)\n  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.Timeout\n  langs:\n  - csharp\n  name: HttpClient\n  nameWithType: HttpClient\n  fullName: System.Net.Http.HttpClient\n  type: Class\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.\n  remarks: \"The <xref:System.Net.Http.HttpClient> class instance acts as a session to send HTTP requests. An <xref:System.Net.Http.HttpClient> instance is a collection of settings applied to all requests executed by that instance. In addition, every <xref:System.Net.Http.HttpClient> instance uses its own connection pool, isolating its requests from requests executed by other <xref:System.Net.Http.HttpClient> instances.  \\n  \\n The <xref:System.Net.Http.HttpClient> also acts as a base class for more specific HTTP clients. An example would be a FacebookHttpClient providing additional methods specific to a Facebook web service (a GetFriends method, for instance).  \\n  \\n By default, <xref:System.Net.HttpWebRequest> will be used to send requests to the server. This behavior can be modified by specifying a different channel in one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> instance as parameter. If features like authentication or caching are required, <xref:System.Net.Http.WebRequestHandler> can be used to configure settings and the instance can be passed to the constructor. The returned handler can be passed to one of the constructor overloads taking a <xref:System.Net.Http.HttpMessageHandler> parameter.  \\n  \\n If an app using <xref:System.Net.Http.HttpClient> and related classes in the  <xref:System.Net.Http> namespace intends to download large amounts of data (50 megabytes or more), then the app should stream those downloads and not use the default buffering. If the default buffering is used the client memory usage will get very large, potentially resulting in substantially reduced performance.  \\n  \\n The following methods are thread safe:  \\n  \\n1.  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  \\n  \\n2.  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>  \\n  \\n3.  <xref:System.Net.Http.HttpClient.GetAsync%2A>  \\n  \\n4.  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  \\n  \\n5.  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  \\n  \\n6.  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>  \\n  \\n7.  <xref:System.Net.Http.HttpClient.PostAsync%2A>  \\n  \\n8.  <xref:System.Net.Http.HttpClient.PutAsync%2A>  \\n  \\n9. <xref:System.Net.Http.HttpClient.SendAsync%2A>  \\n  \\n <xref:System.Net.Http.HttpClient> is intended to be instantiated once and re-used throughout the life of an application. Instantiating an HttpClient class for every request will exhaust the number of sockets available under heavy loads. This will result in SocketException errors. Below is an example using HttpClient correctly.  \\n  \\n```csharp  \\npublic class GoodController : ApiController  \\n{  \\n    // OK  \\n    private static readonly HttpClient HttpClient;  \\n  \\n    static GoodController()  \\n    {  \\n        HttpClient = new HttpClient();  \\n    }  \\n}  \\n  \\n```\"\n  example:\n  - '[!code-csharp[System.Net.Http.HttpClient#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.net.http.httpclient/cs/source.cs#1)]'\n  syntax:\n    content: 'public class HttpClient : System.Net.Http.HttpMessageInvoker'\n  inheritance:\n  - System.Object\n  - System.Net.Http.HttpMessageInvoker\n  implements: []\n  inheritedMembers:\n  - System.Net.Http.HttpMessageInvoker.Dispose\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.#ctor\n  commentId: M:System.Net.Http.HttpClient.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: HttpClient()\n  nameWithType: HttpClient.HttpClient()\n  fullName: HttpClient.HttpClient()\n  type: Constructor\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\"></xref> class.\n  syntax:\n    content: public HttpClient ();\n    parameters: []\n  overload: System.Net.Http.HttpClient.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)\n  commentId: M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)\n  id: '#ctor(System.Net.Http.HttpMessageHandler)'\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: HttpClient(HttpMessageHandler)\n  nameWithType: HttpClient.HttpClient(HttpMessageHandler)\n  fullName: HttpClient.HttpClient(HttpMessageHandler)\n  type: Constructor\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\"></xref> class with a specific handler.\n  remarks: If `null` is specified for `handler` parameter, the <xref:System.Net.Http.WebRequestHandler> is used as transport handler.\n  syntax:\n    content: public HttpClient (System.Net.Http.HttpMessageHandler handler);\n    parameters:\n    - id: handler\n      type: System.Net.Http.HttpMessageHandler\n      description: The HTTP handler stack to use for sending requests.\n  overload: System.Net.Http.HttpClient.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)\n  commentId: M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)\n  id: '#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)'\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: HttpClient(HttpMessageHandler, Boolean)\n  nameWithType: HttpClient.HttpClient(HttpMessageHandler, Boolean)\n  fullName: HttpClient.HttpClient(HttpMessageHandler, Boolean)\n  type: Constructor\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Initializes a new instance of the <xref href=\"System.Net.Http.HttpClient\"></xref> class with a specific handler.\n  syntax:\n    content: public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);\n    parameters:\n    - id: handler\n      type: System.Net.Http.HttpMessageHandler\n      description: The <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> responsible for processing the HTTP response messages.\n    - id: disposeHandler\n      type: System.Boolean\n      description: '`true` if the inner handler should be disposed of by Dispose(), `false` if you intend to reuse the inner handler.'\n  overload: System.Net.Http.HttpClient.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.BaseAddress\n  commentId: P:System.Net.Http.HttpClient.BaseAddress\n  id: BaseAddress\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: BaseAddress\n  nameWithType: HttpClient.BaseAddress\n  fullName: HttpClient.BaseAddress\n  type: Property\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.\n  remarks: When sending a <xref:System.Net.Http.HttpRequestMessage> with a relative Uri, the message Uri will be added to the <xref:System.Net.Http.HttpClient.BaseAddress%2A> property to create an absolute Uri.\n  syntax:\n    content: public Uri BaseAddress { get; set; }\n    return:\n      type: System.Uri\n      description: The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.\n  overload: System.Net.Http.HttpClient.BaseAddress*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.CancelPendingRequests\n  commentId: M:System.Net.Http.HttpClient.CancelPendingRequests\n  id: CancelPendingRequests\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: CancelPendingRequests()\n  nameWithType: HttpClient.CancelPendingRequests()\n  fullName: HttpClient.CancelPendingRequests()\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Cancel all pending requests on this instance.\n  remarks: After calling this method, the <xref:System.Net.Http.HttpClient> instance can still be used to execute additional requests.\n  syntax:\n    content: public void CancelPendingRequests ();\n    parameters: []\n  overload: System.Net.Http.HttpClient.CancelPendingRequests*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.DefaultRequestHeaders\n  commentId: P:System.Net.Http.HttpClient.DefaultRequestHeaders\n  id: DefaultRequestHeaders\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: DefaultRequestHeaders\n  nameWithType: HttpClient.DefaultRequestHeaders\n  fullName: HttpClient.DefaultRequestHeaders\n  type: Property\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Gets the headers which should be sent with each request.\n  remarks: Headers set on this property don't need to be set on request messages again.\n  syntax:\n    content: public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }\n    return:\n      type: System.Net.Http.Headers.HttpRequestHeaders\n      description: The headers which should be sent with each request.\n  overload: System.Net.Http.HttpClient.DefaultRequestHeaders*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)\n  id: DeleteAsync(System.String,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: DeleteAsync(String, CancellationToken)\n  nameWithType: HttpClient.DeleteAsync(String, CancellationToken)\n  fullName: HttpClient.DeleteAsync(String, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.DeleteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)\n  id: DeleteAsync(System.Uri,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: DeleteAsync(Uri, CancellationToken)\n  nameWithType: HttpClient.DeleteAsync(Uri, CancellationToken)\n  fullName: HttpClient.DeleteAsync(Uri, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.DeleteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)\n  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.String)\n  id: DeleteAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: DeleteAsync(String)\n  nameWithType: HttpClient.DeleteAsync(String)\n  fullName: HttpClient.DeleteAsync(String)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a DELETE request to the specified Uri as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (string requestUri);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.DeleteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)\n  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)\n  id: DeleteAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: DeleteAsync(Uri)\n  nameWithType: HttpClient.DeleteAsync(Uri)\n  fullName: HttpClient.DeleteAsync(Uri)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a DELETE request to the specified Uri as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (Uri requestUri);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.DeleteAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)\n  commentId: M:System.Net.Http.HttpClient.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HttpClient.Dispose(Boolean)\n  fullName: HttpClient.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpClient\"></xref> and optionally disposes of the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpClient> references. This method invokes the `Dispose()` method of each referenced object.  \\n  \\n When this method is called, the <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A> method is called to abort all pending requests.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to releases only unmanaged resources.'\n  overload: System.Net.Http.HttpClient.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetAsync(Uri, HttpCompletionOption, CancellationToken)\n  nameWithType: HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken)\n  fullName: HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: An HTTP  completion option value that indicates when the operation should be considered completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetAsync(System.String)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String)\n  id: GetAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetAsync(String)\n  nameWithType: HttpClient.GetAsync(String)\n  fullName: HttpClient.GetAsync(String)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri)\n  id: GetAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetAsync(Uri)\n  nameWithType: HttpClient.GetAsync(Uri)\n  fullName: HttpClient.GetAsync(Uri)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)\n  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetAsync(String, HttpCompletionOption)\n  nameWithType: HttpClient.GetAsync(String, HttpCompletionOption)\n  fullName: HttpClient.GetAsync(String, HttpCompletionOption)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: An HTTP completion option value that indicates when the operation should be considered completed.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)\n  id: GetAsync(System.String,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetAsync(String, CancellationToken)\n  nameWithType: HttpClient.GetAsync(String, CancellationToken)\n  fullName: HttpClient.GetAsync(String, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)\n  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetAsync(Uri, HttpCompletionOption)\n  nameWithType: HttpClient.GetAsync(Uri, HttpCompletionOption)\n  fullName: HttpClient.GetAsync(Uri, HttpCompletionOption)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: An HTTP completion option value that indicates when the operation should be considered completed.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)\n  id: GetAsync(System.Uri,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetAsync(Uri, CancellationToken)\n  nameWithType: HttpClient.GetAsync(Uri, CancellationToken)\n  fullName: HttpClient.GetAsync(Uri, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetAsync(String, HttpCompletionOption, CancellationToken)\n  nameWithType: HttpClient.GetAsync(String, HttpCompletionOption, CancellationToken)\n  fullName: HttpClient.GetAsync(String, HttpCompletionOption, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete based on the `completionOption` parameter after the part or all of the response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: An HTTP  completion option value that indicates when the operation should be considered completed.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)\n  commentId: M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)\n  id: GetByteArrayAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetByteArrayAsync(Uri)\n  nameWithType: HttpClient.GetByteArrayAsync(Uri)\n  fullName: HttpClient.GetByteArrayAsync(Uri)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync (Uri requestUri);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetByteArrayAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)\n  commentId: M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)\n  id: GetByteArrayAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetByteArrayAsync(String)\n  nameWithType: HttpClient.GetByteArrayAsync(String)\n  fullName: HttpClient.GetByteArrayAsync(String)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync (string requestUri);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetByteArrayAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)\n  commentId: M:System.Net.Http.HttpClient.GetStreamAsync(System.String)\n  id: GetStreamAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetStreamAsync(String)\n  nameWithType: HttpClient.GetStreamAsync(String)\n  fullName: HttpClient.GetStreamAsync(String)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read. This method does not buffer the stream.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync (string requestUri);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetStreamAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)\n  commentId: M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)\n  id: GetStreamAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetStreamAsync(Uri)\n  nameWithType: HttpClient.GetStreamAsync(Uri)\n  fullName: HttpClient.GetStreamAsync(Uri)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read. This method does not buffer the stream.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync (Uri requestUri);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetStreamAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)\n  commentId: M:System.Net.Http.HttpClient.GetStringAsync(System.String)\n  id: GetStringAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetStringAsync(String)\n  nameWithType: HttpClient.GetStringAsync(String)\n  fullName: HttpClient.GetStringAsync(String)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<string> GetStringAsync (string requestUri);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetStringAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)\n  commentId: M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)\n  id: GetStringAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: GetStringAsync(Uri)\n  nameWithType: HttpClient.GetStringAsync(Uri)\n  fullName: HttpClient.GetStringAsync(Uri)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response body is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<string> GetStringAsync (Uri requestUri);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.GetStringAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize\n  commentId: P:System.Net.Http.HttpClient.MaxResponseContentBufferSize\n  id: MaxResponseContentBufferSize\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: MaxResponseContentBufferSize\n  nameWithType: HttpClient.MaxResponseContentBufferSize\n  fullName: HttpClient.MaxResponseContentBufferSize\n  type: Property\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Gets or sets the maximum number of bytes to buffer when reading the response content.\n  remarks: An app can set the <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property to a lower value to limit the size of the response to buffer when reading the response. If the size of the response content is greater than the  <xref:System.Net.Http.HttpClient.MaxResponseContentBufferSize%2A> property, an exception is thrown.\n  syntax:\n    content: public long MaxResponseContentBufferSize { get; set; }\n    return:\n      type: System.Int64\n      description: The maximum number of bytes to buffer when reading the response content. The default value for this property is 2 gigabytes.\n  overload: System.Net.Http.HttpClient.MaxResponseContentBufferSize*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The size specified is less than or equal to zero.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An operation has already been started on the current instance.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  id: PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: PostAsync(String, HttpContent, CancellationToken)\n  nameWithType: HttpClient.PostAsync(String, HttpContent, CancellationToken)\n  fullName: HttpClient.PostAsync(String, HttpContent, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a POST request with a cancellation token as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: The HTTP request content sent to the server.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.PostAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  id: PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: PostAsync(Uri, HttpContent, CancellationToken)\n  nameWithType: HttpClient.PostAsync(Uri, HttpContent, CancellationToken)\n  fullName: HttpClient.PostAsync(Uri, HttpContent, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a POST request with a cancellation token as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: The HTTP request content sent to the server.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.PostAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)\n  commentId: M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)\n  id: PostAsync(System.String,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: PostAsync(String, HttpContent)\n  nameWithType: HttpClient.PostAsync(String, HttpContent)\n  fullName: HttpClient.PostAsync(String, HttpContent)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a POST request to the specified Uri as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (string requestUri, System.Net.Http.HttpContent content);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: The HTTP request content sent to the server.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.PostAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)\n  commentId: M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)\n  id: PostAsync(System.Uri,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: PostAsync(Uri, HttpContent)\n  nameWithType: HttpClient.PostAsync(Uri, HttpContent)\n  fullName: HttpClient.PostAsync(Uri, HttpContent)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a POST request to the specified Uri as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (Uri requestUri, System.Net.Http.HttpContent content);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: The HTTP request content sent to the server.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.PostAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)\n  commentId: M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)\n  id: PutAsync(System.String,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: PutAsync(String, HttpContent)\n  nameWithType: HttpClient.PutAsync(String, HttpContent)\n  fullName: HttpClient.PutAsync(String, HttpContent)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a PUT request to the specified Uri as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (string requestUri, System.Net.Http.HttpContent content);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: The HTTP request content sent to the server.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.PutAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)\n  commentId: M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)\n  id: PutAsync(System.Uri,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: PutAsync(Uri, HttpContent)\n  nameWithType: HttpClient.PutAsync(Uri, HttpContent)\n  fullName: HttpClient.PutAsync(Uri, HttpContent)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a PUT request to the specified Uri as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (Uri requestUri, System.Net.Http.HttpContent content);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: The HTTP request content sent to the server.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.PutAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  id: PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: PutAsync(String, HttpContent, CancellationToken)\n  nameWithType: HttpClient.PutAsync(String, HttpContent, CancellationToken)\n  fullName: HttpClient.PutAsync(String, HttpContent, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a PUT request with a cancellation token as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: The Uri the request is sent to.\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: The HTTP request content sent to the server.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.PutAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  id: PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: PutAsync(Uri, HttpContent, CancellationToken)\n  nameWithType: HttpClient.PutAsync(Uri, HttpContent, CancellationToken)\n  fullName: HttpClient.PutAsync(Uri, HttpContent, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send a PUT request with a cancellation token as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the whole response (including content) is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: The Uri the request is sent to.\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: The HTTP request content sent to the server.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.PutAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>requestUri</code> was `null`.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)\n  fullName: HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send an HTTP request as an asynchronous operation.\n  remarks: This operation will not block. Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: The HTTP request message to send.\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: When the operation should complete (as soon as a response is available or after reading the whole response content).\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to cancel operation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>request</code> was `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)\n  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)\n  id: SendAsync(System.Net.Http.HttpRequestMessage)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: SendAsync(HttpRequestMessage)\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage)\n  fullName: HttpClient.SendAsync(HttpRequestMessage)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send an HTTP request as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request);\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: The HTTP request message to send.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>request</code> was `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)\n  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)\n  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: SendAsync(HttpRequestMessage, HttpCompletionOption)\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption)\n  fullName: HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send an HTTP request as an asynchronous operation.\n  remarks: This operation will not block. Depending on the value of the `completionOption` parameter, the returned <xref:System.Threading.Tasks.Task%601> object will complete as soon as a response is available or the entire response including content is read.\n  syntax:\n    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: The HTTP request message to send.\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: When the operation should complete (as soon as a response is available or after reading the whole response content).\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>request</code> was `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: SendAsync(HttpRequestMessage, CancellationToken)\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage, CancellationToken)\n  fullName: HttpClient.SendAsync(HttpRequestMessage, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send an HTTP request as an asynchronous operation.\n  remarks: This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.\n  syntax:\n    content: public override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: The HTTP request message to send.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to cancel operation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpClient.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>request</code> was `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The request message was already sent by the <xref href=\"System.Net.Http.HttpClient\"></xref> instance.\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpClient.Timeout\n  commentId: P:System.Net.Http.HttpClient.Timeout\n  id: Timeout\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  name: Timeout\n  nameWithType: HttpClient.Timeout\n  fullName: HttpClient.Timeout\n  type: Property\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Gets or sets the timespan to wait before the request times out.\n  remarks: \"The default value is 100,000 milliseconds (100 seconds).  \\n  \\n To set an infinite timeout, set the property value to <xref:System.Threading.Timeout.InfiniteTimeSpan>.  \\n  \\n A Domain Name System (DNS) query may take up to 15 seconds to return or time out. If your request contains a host name that requires resolution and you set <xref:System.Net.Http.HttpClient.Timeout%2A> to a value less than 15 seconds, it may take 15 seconds or more before a <xref:System.Net.WebException> is thrown to indicate a timeout on your request.  \\n  \\n The same timeout will apply for all requests using this <xref:System.Net.Http.HttpClient> instance.  You may also set different timeouts for individual requests using a <xref:System.Threading.CancellationTokenSource> on a task. Note that only the shorter of the two timeouts will apply.\"\n  syntax:\n    content: public TimeSpan Timeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: The timespan to wait before the request times out.\n  overload: System.Net.Http.HttpClient.Timeout*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The timeout specified is less than or equal to zero and is not <xref href=\"System.Threading.Timeout.InfiniteTimeSpan\"></xref>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An operation has already been started on the current instance.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current instance has been disposed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.Net.Http.HttpMessageInvoker\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpMessageInvoker\n  nameWithType: HttpMessageInvoker\n  fullName: System.Net.Http.HttpMessageInvoker\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Net.Http.HttpRequestException\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpRequestException\n  nameWithType: HttpRequestException\n  fullName: System.Net.Http.HttpRequestException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.Net.Http.HttpClient.#ctor\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: HttpClient()\n  nameWithType: HttpClient.HttpClient()\n  fullName: HttpClient.HttpClient()\n- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: HttpClient(HttpMessageHandler)\n  nameWithType: HttpClient.HttpClient(HttpMessageHandler)\n  fullName: HttpClient.HttpClient(HttpMessageHandler)\n- uid: System.Net.Http.HttpMessageHandler\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpMessageHandler\n  nameWithType: HttpMessageHandler\n  fullName: System.Net.Http.HttpMessageHandler\n- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: HttpClient(HttpMessageHandler, Boolean)\n  nameWithType: HttpClient.HttpClient(HttpMessageHandler, Boolean)\n  fullName: HttpClient.HttpClient(HttpMessageHandler, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Http.HttpClient.BaseAddress\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: BaseAddress\n  nameWithType: HttpClient.BaseAddress\n  fullName: HttpClient.BaseAddress\n- uid: System.Uri\n  parent: System\n  isExternal: false\n  name: Uri\n  nameWithType: Uri\n  fullName: System.Uri\n- uid: System.Net.Http.HttpClient.CancelPendingRequests\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: CancelPendingRequests()\n  nameWithType: HttpClient.CancelPendingRequests()\n  fullName: HttpClient.CancelPendingRequests()\n- uid: System.Net.Http.HttpClient.DefaultRequestHeaders\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: DefaultRequestHeaders\n  nameWithType: HttpClient.DefaultRequestHeaders\n  fullName: HttpClient.DefaultRequestHeaders\n- uid: System.Net.Http.Headers.HttpRequestHeaders\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: HttpRequestHeaders\n  nameWithType: HttpRequestHeaders\n  fullName: System.Net.Http.Headers.HttpRequestHeaders\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: DeleteAsync(String, CancellationToken)\n  nameWithType: HttpClient.DeleteAsync(String, CancellationToken)\n  fullName: HttpClient.DeleteAsync(String, CancellationToken)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Net.Http.HttpResponseMessage\n  name: HttpResponseMessage\n  nameWithType: HttpResponseMessage\n  fullName: System.Net.Http.HttpResponseMessage\n- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<HttpResponseMessage>\n  nameWithType: Task<HttpResponseMessage>\n  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Http.HttpResponseMessage\n    name: HttpResponseMessage\n    nameWithType: HttpResponseMessage\n    fullName: System.Net.Http.HttpResponseMessage\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: DeleteAsync(Uri, CancellationToken)\n  nameWithType: HttpClient.DeleteAsync(Uri, CancellationToken)\n  fullName: HttpClient.DeleteAsync(Uri, CancellationToken)\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: DeleteAsync(String)\n  nameWithType: HttpClient.DeleteAsync(String)\n  fullName: HttpClient.DeleteAsync(String)\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: DeleteAsync(Uri)\n  nameWithType: HttpClient.DeleteAsync(Uri)\n  fullName: HttpClient.DeleteAsync(Uri)\n- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HttpClient.Dispose(Boolean)\n  fullName: HttpClient.Dispose(Boolean)\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetAsync(Uri, HttpCompletionOption, CancellationToken)\n  nameWithType: HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken)\n  fullName: HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken)\n- uid: System.Net.Http.HttpCompletionOption\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpCompletionOption\n  nameWithType: HttpCompletionOption\n  fullName: System.Net.Http.HttpCompletionOption\n- uid: System.Net.Http.HttpClient.GetAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetAsync(String)\n  nameWithType: HttpClient.GetAsync(String)\n  fullName: HttpClient.GetAsync(String)\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetAsync(Uri)\n  nameWithType: HttpClient.GetAsync(Uri)\n  fullName: HttpClient.GetAsync(Uri)\n- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetAsync(String, HttpCompletionOption)\n  nameWithType: HttpClient.GetAsync(String, HttpCompletionOption)\n  fullName: HttpClient.GetAsync(String, HttpCompletionOption)\n- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetAsync(String, CancellationToken)\n  nameWithType: HttpClient.GetAsync(String, CancellationToken)\n  fullName: HttpClient.GetAsync(String, CancellationToken)\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetAsync(Uri, HttpCompletionOption)\n  nameWithType: HttpClient.GetAsync(Uri, HttpCompletionOption)\n  fullName: HttpClient.GetAsync(Uri, HttpCompletionOption)\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetAsync(Uri, CancellationToken)\n  nameWithType: HttpClient.GetAsync(Uri, CancellationToken)\n  fullName: HttpClient.GetAsync(Uri, CancellationToken)\n- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetAsync(String, HttpCompletionOption, CancellationToken)\n  nameWithType: HttpClient.GetAsync(String, HttpCompletionOption, CancellationToken)\n  fullName: HttpClient.GetAsync(String, HttpCompletionOption, CancellationToken)\n- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetByteArrayAsync(Uri)\n  nameWithType: HttpClient.GetByteArrayAsync(Uri)\n  fullName: HttpClient.GetByteArrayAsync(Uri)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Threading.Tasks.Task{System.Byte[]}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Byte[]>\n  nameWithType: Task<Byte[]>\n  fullName: System.Threading.Tasks.Task<System.Byte[]>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetByteArrayAsync(String)\n  nameWithType: HttpClient.GetByteArrayAsync(String)\n  fullName: HttpClient.GetByteArrayAsync(String)\n- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetStreamAsync(String)\n  nameWithType: HttpClient.GetStreamAsync(String)\n  fullName: HttpClient.GetStreamAsync(String)\n- uid: System.IO.Stream\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Threading.Tasks.Task{System.IO.Stream}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Stream>\n  nameWithType: Task<Stream>\n  fullName: System.Threading.Tasks.Task<System.IO.Stream>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: System.IO.Stream\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetStreamAsync(Uri)\n  nameWithType: HttpClient.GetStreamAsync(Uri)\n  fullName: HttpClient.GetStreamAsync(Uri)\n- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetStringAsync(String)\n  nameWithType: HttpClient.GetStringAsync(String)\n  fullName: HttpClient.GetStringAsync(String)\n- uid: System.Threading.Tasks.Task{System.String}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<String>\n  nameWithType: Task<String>\n  fullName: System.Threading.Tasks.Task<System.String>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetStringAsync(Uri)\n  nameWithType: HttpClient.GetStringAsync(Uri)\n  fullName: HttpClient.GetStringAsync(Uri)\n- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: MaxResponseContentBufferSize\n  nameWithType: HttpClient.MaxResponseContentBufferSize\n  fullName: HttpClient.MaxResponseContentBufferSize\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: PostAsync(String, HttpContent, CancellationToken)\n  nameWithType: HttpClient.PostAsync(String, HttpContent, CancellationToken)\n  fullName: HttpClient.PostAsync(String, HttpContent, CancellationToken)\n- uid: System.Net.Http.HttpContent\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpContent\n  nameWithType: HttpContent\n  fullName: System.Net.Http.HttpContent\n- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: PostAsync(Uri, HttpContent, CancellationToken)\n  nameWithType: HttpClient.PostAsync(Uri, HttpContent, CancellationToken)\n  fullName: HttpClient.PostAsync(Uri, HttpContent, CancellationToken)\n- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: PostAsync(String, HttpContent)\n  nameWithType: HttpClient.PostAsync(String, HttpContent)\n  fullName: HttpClient.PostAsync(String, HttpContent)\n- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: PostAsync(Uri, HttpContent)\n  nameWithType: HttpClient.PostAsync(Uri, HttpContent)\n  fullName: HttpClient.PostAsync(Uri, HttpContent)\n- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: PutAsync(String, HttpContent)\n  nameWithType: HttpClient.PutAsync(String, HttpContent)\n  fullName: HttpClient.PutAsync(String, HttpContent)\n- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: PutAsync(Uri, HttpContent)\n  nameWithType: HttpClient.PutAsync(Uri, HttpContent)\n  fullName: HttpClient.PutAsync(Uri, HttpContent)\n- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: PutAsync(String, HttpContent, CancellationToken)\n  nameWithType: HttpClient.PutAsync(String, HttpContent, CancellationToken)\n  fullName: HttpClient.PutAsync(String, HttpContent, CancellationToken)\n- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: PutAsync(Uri, HttpContent, CancellationToken)\n  nameWithType: HttpClient.PutAsync(Uri, HttpContent, CancellationToken)\n  fullName: HttpClient.PutAsync(Uri, HttpContent, CancellationToken)\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)\n  fullName: HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)\n- uid: System.Net.Http.HttpRequestMessage\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpRequestMessage\n  nameWithType: HttpRequestMessage\n  fullName: System.Net.Http.HttpRequestMessage\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: SendAsync(HttpRequestMessage)\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage)\n  fullName: HttpClient.SendAsync(HttpRequestMessage)\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: SendAsync(HttpRequestMessage, HttpCompletionOption)\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption)\n  fullName: HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption)\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: SendAsync(HttpRequestMessage, CancellationToken)\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage, CancellationToken)\n  fullName: HttpClient.SendAsync(HttpRequestMessage, CancellationToken)\n- uid: System.Net.Http.HttpClient.Timeout\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: Timeout\n  nameWithType: HttpClient.Timeout\n  fullName: HttpClient.Timeout\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Net.Http.HttpClient.#ctor*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: HttpClient\n  nameWithType: HttpClient.HttpClient\n  fullName: HttpClient.HttpClient\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.GetAsync*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetAsync\n  nameWithType: HttpClient.GetAsync\n  fullName: HttpClient.GetAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.GetByteArrayAsync*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetByteArrayAsync\n  nameWithType: HttpClient.GetByteArrayAsync\n  fullName: HttpClient.GetByteArrayAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.GetStreamAsync*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetStreamAsync\n  nameWithType: HttpClient.GetStreamAsync\n  fullName: HttpClient.GetStreamAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.GetStringAsync*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: GetStringAsync\n  nameWithType: HttpClient.GetStringAsync\n  fullName: HttpClient.GetStringAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.PostAsync*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: PostAsync\n  nameWithType: HttpClient.PostAsync\n  fullName: HttpClient.PostAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.PutAsync*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: PutAsync\n  nameWithType: HttpClient.PutAsync\n  fullName: HttpClient.PutAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.SendAsync*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: SendAsync\n  nameWithType: HttpClient.SendAsync\n  fullName: HttpClient.SendAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.BaseAddress*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: BaseAddress\n  nameWithType: HttpClient.BaseAddress\n  fullName: HttpClient.BaseAddress\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.CancelPendingRequests*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: CancelPendingRequests\n  nameWithType: HttpClient.CancelPendingRequests\n  fullName: HttpClient.CancelPendingRequests\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.DefaultRequestHeaders*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: DefaultRequestHeaders\n  nameWithType: HttpClient.DefaultRequestHeaders\n  fullName: HttpClient.DefaultRequestHeaders\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.DeleteAsync*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: DeleteAsync\n  nameWithType: HttpClient.DeleteAsync\n  fullName: HttpClient.DeleteAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.Dispose*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: Dispose\n  nameWithType: HttpClient.Dispose\n  fullName: HttpClient.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: MaxResponseContentBufferSize\n  nameWithType: HttpClient.MaxResponseContentBufferSize\n  fullName: HttpClient.MaxResponseContentBufferSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Net.Http.HttpClient.Timeout*\n  parent: System.Net.Http.HttpClient\n  isExternal: false\n  name: Timeout\n  nameWithType: HttpClient.Timeout\n  fullName: HttpClient.Timeout\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpClient.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Net.Http.HttpMessageInvoker.Dispose\n  parent: System.Net.Http.HttpMessageInvoker\n  isExternal: false\n  name: Dispose()\n  nameWithType: HttpMessageInvoker.Dispose()\n  fullName: HttpMessageInvoker.Dispose()\n"}