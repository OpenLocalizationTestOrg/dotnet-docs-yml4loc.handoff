{"nodes":[{"content":"Determines the set of valid key sizes for the symmetric cryptographic algorithms.","nodes":[{"pos":[0,81],"content":"Determines the set of valid key sizes for the symmetric cryptographic algorithms.","nodes":[{"content":"Determines the set of valid key sizes for the symmetric cryptographic algorithms.","pos":[0,81]}]}],"pos":[666,748],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.KeySizes\"></xref> class with the specified key values.","nodes":[{"pos":[0,129],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.KeySizes\"&gt;&lt;/xref&gt;</ph> class with the specified key values.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.KeySizes\"></xref> class with the specified key values."}],"pos":[3442,3572],"yaml":true},{"content":"The minimum valid key size.","nodes":[{"pos":[0,27],"content":"The minimum valid key size.","nodes":[{"content":"The minimum valid key size.","pos":[0,27]}]}],"pos":[4475,4503],"yaml":true},{"content":"The maximum valid key size.","nodes":[{"pos":[0,27],"content":"The maximum valid key size.","nodes":[{"content":"The maximum valid key size.","pos":[0,27]}]}],"pos":[4565,4593],"yaml":true},{"content":"The interval between valid key sizes.","nodes":[{"pos":[0,37],"content":"The interval between valid key sizes.","nodes":[{"content":"The interval between valid key sizes.","pos":[0,37]}]}],"pos":[4656,4694],"yaml":true},{"content":"Specifies the maximum key size in bits.","nodes":[{"pos":[0,39],"content":"Specifies the maximum key size in bits.","nodes":[{"content":"Specifies the maximum key size in bits.","pos":[0,39]}]}],"pos":[6114,6154],"yaml":true},{"content":"The maximum key size in bits.","nodes":[{"pos":[0,29],"content":"The maximum key size in bits.","nodes":[{"content":"The maximum key size in bits.","pos":[0,29]}]}],"pos":[7018,7048],"yaml":true},{"content":"Specifies the minimum key size in bits.","nodes":[{"pos":[0,39],"content":"Specifies the minimum key size in bits.","nodes":[{"content":"Specifies the minimum key size in bits.","pos":[0,39]}]}],"pos":[8470,8510],"yaml":true},{"content":"The minimum key size in bits.","nodes":[{"pos":[0,29],"content":"The minimum key size in bits.","nodes":[{"content":"The minimum key size in bits.","pos":[0,29]}]}],"pos":[9374,9404],"yaml":true},{"content":"Specifies the interval between valid key sizes in bits.","nodes":[{"pos":[0,55],"content":"Specifies the interval between valid key sizes in bits.","nodes":[{"content":"Specifies the interval between valid key sizes in bits.","pos":[0,55]}]}],"pos":[10832,10888],"yaml":true},{"content":"The interval between valid key sizes in bits.","nodes":[{"pos":[0,45],"content":"The interval between valid key sizes in bits.","nodes":[{"content":"The interval between valid key sizes in bits.","pos":[0,45]}]}],"pos":[11754,11800],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.KeySizes\n  commentId: T:System.Security.Cryptography.KeySizes\n  id: KeySizes\n  children:\n  - System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)\n  - System.Security.Cryptography.KeySizes.MaxSize\n  - System.Security.Cryptography.KeySizes.MinSize\n  - System.Security.Cryptography.KeySizes.SkipSize\n  langs:\n  - csharp\n  name: KeySizes\n  nameWithType: KeySizes\n  fullName: System.Security.Cryptography.KeySizes\n  type: Class\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Determines the set of valid key sizes for the symmetric cryptographic algorithms.\n  remarks: ''\n  example:\n  - \"The following example shows the use of members of the <xref:System.Security.Cryptography.KeySizes> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.KeySizes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/CPP/members.cpp#1)]\\n [!code-csharp[System.Security.Cryptography.KeySizes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/CS/members.cs#1)]\\n [!code-vb[System.Security.Cryptography.KeySizes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/VB/members.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class KeySizes\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeySizes.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32,System.Int32)'\n  parent: System.Security.Cryptography.KeySizes\n  langs:\n  - csharp\n  name: KeySizes(Int32, Int32, Int32)\n  nameWithType: KeySizes.KeySizes(Int32, Int32, Int32)\n  fullName: KeySizes.KeySizes(Int32, Int32, Int32)\n  type: Constructor\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.KeySizes\"></xref> class with the specified key values.\n  remarks: ''\n  example:\n  - \"The following code shows the use of the <xref:System.Security.Cryptography.KeySizes.%23ctor%2A> constructor. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.KeySizes> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.KeySizes#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/CPP/members.cpp#2)]\\n [!code-csharp[System.Security.Cryptography.KeySizes#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/CS/members.cs#2)]\\n [!code-vb[System.Security.Cryptography.KeySizes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/VB/members.vb#2)]\"\n  syntax:\n    content: public KeySizes (int minSize, int maxSize, int skipSize);\n    parameters:\n    - id: minSize\n      type: System.Int32\n      description: The minimum valid key size.\n    - id: maxSize\n      type: System.Int32\n      description: The maximum valid key size.\n    - id: skipSize\n      type: System.Int32\n      description: The interval between valid key sizes.\n  overload: System.Security.Cryptography.KeySizes.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeySizes.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.KeySizes.MaxSize\n  commentId: P:System.Security.Cryptography.KeySizes.MaxSize\n  id: MaxSize\n  parent: System.Security.Cryptography.KeySizes\n  langs:\n  - csharp\n  name: MaxSize\n  nameWithType: KeySizes.MaxSize\n  fullName: KeySizes.MaxSize\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Specifies the maximum key size in bits.\n  remarks: ''\n  example:\n  - \"The following code shows how to retrieve the use of the <xref:System.Security.Cryptography.KeySizes.MaxSize%2A> property. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.KeySizes> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.KeySizes#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/CPP/members.cpp#4)]\\n [!code-csharp[System.Security.Cryptography.KeySizes#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/CS/members.cs#4)]\\n [!code-vb[System.Security.Cryptography.KeySizes#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/VB/members.vb#4)]\"\n  syntax:\n    content: public int MaxSize { get; }\n    return:\n      type: System.Int32\n      description: The maximum key size in bits.\n  overload: System.Security.Cryptography.KeySizes.MaxSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeySizes.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.KeySizes.MinSize\n  commentId: P:System.Security.Cryptography.KeySizes.MinSize\n  id: MinSize\n  parent: System.Security.Cryptography.KeySizes\n  langs:\n  - csharp\n  name: MinSize\n  nameWithType: KeySizes.MinSize\n  fullName: KeySizes.MinSize\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Specifies the minimum key size in bits.\n  remarks: ''\n  example:\n  - \"The following code shows how to retrieve the use of the <xref:System.Security.Cryptography.KeySizes.MinSize%2A> property. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.KeySizes> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.KeySizes#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/CPP/members.cpp#3)]\\n [!code-csharp[System.Security.Cryptography.KeySizes#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/CS/members.cs#3)]\\n [!code-vb[System.Security.Cryptography.KeySizes#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/VB/members.vb#3)]\"\n  syntax:\n    content: public int MinSize { get; }\n    return:\n      type: System.Int32\n      description: The minimum key size in bits.\n  overload: System.Security.Cryptography.KeySizes.MinSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeySizes.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.KeySizes.SkipSize\n  commentId: P:System.Security.Cryptography.KeySizes.SkipSize\n  id: SkipSize\n  parent: System.Security.Cryptography.KeySizes\n  langs:\n  - csharp\n  name: SkipSize\n  nameWithType: KeySizes.SkipSize\n  fullName: KeySizes.SkipSize\n  type: Property\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  - mscorlib\n  - netstandard\n  namespace: System.Security.Cryptography\n  summary: Specifies the interval between valid key sizes in bits.\n  remarks: ''\n  example:\n  - \"The following code shows how to retrieve the use of the <xref:System.Security.Cryptography.KeySizes.SkipSize%2A> property. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.KeySizes> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.KeySizes#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/CPP/members.cpp#5)]\\n [!code-csharp[System.Security.Cryptography.KeySizes#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/CS/members.cs#5)]\\n [!code-vb[System.Security.Cryptography.KeySizes#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.KeySizes/VB/members.vb#5)]\"\n  syntax:\n    content: public int SkipSize { get; }\n    return:\n      type: System.Int32\n      description: The interval between valid key sizes in bits.\n  overload: System.Security.Cryptography.KeySizes.SkipSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeySizes.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)\n  parent: System.Security.Cryptography.KeySizes\n  isExternal: false\n  name: KeySizes(Int32, Int32, Int32)\n  nameWithType: KeySizes.KeySizes(Int32, Int32, Int32)\n  fullName: KeySizes.KeySizes(Int32, Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.KeySizes.MaxSize\n  parent: System.Security.Cryptography.KeySizes\n  isExternal: false\n  name: MaxSize\n  nameWithType: KeySizes.MaxSize\n  fullName: KeySizes.MaxSize\n- uid: System.Security.Cryptography.KeySizes.MinSize\n  parent: System.Security.Cryptography.KeySizes\n  isExternal: false\n  name: MinSize\n  nameWithType: KeySizes.MinSize\n  fullName: KeySizes.MinSize\n- uid: System.Security.Cryptography.KeySizes.SkipSize\n  parent: System.Security.Cryptography.KeySizes\n  isExternal: false\n  name: SkipSize\n  nameWithType: KeySizes.SkipSize\n  fullName: KeySizes.SkipSize\n- uid: System.Security.Cryptography.KeySizes.#ctor*\n  parent: System.Security.Cryptography.KeySizes\n  isExternal: false\n  name: KeySizes\n  nameWithType: KeySizes.KeySizes\n  fullName: KeySizes.KeySizes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeySizes.xml\n- uid: System.Security.Cryptography.KeySizes.MaxSize*\n  parent: System.Security.Cryptography.KeySizes\n  isExternal: false\n  name: MaxSize\n  nameWithType: KeySizes.MaxSize\n  fullName: KeySizes.MaxSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeySizes.xml\n- uid: System.Security.Cryptography.KeySizes.MinSize*\n  parent: System.Security.Cryptography.KeySizes\n  isExternal: false\n  name: MinSize\n  nameWithType: KeySizes.MinSize\n  fullName: KeySizes.MinSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeySizes.xml\n- uid: System.Security.Cryptography.KeySizes.SkipSize*\n  parent: System.Security.Cryptography.KeySizes\n  isExternal: false\n  name: SkipSize\n  nameWithType: KeySizes.SkipSize\n  fullName: KeySizes.SkipSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeySizes.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}